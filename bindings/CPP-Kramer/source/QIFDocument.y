%{

#include <stdio.h>             // for stderr
#include <string.h>            // for strcat
#include <stdlib.h>            // for malloc, free
#include <map>                 // for map
#ifdef OWL
#include "owlQIFDocumentClasses.hh"
#else
#include "QIFDocumentClasses.hh"
#endif

#define YYERROR_VERBOSE
#define YYDEBUG 1

QIFDocumentFile * QIFDocumentTree; // the parse tree

extern int yylex();
int yyReadData = 0;
int yyReadDataList = 0;
std::map<XmlSchemaInstanceBase *, XmlSchemaInstanceBase *> yyUnrefMap;

int yyerror(const char * s);

%}

%union {
  AttributePair *                     AttributePairVal;
  AttributePairLisd *                 LiztAttributePairVal;
  XmlHeaderForQIFDocument *           XmlHeaderForQIFDocumentVal;
  XmlVersion *                        XmlVersionVal;
  int *                               iVal;
  char *                              sVal;
  QIFDocumentFile *                   QIFDocumentFileVal;

  AACMMAccuraciesType *               AACMMAccuraciesTypeVal;
  AACMMAccuracyType *                 AACMMAccuracyTypeVal;
  AACMMB89TestType *                  AACMMB89TestTypeVal;
  AACMMType *                         AACMMTypeVal;
  ABCResolutionType *                 ABCResolutionTypeVal;
  AbsoluteLimitsByUnitType *          AbsoluteLimitsByUnitTypeVal;
  AbsoluteMeasurementsByUnitType *    AbsoluteMeasurementsByUnitTypeVal;
  AccuracySourceEnumType *            AccuracySourceEnumTypeVal;
  AccuracySourceTypeChoicePair *      AccuracySourceTypeChoicePairVal;
  AccuracySourceType *                AccuracySourceTypeVal;
  ActionGroupBaseType *               ActionGroupBaseTypeVal;
  ActionMethodBaseType *              ActionMethodBaseTypeVal;
  ActionMethodsType *                 ActionMethodsTypeVal;
  ActionToTakeEnumType *              ActionToTakeEnumTypeVal;
  ActualComponentSetType *            ActualComponentSetTypeVal;
  ActualComponentSetsType *           ActualComponentSetsTypeVal;
  ActualComponentType *               ActualComponentTypeVal;
  ActualProductTraceabilityType *     ActualProductTraceabilityTypeVal;
  AddressDescriptionEnumType *        AddressDescriptionEnumTypeVal;
  AddressDescriptionTypeChoicePair *  AddressDescriptionTypeChoicePairVal;
  AddressDescriptionType *            AddressDescriptionTypeVal;
  Aggregate12CoreType *               Aggregate12CoreTypeVal;
  Aggregate12Type *                   Aggregate12TypeVal;
  Aggregate13CoreType *               Aggregate13CoreTypeVal;
  Aggregate13Type *                   Aggregate13TypeVal;
  AlgorithmType *                     AlgorithmTypeVal;
  AlgorithmType_1007_TypeChoicePair * AlgorithmType_1007_TypeChoicePairVal;
  AlgorithmType_1007_Type *           AlgorithmType_1007_TypeVal;
  AlgorithmType_1_1027_Type *         AlgorithmType_1_1027_TypeVal;
  AlgorithmType_1_1028_Type *         AlgorithmType_1_1028_TypeVal;
  AlgorithmsType *                    AlgorithmsTypeVal;
  AlignmentEnumType *                 AlignmentEnumTypeVal;
  AlignmentFeatur_1008_TypeChoicePair * AlignmentFeatur_1008_TypeChoicePairVal;
  AlignmentFeatur_1008_Type *         AlignmentFeatur_1008_TypeVal;
  AlignmentFeatureType *              AlignmentFeatureTypeVal;
  AlignmentOperationBaseType *        AlignmentOperationBaseTypeVal;
  AlignmentOperationsType *           AlignmentOperationsTypeVal;
  AndType *                           AndTypeVal;
  AngleBetweenAnalysisModeEnumType *  AngleBetweenAnalysisModeEnumTypeVal;
  AngleBetweenCharacteristicDefinitionType * AngleBetweenCharacteristicDefinitionTypeVal;
  AngleBetweenCharacteristicItemType * AngleBetweenCharacteristicItemTypeVal;
  AngleBetweenCharacteristicMeasurementType * AngleBetweenCharacteristicMeasurementTypeVal;
  AngleBetweenCharacteristicNominalType * AngleBetweenCharacteristicNominalTypeVal;
  AngleBetweenCharacteristicStatsEvalType * AngleBetweenCharacteristicStatsEvalTypeVal;
  AngleCharacteristicDefinitionType * AngleCharacteristicDefinitionTypeVal;
  AngleCharacteristicItemType *       AngleCharacteristicItemTypeVal;
  AngleCharacteristicMeasurementType * AngleCharacteristicMeasurementTypeVal;
  AngleCharacteristicNominalType *    AngleCharacteristicNominalTypeVal;
  AngleCharacteristicStatsEvalType *  AngleCharacteristicStatsEvalTypeVal;
  AngleFromCharacteristicDefinitionType * AngleFromCharacteristicDefinitionTypeVal;
  AngleFromCharacteristicItemType *   AngleFromCharacteristicItemTypeVal;
  AngleFromCharacteristicMeasurementType * AngleFromCharacteristicMeasurementTypeVal;
  AngleFromCharacteristicNominalType * AngleFromCharacteristicNominalTypeVal;
  AngleFromCharacteristicStatsEvalType * AngleFromCharacteristicStatsEvalTypeVal;
  AngleFunctionDiscreteType *         AngleFunctionDiscreteTypeVal;
  AngleRangeType *                    AngleRangeTypeVal;
  AngularCharacte_1045_TypeChoicePair * AngularCharacte_1045_TypeChoicePairVal;
  AngularCharacte_1045_Type *         AngularCharacte_1045_TypeVal;
  AngularCharacte_1126_TypeChoicePair * AngularCharacte_1126_TypeChoicePairVal;
  AngularCharacte_1126_Type *         AngularCharacte_1126_TypeVal;
  AngularCharacte_1147_Type *         AngularCharacte_1147_TypeVal;
  AngularCharacte_1148_Type *         AngularCharacte_1148_TypeVal;
  AngularCharacte_1149_Type *         AngularCharacte_1149_TypeVal;
  AngularCharacte_1150_Type *         AngularCharacte_1150_TypeVal;
  AngularCharacteristicStatsEvalType * AngularCharacteristicStatsEvalTypeVal;
  AngularCoordina_1046_TypeChoicePair * AngularCoordina_1046_TypeChoicePairVal;
  AngularCoordina_1046_Type *         AngularCoordina_1046_TypeVal;
  AngularCoordinateCharacteristicDefinitionType * AngularCoordinateCharacteristicDefinitionTypeVal;
  AngularCoordinateCharacteristicItemType * AngularCoordinateCharacteristicItemTypeVal;
  AngularCoordinateCharacteristicMeasurementType * AngularCoordinateCharacteristicMeasurementTypeVal;
  AngularCoordinateCharacteristicNominalType * AngularCoordinateCharacteristicNominalTypeVal;
  AngularCoordinateCharacteristicStatsEvalType * AngularCoordinateCharacteristicStatsEvalTypeVal;
  AngularCoordinateDirectionEnumType * AngularCoordinateDirectionEnumTypeVal;
  AngularErrorType *                  AngularErrorTypeVal;
  AngularToleranc_1009_TypeChoicePair * AngularToleranc_1009_TypeChoicePairVal;
  AngularToleranc_1009_Type *         AngularToleranc_1009_TypeVal;
  AngularToleranc_1010_TypeChoicePair * AngularToleranc_1010_TypeChoicePairVal;
  AngularToleranc_1010_Type *         AngularToleranc_1010_TypeVal;
  AngularToleranc_1029_Type *         AngularToleranc_1029_TypeVal;
  AngularToleranc_1030_Type *         AngularToleranc_1030_TypeVal;
  AngularToleranceDefinitionType *    AngularToleranceDefinitionTypeVal;
  AngularToleranceType *              AngularToleranceTypeVal;
  AngularUnitType *                   AngularUnitTypeVal;
  AngularValueType *                  AngularValueTypeVal;
  AngularityCharacteristicDefinitionType * AngularityCharacteristicDefinitionTypeVal;
  AngularityCharacteristicItemType *  AngularityCharacteristicItemTypeVal;
  AngularityCharacteristicMeasurementType * AngularityCharacteristicMeasurementTypeVal;
  AngularityCharacteristicNominalType * AngularityCharacteristicNominalTypeVal;
  AngularityCharacteristicStatsEvalType * AngularityCharacteristicStatsEvalTypeVal;
  AnnotationViewSetType *             AnnotationViewSetTypeVal;
  AnnotationViewType *                AnnotationViewTypeVal;
  ApplicabilityBaseType *             ApplicabilityBaseTypeVal;
  ApplicationType *                   ApplicationTypeVal;
  ArcCircular12CoreType *             ArcCircular12CoreTypeVal;
  ArcCircular12Type *                 ArcCircular12TypeVal;
  ArcCircular13CoreType *             ArcCircular13CoreTypeVal;
  ArcCircular13Type *                 ArcCircular13TypeVal;
  ArcConic12CoreType *                ArcConic12CoreTypeVal;
  ArcConic12Type *                    ArcConic12TypeVal;
  ArcConic13CoreType *                ArcConic13CoreTypeVal;
  ArcConic13Type *                    ArcConic13TypeVal;
  ArcConicFormEnumType *              ArcConicFormEnumTypeVal;
  Area2dTypeChoicePair *              Area2dTypeChoicePairVal;
  Area2dType *                        Area2dTypeVal;
  AreaCharacteris_1047_TypeChoicePair * AreaCharacteris_1047_TypeChoicePairVal;
  AreaCharacteris_1047_Type *         AreaCharacteris_1047_TypeVal;
  AreaToleranceTy_1011_TypeChoicePair * AreaToleranceTy_1011_TypeChoicePairVal;
  AreaToleranceTy_1011_Type *         AreaToleranceTy_1011_TypeVal;
  AreaToleranceTy_1031_Type *         AreaToleranceTy_1031_TypeVal;
  AreaToleranceType *                 AreaToleranceTypeVal;
  AreaUnitType *                      AreaUnitTypeVal;
  AreaValueType *                     AreaValueTypeVal;
  Areas2dType *                       Areas2dTypeVal;
  ArithmeticCharacteristicParameterType * ArithmeticCharacteristicParameterTypeVal;
  ArithmeticComparisonEnumType *      ArithmeticComparisonEnumTypeVal;
  ArithmeticConstantType *            ArithmeticConstantTypeVal;
  ArithmeticDMEParameterType *        ArithmeticDMEParameterTypeVal;
  ArithmeticEqualType *               ArithmeticEqualTypeVal;
  ArithmeticExpressionBaseType *      ArithmeticExpressionBaseTypeVal;
  ArithmeticFeatureParameterType *    ArithmeticFeatureParameterTypeVal;
  ArithmeticParameterValueType *      ArithmeticParameterValueTypeVal;
  ArithmeticPartParameterType *       ArithmeticPartParameterTypeVal;
  ArrayBinaryQIFR_1001_Type *         ArrayBinaryQIFR_1001_TypeVal;
  ArrayBinaryQIFReferenceFullType *   ArrayBinaryQIFReferenceFullTypeVal;
  ArrayBinaryQIFReferenceTypeChoicePair * ArrayBinaryQIFReferenceTypeChoicePairVal;
  ArrayBinaryQIFReferenceType *       ArrayBinaryQIFReferenceTypeVal;
  ArrayBinaryType *                   ArrayBinaryTypeVal;
  ArrayDoubleType *                   ArrayDoubleTypeVal;
  ArrayI2Type *                       ArrayI2TypeVal;
  ArrayI3Type *                       ArrayI3TypeVal;
  ArrayIntType *                      ArrayIntTypeVal;
  ArrayNaturalType *                  ArrayNaturalTypeVal;
  ArrayNonDestructiveTestingType *    ArrayNonDestructiveTestingTypeVal;
  ArrayPairReferenceFullType *        ArrayPairReferenceFullTypeVal;
  ArrayPoint2dType *                  ArrayPoint2dTypeVal;
  ArrayPointType *                    ArrayPointTypeVal;
  ArrayQPIdFullReferenceType *        ArrayQPIdFullReferenceTypeVal;
  ArrayReferenceActiveType *          ArrayReferenceActiveTypeVal;
  ArrayReferenceFullType *            ArrayReferenceFullTypeVal;
  ArrayReferenceType *                ArrayReferenceTypeVal;
  ArraySubCurve12Type *               ArraySubCurve12TypeVal;
  ArraySubCurve13Type *               ArraySubCurve13TypeVal;
  ArrayTriangleVertexNormalType *     ArrayTriangleVertexNormalTypeVal;
  ArrayUnitVectorType *               ArrayUnitVectorTypeVal;
  ArrayUnsignedByteType *             ArrayUnsignedByteTypeVal;
  AsmPathType *                       AsmPathTypeVal;
  AsmPathsType *                      AsmPathsTypeVal;
  AssemblySetType *                   AssemblySetTypeVal;
  AssemblyType *                      AssemblyTypeVal;
  AssignableCauseEnumType *           AssignableCauseEnumTypeVal;
  AssignableCauseType *               AssignableCauseTypeVal;
  AssignableCause_1127_TypeChoicePair * AssignableCause_1127_TypeChoicePairVal;
  AssignableCause_1127_Type *         AssignableCause_1127_TypeVal;
  AssignableCausesType *              AssignableCausesTypeVal;
  AssociatedTolerancedFeatureSpecificationElementEnumType * AssociatedTolerancedFeatureSpecificationElementEnumTypeVal;
  Attr23CoreEnumType *                Attr23CoreEnumTypeVal;
  AttributeBaseType *                 AttributeBaseTypeVal;
  AttributeBoolType *                 AttributeBoolTypeVal;
  AttributeD1Type *                   AttributeD1TypeVal;
  AttributeD2Type *                   AttributeD2TypeVal;
  AttributeD3Type *                   AttributeD3TypeVal;
  AttributeI1Type *                   AttributeI1TypeVal;
  AttributeI2Type *                   AttributeI2TypeVal;
  AttributeI3Type *                   AttributeI3TypeVal;
  AttributeQPIdType *                 AttributeQPIdTypeVal;
  AttributeStrType *                  AttributeStrTypeVal;
  AttributeTimeType *                 AttributeTimeTypeVal;
  AttributeUserType *                 AttributeUserTypeVal;
  AttributesType *                    AttributesTypeVal;
  AuthorType *                        AuthorTypeVal;
  AutocollimatorMeasureFeatureMethodType * AutocollimatorMeasureFeatureMethodTypeVal;
  AutocollimatorType *                AutocollimatorTypeVal;
  AuxiliaryBaseType *                 AuxiliaryBaseTypeVal;
  AuxiliarySetType *                  AuxiliarySetTypeVal;
  AverageFeatureType *                AverageFeatureTypeVal;
  AverageFeaturesType *               AverageFeaturesTypeVal;
  AxialDifferentialScaleType *        AxialDifferentialScaleTypeVal;
  AxisType *                          AxisTypeVal;
  BaseFeaturePointListType *          BaseFeaturePointListTypeVal;
  BaseFeaturePointSetType *           BaseFeaturePointSetTypeVal;
  BaseFeatureType *                   BaseFeatureTypeVal;
  BestFitAlignmentOperationType *     BestFitAlignmentOperationTypeVal;
  BiasStudyPlanType *                 BiasStudyPlanTypeVal;
  BiasStudyResultsType *              BiasStudyResultsTypeVal;
  BinaryDataType *                    BinaryDataTypeVal;
  BodyFormEnumType *                  BodyFormEnumTypeVal;
  BodySetType *                       BodySetTypeVal;
  BodyType *                          BodyTypeVal;
  BooleanConstantEnumType *           BooleanConstantEnumTypeVal;
  BooleanEqualType *                  BooleanEqualTypeVal;
  BooleanExpressionBaseType *         BooleanExpressionBaseTypeVal;
  BottomEnumType *                    BottomEnumTypeVal;
  BottomTypeChoicePair *              BottomTypeChoicePairVal;
  BottomType *                        BottomTypeVal;
  BoundingBoxAxisAlignedType *        BoundingBoxAxisAlignedTypeVal;
  BoundingBoxType *                   BoundingBoxTypeVal;
  CADCoordinateSystemType *           CADCoordinateSystemTypeVal;
  CMMAccuracyTestBaseType *           CMMAccuracyTestBaseTypeVal;
  CMMAxisDirectionsBaseType *         CMMAxisDirectionsBaseTypeVal;
  CMMDirectionEnumType *              CMMDirectionEnumTypeVal;
  CMMSpeedsBaseType *                 CMMSpeedsBaseTypeVal;
  CMMType *                           CMMTypeVal;
  CalibratedComparatorMeasureFeatureMethodType * CalibratedComparatorMeasureFeatureMethodTypeVal;
  CalibrationMasterType *             CalibrationMasterTypeVal;
  CalibrationType *                   CalibrationTypeVal;
  CalibrationsType *                  CalibrationsTypeVal;
  CaliperDialType *                   CaliperDialTypeVal;
  CaliperDigitalType *                CaliperDigitalTypeVal;
  CaliperType *                       CaliperTypeVal;
  CameraFormEnumType *                CameraFormEnumTypeVal;
  CameraSetType *                     CameraSetTypeVal;
  CameraType *                        CameraTypeVal;
  CapabilityStudyPlanType *           CapabilityStudyPlanTypeVal;
  CapabilityStudyResultsType *        CapabilityStudyResultsTypeVal;
  CapabilityStudy_1198_TypeChoicePair * CapabilityStudy_1198_TypeChoicePairVal;
  CapabilityStudy_1198_Type *         CapabilityStudy_1198_TypeVal;
  CapacitiveSensorType *              CapacitiveSensorTypeVal;
  CarriageType *                      CarriageTypeVal;
  CarriagesType *                     CarriagesTypeVal;
  CartesianCMMAccuraciesType *        CartesianCMMAccuraciesTypeVal;
  CartesianCMMAccuracyType *          CartesianCMMAccuracyTypeVal;
  CartesianCMMAxisDirectionsType *    CartesianCMMAxisDirectionsTypeVal;
  CartesianCMMB89TestType *           CartesianCMMB89TestTypeVal;
  CartesianCMMGeometryEnumType *      CartesianCMMGeometryEnumTypeVal;
  CartesianCMMGeometryTypeChoicePair * CartesianCMMGeometryTypeChoicePairVal;
  CartesianCMMGeometryType *          CartesianCMMGeometryTypeVal;
  CartesianCMMSpeedsType *            CartesianCMMSpeedsTypeVal;
  CartesianCMMType *                  CartesianCMMTypeVal;
  CartesianMeasurementDeviceScalesType * CartesianMeasurementDeviceScalesTypeVal;
  CartesianResolu_1239_TypeChoicePair * CartesianResolu_1239_TypeChoicePairVal;
  CartesianResolu_1239_Type *         CartesianResolu_1239_TypeVal;
  CartesianResolu_1244_Type *         CartesianResolu_1244_TypeVal;
  CartesianResolutionType *           CartesianResolutionTypeVal;
  CartesianWorkingVolumeType *        CartesianWorkingVolumeTypeVal;
  CharacteristicAspectsListsType *    CharacteristicAspectsListsTypeVal;
  CharacteristicBalloonLocationEnumType * CharacteristicBalloonLocationEnumTypeVal;
  CharacteristicBalloonStyleEnumType * CharacteristicBalloonStyleEnumTypeVal;
  CharacteristicBalloonType *         CharacteristicBalloonTypeVal;
  CharacteristicDefinitionBaseType *  CharacteristicDefinitionBaseTypeVal;
  CharacteristicDefinitionsType *     CharacteristicDefinitionsTypeVal;
  CharacteristicDesignatorType *      CharacteristicDesignatorTypeVal;
  CharacteristicGroupStatusType *     CharacteristicGroupStatusTypeVal;
  CharacteristicGroupStatusesType *   CharacteristicGroupStatusesTypeVal;
  CharacteristicGroupType *           CharacteristicGroupTypeVal;
  CharacteristicGroupsType *          CharacteristicGroupsTypeVal;
  CharacteristicIsType *              CharacteristicIsTypeVal;
  CharacteristicItemBaseType *        CharacteristicItemBaseTypeVal;
  CharacteristicItemsType *           CharacteristicItemsTypeVal;
  CharacteristicManufacturingProcessGroupType * CharacteristicManufacturingProcessGroupTypeVal;
  CharacteristicMeasurementBaseType * CharacteristicMeasurementBaseTypeVal;
  CharacteristicMeasurementsType *    CharacteristicMeasurementsTypeVal;
  CharacteristicNominalBaseType *     CharacteristicNominalBaseTypeVal;
  CharacteristicNominalsType *        CharacteristicNominalsTypeVal;
  CharacteristicS_1128_TypeChoicePair * CharacteristicS_1128_TypeChoicePairVal;
  CharacteristicS_1128_Type *         CharacteristicS_1128_TypeVal;
  CharacteristicS_1129_TypeChoicePair * CharacteristicS_1129_TypeChoicePairVal;
  CharacteristicS_1129_Type *         CharacteristicS_1129_TypeVal;
  CharacteristicS_1151_TypeChoicePair * CharacteristicS_1151_TypeChoicePairVal;
  CharacteristicS_1151_Type *         CharacteristicS_1151_TypeVal;
  CharacteristicS_1152_TypeChoicePair * CharacteristicS_1152_TypeChoicePairVal;
  CharacteristicS_1152_Type *         CharacteristicS_1152_TypeVal;
  CharacteristicStatsEvalBaseType *   CharacteristicStatsEvalBaseTypeVal;
  CharacteristicStatusEnumType *      CharacteristicStatusEnumTypeVal;
  CharacteristicStatusTypeChoicePair * CharacteristicStatusTypeChoicePairVal;
  CharacteristicStatusType *          CharacteristicStatusTypeVal;
  CharacteristicToleranceType *       CharacteristicToleranceTypeVal;
  CharacteristicTypeEnumType *        CharacteristicTypeEnumTypeVal;
  CharacteristicsStatsType *          CharacteristicsStatsTypeVal;
  ChargeCoupledDeviceCameraSensorType * ChargeCoupledDeviceCameraSensorTypeVal;
  CheckStatusEnumType *               CheckStatusEnumTypeVal;
  ChordCharacteristicDefinitionType * ChordCharacteristicDefinitionTypeVal;
  ChordCharacteristicItemType *       ChordCharacteristicItemTypeVal;
  ChordCharacteristicMeasurementType * ChordCharacteristicMeasurementTypeVal;
  ChordCharacteristicNominalType *    ChordCharacteristicNominalTypeVal;
  ChordCharacteristicStatsEvalType *  ChordCharacteristicStatsEvalTypeVal;
  CircleBestFitType *                 CircleBestFitTypeVal;
  CircleCastType *                    CircleCastTypeVal;
  CircleCheckedFeatureType *          CircleCheckedFeatureTypeVal;
  CircleCheckedTypeChoicePair *       CircleCheckedTypeChoicePairVal;
  CircleCheckedType *                 CircleCheckedTypeVal;
  CircleConstructionMethodTypeChoicePair * CircleConstructionMethodTypeChoicePairVal;
  CircleConstructionMethodType *      CircleConstructionMethodTypeVal;
  CircleCopyType *                    CircleCopyTypeVal;
  CircleFeatureDefinitionType *       CircleFeatureDefinitionTypeVal;
  CircleFeatureItemType *             CircleFeatureItemTypeVal;
  CircleFeatureMeasurementType *      CircleFeatureMeasurementTypeVal;
  CircleFeatureNominalType *          CircleFeatureNominalTypeVal;
  CircleFromConeT_1092_TypeChoicePair * CircleFromConeT_1092_TypeChoicePairVal;
  CircleFromConeT_1092_Type *         CircleFromConeT_1092_TypeVal;
  CircleFromConeType *                CircleFromConeTypeVal;
  CircleFromScanType *                CircleFromScanTypeVal;
  CircleIntersectionType *            CircleIntersectionTypeVal;
  CircleMeasurementDeterminationTypeChoicePair * CircleMeasurementDeterminationTypeChoicePairVal;
  CircleMeasurementDeterminationType * CircleMeasurementDeterminationTypeVal;
  CirclePointSamplingStrategyTypeChoicePair * CirclePointSamplingStrategyTypeChoicePairVal;
  CirclePointSamplingStrategyType *   CirclePointSamplingStrategyTypeVal;
  CircleProjectionType *              CircleProjectionTypeVal;
  CircleRecompType *                  CircleRecompTypeVal;
  CircleTangentThroughType *          CircleTangentThroughTypeVal;
  CircleTangentType *                 CircleTangentTypeVal;
  CircleTransformType *               CircleTransformTypeVal;
  CircleType *                        CircleTypeVal;
  CircularArcBestFitType *            CircularArcBestFitTypeVal;
  CircularArcCastType *               CircularArcCastTypeVal;
  CircularArcCheckedFeatureType *     CircularArcCheckedFeatureTypeVal;
  CircularArcCheckedTypeChoicePair *  CircularArcCheckedTypeChoicePairVal;
  CircularArcCheckedType *            CircularArcCheckedTypeVal;
  CircularArcConstructionMethodTypeChoicePair * CircularArcConstructionMethodTypeChoicePairVal;
  CircularArcConstructionMethodType * CircularArcConstructionMethodTypeVal;
  CircularArcCopyType *               CircularArcCopyTypeVal;
  CircularArcExtractType *            CircularArcExtractTypeVal;
  CircularArcFeatureDefinitionType *  CircularArcFeatureDefinitionTypeVal;
  CircularArcFeatureItemType *        CircularArcFeatureItemTypeVal;
  CircularArcFeatureMeasurementType * CircularArcFeatureMeasurementTypeVal;
  CircularArcFeatureNominalType *     CircularArcFeatureNominalTypeVal;
  CircularArcFromScanType *           CircularArcFromScanTypeVal;
  CircularArcIntersectionType *       CircularArcIntersectionTypeVal;
  CircularArcMeasurementDeterminationTypeChoicePair * CircularArcMeasurementDeterminationTypeChoicePairVal;
  CircularArcMeasurementDeterminationType * CircularArcMeasurementDeterminationTypeVal;
  CircularArcPointSamplingStrategyTypeChoicePair * CircularArcPointSamplingStrategyTypeChoicePairVal;
  CircularArcPointSamplingStrategyType * CircularArcPointSamplingStrategyTypeVal;
  CircularArcProjectionType *         CircularArcProjectionTypeVal;
  CircularArcRecompType *             CircularArcRecompTypeVal;
  CircularArcTransformType *          CircularArcTransformTypeVal;
  CircularRunoutCharacteristicDefinitionType * CircularRunoutCharacteristicDefinitionTypeVal;
  CircularRunoutCharacteristicItemType * CircularRunoutCharacteristicItemTypeVal;
  CircularRunoutCharacteristicMeasurementType * CircularRunoutCharacteristicMeasurementTypeVal;
  CircularRunoutCharacteristicNominalType * CircularRunoutCharacteristicNominalTypeVal;
  CircularRunoutCharacteristicStatsEvalType * CircularRunoutCharacteristicStatsEvalTypeVal;
  CircularUnitAreaType *              CircularUnitAreaTypeVal;
  CircularityChar_1048_TypeChoicePair * CircularityChar_1048_TypeChoicePairVal;
  CircularityChar_1048_Type *         CircularityChar_1048_TypeVal;
  CircularityChar_1049_Type *         CircularityChar_1049_TypeVal;
  CircularityChar_1081_Type *         CircularityChar_1081_TypeVal;
  CircularityChar_1082_TypeChoicePair * CircularityChar_1082_TypeChoicePairVal;
  CircularityChar_1082_Type *         CircularityChar_1082_TypeVal;
  CircularityChar_1090_TypeChoicePair * CircularityChar_1090_TypeChoicePairVal;
  CircularityChar_1090_Type *         CircularityChar_1090_TypeVal;
  CircularityCharacteristicDefinitionType * CircularityCharacteristicDefinitionTypeVal;
  CircularityCharacteristicItemType * CircularityCharacteristicItemTypeVal;
  CircularityCharacteristicMeasurementType * CircularityCharacteristicMeasurementTypeVal;
  CircularityCharacteristicNominalType * CircularityCharacteristicNominalTypeVal;
  CircularityCharacteristicStatsEvalType * CircularityCharacteristicStatsEvalTypeVal;
  ClosedCurvePointSamplingStrategyEnumType * ClosedCurvePointSamplingStrategyEnumTypeVal;
  ClosedShellSetType *                ClosedShellSetTypeVal;
  ClosedShellSetWorkingVolumeType *   ClosedShellSetWorkingVolumeTypeVal;
  CoEdgeMeshType *                    CoEdgeMeshTypeVal;
  CoEdgeType *                        CoEdgeTypeVal;
  CoEdgesMeshType *                   CoEdgesMeshTypeVal;
  CoEdgesType *                       CoEdgesTypeVal;
  CoaxialityCharacteristicDefinitionType * CoaxialityCharacteristicDefinitionTypeVal;
  CoaxialityCharacteristicItemType *  CoaxialityCharacteristicItemTypeVal;
  CoaxialityCharacteristicMeasurementType * CoaxialityCharacteristicMeasurementTypeVal;
  CoaxialityCharacteristicNominalType * CoaxialityCharacteristicNominalTypeVal;
  CoaxialityCharacteristicStatsEvalType * CoaxialityCharacteristicStatsEvalTypeVal;
  CoaxialityDiametricalZoneType *     CoaxialityDiametricalZoneTypeVal;
  CoaxialityNonDiametricalZoneType *  CoaxialityNonDiametricalZoneTypeVal;
  CoaxialityZoneShapeTypeChoicePair * CoaxialityZoneShapeTypeChoicePairVal;
  CoaxialityZoneShapeType *           CoaxialityZoneShapeTypeVal;
  CollectionPlaneType *               CollectionPlaneTypeVal;
  ColorType *                         ColorTypeVal;
  CombinedSphericalResolutionType *   CombinedSphericalResolutionTypeVal;
  CombinedUserDefinedResolutionType * CombinedUserDefinedResolutionTypeVal;
  CommonFileSpecEnumType *            CommonFileSpecEnumTypeVal;
  ComplexTactileProbeSensorType *     ComplexTactileProbeSensorTypeVal;
  ComponentSetType *                  ComponentSetTypeVal;
  ComponentType *                     ComponentTypeVal;
  ComponentType_1237_TypeChoicePair * ComponentType_1237_TypeChoicePairVal;
  ComponentType_1237_Type *           ComponentType_1237_TypeVal;
  CompositeSegmentLowerLevelEnumType * CompositeSegmentLowerLevelEnumTypeVal;
  CompositeSegmentPositionDefinitionType * CompositeSegmentPositionDefinitionTypeVal;
  CompositeSegmentPositionMeasurementType * CompositeSegmentPositionMeasurementTypeVal;
  CompositeSegmentPositionStatsEvalType * CompositeSegmentPositionStatsEvalTypeVal;
  CompositeSegmentProfileDefinitionType * CompositeSegmentProfileDefinitionTypeVal;
  CompositeSegmentProfileMeasurementType * CompositeSegmentProfileMeasurementTypeVal;
  CompositeSegmentProfileStatsEvalType * CompositeSegmentProfileStatsEvalTypeVal;
  CompositeSegmentSymmetryDefinitionType * CompositeSegmentSymmetryDefinitionTypeVal;
  CompositeSegmentSymmetryMeasurementType * CompositeSegmentSymmetryMeasurementTypeVal;
  CompositeSegmentSymmetryStatsEvalType * CompositeSegmentSymmetryStatsEvalTypeVal;
  CompositeSegmentsPositionStatsEvalType * CompositeSegmentsPositionStatsEvalTypeVal;
  CompositeSegmentsProfileStatsEvalType * CompositeSegmentsProfileStatsEvalTypeVal;
  CompositeSegmentsSymmetryStatsEvalType * CompositeSegmentsSymmetryStatsEvalTypeVal;
  CompoundDatumType *                 CompoundDatumTypeVal;
  ComputedTomographyMeasureFeatureMethodType * ComputedTomographyMeasureFeatureMethodTypeVal;
  ComputedTomographyType *            ComputedTomographyTypeVal;
  ConcentricityCharacteristicDefinitionType * ConcentricityCharacteristicDefinitionTypeVal;
  ConcentricityCharacteristicItemType * ConcentricityCharacteristicItemTypeVal;
  ConcentricityCharacteristicMeasurementType * ConcentricityCharacteristicMeasurementTypeVal;
  ConcentricityCharacteristicNominalType * ConcentricityCharacteristicNominalTypeVal;
  ConcentricityCharacteristicStatsEvalType * ConcentricityCharacteristicStatsEvalTypeVal;
  ConcentricityDiametricalZoneType *  ConcentricityDiametricalZoneTypeVal;
  ConcentricityNonDiametricalZoneType * ConcentricityNonDiametricalZoneTypeVal;
  ConcentricitySphericalZoneType *    ConcentricitySphericalZoneTypeVal;
  ConcentricityZoneShapeTypeChoicePair * ConcentricityZoneShapeTypeChoicePairVal;
  ConcentricityZoneShapeType *        ConcentricityZoneShapeTypeVal;
  Cone23CoreType *                    Cone23CoreTypeVal;
  Cone23Type *                        Cone23TypeVal;
  ConeBestFitType *                   ConeBestFitTypeVal;
  ConeCastType *                      ConeCastTypeVal;
  ConeCheckedFeatureType *            ConeCheckedFeatureTypeVal;
  ConeCheckedTypeChoicePair *         ConeCheckedTypeChoicePairVal;
  ConeCheckedType *                   ConeCheckedTypeVal;
  ConeConstructionMethodTypeChoicePair * ConeConstructionMethodTypeChoicePairVal;
  ConeConstructionMethodType *        ConeConstructionMethodTypeVal;
  ConeCopyType *                      ConeCopyTypeVal;
  ConeFeatureDefi_1093_TypeChoicePair * ConeFeatureDefi_1093_TypeChoicePairVal;
  ConeFeatureDefi_1093_Type *         ConeFeatureDefi_1093_TypeVal;
  ConeFeatureDefi_1094_Type *         ConeFeatureDefi_1094_TypeVal;
  ConeFeatureDefinitionType *         ConeFeatureDefinitionTypeVal;
  ConeFeatureItemType *               ConeFeatureItemTypeVal;
  ConeFeatureMeas_1095_TypeChoicePair * ConeFeatureMeas_1095_TypeChoicePairVal;
  ConeFeatureMeas_1095_Type *         ConeFeatureMeas_1095_TypeVal;
  ConeFeatureMeasurementType *        ConeFeatureMeasurementTypeVal;
  ConeFeatureNominalType *            ConeFeatureNominalTypeVal;
  ConeFromScanType *                  ConeFromScanTypeVal;
  ConeMeasurementDeterminationTypeChoicePair * ConeMeasurementDeterminationTypeChoicePairVal;
  ConeMeasurementDeterminationType *  ConeMeasurementDeterminationTypeVal;
  ConePointSamplingStrategyEnumType * ConePointSamplingStrategyEnumTypeVal;
  ConePointSamplingStrategyTypeChoicePair * ConePointSamplingStrategyTypeChoicePairVal;
  ConePointSamplingStrategyType *     ConePointSamplingStrategyTypeVal;
  ConeRecompType *                    ConeRecompTypeVal;
  ConeTransformType *                 ConeTransformTypeVal;
  ConfocalChromaticSensorType *       ConfocalChromaticSensorTypeVal;
  ConicalSegmentBestFitType *         ConicalSegmentBestFitTypeVal;
  ConicalSegmentCastType *            ConicalSegmentCastTypeVal;
  ConicalSegmentCheckedFeatureType *  ConicalSegmentCheckedFeatureTypeVal;
  ConicalSegmentCheckedTypeChoicePair * ConicalSegmentCheckedTypeChoicePairVal;
  ConicalSegmentCheckedType *         ConicalSegmentCheckedTypeVal;
  ConicalSegmentConstructionMethodTypeChoicePair * ConicalSegmentConstructionMethodTypeChoicePairVal;
  ConicalSegmentConstructionMethodType * ConicalSegmentConstructionMethodTypeVal;
  ConicalSegmentCopyType *            ConicalSegmentCopyTypeVal;
  ConicalSegmentF_1096_TypeChoicePair * ConicalSegmentF_1096_TypeChoicePairVal;
  ConicalSegmentF_1096_Type *         ConicalSegmentF_1096_TypeVal;
  ConicalSegmentF_1097_Type *         ConicalSegmentF_1097_TypeVal;
  ConicalSegmentF_1098_TypeChoicePair * ConicalSegmentF_1098_TypeChoicePairVal;
  ConicalSegmentF_1098_Type *         ConicalSegmentF_1098_TypeVal;
  ConicalSegmentFeatureDefinitionType * ConicalSegmentFeatureDefinitionTypeVal;
  ConicalSegmentFeatureItemType *     ConicalSegmentFeatureItemTypeVal;
  ConicalSegmentFeatureMeasurementType * ConicalSegmentFeatureMeasurementTypeVal;
  ConicalSegmentFeatureNominalType *  ConicalSegmentFeatureNominalTypeVal;
  ConicalSegmentMeasurementDeterminationTypeChoicePair * ConicalSegmentMeasurementDeterminationTypeChoicePairVal;
  ConicalSegmentMeasurementDeterminationType * ConicalSegmentMeasurementDeterminationTypeVal;
  ConicalSegmentPointSamplingStrategyTypeChoicePair * ConicalSegmentPointSamplingStrategyTypeChoicePairVal;
  ConicalSegmentPointSamplingStrategyType * ConicalSegmentPointSamplingStrategyTypeVal;
  ConicalSegmentRecompType *          ConicalSegmentRecompTypeVal;
  ConicalSegmentTransformType *       ConicalSegmentTransformTypeVal;
  ConicalTaperCharacteristicDefinitionType * ConicalTaperCharacteristicDefinitionTypeVal;
  ConicalTaperCharacteristicItemType * ConicalTaperCharacteristicItemTypeVal;
  ConicalTaperCharacteristicMeasurementType * ConicalTaperCharacteristicMeasurementTypeVal;
  ConicalTaperCharacteristicNominalType * ConicalTaperCharacteristicNominalTypeVal;
  ConicalTaperCharacteristicStatsEvalType * ConicalTaperCharacteristicStatsEvalTypeVal;
  ConicityCharacteristicDefinitionType * ConicityCharacteristicDefinitionTypeVal;
  ConicityCharacteristicItemType *    ConicityCharacteristicItemTypeVal;
  ConicityCharacteristicMeasurementType * ConicityCharacteristicMeasurementTypeVal;
  ConicityCharacteristicNominalType * ConicityCharacteristicNominalTypeVal;
  ConicityCharacteristicStatsEvalType * ConicityCharacteristicStatsEvalTypeVal;
  ConstantIsType *                    ConstantIsTypeVal;
  ControlIssueDetailsListType *       ControlIssueDetailsListTypeVal;
  ControlIssueDetailsType *           ControlIssueDetailsTypeVal;
  ControlIssueEnumType *              ControlIssueEnumTypeVal;
  ControlIssueTypeChoicePair *        ControlIssueTypeChoicePairVal;
  ControlIssueType *                  ControlIssueTypeVal;
  ControlMethodTy_1199_TypeChoicePair * ControlMethodTy_1199_TypeChoicePairVal;
  ControlMethodTy_1199_Type *         ControlMethodTy_1199_TypeVal;
  ControlMethodType *                 ControlMethodTypeVal;
  ControlMethodsType *                ControlMethodsTypeVal;
  CoordinateEnumType *                CoordinateEnumTypeVal;
  CoordinateMeasureFeatureMethodType * CoordinateMeasureFeatureMethodTypeVal;
  CoordinateSystemActualTransformAssociationType * CoordinateSystemActualTransformAssociationTypeVal;
  CoordinateSystemActualTransformAssociationsType * CoordinateSystemActualTransformAssociationsTypeVal;
  CoordinateSystemCoreType *          CoordinateSystemCoreTypeVal;
  CoordinateSystemListType *          CoordinateSystemListTypeVal;
  CoordinateSystemSetType *           CoordinateSystemSetTypeVal;
  CoordinateSystemType *              CoordinateSystemTypeVal;
  CoordinateSystemsType *             CoordinateSystemsTypeVal;
  CorrectiveActio_1130_TypeChoicePair * CorrectiveActio_1130_TypeChoicePairVal;
  CorrectiveActio_1130_Type *         CorrectiveActio_1130_TypeVal;
  CorrectiveActionPlanType *          CorrectiveActionPlanTypeVal;
  CorrectiveActionPlansType *         CorrectiveActionPlansTypeVal;
  CorrectiveActionType *              CorrectiveActionTypeVal;
  CorrectiveActionsType *             CorrectiveActionsTypeVal;
  CriteriaByUnitType *                CriteriaByUnitTypeVal;
  CriterionAngularType *              CriterionAngularTypeVal;
  CriterionAreaType *                 CriterionAreaTypeVal;
  CriterionDecima_1131_Type *         CriterionDecima_1131_TypeVal;
  CriterionDecimalType *              CriterionDecimalTypeVal;
  CriterionForceType *                CriterionForceTypeVal;
  CriterionIntege_1132_Type *         CriterionIntege_1132_TypeVal;
  CriterionIntegerType *              CriterionIntegerTypeVal;
  CriterionLinearType *               CriterionLinearTypeVal;
  CriterionMassType *                 CriterionMassTypeVal;
  CriterionOutOfType *                CriterionOutOfTypeVal;
  CriterionPressureType *             CriterionPressureTypeVal;
  CriterionSpeedType *                CriterionSpeedTypeVal;
  CriterionTemperatureType *          CriterionTemperatureTypeVal;
  CriterionTimeType *                 CriterionTimeTypeVal;
  CriterionUserDefinedUnitType *      CriterionUserDefinedUnitTypeVal;
  CriticalityAreaEnumType *           CriticalityAreaEnumTypeVal;
  CriticalityLevelEnumType *          CriticalityLevelEnumTypeVal;
  CriticalityType *                   CriticalityTypeVal;
  CriticalityType_1050_TypeChoicePair * CriticalityType_1050_TypeChoicePairVal;
  CriticalityType_1050_Type *         CriticalityType_1050_TypeVal;
  CriticalityType_1051_TypeChoicePair * CriticalityType_1051_TypeChoicePairVal;
  CriticalityType_1051_Type *         CriticalityType_1051_TypeVal;
  Curve12BaseType *                   Curve12BaseTypeVal;
  Curve12OrientedType *               Curve12OrientedTypeVal;
  Curve12SetType *                    Curve12SetTypeVal;
  Curve13BaseType *                   Curve13BaseTypeVal;
  Curve13CoreType *                   Curve13CoreTypeVal;
  Curve13OrientedType *               Curve13OrientedTypeVal;
  Curve13SetType *                    Curve13SetTypeVal;
  CurveCoreBaseType *                 CurveCoreBaseTypeVal;
  CurveLengthCharacteristicDefinitionType * CurveLengthCharacteristicDefinitionTypeVal;
  CurveLengthCharacteristicItemType * CurveLengthCharacteristicItemTypeVal;
  CurveLengthCharacteristicMeasurementType * CurveLengthCharacteristicMeasurementTypeVal;
  CurveLengthCharacteristicNominalType * CurveLengthCharacteristicNominalTypeVal;
  CurveLengthCharacteristicStatsEvalType * CurveLengthCharacteristicStatsEvalTypeVal;
  CurveMeshSetType *                  CurveMeshSetTypeVal;
  CustomerOrganizationType *          CustomerOrganizationTypeVal;
  Cylinder23CoreType *                Cylinder23CoreTypeVal;
  Cylinder23Type *                    Cylinder23TypeVal;
  CylinderBestFitType *               CylinderBestFitTypeVal;
  CylinderCastType *                  CylinderCastTypeVal;
  CylinderCheckedFeatureType *        CylinderCheckedFeatureTypeVal;
  CylinderCheckedTypeChoicePair *     CylinderCheckedTypeChoicePairVal;
  CylinderCheckedType *               CylinderCheckedTypeVal;
  CylinderConstructionMethodTypeChoicePair * CylinderConstructionMethodTypeChoicePairVal;
  CylinderConstructionMethodType *    CylinderConstructionMethodTypeVal;
  CylinderCopyType *                  CylinderCopyTypeVal;
  CylinderFeatureDefinitionType *     CylinderFeatureDefinitionTypeVal;
  CylinderFeatureItemType *           CylinderFeatureItemTypeVal;
  CylinderFeatureMeasurementType *    CylinderFeatureMeasurementTypeVal;
  CylinderFeatureNominalType *        CylinderFeatureNominalTypeVal;
  CylinderFromScanType *              CylinderFromScanTypeVal;
  CylinderMeasurementDeterminationTypeChoicePair * CylinderMeasurementDeterminationTypeChoicePairVal;
  CylinderMeasurementDeterminationType * CylinderMeasurementDeterminationTypeVal;
  CylinderPointSamplingStrategyTypeChoicePair * CylinderPointSamplingStrategyTypeChoicePairVal;
  CylinderPointSamplingStrategyType * CylinderPointSamplingStrategyTypeVal;
  CylinderRecompType *                CylinderRecompTypeVal;
  CylinderTransformType *             CylinderTransformTypeVal;
  CylinderType *                      CylinderTypeVal;
  CylindricalSegmentBestFitType *     CylindricalSegmentBestFitTypeVal;
  CylindricalSegmentCastType *        CylindricalSegmentCastTypeVal;
  CylindricalSegmentCheckedFeatureType * CylindricalSegmentCheckedFeatureTypeVal;
  CylindricalSegmentCheckedTypeChoicePair * CylindricalSegmentCheckedTypeChoicePairVal;
  CylindricalSegmentCheckedType *     CylindricalSegmentCheckedTypeVal;
  CylindricalSegmentConstructionMethodTypeChoicePair * CylindricalSegmentConstructionMethodTypeChoicePairVal;
  CylindricalSegmentConstructionMethodType * CylindricalSegmentConstructionMethodTypeVal;
  CylindricalSegmentCopyType *        CylindricalSegmentCopyTypeVal;
  CylindricalSegmentFeatureDefinitionType * CylindricalSegmentFeatureDefinitionTypeVal;
  CylindricalSegmentFeatureItemType * CylindricalSegmentFeatureItemTypeVal;
  CylindricalSegmentFeatureMeasurementType * CylindricalSegmentFeatureMeasurementTypeVal;
  CylindricalSegmentFeatureNominalType * CylindricalSegmentFeatureNominalTypeVal;
  CylindricalSegmentMeasurementDeterminationTypeChoicePair * CylindricalSegmentMeasurementDeterminationTypeChoicePairVal;
  CylindricalSegmentMeasurementDeterminationType * CylindricalSegmentMeasurementDeterminationTypeVal;
  CylindricalSegmentPointSamplingStrategyTypeChoicePair * CylindricalSegmentPointSamplingStrategyTypeChoicePairVal;
  CylindricalSegmentPointSamplingStrategyType * CylindricalSegmentPointSamplingStrategyTypeVal;
  CylindricalSegmentRecompType *      CylindricalSegmentRecompTypeVal;
  CylindricalSegmentTransformType *   CylindricalSegmentTransformTypeVal;
  CylindricalWorkingVolumeType *      CylindricalWorkingVolumeTypeVal;
  CylindricityCha_1052_TypeChoicePair * CylindricityCha_1052_TypeChoicePairVal;
  CylindricityCha_1052_Type *         CylindricityCha_1052_TypeVal;
  CylindricityCha_1053_Type *         CylindricityCha_1053_TypeVal;
  CylindricityCha_1083_Type *         CylindricityCha_1083_TypeVal;
  CylindricityCha_1084_TypeChoicePair * CylindricityCha_1084_TypeChoicePairVal;
  CylindricityCha_1084_Type *         CylindricityCha_1084_TypeVal;
  CylindricityCha_1091_TypeChoicePair * CylindricityCha_1091_TypeChoicePairVal;
  CylindricityCha_1091_Type *         CylindricityCha_1091_TypeVal;
  CylindricityCharacteristicDefinitionType * CylindricityCharacteristicDefinitionTypeVal;
  CylindricityCharacteristicItemType * CylindricityCharacteristicItemTypeVal;
  CylindricityCharacteristicMeasurementType * CylindricityCharacteristicMeasurementTypeVal;
  CylindricityCharacteristicNominalType * CylindricityCharacteristicNominalTypeVal;
  CylindricityCharacteristicStatsEvalType * CylindricityCharacteristicStatsEvalTypeVal;
  D2Type *                            D2TypeVal;
  D3Type *                            D3TypeVal;
  D4Type *                            D4TypeVal;
  DMEClassNameEnumType *              DMEClassNameEnumTypeVal;
  DMEDecisionBaseType *               DMEDecisionBaseTypeVal;
  DMEDecisionClassType *              DMEDecisionClassTypeVal;
  DMEDecisionIdType *                 DMEDecisionIdTypeVal;
  DMEDecisionMakeModelType *          DMEDecisionMakeModelTypeVal;
  DMEParameterConstraintSetType *     DMEParameterConstraintSetTypeVal;
  DMEParameterConstraintType *        DMEParameterConstraintTypeVal;
  DMESelectionRulesType *             DMESelectionRulesTypeVal;
  DMEThenType *                       DMEThenTypeVal;
  DatumDefinitionType *               DatumDefinitionTypeVal;
  DatumDefinitionsType *              DatumDefinitionsTypeVal;
  DatumFeatureSimulatorModifierTypeChoicePair * DatumFeatureSimulatorModifierTypeChoicePairVal;
  DatumFeatureSimulatorModifierType * DatumFeatureSimulatorModifierTypeVal;
  DatumPrecedenceAlignmentOperationType * DatumPrecedenceAlignmentOperationTypeVal;
  DatumReferenceFrameType *           DatumReferenceFrameTypeVal;
  DatumReferenceFramesType *          DatumReferenceFramesTypeVal;
  DatumTargetDefinitionsType *        DatumTargetDefinitionsTypeVal;
  DatumTargetType *                   DatumTargetTypeVal;
  DatumTranslationType *              DatumTranslationTypeVal;
  DatumType *                         DatumTypeVal;
  DatumWithPreced_1012_TypeChoicePair * DatumWithPreced_1012_TypeChoicePairVal;
  DatumWithPreced_1012_Type *         DatumWithPreced_1012_TypeVal;
  DatumWithPrecedenceType *           DatumWithPrecedenceTypeVal;
  DatumsType *                        DatumsTypeVal;
  DefiningPointMeasurementType *      DefiningPointMeasurementTypeVal;
  DefiningPointNominalType *          DefiningPointNominalTypeVal;
  DefiningPointsMeasurementType *     DefiningPointsMeasurementTypeVal;
  DefiningPointsNominalType *         DefiningPointsNominalTypeVal;
  DefinitionExternalTypeChoicePair *  DefinitionExternalTypeChoicePairVal;
  DefinitionExternalType *            DefinitionExternalTypeVal;
  DegreeOfFreedomEnumType *           DegreeOfFreedomEnumTypeVal;
  DegreesOfFreedo_1013_TypeChoicePair * DegreesOfFreedo_1013_TypeChoicePairVal;
  DegreesOfFreedo_1013_Type *         DegreesOfFreedo_1013_TypeVal;
  DegreesOfFreedomType *              DegreesOfFreedomTypeVal;
  DepthCharacteristicDefinitionType * DepthCharacteristicDefinitionTypeVal;
  DepthCharacteristicItemType *       DepthCharacteristicItemTypeVal;
  DepthCharacteristicMeasurementType * DepthCharacteristicMeasurementTypeVal;
  DepthCharacteristicNominalType *    DepthCharacteristicNominalTypeVal;
  DepthCharacteristicStatsEvalType *  DepthCharacteristicStatsEvalTypeVal;
  DetachableSensorBaseType *          DetachableSensorBaseTypeVal;
  DetachableSensorsType *             DetachableSensorsTypeVal;
  DiameterCharact_1054_TypeChoicePair * DiameterCharact_1054_TypeChoicePairVal;
  DiameterCharact_1054_Type *         DiameterCharact_1054_TypeVal;
  DiameterCharacteristicDefinitionType * DiameterCharacteristicDefinitionTypeVal;
  DiameterCharacteristicItemType *    DiameterCharacteristicItemTypeVal;
  DiameterCharacteristicMeasurementType * DiameterCharacteristicMeasurementTypeVal;
  DiameterCharacteristicNominalType * DiameterCharacteristicNominalTypeVal;
  DiameterCharacteristicStatsEvalType * DiameterCharacteristicStatsEvalTypeVal;
  DiameterModifierEnumType *          DiameterModifierEnumTypeVal;
  DifferentialVariableReluctanceTransducerSensorType * DifferentialVariableReluctanceTransducerSensorTypeVal;
  DigitalDrawingType *                DigitalDrawingTypeVal;
  DigitalModelFormatEnumType *        DigitalModelFormatEnumTypeVal;
  DigitalModelFormatTypeChoicePair *  DigitalModelFormatTypeChoicePairVal;
  DigitalModelFormatType *            DigitalModelFormatTypeVal;
  DigitalModelType *                  DigitalModelTypeVal;
  DimensionCountEnumType *            DimensionCountEnumTypeVal;
  DimensionDeterminationEnumType *    DimensionDeterminationEnumTypeVal;
  DimensionModifierEnumType *         DimensionModifierEnumTypeVal;
  DimensionModifiersType *            DimensionModifiersTypeVal;
  DirectionFeatureType *              DirectionFeatureTypeVal;
  DirectionalOffs_1014_TypeChoicePair * DirectionalOffs_1014_TypeChoicePairVal;
  DirectionalOffs_1014_Type *         DirectionalOffs_1014_TypeVal;
  DirectionalOffsetType *             DirectionalOffsetTypeVal;
  DisplayStyleFormEnumType *          DisplayStyleFormEnumTypeVal;
  DisplayStyleGroupType *             DisplayStyleGroupTypeVal;
  DisplayStyleGroupsType *            DisplayStyleGroupsTypeVal;
  DisplayStyleModeType *              DisplayStyleModeTypeVal;
  DisplayStyleSetType *               DisplayStyleSetTypeVal;
  DisplayStyleType *                  DisplayStyleTypeVal;
  DistanceBetweenAnalysisModeEnumType * DistanceBetweenAnalysisModeEnumTypeVal;
  DistanceBetweenCharacteristicDefinitionType * DistanceBetweenCharacteristicDefinitionTypeVal;
  DistanceBetweenCharacteristicItemType * DistanceBetweenCharacteristicItemTypeVal;
  DistanceBetweenCharacteristicMeasurementType * DistanceBetweenCharacteristicMeasurementTypeVal;
  DistanceBetweenCharacteristicNominalType * DistanceBetweenCharacteristicNominalTypeVal;
  DistanceBetweenCharacteristicStatsEvalType * DistanceBetweenCharacteristicStatsEvalTypeVal;
  DistanceFromCharacteristicDefinitionType * DistanceFromCharacteristicDefinitionTypeVal;
  DistanceFromCharacteristicItemType * DistanceFromCharacteristicItemTypeVal;
  DistanceFromCharacteristicMeasurementType * DistanceFromCharacteristicMeasurementTypeVal;
  DistanceFromCharacteristicNominalType * DistanceFromCharacteristicNominalTypeVal;
  DistanceFromCharacteristicStatsEvalType * DistanceFromCharacteristicStatsEvalTypeVal;
  DistributionTransformationEnumType * DistributionTransformationEnumTypeVal;
  DistributionTransformationTypeChoicePair * DistributionTransformationTypeChoicePairVal;
  DistributionTransformationType *    DistributionTransformationTypeVal;
  DividedByType *                     DividedByTypeVal;
  DocumentFileInstructionType *       DocumentFileInstructionTypeVal;
  DoublePositiveType *                DoublePositiveTypeVal;
  DrawWireSensorType *                DrawWireSensorTypeVal;
  DualNestingIndexFilterSymbolEnumType * DualNestingIndexFilterSymbolEnumTypeVal;
  DualNestingIndexFilterType *        DualNestingIndexFilterTypeVal;
  EddyCurrentSensorType *             EddyCurrentSensorTypeVal;
  EdgeOrientedType *                  EdgeOrientedTypeVal;
  EdgePointCastType *                 EdgePointCastTypeVal;
  EdgePointCheckedFeatureType *       EdgePointCheckedFeatureTypeVal;
  EdgePointCheckedTypeChoicePair *    EdgePointCheckedTypeChoicePairVal;
  EdgePointCheckedType *              EdgePointCheckedTypeVal;
  EdgePointConstructionMethodTypeChoicePair * EdgePointConstructionMethodTypeChoicePairVal;
  EdgePointConstructionMethodType *   EdgePointConstructionMethodTypeVal;
  EdgePointCopyType *                 EdgePointCopyTypeVal;
  EdgePointFeatureDefinitionType *    EdgePointFeatureDefinitionTypeVal;
  EdgePointFeatureItemType *          EdgePointFeatureItemTypeVal;
  EdgePointFeatureMeasurementType *   EdgePointFeatureMeasurementTypeVal;
  EdgePointFeatureNominalType *       EdgePointFeatureNominalTypeVal;
  EdgePointFromScanType *             EdgePointFromScanTypeVal;
  EdgePointMeasurementDeterminationTypeChoicePair * EdgePointMeasurementDeterminationTypeChoicePairVal;
  EdgePointMeasurementDeterminationType * EdgePointMeasurementDeterminationTypeVal;
  EdgePointTransformType *            EdgePointTransformTypeVal;
  EdgeSetType *                       EdgeSetTypeVal;
  EdgeType *                          EdgeTypeVal;
  EffectiveCartesianWorkingVolumeType * EffectiveCartesianWorkingVolumeTypeVal;
  EffectiveClosedShellSetWorkingVolumeType * EffectiveClosedShellSetWorkingVolumeTypeVal;
  EffectiveCylindricalWorkingVolumeType * EffectiveCylindricalWorkingVolumeTypeVal;
  EffectiveDiameterPerformanceTestType * EffectiveDiameterPerformanceTestTypeVal;
  EffectiveSphericalWorkingVolumeType * EffectiveSphericalWorkingVolumeTypeVal;
  EffectiveUserDefinedWorkingVolumeType * EffectiveUserDefinedWorkingVolumeTypeVal;
  EffectiveWorkingVolumeBaseType *    EffectiveWorkingVolumeBaseTypeVal;
  ElementReferenceFullType *          ElementReferenceFullTypeVal;
  ElementReferenceType *              ElementReferenceTypeVal;
  EllipseBestFitType *                EllipseBestFitTypeVal;
  EllipseCastType *                   EllipseCastTypeVal;
  EllipseCheckedFeatureType *         EllipseCheckedFeatureTypeVal;
  EllipseCheckedTypeChoicePair *      EllipseCheckedTypeChoicePairVal;
  EllipseCheckedType *                EllipseCheckedTypeVal;
  EllipseConstructionMethodTypeChoicePair * EllipseConstructionMethodTypeChoicePairVal;
  EllipseConstructionMethodType *     EllipseConstructionMethodTypeVal;
  EllipseCopyType *                   EllipseCopyTypeVal;
  EllipseFeatureDefinitionType *      EllipseFeatureDefinitionTypeVal;
  EllipseFeatureItemType *            EllipseFeatureItemTypeVal;
  EllipseFeatureMeasurementType *     EllipseFeatureMeasurementTypeVal;
  EllipseFeatureNominalType *         EllipseFeatureNominalTypeVal;
  EllipseFromScanType *               EllipseFromScanTypeVal;
  EllipseIntersectionType *           EllipseIntersectionTypeVal;
  EllipseMeasurementDeterminationTypeChoicePair * EllipseMeasurementDeterminationTypeChoicePairVal;
  EllipseMeasurementDeterminationType * EllipseMeasurementDeterminationTypeVal;
  EllipsePointSamplingStrategyTypeChoicePair * EllipsePointSamplingStrategyTypeChoicePairVal;
  EllipsePointSamplingStrategyType *  EllipsePointSamplingStrategyTypeVal;
  EllipseProjectionType *             EllipseProjectionTypeVal;
  EllipseRecompType *                 EllipseRecompTypeVal;
  EllipseTransformType *              EllipseTransformTypeVal;
  EllipticalArcBestFitType *          EllipticalArcBestFitTypeVal;
  EllipticalArcCastType *             EllipticalArcCastTypeVal;
  EllipticalArcCheckedFeatureType *   EllipticalArcCheckedFeatureTypeVal;
  EllipticalArcCheckedTypeChoicePair * EllipticalArcCheckedTypeChoicePairVal;
  EllipticalArcCheckedType *          EllipticalArcCheckedTypeVal;
  EllipticalArcConstructionMethodTypeChoicePair * EllipticalArcConstructionMethodTypeChoicePairVal;
  EllipticalArcConstructionMethodType * EllipticalArcConstructionMethodTypeVal;
  EllipticalArcCopyType *             EllipticalArcCopyTypeVal;
  EllipticalArcFeatureDefinitionType * EllipticalArcFeatureDefinitionTypeVal;
  EllipticalArcFeatureItemType *      EllipticalArcFeatureItemTypeVal;
  EllipticalArcFeatureMeasurementType * EllipticalArcFeatureMeasurementTypeVal;
  EllipticalArcFeatureNominalType *   EllipticalArcFeatureNominalTypeVal;
  EllipticalArcFromScanType *         EllipticalArcFromScanTypeVal;
  EllipticalArcIntersectionType *     EllipticalArcIntersectionTypeVal;
  EllipticalArcMeasurementDeterminationTypeChoicePair * EllipticalArcMeasurementDeterminationTypeChoicePairVal;
  EllipticalArcMeasurementDeterminationType * EllipticalArcMeasurementDeterminationTypeVal;
  EllipticalArcPointSamplingStrategyTypeChoicePair * EllipticalArcPointSamplingStrategyTypeChoicePairVal;
  EllipticalArcPointSamplingStrategyType * EllipticalArcPointSamplingStrategyTypeVal;
  EllipticalArcProjectionType *       EllipticalArcProjectionTypeVal;
  EllipticalArcRecompType *           EllipticalArcRecompTypeVal;
  EllipticalArcTransformType *        EllipticalArcTransformTypeVal;
  EllipticityCharacteristicDefinitionType * EllipticityCharacteristicDefinitionTypeVal;
  EllipticityCharacteristicItemType * EllipticityCharacteristicItemTypeVal;
  EllipticityCharacteristicMeasurementType * EllipticityCharacteristicMeasurementTypeVal;
  EllipticityCharacteristicNominalType * EllipticityCharacteristicNominalTypeVal;
  EllipticityCharacteristicStatsEvalType * EllipticityCharacteristicStatsEvalTypeVal;
  ElongatedCircleBestFitType *        ElongatedCircleBestFitTypeVal;
  ElongatedCircleCastType *           ElongatedCircleCastTypeVal;
  ElongatedCircleCheckedFeatureType * ElongatedCircleCheckedFeatureTypeVal;
  ElongatedCircleCheckedTypeChoicePair * ElongatedCircleCheckedTypeChoicePairVal;
  ElongatedCircleCheckedType *        ElongatedCircleCheckedTypeVal;
  ElongatedCircleConstructionMethodTypeChoicePair * ElongatedCircleConstructionMethodTypeChoicePairVal;
  ElongatedCircleConstructionMethodType * ElongatedCircleConstructionMethodTypeVal;
  ElongatedCircleCopyType *           ElongatedCircleCopyTypeVal;
  ElongatedCircleFeatureDefinitionType * ElongatedCircleFeatureDefinitionTypeVal;
  ElongatedCircleFeatureItemType *    ElongatedCircleFeatureItemTypeVal;
  ElongatedCircleFeatureMeasurementType * ElongatedCircleFeatureMeasurementTypeVal;
  ElongatedCircleFeatureNominalType * ElongatedCircleFeatureNominalTypeVal;
  ElongatedCircleMeasurementDeterminationTypeChoicePair * ElongatedCircleMeasurementDeterminationTypeChoicePairVal;
  ElongatedCircleMeasurementDeterminationType * ElongatedCircleMeasurementDeterminationTypeVal;
  ElongatedCirclePointSamplingStrategyTypeChoicePair * ElongatedCirclePointSamplingStrategyTypeChoicePairVal;
  ElongatedCirclePointSamplingStrategyType * ElongatedCirclePointSamplingStrategyTypeVal;
  ElongatedCircleRecompType *         ElongatedCircleRecompTypeVal;
  ElongatedCircleTransformType *      ElongatedCircleTransformTypeVal;
  ElongatedCylinderBestFitType *      ElongatedCylinderBestFitTypeVal;
  ElongatedCylinderCastType *         ElongatedCylinderCastTypeVal;
  ElongatedCylinderCheckedFeatureType * ElongatedCylinderCheckedFeatureTypeVal;
  ElongatedCylinderCheckedTypeChoicePair * ElongatedCylinderCheckedTypeChoicePairVal;
  ElongatedCylinderCheckedType *      ElongatedCylinderCheckedTypeVal;
  ElongatedCylinderConstructionMethodTypeChoicePair * ElongatedCylinderConstructionMethodTypeChoicePairVal;
  ElongatedCylinderConstructionMethodType * ElongatedCylinderConstructionMethodTypeVal;
  ElongatedCylinderCopyType *         ElongatedCylinderCopyTypeVal;
  ElongatedCylinderFeatureDefinitionType * ElongatedCylinderFeatureDefinitionTypeVal;
  ElongatedCylinderFeatureItemType *  ElongatedCylinderFeatureItemTypeVal;
  ElongatedCylinderFeatureMeasurementType * ElongatedCylinderFeatureMeasurementTypeVal;
  ElongatedCylinderFeatureNominalType * ElongatedCylinderFeatureNominalTypeVal;
  ElongatedCylinderMeasurementDeterminationTypeChoicePair * ElongatedCylinderMeasurementDeterminationTypeChoicePairVal;
  ElongatedCylinderMeasurementDeterminationType * ElongatedCylinderMeasurementDeterminationTypeVal;
  ElongatedCylinderPointSamplingStrategyEnumType * ElongatedCylinderPointSamplingStrategyEnumTypeVal;
  ElongatedCylinderPointSamplingStrategyTypeChoicePair * ElongatedCylinderPointSamplingStrategyTypeChoicePairVal;
  ElongatedCylinderPointSamplingStrategyType * ElongatedCylinderPointSamplingStrategyTypeVal;
  ElongatedCylinderRecompType *       ElongatedCylinderRecompTypeVal;
  ElongatedCylinderTransformType *    ElongatedCylinderTransformTypeVal;
  ElseDoType *                        ElseDoTypeVal;
  ElseRuleType *                      ElseRuleTypeVal;
  EmployeeType *                      EmployeeTypeVal;
  EndRadiusType *                     EndRadiusTypeVal;
  EntitiesExternalType *              EntitiesExternalTypeVal;
  EntityExternalType *                EntityExternalTypeVal;
  EnvironmentType *                   EnvironmentTypeVal;
  EnvironmentalRangeType *            EnvironmentalRangeTypeVal;
  EnvironmentsType *                  EnvironmentsTypeVal;
  ErrorsType *                        ErrorsTypeVal;
  EstablishDatumMeasurandType *       EstablishDatumMeasurandTypeVal;
  EvaluateCharacteristicMeasurandType * EvaluateCharacteristicMeasurandTypeVal;
  EvaluateSpecifiedCharacteristicsActionType * EvaluateSpecifiedCharacteristicsActionTypeVal;
  ExclusionEnumType *                 ExclusionEnumTypeVal;
  ExclusionIdType *                   ExclusionIdTypeVal;
  ExclusionIndexType *                ExclusionIndexTypeVal;
  ExclusionReasonTypeChoicePair *     ExclusionReasonTypeChoicePairVal;
  ExclusionReasonType *               ExclusionReasonTypeVal;
  ExclusionsIdType *                  ExclusionsIdTypeVal;
  ExclusionsIndexType *               ExclusionsIndexTypeVal;
  ExplodedViewMov_1230_TypeChoicePair * ExplodedViewMov_1230_TypeChoicePairVal;
  ExplodedViewMov_1230_Type *         ExplodedViewMov_1230_TypeVal;
  ExplodedViewMoveGroupType *         ExplodedViewMoveGroupTypeVal;
  ExplodedViewMoveGroupsType *        ExplodedViewMoveGroupsTypeVal;
  ExplodedViewRotateType *            ExplodedViewRotateTypeVal;
  ExplodedViewSetType *               ExplodedViewSetTypeVal;
  ExplodedViewTranslateType *         ExplodedViewTranslateTypeVal;
  ExplodedViewType *                  ExplodedViewTypeVal;
  ExtentEnumType *                    ExtentEnumTypeVal;
  ExtentTypeChoicePair *              ExtentTypeChoicePairVal;
  ExtentType *                        ExtentTypeVal;
  ExternalFileReferenceType *         ExternalFileReferenceTypeVal;
  ExternalFileReferencesType *        ExternalFileReferencesTypeVal;
  ExternalQIFDocumentReferenceType *  ExternalQIFDocumentReferenceTypeVal;
  ExternalQIFReferencesType *         ExternalQIFReferencesTypeVal;
  ExternalReferenceMeasureFeatureMethodType * ExternalReferenceMeasureFeatureMethodTypeVal;
  Extrude23CoreType *                 Extrude23CoreTypeVal;
  Extrude23Type *                     Extrude23TypeVal;
  ExtrudedCrossSectionBestFitType *   ExtrudedCrossSectionBestFitTypeVal;
  ExtrudedCrossSectionCastType *      ExtrudedCrossSectionCastTypeVal;
  ExtrudedCrossSectionCheckedFeatureType * ExtrudedCrossSectionCheckedFeatureTypeVal;
  ExtrudedCrossSectionCheckedTypeChoicePair * ExtrudedCrossSectionCheckedTypeChoicePairVal;
  ExtrudedCrossSectionCheckedType *   ExtrudedCrossSectionCheckedTypeVal;
  ExtrudedCrossSectionConstructionMethodTypeChoicePair * ExtrudedCrossSectionConstructionMethodTypeChoicePairVal;
  ExtrudedCrossSectionConstructionMethodType * ExtrudedCrossSectionConstructionMethodTypeVal;
  ExtrudedCrossSectionCopyType *      ExtrudedCrossSectionCopyTypeVal;
  ExtrudedCrossSectionFeatureDefinitionType * ExtrudedCrossSectionFeatureDefinitionTypeVal;
  ExtrudedCrossSectionFeatureItemType * ExtrudedCrossSectionFeatureItemTypeVal;
  ExtrudedCrossSectionFeatureMeasurementType * ExtrudedCrossSectionFeatureMeasurementTypeVal;
  ExtrudedCrossSectionFeatureNominalType * ExtrudedCrossSectionFeatureNominalTypeVal;
  ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair * ExtrudedCrossSectionMeasurementDeterminationTypeChoicePairVal;
  ExtrudedCrossSectionMeasurementDeterminationType * ExtrudedCrossSectionMeasurementDeterminationTypeVal;
  ExtrudedCrossSectionPointSamplingStrategyEnumType * ExtrudedCrossSectionPointSamplingStrategyEnumTypeVal;
  ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair * ExtrudedCrossSectionPointSamplingStrategyTypeChoicePairVal;
  ExtrudedCrossSectionPointSamplingStrategyType * ExtrudedCrossSectionPointSamplingStrategyTypeVal;
  ExtrudedCrossSectionRecompType *    ExtrudedCrossSectionRecompTypeVal;
  ExtrudedCrossSectionTransformType * ExtrudedCrossSectionTransformTypeVal;
  FPSTestType *                       FPSTestTypeVal;
  FaceBaseType *                      FaceBaseTypeVal;
  FaceMeshType *                      FaceMeshTypeVal;
  FaceMeshType_1223_TypeChoicePair *  FaceMeshType_1223_TypeChoicePairVal;
  FaceMeshType_1223_Type *            FaceMeshType_1223_TypeVal;
  FaceMeshType_1224_TypeChoicePair *  FaceMeshType_1224_TypeChoicePairVal;
  FaceMeshType_1224_Type *            FaceMeshType_1224_TypeVal;
  FaceMeshType_1225_TypeChoicePair *  FaceMeshType_1225_TypeChoicePairVal;
  FaceMeshType_1225_Type *            FaceMeshType_1225_TypeVal;
  FaceSetType *                       FaceSetTypeVal;
  FaceType *                          FaceTypeVal;
  FeatureAreaType *                   FeatureAreaTypeVal;
  FeatureAspectsListsType *           FeatureAspectsListsTypeVal;
  FeatureDefinitionBaseType *         FeatureDefinitionBaseTypeVal;
  FeatureDefinitionsType *            FeatureDefinitionsTypeVal;
  FeatureIsDatumType *                FeatureIsDatumTypeVal;
  FeatureIsInternalType *             FeatureIsInternalTypeVal;
  FeatureItemBaseType *               FeatureItemBaseTypeVal;
  FeatureItemsType *                  FeatureItemsTypeVal;
  FeatureLengthType *                 FeatureLengthTypeVal;
  FeatureMeasurementBaseType *        FeatureMeasurementBaseTypeVal;
  FeatureMeasurementsType *           FeatureMeasurementsTypeVal;
  FeatureNominalBaseType *            FeatureNominalBaseTypeVal;
  FeatureNominalsType *               FeatureNominalsTypeVal;
  FeatureRulesType *                  FeatureRulesTypeVal;
  FeatureSizeType *                   FeatureSizeTypeVal;
  FeatureTypeEnumType *               FeatureTypeEnumTypeVal;
  FeatureTypeIsType *                 FeatureTypeIsTypeVal;
  FeatureZoneAreaBetweenType *        FeatureZoneAreaBetweenTypeVal;
  FeatureZoneAreaCircularType *       FeatureZoneAreaCircularTypeVal;
  FeatureZoneAreaCylindricalType *    FeatureZoneAreaCylindricalTypeVal;
  FeatureZoneAreaIrregularType *      FeatureZoneAreaIrregularTypeVal;
  FeatureZoneAreaRectangularType *    FeatureZoneAreaRectangularTypeVal;
  FeatureZoneAreaSphericalType *      FeatureZoneAreaSphericalTypeVal;
  FeatureZoneArea_1099_TypeChoicePair * FeatureZoneArea_1099_TypeChoicePairVal;
  FeatureZoneArea_1099_Type *         FeatureZoneArea_1099_TypeVal;
  FeatureZoneArea_1100_TypeChoicePair * FeatureZoneArea_1100_TypeChoicePairVal;
  FeatureZoneArea_1100_Type *         FeatureZoneArea_1100_TypeVal;
  FeatureZoneArea_1101_TypeChoicePair * FeatureZoneArea_1101_TypeChoicePairVal;
  FeatureZoneArea_1101_Type *         FeatureZoneArea_1101_TypeVal;
  FeatureZoneBaseType *               FeatureZoneBaseTypeVal;
  FeatureZoneCurv_1102_TypeChoicePair * FeatureZoneCurv_1102_TypeChoicePairVal;
  FeatureZoneCurv_1102_Type *         FeatureZoneCurv_1102_TypeVal;
  FeatureZoneCurveCircularType *      FeatureZoneCurveCircularTypeVal;
  FeatureZoneCurveIrregularType *     FeatureZoneCurveIrregularTypeVal;
  FeatureZoneCurveLineType *          FeatureZoneCurveLineTypeVal;
  FeatureZoneListType *               FeatureZoneListTypeVal;
  FeatureZonePoin_1103_TypeChoicePair * FeatureZonePoin_1103_TypeChoicePairVal;
  FeatureZonePoin_1103_Type *         FeatureZonePoin_1103_TypeVal;
  FeatureZonePointType *              FeatureZonePointTypeVal;
  FileInternalType *                  FileInternalTypeVal;
  FileSpecTypeChoicePair *            FileSpecTypeChoicePairVal;
  FileSpecType *                      FileSpecTypeVal;
  FileType *                          FileTypeVal;
  FileUnitsType *                     FileUnitsTypeVal;
  FilterTypeChoicePair *              FilterTypeChoicePairVal;
  FilterType *                        FilterTypeVal;
  FirstArticleStu_1200_TypeChoicePair * FirstArticleStu_1200_TypeChoicePairVal;
  FirstArticleStu_1200_Type *         FirstArticleStu_1200_TypeVal;
  FirstArticleStudyPlanType *         FirstArticleStudyPlanTypeVal;
  FirstArticleStudyResultsType *      FirstArticleStudyResultsTypeVal;
  FixtureType *                       FixtureTypeVal;
  FixturesType *                      FixturesTypeVal;
  FlatTaperCharacteristicDefinitionType * FlatTaperCharacteristicDefinitionTypeVal;
  FlatTaperCharacteristicItemType *   FlatTaperCharacteristicItemTypeVal;
  FlatTaperCharacteristicMeasurementType * FlatTaperCharacteristicMeasurementTypeVal;
  FlatTaperCharacteristicNominalType * FlatTaperCharacteristicNominalTypeVal;
  FlatTaperCharacteristicStatsEvalType * FlatTaperCharacteristicStatsEvalTypeVal;
  FlatnessCharact_1055_TypeChoicePair * FlatnessCharact_1055_TypeChoicePairVal;
  FlatnessCharact_1055_Type *         FlatnessCharact_1055_TypeVal;
  FlatnessCharact_1085_Type *         FlatnessCharact_1085_TypeVal;
  FlatnessCharact_1086_Type *         FlatnessCharact_1086_TypeVal;
  FlatnessCharacteristicDefinitionType * FlatnessCharacteristicDefinitionTypeVal;
  FlatnessCharacteristicItemType *    FlatnessCharacteristicItemTypeVal;
  FlatnessCharacteristicMeasurementType * FlatnessCharacteristicMeasurementTypeVal;
  FlatnessCharacteristicNominalType * FlatnessCharacteristicNominalTypeVal;
  FlatnessCharacteristicStatsEvalType * FlatnessCharacteristicStatsEvalTypeVal;
  FolderAssemblyType *                FolderAssemblyTypeVal;
  FolderPartType *                    FolderPartTypeVal;
  FoldersAssemblyType *               FoldersAssemblyTypeVal;
  FoldersPartType *                   FoldersPartTypeVal;
  FontType *                          FontTypeVal;
  FontsType *                         FontsTypeVal;
  ForceCharacteri_1056_TypeChoicePair * ForceCharacteri_1056_TypeChoicePairVal;
  ForceCharacteri_1056_Type *         ForceCharacteri_1056_TypeVal;
  ForceToleranceT_1015_TypeChoicePair * ForceToleranceT_1015_TypeChoicePairVal;
  ForceToleranceT_1015_Type *         ForceToleranceT_1015_TypeVal;
  ForceToleranceT_1032_Type *         ForceToleranceT_1032_TypeVal;
  ForceToleranceType *                ForceToleranceTypeVal;
  ForceUnitType *                     ForceUnitTypeVal;
  ForceValueType *                    ForceValueTypeVal;
  FractionType *                      FractionTypeVal;
  FrameBaseType *                     FrameBaseTypeVal;
  FrameCircularType *                 FrameCircularTypeVal;
  FrameFlagType *                     FrameFlagTypeVal;
  FrameHexagonalType *                FrameHexagonalTypeVal;
  FrameIrregularFormType *            FrameIrregularFormTypeVal;
  FrameOctagonalType *                FrameOctagonalTypeVal;
  FramePentagonalType *               FramePentagonalTypeVal;
  FrameRectangularType *              FrameRectangularTypeVal;
  FrameTriangleType *                 FrameTriangleTypeVal;
  FrameWeldSymbolTailType *           FrameWeldSymbolTailTypeVal;
  FrameWeldSymbolType *               FrameWeldSymbolTypeVal;
  FramesType *                        FramesTypeVal;
  FunctionDiscreteType *              FunctionDiscreteTypeVal;
  GDTEnumType *                       GDTEnumTypeVal;
  GageDeviceType *                    GageDeviceTypeVal;
  GageMeasureFeatureMethodType *      GageMeasureFeatureMethodTypeVal;
  GageRandRStudyEnumType *            GageRandRStudyEnumTypeVal;
  GageRandRStudyP_1201_TypeChoicePair * GageRandRStudyP_1201_TypeChoicePairVal;
  GageRandRStudyP_1201_Type *         GageRandRStudyP_1201_TypeVal;
  GageRandRStudyP_1202_TypeChoicePair * GageRandRStudyP_1202_TypeChoicePairVal;
  GageRandRStudyP_1202_Type *         GageRandRStudyP_1202_TypeVal;
  GageRandRStudyP_1203_TypeChoicePair * GageRandRStudyP_1203_TypeChoicePairVal;
  GageRandRStudyP_1203_Type *         GageRandRStudyP_1203_TypeVal;
  GageRandRStudyPlanType *            GageRandRStudyPlanTypeVal;
  GageRandRStudyResultsType *         GageRandRStudyResultsTypeVal;
  GeometricCharac_1057_TypeChoicePair * GeometricCharac_1057_TypeChoicePairVal;
  GeometricCharac_1057_Type *         GeometricCharac_1057_TypeVal;
  GeometricCharacteristicStatsEvalType * GeometricCharacteristicStatsEvalTypeVal;
  GeometrySetType *                   GeometrySetTypeVal;
  GraphicsType *                      GraphicsTypeVal;
  GreaterOrEqualType *                GreaterOrEqualTypeVal;
  GreaterThanType *                   GreaterThanTypeVal;
  GroupFeatureDef_1104_TypeChoicePair * GroupFeatureDef_1104_TypeChoicePairVal;
  GroupFeatureDef_1104_Type *         GroupFeatureDef_1104_TypeVal;
  GroupFeatureDefinitionType *        GroupFeatureDefinitionTypeVal;
  GroupFeatureItemType *              GroupFeatureItemTypeVal;
  GroupFeatureMeasurementType *       GroupFeatureMeasurementTypeVal;
  GroupFeatureNominalType *           GroupFeatureNominalTypeVal;
  HaltActionType *                    HaltActionTypeVal;
  HatchPatternType *                  HatchPatternTypeVal;
  HatchPatternsType *                 HatchPatternsTypeVal;
  HatchStyleFormEnumType *            HatchStyleFormEnumTypeVal;
  HatchStyleSetType *                 HatchStyleSetTypeVal;
  HatchStyleType *                    HatchStyleTypeVal;
  HeightCharacteristicDefinitionType * HeightCharacteristicDefinitionTypeVal;
  HeightCharacteristicItemType *      HeightCharacteristicItemTypeVal;
  HeightCharacteristicMeasurementType * HeightCharacteristicMeasurementTypeVal;
  HeightCharacteristicNominalType *   HeightCharacteristicNominalTypeVal;
  HeightCharacteristicStatsEvalType * HeightCharacteristicStatsEvalTypeVal;
  I2Type *                            I2TypeVal;
  I3Type *                            I3TypeVal;
  ISO10360TestTyp_1240_TypeChoicePair * ISO10360TestTyp_1240_TypeChoicePairVal;
  ISO10360TestTyp_1240_Type *         ISO10360TestTyp_1240_TypeVal;
  ISO10360TestType *                  ISO10360TestTypeVal;
  ISODegreeOfFreedomEnumType *        ISODegreeOfFreedomEnumTypeVal;
  IfActionGroupType *                 IfActionGroupTypeVal;
  IfThenCircleRuleType *              IfThenCircleRuleTypeVal;
  IfThenCircularArcRuleType *         IfThenCircularArcRuleTypeVal;
  IfThenConeRuleType *                IfThenConeRuleTypeVal;
  IfThenConicalSegmentRuleType *      IfThenConicalSegmentRuleTypeVal;
  IfThenCurveRuleType *               IfThenCurveRuleTypeVal;
  IfThenCylinderRuleType *            IfThenCylinderRuleTypeVal;
  IfThenCylindricalSegmentRuleType *  IfThenCylindricalSegmentRuleTypeVal;
  IfThenDMERuleType *                 IfThenDMERuleTypeVal;
  IfThenEllipseRuleType *             IfThenEllipseRuleTypeVal;
  IfThenEllipticalArcRuleType *       IfThenEllipticalArcRuleTypeVal;
  IfThenElongatedCircleRuleType *     IfThenElongatedCircleRuleTypeVal;
  IfThenElongatedCylinderRuleType *   IfThenElongatedCylinderRuleTypeVal;
  IfThenElseFeatureRulesType *        IfThenElseFeatureRulesTypeVal;
  IfThenExtrudedCrossSectionRuleType * IfThenExtrudedCrossSectionRuleTypeVal;
  IfThenFeatureRuleType *             IfThenFeatureRuleTypeVal;
  IfThenLineRuleType *                IfThenLineRuleTypeVal;
  IfThenOppositeAngledLinesRuleType * IfThenOppositeAngledLinesRuleTypeVal;
  IfThenOppositeAngledPlanesRuleType * IfThenOppositeAngledPlanesRuleTypeVal;
  IfThenOppositeParallelLinesRuleType * IfThenOppositeParallelLinesRuleTypeVal;
  IfThenOppositeParallelPlanesRuleType * IfThenOppositeParallelPlanesRuleTypeVal;
  IfThenPlaneRuleType *               IfThenPlaneRuleTypeVal;
  IfThenPointDefinedCurveRuleType *   IfThenPointDefinedCurveRuleTypeVal;
  IfThenPointDefinedSurfaceRuleType * IfThenPointDefinedSurfaceRuleTypeVal;
  IfThenPointRuleType *               IfThenPointRuleTypeVal;
  IfThenSphereRuleType *              IfThenSphereRuleTypeVal;
  IfThenSphericalSegmentRuleType *    IfThenSphericalSegmentRuleTypeVal;
  IfThenSurfaceOfRevolutionRuleType * IfThenSurfaceOfRevolutionRuleTypeVal;
  IfThenSurfaceRuleType *             IfThenSurfaceRuleTypeVal;
  IfThenToroidalSegmentRuleType *     IfThenToroidalSegmentRuleTypeVal;
  IfThenTorusRuleType *               IfThenTorusRuleTypeVal;
  ImageInstructionType *              ImageInstructionTypeVal;
  InspectionModeEnumType *            InspectionModeEnumTypeVal;
  InspectionProgramType *             InspectionProgramTypeVal;
  InspectionScopeEnumType *           InspectionScopeEnumTypeVal;
  InspectionSoftwareItemsType *       InspectionSoftwareItemsTypeVal;
  InspectionStatusEnumType *          InspectionStatusEnumTypeVal;
  InspectionStatusTypeChoicePair *    InspectionStatusTypeChoicePairVal;
  InspectionStatusType *              InspectionStatusTypeVal;
  InspectionTrace_1042_TypeChoicePair * InspectionTrace_1042_TypeChoicePairVal;
  InspectionTrace_1042_Type *         InspectionTrace_1042_TypeVal;
  InspectionTraceabilityType *        InspectionTraceabilityTypeVal;
  InternalExternalEnumType *          InternalExternalEnumTypeVal;
  IntersectionPlaneEnumType *         IntersectionPlaneEnumTypeVal;
  IntersectionPlaneType *             IntersectionPlaneTypeVal;
  LaserRadarMeasureFeatureMethodType * LaserRadarMeasureFeatureMethodTypeVal;
  LaserRadarType *                    LaserRadarTypeVal;
  LaserTrackerMeasureFeatureMethodType * LaserTrackerMeasureFeatureMethodTypeVal;
  LaserTrackerType *                  LaserTrackerTypeVal;
  LaserTriangulationSensorType *      LaserTriangulationSensorTypeVal;
  LaserType *                         LaserTypeVal;
  LatitudeLongitudeSweepType *        LatitudeLongitudeSweepTypeVal;
  LayerSetType *                      LayerSetTypeVal;
  LayerType *                         LayerTypeVal;
  LeaderCircularType *                LeaderCircularTypeVal;
  LeaderDoubleHeadCircularType *      LeaderDoubleHeadCircularTypeVal;
  LeaderDoubleHeadExtendType *        LeaderDoubleHeadExtendTypeVal;
  LeaderDoubleHeadType *              LeaderDoubleHeadTypeVal;
  LeaderExtendType *                  LeaderExtendTypeVal;
  LeaderHeadFormEnumType *            LeaderHeadFormEnumTypeVal;
  LeaderHeadFormType *                LeaderHeadFormTypeVal;
  LeaderModifierEnumType *            LeaderModifierEnumTypeVal;
  LeaderType *                        LeaderTypeVal;
  LengthCharacteristicDefinitionType * LengthCharacteristicDefinitionTypeVal;
  LengthCharacteristicItemType *      LengthCharacteristicItemTypeVal;
  LengthCharacteristicMeasurementType * LengthCharacteristicMeasurementTypeVal;
  LengthCharacteristicNominalType *   LengthCharacteristicNominalTypeVal;
  LengthCharacteristicStatsEvalType * LengthCharacteristicStatsEvalTypeVal;
  LengthFunctionDiscreteType *        LengthFunctionDiscreteTypeVal;
  LessOrEqualType *                   LessOrEqualTypeVal;
  LessThanType *                      LessThanTypeVal;
  LesserErrorType *                   LesserErrorTypeVal;
  LightPenCMMType *                   LightPenCMMTypeVal;
  LimitingNumberT_1133_TypeChoicePair * LimitingNumberT_1133_TypeChoicePairVal;
  LimitingNumberT_1133_Type *         LimitingNumberT_1133_TypeVal;
  LimitingNumberType *                LimitingNumberTypeVal;
  LimitsAndFitsSpecificationType *    LimitsAndFitsSpecificationTypeVal;
  LimitsAndFitsZoneVarianceType *     LimitsAndFitsZoneVarianceTypeVal;
  LineAuxiliaryType *                 LineAuxiliaryTypeVal;
  LineBestFitType *                   LineBestFitTypeVal;
  LineCastType *                      LineCastTypeVal;
  LineCheckedFeatureType *            LineCheckedFeatureTypeVal;
  LineCheckedTypeChoicePair *         LineCheckedTypeChoicePairVal;
  LineCheckedType *                   LineCheckedTypeVal;
  LineConstructionMethodTypeChoicePair * LineConstructionMethodTypeChoicePairVal;
  LineConstructionMethodType *        LineConstructionMethodTypeVal;
  LineCopyType *                      LineCopyTypeVal;
  LineExtractType *                   LineExtractTypeVal;
  LineFeatureDefinitionType *         LineFeatureDefinitionTypeVal;
  LineFeatureItemType *               LineFeatureItemTypeVal;
  LineFeatureMeasurementType *        LineFeatureMeasurementTypeVal;
  LineFeatureNominalType *            LineFeatureNominalTypeVal;
  LineFromScanType *                  LineFromScanTypeVal;
  LineIntersectionType *              LineIntersectionTypeVal;
  LineMeasurementDeterminationTypeChoicePair * LineMeasurementDeterminationTypeChoicePairVal;
  LineMeasurementDeterminationType *  LineMeasurementDeterminationTypeVal;
  LineMidlineType *                   LineMidlineTypeVal;
  LineParallelType *                  LineParallelTypeVal;
  LinePerpendicularType *             LinePerpendicularTypeVal;
  LinePointSamplingStrategyTypeChoicePair * LinePointSamplingStrategyTypeChoicePairVal;
  LinePointSamplingStrategyType *     LinePointSamplingStrategyTypeVal;
  LineProfileCharacteristicDefinitionType * LineProfileCharacteristicDefinitionTypeVal;
  LineProfileCharacteristicItemType * LineProfileCharacteristicItemTypeVal;
  LineProfileCharacteristicMeasurementType * LineProfileCharacteristicMeasurementTypeVal;
  LineProfileCharacteristicNominalType * LineProfileCharacteristicNominalTypeVal;
  LineProfileCharacteristicStatsEvalType * LineProfileCharacteristicStatsEvalTypeVal;
  LineProjectionType *                LineProjectionTypeVal;
  LineRecompType *                    LineRecompTypeVal;
  LineSegment2dType *                 LineSegment2dTypeVal;
  LineSegmentType *                   LineSegmentTypeVal;
  LineStyleEnumType *                 LineStyleEnumTypeVal;
  LineStyleType *                     LineStyleTypeVal;
  LineTangentThroughType *            LineTangentThroughTypeVal;
  LineTransformType *                 LineTransformTypeVal;
  LinearAxisType *                    LinearAxisTypeVal;
  LinearCharacter_1058_TypeChoicePair * LinearCharacter_1058_TypeChoicePairVal;
  LinearCharacter_1058_Type *         LinearCharacter_1058_TypeVal;
  LinearCharacter_1134_TypeChoicePair * LinearCharacter_1134_TypeChoicePairVal;
  LinearCharacter_1134_Type *         LinearCharacter_1134_TypeVal;
  LinearCharacter_1153_Type *         LinearCharacter_1153_TypeVal;
  LinearCharacter_1154_Type *         LinearCharacter_1154_TypeVal;
  LinearCharacter_1155_Type *         LinearCharacter_1155_TypeVal;
  LinearCharacter_1156_Type *         LinearCharacter_1156_TypeVal;
  LinearCharacteristicStatsEvalType * LinearCharacteristicStatsEvalTypeVal;
  LinearCoordinat_1059_TypeChoicePair * LinearCoordinat_1059_TypeChoicePairVal;
  LinearCoordinat_1059_Type *         LinearCoordinat_1059_TypeVal;
  LinearCoordinateCharacteristicDefinitionType * LinearCoordinateCharacteristicDefinitionTypeVal;
  LinearCoordinateCharacteristicItemType * LinearCoordinateCharacteristicItemTypeVal;
  LinearCoordinateCharacteristicMeasurementType * LinearCoordinateCharacteristicMeasurementTypeVal;
  LinearCoordinateCharacteristicNominalType * LinearCoordinateCharacteristicNominalTypeVal;
  LinearCoordinateCharacteristicStatsEvalType * LinearCoordinateCharacteristicStatsEvalTypeVal;
  LinearCoordinateDirectionEnumType * LinearCoordinateDirectionEnumTypeVal;
  LinearDualValueType *               LinearDualValueTypeVal;
  LinearErrorType *                   LinearErrorTypeVal;
  LinearOrRotaryAxisType *            LinearOrRotaryAxisTypeVal;
  LinearResolutionType *              LinearResolutionTypeVal;
  LinearToleranceDefinitionType *     LinearToleranceDefinitionTypeVal;
  LinearToleranceType *               LinearToleranceTypeVal;
  LinearTolerance_1016_TypeChoicePair * LinearTolerance_1016_TypeChoicePairVal;
  LinearTolerance_1016_Type *         LinearTolerance_1016_TypeVal;
  LinearTolerance_1017_TypeChoicePair * LinearTolerance_1017_TypeChoicePairVal;
  LinearTolerance_1017_Type *         LinearTolerance_1017_TypeVal;
  LinearTolerance_1033_Type *         LinearTolerance_1033_TypeVal;
  LinearTolerance_1034_Type *         LinearTolerance_1034_TypeVal;
  LinearTolerance_1035_Type *         LinearTolerance_1035_TypeVal;
  LinearTolerance_1041_Type *         LinearTolerance_1041_TypeVal;
  LinearUnitType *                    LinearUnitTypeVal;
  LinearValueType *                   LinearValueTypeVal;
  LinearVariableDifferentialTransformerEnumType * LinearVariableDifferentialTransformerEnumTypeVal;
  LinearVariableDifferentialTransformerSensorType * LinearVariableDifferentialTransformerSensorTypeVal;
  LinearityStudyP_1204_TypeChoicePair * LinearityStudyP_1204_TypeChoicePairVal;
  LinearityStudyP_1204_Type *         LinearityStudyP_1204_TypeVal;
  LinearityStudyPlanType *            LinearityStudyPlanTypeVal;
  LinearityStudyR_1205_TypeChoicePair * LinearityStudyR_1205_TypeChoicePairVal;
  LinearityStudyR_1205_Type *         LinearityStudyR_1205_TypeVal;
  LinearityStudyResultsType *         LinearityStudyResultsTypeVal;
  ListAccumulatedStatsValuesListType * ListAccumulatedStatsValuesListTypeVal;
  ListAccumulatedStatsValuesType *    ListAccumulatedStatsValuesTypeVal;
  ListBooleanType *                   ListBooleanTypeVal;
  ListDateTimeType *                  ListDateTimeTypeVal;
  ListDoubleType *                    ListDoubleTypeVal;
  ListIntType *                       ListIntTypeVal;
  ListQIFReferenc_1002_Type *         ListQIFReferenc_1002_TypeVal;
  ListQIFReferenceFullType *          ListQIFReferenceFullTypeVal;
  ListQIFReferenceSimpleType *        ListQIFReferenceSimpleTypeVal;
  ListQIFReferenceTypeChoicePair *    ListQIFReferenceTypeChoicePairVal;
  ListQIFReferenceType *              ListQIFReferenceTypeVal;
  ListSubgroupStatsValuesListType *   ListSubgroupStatsValuesListTypeVal;
  ListSubgroupStatsValuesType *       ListSubgroupStatsValuesTypeVal;
  ListSummaryStatsValuesListType *    ListSummaryStatsValuesListTypeVal;
  ListSummaryStatsValuesType *        ListSummaryStatsValuesTypeVal;
  ListTokenType *                     ListTokenTypeVal;
  AACMMAccuracyTypeLisd *             LiztAACMMAccuracyTypeVal;
  ActionMethodBaseTypeLisd *          LiztActionMethodBaseTypeVal;
  ActualComponentSetTypeLisd *        LiztActualComponentSetTypeVal;
  ActualComponentTypeLisd *           LiztActualComponentTypeVal;
  AlgorithmTypeLisd *                 LiztAlgorithmTypeVal;
  AlignmentOperationBaseTypeLisd *    LiztAlignmentOperationBaseTypeVal;
  AngularUnitTypeLisd *               LiztAngularUnitTypeVal;
  AnnotationViewTypeLisd *            LiztAnnotationViewTypeVal;
  Area2dTypeLisd *                    LiztArea2dTypeVal;
  AreaUnitTypeLisd *                  LiztAreaUnitTypeVal;
  ArithmeticExpressionBaseTypeLisd *  LiztArithmeticExpressionBaseTypeVal;
  ArrayQPIdFullReferenceTypeLisd *    LiztArrayQPIdFullReferenceTypeVal;
  AsmPathTypeLisd *                   LiztAsmPathTypeVal;
  AssemblyTypeLisd *                  LiztAssemblyTypeVal;
  AssignableCauseTypeLisd *           LiztAssignableCauseTypeVal;
  AttributeBaseTypeLisd *             LiztAttributeBaseTypeVal;
  AuxiliaryBaseTypeLisd *             LiztAuxiliaryBaseTypeVal;
  AverageFeatureTypeLisd *            LiztAverageFeatureTypeVal;
  BaseFeaturePointSetTypeLisd *       LiztBaseFeaturePointSetTypeVal;
  BaseFeatureTypeLisd *               LiztBaseFeatureTypeVal;
  BodyTypeLisd *                      LiztBodyTypeVal;
  BooleanExpressionBaseTypeLisd *     LiztBooleanExpressionBaseTypeVal;
  CADCoordinateSystemTypeLisd *       LiztCADCoordinateSystemTypeVal;
  CalibrationTypeLisd *               LiztCalibrationTypeVal;
  CameraTypeLisd *                    LiztCameraTypeVal;
  CarriageTypeLisd *                  LiztCarriageTypeVal;
  CartesianCMMAccuracyTypeLisd *      LiztCartesianCMMAccuracyTypeVal;
  CharacteristicDefinitionBaseTypeLisd * LiztCharacteristicDefinitionBaseTypeVal;
  CharacteristicGroupStatusTypeLisd * LiztCharacteristicGroupStatusTypeVal;
  CharacteristicGroupTypeLisd *       LiztCharacteristicGroupTypeVal;
  CharacteristicItemBaseTypeLisd *    LiztCharacteristicItemBaseTypeVal;
  CharacteristicMeasurementBaseTypeLisd * LiztCharacteristicMeasurementBaseTypeVal;
  CharacteristicNominalBaseTypeLisd * LiztCharacteristicNominalBaseTypeVal;
  CharacteristicStatsEvalBaseTypeLisd * LiztCharacteristicStatsEvalBaseTypeVal;
  CoEdgeMeshTypeLisd *                LiztCoEdgeMeshTypeVal;
  CoEdgeTypeLisd *                    LiztCoEdgeTypeVal;
  ComponentTypeLisd *                 LiztComponentTypeVal;
  ControlIssueDetailsListTypeLisd *   LiztControlIssueDetailsListTypeVal;
  ControlIssueDetailsTypeLisd *       LiztControlIssueDetailsTypeVal;
  ControlMethodTypeLisd *             LiztControlMethodTypeVal;
  CoordinateSystemActualTransformAssociationTypeLisd * LiztCoordinateSystemActualTransformAssociationTypeVal;
  CoordinateSystemTypeLisd *          LiztCoordinateSystemTypeVal;
  CorrectiveActionPlanTypeLisd *      LiztCorrectiveActionPlanTypeVal;
  CorrectiveActionTypeLisd *          LiztCorrectiveActionTypeVal;
  CriterionUserDefinedUnitTypeLisd *  LiztCriterionUserDefinedUnitTypeVal;
  Curve12BaseTypeLisd *               LiztCurve12BaseTypeVal;
  Curve12OrientedTypeLisd *           LiztCurve12OrientedTypeVal;
  Curve13BaseTypeLisd *               LiztCurve13BaseTypeVal;
  Curve13CoreTypeLisd *               LiztCurve13CoreTypeVal;
  Curve13OrientedTypeLisd *           LiztCurve13OrientedTypeVal;
  DMEDecisionBaseTypeLisd *           LiztDMEDecisionBaseTypeVal;
  DMEParameterConstraintTypeLisd *    LiztDMEParameterConstraintTypeVal;
  DatumDefinitionTypeLisd *           LiztDatumDefinitionTypeVal;
  DatumReferenceFrameTypeLisd *       LiztDatumReferenceFrameTypeVal;
  DatumTargetTypeLisd *               LiztDatumTargetTypeVal;
  DatumWithPrecedenceTypeLisd *       LiztDatumWithPrecedenceTypeVal;
  DefiningPointMeasurementTypeLisd *  LiztDefiningPointMeasurementTypeVal;
  DefiningPointNominalTypeLisd *      LiztDefiningPointNominalTypeVal;
  DefinitionExternalTypeChoicePairLisd * LiztDefinitionExternalTypeChoicePairVal;
  DegreeOfFreedomEnumTypeLisd *       LiztDegreeOfFreedomEnumTypeVal;
  DetachableSensorBaseTypeLisd *      LiztDetachableSensorBaseTypeVal;
  DisplayStyleGroupTypeLisd *         LiztDisplayStyleGroupTypeVal;
  DisplayStyleTypeLisd *              LiztDisplayStyleTypeVal;
  EdgeOrientedTypeLisd *              LiztEdgeOrientedTypeVal;
  EdgeTypeLisd *                      LiztEdgeTypeVal;
  EmployeeTypeLisd *                  LiztEmployeeTypeVal;
  EntityExternalTypeLisd *            LiztEntityExternalTypeVal;
  EnvironmentTypeLisd *               LiztEnvironmentTypeVal;
  ExclusionIdTypeLisd *               LiztExclusionIdTypeVal;
  ExclusionIndexTypeLisd *            LiztExclusionIndexTypeVal;
  ExplodedViewMoveGroupTypeLisd *     LiztExplodedViewMoveGroupTypeVal;
  ExplodedViewTypeLisd *              LiztExplodedViewTypeVal;
  ExternalFileReferenceTypeLisd *     LiztExternalFileReferenceTypeVal;
  ExternalQIFDocumentReferenceTypeLisd * LiztExternalQIFDocumentReferenceTypeVal;
  FaceBaseTypeLisd *                  LiztFaceBaseTypeVal;
  FeatureDefinitionBaseTypeLisd *     LiztFeatureDefinitionBaseTypeVal;
  FeatureItemBaseTypeLisd *           LiztFeatureItemBaseTypeVal;
  FeatureMeasurementBaseTypeLisd *    LiztFeatureMeasurementBaseTypeVal;
  FeatureNominalBaseTypeLisd *        LiztFeatureNominalBaseTypeVal;
  FeatureZoneBaseTypeLisd *           LiztFeatureZoneBaseTypeVal;
  FixtureTypeLisd *                   LiztFixtureTypeVal;
  FolderAssemblyTypeLisd *            LiztFolderAssemblyTypeVal;
  FolderPartTypeLisd *                LiztFolderPartTypeVal;
  FontTypeLisd *                      LiztFontTypeVal;
  ForceUnitTypeLisd *                 LiztForceUnitTypeVal;
  FrameBaseTypeLisd *                 LiztFrameBaseTypeVal;
  HatchPatternTypeLisd *              LiztHatchPatternTypeVal;
  HatchStyleTypeLisd *                LiztHatchStyleTypeVal;
  ISODegreeOfFreedomEnumTypeLisd *    LiztISODegreeOfFreedomEnumTypeVal;
  IfThenDMERuleTypeLisd *             LiztIfThenDMERuleTypeVal;
  IfThenFeatureRuleTypeLisd *         LiztIfThenFeatureRuleTypeVal;
  LayerTypeLisd *                     LiztLayerTypeVal;
  LeaderTypeLisd *                    LiztLeaderTypeVal;
  LinearUnitTypeLisd *                LiztLinearUnitTypeVal;
  LinearValueTypeLisd *               LiztLinearValueTypeVal;
  ListAccumulatedStatsValuesTypeLisd * LiztListAccumulatedStatsValuesTypeVal;
  ListSubgroupStatsValuesTypeLisd *   LiztListSubgroupStatsValuesTypeVal;
  LocatedTipTypeLisd *                LiztLocatedTipTypeVal;
  LogicalOperatio_1231_TypeChoicePairLisd * LiztLogicalOperatio_1231_TypeChoicePairVal;
  LogicalOperationTypeLisd *          LiztLogicalOperationTypeVal;
  LoopBaseTypeLisd *                  LiztLoopBaseTypeVal;
  MachineCoordinateSystemTypeLisd *   LiztMachineCoordinateSystemTypeVal;
  ManufacturingProcessTraceabilityTypeLisd * LiztManufacturingProcessTraceabilityTypeVal;
  MassUnitTypeLisd *                  LiztMassUnitTypeVal;
  MaterialTypeLisd *                  LiztMaterialTypeVal;
  MeasurandBaseTypeLisd *             LiztMeasurandBaseTypeVal;
  MeasurePointNominalTypeLisd *       LiztMeasurePointNominalTypeVal;
  MeasuredPointSetTypeLisd *          LiztMeasuredPointSetTypeVal;
  MeasuredUserDefinedUnitValueTypeLisd * LiztMeasuredUserDefinedUnitValueTypeVal;
  MeasurementDeviceTypeLisd *         LiztMeasurementDeviceTypeVal;
  MeasurementOriginOffsetTypeLisd *   LiztMeasurementOriginOffsetTypeVal;
  MeasurementResultsTypeLisd *        LiztMeasurementResultsTypeVal;
  MeasurementRoomTypeLisd *           LiztMeasurementRoomTypeVal;
  MeshTriangleTypeLisd *              LiztMeshTriangleTypeVal;
  NonDestructiveTestingEnumTypeLisd * LiztNonDestructiveTestingEnumTypeVal;
  NotableEventTypeLisd *              LiztNotableEventTypeVal;
  NoteFlagTypeLisd *                  LiztNoteFlagTypeVal;
  NoteTypeLisd *                      LiztNoteTypeVal;
  NotedEventTypeLisd *                LiztNotedEventTypeVal;
  NumberedPlanElementTypeLisd *       LiztNumberedPlanElementTypeVal;
  PMIDisplayTypeLisd *                LiztPMIDisplayTypeVal;
  PartNoteTypeLisd *                  LiztPartNoteTypeVal;
  PartTypeLisd *                      LiztPartTypeVal;
  PathTriangulationTypeLisd *         LiztPathTriangulationTypeVal;
  PlanElementBaseTypeLisd *           LiztPlanElementBaseTypeVal;
  Point2dSimpleTypeLisd *             LiztPoint2dSimpleTypeVal;
  PointCloudTypeLisd *                LiztPointCloudTypeVal;
  PointDeviationStatsEvalTypeLisd *   LiztPointDeviationStatsEvalTypeVal;
  PointDeviationTypeLisd *            LiztPointDeviationTypeVal;
  PointEntityTypeLisd *               LiztPointEntityTypeVal;
  PointSetNominalTypeLisd *           LiztPointSetNominalTypeVal;
  PointSetReferenceBaseTypeLisd *     LiztPointSetReferenceBaseTypeVal;
  Polyline2dTypeLisd *                LiztPolyline2dTypeVal;
  PressureUnitTypeLisd *              LiztPressureUnitTypeVal;
  ProcessParameterTypeLisd *          LiztProcessParameterTypeVal;
  ProductDataQualityCheckTypeLisd *   LiztProductDataQualityCheckTypeVal;
  QIFFeaturePairTypeLisd *            LiztQIFFeaturePairTypeVal;
  QIFReferenceActiveTypeLisd *        LiztQIFReferenceActiveTypeVal;
  QIFReferenceFullTypeLisd *          LiztQIFReferenceFullTypeVal;
  QIFReferenceTypeLisd *              LiztQIFReferenceTypeVal;
  QPIdFullReferenceTypeLisd *         LiztQPIdFullReferenceTypeVal;
  QPIdReferenceTypeLisd *             LiztQPIdReferenceTypeVal;
  QualificationTypeLisd *             LiztQualificationTypeVal;
  SavedViewTypeLisd *                 LiztSavedViewTypeVal;
  SectionAreaTypeLisd *               LiztSectionAreaTypeVal;
  SectionGroupTypeLisd *              LiztSectionGroupTypeVal;
  SectionPathTypeLisd *               LiztSectionPathTypeVal;
  SequencedBaseFeatureTypeLisd *      LiztSequencedBaseFeatureTypeVal;
  SequencedDatumTypeLisd *            LiztSequencedDatumTypeVal;
  ShellTypeLisd *                     LiztShellTypeVal;
  SimplifiedRepresentationGroupTypeLisd * LiztSimplifiedRepresentationGroupTypeVal;
  SimplifiedRepresentationTypeLisd *  LiztSimplifiedRepresentationTypeVal;
  SimultaneousRequirementGroupTypeLisd * LiztSimultaneousRequirementGroupTypeVal;
  SoftwareTypeLisd *                  LiztSoftwareTypeVal;
  SpeedUnitTypeLisd *                 LiztSpeedUnitTypeVal;
  StandardTypeLisd *                  LiztStandardTypeVal;
  StatisticalStudyPlanBaseTypeLisd *  LiztStatisticalStudyPlanBaseTypeVal;
  StatisticalStudyResultsBaseTypeLisd * LiztStatisticalStudyResultsBaseTypeVal;
  StatsValuesTypeLisd *               LiztStatsValuesTypeVal;
  StatsWithReferenceBaseTypeLisd *    LiztStatsWithReferenceBaseTypeVal;
  StepWithPredecessorsTypeLisd *      LiztStepWithPredecessorsTypeVal;
  StudyIssueTypeLisd *                LiztStudyIssueTypeVal;
  SubgroupDecimalTypeLisd *           LiztSubgroupDecimalTypeVal;
  SubgroupIntegerTypeLisd *           LiztSubgroupIntegerTypeVal;
  SubgroupTypeLisd *                  LiztSubgroupTypeVal;
  SummaryStatisticsAngularTypeLisd *  LiztSummaryStatisticsAngularTypeVal;
  SummaryStatisticsAreaTypeLisd *     LiztSummaryStatisticsAreaTypeVal;
  SummaryStatisticsForceTypeLisd *    LiztSummaryStatisticsForceTypeVal;
  SummaryStatisticsLinearTypeLisd *   LiztSummaryStatisticsLinearTypeVal;
  SummaryStatisticsMassTypeLisd *     LiztSummaryStatisticsMassTypeVal;
  SummaryStatisticsPressureTypeLisd * LiztSummaryStatisticsPressureTypeVal;
  SummaryStatisticsSpeedTypeLisd *    LiztSummaryStatisticsSpeedTypeVal;
  SummaryStatisticsTemperatureTypeLisd * LiztSummaryStatisticsTemperatureTypeVal;
  SummaryStatisticsTimeTypeLisd *     LiztSummaryStatisticsTimeTypeVal;
  SummaryStatisticsTypeLisd *         LiztSummaryStatisticsTypeVal;
  SummaryStatisticsUserDefinedUnitTypeLisd * LiztSummaryStatisticsUserDefinedUnitTypeVal;
  SummaryStatsValuesListTypeLisd *    LiztSummaryStatsValuesListTypeVal;
  SummaryStatsValuesTypeLisd *        LiztSummaryStatsValuesTypeVal;
  SurfaceBaseTypeLisd *               LiztSurfaceBaseTypeVal;
  TemperatureTypeLisd *               LiztTemperatureTypeVal;
  TemperatureUnitTypeLisd *           LiztTemperatureUnitTypeVal;
  TestAndPlanElementTypeLisd *        LiztTestAndPlanElementTypeVal;
  TextTypeLisd *                      LiztTextTypeVal;
  ThreadSpecificationTypeLisd *       LiztThreadSpecificationTypeVal;
  TimeUnitTypeLisd *                  LiztTimeUnitTypeVal;
  TokenExpressionBaseTypeLisd *       LiztTokenExpressionBaseTypeVal;
  ToleranceDefinitionsTypeChoicePairLisd * LiztToleranceDefinitionsTypeChoicePairVal;
  ToolBaseTypeLisd *                  LiztToolBaseTypeVal;
  TrailingZeroDimensionalCharacteristicDisplayGroupTypeLisd * LiztTrailingZeroDimensionalCharacteristicDisplayGroupTypeVal;
  TrailingZeroGeometricCharacteristicDisplayGroupTypeLisd * LiztTrailingZeroGeometricCharacteristicDisplayGroupTypeVal;
  TransformInstanceTypeLisd *         LiztTransformInstanceTypeVal;
  TriangleVertexNormalTypeLisd *      LiztTriangleVertexNormalTypeVal;
  UserDefinedUnitTypeLisd *           LiztUserDefinedUnitTypeVal;
  UserDefinedUnitValueTypeLisd *      LiztUserDefinedUnitValueTypeVal;
  ValidationPartAssemblyInstanceTypeLisd * LiztValidationPartAssemblyInstanceTypeVal;
  VariableDeclarationTypeLisd *       LiztVariableDeclarationTypeVal;
  VersionReferenceTypeLisd *          LiztVersionReferenceTypeVal;
  VertexTypeLisd *                    LiztVertexTypeVal;
  WorkInstructionBaseTypeLisd *       LiztWorkInstructionBaseTypeVal;
  XmlPositiveIntegerLisd *            LiztXmlPositiveIntegerVal;
  XmlStringLisd *                     LiztXmlStringVal;
  ZoneDataTypeLisd *                  LiztZoneDataTypeVal;
  ZoneSectionPlaneTypeLisd *          LiztZoneSectionPlaneTypeVal;
  ZoneSectionTypeLisd *               LiztZoneSectionTypeVal;
  LocalVariablesType *                LocalVariablesTypeVal;
  LocatedTipType *                    LocatedTipTypeVal;
  LocatedTipsType *                   LocatedTipsTypeVal;
  LocationCharacteristicStatsEvalType * LocationCharacteristicStatsEvalTypeVal;
  LocationOnDrawi_1060_Type *         LocationOnDrawi_1060_TypeVal;
  LocationOnDrawi_1061_Type *         LocationOnDrawi_1061_TypeVal;
  LocationOnDrawi_1062_Type *         LocationOnDrawi_1062_TypeVal;
  LocationOnDrawingTypeChoicePair *   LocationOnDrawingTypeChoicePairVal;
  LocationOnDrawingType *             LocationOnDrawingTypeVal;
  LocationSignificanceAllEnumType *   LocationSignificanceAllEnumTypeVal;
  LocationSignificanceOneSidesEnumType * LocationSignificanceOneSidesEnumTypeVal;
  LocationSignificanceSpotSeamEnumType * LocationSignificanceSpotSeamEnumTypeVal;
  LocationType *                      LocationTypeVal;
  LogicalOperatio_1231_TypeChoicePair * LogicalOperatio_1231_TypeChoicePairVal;
  LogicalOperatio_1231_Type *         LogicalOperatio_1231_TypeVal;
  LogicalOperationEnumType *          LogicalOperationEnumTypeVal;
  LogicalOperationType *              LogicalOperationTypeVal;
  LogicalOperationsType *             LogicalOperationsTypeVal;
  LoopBaseType *                      LoopBaseTypeVal;
  LoopFormEnumType *                  LoopFormEnumTypeVal;
  LoopMeshType *                      LoopMeshTypeVal;
  LoopSetType *                       LoopSetTypeVal;
  LoopType *                          LoopTypeVal;
  Loops2dType *                       Loops2dTypeVal;
  MachineCoordinateSystemOperationType * MachineCoordinateSystemOperationTypeVal;
  MachineCoordinateSystemType *       MachineCoordinateSystemTypeVal;
  MagnetoInductiveSensorType *        MagnetoInductiveSensorTypeVal;
  ManualMeasureFeatureMethodType *    ManualMeasureFeatureMethodTypeVal;
  ManualMeasurementDeviceType *       ManualMeasurementDeviceTypeVal;
  ManufacturingMethodEnumType *       ManufacturingMethodEnumTypeVal;
  ManufacturingMethodTypeChoicePair * ManufacturingMethodTypeChoicePairVal;
  ManufacturingMethodType *           ManufacturingMethodTypeVal;
  ManufacturingProcessTraceabilitiesType * ManufacturingProcessTraceabilitiesTypeVal;
  ManufacturingProcessTraceabilityType * ManufacturingProcessTraceabilityTypeVal;
  MarkingFeatureDefinitionType *      MarkingFeatureDefinitionTypeVal;
  MarkingFeatureItemType *            MarkingFeatureItemTypeVal;
  MarkingFeatureMeasurementType *     MarkingFeatureMeasurementTypeVal;
  MarkingFeatureNominalType *         MarkingFeatureNominalTypeVal;
  MarkingMethodEnumType *             MarkingMethodEnumTypeVal;
  MarkingMethodTypeChoicePair *       MarkingMethodTypeChoicePairVal;
  MarkingMethodType *                 MarkingMethodTypeVal;
  MassCharacteris_1063_TypeChoicePair * MassCharacteris_1063_TypeChoicePairVal;
  MassCharacteris_1063_Type *         MassCharacteris_1063_TypeVal;
  MassToleranceTy_1018_TypeChoicePair * MassToleranceTy_1018_TypeChoicePairVal;
  MassToleranceTy_1018_Type *         MassToleranceTy_1018_TypeVal;
  MassToleranceTy_1036_Type *         MassToleranceTy_1036_TypeVal;
  MassToleranceType *                 MassToleranceTypeVal;
  MassUnitType *                      MassUnitTypeVal;
  MassValueType *                     MassValueTypeVal;
  MaterialClassEnumType *             MaterialClassEnumTypeVal;
  MaterialModifierEnumType *          MaterialModifierEnumTypeVal;
  MaterialType *                      MaterialTypeVal;
  MaterialType_1019_TypeChoicePair *  MaterialType_1019_TypeChoicePairVal;
  MaterialType_1019_Type *            MaterialType_1019_TypeVal;
  MaterialsType *                     MaterialsTypeVal;
  MaxFeatureRulesType *               MaxFeatureRulesTypeVal;
  MaxType *                           MaxTypeVal;
  MeasurandBaseType *                 MeasurandBaseTypeVal;
  MeasurandsType *                    MeasurandsTypeVal;
  MeasureActionGroupFunctionEnumType * MeasureActionGroupFunctionEnumTypeVal;
  MeasureActionGroupFunctionTypeChoicePair * MeasureActionGroupFunctionTypeChoicePairVal;
  MeasureActionGroupFunctionType *    MeasureActionGroupFunctionTypeVal;
  MeasureEvaluateAllActionType *      MeasureEvaluateAllActionTypeVal;
  MeasureEvaluateSpecifiedActionType * MeasureEvaluateSpecifiedActionTypeVal;
  MeasurePointNominalType *           MeasurePointNominalTypeVal;
  MeasureSpecifiedFeaturesActionType * MeasureSpecifiedFeaturesActionTypeVal;
  MeasureSpecifiedMeasurandsActionType * MeasureSpecifiedMeasurandsActionTypeVal;
  MeasuredAngularValueType *          MeasuredAngularValueTypeVal;
  MeasuredAreaValueType *             MeasuredAreaValueTypeVal;
  MeasuredAxisType *                  MeasuredAxisTypeVal;
  MeasuredCharacteristicsType *       MeasuredCharacteristicsTypeVal;
  MeasuredDatumFeatureType *          MeasuredDatumFeatureTypeVal;
  MeasuredDecimalType *               MeasuredDecimalTypeVal;
  MeasuredEndRadiusType *             MeasuredEndRadiusTypeVal;
  MeasuredFeatureType *               MeasuredFeatureTypeVal;
  MeasuredForceValueType *            MeasuredForceValueTypeVal;
  MeasuredLinearValueType *           MeasuredLinearValueTypeVal;
  MeasuredMassValueType *             MeasuredMassValueTypeVal;
  MeasuredPlaneType *                 MeasuredPlaneTypeVal;
  MeasuredPointAndVectorType *        MeasuredPointAndVectorTypeVal;
  MeasuredPointSe_1105_TypeChoicePair * MeasuredPointSe_1105_TypeChoicePairVal;
  MeasuredPointSe_1105_Type *         MeasuredPointSe_1105_TypeVal;
  MeasuredPointSe_1106_TypeChoicePair * MeasuredPointSe_1106_TypeChoicePairVal;
  MeasuredPointSe_1106_Type *         MeasuredPointSe_1106_TypeVal;
  MeasuredPointSe_1107_TypeChoicePair * MeasuredPointSe_1107_TypeChoicePairVal;
  MeasuredPointSe_1107_Type *         MeasuredPointSe_1107_TypeVal;
  MeasuredPointSe_1108_TypeChoicePair * MeasuredPointSe_1108_TypeChoicePairVal;
  MeasuredPointSe_1108_Type *         MeasuredPointSe_1108_TypeVal;
  MeasuredPointSe_1109_TypeChoicePair * MeasuredPointSe_1109_TypeChoicePairVal;
  MeasuredPointSe_1109_Type *         MeasuredPointSe_1109_TypeVal;
  MeasuredPointSe_1110_TypeChoicePair * MeasuredPointSe_1110_TypeChoicePairVal;
  MeasuredPointSe_1110_Type *         MeasuredPointSe_1110_TypeVal;
  MeasuredPointSe_1111_TypeChoicePair * MeasuredPointSe_1111_TypeChoicePairVal;
  MeasuredPointSe_1111_Type *         MeasuredPointSe_1111_TypeVal;
  MeasuredPointSe_1112_TypeChoicePair * MeasuredPointSe_1112_TypeChoicePairVal;
  MeasuredPointSe_1112_Type *         MeasuredPointSe_1112_TypeVal;
  MeasuredPointSe_1113_TypeChoicePair * MeasuredPointSe_1113_TypeChoicePairVal;
  MeasuredPointSe_1113_Type *         MeasuredPointSe_1113_TypeVal;
  MeasuredPointSe_1114_TypeChoicePair * MeasuredPointSe_1114_TypeChoicePairVal;
  MeasuredPointSe_1114_Type *         MeasuredPointSe_1114_TypeVal;
  MeasuredPointSe_1115_TypeChoicePair * MeasuredPointSe_1115_TypeChoicePairVal;
  MeasuredPointSe_1115_Type *         MeasuredPointSe_1115_TypeVal;
  MeasuredPointSe_1116_TypeChoicePair * MeasuredPointSe_1116_TypeChoicePairVal;
  MeasuredPointSe_1116_Type *         MeasuredPointSe_1116_TypeVal;
  MeasuredPointSe_1117_Type *         MeasuredPointSe_1117_TypeVal;
  MeasuredPointSe_1125_TypeChoicePair * MeasuredPointSe_1125_TypeChoicePairVal;
  MeasuredPointSe_1125_Type *         MeasuredPointSe_1125_TypeVal;
  MeasuredPointSetType *              MeasuredPointSetTypeVal;
  MeasuredPointSetsType *             MeasuredPointSetsTypeVal;
  MeasuredPointType *                 MeasuredPointTypeVal;
  MeasuredPressureValueType *         MeasuredPressureValueTypeVal;
  MeasuredSpeedValueType *            MeasuredSpeedValueTypeVal;
  MeasuredTemperatureValueType *      MeasuredTemperatureValueTypeVal;
  MeasuredTimeValueType *             MeasuredTimeValueTypeVal;
  MeasuredUnitVectorType *            MeasuredUnitVectorTypeVal;
  MeasuredUserDefinedUnitValueType *  MeasuredUserDefinedUnitValueTypeVal;
  MeasuredZoneAxisType *              MeasuredZoneAxisTypeVal;
  MeasuredZoneRadiiType *             MeasuredZoneRadiiTypeVal;
  MeasurementDeviceScaleType *        MeasurementDeviceScaleTypeVal;
  MeasurementDeviceScalesBaseType *   MeasurementDeviceScalesBaseTypeVal;
  MeasurementDeviceType *             MeasurementDeviceTypeVal;
  MeasurementDevicesType *            MeasurementDevicesTypeVal;
  MeasurementDirectiveEnumType *      MeasurementDirectiveEnumTypeVal;
  MeasurementDirectiveTypeChoicePair * MeasurementDirectiveTypeChoicePairVal;
  MeasurementDirectiveType *          MeasurementDirectiveTypeVal;
  MeasurementOffsetAlignmentOperationType * MeasurementOffsetAlignmentOperationTypeVal;
  MeasurementOriginOffsetType *       MeasurementOriginOffsetTypeVal;
  MeasurementReso_1241_TypeChoicePair * MeasurementReso_1241_TypeChoicePairVal;
  MeasurementReso_1241_Type *         MeasurementReso_1241_TypeVal;
  MeasurementResourcesType *          MeasurementResourcesTypeVal;
  MeasurementResultsSetType *         MeasurementResultsSetTypeVal;
  MeasurementResultsType *            MeasurementResultsTypeVal;
  MeasurementRoomType *               MeasurementRoomTypeVal;
  MeasurementRoomsType *              MeasurementRoomsTypeVal;
  MeshTriangleCor_1213_TypeChoicePair * MeshTriangleCor_1213_TypeChoicePairVal;
  MeshTriangleCor_1213_Type *         MeshTriangleCor_1213_TypeVal;
  MeshTriangleCor_1214_TypeChoicePair * MeshTriangleCor_1214_TypeChoicePairVal;
  MeshTriangleCor_1214_Type *         MeshTriangleCor_1214_TypeVal;
  MeshTriangleCor_1215_TypeChoicePair * MeshTriangleCor_1215_TypeChoicePairVal;
  MeshTriangleCor_1215_Type *         MeshTriangleCor_1215_TypeVal;
  MeshTriangleCor_1216_TypeChoicePair * MeshTriangleCor_1216_TypeChoicePairVal;
  MeshTriangleCor_1216_Type *         MeshTriangleCor_1216_TypeVal;
  MeshTriangleCoreType *              MeshTriangleCoreTypeVal;
  MeshTriangleTyp_1217_TypeChoicePair * MeshTriangleTyp_1217_TypeChoicePairVal;
  MeshTriangleTyp_1217_Type *         MeshTriangleTyp_1217_TypeVal;
  MeshTriangleType *                  MeshTriangleTypeVal;
  MicrometerAnalogType *              MicrometerAnalogTypeVal;
  MicrometerDigitalType *             MicrometerDigitalTypeVal;
  MicrometerType *                    MicrometerTypeVal;
  MicroscopeMeasureFeatureMethodType * MicroscopeMeasureFeatureMethodTypeVal;
  MicroscopeType *                    MicroscopeTypeVal;
  MinType *                           MinTypeVal;
  MinusType *                         MinusTypeVal;
  ModifyingPlaneEnumType *            ModifyingPlaneEnumTypeVal;
  MovableDatumTargetDirectionType *   MovableDatumTargetDirectionTypeVal;
  MultiLeadThreadSpecificationType *  MultiLeadThreadSpecificationTypeVal;
  MultipleCarriageCartesianCMMType *  MultipleCarriageCartesianCMMTypeVal;
  NaturalType *                       NaturalTypeVal;
  NegateType *                        NegateTypeVal;
  NominalDatumFeatureType *           NominalDatumFeatureTypeVal;
  NominalOffsetAlignmentOperationType * NominalOffsetAlignmentOperationTypeVal;
  NominalPointSetListType *           NominalPointSetListTypeVal;
  NominalRotationAlignmentOperationType * NominalRotationAlignmentOperationTypeVal;
  NonDestructiveTestingEnumType *     NonDestructiveTestingEnumTypeVal;
  NonNegativeDecimalType *            NonNegativeDecimalTypeVal;
  NonToleranceEnumType *              NonToleranceEnumTypeVal;
  NotType *                           NotTypeVal;
  NotableEventType *                  NotableEventTypeVal;
  NotableEventsType *                 NotableEventsTypeVal;
  NoteFlagSetType *                   NoteFlagSetTypeVal;
  NoteFlagType *                      NoteFlagTypeVal;
  NoteFormEnumType *                  NoteFormEnumTypeVal;
  NoteSetType *                       NoteSetTypeVal;
  NoteType *                          NoteTypeVal;
  NotedEventType *                    NotedEventTypeVal;
  NotedEventsType *                   NotedEventsTypeVal;
  NumberedPlanElementType *           NumberedPlanElementTypeVal;
  NumberedPlanElementsType *          NumberedPlanElementsTypeVal;
  NumericalLengthAccuracyType *       NumericalLengthAccuracyTypeVal;
  Nurbs12CoreType *                   Nurbs12CoreTypeVal;
  Nurbs12CoreType_1218_TypeChoicePair * Nurbs12CoreType_1218_TypeChoicePairVal;
  Nurbs12CoreType_1218_Type *         Nurbs12CoreType_1218_TypeVal;
  Nurbs12Type *                       Nurbs12TypeVal;
  Nurbs13CoreType *                   Nurbs13CoreTypeVal;
  Nurbs13CoreType_1219_TypeChoicePair * Nurbs13CoreType_1219_TypeChoicePairVal;
  Nurbs13CoreType_1219_Type *         Nurbs13CoreType_1219_TypeVal;
  Nurbs13Type *                       Nurbs13TypeVal;
  Nurbs23CoreType *                   Nurbs23CoreTypeVal;
  Nurbs23CoreType_1220_TypeChoicePair * Nurbs23CoreType_1220_TypeChoicePairVal;
  Nurbs23CoreType_1220_Type *         Nurbs23CoreType_1220_TypeVal;
  Nurbs23Type *                       Nurbs23TypeVal;
  Offset23CoreType *                  Offset23CoreTypeVal;
  Offset23Type *                      Offset23TypeVal;
  OneOfActionGroupType *              OneOfActionGroupTypeVal;
  OneSidedCapabilityCalculationEnumType * OneSidedCapabilityCalculationEnumTypeVal;
  OpenCurvePointSamplingStrategyEnumType * OpenCurvePointSamplingStrategyEnumTypeVal;
  OppositeAngledLinesBestFitType *    OppositeAngledLinesBestFitTypeVal;
  OppositeAngledLinesCastType *       OppositeAngledLinesCastTypeVal;
  OppositeAngledLinesCheckedFeatureType * OppositeAngledLinesCheckedFeatureTypeVal;
  OppositeAngledLinesCheckedTypeChoicePair * OppositeAngledLinesCheckedTypeChoicePairVal;
  OppositeAngledLinesCheckedType *    OppositeAngledLinesCheckedTypeVal;
  OppositeAngledLinesConstructionMethodTypeChoicePair * OppositeAngledLinesConstructionMethodTypeChoicePairVal;
  OppositeAngledLinesConstructionMethodType * OppositeAngledLinesConstructionMethodTypeVal;
  OppositeAngledLinesCopyType *       OppositeAngledLinesCopyTypeVal;
  OppositeAngledLinesFeatureDefinitionType * OppositeAngledLinesFeatureDefinitionTypeVal;
  OppositeAngledLinesFeatureItemType * OppositeAngledLinesFeatureItemTypeVal;
  OppositeAngledLinesFeatureMeasurementType * OppositeAngledLinesFeatureMeasurementTypeVal;
  OppositeAngledLinesFeatureNominalType * OppositeAngledLinesFeatureNominalTypeVal;
  OppositeAngledLinesFromScanType *   OppositeAngledLinesFromScanTypeVal;
  OppositeAngledLinesIntersectionType * OppositeAngledLinesIntersectionTypeVal;
  OppositeAngledLinesMeasurementDeterminationTypeChoicePair * OppositeAngledLinesMeasurementDeterminationTypeChoicePairVal;
  OppositeAngledLinesMeasurementDeterminationType * OppositeAngledLinesMeasurementDeterminationTypeVal;
  OppositeAngledLinesPointSamplingStrategyTypeChoicePair * OppositeAngledLinesPointSamplingStrategyTypeChoicePairVal;
  OppositeAngledLinesPointSamplingStrategyType * OppositeAngledLinesPointSamplingStrategyTypeVal;
  OppositeAngledLinesProjectionType * OppositeAngledLinesProjectionTypeVal;
  OppositeAngledLinesRecompType *     OppositeAngledLinesRecompTypeVal;
  OppositeAngledLinesTransformType *  OppositeAngledLinesTransformTypeVal;
  OppositeAngledP_1118_TypeChoicePair * OppositeAngledP_1118_TypeChoicePairVal;
  OppositeAngledP_1118_Type *         OppositeAngledP_1118_TypeVal;
  OppositeAngledP_1119_TypeChoicePair * OppositeAngledP_1119_TypeChoicePairVal;
  OppositeAngledP_1119_Type *         OppositeAngledP_1119_TypeVal;
  OppositeAngledPlanesBestFitType *   OppositeAngledPlanesBestFitTypeVal;
  OppositeAngledPlanesCastType *      OppositeAngledPlanesCastTypeVal;
  OppositeAngledPlanesCheckedFeatureType * OppositeAngledPlanesCheckedFeatureTypeVal;
  OppositeAngledPlanesCheckedTypeChoicePair * OppositeAngledPlanesCheckedTypeChoicePairVal;
  OppositeAngledPlanesCheckedType *   OppositeAngledPlanesCheckedTypeVal;
  OppositeAngledPlanesConstructionMethodTypeChoicePair * OppositeAngledPlanesConstructionMethodTypeChoicePairVal;
  OppositeAngledPlanesConstructionMethodType * OppositeAngledPlanesConstructionMethodTypeVal;
  OppositeAngledPlanesCopyType *      OppositeAngledPlanesCopyTypeVal;
  OppositeAngledPlanesFeatureDefinitionType * OppositeAngledPlanesFeatureDefinitionTypeVal;
  OppositeAngledPlanesFeatureItemType * OppositeAngledPlanesFeatureItemTypeVal;
  OppositeAngledPlanesFeatureMeasurementType * OppositeAngledPlanesFeatureMeasurementTypeVal;
  OppositeAngledPlanesFeatureNominalType * OppositeAngledPlanesFeatureNominalTypeVal;
  OppositeAngledPlanesFromScanType *  OppositeAngledPlanesFromScanTypeVal;
  OppositeAngledPlanesMeasurementDeterminationTypeChoicePair * OppositeAngledPlanesMeasurementDeterminationTypeChoicePairVal;
  OppositeAngledPlanesMeasurementDeterminationType * OppositeAngledPlanesMeasurementDeterminationTypeVal;
  OppositeAngledPlanesPointSamplingStrategyTypeChoicePair * OppositeAngledPlanesPointSamplingStrategyTypeChoicePairVal;
  OppositeAngledPlanesPointSamplingStrategyType * OppositeAngledPlanesPointSamplingStrategyTypeVal;
  OppositeAngledPlanesRecompType *    OppositeAngledPlanesRecompTypeVal;
  OppositeAngledPlanesTransformType * OppositeAngledPlanesTransformTypeVal;
  OppositeParallelLinesBestFitType *  OppositeParallelLinesBestFitTypeVal;
  OppositeParallelLinesCastType *     OppositeParallelLinesCastTypeVal;
  OppositeParallelLinesCheckedFeatureType * OppositeParallelLinesCheckedFeatureTypeVal;
  OppositeParallelLinesCheckedTypeChoicePair * OppositeParallelLinesCheckedTypeChoicePairVal;
  OppositeParallelLinesCheckedType *  OppositeParallelLinesCheckedTypeVal;
  OppositeParallelLinesConstructionMethodTypeChoicePair * OppositeParallelLinesConstructionMethodTypeChoicePairVal;
  OppositeParallelLinesConstructionMethodType * OppositeParallelLinesConstructionMethodTypeVal;
  OppositeParallelLinesCopyType *     OppositeParallelLinesCopyTypeVal;
  OppositeParallelLinesFeatureDefinitionType * OppositeParallelLinesFeatureDefinitionTypeVal;
  OppositeParallelLinesFeatureItemType * OppositeParallelLinesFeatureItemTypeVal;
  OppositeParallelLinesFeatureMeasurementType * OppositeParallelLinesFeatureMeasurementTypeVal;
  OppositeParallelLinesFeatureNominalType * OppositeParallelLinesFeatureNominalTypeVal;
  OppositeParallelLinesFromScanType * OppositeParallelLinesFromScanTypeVal;
  OppositeParallelLinesIntersectionType * OppositeParallelLinesIntersectionTypeVal;
  OppositeParallelLinesMeasurementDeterminationTypeChoicePair * OppositeParallelLinesMeasurementDeterminationTypeChoicePairVal;
  OppositeParallelLinesMeasurementDeterminationType * OppositeParallelLinesMeasurementDeterminationTypeVal;
  OppositeParallelLinesPointSamplingStrategyTypeChoicePair * OppositeParallelLinesPointSamplingStrategyTypeChoicePairVal;
  OppositeParallelLinesPointSamplingStrategyType * OppositeParallelLinesPointSamplingStrategyTypeVal;
  OppositeParallelLinesProjectionType * OppositeParallelLinesProjectionTypeVal;
  OppositeParallelLinesRecompType *   OppositeParallelLinesRecompTypeVal;
  OppositeParallelLinesTransformType * OppositeParallelLinesTransformTypeVal;
  OppositeParallelPlanesBestFitType * OppositeParallelPlanesBestFitTypeVal;
  OppositeParallelPlanesCastType *    OppositeParallelPlanesCastTypeVal;
  OppositeParallelPlanesCheckedFeatureType * OppositeParallelPlanesCheckedFeatureTypeVal;
  OppositeParallelPlanesCheckedTypeChoicePair * OppositeParallelPlanesCheckedTypeChoicePairVal;
  OppositeParallelPlanesCheckedType * OppositeParallelPlanesCheckedTypeVal;
  OppositeParallelPlanesConstructionMethodTypeChoicePair * OppositeParallelPlanesConstructionMethodTypeChoicePairVal;
  OppositeParallelPlanesConstructionMethodType * OppositeParallelPlanesConstructionMethodTypeVal;
  OppositeParallelPlanesCopyType *    OppositeParallelPlanesCopyTypeVal;
  OppositeParallelPlanesFeatureDefinitionType * OppositeParallelPlanesFeatureDefinitionTypeVal;
  OppositeParallelPlanesFeatureItemType * OppositeParallelPlanesFeatureItemTypeVal;
  OppositeParallelPlanesFeatureMeasurementType * OppositeParallelPlanesFeatureMeasurementTypeVal;
  OppositeParallelPlanesFeatureNominalType * OppositeParallelPlanesFeatureNominalTypeVal;
  OppositeParallelPlanesFromScanType * OppositeParallelPlanesFromScanTypeVal;
  OppositeParallelPlanesMeasurementDeterminationTypeChoicePair * OppositeParallelPlanesMeasurementDeterminationTypeChoicePairVal;
  OppositeParallelPlanesMeasurementDeterminationType * OppositeParallelPlanesMeasurementDeterminationTypeVal;
  OppositeParallelPlanesPointSamplingStrategyTypeChoicePair * OppositeParallelPlanesPointSamplingStrategyTypeChoicePairVal;
  OppositeParallelPlanesPointSamplingStrategyType * OppositeParallelPlanesPointSamplingStrategyTypeVal;
  OppositeParallelPlanesRecompType *  OppositeParallelPlanesRecompTypeVal;
  OppositeParallelPlanesTransformType * OppositeParallelPlanesTransformTypeVal;
  OpticalComparatorType *             OpticalComparatorTypeVal;
  OrType *                            OrTypeVal;
  OrderedActionGroupType *            OrderedActionGroupTypeVal;
  OrganizationType *                  OrganizationTypeVal;
  OrientationChar_1064_TypeChoicePair * OrientationChar_1064_TypeChoicePairVal;
  OrientationChar_1064_Type *         OrientationChar_1064_TypeVal;
  OrientationCharacteristicStatsEvalType * OrientationCharacteristicStatsEvalTypeVal;
  OrientationDiametricalZoneType *    OrientationDiametricalZoneTypeVal;
  OrientationPlanarZoneType *         OrientationPlanarZoneTypeVal;
  OrientationPlaneType *              OrientationPlaneTypeVal;
  OrientationZoneShapeTypeChoicePair * OrientationZoneShapeTypeChoicePairVal;
  OrientationZoneShapeType *          OrientationZoneShapeTypeVal;
  OrientedLatitudeLongitudeSweepType * OrientedLatitudeLongitudeSweepTypeVal;
  OriginReferenceTypeChoicePair *     OriginReferenceTypeChoicePairVal;
  OriginReferenceType *               OriginReferenceTypeVal;
  OriginReference_1065_Type *         OriginReference_1065_TypeVal;
  OtherCurveCheckedFeatureType *      OtherCurveCheckedFeatureTypeVal;
  OtherCurveCheckedTypeChoicePair *   OtherCurveCheckedTypeChoicePairVal;
  OtherCurveCheckedType *             OtherCurveCheckedTypeVal;
  OtherCurveConstructionMethodTypeChoicePair * OtherCurveConstructionMethodTypeChoicePairVal;
  OtherCurveConstructionMethodType *  OtherCurveConstructionMethodTypeVal;
  OtherCurveFeatureCopyType *         OtherCurveFeatureCopyTypeVal;
  OtherCurveFeatureDefinitionType *   OtherCurveFeatureDefinitionTypeVal;
  OtherCurveFeatureItemType *         OtherCurveFeatureItemTypeVal;
  OtherCurveFeatureMeasurementType *  OtherCurveFeatureMeasurementTypeVal;
  OtherCurveFeatureNominalType *      OtherCurveFeatureNominalTypeVal;
  OtherCurveMeasurementDeterminationTypeChoicePair * OtherCurveMeasurementDeterminationTypeChoicePairVal;
  OtherCurveMeasurementDeterminationType * OtherCurveMeasurementDeterminationTypeVal;
  OtherFormCharacteristicDefinitionType * OtherFormCharacteristicDefinitionTypeVal;
  OtherFormCharacteristicItemType *   OtherFormCharacteristicItemTypeVal;
  OtherFormCharacteristicMeasurementType * OtherFormCharacteristicMeasurementTypeVal;
  OtherFormCharacteristicNominalType * OtherFormCharacteristicNominalTypeVal;
  OtherFormCharacteristicStatsEvalType * OtherFormCharacteristicStatsEvalTypeVal;
  OtherMeasureFeatureMethodType *     OtherMeasureFeatureMethodTypeVal;
  OtherNonShapeFeatureDefinitionType * OtherNonShapeFeatureDefinitionTypeVal;
  OtherNonShapeFeatureItemType *      OtherNonShapeFeatureItemTypeVal;
  OtherNonShapeFeatureMeasurementType * OtherNonShapeFeatureMeasurementTypeVal;
  OtherNonShapeFeatureNominalType *   OtherNonShapeFeatureNominalTypeVal;
  OtherShapeCheckedFeatureType *      OtherShapeCheckedFeatureTypeVal;
  OtherShapeCheckedTypeChoicePair *   OtherShapeCheckedTypeChoicePairVal;
  OtherShapeCheckedType *             OtherShapeCheckedTypeVal;
  OtherShapeConstructionMethodTypeChoicePair * OtherShapeConstructionMethodTypeChoicePairVal;
  OtherShapeConstructionMethodType *  OtherShapeConstructionMethodTypeVal;
  OtherShapeFeatureCopyType *         OtherShapeFeatureCopyTypeVal;
  OtherShapeFeatureDefinitionType *   OtherShapeFeatureDefinitionTypeVal;
  OtherShapeFeatureItemType *         OtherShapeFeatureItemTypeVal;
  OtherShapeFeatureMeasurementType *  OtherShapeFeatureMeasurementTypeVal;
  OtherShapeFeatureNominalType *      OtherShapeFeatureNominalTypeVal;
  OtherShapeMeasurementDeterminationTypeChoicePair * OtherShapeMeasurementDeterminationTypeChoicePairVal;
  OtherShapeMeasurementDeterminationType * OtherShapeMeasurementDeterminationTypeVal;
  OtherSurfaceCheckedFeatureType *    OtherSurfaceCheckedFeatureTypeVal;
  OtherSurfaceCheckedTypeChoicePair * OtherSurfaceCheckedTypeChoicePairVal;
  OtherSurfaceCheckedType *           OtherSurfaceCheckedTypeVal;
  OtherSurfaceConstructionMethodTypeChoicePair * OtherSurfaceConstructionMethodTypeChoicePairVal;
  OtherSurfaceConstructionMethodType * OtherSurfaceConstructionMethodTypeVal;
  OtherSurfaceFea_1120_TypeChoicePair * OtherSurfaceFea_1120_TypeChoicePairVal;
  OtherSurfaceFea_1120_Type *         OtherSurfaceFea_1120_TypeVal;
  OtherSurfaceFeatureCopyType *       OtherSurfaceFeatureCopyTypeVal;
  OtherSurfaceFeatureDefinitionType * OtherSurfaceFeatureDefinitionTypeVal;
  OtherSurfaceFeatureItemType *       OtherSurfaceFeatureItemTypeVal;
  OtherSurfaceFeatureMeasurementType * OtherSurfaceFeatureMeasurementTypeVal;
  OtherSurfaceFeatureNominalType *    OtherSurfaceFeatureNominalTypeVal;
  OtherSurfaceMeasurementDeterminationTypeChoicePair * OtherSurfaceMeasurementDeterminationTypeChoicePairVal;
  OtherSurfaceMeasurementDeterminationType * OtherSurfaceMeasurementDeterminationTypeVal;
  OtherUnitsType *                    OtherUnitsTypeVal;
  PMIDisplaySetType *                 PMIDisplaySetTypeVal;
  PMIDisplayType *                    PMIDisplayTypeVal;
  ParallelLinkCMMSpeedsType *         ParallelLinkCMMSpeedsTypeVal;
  ParallelLinkCMMType *               ParallelLinkCMMTypeVal;
  ParallelismCharacteristicDefinitionType * ParallelismCharacteristicDefinitionTypeVal;
  ParallelismCharacteristicItemType * ParallelismCharacteristicItemTypeVal;
  ParallelismCharacteristicMeasurementType * ParallelismCharacteristicMeasurementTypeVal;
  ParallelismCharacteristicNominalType * ParallelismCharacteristicNominalTypeVal;
  ParallelismCharacteristicStatsEvalType * ParallelismCharacteristicStatsEvalTypeVal;
  ParameterRangeType *                ParameterRangeTypeVal;
  PartAssemblyHeaderType *            PartAssemblyHeaderTypeVal;
  PartFamilyType *                    PartFamilyTypeVal;
  PartNoteSetType *                   PartNoteSetTypeVal;
  PartNoteType *                      PartNoteTypeVal;
  PartSetType *                       PartSetTypeVal;
  PartType *                          PartTypeVal;
  PartialInspectionType *             PartialInspectionTypeVal;
  PartiallyOrderedActionGroupType *   PartiallyOrderedActionGroupTypeVal;
  PathTriangulationCoreTypeChoicePair * PathTriangulationCoreTypeChoicePairVal;
  PathTriangulationCoreType *         PathTriangulationCoreTypeVal;
  PathTriangulationType *             PathTriangulationTypeVal;
  PatternFeatureCircleDefinitionType * PatternFeatureCircleDefinitionTypeVal;
  PatternFeatureCircleItemType *      PatternFeatureCircleItemTypeVal;
  PatternFeatureCircleNominalType *   PatternFeatureCircleNominalTypeVal;
  PatternFeatureCircularArcDefinitionType * PatternFeatureCircularArcDefinitionTypeVal;
  PatternFeatureCircularArcItemType * PatternFeatureCircularArcItemTypeVal;
  PatternFeatureCircularArcNominalType * PatternFeatureCircularArcNominalTypeVal;
  PatternFeatureLinearDefinitionType * PatternFeatureLinearDefinitionTypeVal;
  PatternFeatureLinearItemType *      PatternFeatureLinearItemTypeVal;
  PatternFeatureLinearNominalType *   PatternFeatureLinearNominalTypeVal;
  PatternFeatureParallelogramDefinitionType * PatternFeatureParallelogramDefinitionTypeVal;
  PatternFeatureParallelogramItemType * PatternFeatureParallelogramItemTypeVal;
  PatternFeatureParallelogramNominalType * PatternFeatureParallelogramNominalTypeVal;
  PerpendicularityCharacteristicDefinitionType * PerpendicularityCharacteristicDefinitionTypeVal;
  PerpendicularityCharacteristicItemType * PerpendicularityCharacteristicItemTypeVal;
  PerpendicularityCharacteristicMeasurementType * PerpendicularityCharacteristicMeasurementTypeVal;
  PerpendicularityCharacteristicNominalType * PerpendicularityCharacteristicNominalTypeVal;
  PerpendicularityCharacteristicStatsEvalType * PerpendicularityCharacteristicStatsEvalTypeVal;
  PhysicalAddressType *               PhysicalAddressTypeVal;
  PhysicalModelType *                 PhysicalModelTypeVal;
  PickSomeActionGroupType *           PickSomeActionGroupTypeVal;
  PlanElementBaseType *               PlanElementBaseTypeVal;
  PlanType *                          PlanTypeVal;
  Plane23CoreType *                   Plane23CoreTypeVal;
  Plane23Type *                       Plane23TypeVal;
  PlaneBestFitType *                  PlaneBestFitTypeVal;
  PlaneCastType *                     PlaneCastTypeVal;
  PlaneCheckedFeatureType *           PlaneCheckedFeatureTypeVal;
  PlaneCheckedTypeChoicePair *        PlaneCheckedTypeChoicePairVal;
  PlaneCheckedType *                  PlaneCheckedTypeVal;
  PlaneConstructionMethodTypeChoicePair * PlaneConstructionMethodTypeChoicePairVal;
  PlaneConstructionMethodType *       PlaneConstructionMethodTypeVal;
  PlaneCopyType *                     PlaneCopyTypeVal;
  PlaneExtractType *                  PlaneExtractTypeVal;
  PlaneFeatureDefinitionType *        PlaneFeatureDefinitionTypeVal;
  PlaneFeatureItemType *              PlaneFeatureItemTypeVal;
  PlaneFeatureMeasurementType *       PlaneFeatureMeasurementTypeVal;
  PlaneFeatureNom_1121_TypeChoicePair * PlaneFeatureNom_1121_TypeChoicePairVal;
  PlaneFeatureNom_1121_Type *         PlaneFeatureNom_1121_TypeVal;
  PlaneFeatureNominalType *           PlaneFeatureNominalTypeVal;
  PlaneMeasurementDeterminationTypeChoicePair * PlaneMeasurementDeterminationTypeChoicePairVal;
  PlaneMeasurementDeterminationType * PlaneMeasurementDeterminationTypeVal;
  PlaneMidplaneType *                 PlaneMidplaneTypeVal;
  PlaneOffsetType *                   PlaneOffsetTypeVal;
  PlanePMIDisplayType *               PlanePMIDisplayTypeVal;
  PlaneParallelType *                 PlaneParallelTypeVal;
  PlanePerpendicularType *            PlanePerpendicularTypeVal;
  PlanePointSamplingStrategyEnumType * PlanePointSamplingStrategyEnumTypeVal;
  PlanePointSamplingStrategyTypeChoicePair * PlanePointSamplingStrategyTypeChoicePairVal;
  PlanePointSamplingStrategyType *    PlanePointSamplingStrategyTypeVal;
  PlaneRecompType *                   PlaneRecompTypeVal;
  PlaneReferenceType *                PlaneReferenceTypeVal;
  PlaneTangentThroughType *           PlaneTangentThroughTypeVal;
  PlaneThroughType *                  PlaneThroughTypeVal;
  PlaneTransformType *                PlaneTransformTypeVal;
  PlaneType *                         PlaneTypeVal;
  PlaneXType *                        PlaneXTypeVal;
  PlusType *                          PlusTypeVal;
  Point2dSimpleType *                 Point2dSimpleTypeVal;
  PointAccuracyTestType *             PointAccuracyTestTypeVal;
  PointAndVectorType *                PointAndVectorTypeVal;
  PointAuxiliaryType *                PointAuxiliaryTypeVal;
  PointCheckedFeatureType *           PointCheckedFeatureTypeVal;
  PointCheckedTypeChoicePair *        PointCheckedTypeChoicePairVal;
  PointCheckedType *                  PointCheckedTypeVal;
  PointCloudSetType *                 PointCloudSetTypeVal;
  PointCloudType *                    PointCloudTypeVal;
  PointCloudType_1226_TypeChoicePair * PointCloudType_1226_TypeChoicePairVal;
  PointCloudType_1226_Type *          PointCloudType_1226_TypeVal;
  PointCloudType_1227_TypeChoicePair * PointCloudType_1227_TypeChoicePairVal;
  PointCloudType_1227_Type *          PointCloudType_1227_TypeVal;
  PointCloudType_1228_TypeChoicePair * PointCloudType_1228_TypeChoicePairVal;
  PointCloudType_1228_Type *          PointCloudType_1228_TypeVal;
  PointCloudType_1229_TypeChoicePair * PointCloudType_1229_TypeChoicePairVal;
  PointCloudType_1229_Type *          PointCloudType_1229_TypeVal;
  PointConstructionMethodTypeChoicePair * PointConstructionMethodTypeChoicePairVal;
  PointConstructionMethodType *       PointConstructionMethodTypeVal;
  PointDefinedCurveBestFitType *      PointDefinedCurveBestFitTypeVal;
  PointDefinedCurveCheckedFeatureType * PointDefinedCurveCheckedFeatureTypeVal;
  PointDefinedCurveCheckedTypeChoicePair * PointDefinedCurveCheckedTypeChoicePairVal;
  PointDefinedCurveCheckedType *      PointDefinedCurveCheckedTypeVal;
  PointDefinedCurveConstructionMethodTypeChoicePair * PointDefinedCurveConstructionMethodTypeChoicePairVal;
  PointDefinedCurveConstructionMethodType * PointDefinedCurveConstructionMethodTypeVal;
  PointDefinedCurveCopyType *         PointDefinedCurveCopyTypeVal;
  PointDefinedCurveExtractType *      PointDefinedCurveExtractTypeVal;
  PointDefinedCurveFeatureDefinitionType * PointDefinedCurveFeatureDefinitionTypeVal;
  PointDefinedCurveFeatureItemType *  PointDefinedCurveFeatureItemTypeVal;
  PointDefinedCurveFeatureMeasurementType * PointDefinedCurveFeatureMeasurementTypeVal;
  PointDefinedCurveFeatureNominalType * PointDefinedCurveFeatureNominalTypeVal;
  PointDefinedCurveFromScanType *     PointDefinedCurveFromScanTypeVal;
  PointDefinedCurveMeasurementDeterminationTypeChoicePair * PointDefinedCurveMeasurementDeterminationTypeChoicePairVal;
  PointDefinedCurveMeasurementDeterminationType * PointDefinedCurveMeasurementDeterminationTypeVal;
  PointDefinedCurvePointSamplingStrategyTypeChoicePair * PointDefinedCurvePointSamplingStrategyTypeChoicePairVal;
  PointDefinedCurvePointSamplingStrategyType * PointDefinedCurvePointSamplingStrategyTypeVal;
  PointDefinedCurveRecompType *       PointDefinedCurveRecompTypeVal;
  PointDefinedCurveTransformType *    PointDefinedCurveTransformTypeVal;
  PointDefinedPointSamplingStrategyEnumType * PointDefinedPointSamplingStrategyEnumTypeVal;
  PointDefinedSurfaceBestFitType *    PointDefinedSurfaceBestFitTypeVal;
  PointDefinedSurfaceCheckedFeatureType * PointDefinedSurfaceCheckedFeatureTypeVal;
  PointDefinedSurfaceCheckedTypeChoicePair * PointDefinedSurfaceCheckedTypeChoicePairVal;
  PointDefinedSurfaceCheckedType *    PointDefinedSurfaceCheckedTypeVal;
  PointDefinedSurfaceConstructionMethodTypeChoicePair * PointDefinedSurfaceConstructionMethodTypeChoicePairVal;
  PointDefinedSurfaceConstructionMethodType * PointDefinedSurfaceConstructionMethodTypeVal;
  PointDefinedSurfaceCopyType *       PointDefinedSurfaceCopyTypeVal;
  PointDefinedSurfaceExtractType *    PointDefinedSurfaceExtractTypeVal;
  PointDefinedSurfaceFeatureDefinitionType * PointDefinedSurfaceFeatureDefinitionTypeVal;
  PointDefinedSurfaceFeatureItemType * PointDefinedSurfaceFeatureItemTypeVal;
  PointDefinedSurfaceFeatureMeasurementType * PointDefinedSurfaceFeatureMeasurementTypeVal;
  PointDefinedSurfaceFeatureNominalType * PointDefinedSurfaceFeatureNominalTypeVal;
  PointDefinedSurfaceMeasurementDeterminationTypeChoicePair * PointDefinedSurfaceMeasurementDeterminationTypeChoicePairVal;
  PointDefinedSurfaceMeasurementDeterminationType * PointDefinedSurfaceMeasurementDeterminationTypeVal;
  PointDefinedSurfacePointSamplingStrategyTypeChoicePair * PointDefinedSurfacePointSamplingStrategyTypeChoicePairVal;
  PointDefinedSurfacePointSamplingStrategyType * PointDefinedSurfacePointSamplingStrategyTypeVal;
  PointDefinedSurfaceRecompType *     PointDefinedSurfaceRecompTypeVal;
  PointDefinedSurfaceTransformType *  PointDefinedSurfaceTransformTypeVal;
  PointDeviationStatsEvalType *       PointDeviationStatsEvalTypeVal;
  PointDeviationType *                PointDeviationTypeVal;
  PointDeviationsStatsEvalType *      PointDeviationsStatsEvalTypeVal;
  PointDeviationsType *               PointDeviationsTypeVal;
  PointEntityType *                   PointEntityTypeVal;
  PointFeatureCastType *              PointFeatureCastTypeVal;
  PointFeatureCenterOfGravityType *   PointFeatureCenterOfGravityTypeVal;
  PointFeatureCopyType *              PointFeatureCopyTypeVal;
  PointFeatureDefinitionType *        PointFeatureDefinitionTypeVal;
  PointFeatureExt_1122_TypeChoicePair * PointFeatureExt_1122_TypeChoicePairVal;
  PointFeatureExt_1122_Type *         PointFeatureExt_1122_TypeVal;
  PointFeatureExtremeType *           PointFeatureExtremeTypeVal;
  PointFeatureFromConeType *          PointFeatureFromConeTypeVal;
  PointFeatureFromScanType *          PointFeatureFromScanTypeVal;
  PointFeatureIntersectionType *      PointFeatureIntersectionTypeVal;
  PointFeatureItemType *              PointFeatureItemTypeVal;
  PointFeatureMeasurementType *       PointFeatureMeasurementTypeVal;
  PointFeatureMidPointType *          PointFeatureMidPointTypeVal;
  PointFeatureMov_1123_TypeChoicePair * PointFeatureMov_1123_TypeChoicePairVal;
  PointFeatureMov_1123_Type *         PointFeatureMov_1123_TypeVal;
  PointFeatureMovePointAxisType *     PointFeatureMovePointAxisTypeVal;
  PointFeatureMovePointType *         PointFeatureMovePointTypeVal;
  PointFeatureMovePointVectorType *   PointFeatureMovePointVectorTypeVal;
  PointFeatureNom_1124_TypeChoicePair * PointFeatureNom_1124_TypeChoicePairVal;
  PointFeatureNom_1124_Type *         PointFeatureNom_1124_TypeVal;
  PointFeatureNominalType *           PointFeatureNominalTypeVal;
  PointFeaturePierceType *            PointFeaturePierceTypeVal;
  PointFeatureProjectionType *        PointFeatureProjectionTypeVal;
  PointFeatureTransformType *         PointFeatureTransformTypeVal;
  PointIndexTypeChoicePair *          PointIndexTypeChoicePairVal;
  PointIndexType *                    PointIndexTypeVal;
  PointListType *                     PointListTypeVal;
  PointMeasurementDeterminationTypeChoicePair * PointMeasurementDeterminationTypeChoicePairVal;
  PointMeasurementDeterminationType * PointMeasurementDeterminationTypeVal;
  PointPointSamplingStrategyEnumType * PointPointSamplingStrategyEnumTypeVal;
  PointPointSamplingStrategyTypeChoicePair * PointPointSamplingStrategyTypeChoicePairVal;
  PointPointSamplingStrategyType *    PointPointSamplingStrategyTypeVal;
  PointProfileCharacteristicDefinitionType * PointProfileCharacteristicDefinitionTypeVal;
  PointProfileCharacteristicItemType * PointProfileCharacteristicItemTypeVal;
  PointProfileCharacteristicMeasurementType * PointProfileCharacteristicMeasurementTypeVal;
  PointProfileCharacteristicNominalType * PointProfileCharacteristicNominalTypeVal;
  PointProfileCharacteristicStatsEvalType * PointProfileCharacteristicStatsEvalTypeVal;
  PointRangeType *                    PointRangeTypeVal;
  PointSamplingStrategyEnumBaseType * PointSamplingStrategyEnumBaseTypeVal;
  PointSetNominalType *               PointSetNominalTypeVal;
  PointSetReferenceBaseType *         PointSetReferenceBaseTypeVal;
  PointSetReferenceRangeType *        PointSetReferenceRangeTypeVal;
  PointSetReferenceSingleType *       PointSetReferenceSingleTypeVal;
  PointSetReferenceWholeType *        PointSetReferenceWholeTypeVal;
  PointSetType *                      PointSetTypeVal;
  PointSimpleType *                   PointSimpleTypeVal;
  PointType *                         PointTypeVal;
  PolyLineType *                      PolyLineTypeVal;
  Polyline12CoreT_1221_TypeChoicePair * Polyline12CoreT_1221_TypeChoicePairVal;
  Polyline12CoreT_1221_Type *         Polyline12CoreT_1221_TypeVal;
  Polyline12CoreType *                Polyline12CoreTypeVal;
  Polyline12Type *                    Polyline12TypeVal;
  Polyline13CoreT_1222_TypeChoicePair * Polyline13CoreT_1222_TypeChoicePairVal;
  Polyline13CoreT_1222_Type *         Polyline13CoreT_1222_TypeVal;
  Polyline13CoreType *                Polyline13CoreTypeVal;
  Polyline13Type *                    Polyline13TypeVal;
  Polyline2dType *                    Polyline2dTypeVal;
  Polyline2dType_1232_TypeChoicePair * Polyline2dType_1232_TypeChoicePairVal;
  Polyline2dType_1232_Type *          Polyline2dType_1232_TypeVal;
  Polylines2dType *                   Polylines2dTypeVal;
  PositionCapabilityCalculationEnumType * PositionCapabilityCalculationEnumTypeVal;
  PositionCharacteristicDefinitionType * PositionCharacteristicDefinitionTypeVal;
  PositionCharacteristicItemType *    PositionCharacteristicItemTypeVal;
  PositionCharacteristicMeasurementType * PositionCharacteristicMeasurementTypeVal;
  PositionCharacteristicNominalType * PositionCharacteristicNominalTypeVal;
  PositionCharacteristicStatsEvalType * PositionCharacteristicStatsEvalTypeVal;
  PositionCoordinateMethodEnumType *  PositionCoordinateMethodEnumTypeVal;
  PositionCoordinateMethodType *      PositionCoordinateMethodTypeVal;
  PositionDiametricalZoneType *       PositionDiametricalZoneTypeVal;
  PositionNonDiametricalZoneType *    PositionNonDiametricalZoneTypeVal;
  PositionSphericalZoneType *         PositionSphericalZoneTypeVal;
  PositionZoneShapeTypeChoicePair *   PositionZoneShapeTypeChoicePairVal;
  PositionZoneShapeType *             PositionZoneShapeTypeVal;
  PositiveDecimalType *               PositiveDecimalTypeVal;
  PreInspectionTr_1043_TypeChoicePair * PreInspectionTr_1043_TypeChoicePairVal;
  PreInspectionTr_1043_Type *         PreInspectionTr_1043_TypeVal;
  PreInspectionTraceabilityType *     PreInspectionTraceabilityTypeVal;
  PrecedenceEnumType *                PrecedenceEnumTypeVal;
  PrecedenceTypeChoicePair *          PrecedenceTypeChoicePairVal;
  PrecedenceType *                    PrecedenceTypeVal;
  PredecessorsType *                  PredecessorsTypeVal;
  PressureCharact_1066_TypeChoicePair * PressureCharact_1066_TypeChoicePairVal;
  PressureCharact_1066_Type *         PressureCharact_1066_TypeVal;
  PressureToleran_1020_TypeChoicePair * PressureToleran_1020_TypeChoicePairVal;
  PressureToleran_1020_Type *         PressureToleran_1020_TypeVal;
  PressureToleran_1037_Type *         PressureToleran_1037_TypeVal;
  PressureToleranceType *             PressureToleranceTypeVal;
  PressureUnitType *                  PressureUnitTypeVal;
  PressureValueType *                 PressureValueTypeVal;
  PrimaryAlignmentOperationType *     PrimaryAlignmentOperationTypeVal;
  PrimaryUnitsType *                  PrimaryUnitsTypeVal;
  PrintedDrawingType *                PrintedDrawingTypeVal;
  ProbeTipType *                      ProbeTipTypeVal;
  ProcessDifferen_1206_TypeChoicePair * ProcessDifferen_1206_TypeChoicePairVal;
  ProcessDifferen_1206_Type *         ProcessDifferen_1206_TypeVal;
  ProcessDifferenceStudyPlanType *    ProcessDifferenceStudyPlanTypeVal;
  ProcessDifferenceStudyResultsType * ProcessDifferenceStudyResultsTypeVal;
  ProcessParameterType *              ProcessParameterTypeVal;
  ProcessParametersType *             ProcessParametersTypeVal;
  ProductDataQual_1044_TypeChoicePair * ProductDataQual_1044_TypeChoicePairVal;
  ProductDataQual_1044_Type *         ProductDataQual_1044_TypeVal;
  ProductDataQualityAreaEnumType *    ProductDataQualityAreaEnumTypeVal;
  ProductDataQualityAreaType *        ProductDataQualityAreaTypeVal;
  ProductDataQualityCheckType *       ProductDataQualityCheckTypeVal;
  ProductDataQualityChecksType *      ProductDataQualityChecksTypeVal;
  ProductDataQualityType *            ProductDataQualityTypeVal;
  ProductHeaderType *                 ProductHeaderTypeVal;
  ProductTraceabilityType *           ProductTraceabilityTypeVal;
  ProductType *                       ProductTypeVal;
  ProductType_1238_TypeChoicePair *   ProductType_1238_TypeChoicePairVal;
  ProductType_1238_Type *             ProductType_1238_TypeVal;
  ProductionStudyPlanType *           ProductionStudyPlanTypeVal;
  ProductionStudyResultsType *        ProductionStudyResultsTypeVal;
  ProfileCharacte_1067_TypeChoicePair * ProfileCharacte_1067_TypeChoicePairVal;
  ProfileCharacte_1067_Type *         ProfileCharacte_1067_TypeVal;
  ProfileProjectorMeasureFeatureMethodType * ProfileProjectorMeasureFeatureMethodTypeVal;
  QIFDocumentHeaderType *             QIFDocumentHeaderTypeVal;
  QIFDocumentType *                   QIFDocumentTypeVal;
  QIFFeaturePairType *                QIFFeaturePairTypeVal;
  QIFIdAndReferenceBaseType *         QIFIdAndReferenceBaseTypeVal;
  QIFIdType *                         QIFIdTypeVal;
  QIFMayType *                        QIFMayTypeVal;
  QIFMustNotType *                    QIFMustNotTypeVal;
  QIFMustType *                       QIFMustTypeVal;
  QIFReferenceActiveType *            QIFReferenceActiveTypeVal;
  QIFReferenceBaseType *              QIFReferenceBaseTypeVal;
  QIFReferenceFullType *              QIFReferenceFullTypeVal;
  QIFReferenceSimpleType *            QIFReferenceSimpleTypeVal;
  QIFReferenceType *                  QIFReferenceTypeVal;
  QIFRulesType *                      QIFRulesTypeVal;
  QPIdFullReferenceType *             QPIdFullReferenceTypeVal;
  QPIdReferenceType *                 QPIdReferenceTypeVal;
  QPIdType *                          QPIdTypeVal;
  QualificationType *                 QualificationTypeVal;
  QualificationsType *                QualificationsTypeVal;
  QuaternionType *                    QuaternionTypeVal;
  RAPZResolutionType *                RAPZResolutionTypeVal;
  RadialDifferentialScaleType *       RadialDifferentialScaleTypeVal;
  RadiusCharacteristicDefinitionType * RadiusCharacteristicDefinitionTypeVal;
  RadiusCharacteristicItemType *      RadiusCharacteristicItemTypeVal;
  RadiusCharacteristicMeasurementType * RadiusCharacteristicMeasurementTypeVal;
  RadiusCharacteristicNominalType *   RadiusCharacteristicNominalTypeVal;
  RadiusCharacteristicStatsEvalType * RadiusCharacteristicStatsEvalTypeVal;
  RectangleType *                     RectangleTypeVal;
  RectangularUnitAreaType *           RectangularUnitAreaTypeVal;
  ReducedDatumEnumType *              ReducedDatumEnumTypeVal;
  ReferenceFeatureAssociationSpecificationElementEnumType * ReferenceFeatureAssociationSpecificationElementEnumTypeVal;
  ReferenceFeatureAssociationSpecificationElementType * ReferenceFeatureAssociationSpecificationElementTypeVal;
  ReferenceFeatureAssociationSpecificationParameterEnumType * ReferenceFeatureAssociationSpecificationParameterEnumTypeVal;
  ReferencedComponentEnumType *       ReferencedComponentEnumTypeVal;
  ResolutionBaseType *                ResolutionBaseTypeVal;
  ResultsType *                       ResultsTypeVal;
  RetrievalMethodEnumType *           RetrievalMethodEnumTypeVal;
  Revolution23CoreType *              Revolution23CoreTypeVal;
  Revolution23Type *                  Revolution23TypeVal;
  RotaryAxisType *                    RotaryAxisTypeVal;
  RotaryTableType *                   RotaryTableTypeVal;
  RoughnessApplicabilityEnumType *    RoughnessApplicabilityEnumTypeVal;
  RoughnessLayEnumType *              RoughnessLayEnumTypeVal;
  RoughnessObtentionEnumType *        RoughnessObtentionEnumTypeVal;
  Ruled23CoreType *                   Ruled23CoreTypeVal;
  Ruled23Type *                       Ruled23TypeVal;
  RulesUnitsType *                    RulesUnitsTypeVal;
  SamplingCategoryIsType *            SamplingCategoryIsTypeVal;
  SamplingIntervalEnumType *          SamplingIntervalEnumTypeVal;
  SamplingIntervalTypeChoicePair *    SamplingIntervalTypeChoicePairVal;
  SamplingIntervalType *              SamplingIntervalTypeVal;
  SamplingMethodT_1135_TypeChoicePair * SamplingMethodT_1135_TypeChoicePairVal;
  SamplingMethodT_1135_Type *         SamplingMethodT_1135_TypeVal;
  SamplingMethodT_1157_Type *         SamplingMethodT_1157_TypeVal;
  SamplingMethodType *                SamplingMethodTypeVal;
  SavedViewSetType *                  SavedViewSetTypeVal;
  SavedViewType *                     SavedViewTypeVal;
  ScaleReferenceEnumType *            ScaleReferenceEnumTypeVal;
  ScaleType *                         ScaleTypeVal;
  ScaleType_1005_TypeChoicePair *     ScaleType_1005_TypeChoicePairVal;
  ScaleType_1005_Type *               ScaleType_1005_TypeVal;
  SecondaryAlignmentOperationType *   SecondaryAlignmentOperationTypeVal;
  SectionAreaType *                   SectionAreaTypeVal;
  SectionAreasType *                  SectionAreasTypeVal;
  SectionEdgesType *                  SectionEdgesTypeVal;
  SectionGroupType *                  SectionGroupTypeVal;
  SectionGroupsType *                 SectionGroupsTypeVal;
  SectionLoopsType *                  SectionLoopsTypeVal;
  SectionModifierEnumType *           SectionModifierEnumTypeVal;
  SectionPathType *                   SectionPathTypeVal;
  SectionPathsType *                  SectionPathsTypeVal;
  SecurityClassificationEnumType *    SecurityClassificationEnumTypeVal;
  SecurityClassificationTypeChoicePair * SecurityClassificationTypeChoicePairVal;
  SecurityClassificationType *        SecurityClassificationTypeVal;
  Segment12CoreType *                 Segment12CoreTypeVal;
  Segment12Type *                     Segment12TypeVal;
  Segment13CoreType *                 Segment13CoreTypeVal;
  Segment13Type *                     Segment13TypeVal;
  SequencedBaseFeatureType *          SequencedBaseFeatureTypeVal;
  SequencedDatumT_1021_TypeChoicePair * SequencedDatumT_1021_TypeChoicePairVal;
  SequencedDatumT_1021_Type *         SequencedDatumT_1021_TypeVal;
  SequencedDatumType *                SequencedDatumTypeVal;
  SetFeatureType *                    SetFeatureTypeVal;
  ShapeClassEnumType *                ShapeClassEnumTypeVal;
  ShapeClassIsType *                  ShapeClassIsTypeVal;
  ShapeClassTypeChoicePair *          ShapeClassTypeChoicePairVal;
  ShapeClassType *                    ShapeClassTypeVal;
  ShellFormEnumType *                 ShellFormEnumTypeVal;
  ShellSetType *                      ShellSetTypeVal;
  ShellType *                         ShellTypeVal;
  SignOffsType *                      SignOffsTypeVal;
  SignificantDimensionEnumType *      SignificantDimensionEnumTypeVal;
  SimpleStudyPlanType *               SimpleStudyPlanTypeVal;
  SimpleStudyResultsType *            SimpleStudyResultsTypeVal;
  SimpleTactileProbeSensorType *      SimpleTactileProbeSensorTypeVal;
  SimplifiedRepresentationFormEnumType * SimplifiedRepresentationFormEnumTypeVal;
  SimplifiedRepresentationGroupType * SimplifiedRepresentationGroupTypeVal;
  SimplifiedRepresentationGroupsType * SimplifiedRepresentationGroupsTypeVal;
  SimplifiedRepresentationSetType *   SimplifiedRepresentationSetTypeVal;
  SimplifiedRepresentationType *      SimplifiedRepresentationTypeVal;
  SimultaneousRequirementEnumType *   SimultaneousRequirementEnumTypeVal;
  SimultaneousRequirementGroupType *  SimultaneousRequirementGroupTypeVal;
  SimultaneousRequirementGroupsType * SimultaneousRequirementGroupsTypeVal;
  SineBarType *                       SineBarTypeVal;
  SingleLeadThreadSpecificationType * SingleLeadThreadSpecificationTypeVal;
  SingleNestingIndexFilterSymbolEnumType * SingleNestingIndexFilterSymbolEnumTypeVal;
  SingleNestingIndexFilterType *      SingleNestingIndexFilterTypeVal;
  SinglePointArticulationPerformanceTestType * SinglePointArticulationPerformanceTestTypeVal;
  SlotEndEnumType *                   SlotEndEnumTypeVal;
  SlotEndTypeChoicePair *             SlotEndTypeChoicePairVal;
  SlotEndType *                       SlotEndTypeVal;
  SoftwareType *                      SoftwareTypeVal;
  SoftwaresType *                     SoftwaresTypeVal;
  SpecifiedDecimalType *              SpecifiedDecimalTypeVal;
  SpeedCharacteri_1068_TypeChoicePair * SpeedCharacteri_1068_TypeChoicePairVal;
  SpeedCharacteri_1068_Type *         SpeedCharacteri_1068_TypeVal;
  SpeedToleranceT_1022_TypeChoicePair * SpeedToleranceT_1022_TypeChoicePairVal;
  SpeedToleranceT_1022_Type *         SpeedToleranceT_1022_TypeVal;
  SpeedToleranceT_1038_Type *         SpeedToleranceT_1038_TypeVal;
  SpeedToleranceType *                SpeedToleranceTypeVal;
  SpeedUnitType *                     SpeedUnitTypeVal;
  SpeedValueType *                    SpeedValueTypeVal;
  Sphere23CoreType *                  Sphere23CoreTypeVal;
  Sphere23Type *                      Sphere23TypeVal;
  SphereBestFitType *                 SphereBestFitTypeVal;
  SphereCastType *                    SphereCastTypeVal;
  SphereCheckedFeatureType *          SphereCheckedFeatureTypeVal;
  SphereCheckedTypeChoicePair *       SphereCheckedTypeChoicePairVal;
  SphereCheckedType *                 SphereCheckedTypeVal;
  SphereConstructionMethodTypeChoicePair * SphereConstructionMethodTypeChoicePairVal;
  SphereConstructionMethodType *      SphereConstructionMethodTypeVal;
  SphereCopyType *                    SphereCopyTypeVal;
  SphereFeatureDefinitionType *       SphereFeatureDefinitionTypeVal;
  SphereFeatureItemType *             SphereFeatureItemTypeVal;
  SphereFeatureMeasurementType *      SphereFeatureMeasurementTypeVal;
  SphereFeatureNominalType *          SphereFeatureNominalTypeVal;
  SphereFromScanType *                SphereFromScanTypeVal;
  SphereMeasurementDeterminationTypeChoicePair * SphereMeasurementDeterminationTypeChoicePairVal;
  SphereMeasurementDeterminationType * SphereMeasurementDeterminationTypeVal;
  SpherePointSamplingStrategyEnumType * SpherePointSamplingStrategyEnumTypeVal;
  SpherePointSamplingStrategyTypeChoicePair * SpherePointSamplingStrategyTypeChoicePairVal;
  SpherePointSamplingStrategyType *   SpherePointSamplingStrategyTypeVal;
  SphereRecompType *                  SphereRecompTypeVal;
  SphereTransformType *               SphereTransformTypeVal;
  SphereType *                        SphereTypeVal;
  SphericalDiameterCharacteristicDefinitionType * SphericalDiameterCharacteristicDefinitionTypeVal;
  SphericalDiameterCharacteristicItemType * SphericalDiameterCharacteristicItemTypeVal;
  SphericalDiameterCharacteristicMeasurementType * SphericalDiameterCharacteristicMeasurementTypeVal;
  SphericalDiameterCharacteristicNominalType * SphericalDiameterCharacteristicNominalTypeVal;
  SphericalDiameterCharacteristicStatsEvalType * SphericalDiameterCharacteristicStatsEvalTypeVal;
  SphericalRadiusCharacteristicDefinitionType * SphericalRadiusCharacteristicDefinitionTypeVal;
  SphericalRadiusCharacteristicItemType * SphericalRadiusCharacteristicItemTypeVal;
  SphericalRadiusCharacteristicMeasurementType * SphericalRadiusCharacteristicMeasurementTypeVal;
  SphericalRadiusCharacteristicNominalType * SphericalRadiusCharacteristicNominalTypeVal;
  SphericalRadiusCharacteristicStatsEvalType * SphericalRadiusCharacteristicStatsEvalTypeVal;
  SphericalResolu_1242_TypeChoicePair * SphericalResolu_1242_TypeChoicePairVal;
  SphericalResolu_1242_Type *         SphericalResolu_1242_TypeVal;
  SphericalResolu_1245_Type *         SphericalResolu_1245_TypeVal;
  SphericalResolutionType *           SphericalResolutionTypeVal;
  SphericalSegmentBestFitType *       SphericalSegmentBestFitTypeVal;
  SphericalSegmentCastType *          SphericalSegmentCastTypeVal;
  SphericalSegmentCheckedFeatureType * SphericalSegmentCheckedFeatureTypeVal;
  SphericalSegmentCheckedTypeChoicePair * SphericalSegmentCheckedTypeChoicePairVal;
  SphericalSegmentCheckedType *       SphericalSegmentCheckedTypeVal;
  SphericalSegmentConstructionMethodTypeChoicePair * SphericalSegmentConstructionMethodTypeChoicePairVal;
  SphericalSegmentConstructionMethodType * SphericalSegmentConstructionMethodTypeVal;
  SphericalSegmentCopyType *          SphericalSegmentCopyTypeVal;
  SphericalSegmentFeatureDefinitionType * SphericalSegmentFeatureDefinitionTypeVal;
  SphericalSegmentFeatureItemType *   SphericalSegmentFeatureItemTypeVal;
  SphericalSegmentFeatureMeasurementType * SphericalSegmentFeatureMeasurementTypeVal;
  SphericalSegmentFeatureNominalType * SphericalSegmentFeatureNominalTypeVal;
  SphericalSegmentMeasurementDeterminationTypeChoicePair * SphericalSegmentMeasurementDeterminationTypeChoicePairVal;
  SphericalSegmentMeasurementDeterminationType * SphericalSegmentMeasurementDeterminationTypeVal;
  SphericalSegmentPointSamplingStrategyTypeChoicePair * SphericalSegmentPointSamplingStrategyTypeChoicePairVal;
  SphericalSegmentPointSamplingStrategyType * SphericalSegmentPointSamplingStrategyTypeVal;
  SphericalSegmentRecompType *        SphericalSegmentRecompTypeVal;
  SphericalSegmentTransformType *     SphericalSegmentTransformTypeVal;
  SphericalWorkingVolumeType *        SphericalWorkingVolumeTypeVal;
  SphericityChara_1069_Type *         SphericityChara_1069_TypeVal;
  SphericityCharacteristicDefinitionType * SphericityCharacteristicDefinitionTypeVal;
  SphericityCharacteristicItemType *  SphericityCharacteristicItemTypeVal;
  SphericityCharacteristicMeasurementType * SphericityCharacteristicMeasurementTypeVal;
  SphericityCharacteristicNominalType * SphericityCharacteristicNominalTypeVal;
  SphericityCharacteristicStatsEvalType * SphericityCharacteristicStatsEvalTypeVal;
  Spline12CoreType *                  Spline12CoreTypeVal;
  Spline12Type *                      Spline12TypeVal;
  Spline13CoreType *                  Spline13CoreTypeVal;
  Spline13Type *                      Spline13TypeVal;
  Spline23CoreType *                  Spline23CoreTypeVal;
  Spline23Type *                      Spline23TypeVal;
  SquareCharacteristicDefinitionType * SquareCharacteristicDefinitionTypeVal;
  SquareCharacteristicItemType *      SquareCharacteristicItemTypeVal;
  SquareCharacteristicMeasurementType * SquareCharacteristicMeasurementTypeVal;
  SquareCharacteristicNominalType *   SquareCharacteristicNominalTypeVal;
  SquareCharacteristicStatsEvalType * SquareCharacteristicStatsEvalTypeVal;
  StabilityStudyPlanType *            StabilityStudyPlanTypeVal;
  StabilityStudyResultsType *         StabilityStudyResultsTypeVal;
  StandardType *                      StandardTypeVal;
  StandardsOrganizationEnumType *     StandardsOrganizationEnumTypeVal;
  StandardsOrganizationTypeChoicePair * StandardsOrganizationTypeChoicePairVal;
  StandardsOrganizationType *         StandardsOrganizationTypeVal;
  StandardsType *                     StandardsTypeVal;
  StatisticalStud_1207_Type *         StatisticalStud_1207_TypeVal;
  StatisticalStud_1208_Type *         StatisticalStud_1208_TypeVal;
  StatisticalStud_1209_TypeChoicePair * StatisticalStud_1209_TypeChoicePairVal;
  StatisticalStud_1209_Type *         StatisticalStud_1209_TypeVal;
  StatisticalStud_1210_TypeChoicePair * StatisticalStud_1210_TypeChoicePairVal;
  StatisticalStud_1210_Type *         StatisticalStud_1210_TypeVal;
  StatisticalStud_1211_TypeChoicePair * StatisticalStud_1211_TypeChoicePairVal;
  StatisticalStud_1211_Type *         StatisticalStud_1211_TypeVal;
  StatisticalStudiesResultsType *     StatisticalStudiesResultsTypeVal;
  StatisticalStudyPlanBaseType *      StatisticalStudyPlanBaseTypeVal;
  StatisticalStudyPlansType *         StatisticalStudyPlansTypeVal;
  StatisticalStudyResultsBaseType *   StatisticalStudyResultsBaseTypeVal;
  StatisticsType *                    StatisticsTypeVal;
  StatsAngularType *                  StatsAngularTypeVal;
  StatsAreaType *                     StatsAreaTypeVal;
  StatsArrayIdType *                  StatsArrayIdTypeVal;
  StatsEvalStatusEnumType *           StatsEvalStatusEnumTypeVal;
  StatsEvalStatusTypeChoicePair *     StatsEvalStatusTypeChoicePairVal;
  StatsEvalStatusType *               StatsEvalStatusTypeVal;
  StatsForceType *                    StatsForceTypeVal;
  StatsLinearType *                   StatsLinearTypeVal;
  StatsMassType *                     StatsMassTypeVal;
  StatsMeasuredDecimalType *          StatsMeasuredDecimalTypeVal;
  StatsMeasuredDecimalWithReferenceType * StatsMeasuredDecimalWithReferenceTypeVal;
  StatsNonNegativeIntegerType *       StatsNonNegativeIntegerTypeVal;
  StatsNonNegativeIntegerWithReferencesType * StatsNonNegativeIntegerWithReferencesTypeVal;
  StatsPassFailType *                 StatsPassFailTypeVal;
  StatsPressureType *                 StatsPressureTypeVal;
  StatsSpeedType *                    StatsSpeedTypeVal;
  StatsTemperatureType *              StatsTemperatureTypeVal;
  StatsTimeType *                     StatsTimeTypeVal;
  StatsUserDefinedUnitType *          StatsUserDefinedUnitTypeVal;
  StatsValuesEnumType *               StatsValuesEnumTypeVal;
  StatsValuesType *                   StatsValuesTypeVal;
  StatsWithRefere_1006_TypeChoicePair * StatsWithRefere_1006_TypeChoicePairVal;
  StatsWithRefere_1006_Type *         StatsWithRefere_1006_TypeVal;
  StatsWithReferenceBaseType *        StatsWithReferenceBaseTypeVal;
  StatsWithTolAngularType *           StatsWithTolAngularTypeVal;
  StatsWithTolAreaType *              StatsWithTolAreaTypeVal;
  StatsWithTolForceType *             StatsWithTolForceTypeVal;
  StatsWithTolLinearType *            StatsWithTolLinearTypeVal;
  StatsWithTolMassType *              StatsWithTolMassTypeVal;
  StatsWithTolPressureType *          StatsWithTolPressureTypeVal;
  StatsWithTolSpeedType *             StatsWithTolSpeedTypeVal;
  StatsWithTolTemperatureType *       StatsWithTolTemperatureTypeVal;
  StatsWithTolTimeType *              StatsWithTolTimeTypeVal;
  StatsWithTolUserDefinedUnitType *   StatsWithTolUserDefinedUnitTypeVal;
  StepWithPredecessorsType *          StepWithPredecessorsTypeVal;
  StepsWithPredecessorsType *         StepsWithPredecessorsTypeVal;
  StiffnessType *                     StiffnessTypeVal;
  StraightnessCha_1070_TypeChoicePair * StraightnessCha_1070_TypeChoicePairVal;
  StraightnessCha_1070_Type *         StraightnessCha_1070_TypeVal;
  StraightnessCha_1087_Type *         StraightnessCha_1087_TypeVal;
  StraightnessCha_1088_Type *         StraightnessCha_1088_TypeVal;
  StraightnessCharacteristicDefinitionType * StraightnessCharacteristicDefinitionTypeVal;
  StraightnessCharacteristicItemType * StraightnessCharacteristicItemTypeVal;
  StraightnessCharacteristicMeasurementType * StraightnessCharacteristicMeasurementTypeVal;
  StraightnessCharacteristicNominalType * StraightnessCharacteristicNominalTypeVal;
  StraightnessCharacteristicStatsEvalType * StraightnessCharacteristicStatsEvalTypeVal;
  StraightnessDiametricalZoneType *   StraightnessDiametricalZoneTypeVal;
  StraightnessNonDiametricalZoneType * StraightnessNonDiametricalZoneTypeVal;
  StraightnessZoneShapeTypeChoicePair * StraightnessZoneShapeTypeChoicePairVal;
  StraightnessZoneShapeType *         StraightnessZoneShapeTypeVal;
  StringValuesType *                  StringValuesTypeVal;
  StructuredLightSensorType *         StructuredLightSensorTypeVal;
  StudyIssueType *                    StudyIssueTypeVal;
  StudyIssueType_1136_TypeChoicePair * StudyIssueType_1136_TypeChoicePairVal;
  StudyIssueType_1136_Type *          StudyIssueType_1136_TypeVal;
  StudyIssuesType *                   StudyIssuesTypeVal;
  SubgroupDecimalArrayType *          SubgroupDecimalArrayTypeVal;
  SubgroupDecimalType *               SubgroupDecimalTypeVal;
  SubgroupDecimalsType *              SubgroupDecimalsTypeVal;
  SubgroupIntegerArrayType *          SubgroupIntegerArrayTypeVal;
  SubgroupIntegerType *               SubgroupIntegerTypeVal;
  SubgroupIntegersType *              SubgroupIntegersTypeVal;
  SubgroupStatsValuesEnumType *       SubgroupStatsValuesEnumTypeVal;
  SubgroupType *                      SubgroupTypeVal;
  SubgroupValuesType *                SubgroupValuesTypeVal;
  SubgroupsType *                     SubgroupsTypeVal;
  SubstituteFeatu_1023_TypeChoicePair * SubstituteFeatu_1023_TypeChoicePairVal;
  SubstituteFeatu_1023_Type *         SubstituteFeatu_1023_TypeVal;
  SubstituteFeatureAlgorithmEnumType * SubstituteFeatureAlgorithmEnumTypeVal;
  SubstituteFeatureAlgorithmType *    SubstituteFeatureAlgorithmTypeVal;
  SummariesStatisticsAngularType *    SummariesStatisticsAngularTypeVal;
  SummariesStatisticsAreaType *       SummariesStatisticsAreaTypeVal;
  SummariesStatisticsForceType *      SummariesStatisticsForceTypeVal;
  SummariesStatisticsLinearType *     SummariesStatisticsLinearTypeVal;
  SummariesStatisticsMassType *       SummariesStatisticsMassTypeVal;
  SummariesStatisticsPressureType *   SummariesStatisticsPressureTypeVal;
  SummariesStatisticsSpeedType *      SummariesStatisticsSpeedTypeVal;
  SummariesStatisticsTemperatureType * SummariesStatisticsTemperatureTypeVal;
  SummariesStatisticsTimeType *       SummariesStatisticsTimeTypeVal;
  SummariesStatisticsType *           SummariesStatisticsTypeVal;
  SummariesStatisticsUserDefinedUnitType * SummariesStatisticsUserDefinedUnitTypeVal;
  SummaryStatisticsAngularType *      SummaryStatisticsAngularTypeVal;
  SummaryStatisticsAreaType *         SummaryStatisticsAreaTypeVal;
  SummaryStatisticsForceType *        SummaryStatisticsForceTypeVal;
  SummaryStatisticsLinearType *       SummaryStatisticsLinearTypeVal;
  SummaryStatisticsMassType *         SummaryStatisticsMassTypeVal;
  SummaryStatisticsPressureType *     SummaryStatisticsPressureTypeVal;
  SummaryStatisticsSpeedType *        SummaryStatisticsSpeedTypeVal;
  SummaryStatisticsTemperatureType *  SummaryStatisticsTemperatureTypeVal;
  SummaryStatisticsTimeType *         SummaryStatisticsTimeTypeVal;
  SummaryStatisticsType *             SummaryStatisticsTypeVal;
  SummaryStatisticsUserDefinedUnitType * SummaryStatisticsUserDefinedUnitTypeVal;
  SummaryStatsValuesEnumType *        SummaryStatsValuesEnumTypeVal;
  SummaryStatsValuesListType *        SummaryStatsValuesListTypeVal;
  SummaryStatsValuesType *            SummaryStatsValuesTypeVal;
  SurfaceBaseType *                   SurfaceBaseTypeVal;
  SurfaceCoreBaseType *               SurfaceCoreBaseTypeVal;
  SurfaceCoreType *                   SurfaceCoreTypeVal;
  SurfaceMeshSetType *                SurfaceMeshSetTypeVal;
  SurfaceOfRevolutionBestFitType *    SurfaceOfRevolutionBestFitTypeVal;
  SurfaceOfRevolutionCastType *       SurfaceOfRevolutionCastTypeVal;
  SurfaceOfRevolutionCheckedFeatureType * SurfaceOfRevolutionCheckedFeatureTypeVal;
  SurfaceOfRevolutionCheckedTypeChoicePair * SurfaceOfRevolutionCheckedTypeChoicePairVal;
  SurfaceOfRevolutionCheckedType *    SurfaceOfRevolutionCheckedTypeVal;
  SurfaceOfRevolutionConstructionMethodTypeChoicePair * SurfaceOfRevolutionConstructionMethodTypeChoicePairVal;
  SurfaceOfRevolutionConstructionMethodType * SurfaceOfRevolutionConstructionMethodTypeVal;
  SurfaceOfRevolutionCopyType *       SurfaceOfRevolutionCopyTypeVal;
  SurfaceOfRevolutionFeatureDefinitionType * SurfaceOfRevolutionFeatureDefinitionTypeVal;
  SurfaceOfRevolutionFeatureItemType * SurfaceOfRevolutionFeatureItemTypeVal;
  SurfaceOfRevolutionFeatureMeasurementType * SurfaceOfRevolutionFeatureMeasurementTypeVal;
  SurfaceOfRevolutionFeatureNominalType * SurfaceOfRevolutionFeatureNominalTypeVal;
  SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair * SurfaceOfRevolutionMeasurementDeterminationTypeChoicePairVal;
  SurfaceOfRevolutionMeasurementDeterminationType * SurfaceOfRevolutionMeasurementDeterminationTypeVal;
  SurfaceOfRevolutionPointSamplingStrategyEnumType * SurfaceOfRevolutionPointSamplingStrategyEnumTypeVal;
  SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair * SurfaceOfRevolutionPointSamplingStrategyTypeChoicePairVal;
  SurfaceOfRevolutionPointSamplingStrategyType * SurfaceOfRevolutionPointSamplingStrategyTypeVal;
  SurfaceOfRevolutionRecompType *     SurfaceOfRevolutionRecompTypeVal;
  SurfaceOfRevolutionTransformType *  SurfaceOfRevolutionTransformTypeVal;
  SurfaceProfileCharacteristicDefinitionType * SurfaceProfileCharacteristicDefinitionTypeVal;
  SurfaceProfileCharacteristicItemType * SurfaceProfileCharacteristicItemTypeVal;
  SurfaceProfileCharacteristicMeasurementType * SurfaceProfileCharacteristicMeasurementTypeVal;
  SurfaceProfileCharacteristicNominalType * SurfaceProfileCharacteristicNominalTypeVal;
  SurfaceProfileCharacteristicStatsEvalType * SurfaceProfileCharacteristicStatsEvalTypeVal;
  SurfaceProfileN_1071_TypeChoicePair * SurfaceProfileN_1071_TypeChoicePairVal;
  SurfaceProfileN_1071_Type *         SurfaceProfileN_1071_TypeVal;
  SurfaceProfileNonUniformCharacteristicDefinitionType * SurfaceProfileNonUniformCharacteristicDefinitionTypeVal;
  SurfaceProfileNonUniformCharacteristicItemType * SurfaceProfileNonUniformCharacteristicItemTypeVal;
  SurfaceProfileNonUniformCharacteristicMeasurementType * SurfaceProfileNonUniformCharacteristicMeasurementTypeVal;
  SurfaceProfileNonUniformCharacteristicNominalType * SurfaceProfileNonUniformCharacteristicNominalTypeVal;
  SurfaceProfileNonUniformCharacteristicStatsEvalType * SurfaceProfileNonUniformCharacteristicStatsEvalTypeVal;
  SurfaceSetType *                    SurfaceSetTypeVal;
  SurfaceTextureCharacteristicDefinitionType * SurfaceTextureCharacteristicDefinitionTypeVal;
  SurfaceTextureCharacteristicItemType * SurfaceTextureCharacteristicItemTypeVal;
  SurfaceTextureCharacteristicMeasurementType * SurfaceTextureCharacteristicMeasurementTypeVal;
  SurfaceTextureCharacteristicNominalType * SurfaceTextureCharacteristicNominalTypeVal;
  SurfaceTextureCharacteristicStatsEvalType * SurfaceTextureCharacteristicStatsEvalTypeVal;
  SweepType *                         SweepTypeVal;
  SymmetryCharacteristicDefinitionType * SymmetryCharacteristicDefinitionTypeVal;
  SymmetryCharacteristicItemType *    SymmetryCharacteristicItemTypeVal;
  SymmetryCharacteristicMeasurementType * SymmetryCharacteristicMeasurementTypeVal;
  SymmetryCharacteristicNominalType * SymmetryCharacteristicNominalTypeVal;
  SymmetryCharacteristicStatsEvalType * SymmetryCharacteristicStatsEvalTypeVal;
  TableErrorsType *                   TableErrorsTypeVal;
  TactileProbeSensorBaseType *        TactileProbeSensorBaseTypeVal;
  TargetMirrorEnumType *              TargetMirrorEnumTypeVal;
  TemperatureChar_1072_TypeChoicePair * TemperatureChar_1072_TypeChoicePairVal;
  TemperatureChar_1072_Type *         TemperatureChar_1072_TypeVal;
  TemperatureCompensationEnumType *   TemperatureCompensationEnumTypeVal;
  TemperatureCompensationTypeChoicePair * TemperatureCompensationTypeChoicePairVal;
  TemperatureCompensationType *       TemperatureCompensationTypeVal;
  TemperatureTole_1024_TypeChoicePair * TemperatureTole_1024_TypeChoicePairVal;
  TemperatureTole_1024_Type *         TemperatureTole_1024_TypeVal;
  TemperatureTole_1039_Type *         TemperatureTole_1039_TypeVal;
  TemperatureToleranceType *          TemperatureToleranceTypeVal;
  TemperatureType *                   TemperatureTypeVal;
  TemperatureUnitType *               TemperatureUnitTypeVal;
  TemperatureValueType *              TemperatureValueTypeVal;
  TemperaturesType *                  TemperaturesTypeVal;
  TestAndPlanElementType *            TestAndPlanElementTypeVal;
  TextInstructionType *               TextInstructionTypeVal;
  TextThreadSpecificationType *       TextThreadSpecificationTypeVal;
  TextType *                          TextTypeVal;
  TextsType *                         TextsTypeVal;
  ThenPointsType *                    ThenPointsTypeVal;
  ThenPointsType_1212_TypeChoicePair * ThenPointsType_1212_TypeChoicePairVal;
  ThenPointsType_1212_Type *          ThenPointsType_1212_TypeVal;
  TheodoliteMeasureFeatureMethodType * TheodoliteMeasureFeatureMethodTypeVal;
  TheodoliteType *                    TheodoliteTypeVal;
  ThicknessCharacteristicDefinitionType * ThicknessCharacteristicDefinitionTypeVal;
  ThicknessCharacteristicItemType *   ThicknessCharacteristicItemTypeVal;
  ThicknessCharacteristicMeasurementType * ThicknessCharacteristicMeasurementTypeVal;
  ThicknessCharacteristicNominalType * ThicknessCharacteristicNominalTypeVal;
  ThicknessCharacteristicStatsEvalType * ThicknessCharacteristicStatsEvalTypeVal;
  ThreadCharacteristicDefinitionType * ThreadCharacteristicDefinitionTypeVal;
  ThreadCharacteristicItemType *      ThreadCharacteristicItemTypeVal;
  ThreadCharacteristicMeasurementType * ThreadCharacteristicMeasurementTypeVal;
  ThreadCharacteristicNominalType *   ThreadCharacteristicNominalTypeVal;
  ThreadCharacteristicStatsEvalType * ThreadCharacteristicStatsEvalTypeVal;
  ThreadClassEnumType *               ThreadClassEnumTypeVal;
  ThreadClassTypeChoicePair *         ThreadClassTypeChoicePairVal;
  ThreadClassType *                   ThreadClassTypeVal;
  ThreadSeriesEnumType *              ThreadSeriesEnumTypeVal;
  ThreadSeriesTypeChoicePair *        ThreadSeriesTypeChoicePairVal;
  ThreadSeriesType *                  ThreadSeriesTypeVal;
  ThreadSpecificationTypeChoicePair * ThreadSpecificationTypeChoicePairVal;
  ThreadSpecificationType *           ThreadSpecificationTypeVal;
  ThreadSpecificationsType *          ThreadSpecificationsTypeVal;
  ThreadedFeatureBestFitType *        ThreadedFeatureBestFitTypeVal;
  ThreadedFeatureCastType *           ThreadedFeatureCastTypeVal;
  ThreadedFeatureCheckedFeatureType * ThreadedFeatureCheckedFeatureTypeVal;
  ThreadedFeatureCheckedTypeChoicePair * ThreadedFeatureCheckedTypeChoicePairVal;
  ThreadedFeatureCheckedType *        ThreadedFeatureCheckedTypeVal;
  ThreadedFeatureConstructionMethodTypeChoicePair * ThreadedFeatureConstructionMethodTypeChoicePairVal;
  ThreadedFeatureConstructionMethodType * ThreadedFeatureConstructionMethodTypeVal;
  ThreadedFeatureCopyType *           ThreadedFeatureCopyTypeVal;
  ThreadedFeatureDefinitionType *     ThreadedFeatureDefinitionTypeVal;
  ThreadedFeatureFromCylinderType *   ThreadedFeatureFromCylinderTypeVal;
  ThreadedFeatureItemType *           ThreadedFeatureItemTypeVal;
  ThreadedFeatureMeasurementDeterminationTypeChoicePair * ThreadedFeatureMeasurementDeterminationTypeChoicePairVal;
  ThreadedFeatureMeasurementDeterminationType * ThreadedFeatureMeasurementDeterminationTypeVal;
  ThreadedFeatureMeasurementType *    ThreadedFeatureMeasurementTypeVal;
  ThreadedFeatureNominalType *        ThreadedFeatureNominalTypeVal;
  ThreadedFeatureRecompType *         ThreadedFeatureRecompTypeVal;
  ThreadedFeatureTransformType *      ThreadedFeatureTransformTypeVal;
  TimeCharacteris_1073_TypeChoicePair * TimeCharacteris_1073_TypeChoicePairVal;
  TimeCharacteris_1073_Type *         TimeCharacteris_1073_TypeVal;
  TimeDescriptionEnumType *           TimeDescriptionEnumTypeVal;
  TimeDescriptionTypeChoicePair *     TimeDescriptionTypeChoicePairVal;
  TimeDescriptionType *               TimeDescriptionTypeVal;
  TimeToleranceTy_1025_TypeChoicePair * TimeToleranceTy_1025_TypeChoicePairVal;
  TimeToleranceTy_1025_Type *         TimeToleranceTy_1025_TypeVal;
  TimeToleranceTy_1040_Type *         TimeToleranceTy_1040_TypeVal;
  TimeToleranceType *                 TimeToleranceTypeVal;
  TimeUnitType *                      TimeUnitTypeVal;
  TimeValueType *                     TimeValueTypeVal;
  TimesType *                         TimesTypeVal;
  TipEndGeometryEnumType *            TipEndGeometryEnumTypeVal;
  TipEndGeometryTypeChoicePair *      TipEndGeometryTypeChoicePairVal;
  TipEndGeometryType *                TipEndGeometryTypeVal;
  TokenConstantType *                 TokenConstantTypeVal;
  TokenEqualType *                    TokenEqualTypeVal;
  TokenExpressionBaseType *           TokenExpressionBaseTypeVal;
  TokenParameterValueType *           TokenParameterValueTypeVal;
  ToleranceDefinitionsTypeChoicePair * ToleranceDefinitionsTypeChoicePairVal;
  ToleranceDefinitionsType *          ToleranceDefinitionsTypeVal;
  ToleranceZonePe_1026_TypeChoicePair * ToleranceZonePe_1026_TypeChoicePairVal;
  ToleranceZonePe_1026_Type *         ToleranceZonePe_1026_TypeVal;
  ToleranceZonePerUnitAngleType *     ToleranceZonePerUnitAngleTypeVal;
  ToleranceZonePerUnitAreaType *      ToleranceZonePerUnitAreaTypeVal;
  ToleranceZonePerUnitLengthType *    ToleranceZonePerUnitLengthTypeVal;
  ToleranceZonePerUnitPolarAreaType * ToleranceZonePerUnitPolarAreaTypeVal;
  ToolBaseType *                      ToolBaseTypeVal;
  ToolWithCCDCameraSensorType *       ToolWithCCDCameraSensorTypeVal;
  ToolWithCapacitiveSensorType *      ToolWithCapacitiveSensorTypeVal;
  ToolWithComplexTactileProbeSensorType * ToolWithComplexTactileProbeSensorTypeVal;
  ToolWithConfocalChromaticSensorType * ToolWithConfocalChromaticSensorTypeVal;
  ToolWithDVRTSensorType *            ToolWithDVRTSensorTypeVal;
  ToolWithDetachableSensorsType *     ToolWithDetachableSensorsTypeVal;
  ToolWithDrawWireSensorType *        ToolWithDrawWireSensorTypeVal;
  ToolWithEddyCurrentSensorType *     ToolWithEddyCurrentSensorTypeVal;
  ToolWithIntegratedSensorBaseType *  ToolWithIntegratedSensorBaseTypeVal;
  ToolWithLVDTSensorType *            ToolWithLVDTSensorTypeVal;
  ToolWithLaserTriangulationSensorType * ToolWithLaserTriangulationSensorTypeVal;
  ToolWithMagnetoInductiveSensorType * ToolWithMagnetoInductiveSensorTypeVal;
  ToolWithSimpleTactileProbeSensorType * ToolWithSimpleTactileProbeSensorTypeVal;
  ToolWithStructuredLightSensorType * ToolWithStructuredLightSensorTypeVal;
  ToolWithUltrasonicSensorType *      ToolWithUltrasonicSensorTypeVal;
  ToolsType *                         ToolsTypeVal;
  TopologyEnumType *                  TopologyEnumTypeVal;
  TopologySetType *                   TopologySetTypeVal;
  ToroidalSegmentBestFitType *        ToroidalSegmentBestFitTypeVal;
  ToroidalSegmentCastType *           ToroidalSegmentCastTypeVal;
  ToroidalSegmentCheckedFeatureType * ToroidalSegmentCheckedFeatureTypeVal;
  ToroidalSegmentCheckedTypeChoicePair * ToroidalSegmentCheckedTypeChoicePairVal;
  ToroidalSegmentCheckedType *        ToroidalSegmentCheckedTypeVal;
  ToroidalSegmentConstructionMethodTypeChoicePair * ToroidalSegmentConstructionMethodTypeChoicePairVal;
  ToroidalSegmentConstructionMethodType * ToroidalSegmentConstructionMethodTypeVal;
  ToroidalSegmentCopyType *           ToroidalSegmentCopyTypeVal;
  ToroidalSegmentFeatureDefinitionType * ToroidalSegmentFeatureDefinitionTypeVal;
  ToroidalSegmentFeatureItemType *    ToroidalSegmentFeatureItemTypeVal;
  ToroidalSegmentFeatureMeasurementType * ToroidalSegmentFeatureMeasurementTypeVal;
  ToroidalSegmentFeatureNominalType * ToroidalSegmentFeatureNominalTypeVal;
  ToroidalSegmentMeasurementDeterminationTypeChoicePair * ToroidalSegmentMeasurementDeterminationTypeChoicePairVal;
  ToroidalSegmentMeasurementDeterminationType * ToroidalSegmentMeasurementDeterminationTypeVal;
  ToroidalSegmentPointSamplingStrategyTypeChoicePair * ToroidalSegmentPointSamplingStrategyTypeChoicePairVal;
  ToroidalSegmentPointSamplingStrategyType * ToroidalSegmentPointSamplingStrategyTypeVal;
  ToroidalSegmentRecompType *         ToroidalSegmentRecompTypeVal;
  ToroidalSegmentTransformType *      ToroidalSegmentTransformTypeVal;
  ToroidicityCharacteristicDefinitionType * ToroidicityCharacteristicDefinitionTypeVal;
  ToroidicityCharacteristicItemType * ToroidicityCharacteristicItemTypeVal;
  ToroidicityCharacteristicMeasurementType * ToroidicityCharacteristicMeasurementTypeVal;
  ToroidicityCharacteristicNominalType * ToroidicityCharacteristicNominalTypeVal;
  ToroidicityCharacteristicStatsEvalType * ToroidicityCharacteristicStatsEvalTypeVal;
  Torus23CoreType *                   Torus23CoreTypeVal;
  Torus23Type *                       Torus23TypeVal;
  TorusBestFitType *                  TorusBestFitTypeVal;
  TorusCastType *                     TorusCastTypeVal;
  TorusCheckedFeatureType *           TorusCheckedFeatureTypeVal;
  TorusCheckedTypeChoicePair *        TorusCheckedTypeChoicePairVal;
  TorusCheckedType *                  TorusCheckedTypeVal;
  TorusConstructionMethodTypeChoicePair * TorusConstructionMethodTypeChoicePairVal;
  TorusConstructionMethodType *       TorusConstructionMethodTypeVal;
  TorusCopyType *                     TorusCopyTypeVal;
  TorusFeatureDefinitionType *        TorusFeatureDefinitionTypeVal;
  TorusFeatureItemType *              TorusFeatureItemTypeVal;
  TorusFeatureMeasurementType *       TorusFeatureMeasurementTypeVal;
  TorusFeatureNominalType *           TorusFeatureNominalTypeVal;
  TorusFromScanType *                 TorusFromScanTypeVal;
  TorusMeasurementDeterminationTypeChoicePair * TorusMeasurementDeterminationTypeChoicePairVal;
  TorusMeasurementDeterminationType * TorusMeasurementDeterminationTypeVal;
  TorusPointSamplingStrategyTypeChoicePair * TorusPointSamplingStrategyTypeChoicePairVal;
  TorusPointSamplingStrategyType *    TorusPointSamplingStrategyTypeVal;
  TorusRecompType *                   TorusRecompTypeVal;
  TorusTransformType *                TorusTransformTypeVal;
  TotalRunoutCharacteristicDefinitionType * TotalRunoutCharacteristicDefinitionTypeVal;
  TotalRunoutCharacteristicItemType * TotalRunoutCharacteristicItemTypeVal;
  TotalRunoutCharacteristicMeasurementType * TotalRunoutCharacteristicMeasurementTypeVal;
  TotalRunoutCharacteristicNominalType * TotalRunoutCharacteristicNominalTypeVal;
  TotalRunoutCharacteristicStatsEvalType * TotalRunoutCharacteristicStatsEvalTypeVal;
  TrailingZeroDimensionalCharacteristicDisplayGroupType * TrailingZeroDimensionalCharacteristicDisplayGroupTypeVal;
  TrailingZeroDimensionalCharacteristicDisplayGroupsType * TrailingZeroDimensionalCharacteristicDisplayGroupsTypeVal;
  TrailingZeroDisplayType *           TrailingZeroDisplayTypeVal;
  TrailingZeroGeometricCharacteristicDisplayGroupType * TrailingZeroGeometricCharacteristicDisplayGroupTypeVal;
  TrailingZeroGeometricCharacteristicDisplayGroupsType * TrailingZeroGeometricCharacteristicDisplayGroupsTypeVal;
  TransformInstanceType *             TransformInstanceTypeVal;
  TransformListType *                 TransformListTypeVal;
  TransformMatrixType *               TransformMatrixTypeVal;
  TransformRotationType *             TransformRotationTypeVal;
  TransformationReferenceType *       TransformationReferenceTypeVal;
  TransparencyType *                  TransparencyTypeVal;
  TriangleVertexNormalType *          TriangleVertexNormalTypeVal;
  Triangulation2dType *               Triangulation2dTypeVal;
  Triangulation2d_1233_TypeChoicePair * Triangulation2d_1233_TypeChoicePairVal;
  Triangulation2d_1233_Type *         Triangulation2d_1233_TypeVal;
  Triangulation2d_1234_TypeChoicePair * Triangulation2d_1234_TypeChoicePairVal;
  Triangulation2d_1234_Type *         Triangulation2d_1234_TypeVal;
  TwentyLinearValuesType *            TwentyLinearValuesTypeVal;
  TypeOfCoordinatesTypeChoicePair *   TypeOfCoordinatesTypeChoicePairVal;
  TypeOfCoordinatesType *             TypeOfCoordinatesTypeVal;
  TypeOfScaleEnumType *               TypeOfScaleEnumTypeVal;
  TypeOfScaleTypeChoicePair *         TypeOfScaleTypeChoicePairVal;
  TypeOfScaleType *                   TypeOfScaleTypeVal;
  UltrasonicSensorType *              UltrasonicSensorTypeVal;
  UniformScaleType *                  UniformScaleTypeVal;
  UnitConversionType *                UnitConversionTypeVal;
  UnitVector2dSimpleType *            UnitVector2dSimpleTypeVal;
  UnitVectorSimpleType *              UnitVectorSimpleTypeVal;
  UnitVectorType *                    UnitVectorTypeVal;
  UniversalDeviceType *               UniversalDeviceTypeVal;
  UniversalLengthMeasureFeatureMethodType * UniversalLengthMeasureFeatureMethodTypeVal;
  UniversalLengthMeasuringType *      UniversalLengthMeasuringTypeVal;
  UnnumberedPlanElementsType *        UnnumberedPlanElementsTypeVal;
  UnorderedActionGroupType *          UnorderedActionGroupTypeVal;
  UserAxisBaseType *                  UserAxisBaseTypeVal;
  UserDefinedAngu_1137_TypeChoicePair * UserDefinedAngu_1137_TypeChoicePairVal;
  UserDefinedAngu_1137_Type *         UserDefinedAngu_1137_TypeVal;
  UserDefinedAngu_1158_Type *         UserDefinedAngu_1158_TypeVal;
  UserDefinedAngu_1159_Type *         UserDefinedAngu_1159_TypeVal;
  UserDefinedAngu_1160_Type *         UserDefinedAngu_1160_TypeVal;
  UserDefinedAngu_1161_Type *         UserDefinedAngu_1161_TypeVal;
  UserDefinedAngularCharacteristicDefinitionType * UserDefinedAngularCharacteristicDefinitionTypeVal;
  UserDefinedAngularCharacteristicItemType * UserDefinedAngularCharacteristicItemTypeVal;
  UserDefinedAngularCharacteristicMeasurementType * UserDefinedAngularCharacteristicMeasurementTypeVal;
  UserDefinedAngularCharacteristicNominalType * UserDefinedAngularCharacteristicNominalTypeVal;
  UserDefinedAngularCharacteristicStatsEvalType * UserDefinedAngularCharacteristicStatsEvalTypeVal;
  UserDefinedAreaCharacteristicDefinitionType * UserDefinedAreaCharacteristicDefinitionTypeVal;
  UserDefinedAreaCharacteristicItemType * UserDefinedAreaCharacteristicItemTypeVal;
  UserDefinedAreaCharacteristicMeasurementType * UserDefinedAreaCharacteristicMeasurementTypeVal;
  UserDefinedAreaCharacteristicNominalType * UserDefinedAreaCharacteristicNominalTypeVal;
  UserDefinedAreaCharacteristicStatsEvalType * UserDefinedAreaCharacteristicStatsEvalTypeVal;
  UserDefinedArea_1138_TypeChoicePair * UserDefinedArea_1138_TypeChoicePairVal;
  UserDefinedArea_1138_Type *         UserDefinedArea_1138_TypeVal;
  UserDefinedArea_1162_Type *         UserDefinedArea_1162_TypeVal;
  UserDefinedArea_1163_Type *         UserDefinedArea_1163_TypeVal;
  UserDefinedArea_1164_Type *         UserDefinedArea_1164_TypeVal;
  UserDefinedArea_1165_Type *         UserDefinedArea_1165_TypeVal;
  UserDefinedAttributeCharacteristicDefinitionType * UserDefinedAttributeCharacteristicDefinitionTypeVal;
  UserDefinedAttributeCharacteristicItemType * UserDefinedAttributeCharacteristicItemTypeVal;
  UserDefinedAttributeCharacteristicMeasurementType * UserDefinedAttributeCharacteristicMeasurementTypeVal;
  UserDefinedAttributeCharacteristicNominalType * UserDefinedAttributeCharacteristicNominalTypeVal;
  UserDefinedAttributeCharacteristicStatsEvalType * UserDefinedAttributeCharacteristicStatsEvalTypeVal;
  UserDefinedAxisType *               UserDefinedAxisTypeVal;
  UserDefinedForc_1139_TypeChoicePair * UserDefinedForc_1139_TypeChoicePairVal;
  UserDefinedForc_1139_Type *         UserDefinedForc_1139_TypeVal;
  UserDefinedForc_1166_Type *         UserDefinedForc_1166_TypeVal;
  UserDefinedForc_1167_Type *         UserDefinedForc_1167_TypeVal;
  UserDefinedForc_1168_Type *         UserDefinedForc_1168_TypeVal;
  UserDefinedForc_1169_Type *         UserDefinedForc_1169_TypeVal;
  UserDefinedForceCharacteristicDefinitionType * UserDefinedForceCharacteristicDefinitionTypeVal;
  UserDefinedForceCharacteristicItemType * UserDefinedForceCharacteristicItemTypeVal;
  UserDefinedForceCharacteristicMeasurementType * UserDefinedForceCharacteristicMeasurementTypeVal;
  UserDefinedForceCharacteristicNominalType * UserDefinedForceCharacteristicNominalTypeVal;
  UserDefinedForceCharacteristicStatsEvalType * UserDefinedForceCharacteristicStatsEvalTypeVal;
  UserDefinedLine_1140_TypeChoicePair * UserDefinedLine_1140_TypeChoicePairVal;
  UserDefinedLine_1140_Type *         UserDefinedLine_1140_TypeVal;
  UserDefinedLine_1170_Type *         UserDefinedLine_1170_TypeVal;
  UserDefinedLine_1171_Type *         UserDefinedLine_1171_TypeVal;
  UserDefinedLine_1172_Type *         UserDefinedLine_1172_TypeVal;
  UserDefinedLine_1173_Type *         UserDefinedLine_1173_TypeVal;
  UserDefinedLinearCharacteristicDefinitionType * UserDefinedLinearCharacteristicDefinitionTypeVal;
  UserDefinedLinearCharacteristicItemType * UserDefinedLinearCharacteristicItemTypeVal;
  UserDefinedLinearCharacteristicMeasurementType * UserDefinedLinearCharacteristicMeasurementTypeVal;
  UserDefinedLinearCharacteristicNominalType * UserDefinedLinearCharacteristicNominalTypeVal;
  UserDefinedLinearCharacteristicStatsEvalType * UserDefinedLinearCharacteristicStatsEvalTypeVal;
  UserDefinedMassCharacteristicDefinitionType * UserDefinedMassCharacteristicDefinitionTypeVal;
  UserDefinedMassCharacteristicItemType * UserDefinedMassCharacteristicItemTypeVal;
  UserDefinedMassCharacteristicMeasurementType * UserDefinedMassCharacteristicMeasurementTypeVal;
  UserDefinedMassCharacteristicNominalType * UserDefinedMassCharacteristicNominalTypeVal;
  UserDefinedMassCharacteristicStatsEvalType * UserDefinedMassCharacteristicStatsEvalTypeVal;
  UserDefinedMass_1141_TypeChoicePair * UserDefinedMass_1141_TypeChoicePairVal;
  UserDefinedMass_1141_Type *         UserDefinedMass_1141_TypeVal;
  UserDefinedMass_1174_Type *         UserDefinedMass_1174_TypeVal;
  UserDefinedMass_1175_Type *         UserDefinedMass_1175_TypeVal;
  UserDefinedMass_1176_Type *         UserDefinedMass_1176_TypeVal;
  UserDefinedMass_1177_Type *         UserDefinedMass_1177_TypeVal;
  UserDefinedPres_1142_TypeChoicePair * UserDefinedPres_1142_TypeChoicePairVal;
  UserDefinedPres_1142_Type *         UserDefinedPres_1142_TypeVal;
  UserDefinedPres_1178_Type *         UserDefinedPres_1178_TypeVal;
  UserDefinedPres_1179_Type *         UserDefinedPres_1179_TypeVal;
  UserDefinedPres_1180_Type *         UserDefinedPres_1180_TypeVal;
  UserDefinedPres_1181_Type *         UserDefinedPres_1181_TypeVal;
  UserDefinedPressureCharacteristicDefinitionType * UserDefinedPressureCharacteristicDefinitionTypeVal;
  UserDefinedPressureCharacteristicItemType * UserDefinedPressureCharacteristicItemTypeVal;
  UserDefinedPressureCharacteristicMeasurementType * UserDefinedPressureCharacteristicMeasurementTypeVal;
  UserDefinedPressureCharacteristicNominalType * UserDefinedPressureCharacteristicNominalTypeVal;
  UserDefinedPressureCharacteristicStatsEvalType * UserDefinedPressureCharacteristicStatsEvalTypeVal;
  UserDefinedReso_1243_TypeChoicePair * UserDefinedReso_1243_TypeChoicePairVal;
  UserDefinedReso_1243_Type *         UserDefinedReso_1243_TypeVal;
  UserDefinedReso_1246_Type *         UserDefinedReso_1246_TypeVal;
  UserDefinedResolutionType *         UserDefinedResolutionTypeVal;
  UserDefinedSpee_1143_TypeChoicePair * UserDefinedSpee_1143_TypeChoicePairVal;
  UserDefinedSpee_1143_Type *         UserDefinedSpee_1143_TypeVal;
  UserDefinedSpee_1182_Type *         UserDefinedSpee_1182_TypeVal;
  UserDefinedSpee_1183_Type *         UserDefinedSpee_1183_TypeVal;
  UserDefinedSpee_1184_Type *         UserDefinedSpee_1184_TypeVal;
  UserDefinedSpee_1185_Type *         UserDefinedSpee_1185_TypeVal;
  UserDefinedSpeedCharacteristicDefinitionType * UserDefinedSpeedCharacteristicDefinitionTypeVal;
  UserDefinedSpeedCharacteristicItemType * UserDefinedSpeedCharacteristicItemTypeVal;
  UserDefinedSpeedCharacteristicMeasurementType * UserDefinedSpeedCharacteristicMeasurementTypeVal;
  UserDefinedSpeedCharacteristicNominalType * UserDefinedSpeedCharacteristicNominalTypeVal;
  UserDefinedSpeedCharacteristicStatsEvalType * UserDefinedSpeedCharacteristicStatsEvalTypeVal;
  UserDefinedTemp_1144_TypeChoicePair * UserDefinedTemp_1144_TypeChoicePairVal;
  UserDefinedTemp_1144_Type *         UserDefinedTemp_1144_TypeVal;
  UserDefinedTemp_1186_Type *         UserDefinedTemp_1186_TypeVal;
  UserDefinedTemp_1187_Type *         UserDefinedTemp_1187_TypeVal;
  UserDefinedTemp_1188_Type *         UserDefinedTemp_1188_TypeVal;
  UserDefinedTemp_1189_Type *         UserDefinedTemp_1189_TypeVal;
  UserDefinedTemperatureCharacteristicDefinitionType * UserDefinedTemperatureCharacteristicDefinitionTypeVal;
  UserDefinedTemperatureCharacteristicItemType * UserDefinedTemperatureCharacteristicItemTypeVal;
  UserDefinedTemperatureCharacteristicMeasurementType * UserDefinedTemperatureCharacteristicMeasurementTypeVal;
  UserDefinedTemperatureCharacteristicNominalType * UserDefinedTemperatureCharacteristicNominalTypeVal;
  UserDefinedTemperatureCharacteristicStatsEvalType * UserDefinedTemperatureCharacteristicStatsEvalTypeVal;
  UserDefinedTimeCharacteristicDefinitionType * UserDefinedTimeCharacteristicDefinitionTypeVal;
  UserDefinedTimeCharacteristicItemType * UserDefinedTimeCharacteristicItemTypeVal;
  UserDefinedTimeCharacteristicMeasurementType * UserDefinedTimeCharacteristicMeasurementTypeVal;
  UserDefinedTimeCharacteristicNominalType * UserDefinedTimeCharacteristicNominalTypeVal;
  UserDefinedTimeCharacteristicStatsEvalType * UserDefinedTimeCharacteristicStatsEvalTypeVal;
  UserDefinedTime_1145_TypeChoicePair * UserDefinedTime_1145_TypeChoicePairVal;
  UserDefinedTime_1145_Type *         UserDefinedTime_1145_TypeVal;
  UserDefinedTime_1190_Type *         UserDefinedTime_1190_TypeVal;
  UserDefinedTime_1191_Type *         UserDefinedTime_1191_TypeVal;
  UserDefinedTime_1192_Type *         UserDefinedTime_1192_TypeVal;
  UserDefinedTime_1193_Type *         UserDefinedTime_1193_TypeVal;
  UserDefinedUnitCharacteristicDefinitionType * UserDefinedUnitCharacteristicDefinitionTypeVal;
  UserDefinedUnitCharacteristicItemType * UserDefinedUnitCharacteristicItemTypeVal;
  UserDefinedUnitCharacteristicMeasurementType * UserDefinedUnitCharacteristicMeasurementTypeVal;
  UserDefinedUnitCharacteristicNominalType * UserDefinedUnitCharacteristicNominalTypeVal;
  UserDefinedUnitCharacteristicStatsEvalType * UserDefinedUnitCharacteristicStatsEvalTypeVal;
  UserDefinedUnitType *               UserDefinedUnitTypeVal;
  UserDefinedUnitValueType *          UserDefinedUnitValueTypeVal;
  UserDefinedUnit_1074_TypeChoicePair * UserDefinedUnit_1074_TypeChoicePairVal;
  UserDefinedUnit_1074_Type *         UserDefinedUnit_1074_TypeVal;
  UserDefinedUnit_1089_Type *         UserDefinedUnit_1089_TypeVal;
  UserDefinedUnit_1146_TypeChoicePair * UserDefinedUnit_1146_TypeChoicePairVal;
  UserDefinedUnit_1146_Type *         UserDefinedUnit_1146_TypeVal;
  UserDefinedUnit_1194_Type *         UserDefinedUnit_1194_TypeVal;
  UserDefinedUnit_1195_Type *         UserDefinedUnit_1195_TypeVal;
  UserDefinedUnit_1196_Type *         UserDefinedUnit_1196_TypeVal;
  UserDefinedUnit_1197_Type *         UserDefinedUnit_1197_TypeVal;
  UserDefinedUnitsType *              UserDefinedUnitsTypeVal;
  UserDefinedWorkingVolumeType *      UserDefinedWorkingVolumeTypeVal;
  ValidationBodyType *                ValidationBodyTypeVal;
  ValidationCountsType *              ValidationCountsTypeVal;
  ValidationEdgeType *                ValidationEdgeTypeVal;
  ValidationFaceType *                ValidationFaceTypeVal;
  ValidationPartAssemblyInstanceType * ValidationPartAssemblyInstanceTypeVal;
  ValidationPartAssemblyInstancesType * ValidationPartAssemblyInstancesTypeVal;
  ValidationPartAssemblyType *        ValidationPartAssemblyTypeVal;
  ValidationPoint_1003_TypeChoicePair * ValidationPoint_1003_TypeChoicePairVal;
  ValidationPoint_1003_Type *         ValidationPoint_1003_TypeVal;
  ValidationPoint_1004_TypeChoicePair * ValidationPoint_1004_TypeChoicePairVal;
  ValidationPoint_1004_Type *         ValidationPoint_1004_TypeVal;
  ValidationPointsType *              ValidationPointsTypeVal;
  ValidityEnumType *                  ValidityEnumTypeVal;
  VariableDeclarationType *           VariableDeclarationTypeVal;
  VariableSetType *                   VariableSetTypeVal;
  VariableValueType *                 VariableValueTypeVal;
  VectorSimpleType *                  VectorSimpleTypeVal;
  VectorType *                        VectorTypeVal;
  VersionBaseType *                   VersionBaseTypeVal;
  VersionHistoryType *                VersionHistoryTypeVal;
  VersionReferenceType *              VersionReferenceTypeVal;
  VersionType *                       VersionTypeVal;
  VertexSetType *                     VertexSetTypeVal;
  VertexType *                        VertexTypeVal;
  VideoInstructionType *              VideoInstructionTypeVal;
  ViewSetType *                       ViewSetTypeVal;
  VirtualMeasurementType *            VirtualMeasurementTypeVal;
  VisualizationSetType *              VisualizationSetTypeVal;
  VolumetricPerformanceTestType *     VolumetricPerformanceTestTypeVal;
  WeldBevelCharacteristicDefinitionType * WeldBevelCharacteristicDefinitionTypeVal;
  WeldBevelCharacteristicItemType *   WeldBevelCharacteristicItemTypeVal;
  WeldBevelCharacteristicMeasurementType * WeldBevelCharacteristicMeasurementTypeVal;
  WeldBevelCharacteristicNominalType * WeldBevelCharacteristicNominalTypeVal;
  WeldBevelCharacteristicStatsEvalType * WeldBevelCharacteristicStatsEvalTypeVal;
  WeldCompoundCharacteristicDefinitionType * WeldCompoundCharacteristicDefinitionTypeVal;
  WeldCompoundCharacteristicItemType * WeldCompoundCharacteristicItemTypeVal;
  WeldCompoundCharacteristicMeasurementType * WeldCompoundCharacteristicMeasurementTypeVal;
  WeldCompoundCharacteristicNominalType * WeldCompoundCharacteristicNominalTypeVal;
  WeldCompoundCharacteristicStatsEvalType * WeldCompoundCharacteristicStatsEvalTypeVal;
  WeldContourSymbolEnumType *         WeldContourSymbolEnumTypeVal;
  WeldContourSymbolType *             WeldContourSymbolTypeVal;
  WeldEdgeCharacteristicDefinitionType * WeldEdgeCharacteristicDefinitionTypeVal;
  WeldEdgeCharacteristicItemType *    WeldEdgeCharacteristicItemTypeVal;
  WeldEdgeCharacteristicMeasurementType * WeldEdgeCharacteristicMeasurementTypeVal;
  WeldEdgeCharacteristicNominalType * WeldEdgeCharacteristicNominalTypeVal;
  WeldEdgeCharacteristicStatsEvalType * WeldEdgeCharacteristicStatsEvalTypeVal;
  WeldFilletBothSidesType *           WeldFilletBothSidesTypeVal;
  WeldFilletChara_1075_TypeChoicePair * WeldFilletChara_1075_TypeChoicePairVal;
  WeldFilletChara_1075_Type *         WeldFilletChara_1075_TypeVal;
  WeldFilletChara_1076_TypeChoicePair * WeldFilletChara_1076_TypeChoicePairVal;
  WeldFilletChara_1076_Type *         WeldFilletChara_1076_TypeVal;
  WeldFilletCharacteristicDefinitionType * WeldFilletCharacteristicDefinitionTypeVal;
  WeldFilletCharacteristicItemType *  WeldFilletCharacteristicItemTypeVal;
  WeldFilletCharacteristicMeasurementType * WeldFilletCharacteristicMeasurementTypeVal;
  WeldFilletCharacteristicNominalType * WeldFilletCharacteristicNominalTypeVal;
  WeldFilletCharacteristicStatsEvalType * WeldFilletCharacteristicStatsEvalTypeVal;
  WeldFilletEqualLegLengthType *      WeldFilletEqualLegLengthTypeVal;
  WeldFilletOneSi_1077_TypeChoicePair * WeldFilletOneSi_1077_TypeChoicePairVal;
  WeldFilletOneSi_1077_Type *         WeldFilletOneSi_1077_TypeVal;
  WeldFilletOneSideInBothSidesType *  WeldFilletOneSideInBothSidesTypeVal;
  WeldFilletOneSideType *             WeldFilletOneSideTypeVal;
  WeldFilletUnequalLegLengthType *    WeldFilletUnequalLegLengthTypeVal;
  WeldFinishingDesignatorEnumType *   WeldFinishingDesignatorEnumTypeVal;
  WeldFinishingType *                 WeldFinishingTypeVal;
  WeldFlareBevelCharacteristicDefinitionType * WeldFlareBevelCharacteristicDefinitionTypeVal;
  WeldFlareBevelCharacteristicItemType * WeldFlareBevelCharacteristicItemTypeVal;
  WeldFlareBevelCharacteristicMeasurementType * WeldFlareBevelCharacteristicMeasurementTypeVal;
  WeldFlareBevelCharacteristicNominalType * WeldFlareBevelCharacteristicNominalTypeVal;
  WeldFlareBevelCharacteristicStatsEvalType * WeldFlareBevelCharacteristicStatsEvalTypeVal;
  WeldFlareVCharacteristicDefinitionType * WeldFlareVCharacteristicDefinitionTypeVal;
  WeldFlareVCharacteristicItemType *  WeldFlareVCharacteristicItemTypeVal;
  WeldFlareVCharacteristicMeasurementType * WeldFlareVCharacteristicMeasurementTypeVal;
  WeldFlareVCharacteristicNominalType * WeldFlareVCharacteristicNominalTypeVal;
  WeldFlareVCharacteristicStatsEvalType * WeldFlareVCharacteristicStatsEvalTypeVal;
  WeldGrooveBothSidesExtendedType *   WeldGrooveBothSidesExtendedTypeVal;
  WeldGrooveChara_1078_TypeChoicePair * WeldGrooveChara_1078_TypeChoicePairVal;
  WeldGrooveChara_1078_Type *         WeldGrooveChara_1078_TypeVal;
  WeldGrooveChara_1079_TypeChoicePair * WeldGrooveChara_1079_TypeChoicePairVal;
  WeldGrooveChara_1079_Type *         WeldGrooveChara_1079_TypeVal;
  WeldGrooveCharacteristicMeasurementType * WeldGrooveCharacteristicMeasurementTypeVal;
  WeldGrooveCharacteristicNominalType * WeldGrooveCharacteristicNominalTypeVal;
  WeldGrooveOneSi_1080_Type *         WeldGrooveOneSi_1080_TypeVal;
  WeldGrooveOneSideParametersType *   WeldGrooveOneSideParametersTypeVal;
  WeldGrooveOneSideType *             WeldGrooveOneSideTypeVal;
  WeldJCharacteristicDefinitionType * WeldJCharacteristicDefinitionTypeVal;
  WeldJCharacteristicItemType *       WeldJCharacteristicItemTypeVal;
  WeldJCharacteristicMeasurementType * WeldJCharacteristicMeasurementTypeVal;
  WeldJCharacteristicNominalType *    WeldJCharacteristicNominalTypeVal;
  WeldJCharacteristicStatsEvalType *  WeldJCharacteristicStatsEvalTypeVal;
  WeldMainSymbolEnumType *            WeldMainSymbolEnumTypeVal;
  WeldMainSymbolType *                WeldMainSymbolTypeVal;
  WeldOneSideParametersExtendSizeType * WeldOneSideParametersExtendSizeTypeVal;
  WeldOneSideParametersExtendType *   WeldOneSideParametersExtendTypeVal;
  WeldPlugCharacteristicDefinitionType * WeldPlugCharacteristicDefinitionTypeVal;
  WeldPlugCharacteristicItemType *    WeldPlugCharacteristicItemTypeVal;
  WeldPlugCharacteristicMeasurementType * WeldPlugCharacteristicMeasurementTypeVal;
  WeldPlugCharacteristicNominalType * WeldPlugCharacteristicNominalTypeVal;
  WeldPlugCharacteristicStatsEvalType * WeldPlugCharacteristicStatsEvalTypeVal;
  WeldPlugOneSideParametersType *     WeldPlugOneSideParametersTypeVal;
  WeldScarfCharacteristicDefinitionType * WeldScarfCharacteristicDefinitionTypeVal;
  WeldScarfCharacteristicItemType *   WeldScarfCharacteristicItemTypeVal;
  WeldScarfCharacteristicMeasurementType * WeldScarfCharacteristicMeasurementTypeVal;
  WeldScarfCharacteristicNominalType * WeldScarfCharacteristicNominalTypeVal;
  WeldScarfCharacteristicStatsEvalType * WeldScarfCharacteristicStatsEvalTypeVal;
  WeldSeamCharacteristicDefinitionType * WeldSeamCharacteristicDefinitionTypeVal;
  WeldSeamCharacteristicItemType *    WeldSeamCharacteristicItemTypeVal;
  WeldSeamCharacteristicMeasurementType * WeldSeamCharacteristicMeasurementTypeVal;
  WeldSeamCharacteristicNominalType * WeldSeamCharacteristicNominalTypeVal;
  WeldSeamCharacteristicStatsEvalType * WeldSeamCharacteristicStatsEvalTypeVal;
  WeldSlotCharacteristicDefinitionType * WeldSlotCharacteristicDefinitionTypeVal;
  WeldSlotCharacteristicItemType *    WeldSlotCharacteristicItemTypeVal;
  WeldSlotCharacteristicMeasurementType * WeldSlotCharacteristicMeasurementTypeVal;
  WeldSlotCharacteristicNominalType * WeldSlotCharacteristicNominalTypeVal;
  WeldSlotCharacteristicStatsEvalType * WeldSlotCharacteristicStatsEvalTypeVal;
  WeldSpotCharacteristicDefinitionType * WeldSpotCharacteristicDefinitionTypeVal;
  WeldSpotCharacteristicItemType *    WeldSpotCharacteristicItemTypeVal;
  WeldSpotCharacteristicMeasurementType * WeldSpotCharacteristicMeasurementTypeVal;
  WeldSpotCharacteristicNominalType * WeldSpotCharacteristicNominalTypeVal;
  WeldSpotCharacteristicStatsEvalType * WeldSpotCharacteristicStatsEvalTypeVal;
  WeldSpotOneSideParametersType *     WeldSpotOneSideParametersTypeVal;
  WeldSquareCharacteristicDefinitionType * WeldSquareCharacteristicDefinitionTypeVal;
  WeldSquareCharacteristicItemType *  WeldSquareCharacteristicItemTypeVal;
  WeldSquareCharacteristicMeasurementType * WeldSquareCharacteristicMeasurementTypeVal;
  WeldSquareCharacteristicNominalType * WeldSquareCharacteristicNominalTypeVal;
  WeldSquareCharacteristicStatsEvalType * WeldSquareCharacteristicStatsEvalTypeVal;
  WeldStudCharacteristicDefinitionType * WeldStudCharacteristicDefinitionTypeVal;
  WeldStudCharacteristicItemType *    WeldStudCharacteristicItemTypeVal;
  WeldStudCharacteristicMeasurementType * WeldStudCharacteristicMeasurementTypeVal;
  WeldStudCharacteristicNominalType * WeldStudCharacteristicNominalTypeVal;
  WeldStudCharacteristicStatsEvalType * WeldStudCharacteristicStatsEvalTypeVal;
  WeldSupplementarySymbolEnumType *   WeldSupplementarySymbolEnumTypeVal;
  WeldSupplementarySymbolType *       WeldSupplementarySymbolTypeVal;
  WeldSurfacingCharacteristicDefinitionType * WeldSurfacingCharacteristicDefinitionTypeVal;
  WeldSurfacingCharacteristicItemType * WeldSurfacingCharacteristicItemTypeVal;
  WeldSurfacingCharacteristicMeasurementType * WeldSurfacingCharacteristicMeasurementTypeVal;
  WeldSurfacingCharacteristicNominalType * WeldSurfacingCharacteristicNominalTypeVal;
  WeldSurfacingCharacteristicStatsEvalType * WeldSurfacingCharacteristicStatsEvalTypeVal;
  WeldUCharacteristicDefinitionType * WeldUCharacteristicDefinitionTypeVal;
  WeldUCharacteristicItemType *       WeldUCharacteristicItemTypeVal;
  WeldUCharacteristicMeasurementType * WeldUCharacteristicMeasurementTypeVal;
  WeldUCharacteristicNominalType *    WeldUCharacteristicNominalTypeVal;
  WeldUCharacteristicStatsEvalType *  WeldUCharacteristicStatsEvalTypeVal;
  WeldVCharacteristicDefinitionType * WeldVCharacteristicDefinitionTypeVal;
  WeldVCharacteristicItemType *       WeldVCharacteristicItemTypeVal;
  WeldVCharacteristicMeasurementType * WeldVCharacteristicMeasurementTypeVal;
  WeldVCharacteristicNominalType *    WeldVCharacteristicNominalTypeVal;
  WeldVCharacteristicStatsEvalType *  WeldVCharacteristicStatsEvalTypeVal;
  WeldingProcessEnumType *            WeldingProcessEnumTypeVal;
  WeldingProcessSuffixEnumType *      WeldingProcessSuffixEnumTypeVal;
  WeldingProcessType *                WeldingProcessTypeVal;
  WhileActionGroupType *              WhileActionGroupTypeVal;
  WidthCharacteristicDefinitionType * WidthCharacteristicDefinitionTypeVal;
  WidthCharacteristicItemType *       WidthCharacteristicItemTypeVal;
  WidthCharacteristicMeasurementType * WidthCharacteristicMeasurementTypeVal;
  WidthCharacteristicNominalType *    WidthCharacteristicNominalTypeVal;
  WidthCharacteristicStatsEvalType *  WidthCharacteristicStatsEvalTypeVal;
  WitnessLinesTyp_1235_Type *         WitnessLinesTyp_1235_TypeVal;
  WitnessLinesTyp_1236_Type *         WitnessLinesTyp_1236_TypeVal;
  WitnessLinesTypeChoicePair *        WitnessLinesTypeChoicePairVal;
  WitnessLinesType *                  WitnessLinesTypeVal;
  WorkInstructionBaseType *           WorkInstructionBaseTypeVal;
  WorkInstructionsType *              WorkInstructionsTypeVal;
  WorkingVolumeBaseType *             WorkingVolumeBaseTypeVal;
  XYZLinearSpecificationType *        XYZLinearSpecificationTypeVal;
  XYZResolutionType *                 XYZResolutionTypeVal;
  XmlAnyURI *                         XmlAnyURIVal;
  XmlBoolean *                        XmlBooleanVal;
  XmlDateTime *                       XmlDateTimeVal;
  XmlDecimal *                        XmlDecimalVal;
  XmlDouble *                         XmlDoubleVal;
  XmlIDREF *                          XmlIDREFVal;
  XmlID *                             XmlIDVal;
  XmlInt *                            XmlIntVal;
  XmlInteger *                        XmlIntegerVal;
  XmlNMTOKEN *                        XmlNMTOKENVal;
  XmlNonNegativeInteger *             XmlNonNegativeIntegerVal;
  XmlPositiveInteger *                XmlPositiveIntegerVal;
  XmlString *                         XmlStringVal;
  XmlToken *                          XmlTokenVal;
  XmlUnsignedByte *                   XmlUnsignedByteVal;
  XmlUnsignedInt *                    XmlUnsignedIntVal;
  ZeroToOneType *                     ZeroToOneTypeVal;
  ZoneDataSetType *                   ZoneDataSetTypeVal;
  ZoneDataType *                      ZoneDataTypeVal;
  ZoneOrientationEnumType *           ZoneOrientationEnumTypeVal;
  ZoneSectionPlaneType *              ZoneSectionPlaneTypeVal;
  ZoneSectionPlanesType *             ZoneSectionPlanesTypeVal;
  ZoneSectionSetType *                ZoneSectionSetTypeVal;
  ZoneSectionType *                   ZoneSectionTypeVal;
}

%type <sVal>                          y_attributeName
%type <AttributePairVal>              y_AttributePair
%type <LiztAttributePairVal>          y_LiztAttributePair
%type <XmlHeaderForQIFDocumentVal>    y_XmlHeaderForQIFDocument
%type <XmlVersionVal>                 y_XmlVersion
%type <QIFDocumentFileVal>            y_QIFDocumentFile
%type <XmlAnyURIVal>                  y_XmlAnyURI
%type <XmlBooleanVal>                 y_XmlBoolean
%type <XmlDateTimeVal>                y_XmlDateTime
%type <XmlDecimalVal>                 y_XmlDecimal
%type <XmlDoubleVal>                  y_XmlDouble
%type <XmlIDVal>                      y_XmlID
%type <XmlIDREFVal>                   y_XmlIDREF
%type <XmlIntVal>                     y_XmlInt
%type <XmlIntegerVal>                 y_XmlInteger
%type <XmlNMTOKENVal>                 y_XmlNMTOKEN
%type <XmlNonNegativeIntegerVal>      y_XmlNonNegativeInteger
%type <XmlPositiveIntegerVal>         y_XmlPositiveInteger
%type <XmlStringVal>                  y_XmlString
%type <XmlTokenVal>                   y_XmlToken
%type <XmlUnsignedByteVal>            y_XmlUnsignedByte
%type <XmlUnsignedIntVal>             y_XmlUnsignedInt

%type <AACMMAccuraciesTypeVal>        y_AACMMAccuraciesType
%type <CMMAccuracyTestBaseTypeVal>    y_AACMMAccuracyTest_substituteType
%type <AACMMAccuracyTypeVal>          y_AACMMAccuracyType
%type <AACMMAccuracyTypeVal>          y_AACMMAccuracy_AACMMAccuracyType
%type <AACMMB89TestTypeVal>           y_AACMMB89TestType
%type <AACMMB89TestTypeVal>           y_AACMMB89Test_AACMMB89TestType
%type <ISO10360TestTypeVal>           y_AACMMISO10360Test_ISO10360TestType
%type <PointAccuracyTestTypeVal>      y_AACMMPointAccuracyTest_PointAccuracyTestType
%type <AACMMTypeVal>                  y_AACMMType
%type <AACMMTypeVal>                  y_AACMM_AACMMType
%type <LinearOrRotaryAxisTypeVal>     y_AAxisResolution_LinearOrRotaryAxisType
%type <ABCResolutionTypeVal>          y_ABCResolutionType
%type <ABCResolutionTypeVal>          y_ABCResolution_ABCResolutionType
%type <LinearOrRotaryAxisTypeVal>     y_ACombinedResolution_LinearOrRotaryAxisType
%type <XmlDoubleVal>                  y_A_XmlDouble
%type <AbsoluteLimitsByUnitTypeVal>   y_AbsoluteDifferences_AbsoluteLimitsByUnitType
%type <AbsoluteMeasurementsByUnitTypeVal> y_AbsoluteDifferences_AbsoluteMeasurementsByUnitType_0
%type <AbsoluteLimitsByUnitTypeVal>   y_AbsoluteLimitsByUnitType
%type <AbsoluteLimitsByUnitTypeVal>   y_AbsoluteMaximums_AbsoluteLimitsByUnitType
%type <AbsoluteMeasurementsByUnitTypeVal> y_AbsoluteMaximums_AbsoluteMeasurementsByUnitType_0
%type <AbsoluteMeasurementsByUnitTypeVal> y_AbsoluteMeasurementsByUnitType
%type <AbsoluteLimitsByUnitTypeVal>   y_AbsoluteMinimums_AbsoluteLimitsByUnitType
%type <AACMMAccuraciesTypeVal>        y_Accuracies_AACMMAccuraciesType_0
%type <CartesianCMMAccuraciesTypeVal> y_Accuracies_CartesianCMMAccuraciesType_0
%type <AccuracySourceEnumTypeVal>     y_AccuracySourceEnumType
%type <AccuracySourceEnumTypeVal>     y_AccuracySourceEnum_AccuracySourceEnumType
%type <AccuracySourceTypeVal>         y_AccuracySourceType
%type <AccuracySourceTypeChoicePairVal> y_AccuracySourceTypeChoicePair
%type <AccuracySourceTypeVal>         y_AccuracySource_AccuracySourceType
%type <LinearValueTypeVal>            y_AccuracyValue_LinearValueType
%type <LinearErrorTypeVal>            y_Accuracy_LinearErrorType_0
%type <LinearValueTypeVal>            y_Accuracy_LinearValueType
%type <NumericalLengthAccuracyTypeVal> y_Accuracy_NumericalLengthAccuracyType_0
%type <ActionMethodBaseTypeVal>       y_ActionMethod_substituteType
%type <ActionMethodsTypeVal>          y_ActionMethodsType
%type <ActionMethodsTypeVal>          y_ActionMethods_ActionMethodsType_0
%type <ActionToTakeEnumTypeVal>       y_ActionToTakeEnumType
%type <ActionToTakeEnumTypeVal>       y_ActionToTakeEnum_ActionToTakeEnumType
%type <XmlStringVal>                  y_ActionToTake_XmlString
%type <LogicalOperationEnumTypeVal>   y_Action_LogicalOperationEnumType
%type <FunctionDiscreteTypeVal>       y_ActivePixelsNumber_FunctionDiscreteType_0
%type <XmlBooleanVal>                 y_ActiveView_XmlBoolean_0
%type <XmlBooleanVal>                 y_Active_XmlBoolean
%type <QIFReferenceFullTypeVal>       y_ActualComponentId_QIFReferenceFullType_0
%type <QIFReferenceTypeVal>           y_ActualComponentId_QIFReferenceType_0
%type <ArrayReferenceTypeVal>         y_ActualComponentIds_ArrayReferenceType_0
%type <ActualComponentSetTypeVal>     y_ActualComponentSetType
%type <ActualComponentSetTypeVal>     y_ActualComponentSet_ActualComponentSetType
%type <ActualComponentSetsTypeVal>    y_ActualComponentSetsType
%type <ActualComponentSetsTypeVal>    y_ActualComponentSets_ActualComponentSetsType_0
%type <ActualComponentTypeVal>        y_ActualComponentType
%type <ActualComponentTypeVal>        y_ActualComponent_ActualComponentType
%type <ActualProductTraceabilityTypeVal> y_ActualProductTraceabilityType
%type <LinearValueTypeVal>            y_ActualSinglePointAccuracy_LinearValueType_0
%type <QIFReferenceTypeVal>           y_ActualTransformId_QIFReferenceType
%type <QIFReferenceTypeVal>           y_ActualTransformId_QIFReferenceType_0
%type <TransformListTypeVal>          y_ActualTransforms_TransformListType_0
%type <LinearValueTypeVal>            y_ActualVolumetricAccuracy_LinearValueType_0
%type <XmlStringVal>                  y_AdditionalChanges_XmlString_0
%type <XmlStringVal>                  y_AddonName_XmlString_0
%type <XmlStringVal>                  y_AddonOrganization_XmlString_0
%type <AddressDescriptionEnumTypeVal> y_AddressDescriptionEnumType
%type <AddressDescriptionEnumTypeVal> y_AddressDescriptionEnum_AddressDescriptionEnumType
%type <AddressDescriptionTypeVal>     y_AddressDescriptionType
%type <AddressDescriptionTypeChoicePairVal> y_AddressDescriptionTypeChoicePair
%type <PhysicalAddressTypeVal>        y_Address_PhysicalAddressType_0
%type <MeasuredUnitVectorTypeVal>     y_AdjacentNormal_MeasuredUnitVectorType_0
%type <UnitVectorTypeVal>             y_AdjacentNormal_UnitVectorType_0
%type <Aggregate12CoreTypeVal>        y_Aggregate12CoreType
%type <Aggregate12CoreTypeVal>        y_Aggregate12Core_Aggregate12CoreType
%type <Aggregate12TypeVal>            y_Aggregate12Type
%type <Aggregate12TypeVal>            y_Aggregate12_Aggregate12Type
%type <Aggregate13CoreTypeVal>        y_Aggregate13CoreType
%type <Aggregate13CoreTypeVal>        y_Aggregate13Core_Aggregate13CoreType
%type <Aggregate13TypeVal>            y_Aggregate13Type
%type <Aggregate13TypeVal>            y_Aggregate13_Aggregate13Type
%type <AlgorithmsTypeVal>             y_AlgorithmDefinitions_AlgorithmsType_0
%type <QIFReferenceTypeVal>           y_AlgorithmId_QIFReferenceType
%type <AlgorithmTypeVal>              y_AlgorithmType
%type <AlgorithmType_1007_TypeVal>    y_AlgorithmType_1007_AlgorithmType_1007_Type
%type <AlgorithmType_1007_TypeVal>    y_AlgorithmType_1007_Type
%type <AlgorithmType_1007_TypeChoicePairVal> y_AlgorithmType_1007_TypeChoicePair
%type <AlgorithmType_1_1027_TypeVal>  y_AlgorithmType_1_1027_AlgorithmType_1_1027_Type
%type <AlgorithmType_1_1027_TypeVal>  y_AlgorithmType_1_1027_Type
%type <AlgorithmType_1_1028_TypeVal>  y_AlgorithmType_1_1028_AlgorithmType_1_1028_Type
%type <AlgorithmType_1_1028_TypeVal>  y_AlgorithmType_1_1028_Type
%type <AlgorithmTypeVal>              y_Algorithm_AlgorithmType
%type <AlgorithmsTypeVal>             y_AlgorithmsType
%type <AlignmentEnumTypeVal>          y_AlignmentEnumType
%type <AlignmentFeatur_1008_TypeVal>  y_AlignmentFeatur_1008_AlignmentFeatur_1008_Type
%type <AlignmentFeatur_1008_TypeVal>  y_AlignmentFeatur_1008_Type
%type <AlignmentFeatur_1008_TypeChoicePairVal> y_AlignmentFeatur_1008_TypeChoicePair
%type <AlignmentFeatureTypeVal>       y_AlignmentFeatureType
%type <AlignmentOperationBaseTypeVal> y_AlignmentOperation_substituteType
%type <AlignmentOperationsTypeVal>    y_AlignmentOperationsType
%type <AlignmentOperationsTypeVal>    y_AlignmentOperations_AlignmentOperationsType_0
%type <AlignmentEnumTypeVal>          y_Alignment_AlignmentEnumType_0
%type <XmlBooleanVal>                 y_AllAround_XmlBoolean_0
%type <XmlTokenVal>                   y_All_XmlToken
%type <VectorTypeVal>                 y_AlongRowDirection_VectorType
%type <ArrayReferenceTypeVal>         y_AlternativeActionMethodIds_ArrayReferenceType_0
%type <MeasuredTemperatureValueTypeVal> y_AmbientTemperature_MeasuredTemperatureValueType_0
%type <AngleBetweenAnalysisModeEnumTypeVal> y_AnalysisMode_AngleBetweenAnalysisModeEnumType
%type <DistanceBetweenAnalysisModeEnumTypeVal> y_AnalysisMode_DistanceBetweenAnalysisModeEnumType
%type <ArrayReferenceTypeVal>         y_AnalysisSoftware_ArrayReferenceType_0
%type <MeasuredUnitVectorTypeVal>     y_AnalysisVector_MeasuredUnitVectorType_0
%type <UnitVectorTypeVal>             y_AnalysisVector_UnitVectorType_0
%type <AndTypeVal>                    y_AndType
%type <AndTypeVal>                    y_And_AndType
%type <AngleBetweenAnalysisModeEnumTypeVal> y_AngleBetweenAnalysisModeEnumType
%type <AngleBetweenCharacteristicDefinitionTypeVal> y_AngleBetweenCharacteristicDefinitionType
%type <AngleBetweenCharacteristicDefinitionTypeVal> y_AngleBetweenCharacteristicDefinition_AngleBetweenCharacteristicDefinitionType
%type <AngleBetweenCharacteristicItemTypeVal> y_AngleBetweenCharacteristicItemType
%type <AngleBetweenCharacteristicItemTypeVal> y_AngleBetweenCharacteristicItem_AngleBetweenCharacteristicItemType
%type <AngleBetweenCharacteristicMeasurementTypeVal> y_AngleBetweenCharacteristicMeasurementType
%type <AngleBetweenCharacteristicMeasurementTypeVal> y_AngleBetweenCharacteristicMeasurement_AngleBetweenCharacteristicMeasurementType
%type <AngleBetweenCharacteristicNominalTypeVal> y_AngleBetweenCharacteristicNominalType
%type <AngleBetweenCharacteristicNominalTypeVal> y_AngleBetweenCharacteristicNominal_AngleBetweenCharacteristicNominalType
%type <AngleBetweenCharacteristicStatsEvalTypeVal> y_AngleBetweenCharacteristicStatsEvalType
%type <AngleBetweenCharacteristicStatsEvalTypeVal> y_AngleBetweenCharacteristicStats_AngleBetweenCharacteristicStatsEvalType
%type <AngleCharacteristicDefinitionTypeVal> y_AngleCharacteristicDefinitionType
%type <AngleCharacteristicDefinitionTypeVal> y_AngleCharacteristicDefinition_AngleCharacteristicDefinitionType
%type <AngleCharacteristicItemTypeVal> y_AngleCharacteristicItemType
%type <AngleCharacteristicItemTypeVal> y_AngleCharacteristicItem_AngleCharacteristicItemType
%type <AngleCharacteristicMeasurementTypeVal> y_AngleCharacteristicMeasurementType
%type <AngleCharacteristicMeasurementTypeVal> y_AngleCharacteristicMeasurement_AngleCharacteristicMeasurementType
%type <AngleCharacteristicNominalTypeVal> y_AngleCharacteristicNominalType
%type <AngleCharacteristicNominalTypeVal> y_AngleCharacteristicNominal_AngleCharacteristicNominalType
%type <AngleCharacteristicStatsEvalTypeVal> y_AngleCharacteristicStatsEvalType
%type <AngleCharacteristicStatsEvalTypeVal> y_AngleCharacteristicStats_AngleCharacteristicStatsEvalType
%type <AngleFromCharacteristicDefinitionTypeVal> y_AngleFromCharacteristicDefinitionType
%type <AngleFromCharacteristicDefinitionTypeVal> y_AngleFromCharacteristicDefinition_AngleFromCharacteristicDefinitionType
%type <AngleFromCharacteristicItemTypeVal> y_AngleFromCharacteristicItemType
%type <AngleFromCharacteristicItemTypeVal> y_AngleFromCharacteristicItem_AngleFromCharacteristicItemType
%type <AngleFromCharacteristicMeasurementTypeVal> y_AngleFromCharacteristicMeasurementType
%type <AngleFromCharacteristicMeasurementTypeVal> y_AngleFromCharacteristicMeasurement_AngleFromCharacteristicMeasurementType
%type <AngleFromCharacteristicNominalTypeVal> y_AngleFromCharacteristicNominalType
%type <AngleFromCharacteristicNominalTypeVal> y_AngleFromCharacteristicNominal_AngleFromCharacteristicNominalType
%type <AngleFromCharacteristicStatsEvalTypeVal> y_AngleFromCharacteristicStatsEvalType
%type <AngleFromCharacteristicStatsEvalTypeVal> y_AngleFromCharacteristicStats_AngleFromCharacteristicStatsEvalType
%type <AngleFunctionDiscreteTypeVal>  y_AngleFunctionDiscreteType
%type <AngleRangeTypeVal>             y_AngleRangeType
%type <AngularValueTypeVal>           y_AngleResolution_AngularValueType_0
%type <AngularValueTypeVal>           y_Angle_AngularValueType
%type <AngularValueTypeVal>           y_Angle_AngularValueType_0
%type <MeasuredAngularValueTypeVal>   y_AngularAbsoluteLinearity_MeasuredAngularValueType
%type <AngularErrorTypeVal>           y_AngularAccuracy_AngularErrorType_0
%type <AngularValueTypeVal>           y_AngularAccuracy_AngularValueType_0
%type <AngularCharacte_1045_TypeVal>  y_AngularCharacte_1045_AngularCharacte_1045_Type
%type <AngularCharacte_1045_TypeVal>  y_AngularCharacte_1045_Type
%type <AngularCharacte_1045_TypeChoicePairVal> y_AngularCharacte_1045_TypeChoicePair
%type <AngularCharacte_1126_TypeVal>  y_AngularCharacte_1126_AngularCharacte_1126_Type
%type <AngularCharacte_1126_TypeVal>  y_AngularCharacte_1126_Type
%type <AngularCharacte_1126_TypeChoicePairVal> y_AngularCharacte_1126_TypeChoicePair
%type <AngularCharacte_1147_TypeVal>  y_AngularCharacte_1147_AngularCharacte_1147_Type
%type <AngularCharacte_1147_TypeVal>  y_AngularCharacte_1147_Type
%type <AngularCharacte_1148_TypeVal>  y_AngularCharacte_1148_AngularCharacte_1148_Type
%type <AngularCharacte_1148_TypeVal>  y_AngularCharacte_1148_Type
%type <AngularCharacte_1149_TypeVal>  y_AngularCharacte_1149_AngularCharacte_1149_Type
%type <AngularCharacte_1149_TypeVal>  y_AngularCharacte_1149_Type
%type <AngularCharacte_1150_TypeVal>  y_AngularCharacte_1150_AngularCharacte_1150_Type
%type <AngularCharacte_1150_TypeVal>  y_AngularCharacte_1150_Type
%type <AngularCharacteristicStatsEvalTypeVal> y_AngularCharacteristicStatsEvalType
%type <AngularCharacteristicStatsEvalTypeVal> y_AngularCharacteristicStats_AngularCharacteristicStatsEvalType
%type <AngularCoordina_1046_TypeVal>  y_AngularCoordina_1046_AngularCoordina_1046_Type
%type <AngularCoordina_1046_TypeVal>  y_AngularCoordina_1046_Type
%type <AngularCoordina_1046_TypeChoicePairVal> y_AngularCoordina_1046_TypeChoicePair
%type <AngularCoordinateCharacteristicDefinitionTypeVal> y_AngularCoordinateCharacteristicDefinitionType
%type <AngularCoordinateCharacteristicDefinitionTypeVal> y_AngularCoordinateCharacteristicDefinition_AngularCoordinateCharacteristicDefinitionType
%type <AngularCoordinateCharacteristicItemTypeVal> y_AngularCoordinateCharacteristicItemType
%type <AngularCoordinateCharacteristicItemTypeVal> y_AngularCoordinateCharacteristicItem_AngularCoordinateCharacteristicItemType
%type <AngularCoordinateCharacteristicMeasurementTypeVal> y_AngularCoordinateCharacteristicMeasurementType
%type <AngularCoordinateCharacteristicMeasurementTypeVal> y_AngularCoordinateCharacteristicMeasurement_AngularCoordinateCharacteristicMeasurementType
%type <AngularCoordinateCharacteristicNominalTypeVal> y_AngularCoordinateCharacteristicNominalType
%type <AngularCoordinateCharacteristicNominalTypeVal> y_AngularCoordinateCharacteristicNominal_AngularCoordinateCharacteristicNominalType
%type <AngularCoordinateCharacteristicStatsEvalTypeVal> y_AngularCoordinateCharacteristicStatsEvalType
%type <AngularCoordinateCharacteristicStatsEvalTypeVal> y_AngularCoordinateCharacteristicStats_AngularCoordinateCharacteristicStatsEvalType
%type <AngularCoordinateDirectionEnumTypeVal> y_AngularCoordinateDirectionEnumType
%type <CriterionAngularTypeVal>       y_AngularCriterion_CriterionAngularType_0
%type <AngularErrorTypeVal>           y_AngularErrorType
%type <AngularValueTypeVal>           y_AngularLimit_AngularValueType_0
%type <MeasuredAngularValueTypeVal>   y_AngularMeasurement_MeasuredAngularValueType_0
%type <SummariesStatisticsAngularTypeVal> y_AngularStatsSummaries_SummariesStatisticsAngularType_0
%type <SummaryStatisticsAngularTypeVal> y_AngularStatsSummary_SummaryStatisticsAngularType
%type <AngularToleranc_1009_TypeVal>  y_AngularToleranc_1009_AngularToleranc_1009_Type
%type <AngularToleranc_1009_TypeVal>  y_AngularToleranc_1009_Type
%type <AngularToleranc_1009_TypeChoicePairVal> y_AngularToleranc_1009_TypeChoicePair
%type <AngularToleranc_1010_TypeVal>  y_AngularToleranc_1010_AngularToleranc_1010_Type
%type <AngularToleranc_1010_TypeVal>  y_AngularToleranc_1010_Type
%type <AngularToleranc_1010_TypeChoicePairVal> y_AngularToleranc_1010_TypeChoicePair
%type <AngularToleranc_1029_TypeVal>  y_AngularToleranc_1029_AngularToleranc_1029_Type
%type <AngularToleranc_1029_TypeVal>  y_AngularToleranc_1029_Type
%type <AngularToleranc_1030_TypeVal>  y_AngularToleranc_1030_AngularToleranc_1030_Type
%type <AngularToleranc_1030_TypeVal>  y_AngularToleranc_1030_Type
%type <AngularToleranceDefinitionTypeVal> y_AngularToleranceDefinitionType
%type <AngularToleranceTypeVal>       y_AngularToleranceType
%type <AngularToleranceDefinitionTypeVal> y_AngularTolerance_AngularToleranceDefinitionType
%type <AngularUnitTypeVal>            y_AngularUnitType
%type <AngularUnitTypeVal>            y_AngularUnit_AngularUnitType
%type <AngularUnitTypeVal>            y_AngularUnit_AngularUnitType_0
%type <AngularValueTypeVal>           y_AngularValueType
%type <AngularityCharacteristicDefinitionTypeVal> y_AngularityCharacteristicDefinitionType
%type <AngularityCharacteristicDefinitionTypeVal> y_AngularityCharacteristicDefinition_AngularityCharacteristicDefinitionType
%type <AngularityCharacteristicItemTypeVal> y_AngularityCharacteristicItemType
%type <AngularityCharacteristicItemTypeVal> y_AngularityCharacteristicItem_AngularityCharacteristicItemType
%type <AngularityCharacteristicMeasurementTypeVal> y_AngularityCharacteristicMeasurementType
%type <AngularityCharacteristicMeasurementTypeVal> y_AngularityCharacteristicMeasurement_AngularityCharacteristicMeasurementType
%type <AngularityCharacteristicNominalTypeVal> y_AngularityCharacteristicNominalType
%type <AngularityCharacteristicNominalTypeVal> y_AngularityCharacteristicNominal_AngularityCharacteristicNominalType
%type <AngularityCharacteristicStatsEvalTypeVal> y_AngularityCharacteristicStatsEvalType
%type <AngularityCharacteristicStatsEvalTypeVal> y_AngularityCharacteristicStats_AngularityCharacteristicStatsEvalType
%type <ArrayReferenceFullTypeVal>     y_AnnotationHiddenIds_ArrayReferenceFullType_0
%type <ElementReferenceTypeVal>       y_AnnotationViewId_ElementReferenceType
%type <AnnotationViewSetTypeVal>      y_AnnotationViewSetType
%type <AnnotationViewSetTypeVal>      y_AnnotationViewSet_AnnotationViewSetType_0
%type <AnnotationViewTypeVal>         y_AnnotationViewType
%type <AnnotationViewTypeVal>         y_AnnotationView_AnnotationViewType
%type <ArrayReferenceFullTypeVal>     y_AnnotationVisibleIds_ArrayReferenceFullType_0
%type <LinearValueTypeVal>            y_ApertureSize_LinearValueType_0
%type <RoughnessApplicabilityEnumTypeVal> y_Applicability_RoughnessApplicabilityEnumType_0
%type <ApplicabilityBaseTypeVal>      y_Applicability_substituteType
%type <XmlTokenVal>                   y_ApplicationName_XmlToken
%type <ApplicationTypeVal>            y_ApplicationSource_ApplicationType_0
%type <SoftwareTypeVal>               y_ApplicationTool_SoftwareType_0
%type <ApplicationTypeVal>            y_ApplicationType
%type <ApplicationTypeVal>            y_Application_ApplicationType_0
%type <UserDefinedUnitValueTypeVal>   y_AppliedFrequency_UserDefinedUnitValueType_0
%type <StatsMeasuredDecimalTypeVal>   y_AppraiserVariation_StatsMeasuredDecimalType
%type <ArcCircular12CoreTypeVal>      y_ArcCircular12CoreType
%type <ArcCircular12CoreTypeVal>      y_ArcCircular12Core_ArcCircular12CoreType
%type <ArcCircular12TypeVal>          y_ArcCircular12Type
%type <ArcCircular12TypeVal>          y_ArcCircular12_ArcCircular12Type
%type <ArcCircular13CoreTypeVal>      y_ArcCircular13CoreType
%type <ArcCircular13CoreTypeVal>      y_ArcCircular13Core_ArcCircular13CoreType
%type <ArcCircular13TypeVal>          y_ArcCircular13Type
%type <ArcCircular13TypeVal>          y_ArcCircular13_ArcCircular13Type
%type <ArcConic12CoreTypeVal>         y_ArcConic12CoreType
%type <ArcConic12CoreTypeVal>         y_ArcConic12Core_ArcConic12CoreType
%type <ArcConic12TypeVal>             y_ArcConic12Type
%type <ArcConic12TypeVal>             y_ArcConic12_ArcConic12Type
%type <ArcConic13CoreTypeVal>         y_ArcConic13CoreType
%type <ArcConic13CoreTypeVal>         y_ArcConic13Core_ArcConic13CoreType
%type <ArcConic13TypeVal>             y_ArcConic13Type
%type <ArcConic13TypeVal>             y_ArcConic13_ArcConic13Type
%type <LinearValueTypeVal>            y_ArcRadius_LinearValueType
%type <Area2dTypeVal>                 y_Area2dType
%type <Area2dTypeChoicePairVal>       y_Area2dTypeChoicePair
%type <MeasuredAreaValueTypeVal>      y_AreaAbsoluteLinearity_MeasuredAreaValueType
%type <AreaCharacteris_1047_TypeVal>  y_AreaCharacteris_1047_AreaCharacteris_1047_Type
%type <AreaCharacteris_1047_TypeVal>  y_AreaCharacteris_1047_Type
%type <AreaCharacteris_1047_TypeChoicePairVal> y_AreaCharacteris_1047_TypeChoicePair
%type <CriterionAreaTypeVal>          y_AreaCriterion_CriterionAreaType_0
%type <CriticalityAreaEnumTypeVal>    y_AreaEnum_CriticalityAreaEnumType
%type <ProductDataQualityAreaEnumTypeVal> y_AreaEnum_ProductDataQualityAreaEnumType
%type <AreaValueTypeVal>              y_AreaLimit_AreaValueType_0
%type <MeasuredAreaValueTypeVal>      y_AreaMeasurement_MeasuredAreaValueType_0
%type <SummariesStatisticsAreaTypeVal> y_AreaStatsSummaries_SummariesStatisticsAreaType_0
%type <SummaryStatisticsAreaTypeVal>  y_AreaStatsSummary_SummaryStatisticsAreaType
%type <AreaToleranceTy_1011_TypeVal>  y_AreaToleranceTy_1011_AreaToleranceTy_1011_Type
%type <AreaToleranceTy_1011_TypeVal>  y_AreaToleranceTy_1011_Type
%type <AreaToleranceTy_1011_TypeChoicePairVal> y_AreaToleranceTy_1011_TypeChoicePair
%type <AreaToleranceTy_1031_TypeVal>  y_AreaToleranceTy_1031_AreaToleranceTy_1031_Type
%type <AreaToleranceTy_1031_TypeVal>  y_AreaToleranceTy_1031_Type
%type <AreaToleranceTypeVal>          y_AreaToleranceType
%type <AreaUnitTypeVal>               y_AreaUnitType
%type <AreaUnitTypeVal>               y_AreaUnit_AreaUnitType
%type <AreaUnitTypeVal>               y_AreaUnit_AreaUnitType_0
%type <AreaValueTypeVal>              y_AreaValueType
%type <Area2dTypeVal>                 y_Area_Area2dType
%type <SectionAreaTypeVal>            y_Area_SectionAreaType
%type <XmlDoubleVal>                  y_Area_XmlDouble_0
%type <Areas2dTypeVal>                y_Areas2dType
%type <Areas2dTypeVal>                y_Areas_Areas2dType_0
%type <SectionAreasTypeVal>           y_Areas_SectionAreasType_0
%type <ArithmeticCharacteristicParameterTypeVal> y_ArithmeticCharacteristicParameterType
%type <ArithmeticCharacteristicParameterTypeVal> y_ArithmeticCharacteristicParameter_ArithmeticCharacteristicParameterType
%type <ArithmeticComparisonEnumTypeVal> y_ArithmeticComparisonEnumType
%type <ArithmeticConstantTypeVal>     y_ArithmeticConstantType
%type <ArithmeticConstantTypeVal>     y_ArithmeticConstant_ArithmeticConstantType
%type <ArithmeticDMEParameterTypeVal> y_ArithmeticDMEParameterType
%type <ArithmeticDMEParameterTypeVal> y_ArithmeticDMEParameter_ArithmeticDMEParameterType
%type <ArithmeticEqualTypeVal>        y_ArithmeticEqualType
%type <ArithmeticEqualTypeVal>        y_ArithmeticEqual_ArithmeticEqualType
%type <ArithmeticExpressionBaseTypeVal> y_ArithmeticExpression_substituteType
%type <ArithmeticFeatureParameterTypeVal> y_ArithmeticFeatureParameterType
%type <ArithmeticFeatureParameterTypeVal> y_ArithmeticFeatureParameter_ArithmeticFeatureParameterType
%type <ArithmeticParameterValueTypeVal> y_ArithmeticParameterValueType
%type <ArithmeticParameterValueTypeVal> y_ArithmeticParameterValue_ArithmeticParameterValueType
%type <ArithmeticPartParameterTypeVal> y_ArithmeticPartParameterType
%type <ArithmeticPartParameterTypeVal> y_ArithmeticPartParameter_ArithmeticPartParameterType
%type <ArrayBinaryQIFR_1001_TypeVal>  y_ArrayBinaryQIFR_1001_ArrayBinaryQIFR_1001_Type
%type <ArrayBinaryQIFR_1001_TypeVal>  y_ArrayBinaryQIFR_1001_Type
%type <ArrayBinaryQIFReferenceFullTypeVal> y_ArrayBinaryQIFReferenceFullType
%type <ArrayBinaryQIFReferenceTypeVal> y_ArrayBinaryQIFReferenceType
%type <ArrayBinaryQIFReferenceTypeChoicePairVal> y_ArrayBinaryQIFReferenceTypeChoicePair
%type <ArrayBinaryTypeVal>            y_ArrayBinaryType
%type <ArrayDoubleTypeVal>            y_ArrayDoubleType
%type <ArrayI2TypeVal>                y_ArrayI2Type
%type <ArrayI3TypeVal>                y_ArrayI3Type
%type <ArrayIntTypeVal>               y_ArrayIntType
%type <ArrayNaturalTypeVal>           y_ArrayNaturalType
%type <ArrayNonDestructiveTestingTypeVal> y_ArrayNonDestructiveTestingType
%type <ArrayPairReferenceFullTypeVal> y_ArrayPairReferenceFullType
%type <ArrayPoint2dTypeVal>           y_ArrayPoint2dType
%type <ArrayPointTypeVal>             y_ArrayPointType
%type <ArrayQPIdFullReferenceTypeVal> y_ArrayQPIdFullReferenceType
%type <ArrayReferenceActiveTypeVal>   y_ArrayReferenceActiveType
%type <ArrayReferenceFullTypeVal>     y_ArrayReferenceFullType
%type <ArrayReferenceTypeVal>         y_ArrayReferenceType
%type <ArraySubCurve12TypeVal>        y_ArraySubCurve12Type
%type <ArraySubCurve13TypeVal>        y_ArraySubCurve13Type
%type <ArrayTriangleVertexNormalTypeVal> y_ArrayTriangleVertexNormalType
%type <ArrayUnitVectorTypeVal>        y_ArrayUnitVectorType
%type <ArrayUnsignedByteTypeVal>      y_ArrayUnsignedByteType
%type <WeldContourSymbolTypeVal>      y_ArrowSideContourSymbol_WeldContourSymbolType_0
%type <WeldGrooveOneSideParametersTypeVal> y_ArrowSideParameters_WeldGrooveOneSideParametersType_0
%type <WeldOneSideParametersExtendSizeTypeVal> y_ArrowSideParameters_WeldOneSideParametersExtendSizeType_0
%type <WeldOneSideParametersExtendTypeVal> y_ArrowSideParameters_WeldOneSideParametersExtendType_0
%type <WeldFilletOneSideInBothSidesTypeVal> y_ArrowSide_WeldFilletOneSideInBothSidesType_0
%type <QIFReferenceTypeVal>           y_AsmPathId_QIFReferenceType
%type <QIFReferenceTypeVal>           y_AsmPathId_QIFReferenceType_0
%type <ArrayReferenceTypeVal>         y_AsmPathIds_ArrayReferenceType_0
%type <AsmPathTypeVal>                y_AsmPathType
%type <AsmPathTypeVal>                y_AsmPath_AsmPathType
%type <AsmPathsTypeVal>               y_AsmPathsType
%type <AsmPathsTypeVal>               y_AsmPaths_AsmPathsType_0
%type <AssemblySetTypeVal>            y_AssemblySetType
%type <AssemblySetTypeVal>            y_AssemblySet_AssemblySetType_0
%type <AssemblyTypeVal>               y_AssemblyType
%type <AssemblyTypeVal>               y_Assembly_AssemblyType
%type <ElementReferenceTypeVal>       y_Assembly_ElementReferenceType
%type <AssignableCauseEnumTypeVal>    y_AssignableCauseEnumType
%type <AssignableCauseEnumTypeVal>    y_AssignableCauseEnum_AssignableCauseEnumType
%type <ArrayReferenceTypeVal>         y_AssignableCauseIds_ArrayReferenceType_0
%type <AssignableCauseTypeVal>        y_AssignableCauseType
%type <AssignableCause_1127_TypeVal>  y_AssignableCause_1127_AssignableCause_1127_Type
%type <AssignableCause_1127_TypeVal>  y_AssignableCause_1127_Type
%type <AssignableCause_1127_TypeChoicePairVal> y_AssignableCause_1127_TypeChoicePair
%type <AssignableCauseTypeVal>        y_AssignableCause_AssignableCauseType
%type <AssignableCausesTypeVal>       y_AssignableCausesType
%type <AssignableCausesTypeVal>       y_AssignableCauses_AssignableCausesType
%type <AssociatedTolerancedFeatureSpecificationElementEnumTypeVal> y_AssociatedTolerancedFeatureSpecificationElementEnumType
%type <AssociatedTolerancedFeatureSpecificationElementEnumTypeVal> y_AssociatedTolerancedFeatureSpecificationElement_AssociatedTolerancedFeatureSpecificationElementEnumType
%type <QIFReferenceTypeVal>           y_AssociatedTraceabilityId_QIFReferenceType_0
%type <ReferenceFeatureAssociationSpecificationElementEnumTypeVal> y_Association_ReferenceFeatureAssociationSpecificationElementEnumType
%type <AttributeBoolTypeVal>          y_AttributeBoolType
%type <AttributeBoolTypeVal>          y_AttributeBool_AttributeBoolType
%type <AttributeD1TypeVal>            y_AttributeD1Type
%type <AttributeD1TypeVal>            y_AttributeD1_AttributeD1Type
%type <AttributeD2TypeVal>            y_AttributeD2Type
%type <AttributeD2TypeVal>            y_AttributeD2_AttributeD2Type
%type <AttributeD3TypeVal>            y_AttributeD3Type
%type <AttributeD3TypeVal>            y_AttributeD3_AttributeD3Type
%type <AttributeI1TypeVal>            y_AttributeI1Type
%type <AttributeI1TypeVal>            y_AttributeI1_AttributeI1Type
%type <AttributeI2TypeVal>            y_AttributeI2Type
%type <AttributeI2TypeVal>            y_AttributeI2_AttributeI2Type
%type <AttributeI3TypeVal>            y_AttributeI3Type
%type <AttributeI3TypeVal>            y_AttributeI3_AttributeI3Type
%type <AttributeQPIdTypeVal>          y_AttributeQPIdType
%type <AttributeQPIdTypeVal>          y_AttributeQPId_AttributeQPIdType
%type <StatsPassFailTypeVal>          y_AttributeStats_StatsPassFailType_0
%type <AttributeStrTypeVal>           y_AttributeStrType
%type <AttributeStrTypeVal>           y_AttributeStr_AttributeStrType
%type <AttributeTimeTypeVal>          y_AttributeTimeType
%type <AttributeTimeTypeVal>          y_AttributeTime_AttributeTimeType
%type <AttributeUserTypeVal>          y_AttributeUserType
%type <AttributeUserTypeVal>          y_AttributeUser_AttributeUserType
%type <AttributeBaseTypeVal>          y_Attribute_substituteType
%type <AttributesTypeVal>             y_AttributesType
%type <AttributesTypeVal>             y_Attributes_AttributesType_0
%type <AuthorTypeVal>                 y_AuthorType
%type <AuthorTypeVal>                 y_Author_AuthorType_0
%type <EmployeeTypeVal>               y_Author_EmployeeType
%type <AutocollimatorMeasureFeatureMethodTypeVal> y_AutocollimatorMeasureFeatureMethodType
%type <AutocollimatorMeasureFeatureMethodTypeVal> y_AutocollimatorMeasureFeatureMethod_AutocollimatorMeasureFeatureMethodType
%type <AutocollimatorTypeVal>         y_AutocollimatorType
%type <AutocollimatorTypeVal>         y_Autocollimator_AutocollimatorType
%type <ArrayReferenceTypeVal>         y_AuxiliaryIds_ArrayReferenceType_0
%type <AuxiliarySetTypeVal>           y_AuxiliarySetType
%type <AuxiliarySetTypeVal>           y_AuxiliarySet_AuxiliarySetType_0
%type <AuxiliaryBaseTypeVal>          y_Auxiliary_substituteType
%type <XmlDecimalVal>                 y_AverageDiameter_XmlDecimal
%type <AverageFeatureTypeVal>         y_AverageFeatureType
%type <AverageFeatureTypeVal>         y_AverageFeature_AverageFeatureType
%type <AverageFeaturesTypeVal>        y_AverageFeaturesType
%type <AverageFeaturesTypeVal>        y_AverageFeatures_AverageFeaturesType_0
%type <StatsMeasuredDecimalTypeVal>   y_AverageRange_StatsMeasuredDecimalType
%type <LinearValueTypeVal>            y_AverageSpotDiameter_LinearValueType_0
%type <StatsMeasuredDecimalTypeVal>   y_Average_StatsMeasuredDecimalType
%type <AngularValueTypeVal>           y_AxesRotationAngle_AngularValueType_0
%type <XYZLinearSpecificationTypeVal> y_AxesTravelDistance_XYZLinearSpecificationType_0
%type <AxialDifferentialScaleTypeVal> y_AxialDifferentialScaleType
%type <AxialDifferentialScaleTypeVal> y_AxialDifferentialScale_AxialDifferentialScaleType
%type <LinearValueTypeVal>            y_AxialError_LinearValueType
%type <XYZLinearSpecificationTypeVal> y_AxisBacklash_XYZLinearSpecificationType_0
%type <UnitVectorTypeVal>             y_AxisDirection_UnitVectorType
%type <XmlTokenVal>                   y_AxisName_XmlToken
%type <MeasuredPointTypeVal>          y_AxisPoint_MeasuredPointType
%type <PointTypeVal>                  y_AxisPoint_PointType
%type <XYZLinearSpecificationTypeVal> y_AxisRepeatability_XYZLinearSpecificationType_0
%type <AxisTypeVal>                   y_AxisType
%type <MeasuredUnitVectorTypeVal>     y_AxisVector_MeasuredUnitVectorType_0
%type <UnitVectorTypeVal>             y_AxisVector_UnitVectorType
%type <AxisTypeVal>                   y_Axis_AxisType
%type <MeasuredAxisTypeVal>           y_Axis_MeasuredAxisType_0
%type <UnitVectorTypeVal>             y_Axis_UnitVectorType
%type <UserAxisBaseTypeVal>           y_Axis_substituteType
%type <AngularErrorTypeVal>           y_AzimuthAngularAccuracy_AngularErrorType_0
%type <AngularValueTypeVal>           y_AzimuthalAngleResolution_AngularValueType
%type <LinearOrRotaryAxisTypeVal>     y_BAxisResolution_LinearOrRotaryAxisType
%type <LinearOrRotaryAxisTypeVal>     y_BCombinedResolution_LinearOrRotaryAxisType
%type <XmlDoubleVal>                  y_B_XmlDouble
%type <CharacteristicBalloonLocationEnumTypeVal> y_BalloonLocation_CharacteristicBalloonLocationEnumType
%type <CharacteristicBalloonStyleEnumTypeVal> y_BalloonStyle_CharacteristicBalloonStyleEnumType
%type <CharacteristicBalloonTypeVal>  y_Balloon_CharacteristicBalloonType_0
%type <BaseFeatureTypeVal>            y_BaseArc_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseAxisFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseCircle_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseCone_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseConicalSegment_BaseFeatureType
%type <QIFReferenceFullTypeVal>       y_BaseCoordinateSystemId_QIFReferenceFullType_0
%type <BaseFeatureTypeVal>            y_BaseCylinder_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseCylindricalSegment_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseEdgePoint_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseEllipse_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseEllipticalArc_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseElongatedCircle_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseElongatedCylinder_BaseFeatureType
%type <AngularValueTypeVal>           y_BaseError_AngularValueType
%type <LinearValueTypeVal>            y_BaseError_LinearValueType
%type <BaseFeatureTypeVal>            y_BaseExtrudedCrossSection_BaseFeatureType
%type <BaseFeaturePointListTypeVal>   y_BaseFeaturePointListType
%type <BaseFeaturePointListTypeVal>   y_BaseFeaturePointList_BaseFeaturePointListType
%type <BaseFeaturePointSetTypeVal>    y_BaseFeaturePointSetType
%type <BaseFeaturePointSetTypeVal>    y_BaseFeaturePointSet_BaseFeaturePointSetType
%type <BaseFeatureTypeVal>            y_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseFeature_BaseFeatureType
%type <SequencedBaseFeatureTypeVal>   y_BaseFeature_SequencedBaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseLine_BaseFeatureType
%type <SequencedBaseFeatureTypeVal>   y_BaseLine_SequencedBaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseLocationFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseOppositeAngledLines_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseOppositeAngledPlanes_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseOppositeParallelLines_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseOppositeParallelPlanes_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseOtherCurveFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseOtherShapeFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseOtherSurfaceFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BasePlane_BaseFeatureType
%type <SequencedBaseFeatureTypeVal>   y_BasePlane_SequencedBaseFeatureType
%type <BaseFeatureTypeVal>            y_BasePointDefinedCurve_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BasePointDefinedSurface_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BasePointFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseSphere_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseSphericalSegment_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseSurfaceOfRevolution_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseThreadedFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseToroidalSegment_BaseFeatureType
%type <BaseFeatureTypeVal>            y_BaseTorus_BaseFeatureType
%type <XmlStringVal>                  y_BaselineProductNumber_XmlString
%type <XmlStringVal>                  y_BaselineProductVersion_XmlString_0
%type <XmlTokenVal>                   y_BasicSize_XmlToken
%type <Point2dSimpleTypeVal>          y_BeginPoint_Point2dSimpleType
%type <BestFitAlignmentOperationTypeVal> y_BestFitAlignmentOperationType
%type <BestFitAlignmentOperationTypeVal> y_BestFit_BestFitAlignmentOperationType
%type <CircleBestFitTypeVal>          y_BestFit_CircleBestFitType
%type <CircularArcBestFitTypeVal>     y_BestFit_CircularArcBestFitType
%type <ConeBestFitTypeVal>            y_BestFit_ConeBestFitType
%type <ConicalSegmentBestFitTypeVal>  y_BestFit_ConicalSegmentBestFitType
%type <CylinderBestFitTypeVal>        y_BestFit_CylinderBestFitType
%type <CylindricalSegmentBestFitTypeVal> y_BestFit_CylindricalSegmentBestFitType
%type <EllipseBestFitTypeVal>         y_BestFit_EllipseBestFitType
%type <EllipticalArcBestFitTypeVal>   y_BestFit_EllipticalArcBestFitType
%type <ElongatedCircleBestFitTypeVal> y_BestFit_ElongatedCircleBestFitType
%type <ElongatedCylinderBestFitTypeVal> y_BestFit_ElongatedCylinderBestFitType
%type <ExtrudedCrossSectionBestFitTypeVal> y_BestFit_ExtrudedCrossSectionBestFitType
%type <LineBestFitTypeVal>            y_BestFit_LineBestFitType
%type <OppositeAngledLinesBestFitTypeVal> y_BestFit_OppositeAngledLinesBestFitType
%type <OppositeAngledPlanesBestFitTypeVal> y_BestFit_OppositeAngledPlanesBestFitType
%type <OppositeParallelLinesBestFitTypeVal> y_BestFit_OppositeParallelLinesBestFitType
%type <OppositeParallelPlanesBestFitTypeVal> y_BestFit_OppositeParallelPlanesBestFitType
%type <PlaneBestFitTypeVal>           y_BestFit_PlaneBestFitType
%type <PointDefinedCurveBestFitTypeVal> y_BestFit_PointDefinedCurveBestFitType
%type <PointDefinedSurfaceBestFitTypeVal> y_BestFit_PointDefinedSurfaceBestFitType
%type <SphereBestFitTypeVal>          y_BestFit_SphereBestFitType
%type <SphericalSegmentBestFitTypeVal> y_BestFit_SphericalSegmentBestFitType
%type <SurfaceOfRevolutionBestFitTypeVal> y_BestFit_SurfaceOfRevolutionBestFitType
%type <ThreadedFeatureBestFitTypeVal> y_BestFit_ThreadedFeatureBestFitType
%type <ToroidalSegmentBestFitTypeVal> y_BestFit_ToroidalSegmentBestFitType
%type <TorusBestFitTypeVal>           y_BestFit_TorusBestFitType
%type <VectorTypeVal>                 y_BetweenRowDirection_VectorType
%type <BiasStudyPlanTypeVal>          y_BiasStudyPlanType
%type <BiasStudyPlanTypeVal>          y_BiasStudyPlan_BiasStudyPlanType
%type <BiasStudyResultsTypeVal>       y_BiasStudyResultsType
%type <BiasStudyResultsTypeVal>       y_BiasStudyResults_BiasStudyResultsType
%type <StatsMeasuredDecimalTypeVal>   y_Bias_StatsMeasuredDecimalType
%type <ArrayBinaryTypeVal>            y_BinaryColors_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_BinaryCompensated_ArrayBinaryType
%type <BinaryDataTypeVal>             y_BinaryDataType
%type <ArrayBinaryTypeVal>            y_BinaryDeviations_ArrayBinaryType
%type <ArrayBinaryQIFReferenceFullTypeVal> y_BinaryMeasurePointNominalIds_ArrayBinaryQIFReferenceFullType
%type <ArrayBinaryTypeVal>            y_BinaryNormals_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_BinaryPointIndices_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_BinaryPoints_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_BinaryProbeRadii_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_BinaryQuality_ArrayBinaryType
%type <ArrayBinaryQIFReferenceTypeVal> y_BinarySensorIds_ArrayBinaryQIFReferenceType
%type <ArrayBinaryQIFReferenceTypeVal> y_BinaryTipIds_ArrayBinaryQIFReferenceType
%type <QIFReferenceFullTypeVal>       y_BodyId_QIFReferenceFullType_0
%type <ArrayReferenceFullTypeVal>     y_BodyIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_BodyIds_ArrayReferenceType_0
%type <BodySetTypeVal>                y_BodySetType
%type <BodySetTypeVal>                y_BodySet_BodySetType_0
%type <BodyTypeVal>                   y_BodyType
%type <BodyTypeVal>                   y_Body_BodyType
%type <StatsLinearTypeVal>            y_BonusStats_StatsLinearType_0
%type <LinearValueTypeVal>            y_Bonus_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_Bonus_MeasuredLinearValueType_0
%type <BooleanEqualTypeVal>           y_BooleanEqualType
%type <BooleanEqualTypeVal>           y_BooleanEqual_BooleanEqualType
%type <BooleanExpressionBaseTypeVal>  y_BooleanExpression_substituteType
%type <BooleanExpressionBaseTypeVal>  y_BooleanExpression_substituteType_0
%type <WeldFilletBothSidesTypeVal>    y_BothSides_WeldFilletBothSidesType
%type <WeldGrooveBothSidesExtendedTypeVal> y_BothSides_WeldGrooveBothSidesExtendedType
%type <BottomEnumTypeVal>             y_BottomEnumType
%type <BottomEnumTypeVal>             y_BottomEnum_BottomEnumType
%type <BottomTypeVal>                 y_BottomType
%type <BottomTypeChoicePairVal>       y_BottomTypeChoicePair
%type <BottomTypeVal>                 y_Bottom_BottomType_0
%type <XmlBooleanVal>                 y_BoundaryZone_XmlBoolean_0
%type <BoundingBoxAxisAlignedTypeVal> y_BoundingBoxAxisAlignedType
%type <BoundingBoxTypeVal>            y_BoundingBoxType
%type <XmlDecimalVal>                 y_BoxCoxTransformation_XmlDecimal
%type <BoundingBoxAxisAlignedTypeVal> y_Box_BoundingBoxAxisAlignedType_0
%type <CADCoordinateSystemTypeVal>    y_CADCoordinateSystemType
%type <ArrayReferenceTypeVal>         y_CADSoftware_ArrayReferenceType_0
%type <LinearOrRotaryAxisTypeVal>     y_CAxisResolution_LinearOrRotaryAxisType
%type <LinearOrRotaryAxisTypeVal>     y_CCombinedResolution_LinearOrRotaryAxisType
%type <CMMAxisDirectionsBaseTypeVal>  y_CMMAxisDirections_substituteType_0
%type <CMMDirectionEnumTypeVal>       y_CMMDirectionEnumType
%type <CartesianCMMGeometryTypeVal>   y_CMMGeometry_CartesianCMMGeometryType_0
%type <CMMSpeedsBaseTypeVal>          y_CMMSpeeds_substituteType_0
%type <CMMTypeVal>                    y_CMMType
%type <CMMTypeVal>                    y_CMM_CMMType
%type <ArrayBinaryTypeVal>            y_CPsBinary_ArrayBinaryType
%type <ArrayPoint2dTypeVal>           y_CPs_ArrayPoint2dType
%type <ArrayPointTypeVal>             y_CPs_ArrayPointType
%type <CartesianWorkingVolumeTypeVal> y_CabinetDimensions_CartesianWorkingVolumeType_0
%type <XmlBooleanVal>                 y_CalculateAverageFeatures_XmlBoolean_0
%type <CalibratedComparatorMeasureFeatureMethodTypeVal> y_CalibratedComparatorMeasureFeatureMethodType
%type <CalibratedComparatorMeasureFeatureMethodTypeVal> y_CalibratedComparatorMeasureFeatureMethod_CalibratedComparatorMeasureFeatureMethodType
%type <XmlDateTimeVal>                y_CalibrationDate_XmlDateTime_0
%type <CalibrationMasterTypeVal>      y_CalibrationMasterType
%type <CalibrationMasterTypeVal>      y_CalibrationMaster_CalibrationMasterType_0
%type <CalibrationTypeVal>            y_CalibrationType
%type <CalibrationTypeVal>            y_Calibration_CalibrationType
%type <CalibrationsTypeVal>           y_CalibrationsType
%type <CalibrationsTypeVal>           y_Calibrations_CalibrationsType_0
%type <CaliperDialTypeVal>            y_CaliperDialType
%type <CaliperDialTypeVal>            y_CaliperDial_CaliperDialType
%type <CaliperDigitalTypeVal>         y_CaliperDigitalType
%type <CaliperDigitalTypeVal>         y_CaliperDigital_CaliperDigitalType
%type <CaliperTypeVal>                y_CaliperType
%type <CaliperTypeVal>                y_Caliper_CaliperType
%type <ArrayReferenceActiveTypeVal>   y_CameraIds_ArrayReferenceActiveType_0
%type <CameraSetTypeVal>              y_CameraSetType
%type <CameraSetTypeVal>              y_CameraSet_CameraSetType_0
%type <CameraTypeVal>                 y_CameraType
%type <CameraTypeVal>                 y_Camera_CameraType
%type <XmlBooleanVal>                 y_CanMeasureDepth_XmlBoolean_0
%type <XmlBooleanVal>                 y_CanMeasureInnerD_XmlBoolean_0
%type <XmlBooleanVal>                 y_CanMeasureOuterD_XmlBoolean_0
%type <OneSidedCapabilityCalculationEnumTypeVal> y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
%type <PositionCapabilityCalculationEnumTypeVal> y_CapabilityCalculationMethod_PositionCapabilityCalculationEnumType_0
%type <CapabilityStudyPlanTypeVal>    y_CapabilityStudyPlanType
%type <CapabilityStudyPlanTypeVal>    y_CapabilityStudyPlan_CapabilityStudyPlanType
%type <CapabilityStudyResultsTypeVal> y_CapabilityStudyResultsType
%type <CapabilityStudyResultsTypeVal> y_CapabilityStudyResults_CapabilityStudyResultsType
%type <CapabilityStudy_1198_TypeVal>  y_CapabilityStudy_1198_CapabilityStudy_1198_Type
%type <CapabilityStudy_1198_TypeVal>  y_CapabilityStudy_1198_Type
%type <CapabilityStudy_1198_TypeChoicePairVal> y_CapabilityStudy_1198_TypeChoicePair
%type <CapacitiveSensorTypeVal>       y_CapacitiveSensorType
%type <CapacitiveSensorTypeVal>       y_CapacitiveSensor_CapacitiveSensorType
%type <CarriageTypeVal>               y_CarriageType
%type <CarriageTypeVal>               y_Carriage_CarriageType
%type <CarriagesTypeVal>              y_CarriagesType
%type <CarriagesTypeVal>              y_Carriages_CarriagesType
%type <CartesianCMMAccuraciesTypeVal> y_CartesianCMMAccuraciesType
%type <CMMAccuracyTestBaseTypeVal>    y_CartesianCMMAccuracyTest_substituteType
%type <CartesianCMMAccuracyTypeVal>   y_CartesianCMMAccuracyType
%type <CartesianCMMAccuracyTypeVal>   y_CartesianCMMAccuracy_CartesianCMMAccuracyType
%type <CartesianCMMAxisDirectionsTypeVal> y_CartesianCMMAxisDirectionsType
%type <CartesianCMMAxisDirectionsTypeVal> y_CartesianCMMAxisDirections_CartesianCMMAxisDirectionsType
%type <CartesianCMMB89TestTypeVal>    y_CartesianCMMB89TestType
%type <CartesianCMMB89TestTypeVal>    y_CartesianCMMB89Test_CartesianCMMB89TestType
%type <FPSTestTypeVal>                y_CartesianCMMFPSTest_FPSTestType
%type <CartesianCMMGeometryEnumTypeVal> y_CartesianCMMGeometryEnumType
%type <CartesianCMMGeometryEnumTypeVal> y_CartesianCMMGeometryEnum_CartesianCMMGeometryEnumType
%type <CartesianCMMGeometryTypeVal>   y_CartesianCMMGeometryType
%type <CartesianCMMGeometryTypeChoicePairVal> y_CartesianCMMGeometryTypeChoicePair
%type <ISO10360TestTypeVal>           y_CartesianCMMISO10360Test_ISO10360TestType
%type <PointAccuracyTestTypeVal>      y_CartesianCMMPointAccuracyTest_PointAccuracyTestType
%type <CartesianCMMSpeedsTypeVal>     y_CartesianCMMSpeedsType
%type <CartesianCMMSpeedsTypeVal>     y_CartesianCMMSpeeds_CartesianCMMSpeedsType
%type <CartesianCMMTypeVal>           y_CartesianCMMType
%type <CartesianCMMTypeVal>           y_CartesianCMM_CartesianCMMType
%type <CartesianMeasurementDeviceScalesTypeVal> y_CartesianMeasurementDeviceScalesType
%type <CartesianMeasurementDeviceScalesTypeVal> y_CartesianMeasurementDeviceScales_CartesianMeasurementDeviceScalesType
%type <CartesianResolu_1239_TypeVal>  y_CartesianResolu_1239_CartesianResolu_1239_Type
%type <CartesianResolu_1239_TypeVal>  y_CartesianResolu_1239_Type
%type <CartesianResolu_1239_TypeChoicePairVal> y_CartesianResolu_1239_TypeChoicePair
%type <CartesianResolu_1244_TypeVal>  y_CartesianResolu_1244_CartesianResolu_1244_Type
%type <CartesianResolu_1244_TypeVal>  y_CartesianResolu_1244_Type
%type <CartesianResolutionTypeVal>    y_CartesianResolutionType
%type <CartesianResolutionTypeVal>    y_CartesianResolution_CartesianResolutionType
%type <CartesianWorkingVolumeTypeVal> y_CartesianWorkingVolumeType
%type <CartesianWorkingVolumeTypeVal> y_CartesianWorkingVolume_CartesianWorkingVolumeType
%type <CircleCastTypeVal>             y_Cast_CircleCastType
%type <CircularArcCastTypeVal>        y_Cast_CircularArcCastType
%type <ConeCastTypeVal>               y_Cast_ConeCastType
%type <ConicalSegmentCastTypeVal>     y_Cast_ConicalSegmentCastType
%type <CylinderCastTypeVal>           y_Cast_CylinderCastType
%type <CylindricalSegmentCastTypeVal> y_Cast_CylindricalSegmentCastType
%type <EdgePointCastTypeVal>          y_Cast_EdgePointCastType
%type <EllipseCastTypeVal>            y_Cast_EllipseCastType
%type <EllipticalArcCastTypeVal>      y_Cast_EllipticalArcCastType
%type <ElongatedCircleCastTypeVal>    y_Cast_ElongatedCircleCastType
%type <ElongatedCylinderCastTypeVal>  y_Cast_ElongatedCylinderCastType
%type <ExtrudedCrossSectionCastTypeVal> y_Cast_ExtrudedCrossSectionCastType
%type <LineCastTypeVal>               y_Cast_LineCastType
%type <OppositeAngledLinesCastTypeVal> y_Cast_OppositeAngledLinesCastType
%type <OppositeAngledPlanesCastTypeVal> y_Cast_OppositeAngledPlanesCastType
%type <OppositeParallelLinesCastTypeVal> y_Cast_OppositeParallelLinesCastType
%type <OppositeParallelPlanesCastTypeVal> y_Cast_OppositeParallelPlanesCastType
%type <PlaneCastTypeVal>              y_Cast_PlaneCastType
%type <PointFeatureCastTypeVal>       y_Cast_PointFeatureCastType
%type <SphereCastTypeVal>             y_Cast_SphereCastType
%type <SphericalSegmentCastTypeVal>   y_Cast_SphericalSegmentCastType
%type <SurfaceOfRevolutionCastTypeVal> y_Cast_SurfaceOfRevolutionCastType
%type <ThreadedFeatureCastTypeVal>    y_Cast_ThreadedFeatureCastType
%type <ToroidalSegmentCastTypeVal>    y_Cast_ToroidalSegmentCastType
%type <TorusCastTypeVal>              y_Cast_TorusCastType
%type <MeasuredPointAndVectorTypeVal> y_CenterLine_MeasuredPointAndVectorType_0
%type <PointAndVectorTypeVal>         y_CenterLine_PointAndVectorType
%type <PointFeatureCenterOfGravityTypeVal> y_CenterOfGravity_PointFeatureCenterOfGravityType
%type <MeasuredPlaneTypeVal>          y_CenterPlane_MeasuredPlaneType_0
%type <PlaneTypeVal>                  y_CenterPlane_PlaneType
%type <PointTypeVal>                  y_CenterPoint_PointType
%type <Point2dSimpleTypeVal>          y_Center_Point2dSimpleType
%type <PointSimpleTypeVal>            y_Center_PointSimpleType
%type <PointTypeVal>                  y_Center_PointType
%type <PointSimpleTypeVal>            y_Centroid_PointSimpleType_0
%type <CharacteristicAspectsListsTypeVal> y_CharacteristicAspectsListsType
%type <CharacteristicBalloonLocationEnumTypeVal> y_CharacteristicBalloonLocationEnumType
%type <CharacteristicBalloonStyleEnumTypeVal> y_CharacteristicBalloonStyleEnumType
%type <CharacteristicBalloonTypeVal>  y_CharacteristicBalloonType
%type <QIFReferenceTypeVal>           y_CharacteristicDefinitionId_QIFReferenceType
%type <CharacteristicDefinitionBaseTypeVal> y_CharacteristicDefinition_substituteType
%type <XmlUnsignedIntVal>             y_CharacteristicDefinitionsCount_XmlUnsignedInt_0
%type <CharacteristicDefinitionsTypeVal> y_CharacteristicDefinitionsType
%type <CharacteristicDefinitionsTypeVal> y_CharacteristicDefinitions_CharacteristicDefinitionsType
%type <CharacteristicDesignatorTypeVal> y_CharacteristicDesignatorType
%type <CharacteristicDesignatorTypeVal> y_CharacteristicDesignator_CharacteristicDesignatorType_0
%type <CharacteristicGroupStatusTypeVal> y_CharacteristicGroupStatusType
%type <CharacteristicGroupStatusTypeVal> y_CharacteristicGroupStatus_CharacteristicGroupStatusType
%type <CharacteristicGroupStatusesTypeVal> y_CharacteristicGroupStatusesType
%type <CharacteristicGroupStatusesTypeVal> y_CharacteristicGroupStatuses_CharacteristicGroupStatusesType_0
%type <CharacteristicGroupTypeVal>    y_CharacteristicGroupType
%type <CharacteristicGroupTypeVal>    y_CharacteristicGroup_CharacteristicGroupType
%type <CharacteristicGroupTypeVal>    y_CharacteristicGroup_substituteType
%type <XmlUnsignedIntVal>             y_CharacteristicGroupsCount_XmlUnsignedInt_0
%type <CharacteristicGroupsTypeVal>   y_CharacteristicGroupsType
%type <CharacteristicGroupsTypeVal>   y_CharacteristicGroups_CharacteristicGroupsType_0
%type <CharacteristicIsTypeVal>       y_CharacteristicIsType
%type <CharacteristicIsTypeVal>       y_CharacteristicIs_CharacteristicIsType
%type <QIFReferenceTypeVal>           y_CharacteristicItemId_QIFReferenceType
%type <ArrayReferenceTypeVal>         y_CharacteristicItemIds_ArrayReferenceType
%type <CharacteristicItemBaseTypeVal> y_CharacteristicItem_substituteType
%type <XmlUnsignedIntVal>             y_CharacteristicItemsCount_XmlUnsignedInt_0
%type <CharacteristicItemsTypeVal>    y_CharacteristicItemsType
%type <CharacteristicItemsTypeVal>    y_CharacteristicItems_CharacteristicItemsType_0
%type <CharacteristicManufacturingProcessGroupTypeVal> y_CharacteristicManufacturingProcessGroupType
%type <CharacteristicManufacturingProcessGroupTypeVal> y_CharacteristicManufacturingProcessGroup_CharacteristicManufacturingProcessGroupType
%type <ArrayReferenceTypeVal>         y_CharacteristicMeasurementIds_ArrayReferenceType
%type <CharacteristicMeasurementBaseTypeVal> y_CharacteristicMeasurement_substituteType
%type <CharacteristicMeasurementsTypeVal> y_CharacteristicMeasurementsType
%type <CharacteristicMeasurementsTypeVal> y_CharacteristicMeasurements_CharacteristicMeasurementsType
%type <QIFReferenceFullTypeVal>       y_CharacteristicNominalId_QIFReferenceFullType
%type <ArrayReferenceFullTypeVal>     y_CharacteristicNominalIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_CharacteristicNominalIds_ArrayReferenceType
%type <ArrayReferenceTypeVal>         y_CharacteristicNominalIds_ArrayReferenceType_0
%type <CharacteristicNominalBaseTypeVal> y_CharacteristicNominal_substituteType
%type <XmlUnsignedIntVal>             y_CharacteristicNominalsCount_XmlUnsignedInt_0
%type <CharacteristicNominalsTypeVal> y_CharacteristicNominalsType
%type <CharacteristicNominalsTypeVal> y_CharacteristicNominals_CharacteristicNominalsType
%type <CharacteristicS_1128_TypeVal>  y_CharacteristicS_1128_CharacteristicS_1128_Type_0
%type <CharacteristicS_1128_TypeVal>  y_CharacteristicS_1128_Type
%type <CharacteristicS_1128_TypeChoicePairVal> y_CharacteristicS_1128_TypeChoicePair
%type <CharacteristicS_1129_TypeVal>  y_CharacteristicS_1129_CharacteristicS_1129_Type_0
%type <CharacteristicS_1129_TypeVal>  y_CharacteristicS_1129_Type
%type <CharacteristicS_1129_TypeChoicePairVal> y_CharacteristicS_1129_TypeChoicePair
%type <CharacteristicS_1151_TypeVal>  y_CharacteristicS_1151_CharacteristicS_1151_Type
%type <CharacteristicS_1151_TypeVal>  y_CharacteristicS_1151_Type
%type <CharacteristicS_1151_TypeChoicePairVal> y_CharacteristicS_1151_TypeChoicePair
%type <CharacteristicS_1152_TypeVal>  y_CharacteristicS_1152_CharacteristicS_1152_Type
%type <CharacteristicS_1152_TypeVal>  y_CharacteristicS_1152_Type
%type <CharacteristicS_1152_TypeChoicePairVal> y_CharacteristicS_1152_TypeChoicePair
%type <CharacteristicStatsEvalBaseTypeVal> y_CharacteristicStats_substituteType
%type <CharacteristicStatusEnumTypeVal> y_CharacteristicStatusEnumType
%type <CharacteristicStatusEnumTypeVal> y_CharacteristicStatusEnum_CharacteristicStatusEnumType
%type <CharacteristicStatusTypeVal>   y_CharacteristicStatusType
%type <CharacteristicStatusTypeChoicePairVal> y_CharacteristicStatusTypeChoicePair
%type <CharacteristicToleranceTypeVal> y_CharacteristicToleranceType
%type <CharacteristicToleranceTypeVal> y_CharacteristicTolerance_CharacteristicToleranceType
%type <CharacteristicTypeEnumTypeVal> y_CharacteristicTypeEnumType
%type <CharacteristicTypeEnumTypeVal> y_CharacteristicTypeEnum_CharacteristicTypeEnumType_0
%type <CharacteristicsStatsTypeVal>   y_CharacteristicsStatsType
%type <CharacteristicsStatsTypeVal>   y_CharacteristicsStats_CharacteristicsStatsType_0
%type <CharacteristicAspectsListsTypeVal> y_Characteristics_CharacteristicAspectsListsType_0
%type <ChargeCoupledDeviceCameraSensorTypeVal> y_ChargeCoupledDeviceCameraSensorType
%type <ChargeCoupledDeviceCameraSensorTypeVal> y_ChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType
%type <ChargeCoupledDeviceCameraSensorTypeVal> y_ChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType_0
%type <CircleCheckedTypeVal>          y_CheckDetails_CircleCheckedType_0
%type <CircularArcCheckedTypeVal>     y_CheckDetails_CircularArcCheckedType_0
%type <ConeCheckedTypeVal>            y_CheckDetails_ConeCheckedType_0
%type <ConicalSegmentCheckedTypeVal>  y_CheckDetails_ConicalSegmentCheckedType_0
%type <CylinderCheckedTypeVal>        y_CheckDetails_CylinderCheckedType_0
%type <CylindricalSegmentCheckedTypeVal> y_CheckDetails_CylindricalSegmentCheckedType_0
%type <EdgePointCheckedTypeVal>       y_CheckDetails_EdgePointCheckedType_0
%type <EllipseCheckedTypeVal>         y_CheckDetails_EllipseCheckedType_0
%type <EllipticalArcCheckedTypeVal>   y_CheckDetails_EllipticalArcCheckedType_0
%type <ElongatedCircleCheckedTypeVal> y_CheckDetails_ElongatedCircleCheckedType_0
%type <ElongatedCylinderCheckedTypeVal> y_CheckDetails_ElongatedCylinderCheckedType_0
%type <ExtrudedCrossSectionCheckedTypeVal> y_CheckDetails_ExtrudedCrossSectionCheckedType_0
%type <LineCheckedTypeVal>            y_CheckDetails_LineCheckedType_0
%type <OppositeAngledLinesCheckedTypeVal> y_CheckDetails_OppositeAngledLinesCheckedType_0
%type <OppositeAngledPlanesCheckedTypeVal> y_CheckDetails_OppositeAngledPlanesCheckedType_0
%type <OppositeParallelLinesCheckedTypeVal> y_CheckDetails_OppositeParallelLinesCheckedType_0
%type <OppositeParallelPlanesCheckedTypeVal> y_CheckDetails_OppositeParallelPlanesCheckedType_0
%type <OtherCurveCheckedTypeVal>      y_CheckDetails_OtherCurveCheckedType_0
%type <OtherShapeCheckedTypeVal>      y_CheckDetails_OtherShapeCheckedType_0
%type <OtherSurfaceCheckedTypeVal>    y_CheckDetails_OtherSurfaceCheckedType_0
%type <PlaneCheckedTypeVal>           y_CheckDetails_PlaneCheckedType_0
%type <PointCheckedTypeVal>           y_CheckDetails_PointCheckedType_0
%type <PointDefinedCurveCheckedTypeVal> y_CheckDetails_PointDefinedCurveCheckedType_0
%type <PointDefinedSurfaceCheckedTypeVal> y_CheckDetails_PointDefinedSurfaceCheckedType_0
%type <SphereCheckedTypeVal>          y_CheckDetails_SphereCheckedType_0
%type <SphericalSegmentCheckedTypeVal> y_CheckDetails_SphericalSegmentCheckedType_0
%type <SurfaceOfRevolutionCheckedTypeVal> y_CheckDetails_SurfaceOfRevolutionCheckedType_0
%type <ThreadedFeatureCheckedTypeVal> y_CheckDetails_ThreadedFeatureCheckedType_0
%type <ToroidalSegmentCheckedTypeVal> y_CheckDetails_ToroidalSegmentCheckedType_0
%type <TorusCheckedTypeVal>           y_CheckDetails_TorusCheckedType_0
%type <CheckStatusEnumTypeVal>        y_CheckStatusEnumType
%type <CircleCheckedFeatureTypeVal>   y_Checked_CircleCheckedFeatureType
%type <CircularArcCheckedFeatureTypeVal> y_Checked_CircularArcCheckedFeatureType
%type <ConeCheckedFeatureTypeVal>     y_Checked_ConeCheckedFeatureType
%type <ConicalSegmentCheckedFeatureTypeVal> y_Checked_ConicalSegmentCheckedFeatureType
%type <CylinderCheckedFeatureTypeVal> y_Checked_CylinderCheckedFeatureType
%type <CylindricalSegmentCheckedFeatureTypeVal> y_Checked_CylindricalSegmentCheckedFeatureType
%type <EdgePointCheckedFeatureTypeVal> y_Checked_EdgePointCheckedFeatureType
%type <EllipseCheckedFeatureTypeVal>  y_Checked_EllipseCheckedFeatureType
%type <EllipticalArcCheckedFeatureTypeVal> y_Checked_EllipticalArcCheckedFeatureType
%type <ElongatedCircleCheckedFeatureTypeVal> y_Checked_ElongatedCircleCheckedFeatureType
%type <ElongatedCylinderCheckedFeatureTypeVal> y_Checked_ElongatedCylinderCheckedFeatureType
%type <ExtrudedCrossSectionCheckedFeatureTypeVal> y_Checked_ExtrudedCrossSectionCheckedFeatureType
%type <LineCheckedFeatureTypeVal>     y_Checked_LineCheckedFeatureType
%type <OppositeAngledLinesCheckedFeatureTypeVal> y_Checked_OppositeAngledLinesCheckedFeatureType
%type <OppositeAngledPlanesCheckedFeatureTypeVal> y_Checked_OppositeAngledPlanesCheckedFeatureType
%type <OppositeParallelLinesCheckedFeatureTypeVal> y_Checked_OppositeParallelLinesCheckedFeatureType
%type <OppositeParallelPlanesCheckedFeatureTypeVal> y_Checked_OppositeParallelPlanesCheckedFeatureType
%type <OtherCurveCheckedFeatureTypeVal> y_Checked_OtherCurveCheckedFeatureType
%type <OtherShapeCheckedFeatureTypeVal> y_Checked_OtherShapeCheckedFeatureType
%type <OtherSurfaceCheckedFeatureTypeVal> y_Checked_OtherSurfaceCheckedFeatureType
%type <PlaneCheckedFeatureTypeVal>    y_Checked_PlaneCheckedFeatureType
%type <PointCheckedFeatureTypeVal>    y_Checked_PointCheckedFeatureType
%type <PointDefinedCurveCheckedFeatureTypeVal> y_Checked_PointDefinedCurveCheckedFeatureType
%type <PointDefinedSurfaceCheckedFeatureTypeVal> y_Checked_PointDefinedSurfaceCheckedFeatureType
%type <SphereCheckedFeatureTypeVal>   y_Checked_SphereCheckedFeatureType
%type <SphericalSegmentCheckedFeatureTypeVal> y_Checked_SphericalSegmentCheckedFeatureType
%type <SurfaceOfRevolutionCheckedFeatureTypeVal> y_Checked_SurfaceOfRevolutionCheckedFeatureType
%type <ThreadedFeatureCheckedFeatureTypeVal> y_Checked_ThreadedFeatureCheckedFeatureType
%type <ToroidalSegmentCheckedFeatureTypeVal> y_Checked_ToroidalSegmentCheckedFeatureType
%type <TorusCheckedFeatureTypeVal>    y_Checked_TorusCheckedFeatureType
%type <XmlBooleanVal>                 y_ChecksApproved_XmlBoolean
%type <XmlBooleanVal>                 y_ChecksPerformed_XmlBoolean
%type <ChordCharacteristicDefinitionTypeVal> y_ChordCharacteristicDefinitionType
%type <ChordCharacteristicDefinitionTypeVal> y_ChordCharacteristicDefinition_ChordCharacteristicDefinitionType
%type <ChordCharacteristicItemTypeVal> y_ChordCharacteristicItemType
%type <ChordCharacteristicItemTypeVal> y_ChordCharacteristicItem_ChordCharacteristicItemType
%type <ChordCharacteristicMeasurementTypeVal> y_ChordCharacteristicMeasurementType
%type <ChordCharacteristicMeasurementTypeVal> y_ChordCharacteristicMeasurement_ChordCharacteristicMeasurementType
%type <ChordCharacteristicNominalTypeVal> y_ChordCharacteristicNominalType
%type <ChordCharacteristicNominalTypeVal> y_ChordCharacteristicNominal_ChordCharacteristicNominalType
%type <ChordCharacteristicStatsEvalTypeVal> y_ChordCharacteristicStatsEvalType
%type <ChordCharacteristicStatsEvalTypeVal> y_ChordCharacteristicStats_ChordCharacteristicStatsEvalType
%type <ArrayReferenceTypeVal>         y_ChosenResourceIds_ArrayReferenceType_0
%type <CircleBestFitTypeVal>          y_CircleBestFitType
%type <CircleCastTypeVal>             y_CircleCastType
%type <Point2dSimpleTypeVal>          y_CircleCenter_Point2dSimpleType
%type <CircleCheckedFeatureTypeVal>   y_CircleCheckedFeatureType
%type <CircleCheckedTypeVal>          y_CircleCheckedType
%type <CircleCheckedTypeChoicePairVal> y_CircleCheckedTypeChoicePair
%type <CircleConstructionMethodTypeVal> y_CircleConstructionMethodType
%type <CircleConstructionMethodTypeChoicePairVal> y_CircleConstructionMethodTypeChoicePair
%type <CircleCopyTypeVal>             y_CircleCopyType
%type <CircleFeatureDefinitionTypeVal> y_CircleFeatureDefinitionType
%type <CircleFeatureDefinitionTypeVal> y_CircleFeatureDefinition_CircleFeatureDefinitionType
%type <CircleFeatureItemTypeVal>      y_CircleFeatureItemType
%type <CircleFeatureItemTypeVal>      y_CircleFeatureItem_CircleFeatureItemType
%type <CircleFeatureMeasurementTypeVal> y_CircleFeatureMeasurementType
%type <CircleFeatureMeasurementTypeVal> y_CircleFeatureMeasurement_CircleFeatureMeasurementType
%type <CircleFeatureNominalTypeVal>   y_CircleFeatureNominalType
%type <CircleFeatureNominalTypeVal>   y_CircleFeatureNominal_CircleFeatureNominalType
%type <CircleFromConeT_1092_TypeVal>  y_CircleFromConeT_1092_CircleFromConeT_1092_Type
%type <CircleFromConeT_1092_TypeVal>  y_CircleFromConeT_1092_Type
%type <CircleFromConeT_1092_TypeChoicePairVal> y_CircleFromConeT_1092_TypeChoicePair
%type <CircleFromConeTypeVal>         y_CircleFromConeType
%type <CircleFromScanTypeVal>         y_CircleFromScanType
%type <CircleIntersectionTypeVal>     y_CircleIntersectionType
%type <CircleMeasurementDeterminationTypeVal> y_CircleMeasurementDeterminationType
%type <CircleMeasurementDeterminationTypeChoicePairVal> y_CircleMeasurementDeterminationTypeChoicePair
%type <CirclePointSamplingStrategyTypeVal> y_CirclePointSamplingStrategyType
%type <CirclePointSamplingStrategyTypeChoicePairVal> y_CirclePointSamplingStrategyTypeChoicePair
%type <CircleProjectionTypeVal>       y_CircleProjectionType
%type <DoublePositiveTypeVal>         y_CircleRadius_DoublePositiveType
%type <CircleRecompTypeVal>           y_CircleRecompType
%type <CircleTangentThroughTypeVal>   y_CircleTangentThroughType
%type <CircleTangentTypeVal>          y_CircleTangentType
%type <CircleTransformTypeVal>        y_CircleTransformType
%type <CircleTypeVal>                 y_CircleType
%type <CircleTypeVal>                 y_Circle_CircleType
%type <CircularArcBestFitTypeVal>     y_CircularArcBestFitType
%type <CircularArcCastTypeVal>        y_CircularArcCastType
%type <CircularArcCheckedFeatureTypeVal> y_CircularArcCheckedFeatureType
%type <CircularArcCheckedTypeVal>     y_CircularArcCheckedType
%type <CircularArcCheckedTypeChoicePairVal> y_CircularArcCheckedTypeChoicePair
%type <CircularArcConstructionMethodTypeVal> y_CircularArcConstructionMethodType
%type <CircularArcConstructionMethodTypeChoicePairVal> y_CircularArcConstructionMethodTypeChoicePair
%type <CircularArcCopyTypeVal>        y_CircularArcCopyType
%type <CircularArcExtractTypeVal>     y_CircularArcExtractType
%type <CircularArcFeatureDefinitionTypeVal> y_CircularArcFeatureDefinitionType
%type <CircularArcFeatureDefinitionTypeVal> y_CircularArcFeatureDefinition_CircularArcFeatureDefinitionType
%type <CircularArcFeatureItemTypeVal> y_CircularArcFeatureItemType
%type <CircularArcFeatureItemTypeVal> y_CircularArcFeatureItem_CircularArcFeatureItemType
%type <CircularArcFeatureMeasurementTypeVal> y_CircularArcFeatureMeasurementType
%type <CircularArcFeatureMeasurementTypeVal> y_CircularArcFeatureMeasurement_CircularArcFeatureMeasurementType
%type <CircularArcFeatureNominalTypeVal> y_CircularArcFeatureNominalType
%type <CircularArcFeatureNominalTypeVal> y_CircularArcFeatureNominal_CircularArcFeatureNominalType
%type <CircularArcFromScanTypeVal>    y_CircularArcFromScanType
%type <CircularArcIntersectionTypeVal> y_CircularArcIntersectionType
%type <CircularArcMeasurementDeterminationTypeVal> y_CircularArcMeasurementDeterminationType
%type <CircularArcMeasurementDeterminationTypeChoicePairVal> y_CircularArcMeasurementDeterminationTypeChoicePair
%type <CircularArcPointSamplingStrategyTypeVal> y_CircularArcPointSamplingStrategyType
%type <CircularArcPointSamplingStrategyTypeChoicePairVal> y_CircularArcPointSamplingStrategyTypeChoicePair
%type <CircularArcProjectionTypeVal>  y_CircularArcProjectionType
%type <CircularArcRecompTypeVal>      y_CircularArcRecompType
%type <CircularArcTransformTypeVal>   y_CircularArcTransformType
%type <CircularRunoutCharacteristicDefinitionTypeVal> y_CircularRunoutCharacteristicDefinitionType
%type <CircularRunoutCharacteristicDefinitionTypeVal> y_CircularRunoutCharacteristicDefinition_CircularRunoutCharacteristicDefinitionType
%type <CircularRunoutCharacteristicItemTypeVal> y_CircularRunoutCharacteristicItemType
%type <CircularRunoutCharacteristicItemTypeVal> y_CircularRunoutCharacteristicItem_CircularRunoutCharacteristicItemType
%type <CircularRunoutCharacteristicMeasurementTypeVal> y_CircularRunoutCharacteristicMeasurementType
%type <CircularRunoutCharacteristicMeasurementTypeVal> y_CircularRunoutCharacteristicMeasurement_CircularRunoutCharacteristicMeasurementType
%type <CircularRunoutCharacteristicNominalTypeVal> y_CircularRunoutCharacteristicNominalType
%type <CircularRunoutCharacteristicNominalTypeVal> y_CircularRunoutCharacteristicNominal_CircularRunoutCharacteristicNominalType
%type <CircularRunoutCharacteristicStatsEvalTypeVal> y_CircularRunoutCharacteristicStatsEvalType
%type <CircularRunoutCharacteristicStatsEvalTypeVal> y_CircularRunoutCharacteristicStats_CircularRunoutCharacteristicStatsEvalType
%type <LinearValueTypeVal>            y_CircularUnitAreaDiameter_LinearValueType
%type <CircularUnitAreaTypeVal>       y_CircularUnitAreaType
%type <CircularUnitAreaTypeVal>       y_CircularUnitArea_CircularUnitAreaType
%type <CircularityChar_1048_TypeVal>  y_CircularityChar_1048_CircularityChar_1048_Type
%type <CircularityChar_1048_TypeVal>  y_CircularityChar_1048_Type
%type <CircularityChar_1048_TypeChoicePairVal> y_CircularityChar_1048_TypeChoicePair
%type <CircularityChar_1049_TypeVal>  y_CircularityChar_1049_CircularityChar_1049_Type_0
%type <CircularityChar_1049_TypeVal>  y_CircularityChar_1049_Type
%type <CircularityChar_1081_TypeVal>  y_CircularityChar_1081_CircularityChar_1081_Type
%type <CircularityChar_1081_TypeVal>  y_CircularityChar_1081_Type
%type <CircularityChar_1082_TypeVal>  y_CircularityChar_1082_CircularityChar_1082_Type
%type <CircularityChar_1082_TypeVal>  y_CircularityChar_1082_Type
%type <CircularityChar_1082_TypeChoicePairVal> y_CircularityChar_1082_TypeChoicePair
%type <CircularityChar_1090_TypeVal>  y_CircularityChar_1090_CircularityChar_1090_Type_0
%type <CircularityChar_1090_TypeVal>  y_CircularityChar_1090_Type
%type <CircularityChar_1090_TypeChoicePairVal> y_CircularityChar_1090_TypeChoicePair
%type <CircularityCharacteristicDefinitionTypeVal> y_CircularityCharacteristicDefinitionType
%type <CircularityCharacteristicDefinitionTypeVal> y_CircularityCharacteristicDefinition_CircularityCharacteristicDefinitionType
%type <CircularityCharacteristicItemTypeVal> y_CircularityCharacteristicItemType
%type <CircularityCharacteristicItemTypeVal> y_CircularityCharacteristicItem_CircularityCharacteristicItemType
%type <CircularityCharacteristicMeasurementTypeVal> y_CircularityCharacteristicMeasurementType
%type <CircularityCharacteristicMeasurementTypeVal> y_CircularityCharacteristicMeasurement_CircularityCharacteristicMeasurementType
%type <CircularityCharacteristicNominalTypeVal> y_CircularityCharacteristicNominalType
%type <CircularityCharacteristicNominalTypeVal> y_CircularityCharacteristicNominal_CircularityCharacteristicNominalType
%type <CircularityCharacteristicStatsEvalTypeVal> y_CircularityCharacteristicStatsEvalType
%type <CircularityCharacteristicStatsEvalTypeVal> y_CircularityCharacteristicStats_CircularityCharacteristicStatsEvalType
%type <ClosedCurvePointSamplingStrategyEnumTypeVal> y_ClosedCurvePointSamplingStrategyEnumType
%type <ClosedShellSetTypeVal>         y_ClosedShellSetType
%type <ClosedShellSetWorkingVolumeTypeVal> y_ClosedShellSetWorkingVolumeType
%type <ClosedShellSetWorkingVolumeTypeVal> y_ClosedShellSetWorkingVolume_ClosedShellSetWorkingVolumeType
%type <InternalExternalEnumTypeVal>   y_ClosedSurface_InternalExternalEnumType
%type <StatsMeasuredDecimalTypeVal>   y_Cm_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_Cmk_StatsMeasuredDecimalType
%type <CoEdgeMeshTypeVal>             y_CoEdgeMeshType
%type <CoEdgeMeshTypeVal>             y_CoEdgeMesh_CoEdgeMeshType
%type <CoEdgeTypeVal>                 y_CoEdgeType
%type <CoEdgeTypeVal>                 y_CoEdge_CoEdgeType
%type <CoEdgesMeshTypeVal>            y_CoEdgesMeshType
%type <CoEdgesMeshTypeVal>            y_CoEdgesMesh_CoEdgesMeshType
%type <CoEdgesTypeVal>                y_CoEdgesType
%type <CoEdgesTypeVal>                y_CoEdges_CoEdgesType
%type <CoaxialityCharacteristicDefinitionTypeVal> y_CoaxialityCharacteristicDefinitionType
%type <CoaxialityCharacteristicDefinitionTypeVal> y_CoaxialityCharacteristicDefinition_CoaxialityCharacteristicDefinitionType
%type <CoaxialityCharacteristicItemTypeVal> y_CoaxialityCharacteristicItemType
%type <CoaxialityCharacteristicItemTypeVal> y_CoaxialityCharacteristicItem_CoaxialityCharacteristicItemType
%type <CoaxialityCharacteristicMeasurementTypeVal> y_CoaxialityCharacteristicMeasurementType
%type <CoaxialityCharacteristicMeasurementTypeVal> y_CoaxialityCharacteristicMeasurement_CoaxialityCharacteristicMeasurementType
%type <CoaxialityCharacteristicNominalTypeVal> y_CoaxialityCharacteristicNominalType
%type <CoaxialityCharacteristicNominalTypeVal> y_CoaxialityCharacteristicNominal_CoaxialityCharacteristicNominalType
%type <CoaxialityCharacteristicStatsEvalTypeVal> y_CoaxialityCharacteristicStatsEvalType
%type <CoaxialityCharacteristicStatsEvalTypeVal> y_CoaxialityCharacteristicStats_CoaxialityCharacteristicStatsEvalType
%type <CoaxialityDiametricalZoneTypeVal> y_CoaxialityDiametricalZoneType
%type <CoaxialityNonDiametricalZoneTypeVal> y_CoaxialityNonDiametricalZoneType
%type <CoaxialityZoneShapeTypeVal>    y_CoaxialityZoneShapeType
%type <CoaxialityZoneShapeTypeChoicePairVal> y_CoaxialityZoneShapeTypeChoicePair
%type <ArrayPoint2dTypeVal>           y_Coefficients_ArrayPoint2dType
%type <ArrayPointTypeVal>             y_Coefficients_ArrayPointType
%type <ModifyingPlaneEnumTypeVal>     y_CollectionPlaneEnum_ModifyingPlaneEnumType
%type <CollectionPlaneTypeVal>        y_CollectionPlaneType
%type <CollectionPlaneTypeVal>        y_CollectionPlane_CollectionPlaneType_0
%type <ColorTypeVal>                  y_ColorType
%type <ColorTypeVal>                  y_Color_ColorType_0
%type <ListIntTypeVal>                y_Colors_ListIntType
%type <AngularValueTypeVal>           y_CombinedAzimuthalResolution_AngularValueType
%type <LinearValueTypeVal>            y_CombinedCartesianResolution_LinearValueType
%type <AngularValueTypeVal>           y_CombinedPolarResolution_AngularValueType
%type <LinearValueTypeVal>            y_CombinedRadialResolution_LinearValueType
%type <CombinedSphericalResolutionTypeVal> y_CombinedSphericalResolutionType
%type <CombinedSphericalResolutionTypeVal> y_CombinedSphericalResolution_CombinedSphericalResolutionType
%type <CombinedUserDefinedResolutionTypeVal> y_CombinedUserDefinedResolutionType
%type <CombinedUserDefinedResolutionTypeVal> y_CombinedUserDefinedResolution_CombinedUserDefinedResolutionType
%type <QIFReferenceFullTypeVal>       y_CommonCoordinateSystemId_QIFReferenceFullType_0
%type <CommonFileSpecEnumTypeVal>     y_CommonFileSpecEnumType
%type <CommonFileSpecEnumTypeVal>     y_CommonFileSpecEnum_CommonFileSpecEnumType
%type <StatsWithReferenceBaseTypeVal> y_CommonStatsValue_substituteType
%type <XmlBooleanVal>                 y_CommonTolerance_XmlBoolean_0
%type <XmlBooleanVal>                 y_CommonZone_XmlBoolean_0
%type <ArithmeticComparisonEnumTypeVal> y_Comparison_ArithmeticComparisonEnumType
%type <XmlBooleanVal>                 y_Compensated_XmlBoolean
%type <ListBooleanTypeVal>            y_Compensations_ListBooleanType
%type <ComplexTactileProbeSensorTypeVal> y_ComplexTactileProbeSensorType
%type <ComplexTactileProbeSensorTypeVal> y_ComplexTactileProbeSensor_ComplexTactileProbeSensorType
%type <ArrayReferenceFullTypeVal>     y_ComponentIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_ComponentIds_ArrayReferenceType
%type <ArrayReferenceTypeVal>         y_ComponentIds_ArrayReferenceType_0
%type <ComponentSetTypeVal>           y_ComponentSetType
%type <ComponentSetTypeVal>           y_ComponentSet_ComponentSetType_0
%type <ComponentTypeVal>              y_ComponentType
%type <ComponentType_1237_TypeVal>    y_ComponentType_1237_ComponentType_1237_Type
%type <ComponentType_1237_TypeVal>    y_ComponentType_1237_Type
%type <ComponentType_1237_TypeChoicePairVal> y_ComponentType_1237_TypeChoicePair
%type <ComponentTypeVal>              y_Component_ComponentType
%type <CompositeSegmentLowerLevelEnumTypeVal> y_CompositeLevel_CompositeSegmentLowerLevelEnumType_0
%type <CompositeSegmentLowerLevelEnumTypeVal> y_CompositeSegmentLowerLevelEnumType
%type <CompositeSegmentPositionDefinitionTypeVal> y_CompositeSegmentPositionDefinitionType
%type <CompositeSegmentPositionMeasurementTypeVal> y_CompositeSegmentPositionMeasurementType
%type <CompositeSegmentPositionStatsEvalTypeVal> y_CompositeSegmentPositionStatsEvalType
%type <CompositeSegmentProfileDefinitionTypeVal> y_CompositeSegmentProfileDefinitionType
%type <CompositeSegmentProfileMeasurementTypeVal> y_CompositeSegmentProfileMeasurementType
%type <CompositeSegmentProfileStatsEvalTypeVal> y_CompositeSegmentProfileStatsEvalType
%type <CompositeSegmentSymmetryDefinitionTypeVal> y_CompositeSegmentSymmetryDefinitionType
%type <CompositeSegmentSymmetryMeasurementTypeVal> y_CompositeSegmentSymmetryMeasurementType
%type <CompositeSegmentSymmetryStatsEvalTypeVal> y_CompositeSegmentSymmetryStatsEvalType
%type <CompositeSegmentsPositionStatsEvalTypeVal> y_CompositeSegmentsPositionStatsEvalType
%type <CompositeSegmentsProfileStatsEvalTypeVal> y_CompositeSegmentsProfileStatsEvalType
%type <CompositeSegmentsPositionStatsEvalTypeVal> y_CompositeSegmentsStats_CompositeSegmentsPositionStatsEvalType_0
%type <CompositeSegmentsProfileStatsEvalTypeVal> y_CompositeSegmentsStats_CompositeSegmentsProfileStatsEvalType_0
%type <CompositeSegmentsSymmetryStatsEvalTypeVal> y_CompositeSegmentsStats_CompositeSegmentsSymmetryStatsEvalType_0
%type <CompositeSegmentsSymmetryStatsEvalTypeVal> y_CompositeSegmentsSymmetryStatsEvalType
%type <CompoundDatumTypeVal>          y_CompoundDatumType
%type <CompoundDatumTypeVal>          y_CompoundDatum_CompoundDatumType
%type <XmlDoubleVal>                  y_CompressiveYieldStress_XmlDouble_0
%type <ComputedTomographyMeasureFeatureMethodTypeVal> y_ComputedTomographyMeasureFeatureMethodType
%type <ComputedTomographyMeasureFeatureMethodTypeVal> y_ComputedTomographyMeasureFeatureMethod_ComputedTomographyMeasureFeatureMethodType
%type <ComputedTomographyTypeVal>     y_ComputedTomographyType
%type <ComputedTomographyTypeVal>     y_ComputedTomography_ComputedTomographyType
%type <ConcentricityCharacteristicDefinitionTypeVal> y_ConcentricityCharacteristicDefinitionType
%type <ConcentricityCharacteristicDefinitionTypeVal> y_ConcentricityCharacteristicDefinition_ConcentricityCharacteristicDefinitionType
%type <ConcentricityCharacteristicItemTypeVal> y_ConcentricityCharacteristicItemType
%type <ConcentricityCharacteristicItemTypeVal> y_ConcentricityCharacteristicItem_ConcentricityCharacteristicItemType
%type <ConcentricityCharacteristicMeasurementTypeVal> y_ConcentricityCharacteristicMeasurementType
%type <ConcentricityCharacteristicMeasurementTypeVal> y_ConcentricityCharacteristicMeasurement_ConcentricityCharacteristicMeasurementType
%type <ConcentricityCharacteristicNominalTypeVal> y_ConcentricityCharacteristicNominalType
%type <ConcentricityCharacteristicNominalTypeVal> y_ConcentricityCharacteristicNominal_ConcentricityCharacteristicNominalType
%type <ConcentricityCharacteristicStatsEvalTypeVal> y_ConcentricityCharacteristicStatsEvalType
%type <ConcentricityCharacteristicStatsEvalTypeVal> y_ConcentricityCharacteristicStats_ConcentricityCharacteristicStatsEvalType
%type <ConcentricityDiametricalZoneTypeVal> y_ConcentricityDiametricalZoneType
%type <ConcentricityNonDiametricalZoneTypeVal> y_ConcentricityNonDiametricalZoneType
%type <ConcentricitySphericalZoneTypeVal> y_ConcentricitySphericalZoneType
%type <ConcentricityZoneShapeTypeVal> y_ConcentricityZoneShapeType
%type <ConcentricityZoneShapeTypeChoicePairVal> y_ConcentricityZoneShapeTypeChoicePair
%type <Cone23CoreTypeVal>             y_Cone23CoreType
%type <Cone23CoreTypeVal>             y_Cone23Core_Cone23CoreType
%type <Cone23TypeVal>                 y_Cone23Type
%type <Cone23TypeVal>                 y_Cone23_Cone23Type
%type <ConeBestFitTypeVal>            y_ConeBestFitType
%type <ConeCastTypeVal>               y_ConeCastType
%type <ConeCheckedFeatureTypeVal>     y_ConeCheckedFeatureType
%type <ConeCheckedTypeVal>            y_ConeCheckedType
%type <ConeCheckedTypeChoicePairVal>  y_ConeCheckedTypeChoicePair
%type <ConeConstructionMethodTypeVal> y_ConeConstructionMethodType
%type <ConeConstructionMethodTypeChoicePairVal> y_ConeConstructionMethodTypeChoicePair
%type <ConeCopyTypeVal>               y_ConeCopyType
%type <ConeFeatureDefi_1093_TypeVal>  y_ConeFeatureDefi_1093_ConeFeatureDefi_1093_Type
%type <ConeFeatureDefi_1093_TypeVal>  y_ConeFeatureDefi_1093_Type
%type <ConeFeatureDefi_1093_TypeChoicePairVal> y_ConeFeatureDefi_1093_TypeChoicePair
%type <ConeFeatureDefi_1094_TypeVal>  y_ConeFeatureDefi_1094_ConeFeatureDefi_1094_Type_0
%type <ConeFeatureDefi_1094_TypeVal>  y_ConeFeatureDefi_1094_Type
%type <ConeFeatureDefinitionTypeVal>  y_ConeFeatureDefinitionType
%type <ConeFeatureDefinitionTypeVal>  y_ConeFeatureDefinition_ConeFeatureDefinitionType
%type <ConeFeatureItemTypeVal>        y_ConeFeatureItemType
%type <ConeFeatureItemTypeVal>        y_ConeFeatureItem_ConeFeatureItemType
%type <ConeFeatureMeas_1095_TypeVal>  y_ConeFeatureMeas_1095_ConeFeatureMeas_1095_Type_0
%type <ConeFeatureMeas_1095_TypeVal>  y_ConeFeatureMeas_1095_Type
%type <ConeFeatureMeas_1095_TypeChoicePairVal> y_ConeFeatureMeas_1095_TypeChoicePair
%type <ConeFeatureMeasurementTypeVal> y_ConeFeatureMeasurementType
%type <ConeFeatureMeasurementTypeVal> y_ConeFeatureMeasurement_ConeFeatureMeasurementType
%type <ConeFeatureNominalTypeVal>     y_ConeFeatureNominalType
%type <ConeFeatureNominalTypeVal>     y_ConeFeatureNominal_ConeFeatureNominalType
%type <ConeFromScanTypeVal>           y_ConeFromScanType
%type <ConeMeasurementDeterminationTypeVal> y_ConeMeasurementDeterminationType
%type <ConeMeasurementDeterminationTypeChoicePairVal> y_ConeMeasurementDeterminationTypeChoicePair
%type <ConePointSamplingStrategyEnumTypeVal> y_ConePointSamplingStrategyEnumType
%type <ConePointSamplingStrategyTypeVal> y_ConePointSamplingStrategyType
%type <ConePointSamplingStrategyTypeChoicePairVal> y_ConePointSamplingStrategyTypeChoicePair
%type <ConeRecompTypeVal>             y_ConeRecompType
%type <ConeTransformTypeVal>          y_ConeTransformType
%type <ConfocalChromaticSensorTypeVal> y_ConfocalChromaticSensorType
%type <ConfocalChromaticSensorTypeVal> y_ConfocalChromaticSensor_ConfocalChromaticSensorType
%type <ConicalSegmentBestFitTypeVal>  y_ConicalSegmentBestFitType
%type <ConicalSegmentCastTypeVal>     y_ConicalSegmentCastType
%type <ConicalSegmentCheckedFeatureTypeVal> y_ConicalSegmentCheckedFeatureType
%type <ConicalSegmentCheckedTypeVal>  y_ConicalSegmentCheckedType
%type <ConicalSegmentCheckedTypeChoicePairVal> y_ConicalSegmentCheckedTypeChoicePair
%type <ConicalSegmentConstructionMethodTypeVal> y_ConicalSegmentConstructionMethodType
%type <ConicalSegmentConstructionMethodTypeChoicePairVal> y_ConicalSegmentConstructionMethodTypeChoicePair
%type <ConicalSegmentCopyTypeVal>     y_ConicalSegmentCopyType
%type <ConicalSegmentF_1096_TypeVal>  y_ConicalSegmentF_1096_ConicalSegmentF_1096_Type
%type <ConicalSegmentF_1096_TypeVal>  y_ConicalSegmentF_1096_Type
%type <ConicalSegmentF_1096_TypeChoicePairVal> y_ConicalSegmentF_1096_TypeChoicePair
%type <ConicalSegmentF_1097_TypeVal>  y_ConicalSegmentF_1097_ConicalSegmentF_1097_Type_0
%type <ConicalSegmentF_1097_TypeVal>  y_ConicalSegmentF_1097_Type
%type <ConicalSegmentF_1098_TypeVal>  y_ConicalSegmentF_1098_ConicalSegmentF_1098_Type_0
%type <ConicalSegmentF_1098_TypeVal>  y_ConicalSegmentF_1098_Type
%type <ConicalSegmentF_1098_TypeChoicePairVal> y_ConicalSegmentF_1098_TypeChoicePair
%type <ConicalSegmentFeatureDefinitionTypeVal> y_ConicalSegmentFeatureDefinitionType
%type <ConicalSegmentFeatureDefinitionTypeVal> y_ConicalSegmentFeatureDefinition_ConicalSegmentFeatureDefinitionType
%type <ConicalSegmentFeatureItemTypeVal> y_ConicalSegmentFeatureItemType
%type <ConicalSegmentFeatureItemTypeVal> y_ConicalSegmentFeatureItem_ConicalSegmentFeatureItemType
%type <ConicalSegmentFeatureMeasurementTypeVal> y_ConicalSegmentFeatureMeasurementType
%type <ConicalSegmentFeatureMeasurementTypeVal> y_ConicalSegmentFeatureMeasurement_ConicalSegmentFeatureMeasurementType
%type <ConicalSegmentFeatureNominalTypeVal> y_ConicalSegmentFeatureNominalType
%type <ConicalSegmentFeatureNominalTypeVal> y_ConicalSegmentFeatureNominal_ConicalSegmentFeatureNominalType
%type <ConicalSegmentMeasurementDeterminationTypeVal> y_ConicalSegmentMeasurementDeterminationType
%type <ConicalSegmentMeasurementDeterminationTypeChoicePairVal> y_ConicalSegmentMeasurementDeterminationTypeChoicePair
%type <ConicalSegmentPointSamplingStrategyTypeVal> y_ConicalSegmentPointSamplingStrategyType
%type <ConicalSegmentPointSamplingStrategyTypeChoicePairVal> y_ConicalSegmentPointSamplingStrategyTypeChoicePair
%type <ConicalSegmentRecompTypeVal>   y_ConicalSegmentRecompType
%type <ConicalSegmentTransformTypeVal> y_ConicalSegmentTransformType
%type <ConicalTaperCharacteristicDefinitionTypeVal> y_ConicalTaperCharacteristicDefinitionType
%type <ConicalTaperCharacteristicDefinitionTypeVal> y_ConicalTaperCharacteristicDefinition_ConicalTaperCharacteristicDefinitionType
%type <ConicalTaperCharacteristicItemTypeVal> y_ConicalTaperCharacteristicItemType
%type <ConicalTaperCharacteristicItemTypeVal> y_ConicalTaperCharacteristicItem_ConicalTaperCharacteristicItemType
%type <ConicalTaperCharacteristicMeasurementTypeVal> y_ConicalTaperCharacteristicMeasurementType
%type <ConicalTaperCharacteristicMeasurementTypeVal> y_ConicalTaperCharacteristicMeasurement_ConicalTaperCharacteristicMeasurementType
%type <ConicalTaperCharacteristicNominalTypeVal> y_ConicalTaperCharacteristicNominalType
%type <ConicalTaperCharacteristicNominalTypeVal> y_ConicalTaperCharacteristicNominal_ConicalTaperCharacteristicNominalType
%type <ConicalTaperCharacteristicStatsEvalTypeVal> y_ConicalTaperCharacteristicStatsEvalType
%type <ConicalTaperCharacteristicStatsEvalTypeVal> y_ConicalTaperCharacteristicStats_ConicalTaperCharacteristicStatsEvalType
%type <ConicityCharacteristicDefinitionTypeVal> y_ConicityCharacteristicDefinitionType
%type <ConicityCharacteristicDefinitionTypeVal> y_ConicityCharacteristicDefinition_ConicityCharacteristicDefinitionType
%type <ConicityCharacteristicItemTypeVal> y_ConicityCharacteristicItemType
%type <ConicityCharacteristicItemTypeVal> y_ConicityCharacteristicItem_ConicityCharacteristicItemType
%type <ConicityCharacteristicMeasurementTypeVal> y_ConicityCharacteristicMeasurementType
%type <ConicityCharacteristicMeasurementTypeVal> y_ConicityCharacteristicMeasurement_ConicityCharacteristicMeasurementType
%type <ConicityCharacteristicNominalTypeVal> y_ConicityCharacteristicNominalType
%type <ConicityCharacteristicNominalTypeVal> y_ConicityCharacteristicNominal_ConicityCharacteristicNominalType
%type <ConicityCharacteristicStatsEvalTypeVal> y_ConicityCharacteristicStatsEvalType
%type <ConicityCharacteristicStatsEvalTypeVal> y_ConicityCharacteristicStats_ConicityCharacteristicStatsEvalType
%type <ConstantIsTypeVal>             y_ConstantIsType
%type <ConstantIsTypeVal>             y_ConstantIs_ConstantIsType
%type <XmlBooleanVal>                 y_ConstrainOrientation_XmlBoolean_0
%type <XmlBooleanVal>                 y_ConstrainSubsequent_XmlBoolean_0
%type <CircleConstructionMethodTypeVal> y_Constructed_CircleConstructionMethodType
%type <CircleConstructionMethodTypeVal> y_Constructed_CircleConstructionMethodType_0
%type <CircularArcConstructionMethodTypeVal> y_Constructed_CircularArcConstructionMethodType
%type <CircularArcConstructionMethodTypeVal> y_Constructed_CircularArcConstructionMethodType_0
%type <ConeConstructionMethodTypeVal> y_Constructed_ConeConstructionMethodType
%type <ConeConstructionMethodTypeVal> y_Constructed_ConeConstructionMethodType_0
%type <ConicalSegmentConstructionMethodTypeVal> y_Constructed_ConicalSegmentConstructionMethodType
%type <ConicalSegmentConstructionMethodTypeVal> y_Constructed_ConicalSegmentConstructionMethodType_0
%type <CylinderConstructionMethodTypeVal> y_Constructed_CylinderConstructionMethodType
%type <CylinderConstructionMethodTypeVal> y_Constructed_CylinderConstructionMethodType_0
%type <CylindricalSegmentConstructionMethodTypeVal> y_Constructed_CylindricalSegmentConstructionMethodType
%type <CylindricalSegmentConstructionMethodTypeVal> y_Constructed_CylindricalSegmentConstructionMethodType_0
%type <EdgePointConstructionMethodTypeVal> y_Constructed_EdgePointConstructionMethodType
%type <EdgePointConstructionMethodTypeVal> y_Constructed_EdgePointConstructionMethodType_0
%type <EllipseConstructionMethodTypeVal> y_Constructed_EllipseConstructionMethodType
%type <EllipseConstructionMethodTypeVal> y_Constructed_EllipseConstructionMethodType_0
%type <EllipticalArcConstructionMethodTypeVal> y_Constructed_EllipticalArcConstructionMethodType
%type <EllipticalArcConstructionMethodTypeVal> y_Constructed_EllipticalArcConstructionMethodType_0
%type <ElongatedCircleConstructionMethodTypeVal> y_Constructed_ElongatedCircleConstructionMethodType
%type <ElongatedCircleConstructionMethodTypeVal> y_Constructed_ElongatedCircleConstructionMethodType_0
%type <ElongatedCylinderConstructionMethodTypeVal> y_Constructed_ElongatedCylinderConstructionMethodType
%type <ElongatedCylinderConstructionMethodTypeVal> y_Constructed_ElongatedCylinderConstructionMethodType_0
%type <ExtrudedCrossSectionConstructionMethodTypeVal> y_Constructed_ExtrudedCrossSectionConstructionMethodType
%type <ExtrudedCrossSectionConstructionMethodTypeVal> y_Constructed_ExtrudedCrossSectionConstructionMethodType_0
%type <LineConstructionMethodTypeVal> y_Constructed_LineConstructionMethodType
%type <LineConstructionMethodTypeVal> y_Constructed_LineConstructionMethodType_0
%type <OppositeAngledLinesConstructionMethodTypeVal> y_Constructed_OppositeAngledLinesConstructionMethodType
%type <OppositeAngledLinesConstructionMethodTypeVal> y_Constructed_OppositeAngledLinesConstructionMethodType_0
%type <OppositeAngledPlanesConstructionMethodTypeVal> y_Constructed_OppositeAngledPlanesConstructionMethodType
%type <OppositeAngledPlanesConstructionMethodTypeVal> y_Constructed_OppositeAngledPlanesConstructionMethodType_0
%type <OppositeParallelLinesConstructionMethodTypeVal> y_Constructed_OppositeParallelLinesConstructionMethodType
%type <OppositeParallelLinesConstructionMethodTypeVal> y_Constructed_OppositeParallelLinesConstructionMethodType_0
%type <OppositeParallelPlanesConstructionMethodTypeVal> y_Constructed_OppositeParallelPlanesConstructionMethodType
%type <OppositeParallelPlanesConstructionMethodTypeVal> y_Constructed_OppositeParallelPlanesConstructionMethodType_0
%type <OtherCurveConstructionMethodTypeVal> y_Constructed_OtherCurveConstructionMethodType
%type <OtherCurveConstructionMethodTypeVal> y_Constructed_OtherCurveConstructionMethodType_0
%type <OtherShapeConstructionMethodTypeVal> y_Constructed_OtherShapeConstructionMethodType
%type <OtherShapeConstructionMethodTypeVal> y_Constructed_OtherShapeConstructionMethodType_0
%type <OtherSurfaceConstructionMethodTypeVal> y_Constructed_OtherSurfaceConstructionMethodType
%type <PlaneConstructionMethodTypeVal> y_Constructed_PlaneConstructionMethodType
%type <PlaneConstructionMethodTypeVal> y_Constructed_PlaneConstructionMethodType_0
%type <PointConstructionMethodTypeVal> y_Constructed_PointConstructionMethodType
%type <PointConstructionMethodTypeVal> y_Constructed_PointConstructionMethodType_0
%type <PointDefinedCurveConstructionMethodTypeVal> y_Constructed_PointDefinedCurveConstructionMethodType
%type <PointDefinedCurveConstructionMethodTypeVal> y_Constructed_PointDefinedCurveConstructionMethodType_0
%type <PointDefinedSurfaceConstructionMethodTypeVal> y_Constructed_PointDefinedSurfaceConstructionMethodType
%type <PointDefinedSurfaceConstructionMethodTypeVal> y_Constructed_PointDefinedSurfaceConstructionMethodType_0
%type <SphereConstructionMethodTypeVal> y_Constructed_SphereConstructionMethodType
%type <SphereConstructionMethodTypeVal> y_Constructed_SphereConstructionMethodType_0
%type <SphericalSegmentConstructionMethodTypeVal> y_Constructed_SphericalSegmentConstructionMethodType
%type <SphericalSegmentConstructionMethodTypeVal> y_Constructed_SphericalSegmentConstructionMethodType_0
%type <SurfaceOfRevolutionConstructionMethodTypeVal> y_Constructed_SurfaceOfRevolutionConstructionMethodType
%type <SurfaceOfRevolutionConstructionMethodTypeVal> y_Constructed_SurfaceOfRevolutionConstructionMethodType_0
%type <ThreadedFeatureConstructionMethodTypeVal> y_Constructed_ThreadedFeatureConstructionMethodType
%type <ThreadedFeatureConstructionMethodTypeVal> y_Constructed_ThreadedFeatureConstructionMethodType_0
%type <ToroidalSegmentConstructionMethodTypeVal> y_Constructed_ToroidalSegmentConstructionMethodType
%type <ToroidalSegmentConstructionMethodTypeVal> y_Constructed_ToroidalSegmentConstructionMethodType_0
%type <TorusConstructionMethodTypeVal> y_Constructed_TorusConstructionMethodType
%type <TorusConstructionMethodTypeVal> y_Constructed_TorusConstructionMethodType_0
%type <XmlBooleanVal>                 y_ContactingFeature_XmlBoolean_0
%type <XmlStringVal>                  y_ContourIlluminationLightSource_XmlString_0
%type <WeldContourSymbolEnumTypeVal>  y_ContourSymbol_WeldContourSymbolEnumType
%type <ControlIssueDetailsListTypeVal> y_ControlIssueDetailsListType
%type <ControlIssueDetailsListTypeVal> y_ControlIssueDetailsList_ControlIssueDetailsListType
%type <ControlIssueDetailsTypeVal>    y_ControlIssueDetailsType
%type <ControlIssueDetailsTypeVal>    y_ControlIssueDetails_ControlIssueDetailsType
%type <ControlIssueEnumTypeVal>       y_ControlIssueEnumType
%type <ControlIssueEnumTypeVal>       y_ControlIssueEnum_ControlIssueEnumType
%type <ControlIssueTypeVal>           y_ControlIssueType
%type <ControlIssueTypeChoicePairVal> y_ControlIssueTypeChoicePair
%type <ControlIssueTypeVal>           y_ControlIssue_ControlIssueType
%type <QIFReferenceTypeVal>           y_ControlMethodId_QIFReferenceType_0
%type <ControlMethodTy_1199_TypeVal>  y_ControlMethodTy_1199_ControlMethodTy_1199_Type
%type <ControlMethodTy_1199_TypeVal>  y_ControlMethodTy_1199_Type
%type <ControlMethodTy_1199_TypeChoicePairVal> y_ControlMethodTy_1199_TypeChoicePair
%type <ControlMethodTypeVal>          y_ControlMethodType
%type <ControlMethodTypeVal>          y_ControlMethod_ControlMethodType
%type <ControlMethodsTypeVal>         y_ControlMethodsType
%type <ControlMethodsTypeVal>         y_ControlMethods_ControlMethodsType
%type <XmlBooleanVal>                 y_ControlledRadius_XmlBoolean_0
%type <CoordinateEnumTypeVal>         y_CoordinateEnumType
%type <CoordinateEnumTypeVal>         y_CoordinateEnum_CoordinateEnumType
%type <CoordinateMeasureFeatureMethodTypeVal> y_CoordinateMeasureFeatureMethodType
%type <CoordinateMeasureFeatureMethodTypeVal> y_CoordinateMeasureFeatureMethod_CoordinateMeasureFeatureMethodType
%type <PositionCoordinateMethodTypeVal> y_CoordinateMethod_PositionCoordinateMethodType_0
%type <CoordinateSystemActualTransformAssociationTypeVal> y_CoordinateSystemActualTransformAssociationType
%type <CoordinateSystemActualTransformAssociationTypeVal> y_CoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType
%type <CoordinateSystemActualTransformAssociationsTypeVal> y_CoordinateSystemActualTransformAssociationsType
%type <CoordinateSystemActualTransformAssociationsTypeVal> y_CoordinateSystemActualTransformAssociations_CoordinateSystemActualTransformAssociationsType_0
%type <CoordinateSystemCoreTypeVal>   y_CoordinateSystemCoreType
%type <CoordinateSystemCoreTypeVal>   y_CoordinateSystemCore_CoordinateSystemCoreType
%type <CoordinateSystemListTypeVal>   y_CoordinateSystemDefinitions_CoordinateSystemListType
%type <QIFReferenceFullTypeVal>       y_CoordinateSystemId_QIFReferenceFullType
%type <QIFReferenceFullTypeVal>       y_CoordinateSystemId_QIFReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_CoordinateSystemIds_ArrayReferenceType_0
%type <CoordinateSystemListTypeVal>   y_CoordinateSystemListType
%type <CoordinateSystemSetTypeVal>    y_CoordinateSystemSetType
%type <CoordinateSystemSetTypeVal>    y_CoordinateSystemSet_CoordinateSystemSetType_0
%type <CoordinateSystemTypeVal>       y_CoordinateSystemType
%type <CADCoordinateSystemTypeVal>    y_CoordinateSystem_CADCoordinateSystemType
%type <CoordinateSystemTypeVal>       y_CoordinateSystem_CoordinateSystemType
%type <XmlUnsignedIntVal>             y_CoordinateSystemsCount_XmlUnsignedInt_0
%type <CoordinateSystemsTypeVal>      y_CoordinateSystemsType
%type <CoordinateSystemsTypeVal>      y_CoordinateSystems_CoordinateSystemsType_0
%type <CircleCopyTypeVal>             y_Copy_CircleCopyType
%type <CircularArcCopyTypeVal>        y_Copy_CircularArcCopyType
%type <ConeCopyTypeVal>               y_Copy_ConeCopyType
%type <ConicalSegmentCopyTypeVal>     y_Copy_ConicalSegmentCopyType
%type <CylinderCopyTypeVal>           y_Copy_CylinderCopyType
%type <CylindricalSegmentCopyTypeVal> y_Copy_CylindricalSegmentCopyType
%type <EdgePointCopyTypeVal>          y_Copy_EdgePointCopyType
%type <EllipseCopyTypeVal>            y_Copy_EllipseCopyType
%type <EllipticalArcCopyTypeVal>      y_Copy_EllipticalArcCopyType
%type <ElongatedCircleCopyTypeVal>    y_Copy_ElongatedCircleCopyType
%type <ElongatedCylinderCopyTypeVal>  y_Copy_ElongatedCylinderCopyType
%type <ExtrudedCrossSectionCopyTypeVal> y_Copy_ExtrudedCrossSectionCopyType
%type <LineCopyTypeVal>               y_Copy_LineCopyType
%type <OppositeAngledLinesCopyTypeVal> y_Copy_OppositeAngledLinesCopyType
%type <OppositeAngledPlanesCopyTypeVal> y_Copy_OppositeAngledPlanesCopyType
%type <OppositeParallelLinesCopyTypeVal> y_Copy_OppositeParallelLinesCopyType
%type <OppositeParallelPlanesCopyTypeVal> y_Copy_OppositeParallelPlanesCopyType
%type <OtherCurveFeatureCopyTypeVal>  y_Copy_OtherCurveFeatureCopyType
%type <OtherShapeFeatureCopyTypeVal>  y_Copy_OtherShapeFeatureCopyType
%type <OtherSurfaceFeatureCopyTypeVal> y_Copy_OtherSurfaceFeatureCopyType
%type <PlaneCopyTypeVal>              y_Copy_PlaneCopyType
%type <PointDefinedCurveCopyTypeVal>  y_Copy_PointDefinedCurveCopyType
%type <PointDefinedSurfaceCopyTypeVal> y_Copy_PointDefinedSurfaceCopyType
%type <PointFeatureCopyTypeVal>       y_Copy_PointFeatureCopyType
%type <SphereCopyTypeVal>             y_Copy_SphereCopyType
%type <SphericalSegmentCopyTypeVal>   y_Copy_SphericalSegmentCopyType
%type <SurfaceOfRevolutionCopyTypeVal> y_Copy_SurfaceOfRevolutionCopyType
%type <ThreadedFeatureCopyTypeVal>    y_Copy_ThreadedFeatureCopyType
%type <ToroidalSegmentCopyTypeVal>    y_Copy_ToroidalSegmentCopyType
%type <TorusCopyTypeVal>              y_Copy_TorusCopyType
%type <PointTypeVal>                  y_CornerPoint_PointType
%type <CorrectiveActio_1130_TypeVal>  y_CorrectiveActio_1130_CorrectiveActio_1130_Type
%type <CorrectiveActio_1130_TypeVal>  y_CorrectiveActio_1130_Type
%type <CorrectiveActio_1130_TypeChoicePairVal> y_CorrectiveActio_1130_TypeChoicePair
%type <ArrayReferenceTypeVal>         y_CorrectiveActionIds_ArrayReferenceType_0
%type <QIFReferenceTypeVal>           y_CorrectiveActionPlanId_QIFReferenceType_0
%type <CorrectiveActionPlanTypeVal>   y_CorrectiveActionPlanType
%type <CorrectiveActionPlanTypeVal>   y_CorrectiveActionPlan_CorrectiveActionPlanType
%type <XmlUnsignedIntVal>             y_CorrectiveActionPlansCount_XmlUnsignedInt_0
%type <CorrectiveActionPlansTypeVal>  y_CorrectiveActionPlansType
%type <CorrectiveActionPlansTypeVal>  y_CorrectiveActionPlans_CorrectiveActionPlansType_0
%type <CorrectiveActionTypeVal>       y_CorrectiveActionType
%type <CorrectiveActionTypeVal>       y_CorrectiveAction_CorrectiveActionType
%type <CorrectiveActionsTypeVal>      y_CorrectiveActionsType
%type <CorrectiveActionsTypeVal>      y_CorrectiveActions_CorrectiveActionsType
%type <XmlNonNegativeIntegerVal>      y_Count_XmlNonNegativeInteger
%type <XmlTokenVal>                   y_Country_XmlToken_0
%type <CriterionDecimalTypeVal>       y_CpThreshold_CriterionDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_Cp_StatsMeasuredDecimalType
%type <CriterionDecimalTypeVal>       y_CpkThreshold_CriterionDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_Cpk_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_Cpm_StatsMeasuredDecimalType
%type <ThreadClassTypeVal>            y_CrestDiameterToleranceClass_ThreadClassType_0
%type <CriteriaByUnitTypeVal>         y_CriteriaByUnitType
%type <CriterionAngularTypeVal>       y_CriterionAngularType
%type <CriterionAreaTypeVal>          y_CriterionAreaType
%type <CriterionDecima_1131_TypeVal>  y_CriterionDecima_1131_CriterionDecima_1131_Type_0
%type <CriterionDecima_1131_TypeVal>  y_CriterionDecima_1131_Type
%type <CriterionDecimalTypeVal>       y_CriterionDecimalType
%type <CriterionForceTypeVal>         y_CriterionForceType
%type <CriterionIntege_1132_TypeVal>  y_CriterionIntege_1132_CriterionIntege_1132_Type_0
%type <CriterionIntege_1132_TypeVal>  y_CriterionIntege_1132_Type
%type <CriterionIntegerTypeVal>       y_CriterionIntegerType
%type <CriterionLinearTypeVal>        y_CriterionLinearType
%type <CriterionMassTypeVal>          y_CriterionMassType
%type <CriterionOutOfTypeVal>         y_CriterionOutOfType
%type <CriterionPressureTypeVal>      y_CriterionPressureType
%type <CriterionSpeedTypeVal>         y_CriterionSpeedType
%type <CriterionTemperatureTypeVal>   y_CriterionTemperatureType
%type <CriterionTimeTypeVal>          y_CriterionTimeType
%type <CriterionUserDefinedUnitTypeVal> y_CriterionUserDefinedUnitType
%type <CriticalityAreaEnumTypeVal>    y_CriticalityAreaEnumType
%type <CriticalityLevelEnumTypeVal>   y_CriticalityLevelEnumType
%type <CriticalityTypeVal>            y_CriticalityType
%type <CriticalityType_1050_TypeVal>  y_CriticalityType_1050_CriticalityType_1050_Type
%type <CriticalityType_1050_TypeVal>  y_CriticalityType_1050_Type
%type <CriticalityType_1050_TypeChoicePairVal> y_CriticalityType_1050_TypeChoicePair
%type <CriticalityType_1051_TypeVal>  y_CriticalityType_1051_CriticalityType_1051_Type_0
%type <CriticalityType_1051_TypeVal>  y_CriticalityType_1051_Type
%type <CriticalityType_1051_TypeChoicePairVal> y_CriticalityType_1051_TypeChoicePair
%type <CriticalityTypeVal>            y_Criticality_CriticalityType_0
%type <ArrayReferenceFullTypeVal>     y_CrossSectionReferenceFeatureId_ArrayReferenceFullType
%type <CurveCoreBaseTypeVal>          y_Curve12Core_substituteType
%type <Curve12OrientedTypeVal>        y_Curve12OrientedType
%type <Curve12SetTypeVal>             y_Curve12SetType
%type <Curve12SetTypeVal>             y_Curve12Set_Curve12SetType_0
%type <ElementReferenceTypeVal>       y_Curve12_ElementReferenceType_0
%type <Curve12BaseTypeVal>            y_Curve12_substituteType
%type <Curve13CoreTypeVal>            y_Curve13CoreType
%type <CurveCoreBaseTypeVal>          y_Curve13Core_substituteType
%type <Curve13OrientedTypeVal>        y_Curve13OrientedType
%type <Curve13SetTypeVal>             y_Curve13SetType
%type <Curve13SetTypeVal>             y_Curve13Set_Curve13SetType_0
%type <Curve13BaseTypeVal>            y_Curve13_substituteType
%type <QIFReferenceFullTypeVal>       y_CurveFeatureNominalId_QIFReferenceFullType
%type <BaseFeatureTypeVal>            y_CurveFeature_BaseFeatureType
%type <ArrayReferenceFullTypeVal>     y_CurveIds_ArrayReferenceFullType
%type <CurveLengthCharacteristicDefinitionTypeVal> y_CurveLengthCharacteristicDefinitionType
%type <CurveLengthCharacteristicDefinitionTypeVal> y_CurveLengthCharacteristicDefinition_CurveLengthCharacteristicDefinitionType
%type <CurveLengthCharacteristicItemTypeVal> y_CurveLengthCharacteristicItemType
%type <CurveLengthCharacteristicItemTypeVal> y_CurveLengthCharacteristicItem_CurveLengthCharacteristicItemType
%type <CurveLengthCharacteristicMeasurementTypeVal> y_CurveLengthCharacteristicMeasurementType
%type <CurveLengthCharacteristicMeasurementTypeVal> y_CurveLengthCharacteristicMeasurement_CurveLengthCharacteristicMeasurementType
%type <CurveLengthCharacteristicNominalTypeVal> y_CurveLengthCharacteristicNominalType
%type <CurveLengthCharacteristicNominalTypeVal> y_CurveLengthCharacteristicNominal_CurveLengthCharacteristicNominalType
%type <CurveLengthCharacteristicStatsEvalTypeVal> y_CurveLengthCharacteristicStatsEvalType
%type <CurveLengthCharacteristicStatsEvalTypeVal> y_CurveLengthCharacteristicStats_CurveLengthCharacteristicStatsEvalType
%type <CurveMeshSetTypeVal>           y_CurveMeshSetType
%type <CurveMeshSetTypeVal>           y_CurveMeshSet_CurveMeshSetType_0
%type <ElementReferenceTypeVal>       y_CurveMesh_ElementReferenceType_0
%type <PolyLineTypeVal>               y_CurvePoints_PolyLineType
%type <Curve13CoreTypeVal>            y_Curve_Curve13CoreType
%type <ElementReferenceTypeVal>       y_Curve_ElementReferenceType
%type <XmlTokenVal>                   y_CustomerNumber_XmlToken
%type <CustomerOrganizationTypeVal>   y_CustomerOrganizationType
%type <CustomerOrganizationTypeVal>   y_CustomerOrganization_CustomerOrganizationType_0
%type <LinearValueTypeVal>            y_Cutoff_LinearValueType_0
%type <Cylinder23CoreTypeVal>         y_Cylinder23CoreType
%type <Cylinder23CoreTypeVal>         y_Cylinder23Core_Cylinder23CoreType
%type <Cylinder23TypeVal>             y_Cylinder23Type
%type <Cylinder23TypeVal>             y_Cylinder23_Cylinder23Type
%type <CylinderBestFitTypeVal>        y_CylinderBestFitType
%type <CylinderCastTypeVal>           y_CylinderCastType
%type <LinearValueTypeVal>            y_CylinderCenterToCylinderCenterAccuracy_LinearValueType_0
%type <CylinderCheckedFeatureTypeVal> y_CylinderCheckedFeatureType
%type <CylinderCheckedTypeVal>        y_CylinderCheckedType
%type <CylinderCheckedTypeChoicePairVal> y_CylinderCheckedTypeChoicePair
%type <CylinderConstructionMethodTypeVal> y_CylinderConstructionMethodType
%type <CylinderConstructionMethodTypeChoicePairVal> y_CylinderConstructionMethodTypeChoicePair
%type <CylinderCopyTypeVal>           y_CylinderCopyType
%type <CylinderFeatureDefinitionTypeVal> y_CylinderFeatureDefinitionType
%type <CylinderFeatureDefinitionTypeVal> y_CylinderFeatureDefinition_CylinderFeatureDefinitionType
%type <CylinderFeatureItemTypeVal>    y_CylinderFeatureItemType
%type <CylinderFeatureItemTypeVal>    y_CylinderFeatureItem_CylinderFeatureItemType
%type <CylinderFeatureMeasurementTypeVal> y_CylinderFeatureMeasurementType
%type <CylinderFeatureMeasurementTypeVal> y_CylinderFeatureMeasurement_CylinderFeatureMeasurementType
%type <CylinderFeatureNominalTypeVal> y_CylinderFeatureNominalType
%type <CylinderFeatureNominalTypeVal> y_CylinderFeatureNominal_CylinderFeatureNominalType
%type <CylinderFromScanTypeVal>       y_CylinderFromScanType
%type <CylinderMeasurementDeterminationTypeVal> y_CylinderMeasurementDeterminationType
%type <CylinderMeasurementDeterminationTypeChoicePairVal> y_CylinderMeasurementDeterminationTypeChoicePair
%type <CylinderPointSamplingStrategyTypeVal> y_CylinderPointSamplingStrategyType
%type <CylinderPointSamplingStrategyTypeChoicePairVal> y_CylinderPointSamplingStrategyTypeChoicePair
%type <CylinderRecompTypeVal>         y_CylinderRecompType
%type <CylinderTransformTypeVal>      y_CylinderTransformType
%type <CylinderTypeVal>               y_CylinderType
%type <CylinderTypeVal>               y_Cylinder_CylinderType
%type <CylindricalSegmentBestFitTypeVal> y_CylindricalSegmentBestFitType
%type <CylindricalSegmentCastTypeVal> y_CylindricalSegmentCastType
%type <CylindricalSegmentCheckedFeatureTypeVal> y_CylindricalSegmentCheckedFeatureType
%type <CylindricalSegmentCheckedTypeVal> y_CylindricalSegmentCheckedType
%type <CylindricalSegmentCheckedTypeChoicePairVal> y_CylindricalSegmentCheckedTypeChoicePair
%type <CylindricalSegmentConstructionMethodTypeVal> y_CylindricalSegmentConstructionMethodType
%type <CylindricalSegmentConstructionMethodTypeChoicePairVal> y_CylindricalSegmentConstructionMethodTypeChoicePair
%type <CylindricalSegmentCopyTypeVal> y_CylindricalSegmentCopyType
%type <CylindricalSegmentFeatureDefinitionTypeVal> y_CylindricalSegmentFeatureDefinitionType
%type <CylindricalSegmentFeatureDefinitionTypeVal> y_CylindricalSegmentFeatureDefinition_CylindricalSegmentFeatureDefinitionType
%type <CylindricalSegmentFeatureItemTypeVal> y_CylindricalSegmentFeatureItemType
%type <CylindricalSegmentFeatureItemTypeVal> y_CylindricalSegmentFeatureItem_CylindricalSegmentFeatureItemType
%type <CylindricalSegmentFeatureMeasurementTypeVal> y_CylindricalSegmentFeatureMeasurementType
%type <CylindricalSegmentFeatureMeasurementTypeVal> y_CylindricalSegmentFeatureMeasurement_CylindricalSegmentFeatureMeasurementType
%type <CylindricalSegmentFeatureNominalTypeVal> y_CylindricalSegmentFeatureNominalType
%type <CylindricalSegmentFeatureNominalTypeVal> y_CylindricalSegmentFeatureNominal_CylindricalSegmentFeatureNominalType
%type <CylindricalSegmentMeasurementDeterminationTypeVal> y_CylindricalSegmentMeasurementDeterminationType
%type <CylindricalSegmentMeasurementDeterminationTypeChoicePairVal> y_CylindricalSegmentMeasurementDeterminationTypeChoicePair
%type <CylindricalSegmentPointSamplingStrategyTypeVal> y_CylindricalSegmentPointSamplingStrategyType
%type <CylindricalSegmentPointSamplingStrategyTypeChoicePairVal> y_CylindricalSegmentPointSamplingStrategyTypeChoicePair
%type <CylindricalSegmentRecompTypeVal> y_CylindricalSegmentRecompType
%type <CylindricalSegmentTransformTypeVal> y_CylindricalSegmentTransformType
%type <CylindricalWorkingVolumeTypeVal> y_CylindricalWorkingVolumeType
%type <CylindricalWorkingVolumeTypeVal> y_CylindricalWorkingVolume_CylindricalWorkingVolumeType
%type <CylindricityCha_1052_TypeVal>  y_CylindricityCha_1052_CylindricityCha_1052_Type
%type <CylindricityCha_1052_TypeVal>  y_CylindricityCha_1052_Type
%type <CylindricityCha_1052_TypeChoicePairVal> y_CylindricityCha_1052_TypeChoicePair
%type <CylindricityCha_1053_TypeVal>  y_CylindricityCha_1053_CylindricityCha_1053_Type_0
%type <CylindricityCha_1053_TypeVal>  y_CylindricityCha_1053_Type
%type <CylindricityCha_1083_TypeVal>  y_CylindricityCha_1083_CylindricityCha_1083_Type
%type <CylindricityCha_1083_TypeVal>  y_CylindricityCha_1083_Type
%type <CylindricityCha_1084_TypeVal>  y_CylindricityCha_1084_CylindricityCha_1084_Type
%type <CylindricityCha_1084_TypeVal>  y_CylindricityCha_1084_Type
%type <CylindricityCha_1084_TypeChoicePairVal> y_CylindricityCha_1084_TypeChoicePair
%type <CylindricityCha_1091_TypeVal>  y_CylindricityCha_1091_CylindricityCha_1091_Type_0
%type <CylindricityCha_1091_TypeVal>  y_CylindricityCha_1091_Type
%type <CylindricityCha_1091_TypeChoicePairVal> y_CylindricityCha_1091_TypeChoicePair
%type <CylindricityCharacteristicDefinitionTypeVal> y_CylindricityCharacteristicDefinitionType
%type <CylindricityCharacteristicDefinitionTypeVal> y_CylindricityCharacteristicDefinition_CylindricityCharacteristicDefinitionType
%type <CylindricityCharacteristicItemTypeVal> y_CylindricityCharacteristicItemType
%type <CylindricityCharacteristicItemTypeVal> y_CylindricityCharacteristicItem_CylindricityCharacteristicItemType
%type <CylindricityCharacteristicMeasurementTypeVal> y_CylindricityCharacteristicMeasurementType
%type <CylindricityCharacteristicMeasurementTypeVal> y_CylindricityCharacteristicMeasurement_CylindricityCharacteristicMeasurementType
%type <CylindricityCharacteristicNominalTypeVal> y_CylindricityCharacteristicNominalType
%type <CylindricityCharacteristicNominalTypeVal> y_CylindricityCharacteristicNominal_CylindricityCharacteristicNominalType
%type <CylindricityCharacteristicStatsEvalTypeVal> y_CylindricityCharacteristicStatsEvalType
%type <CylindricityCharacteristicStatsEvalTypeVal> y_CylindricityCharacteristicStats_CylindricityCharacteristicStatsEvalType
%type <D4TypeVal>                     y_D4Type
%type <DMEClassNameEnumTypeVal>       y_DMEClassNameEnumType
%type <DMEClassNameEnumTypeVal>       y_DMEClassNameEnum_DMEClassNameEnumType
%type <DMEClassNameEnumTypeVal>       y_DMEClassName_DMEClassNameEnumType
%type <DMEDecisionClassTypeVal>       y_DMEDecisionClassType
%type <DMEDecisionClassTypeVal>       y_DMEDecisionClass_DMEDecisionClassType
%type <DMEDecisionIdTypeVal>          y_DMEDecisionIdType
%type <DMEDecisionIdTypeVal>          y_DMEDecisionId_DMEDecisionIdType
%type <DMEDecisionMakeModelTypeVal>   y_DMEDecisionMakeModelType
%type <DMEDecisionMakeModelTypeVal>   y_DMEDecisionMakeModel_DMEDecisionMakeModelType
%type <IfThenDMERuleTypeVal>          y_DMEDecisionRule_IfThenDMERuleType
%type <DMEDecisionBaseTypeVal>        y_DMEDecision_substituteType
%type <QIFReferenceTypeVal>           y_DMEId_QIFReferenceType
%type <DMEParameterConstraintSetTypeVal> y_DMEParameterConstraintSetType
%type <DMEParameterConstraintTypeVal> y_DMEParameterConstraintType
%type <DMEParameterConstraintTypeVal> y_DMEParameterConstraint_DMEParameterConstraintType
%type <XmlUnsignedIntVal>             y_DMESelectionRulesCount_XmlUnsignedInt_0
%type <DMESelectionRulesTypeVal>      y_DMESelectionRulesType
%type <DMESelectionRulesTypeVal>      y_DMESelectionRules_DMESelectionRulesType_0
%type <ArrayReferenceTypeVal>         y_DMESoftware_ArrayReferenceType_0
%type <DMEThenTypeVal>                y_DMEThenType
%type <DMEThenTypeVal>                y_DMEThen_DMEThenType
%type <QIFReferenceTypeVal>           y_DRFTransformActualId_QIFReferenceType_0
%type <DifferentialVariableReluctanceTransducerSensorTypeVal> y_DVRTSensor_DifferentialVariableReluctanceTransducerSensorType
%type <UserDefinedUnitValueTypeVal>   y_DarkCurrent_UserDefinedUnitValueType_0
%type <XmlStringVal>                  y_Data_XmlString
%type <XmlDateTimeVal>                y_DateAndTime_XmlDateTime
%type <QIFReferenceFullTypeVal>       y_DatumDefinitionId_QIFReferenceFullType
%type <ArrayReferenceFullTypeVal>     y_DatumDefinitionIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_DatumDefinitionIds_ArrayReferenceType_0
%type <DatumDefinitionTypeVal>        y_DatumDefinitionType
%type <DatumDefinitionTypeVal>        y_DatumDefinition_DatumDefinitionType
%type <XmlUnsignedIntVal>             y_DatumDefinitionsCount_XmlUnsignedInt_0
%type <DatumDefinitionsTypeVal>       y_DatumDefinitionsType
%type <DatumDefinitionsTypeVal>       y_DatumDefinitions_DatumDefinitionsType_0
%type <DatumFeatureSimulatorModifierTypeVal> y_DatumFeatureSimulatorModifierType
%type <DatumFeatureSimulatorModifierTypeChoicePairVal> y_DatumFeatureSimulatorModifierTypeChoicePair
%type <DatumFeatureSimulatorModifierTypeVal> y_DatumFeatureSimulatorModifier_DatumFeatureSimulatorModifierType_0
%type <XmlBooleanVal>                 y_DatumFixed_XmlBoolean_0
%type <XmlNMTOKENVal>                 y_DatumLabel_XmlNMTOKEN
%type <DatumPrecedenceAlignmentOperationTypeVal> y_DatumPrecedenceAlignmentOperationType
%type <DatumPrecedenceAlignmentOperationTypeVal> y_DatumPrecedence_DatumPrecedenceAlignmentOperationType
%type <QIFReferenceFullTypeVal>       y_DatumReferenceFrameId_QIFReferenceFullType
%type <QIFReferenceFullTypeVal>       y_DatumReferenceFrameId_QIFReferenceFullType_0
%type <ArrayReferenceFullTypeVal>     y_DatumReferenceFrameIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_DatumReferenceFrameIds_ArrayReferenceType_0
%type <DatumReferenceFrameTypeVal>    y_DatumReferenceFrameType
%type <DatumReferenceFrameTypeVal>    y_DatumReferenceFrame_DatumReferenceFrameType
%type <XmlUnsignedIntVal>             y_DatumReferenceFramesCount_XmlUnsignedInt_0
%type <DatumReferenceFramesTypeVal>   y_DatumReferenceFramesType
%type <DatumReferenceFramesTypeVal>   y_DatumReferenceFrames_DatumReferenceFramesType_0
%type <ArrayReferenceFullTypeVal>     y_DatumTargetDefinitionIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_DatumTargetDefinitionIds_ArrayReferenceType_0
%type <XmlUnsignedIntVal>             y_DatumTargetDefinitionsCount_XmlUnsignedInt_0
%type <DatumTargetDefinitionsTypeVal> y_DatumTargetDefinitionsType
%type <DatumTargetDefinitionsTypeVal> y_DatumTargetDefinitions_DatumTargetDefinitionsType_0
%type <ArrayReferenceFullTypeVal>     y_DatumTargetIds_ArrayReferenceFullType_0
%type <XmlTokenVal>                   y_DatumTargetLabel_XmlToken
%type <UnitVectorTypeVal>             y_DatumTargetTranslationDirection_UnitVectorType
%type <DatumTargetTypeVal>            y_DatumTargetType
%type <DatumTargetTypeVal>            y_DatumTarget_DatumTargetType
%type <XmlBooleanVal>                 y_DatumTranslationAllowed_XmlBoolean
%type <DatumTranslationTypeVal>       y_DatumTranslationType
%type <DatumTranslationTypeVal>       y_DatumTranslation_DatumTranslationType_0
%type <DatumTypeVal>                  y_DatumType
%type <DatumWithPreced_1012_TypeVal>  y_DatumWithPreced_1012_DatumWithPreced_1012_Type
%type <DatumWithPreced_1012_TypeVal>  y_DatumWithPreced_1012_Type
%type <DatumWithPreced_1012_TypeChoicePairVal> y_DatumWithPreced_1012_TypeChoicePair
%type <DatumWithPrecedenceTypeVal>    y_DatumWithPrecedenceType
%type <DatumWithPrecedenceTypeVal>    y_Datum_DatumWithPrecedenceType
%type <SequencedDatumTypeVal>         y_Datum_SequencedDatumType
%type <StatsPassFailTypeVal>          y_DatumsOkStats_StatsPassFailType_0
%type <XmlBooleanVal>                 y_DatumsOk_XmlBoolean_0
%type <DatumsTypeVal>                 y_DatumsType
%type <DatumsTypeVal>                 y_Datums_DatumsType_0
%type <XmlStringVal>                  y_Declaration_XmlString
%type <XmlUnsignedIntVal>             y_DefaultCharacteristicDefinitionsCount_XmlUnsignedInt_0
%type <CharacteristicDefinitionsTypeVal> y_DefaultCharacteristicDefinitions_CharacteristicDefinitionsType_0
%type <XmlUnsignedIntVal>             y_DefaultToleranceDefinitionsCount_XmlUnsignedInt_0
%type <ToleranceDefinitionsTypeVal>   y_DefaultToleranceDefinitions_ToleranceDefinitionsType_0
%type <XmlBooleanVal>                 y_DefinedAsLimit_XmlBoolean
%type <DefiningPointMeasurementTypeVal> y_DefiningPointMeasurementType
%type <DefiningPointNominalTypeVal>   y_DefiningPointNominalType
%type <DefiningPointMeasurementTypeVal> y_DefiningPoint_DefiningPointMeasurementType
%type <DefiningPointNominalTypeVal>   y_DefiningPoint_DefiningPointNominalType
%type <DefiningPointsMeasurementTypeVal> y_DefiningPointsMeasurementType
%type <DefiningPointsNominalTypeVal>  y_DefiningPointsNominalType
%type <DefiningPointsMeasurementTypeVal> y_DefiningPoints_DefiningPointsMeasurementType_0
%type <DefiningPointsNominalTypeVal>  y_DefiningPoints_DefiningPointsNominalType
%type <DefinitionExternalTypeVal>     y_DefinitionExternalType
%type <DefinitionExternalTypeChoicePairVal> y_DefinitionExternalTypeChoicePair
%type <DefinitionExternalTypeVal>     y_DefinitionExternal_DefinitionExternalType_0
%type <QIFReferenceFullTypeVal>       y_DefinitionId_QIFReferenceFullType
%type <DegreeOfFreedomEnumTypeVal>    y_DegreeOfFreedomEnumType
%type <DegreeOfFreedomEnumTypeVal>    y_DegreeOfFreedom_DegreeOfFreedomEnumType
%type <DegreesOfFreedo_1013_TypeVal>  y_DegreesOfFreedo_1013_DegreesOfFreedo_1013_Type
%type <DegreesOfFreedo_1013_TypeVal>  y_DegreesOfFreedo_1013_Type
%type <DegreesOfFreedo_1013_TypeChoicePairVal> y_DegreesOfFreedo_1013_TypeChoicePair
%type <DegreesOfFreedomTypeVal>       y_DegreesOfFreedomType
%type <DegreesOfFreedomTypeVal>       y_DegreesOfFreedom_DegreesOfFreedomType
%type <DegreesOfFreedomTypeVal>       y_DegreesOfFreedom_DegreesOfFreedomType_0
%type <NaturalTypeVal>                y_Denominator_NaturalType
%type <XmlPositiveIntegerVal>         y_Denominator_XmlPositiveInteger
%type <XmlStringVal>                  y_Department_XmlString_0
%type <DepthCharacteristicDefinitionTypeVal> y_DepthCharacteristicDefinitionType
%type <DepthCharacteristicDefinitionTypeVal> y_DepthCharacteristicDefinition_DepthCharacteristicDefinitionType
%type <DepthCharacteristicItemTypeVal> y_DepthCharacteristicItemType
%type <DepthCharacteristicItemTypeVal> y_DepthCharacteristicItem_DepthCharacteristicItemType
%type <DepthCharacteristicMeasurementTypeVal> y_DepthCharacteristicMeasurementType
%type <DepthCharacteristicMeasurementTypeVal> y_DepthCharacteristicMeasurement_DepthCharacteristicMeasurementType
%type <DepthCharacteristicNominalTypeVal> y_DepthCharacteristicNominalType
%type <DepthCharacteristicNominalTypeVal> y_DepthCharacteristicNominal_DepthCharacteristicNominalType
%type <DepthCharacteristicStatsEvalTypeVal> y_DepthCharacteristicStatsEvalType
%type <DepthCharacteristicStatsEvalTypeVal> y_DepthCharacteristicStats_DepthCharacteristicStatsEvalType
%type <MeasuredLinearValueTypeVal>    y_DepthMax_MeasuredLinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_DepthMin_MeasuredLinearValueType_0
%type <MeasuredUnitVectorTypeVal>     y_DepthVector_MeasuredUnitVectorType_0
%type <UnitVectorTypeVal>             y_DepthVector_UnitVectorType
%type <UnitVectorTypeVal>             y_DepthVector_UnitVectorType_0
%type <FractionTypeVal>               y_Depth_FractionType_0
%type <LinearValueTypeVal>            y_Depth_LinearValueType
%type <LinearValueTypeVal>            y_Depth_LinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_Depth_MeasuredLinearValueType_0
%type <AddressDescriptionTypeVal>     y_Description_AddressDescriptionType_0
%type <XmlStringVal>                  y_Description_XmlString
%type <XmlStringVal>                  y_Description_XmlString_0
%type <XmlTokenVal>                   y_Designator_XmlToken
%type <CapacitiveSensorTypeVal>       y_DetachableCapacitiveSensor_CapacitiveSensorType
%type <LinearVariableDifferentialTransformerSensorTypeVal> y_DetachableLVDTSensor_LinearVariableDifferentialTransformerSensorType
%type <DetachableSensorBaseTypeVal>   y_DetachableSensor_substituteType
%type <DetachableSensorsTypeVal>      y_DetachableSensorsType
%type <DetachableSensorsTypeVal>      y_DetachableSensors_DetachableSensorsType_0
%type <XmlDecimalVal>                 y_DetectorBitNumber_XmlDecimal_0
%type <LinearValueTypeVal>            y_DetectorPixelSize_LinearValueType_0
%type <CircleMeasurementDeterminationTypeVal> y_DeterminationMode_CircleMeasurementDeterminationType
%type <CircularArcMeasurementDeterminationTypeVal> y_DeterminationMode_CircularArcMeasurementDeterminationType
%type <ConeMeasurementDeterminationTypeVal> y_DeterminationMode_ConeMeasurementDeterminationType
%type <ConicalSegmentMeasurementDeterminationTypeVal> y_DeterminationMode_ConicalSegmentMeasurementDeterminationType
%type <CylinderMeasurementDeterminationTypeVal> y_DeterminationMode_CylinderMeasurementDeterminationType
%type <CylindricalSegmentMeasurementDeterminationTypeVal> y_DeterminationMode_CylindricalSegmentMeasurementDeterminationType
%type <EdgePointMeasurementDeterminationTypeVal> y_DeterminationMode_EdgePointMeasurementDeterminationType
%type <EllipseMeasurementDeterminationTypeVal> y_DeterminationMode_EllipseMeasurementDeterminationType
%type <EllipticalArcMeasurementDeterminationTypeVal> y_DeterminationMode_EllipticalArcMeasurementDeterminationType
%type <ElongatedCircleMeasurementDeterminationTypeVal> y_DeterminationMode_ElongatedCircleMeasurementDeterminationType
%type <ElongatedCylinderMeasurementDeterminationTypeVal> y_DeterminationMode_ElongatedCylinderMeasurementDeterminationType
%type <ExtrudedCrossSectionMeasurementDeterminationTypeVal> y_DeterminationMode_ExtrudedCrossSectionMeasurementDeterminationType
%type <LineMeasurementDeterminationTypeVal> y_DeterminationMode_LineMeasurementDeterminationType
%type <OppositeAngledLinesMeasurementDeterminationTypeVal> y_DeterminationMode_OppositeAngledLinesMeasurementDeterminationType
%type <OppositeAngledPlanesMeasurementDeterminationTypeVal> y_DeterminationMode_OppositeAngledPlanesMeasurementDeterminationType
%type <OppositeParallelLinesMeasurementDeterminationTypeVal> y_DeterminationMode_OppositeParallelLinesMeasurementDeterminationType
%type <OppositeParallelPlanesMeasurementDeterminationTypeVal> y_DeterminationMode_OppositeParallelPlanesMeasurementDeterminationType
%type <OtherCurveMeasurementDeterminationTypeVal> y_DeterminationMode_OtherCurveMeasurementDeterminationType
%type <OtherShapeMeasurementDeterminationTypeVal> y_DeterminationMode_OtherShapeMeasurementDeterminationType
%type <OtherSurfaceMeasurementDeterminationTypeVal> y_DeterminationMode_OtherSurfaceMeasurementDeterminationType
%type <PlaneMeasurementDeterminationTypeVal> y_DeterminationMode_PlaneMeasurementDeterminationType
%type <PointDefinedCurveMeasurementDeterminationTypeVal> y_DeterminationMode_PointDefinedCurveMeasurementDeterminationType
%type <PointDefinedSurfaceMeasurementDeterminationTypeVal> y_DeterminationMode_PointDefinedSurfaceMeasurementDeterminationType
%type <PointMeasurementDeterminationTypeVal> y_DeterminationMode_PointMeasurementDeterminationType
%type <SphereMeasurementDeterminationTypeVal> y_DeterminationMode_SphereMeasurementDeterminationType
%type <SphericalSegmentMeasurementDeterminationTypeVal> y_DeterminationMode_SphericalSegmentMeasurementDeterminationType
%type <SurfaceOfRevolutionMeasurementDeterminationTypeVal> y_DeterminationMode_SurfaceOfRevolutionMeasurementDeterminationType
%type <ThreadedFeatureMeasurementDeterminationTypeVal> y_DeterminationMode_ThreadedFeatureMeasurementDeterminationType
%type <ToroidalSegmentMeasurementDeterminationTypeVal> y_DeterminationMode_ToroidalSegmentMeasurementDeterminationType
%type <TorusMeasurementDeterminationTypeVal> y_DeterminationMode_TorusMeasurementDeterminationType
%type <DimensionDeterminationEnumTypeVal> y_DeterminationModifier_DimensionDeterminationEnumType_0
%type <StatsLinearTypeVal>            y_DeviationStats_StatsLinearType
%type <StatsWithTolAngularTypeVal>    y_DeviationStats_StatsWithTolAngularType
%type <StatsWithTolAreaTypeVal>       y_DeviationStats_StatsWithTolAreaType
%type <StatsWithTolForceTypeVal>      y_DeviationStats_StatsWithTolForceType
%type <StatsWithTolLinearTypeVal>     y_DeviationStats_StatsWithTolLinearType
%type <StatsWithTolMassTypeVal>       y_DeviationStats_StatsWithTolMassType
%type <StatsWithTolPressureTypeVal>   y_DeviationStats_StatsWithTolPressureType
%type <StatsWithTolSpeedTypeVal>      y_DeviationStats_StatsWithTolSpeedType
%type <StatsWithTolTemperatureTypeVal> y_DeviationStats_StatsWithTolTemperatureType
%type <StatsWithTolTimeTypeVal>       y_DeviationStats_StatsWithTolTimeType
%type <StatsWithTolUserDefinedUnitTypeVal> y_DeviationStats_StatsWithTolUserDefinedUnitType
%type <LinearValueTypeVal>            y_Deviation_LinearValueType
%type <TwentyLinearValuesTypeVal>     y_DeviationsFromCalibration_TwentyLinearValuesType
%type <ListDoubleTypeVal>             y_Deviations_ListDoubleType
%type <XmlDoubleVal>                  y_DiameterBottom_XmlDouble
%type <DiameterCharact_1054_TypeVal>  y_DiameterCharact_1054_DiameterCharact_1054_Type
%type <DiameterCharact_1054_TypeVal>  y_DiameterCharact_1054_Type
%type <DiameterCharact_1054_TypeChoicePairVal> y_DiameterCharact_1054_TypeChoicePair
%type <DiameterCharacteristicDefinitionTypeVal> y_DiameterCharacteristicDefinitionType
%type <DiameterCharacteristicDefinitionTypeVal> y_DiameterCharacteristicDefinition_DiameterCharacteristicDefinitionType
%type <DiameterCharacteristicItemTypeVal> y_DiameterCharacteristicItemType
%type <DiameterCharacteristicItemTypeVal> y_DiameterCharacteristicItem_DiameterCharacteristicItemType
%type <DiameterCharacteristicMeasurementTypeVal> y_DiameterCharacteristicMeasurementType
%type <DiameterCharacteristicMeasurementTypeVal> y_DiameterCharacteristicMeasurement_DiameterCharacteristicMeasurementType
%type <DiameterCharacteristicNominalTypeVal> y_DiameterCharacteristicNominalType
%type <DiameterCharacteristicNominalTypeVal> y_DiameterCharacteristicNominal_DiameterCharacteristicNominalType
%type <DiameterCharacteristicStatsEvalTypeVal> y_DiameterCharacteristicStatsEvalType
%type <DiameterCharacteristicStatsEvalTypeVal> y_DiameterCharacteristicStats_DiameterCharacteristicStatsEvalType
%type <XmlDoubleVal>                  y_DiameterMajor_XmlDouble
%type <MeasuredLinearValueTypeVal>    y_DiameterMax_MeasuredLinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_DiameterMin_MeasuredLinearValueType_0
%type <XmlDoubleVal>                  y_DiameterMinor_XmlDouble
%type <DiameterModifierEnumTypeVal>   y_DiameterModifierEnumType
%type <DiameterModifierEnumTypeVal>   y_DiameterModifier_DiameterModifierEnumType_0
%type <XmlDoubleVal>                  y_DiameterTop_XmlDouble
%type <LinearValueTypeVal>            y_Diameter_LinearValueType
%type <LinearValueTypeVal>            y_Diameter_LinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_Diameter_MeasuredLinearValueType_0
%type <XmlDoubleVal>                  y_Diameter_XmlDouble
%type <LinearValueTypeVal>            y_DiametricalSize_LinearValueType
%type <CoaxialityDiametricalZoneTypeVal> y_DiametricalZone_CoaxialityDiametricalZoneType
%type <ConcentricityDiametricalZoneTypeVal> y_DiametricalZone_ConcentricityDiametricalZoneType
%type <OrientationDiametricalZoneTypeVal> y_DiametricalZone_OrientationDiametricalZoneType
%type <PositionDiametricalZoneTypeVal> y_DiametricalZone_PositionDiametricalZoneType
%type <StraightnessDiametricalZoneTypeVal> y_DiametricalZone_StraightnessDiametricalZoneType
%type <StatsMeasuredDecimalTypeVal>   y_Difference_StatsMeasuredDecimalType
%type <DifferentialVariableReluctanceTransducerSensorTypeVal> y_DifferentialVariableReluctanceTransducerSensorType
%type <DigitalDrawingTypeVal>         y_DigitalDrawingType
%type <DigitalDrawingTypeVal>         y_DigitalDrawing_DigitalDrawingType
%type <DigitalModelFormatEnumTypeVal> y_DigitalModelFormatEnumType
%type <DigitalModelFormatEnumTypeVal> y_DigitalModelFormatEnum_DigitalModelFormatEnumType
%type <DigitalModelFormatTypeVal>     y_DigitalModelFormatType
%type <DigitalModelFormatTypeChoicePairVal> y_DigitalModelFormatTypeChoicePair
%type <DigitalModelTypeVal>           y_DigitalModelType
%type <DigitalModelTypeVal>           y_DigitalModel_DigitalModelType
%type <DimensionCountEnumTypeVal>     y_DimensionCountEnumType
%type <DimensionDeterminationEnumTypeVal> y_DimensionDeterminationEnumType
%type <DimensionModifierEnumTypeVal>  y_DimensionModifierEnumType
%type <DimensionModifiersTypeVal>     y_DimensionModifiersType
%type <DimensionModifiersTypeVal>     y_DimensionModifiers_DimensionModifiersType_0
%type <DimensionModifierEnumTypeVal>  y_DimensionType_DimensionModifierEnumType_0
%type <ArrayReferenceFullTypeVal>     y_DimensionalCharacteristicIds_ArrayReferenceFullType
%type <XmlBooleanVal>                 y_DimensionalCharacteristicValueLimits_XmlBoolean_0
%type <XmlBooleanVal>                 y_DimensionalCharacteristicValueTarget_XmlBoolean_0
%type <DimensionCountEnumTypeVal>     y_Dimensionality_DimensionCountEnumType_0
%type <UnitVector2dSimpleTypeVal>     y_DirBeg_UnitVector2dSimpleType
%type <UnitVectorSimpleTypeVal>       y_DirBeg_UnitVectorSimpleType
%type <UnitVectorTypeVal>             y_DirBeg_UnitVectorType
%type <UnitVectorTypeVal>             y_DirMeridianPrime_UnitVectorType
%type <UnitVectorTypeVal>             y_DirNorthPole_UnitVectorType
%type <VectorSimpleTypeVal>           y_DirU_VectorSimpleType
%type <VectorSimpleTypeVal>           y_DirV_VectorSimpleType
%type <QIFReferenceFullTypeVal>       y_DirectionCurveId_QIFReferenceFullType_0
%type <ModifyingPlaneEnumTypeVal>     y_DirectionFeatureEnum_ModifyingPlaneEnumType
%type <DirectionFeatureTypeVal>       y_DirectionFeatureType
%type <DirectionFeatureTypeVal>       y_DirectionFeature_DirectionFeatureType_0
%type <RoughnessLayEnumTypeVal>       y_DirectionOfLay_RoughnessLayEnumType_0
%type <AngularCoordinateDirectionEnumTypeVal> y_Direction_AngularCoordinateDirectionEnumType
%type <LinearCoordinateDirectionEnumTypeVal> y_Direction_LinearCoordinateDirectionEnumType
%type <MeasuredUnitVectorTypeVal>     y_Direction_MeasuredUnitVectorType
%type <MeasuredUnitVectorTypeVal>     y_Direction_MeasuredUnitVectorType_0
%type <UnitVectorTypeVal>             y_Direction_UnitVectorType
%type <UnitVectorTypeVal>             y_Direction_UnitVectorType_0
%type <DirectionalOffs_1014_TypeVal>  y_DirectionalOffs_1014_DirectionalOffs_1014_Type
%type <DirectionalOffs_1014_TypeVal>  y_DirectionalOffs_1014_Type
%type <DirectionalOffs_1014_TypeChoicePairVal> y_DirectionalOffs_1014_TypeChoicePair
%type <DirectionalOffsetTypeVal>      y_DirectionalOffsetType
%type <DirectionalOffsetTypeVal>      y_DirectionalOffset_DirectionalOffsetType
%type <ArrayBinaryTypeVal>            y_DirectionsBinary_ArrayBinaryType
%type <ArrayUnitVectorTypeVal>        y_Directions_ArrayUnitVectorType
%type <DisplayStyleFormEnumTypeVal>   y_DisplayStyleFormEnumType
%type <DisplayStyleGroupTypeVal>      y_DisplayStyleGroupType
%type <DisplayStyleGroupTypeVal>      y_DisplayStyleGroup_DisplayStyleGroupType
%type <DisplayStyleGroupsTypeVal>     y_DisplayStyleGroupsType
%type <DisplayStyleGroupsTypeVal>     y_DisplayStyleGroups_DisplayStyleGroupsType_0
%type <QIFReferenceActiveTypeVal>     y_DisplayStyleId_QIFReferenceActiveType_0
%type <DisplayStyleModeTypeVal>       y_DisplayStyleModeType
%type <DisplayStyleSetTypeVal>        y_DisplayStyleSetType
%type <DisplayStyleSetTypeVal>        y_DisplayStyleSet_DisplayStyleSetType_0
%type <DisplayStyleTypeVal>           y_DisplayStyleType
%type <DisplayStyleTypeVal>           y_DisplayStyle_DisplayStyleType
%type <LinearErrorTypeVal>            y_DistanceAccuracy_LinearErrorType_0
%type <DistanceBetweenAnalysisModeEnumTypeVal> y_DistanceBetweenAnalysisModeEnumType
%type <DistanceBetweenCharacteristicDefinitionTypeVal> y_DistanceBetweenCharacteristicDefinitionType
%type <DistanceBetweenCharacteristicDefinitionTypeVal> y_DistanceBetweenCharacteristicDefinition_DistanceBetweenCharacteristicDefinitionType
%type <DistanceBetweenCharacteristicItemTypeVal> y_DistanceBetweenCharacteristicItemType
%type <DistanceBetweenCharacteristicItemTypeVal> y_DistanceBetweenCharacteristicItem_DistanceBetweenCharacteristicItemType
%type <DistanceBetweenCharacteristicMeasurementTypeVal> y_DistanceBetweenCharacteristicMeasurementType
%type <DistanceBetweenCharacteristicMeasurementTypeVal> y_DistanceBetweenCharacteristicMeasurement_DistanceBetweenCharacteristicMeasurementType
%type <DistanceBetweenCharacteristicNominalTypeVal> y_DistanceBetweenCharacteristicNominalType
%type <DistanceBetweenCharacteristicNominalTypeVal> y_DistanceBetweenCharacteristicNominal_DistanceBetweenCharacteristicNominalType
%type <DistanceBetweenCharacteristicStatsEvalTypeVal> y_DistanceBetweenCharacteristicStatsEvalType
%type <DistanceBetweenCharacteristicStatsEvalTypeVal> y_DistanceBetweenCharacteristicStats_DistanceBetweenCharacteristicStatsEvalType
%type <DistanceFromCharacteristicDefinitionTypeVal> y_DistanceFromCharacteristicDefinitionType
%type <DistanceFromCharacteristicDefinitionTypeVal> y_DistanceFromCharacteristicDefinition_DistanceFromCharacteristicDefinitionType
%type <DistanceFromCharacteristicItemTypeVal> y_DistanceFromCharacteristicItemType
%type <DistanceFromCharacteristicItemTypeVal> y_DistanceFromCharacteristicItem_DistanceFromCharacteristicItemType
%type <DistanceFromCharacteristicMeasurementTypeVal> y_DistanceFromCharacteristicMeasurementType
%type <DistanceFromCharacteristicMeasurementTypeVal> y_DistanceFromCharacteristicMeasurement_DistanceFromCharacteristicMeasurementType
%type <DistanceFromCharacteristicNominalTypeVal> y_DistanceFromCharacteristicNominalType
%type <DistanceFromCharacteristicNominalTypeVal> y_DistanceFromCharacteristicNominal_DistanceFromCharacteristicNominalType
%type <DistanceFromCharacteristicStatsEvalTypeVal> y_DistanceFromCharacteristicStatsEvalType
%type <DistanceFromCharacteristicStatsEvalTypeVal> y_DistanceFromCharacteristicStats_DistanceFromCharacteristicStatsEvalType
%type <XmlBooleanVal>                 y_DistanceVariable_XmlBoolean_0
%type <LinearValueTypeVal>            y_Distance_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_Distance_MeasuredLinearValueType_0
%type <XmlDoubleVal>                  y_Distance_XmlDouble
%type <DistributionTransformationEnumTypeVal> y_DistributionTransformationEnumType
%type <DistributionTransformationEnumTypeVal> y_DistributionTransformationEnum_DistributionTransformationEnumType
%type <DistributionTransformationTypeVal> y_DistributionTransformationType
%type <DistributionTransformationTypeChoicePairVal> y_DistributionTransformationTypeChoicePair
%type <DistributionTransformationTypeVal> y_DistributionTransformation_DistributionTransformationType_0
%type <DividedByTypeVal>              y_DividedByType
%type <DividedByTypeVal>              y_DividedBy_DividedByType
%type <DocumentFileInstructionTypeVal> y_DocumentFileInstructionType
%type <DocumentFileInstructionTypeVal> y_DocumentFileInstruction_DocumentFileInstructionType
%type <QPIdReferenceTypeVal>          y_DocumentQPId_QPIdReferenceType
%type <AngleRangeTypeVal>             y_DomainAngle_AngleRangeType
%type <AngleRangeTypeVal>             y_DomainLatitude_AngleRangeType
%type <XmlTokenVal>                   y_DomainLinearUnit_XmlToken
%type <AngleRangeTypeVal>             y_DomainLongitude_AngleRangeType
%type <ListDoubleTypeVal>             y_DomainValues_ListDoubleType
%type <DoublePositiveTypeVal>         y_DoublePositiveType
%type <AngularValueTypeVal>           y_DraftAngle_AngularValueType
%type <MeasuredAngularValueTypeVal>   y_DraftAngle_MeasuredAngularValueType
%type <UnitVectorTypeVal>             y_DraftVector_UnitVectorType_0
%type <DrawWireSensorTypeVal>         y_DrawWireSensorType
%type <DrawWireSensorTypeVal>         y_DrawWireSensor_DrawWireSensorType
%type <QIFReferenceFullTypeVal>       y_DrawingId_QIFReferenceFullType
%type <XmlStringVal>                  y_DrawingNumber_XmlString_0
%type <XmlStringVal>                  y_DrawingZone_XmlString_0
%type <DualNestingIndexFilterSymbolEnumTypeVal> y_DualNestingIndexFilterSymbolEnumType
%type <DualNestingIndexFilterTypeVal> y_DualNestingIndexFilterType
%type <DualNestingIndexFilterTypeVal> y_DualNestingIndexFilter_DualNestingIndexFilterType
%type <XmlBooleanVal>                 y_EachElement_XmlBoolean
%type <XmlBooleanVal>                 y_EachRadialElement_XmlBoolean
%type <VersionReferenceTypeVal>       y_EarlierVersion_VersionReferenceType
%type <EddyCurrentSensorTypeVal>      y_EddyCurrentSensorType
%type <EddyCurrentSensorTypeVal>      y_EddyCurrentSensor_EddyCurrentSensorType
%type <ArrayReferenceFullTypeVal>     y_EdgeIds_ArrayReferenceFullType
%type <ArrayReferenceTypeVal>         y_EdgeIds_ArrayReferenceType_0
%type <EdgeOrientedTypeVal>           y_EdgeOrientedType
%type <EdgeOrientedTypeVal>           y_EdgeOriented_EdgeOrientedType
%type <EdgePointCastTypeVal>          y_EdgePointCastType
%type <EdgePointCheckedFeatureTypeVal> y_EdgePointCheckedFeatureType
%type <EdgePointCheckedTypeVal>       y_EdgePointCheckedType
%type <EdgePointCheckedTypeChoicePairVal> y_EdgePointCheckedTypeChoicePair
%type <EdgePointConstructionMethodTypeVal> y_EdgePointConstructionMethodType
%type <EdgePointConstructionMethodTypeChoicePairVal> y_EdgePointConstructionMethodTypeChoicePair
%type <EdgePointCopyTypeVal>          y_EdgePointCopyType
%type <EdgePointFeatureDefinitionTypeVal> y_EdgePointFeatureDefinitionType
%type <EdgePointFeatureDefinitionTypeVal> y_EdgePointFeatureDefinition_EdgePointFeatureDefinitionType
%type <EdgePointFeatureItemTypeVal>   y_EdgePointFeatureItemType
%type <EdgePointFeatureItemTypeVal>   y_EdgePointFeatureItem_EdgePointFeatureItemType
%type <EdgePointFeatureMeasurementTypeVal> y_EdgePointFeatureMeasurementType
%type <EdgePointFeatureMeasurementTypeVal> y_EdgePointFeatureMeasurement_EdgePointFeatureMeasurementType
%type <EdgePointFeatureNominalTypeVal> y_EdgePointFeatureNominalType
%type <EdgePointFeatureNominalTypeVal> y_EdgePointFeatureNominal_EdgePointFeatureNominalType
%type <EdgePointFromScanTypeVal>      y_EdgePointFromScanType
%type <EdgePointMeasurementDeterminationTypeVal> y_EdgePointMeasurementDeterminationType
%type <EdgePointMeasurementDeterminationTypeChoicePairVal> y_EdgePointMeasurementDeterminationTypeChoicePair
%type <EdgePointTransformTypeVal>     y_EdgePointTransformType
%type <ValidationPointsTypeVal>       y_EdgePoints_ValidationPointsType_0
%type <EdgeSetTypeVal>                y_EdgeSetType
%type <EdgeSetTypeVal>                y_EdgeSet_EdgeSetType_0
%type <EdgeTypeVal>                   y_EdgeType
%type <EdgeOrientedTypeVal>           y_Edge_EdgeOrientedType
%type <EdgeTypeVal>                   y_Edge_EdgeType
%type <ArrayBinaryTypeVal>            y_EdgesBinary_ArrayBinaryType
%type <ArrayI2TypeVal>                y_Edges_ArrayI2Type
%type <SectionEdgesTypeVal>           y_Edges_SectionEdgesType
%type <EffectiveCartesianWorkingVolumeTypeVal> y_EffectiveCartesianWorkingVolumeType
%type <EffectiveCartesianWorkingVolumeTypeVal> y_EffectiveCartesianWorkingVolume_EffectiveCartesianWorkingVolumeType
%type <EffectiveClosedShellSetWorkingVolumeTypeVal> y_EffectiveClosedShellSetWorkingVolumeType
%type <EffectiveClosedShellSetWorkingVolumeTypeVal> y_EffectiveClosedShellSetWorkingVolume_EffectiveClosedShellSetWorkingVolumeType
%type <EffectiveCylindricalWorkingVolumeTypeVal> y_EffectiveCylindricalWorkingVolumeType
%type <EffectiveCylindricalWorkingVolumeTypeVal> y_EffectiveCylindricalWorkingVolume_EffectiveCylindricalWorkingVolumeType
%type <LinearValueTypeVal>            y_EffectiveDiameterOfObjective_LinearValueType_0
%type <EffectiveDiameterPerformanceTestTypeVal> y_EffectiveDiameterPerformanceTestType
%type <EffectiveDiameterPerformanceTestTypeVal> y_EffectiveDiameterPerformanceTest_EffectiveDiameterPerformanceTestType_0
%type <StatsNonNegativeIntegerTypeVal> y_EffectiveNumber_StatsNonNegativeIntegerType
%type <LinearValueTypeVal>            y_EffectiveScreenDiameter_LinearValueType_0
%type <EffectiveSphericalWorkingVolumeTypeVal> y_EffectiveSphericalWorkingVolumeType
%type <EffectiveSphericalWorkingVolumeTypeVal> y_EffectiveSphericalWorkingVolume_EffectiveSphericalWorkingVolumeType
%type <EffectiveUserDefinedWorkingVolumeTypeVal> y_EffectiveUserDefinedWorkingVolumeType
%type <EffectiveUserDefinedWorkingVolumeTypeVal> y_EffectiveUserDefinedWorkingVolume_EffectiveUserDefinedWorkingVolumeType
%type <EffectiveWorkingVolumeBaseTypeVal> y_EffectiveWorkingVolume_substituteType_0
%type <XmlStringVal>                  y_ElectronicDescription_XmlString_0
%type <XmlTokenVal>                   y_ElectronicMailAddress_XmlToken_0
%type <ArrayReferenceFullTypeVal>     y_ElementIds_ArrayReferenceFullType_0
%type <ElementReferenceFullTypeVal>   y_ElementReferenceFullType
%type <ElementReferenceTypeVal>       y_ElementReferenceType
%type <AngularErrorTypeVal>           y_ElevationAngularAccuracy_AngularErrorType_0
%type <EllipseBestFitTypeVal>         y_EllipseBestFitType
%type <EllipseCastTypeVal>            y_EllipseCastType
%type <EllipseCheckedFeatureTypeVal>  y_EllipseCheckedFeatureType
%type <EllipseCheckedTypeVal>         y_EllipseCheckedType
%type <EllipseCheckedTypeChoicePairVal> y_EllipseCheckedTypeChoicePair
%type <EllipseConstructionMethodTypeVal> y_EllipseConstructionMethodType
%type <EllipseConstructionMethodTypeChoicePairVal> y_EllipseConstructionMethodTypeChoicePair
%type <EllipseCopyTypeVal>            y_EllipseCopyType
%type <EllipseFeatureDefinitionTypeVal> y_EllipseFeatureDefinitionType
%type <EllipseFeatureDefinitionTypeVal> y_EllipseFeatureDefinition_EllipseFeatureDefinitionType
%type <EllipseFeatureItemTypeVal>     y_EllipseFeatureItemType
%type <EllipseFeatureItemTypeVal>     y_EllipseFeatureItem_EllipseFeatureItemType
%type <EllipseFeatureMeasurementTypeVal> y_EllipseFeatureMeasurementType
%type <EllipseFeatureMeasurementTypeVal> y_EllipseFeatureMeasurement_EllipseFeatureMeasurementType
%type <EllipseFeatureNominalTypeVal>  y_EllipseFeatureNominalType
%type <EllipseFeatureNominalTypeVal>  y_EllipseFeatureNominal_EllipseFeatureNominalType
%type <EllipseFromScanTypeVal>        y_EllipseFromScanType
%type <EllipseIntersectionTypeVal>    y_EllipseIntersectionType
%type <EllipseMeasurementDeterminationTypeVal> y_EllipseMeasurementDeterminationType
%type <EllipseMeasurementDeterminationTypeChoicePairVal> y_EllipseMeasurementDeterminationTypeChoicePair
%type <EllipsePointSamplingStrategyTypeVal> y_EllipsePointSamplingStrategyType
%type <EllipsePointSamplingStrategyTypeChoicePairVal> y_EllipsePointSamplingStrategyTypeChoicePair
%type <EllipseProjectionTypeVal>      y_EllipseProjectionType
%type <EllipseRecompTypeVal>          y_EllipseRecompType
%type <EllipseTransformTypeVal>       y_EllipseTransformType
%type <EllipticalArcBestFitTypeVal>   y_EllipticalArcBestFitType
%type <EllipticalArcCastTypeVal>      y_EllipticalArcCastType
%type <EllipticalArcCheckedFeatureTypeVal> y_EllipticalArcCheckedFeatureType
%type <EllipticalArcCheckedTypeVal>   y_EllipticalArcCheckedType
%type <EllipticalArcCheckedTypeChoicePairVal> y_EllipticalArcCheckedTypeChoicePair
%type <EllipticalArcConstructionMethodTypeVal> y_EllipticalArcConstructionMethodType
%type <EllipticalArcConstructionMethodTypeChoicePairVal> y_EllipticalArcConstructionMethodTypeChoicePair
%type <EllipticalArcCopyTypeVal>      y_EllipticalArcCopyType
%type <EllipticalArcFeatureDefinitionTypeVal> y_EllipticalArcFeatureDefinitionType
%type <EllipticalArcFeatureDefinitionTypeVal> y_EllipticalArcFeatureDefinition_EllipticalArcFeatureDefinitionType
%type <EllipticalArcFeatureItemTypeVal> y_EllipticalArcFeatureItemType
%type <EllipticalArcFeatureItemTypeVal> y_EllipticalArcFeatureItem_EllipticalArcFeatureItemType
%type <EllipticalArcFeatureMeasurementTypeVal> y_EllipticalArcFeatureMeasurementType
%type <EllipticalArcFeatureMeasurementTypeVal> y_EllipticalArcFeatureMeasurement_EllipticalArcFeatureMeasurementType
%type <EllipticalArcFeatureNominalTypeVal> y_EllipticalArcFeatureNominalType
%type <EllipticalArcFeatureNominalTypeVal> y_EllipticalArcFeatureNominal_EllipticalArcFeatureNominalType
%type <EllipticalArcFromScanTypeVal>  y_EllipticalArcFromScanType
%type <EllipticalArcIntersectionTypeVal> y_EllipticalArcIntersectionType
%type <EllipticalArcMeasurementDeterminationTypeVal> y_EllipticalArcMeasurementDeterminationType
%type <EllipticalArcMeasurementDeterminationTypeChoicePairVal> y_EllipticalArcMeasurementDeterminationTypeChoicePair
%type <EllipticalArcPointSamplingStrategyTypeVal> y_EllipticalArcPointSamplingStrategyType
%type <EllipticalArcPointSamplingStrategyTypeChoicePairVal> y_EllipticalArcPointSamplingStrategyTypeChoicePair
%type <EllipticalArcProjectionTypeVal> y_EllipticalArcProjectionType
%type <EllipticalArcRecompTypeVal>    y_EllipticalArcRecompType
%type <EllipticalArcTransformTypeVal> y_EllipticalArcTransformType
%type <EllipticityCharacteristicDefinitionTypeVal> y_EllipticityCharacteristicDefinitionType
%type <EllipticityCharacteristicDefinitionTypeVal> y_EllipticityCharacteristicDefinition_EllipticityCharacteristicDefinitionType
%type <EllipticityCharacteristicItemTypeVal> y_EllipticityCharacteristicItemType
%type <EllipticityCharacteristicItemTypeVal> y_EllipticityCharacteristicItem_EllipticityCharacteristicItemType
%type <EllipticityCharacteristicMeasurementTypeVal> y_EllipticityCharacteristicMeasurementType
%type <EllipticityCharacteristicMeasurementTypeVal> y_EllipticityCharacteristicMeasurement_EllipticityCharacteristicMeasurementType
%type <EllipticityCharacteristicNominalTypeVal> y_EllipticityCharacteristicNominalType
%type <EllipticityCharacteristicNominalTypeVal> y_EllipticityCharacteristicNominal_EllipticityCharacteristicNominalType
%type <EllipticityCharacteristicStatsEvalTypeVal> y_EllipticityCharacteristicStatsEvalType
%type <EllipticityCharacteristicStatsEvalTypeVal> y_EllipticityCharacteristicStats_EllipticityCharacteristicStatsEvalType
%type <ElongatedCircleBestFitTypeVal> y_ElongatedCircleBestFitType
%type <ElongatedCircleCastTypeVal>    y_ElongatedCircleCastType
%type <ElongatedCircleCheckedFeatureTypeVal> y_ElongatedCircleCheckedFeatureType
%type <ElongatedCircleCheckedTypeVal> y_ElongatedCircleCheckedType
%type <ElongatedCircleCheckedTypeChoicePairVal> y_ElongatedCircleCheckedTypeChoicePair
%type <ElongatedCircleConstructionMethodTypeVal> y_ElongatedCircleConstructionMethodType
%type <ElongatedCircleConstructionMethodTypeChoicePairVal> y_ElongatedCircleConstructionMethodTypeChoicePair
%type <ElongatedCircleCopyTypeVal>    y_ElongatedCircleCopyType
%type <ElongatedCircleFeatureDefinitionTypeVal> y_ElongatedCircleFeatureDefinitionType
%type <ElongatedCircleFeatureDefinitionTypeVal> y_ElongatedCircleFeatureDefinition_ElongatedCircleFeatureDefinitionType
%type <ElongatedCircleFeatureItemTypeVal> y_ElongatedCircleFeatureItemType
%type <ElongatedCircleFeatureItemTypeVal> y_ElongatedCircleFeatureItem_ElongatedCircleFeatureItemType
%type <ElongatedCircleFeatureMeasurementTypeVal> y_ElongatedCircleFeatureMeasurementType
%type <ElongatedCircleFeatureMeasurementTypeVal> y_ElongatedCircleFeatureMeasurement_ElongatedCircleFeatureMeasurementType
%type <ElongatedCircleFeatureNominalTypeVal> y_ElongatedCircleFeatureNominalType
%type <ElongatedCircleFeatureNominalTypeVal> y_ElongatedCircleFeatureNominal_ElongatedCircleFeatureNominalType
%type <ElongatedCircleMeasurementDeterminationTypeVal> y_ElongatedCircleMeasurementDeterminationType
%type <ElongatedCircleMeasurementDeterminationTypeChoicePairVal> y_ElongatedCircleMeasurementDeterminationTypeChoicePair
%type <ElongatedCirclePointSamplingStrategyTypeVal> y_ElongatedCirclePointSamplingStrategyType
%type <ElongatedCirclePointSamplingStrategyTypeChoicePairVal> y_ElongatedCirclePointSamplingStrategyTypeChoicePair
%type <ElongatedCircleRecompTypeVal>  y_ElongatedCircleRecompType
%type <ElongatedCircleTransformTypeVal> y_ElongatedCircleTransformType
%type <ElongatedCylinderBestFitTypeVal> y_ElongatedCylinderBestFitType
%type <ElongatedCylinderCastTypeVal>  y_ElongatedCylinderCastType
%type <ElongatedCylinderCheckedFeatureTypeVal> y_ElongatedCylinderCheckedFeatureType
%type <ElongatedCylinderCheckedTypeVal> y_ElongatedCylinderCheckedType
%type <ElongatedCylinderCheckedTypeChoicePairVal> y_ElongatedCylinderCheckedTypeChoicePair
%type <ElongatedCylinderConstructionMethodTypeVal> y_ElongatedCylinderConstructionMethodType
%type <ElongatedCylinderConstructionMethodTypeChoicePairVal> y_ElongatedCylinderConstructionMethodTypeChoicePair
%type <ElongatedCylinderCopyTypeVal>  y_ElongatedCylinderCopyType
%type <ElongatedCylinderFeatureDefinitionTypeVal> y_ElongatedCylinderFeatureDefinitionType
%type <ElongatedCylinderFeatureDefinitionTypeVal> y_ElongatedCylinderFeatureDefinition_ElongatedCylinderFeatureDefinitionType
%type <ElongatedCylinderFeatureItemTypeVal> y_ElongatedCylinderFeatureItemType
%type <ElongatedCylinderFeatureItemTypeVal> y_ElongatedCylinderFeatureItem_ElongatedCylinderFeatureItemType
%type <ElongatedCylinderFeatureMeasurementTypeVal> y_ElongatedCylinderFeatureMeasurementType
%type <ElongatedCylinderFeatureMeasurementTypeVal> y_ElongatedCylinderFeatureMeasurement_ElongatedCylinderFeatureMeasurementType
%type <ElongatedCylinderFeatureNominalTypeVal> y_ElongatedCylinderFeatureNominalType
%type <ElongatedCylinderFeatureNominalTypeVal> y_ElongatedCylinderFeatureNominal_ElongatedCylinderFeatureNominalType
%type <ElongatedCylinderMeasurementDeterminationTypeVal> y_ElongatedCylinderMeasurementDeterminationType
%type <ElongatedCylinderMeasurementDeterminationTypeChoicePairVal> y_ElongatedCylinderMeasurementDeterminationTypeChoicePair
%type <ElongatedCylinderPointSamplingStrategyEnumTypeVal> y_ElongatedCylinderPointSamplingStrategyEnumType
%type <ElongatedCylinderPointSamplingStrategyTypeVal> y_ElongatedCylinderPointSamplingStrategyType
%type <ElongatedCylinderPointSamplingStrategyTypeChoicePairVal> y_ElongatedCylinderPointSamplingStrategyTypeChoicePair
%type <ElongatedCylinderRecompTypeVal> y_ElongatedCylinderRecompType
%type <ElongatedCylinderTransformTypeVal> y_ElongatedCylinderTransformType
%type <XmlBooleanVal>                 y_ElongatedZone_XmlBoolean_0
%type <ElseDoTypeVal>                 y_ElseDoType
%type <ElseDoTypeVal>                 y_ElseDo_ElseDoType_0
%type <TestAndPlanElementTypeVal>     y_ElseIf_TestAndPlanElementType
%type <ElseRuleTypeVal>               y_ElseRuleType
%type <ElseRuleTypeVal>               y_Else_ElseRuleType_0
%type <XmlTokenVal>                   y_EmployeeId_XmlToken_0
%type <EmployeeTypeVal>               y_EmployeeType
%type <EmployeeTypeVal>               y_Employee_EmployeeType
%type <Point2dSimpleTypeVal>          y_EndPoint_Point2dSimpleType
%type <PointSimpleTypeVal>            y_EndPoint_PointSimpleType
%type <EndRadiusTypeVal>              y_EndRadius1_EndRadiusType_0
%type <MeasuredEndRadiusTypeVal>      y_EndRadius1_MeasuredEndRadiusType_0
%type <EndRadiusTypeVal>              y_EndRadius2_EndRadiusType_0
%type <MeasuredEndRadiusTypeVal>      y_EndRadius2_MeasuredEndRadiusType_0
%type <EndRadiusTypeVal>              y_EndRadiusType
%type <LinearValueTypeVal>            y_EndRadius_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_EndRadius_MeasuredLinearValueType
%type <SlotEndTypeVal>                y_EndType_SlotEndType
%type <EntitiesExternalTypeVal>       y_EntitiesExternalType
%type <EntitiesExternalTypeVal>       y_Entities_EntitiesExternalType_0
%type <ArrayReferenceFullTypeVal>     y_EntityExternalIds_ArrayReferenceFullType_0
%type <EntityExternalTypeVal>         y_EntityExternalType
%type <XmlTokenVal>                   y_EntityId_XmlToken
%type <ArrayReferenceFullTypeVal>     y_EntityInternalIds_ArrayReferenceFullType_0
%type <EntityExternalTypeVal>         y_Entity_EntityExternalType
%type <XmlBooleanVal>                 y_EnvelopeRequirement_XmlBoolean_0
%type <EnvironmentTypeVal>            y_EnvironmentType
%type <EnvironmentTypeVal>            y_Environment_EnvironmentType
%type <EnvironmentalRangeTypeVal>     y_EnvironmentalRangeType
%type <EnvironmentalRangeTypeVal>     y_EnvironmentalRange_EnvironmentalRangeType
%type <EnvironmentalRangeTypeVal>     y_EnvironmentalRange_EnvironmentalRangeType_0
%type <EnvironmentsTypeVal>           y_EnvironmentsType
%type <WeldFilletEqualLegLengthTypeVal> y_EqualLegLength_WeldFilletEqualLegLengthType
%type <StatsMeasuredDecimalTypeVal>   y_EquipmentVariation_StatsMeasuredDecimalType
%type <XmlDecimalVal>                 y_ErrorRate_XmlDecimal
%type <XmlStringVal>                  y_Error_XmlString
%type <ErrorsTypeVal>                 y_ErrorsType
%type <ErrorsTypeVal>                 y_Errors_ErrorsType_0
%type <EstablishDatumMeasurandTypeVal> y_EstablishDatumMeasurandType
%type <EstablishDatumMeasurandTypeVal> y_EstablishDatumMeasurand_EstablishDatumMeasurandType
%type <StatsMeasuredDecimalTypeVal>   y_EstimatedStandardDeviation_StatsMeasuredDecimalType
%type <EvaluateCharacteristicMeasurandTypeVal> y_EvaluateCharacteristicMeasurandType
%type <EvaluateCharacteristicMeasurandTypeVal> y_EvaluateCharacteristicMeasurand_EvaluateCharacteristicMeasurandType
%type <EvaluateSpecifiedCharacteristicsActionTypeVal> y_EvaluateSpecifiedCharacteristicsActionType
%type <EvaluateSpecifiedCharacteristicsActionTypeVal> y_EvaluateSpecifiedCharacteristics_EvaluateSpecifiedCharacteristicsActionType
%type <UserDefinedUnitValueTypeVal>   y_ExcitationAmplitude_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_ExcitationFrequency_UserDefinedUnitValueType_0
%type <ExclusionEnumTypeVal>          y_ExclusionEnumType
%type <ExclusionIdTypeVal>            y_ExclusionIdType
%type <ExclusionIndexTypeVal>         y_ExclusionIndexType
%type <ExclusionEnumTypeVal>          y_ExclusionReasonEnum_ExclusionEnumType
%type <ExclusionReasonTypeVal>        y_ExclusionReasonType
%type <ExclusionReasonTypeChoicePairVal> y_ExclusionReasonTypeChoicePair
%type <ExclusionIdTypeVal>            y_Exclusion_ExclusionIdType
%type <ExclusionIndexTypeVal>         y_Exclusion_ExclusionIndexType
%type <ExclusionsIdTypeVal>           y_ExclusionsIdType
%type <ExclusionsIndexTypeVal>        y_ExclusionsIndexType
%type <ExclusionsIdTypeVal>           y_Exclusions_ExclusionsIdType_0
%type <ExclusionsIndexTypeVal>        y_Exclusions_ExclusionsIndexType_0
%type <XmlBooleanVal>                 y_Expanded_XmlBoolean_0
%type <XmlDateTimeVal>                y_ExpirationDate_XmlDateTime
%type <QIFReferenceActiveTypeVal>     y_ExplodedViewId_QIFReferenceActiveType_0
%type <ExplodedViewMov_1230_TypeVal>  y_ExplodedViewMov_1230_ExplodedViewMov_1230_Type
%type <ExplodedViewMov_1230_TypeVal>  y_ExplodedViewMov_1230_Type
%type <ExplodedViewMov_1230_TypeChoicePairVal> y_ExplodedViewMov_1230_TypeChoicePair
%type <ExplodedViewMoveGroupTypeVal>  y_ExplodedViewMoveGroupType
%type <ExplodedViewMoveGroupsTypeVal> y_ExplodedViewMoveGroupsType
%type <ExplodedViewRotateTypeVal>     y_ExplodedViewRotateType
%type <ExplodedViewSetTypeVal>        y_ExplodedViewSetType
%type <ExplodedViewSetTypeVal>        y_ExplodedViewSet_ExplodedViewSetType_0
%type <ExplodedViewTranslateTypeVal>  y_ExplodedViewTranslateType
%type <ExplodedViewTypeVal>           y_ExplodedViewType
%type <ExplodedViewTypeVal>           y_ExplodedView_ExplodedViewType
%type <XmlStringVal>                  y_ExportControlClassification_XmlString_0
%type <ExtentEnumTypeVal>             y_ExtentEnumType
%type <ExtentEnumTypeVal>             y_ExtentEnum_ExtentEnumType
%type <ExtentTypeVal>                 y_ExtentType
%type <ExtentTypeChoicePairVal>       y_ExtentTypeChoicePair
%type <ExtentTypeVal>                 y_Extent_ExtentType_0
%type <QIFReferenceFullTypeVal>       y_ExternalCADCoordinateSystemId_QIFReferenceFullType_0
%type <ExternalFileReferenceTypeVal>  y_ExternalFileReferenceType
%type <ExternalFileReferenceTypeVal>  y_ExternalFileReference_ExternalFileReferenceType
%type <ExternalFileReferencesTypeVal> y_ExternalFileReferencesType
%type <ExternalFileReferencesTypeVal> y_ExternalFileReferences_ExternalFileReferencesType_0
%type <ExternalFileReferenceTypeVal>  y_ExternalFile_ExternalFileReferenceType
%type <ExternalQIFDocumentReferenceTypeVal> y_ExternalQIFDocumentReferenceType
%type <ExternalQIFDocumentReferenceTypeVal> y_ExternalQIFDocument_ExternalQIFDocumentReferenceType
%type <XmlUnsignedIntVal>             y_ExternalQIFReferencesCount_XmlUnsignedInt_0
%type <ExternalQIFReferencesTypeVal>  y_ExternalQIFReferencesType
%type <ExternalQIFReferencesTypeVal>  y_ExternalQIFReferences_ExternalQIFReferencesType_0
%type <ExternalReferenceMeasureFeatureMethodTypeVal> y_ExternalReferenceMeasureFeatureMethodType
%type <ExternalReferenceMeasureFeatureMethodTypeVal> y_ExternalReferenceMeasureFeatureMethod_ExternalReferenceMeasureFeatureMethodType
%type <CircularArcExtractTypeVal>     y_Extract_CircularArcExtractType
%type <LineExtractTypeVal>            y_Extract_LineExtractType
%type <PlaneExtractTypeVal>           y_Extract_PlaneExtractType
%type <PointDefinedCurveExtractTypeVal> y_Extract_PointDefinedCurveExtractType
%type <PointDefinedSurfaceExtractTypeVal> y_Extract_PointDefinedSurfaceExtractType
%type <XmlDecimalVal>                 y_ExtremeLimit_XmlDecimal_0
%type <XmlPositiveIntegerVal>         y_ExtremeLimit_XmlPositiveInteger_0
%type <PointFeatureExtremeTypeVal>    y_Extreme_PointFeatureExtremeType
%type <Extrude23CoreTypeVal>          y_Extrude23CoreType
%type <Extrude23CoreTypeVal>          y_Extrude23Core_Extrude23CoreType
%type <Extrude23TypeVal>              y_Extrude23Type
%type <Extrude23TypeVal>              y_Extrude23_Extrude23Type
%type <ExtrudedCrossSectionBestFitTypeVal> y_ExtrudedCrossSectionBestFitType
%type <ExtrudedCrossSectionCastTypeVal> y_ExtrudedCrossSectionCastType
%type <ExtrudedCrossSectionCheckedFeatureTypeVal> y_ExtrudedCrossSectionCheckedFeatureType
%type <ExtrudedCrossSectionCheckedTypeVal> y_ExtrudedCrossSectionCheckedType
%type <ExtrudedCrossSectionCheckedTypeChoicePairVal> y_ExtrudedCrossSectionCheckedTypeChoicePair
%type <ExtrudedCrossSectionConstructionMethodTypeVal> y_ExtrudedCrossSectionConstructionMethodType
%type <ExtrudedCrossSectionConstructionMethodTypeChoicePairVal> y_ExtrudedCrossSectionConstructionMethodTypeChoicePair
%type <ExtrudedCrossSectionCopyTypeVal> y_ExtrudedCrossSectionCopyType
%type <ExtrudedCrossSectionFeatureDefinitionTypeVal> y_ExtrudedCrossSectionFeatureDefinitionType
%type <ExtrudedCrossSectionFeatureDefinitionTypeVal> y_ExtrudedCrossSectionFeatureDefinition_ExtrudedCrossSectionFeatureDefinitionType
%type <ExtrudedCrossSectionFeatureItemTypeVal> y_ExtrudedCrossSectionFeatureItemType
%type <ExtrudedCrossSectionFeatureItemTypeVal> y_ExtrudedCrossSectionFeatureItem_ExtrudedCrossSectionFeatureItemType
%type <ExtrudedCrossSectionFeatureMeasurementTypeVal> y_ExtrudedCrossSectionFeatureMeasurementType
%type <ExtrudedCrossSectionFeatureMeasurementTypeVal> y_ExtrudedCrossSectionFeatureMeasurement_ExtrudedCrossSectionFeatureMeasurementType
%type <ExtrudedCrossSectionFeatureNominalTypeVal> y_ExtrudedCrossSectionFeatureNominalType
%type <ExtrudedCrossSectionFeatureNominalTypeVal> y_ExtrudedCrossSectionFeatureNominal_ExtrudedCrossSectionFeatureNominalType
%type <ExtrudedCrossSectionMeasurementDeterminationTypeVal> y_ExtrudedCrossSectionMeasurementDeterminationType
%type <ExtrudedCrossSectionMeasurementDeterminationTypeChoicePairVal> y_ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair
%type <ExtrudedCrossSectionPointSamplingStrategyEnumTypeVal> y_ExtrudedCrossSectionPointSamplingStrategyEnumType
%type <ExtrudedCrossSectionPointSamplingStrategyTypeVal> y_ExtrudedCrossSectionPointSamplingStrategyType
%type <ExtrudedCrossSectionPointSamplingStrategyTypeChoicePairVal> y_ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair
%type <ExtrudedCrossSectionRecompTypeVal> y_ExtrudedCrossSectionRecompType
%type <ExtrudedCrossSectionTransformTypeVal> y_ExtrudedCrossSectionTransformType
%type <XmlDecimalVal>                 y_EyePieceMagnification_XmlDecimal_0
%type <FPSTestTypeVal>                y_FPSTestType
%type <FaceBaseTypeVal>               y_FaceBase_substituteType
%type <ArrayReferenceFullTypeVal>     y_FaceIds_ArrayReferenceFullType
%type <ArrayReferenceTypeVal>         y_FaceIds_ArrayReferenceType_0
%type <FaceMeshTypeVal>               y_FaceMeshType
%type <FaceMeshType_1223_TypeVal>     y_FaceMeshType_1223_FaceMeshType_1223_Type_0
%type <FaceMeshType_1223_TypeVal>     y_FaceMeshType_1223_Type
%type <FaceMeshType_1223_TypeChoicePairVal> y_FaceMeshType_1223_TypeChoicePair
%type <FaceMeshType_1224_TypeVal>     y_FaceMeshType_1224_FaceMeshType_1224_Type_0
%type <FaceMeshType_1224_TypeVal>     y_FaceMeshType_1224_Type
%type <FaceMeshType_1224_TypeChoicePairVal> y_FaceMeshType_1224_TypeChoicePair
%type <FaceMeshType_1225_TypeVal>     y_FaceMeshType_1225_FaceMeshType_1225_Type_0
%type <FaceMeshType_1225_TypeVal>     y_FaceMeshType_1225_Type
%type <FaceMeshType_1225_TypeChoicePairVal> y_FaceMeshType_1225_TypeChoicePair
%type <FaceMeshTypeVal>               y_FaceMesh_FaceMeshType
%type <ValidationPointsTypeVal>       y_FacePoints_ValidationPointsType_0
%type <FaceSetTypeVal>                y_FaceSetType
%type <FaceSetTypeVal>                y_FaceSet_FaceSetType_0
%type <FaceTypeVal>                   y_FaceType
%type <FaceTypeVal>                   y_Face_FaceType
%type <XmlTokenVal>                   y_FacsimileNumber_XmlToken_0
%type <PositiveDecimalTypeVal>        y_Factor_PositiveDecimalType
%type <StringValuesTypeVal>           y_FailValues_StringValuesType_0
%type <StatsMeasuredDecimalTypeVal>   y_FailurePercentage_StatsMeasuredDecimalType
%type <LinearValueTypeVal>            y_Far_LinearValueType
%type <FeatureAreaTypeVal>            y_FeatureAreaType
%type <FeatureAreaTypeVal>            y_FeatureArea_FeatureAreaType
%type <FeatureAspectsListsTypeVal>    y_FeatureAspectsListsType
%type <QIFReferenceTypeVal>           y_FeatureDefinitionId_QIFReferenceType
%type <FeatureDefinitionBaseTypeVal>  y_FeatureDefinition_substituteType
%type <XmlUnsignedIntVal>             y_FeatureDefinitionsCount_XmlUnsignedInt_0
%type <FeatureDefinitionsTypeVal>     y_FeatureDefinitionsType
%type <FeatureDefinitionsTypeVal>     y_FeatureDefinitions_FeatureDefinitionsType_0
%type <BaseFeatureTypeVal>            y_FeatureDirection_BaseFeatureType
%type <UnitVectorTypeVal>             y_FeatureDirection_UnitVectorType_0
%type <QIFReferenceFullTypeVal>       y_FeatureId_QIFReferenceFullType
%type <QIFReferenceTypeVal>           y_FeatureId_QIFReferenceType
%type <FeatureIsDatumTypeVal>         y_FeatureIsDatumType
%type <FeatureIsDatumTypeVal>         y_FeatureIsDatum_FeatureIsDatumType
%type <FeatureIsInternalTypeVal>      y_FeatureIsInternalType
%type <FeatureIsInternalTypeVal>      y_FeatureIsInternal_FeatureIsInternalType
%type <QIFReferenceTypeVal>           y_FeatureItemId_QIFReferenceType
%type <QIFReferenceTypeVal>           y_FeatureItemId_QIFReferenceType_0
%type <ArrayReferenceTypeVal>         y_FeatureItemIds_ArrayReferenceType
%type <ArrayReferenceTypeVal>         y_FeatureItemIds_ArrayReferenceType_0
%type <FeatureItemBaseTypeVal>        y_FeatureItem_substituteType
%type <XmlUnsignedIntVal>             y_FeatureItemsCount_XmlUnsignedInt_0
%type <FeatureItemsTypeVal>           y_FeatureItemsType
%type <FeatureItemsTypeVal>           y_FeatureItems_FeatureItemsType_0
%type <FeatureLengthTypeVal>          y_FeatureLengthType
%type <FeatureLengthTypeVal>          y_FeatureLength_FeatureLengthType
%type <ArrayReferenceTypeVal>         y_FeatureMeasurementIds_ArrayReferenceType_0
%type <FeatureMeasurementBaseTypeVal> y_FeatureMeasurement_substituteType
%type <FeatureMeasurementsTypeVal>    y_FeatureMeasurementsType
%type <XmlTokenVal>                   y_FeatureName_XmlToken
%type <XmlTokenVal>                   y_FeatureName_XmlToken_0
%type <QIFReferenceFullTypeVal>       y_FeatureNominalId_QIFReferenceFullType
%type <QIFReferenceFullTypeVal>       y_FeatureNominalId_QIFReferenceFullType_0
%type <ArrayReferenceFullTypeVal>     y_FeatureNominalIds_ArrayReferenceFullType
%type <ArrayReferenceFullTypeVal>     y_FeatureNominalIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_FeatureNominalIds_ArrayReferenceType_0
%type <ArrayPairReferenceFullTypeVal> y_FeatureNominalPairs_ArrayPairReferenceFullType_0
%type <FeatureNominalBaseTypeVal>     y_FeatureNominal_substituteType
%type <XmlUnsignedIntVal>             y_FeatureNominalsCount_XmlUnsignedInt_0
%type <FeatureNominalsTypeVal>        y_FeatureNominalsType
%type <FeatureNominalsTypeVal>        y_FeatureNominals_FeatureNominalsType_0
%type <QIFFeaturePairTypeVal>         y_FeaturePair_QIFFeaturePairType
%type <XmlUnsignedIntVal>             y_FeatureRulesCount_XmlUnsignedInt_0
%type <FeatureRulesTypeVal>           y_FeatureRulesType
%type <FeatureRulesTypeVal>           y_FeatureRules_FeatureRulesType_0
%type <FeatureSizeTypeVal>            y_FeatureSizeType
%type <FeatureSizeTypeVal>            y_FeatureSize_FeatureSizeType
%type <TimeValueTypeVal>              y_FeatureSpeed_TimeValueType_0
%type <FeatureTypeEnumTypeVal>        y_FeatureTypeEnumType
%type <FeatureTypeEnumTypeVal>        y_FeatureTypeEnum_FeatureTypeEnumType_0
%type <FeatureTypeIsTypeVal>          y_FeatureTypeIsType
%type <FeatureTypeIsTypeVal>          y_FeatureTypeIs_FeatureTypeIsType
%type <FeatureZoneAreaBetweenTypeVal> y_FeatureZoneAreaBetweenType
%type <FeatureZoneAreaBetweenTypeVal> y_FeatureZoneAreaBetween_FeatureZoneAreaBetweenType
%type <FeatureZoneAreaCircularTypeVal> y_FeatureZoneAreaCircularType
%type <FeatureZoneAreaCircularTypeVal> y_FeatureZoneAreaCircular_FeatureZoneAreaCircularType
%type <FeatureZoneAreaCylindricalTypeVal> y_FeatureZoneAreaCylindricalType
%type <FeatureZoneAreaCylindricalTypeVal> y_FeatureZoneAreaCylindrical_FeatureZoneAreaCylindricalType
%type <FeatureZoneAreaIrregularTypeVal> y_FeatureZoneAreaIrregularType
%type <FeatureZoneAreaIrregularTypeVal> y_FeatureZoneAreaIrregular_FeatureZoneAreaIrregularType
%type <FeatureZoneAreaRectangularTypeVal> y_FeatureZoneAreaRectangularType
%type <FeatureZoneAreaRectangularTypeVal> y_FeatureZoneAreaRectangular_FeatureZoneAreaRectangularType
%type <FeatureZoneAreaSphericalTypeVal> y_FeatureZoneAreaSphericalType
%type <FeatureZoneAreaSphericalTypeVal> y_FeatureZoneAreaSpherical_FeatureZoneAreaSphericalType
%type <FeatureZoneArea_1099_TypeVal>  y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0
%type <FeatureZoneArea_1099_TypeVal>  y_FeatureZoneArea_1099_Type
%type <FeatureZoneArea_1099_TypeChoicePairVal> y_FeatureZoneArea_1099_TypeChoicePair
%type <FeatureZoneArea_1100_TypeVal>  y_FeatureZoneArea_1100_FeatureZoneArea_1100_Type
%type <FeatureZoneArea_1100_TypeVal>  y_FeatureZoneArea_1100_Type
%type <FeatureZoneArea_1100_TypeChoicePairVal> y_FeatureZoneArea_1100_TypeChoicePair
%type <FeatureZoneArea_1101_TypeVal>  y_FeatureZoneArea_1101_FeatureZoneArea_1101_Type
%type <FeatureZoneArea_1101_TypeVal>  y_FeatureZoneArea_1101_Type
%type <FeatureZoneArea_1101_TypeChoicePairVal> y_FeatureZoneArea_1101_TypeChoicePair
%type <FeatureZoneCurv_1102_TypeVal>  y_FeatureZoneCurv_1102_FeatureZoneCurv_1102_Type_0
%type <FeatureZoneCurv_1102_TypeVal>  y_FeatureZoneCurv_1102_Type
%type <FeatureZoneCurv_1102_TypeChoicePairVal> y_FeatureZoneCurv_1102_TypeChoicePair
%type <FeatureZoneCurveCircularTypeVal> y_FeatureZoneCurveCircularType
%type <FeatureZoneCurveCircularTypeVal> y_FeatureZoneCurveCircular_FeatureZoneCurveCircularType
%type <FeatureZoneCurveIrregularTypeVal> y_FeatureZoneCurveIrregularType
%type <FeatureZoneCurveIrregularTypeVal> y_FeatureZoneCurveIrregular_FeatureZoneCurveIrregularType
%type <FeatureZoneCurveLineTypeVal>   y_FeatureZoneCurveLineType
%type <FeatureZoneCurveLineTypeVal>   y_FeatureZoneCurveLine_FeatureZoneCurveLineType
%type <ArrayReferenceFullTypeVal>     y_FeatureZoneIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_FeatureZoneIds_ArrayReferenceType_0
%type <FeatureZoneListTypeVal>        y_FeatureZoneListType
%type <FeatureZonePoin_1103_TypeVal>  y_FeatureZonePoin_1103_FeatureZonePoin_1103_Type_0
%type <FeatureZonePoin_1103_TypeVal>  y_FeatureZonePoin_1103_Type
%type <FeatureZonePoin_1103_TypeChoicePairVal> y_FeatureZonePoin_1103_TypeChoicePair
%type <FeatureZonePointTypeVal>       y_FeatureZonePointType
%type <FeatureZonePointTypeVal>       y_FeatureZonePoint_FeatureZonePointType
%type <FeatureZoneBaseTypeVal>        y_FeatureZone_substituteType
%type <FeatureZoneListTypeVal>        y_FeatureZones_FeatureZoneListType_0
%type <FeatureAspectsListsTypeVal>    y_Features_FeatureAspectsListsType_0
%type <LinearValueTypeVal>            y_FieldOfViewDiameter_LinearValueType_0
%type <AngularValueTypeVal>           y_FieldOfView_AngularValueType_0
%type <XmlBooleanVal>                 y_Field_XmlBoolean_0
%type <FileInternalTypeVal>           y_FileInternalType
%type <FileSpecTypeVal>               y_FileSpecType
%type <FileSpecTypeChoicePairVal>     y_FileSpecTypeChoicePair
%type <FileSpecTypeVal>               y_FileSpec_FileSpecType
%type <FileTypeVal>                   y_FileType
%type <FileUnitsTypeVal>              y_FileUnitsType
%type <FileUnitsTypeVal>              y_FileUnits_FileUnitsType_0
%type <FileInternalTypeVal>           y_File_FileInternalType_0
%type <FileTypeVal>                   y_File_FileType
%type <FilterTypeVal>                 y_FilterType
%type <FilterTypeChoicePairVal>       y_FilterTypeChoicePair
%type <FilterTypeVal>                 y_Filter_FilterType_0
%type <WeldFinishingDesignatorEnumTypeVal> y_FinishingDesignator_WeldFinishingDesignatorEnumType_0
%type <WeldFinishingTypeVal>          y_Finishing_WeldFinishingType_0
%type <FirstArticleStu_1200_TypeVal>  y_FirstArticleStu_1200_FirstArticleStu_1200_Type
%type <FirstArticleStu_1200_TypeVal>  y_FirstArticleStu_1200_Type
%type <FirstArticleStu_1200_TypeChoicePairVal> y_FirstArticleStu_1200_TypeChoicePair
%type <FirstArticleStudyPlanTypeVal>  y_FirstArticleStudyPlanType
%type <FirstArticleStudyPlanTypeVal>  y_FirstArticleStudyPlan_FirstArticleStudyPlanType
%type <FirstArticleStudyResultsTypeVal> y_FirstArticleStudyResultsType
%type <FirstArticleStudyResultsTypeVal> y_FirstArticleStudyResults_FirstArticleStudyResultsType
%type <UserDefinedAxisTypeVal>        y_FirstAxis_UserDefinedAxisType
%type <QIFReferenceTypeVal>           y_FirstFeatureLocation_QIFReferenceType
%type <QIFReferenceFullTypeVal>       y_FirstFeatureZone_QIFReferenceFullType_0
%type <QIFReferenceFullTypeVal>       y_FirstFeature_QIFReferenceFullType
%type <FractionTypeVal>               y_FirstLegLength_FractionType
%type <Point2dSimpleTypeVal>          y_FirstLineOrigin_Point2dSimpleType
%type <LinearValueTypeVal>            y_FirstNestingIndex_LinearValueType_0
%type <QIFReferenceTypeVal>           y_FixtureId_QIFReferenceType_0
%type <FixtureTypeVal>                y_FixtureType
%type <FixtureTypeVal>                y_Fixture_FixtureType
%type <FixturesTypeVal>               y_FixturesType
%type <FixturesTypeVal>               y_Fixtures_FixturesType_0
%type <FlatTaperCharacteristicDefinitionTypeVal> y_FlatTaperCharacteristicDefinitionType
%type <FlatTaperCharacteristicDefinitionTypeVal> y_FlatTaperCharacteristicDefinition_FlatTaperCharacteristicDefinitionType
%type <FlatTaperCharacteristicItemTypeVal> y_FlatTaperCharacteristicItemType
%type <FlatTaperCharacteristicItemTypeVal> y_FlatTaperCharacteristicItem_FlatTaperCharacteristicItemType
%type <FlatTaperCharacteristicMeasurementTypeVal> y_FlatTaperCharacteristicMeasurementType
%type <FlatTaperCharacteristicMeasurementTypeVal> y_FlatTaperCharacteristicMeasurement_FlatTaperCharacteristicMeasurementType
%type <FlatTaperCharacteristicNominalTypeVal> y_FlatTaperCharacteristicNominalType
%type <FlatTaperCharacteristicNominalTypeVal> y_FlatTaperCharacteristicNominal_FlatTaperCharacteristicNominalType
%type <FlatTaperCharacteristicStatsEvalTypeVal> y_FlatTaperCharacteristicStatsEvalType
%type <FlatTaperCharacteristicStatsEvalTypeVal> y_FlatTaperCharacteristicStats_FlatTaperCharacteristicStatsEvalType
%type <FlatnessCharact_1055_TypeVal>  y_FlatnessCharact_1055_FlatnessCharact_1055_Type
%type <FlatnessCharact_1055_TypeVal>  y_FlatnessCharact_1055_Type
%type <FlatnessCharact_1055_TypeChoicePairVal> y_FlatnessCharact_1055_TypeChoicePair
%type <FlatnessCharact_1085_TypeVal>  y_FlatnessCharact_1085_FlatnessCharact_1085_Type
%type <FlatnessCharact_1085_TypeVal>  y_FlatnessCharact_1085_Type
%type <FlatnessCharact_1086_TypeVal>  y_FlatnessCharact_1086_FlatnessCharact_1086_Type
%type <FlatnessCharact_1086_TypeVal>  y_FlatnessCharact_1086_Type
%type <FlatnessCharacteristicDefinitionTypeVal> y_FlatnessCharacteristicDefinitionType
%type <FlatnessCharacteristicDefinitionTypeVal> y_FlatnessCharacteristicDefinition_FlatnessCharacteristicDefinitionType
%type <FlatnessCharacteristicItemTypeVal> y_FlatnessCharacteristicItemType
%type <FlatnessCharacteristicItemTypeVal> y_FlatnessCharacteristicItem_FlatnessCharacteristicItemType
%type <FlatnessCharacteristicMeasurementTypeVal> y_FlatnessCharacteristicMeasurementType
%type <FlatnessCharacteristicMeasurementTypeVal> y_FlatnessCharacteristicMeasurement_FlatnessCharacteristicMeasurementType
%type <FlatnessCharacteristicNominalTypeVal> y_FlatnessCharacteristicNominalType
%type <FlatnessCharacteristicNominalTypeVal> y_FlatnessCharacteristicNominal_FlatnessCharacteristicNominalType
%type <FlatnessCharacteristicStatsEvalTypeVal> y_FlatnessCharacteristicStatsEvalType
%type <FlatnessCharacteristicStatsEvalTypeVal> y_FlatnessCharacteristicStats_FlatnessCharacteristicStatsEvalType
%type <LinearValueTypeVal>            y_FocalSpotSize_LinearValueType_0
%type <FolderAssemblyTypeVal>         y_FolderAssemblyType
%type <FolderAssemblyTypeVal>         y_FolderAssembly_FolderAssemblyType
%type <ArrayReferenceTypeVal>         y_FolderIds_ArrayReferenceType_0
%type <FolderPartTypeVal>             y_FolderPartType
%type <FolderPartTypeVal>             y_FolderPart_FolderPartType
%type <FoldersAssemblyTypeVal>        y_FoldersAssemblyType
%type <FoldersAssemblyTypeVal>        y_FoldersAssembly_FoldersAssemblyType_0
%type <FoldersPartTypeVal>            y_FoldersPartType
%type <FoldersPartTypeVal>            y_FoldersPart_FoldersPartType_0
%type <FontTypeVal>                   y_FontType
%type <FontTypeVal>                   y_Font_FontType
%type <FontsTypeVal>                  y_FontsType
%type <FontsTypeVal>                  y_Fonts_FontsType
%type <MeasuredForceValueTypeVal>     y_ForceAbsoluteLinearity_MeasuredForceValueType
%type <ForceCharacteri_1056_TypeVal>  y_ForceCharacteri_1056_ForceCharacteri_1056_Type
%type <ForceCharacteri_1056_TypeVal>  y_ForceCharacteri_1056_Type
%type <ForceCharacteri_1056_TypeChoicePairVal> y_ForceCharacteri_1056_TypeChoicePair
%type <CriterionForceTypeVal>         y_ForceCriterion_CriterionForceType_0
%type <ForceValueTypeVal>             y_ForceLimit_ForceValueType_0
%type <MeasuredForceValueTypeVal>     y_ForceMeasurement_MeasuredForceValueType_0
%type <SummariesStatisticsForceTypeVal> y_ForceStatsSummaries_SummariesStatisticsForceType_0
%type <SummaryStatisticsForceTypeVal> y_ForceStatsSummary_SummaryStatisticsForceType
%type <ForceToleranceT_1015_TypeVal>  y_ForceToleranceT_1015_ForceToleranceT_1015_Type
%type <ForceToleranceT_1015_TypeVal>  y_ForceToleranceT_1015_Type
%type <ForceToleranceT_1015_TypeChoicePairVal> y_ForceToleranceT_1015_TypeChoicePair
%type <ForceToleranceT_1032_TypeVal>  y_ForceToleranceT_1032_ForceToleranceT_1032_Type
%type <ForceToleranceT_1032_TypeVal>  y_ForceToleranceT_1032_Type
%type <ForceToleranceTypeVal>         y_ForceToleranceType
%type <ForceUnitTypeVal>              y_ForceUnitType
%type <ForceUnitTypeVal>              y_ForceUnit_ForceUnitType
%type <ForceUnitTypeVal>              y_ForceUnit_ForceUnitType_0
%type <ForceValueTypeVal>             y_ForceValueType
%type <XmlTokenVal>                   y_FormVariance_XmlToken
%type <DisplayStyleFormEnumTypeVal>   y_Form_DisplayStyleFormEnumType
%type <HatchStyleFormEnumTypeVal>     y_Form_HatchStyleFormEnumType
%type <MeasuredLinearValueTypeVal>    y_Form_MeasuredLinearValueType_0
%type <SimplifiedRepresentationFormEnumTypeVal> y_Form_SimplifiedRepresentationFormEnumType
%type <QIFReferenceTypeVal>           y_FormalStandardId_QIFReferenceType
%type <DigitalModelFormatTypeVal>     y_Format_DigitalModelFormatType_0
%type <CompositeSegmentPositionDefinitionTypeVal> y_FourthCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0
%type <CompositeSegmentPositionMeasurementTypeVal> y_FourthCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0
%type <CompositeSegmentPositionStatsEvalTypeVal> y_FourthCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType_0
%type <CompositeSegmentProfileDefinitionTypeVal> y_FourthCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
%type <CompositeSegmentProfileMeasurementTypeVal> y_FourthCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
%type <CompositeSegmentProfileStatsEvalTypeVal> y_FourthCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType_0
%type <FractionTypeVal>               y_FractionType
%type <XmlDecimalVal>                 y_Fraction_XmlDecimal
%type <FrameCircularTypeVal>          y_FrameCircularType
%type <FrameCircularTypeVal>          y_FrameCircular_FrameCircularType
%type <FrameFlagTypeVal>              y_FrameFlagType
%type <FrameFlagTypeVal>              y_FrameFlag_FrameFlagType
%type <FrameHexagonalTypeVal>         y_FrameHexagonalType
%type <FrameHexagonalTypeVal>         y_FrameHexagonal_FrameHexagonalType
%type <FrameIrregularFormTypeVal>     y_FrameIrregularFormType
%type <FrameIrregularFormTypeVal>     y_FrameIrregularForm_FrameIrregularFormType
%type <FrameOctagonalTypeVal>         y_FrameOctagonalType
%type <FrameOctagonalTypeVal>         y_FrameOctagonal_FrameOctagonalType
%type <FramePentagonalTypeVal>        y_FramePentagonalType
%type <FramePentagonalTypeVal>        y_FramePentagonal_FramePentagonalType
%type <FrameRectangularTypeVal>       y_FrameRectangularType
%type <FrameRectangularTypeVal>       y_FrameRectangular_FrameRectangularType
%type <FrameTriangleTypeVal>          y_FrameTriangleType
%type <FrameTriangleTypeVal>          y_FrameTriangle_FrameTriangleType
%type <FrameWeldSymbolTailTypeVal>    y_FrameWeldSymbolTailType
%type <FrameWeldSymbolTypeVal>        y_FrameWeldSymbolType
%type <FrameWeldSymbolTypeVal>        y_FrameWeldSymbol_FrameWeldSymbolType
%type <FrameBaseTypeVal>              y_Frame_substituteType
%type <FramesTypeVal>                 y_FramesType
%type <FramesTypeVal>                 y_Frames_FramesType_0
%type <XmlBooleanVal>                 y_FreeState_XmlBoolean_0
%type <UserDefinedUnitValueTypeVal>   y_FrequencyResponse_UserDefinedUnitValueType_0
%type <CircleFromConeTypeVal>         y_FromCone_CircleFromConeType
%type <PointFeatureFromConeTypeVal>   y_FromCone_PointFeatureFromConeType
%type <QIFReferenceFullTypeVal>       y_FromCurveZoneId_QIFReferenceFullType
%type <ThreadedFeatureFromCylinderTypeVal> y_FromCylinder_ThreadedFeatureFromCylinderType
%type <QIFReferenceFullTypeVal>       y_FromPointZoneId_QIFReferenceFullType
%type <CircleFromScanTypeVal>         y_FromScan_CircleFromScanType
%type <CircularArcFromScanTypeVal>    y_FromScan_CircularArcFromScanType
%type <ConeFromScanTypeVal>           y_FromScan_ConeFromScanType
%type <CylinderFromScanTypeVal>       y_FromScan_CylinderFromScanType
%type <EdgePointFromScanTypeVal>      y_FromScan_EdgePointFromScanType
%type <EllipseFromScanTypeVal>        y_FromScan_EllipseFromScanType
%type <EllipticalArcFromScanTypeVal>  y_FromScan_EllipticalArcFromScanType
%type <LineFromScanTypeVal>           y_FromScan_LineFromScanType
%type <OppositeAngledLinesFromScanTypeVal> y_FromScan_OppositeAngledLinesFromScanType
%type <OppositeAngledPlanesFromScanTypeVal> y_FromScan_OppositeAngledPlanesFromScanType
%type <OppositeParallelLinesFromScanTypeVal> y_FromScan_OppositeParallelLinesFromScanType
%type <OppositeParallelPlanesFromScanTypeVal> y_FromScan_OppositeParallelPlanesFromScanType
%type <PointDefinedCurveFromScanTypeVal> y_FromScan_PointDefinedCurveFromScanType
%type <PointFeatureFromScanTypeVal>   y_FromScan_PointFeatureFromScanType
%type <SphereFromScanTypeVal>         y_FromScan_SphereFromScanType
%type <TorusFromScanTypeVal>          y_FromScan_TorusFromScanType
%type <AngularValueTypeVal>           y_FullAngle_AngularValueType
%type <MeasuredAngularValueTypeVal>   y_FullAngle_MeasuredAngularValueType
%type <FunctionDiscreteTypeVal>       y_FunctionDiscreteType
%type <StatsLinearTypeVal>            y_FunctionalSizeStats_StatsLinearType_0
%type <MeasuredLinearValueTypeVal>    y_FunctionalSize_MeasuredLinearValueType_0
%type <GDTEnumTypeVal>                y_GDTEnumType
%type <GDTEnumTypeVal>                y_GDT_GDTEnumType_0
%type <GageDeviceTypeVal>             y_GageDeviceType
%type <GageDeviceTypeVal>             y_GageDevice_GageDeviceType
%type <GageMeasureFeatureMethodTypeVal> y_GageMeasureFeatureMethodType
%type <GageMeasureFeatureMethodTypeVal> y_GageMeasureFeatureMethod_GageMeasureFeatureMethodType
%type <GageRandRStudyEnumTypeVal>     y_GageRandRStudyEnumType
%type <GageRandRStudyP_1201_TypeVal>  y_GageRandRStudyP_1201_GageRandRStudyP_1201_Type_0
%type <GageRandRStudyP_1201_TypeVal>  y_GageRandRStudyP_1201_Type
%type <GageRandRStudyP_1201_TypeChoicePairVal> y_GageRandRStudyP_1201_TypeChoicePair
%type <GageRandRStudyP_1202_TypeVal>  y_GageRandRStudyP_1202_GageRandRStudyP_1202_Type_0
%type <GageRandRStudyP_1202_TypeVal>  y_GageRandRStudyP_1202_Type
%type <GageRandRStudyP_1202_TypeChoicePairVal> y_GageRandRStudyP_1202_TypeChoicePair
%type <GageRandRStudyP_1203_TypeVal>  y_GageRandRStudyP_1203_GageRandRStudyP_1203_Type_0
%type <GageRandRStudyP_1203_TypeVal>  y_GageRandRStudyP_1203_Type
%type <GageRandRStudyP_1203_TypeChoicePairVal> y_GageRandRStudyP_1203_TypeChoicePair
%type <GageRandRStudyPlanTypeVal>     y_GageRandRStudyPlanType
%type <GageRandRStudyPlanTypeVal>     y_GageRandRStudyPlan_GageRandRStudyPlanType
%type <GageRandRStudyResultsTypeVal>  y_GageRandRStudyResultsType
%type <GageRandRStudyResultsTypeVal>  y_GageRandRStudyResults_GageRandRStudyResultsType
%type <StatsMeasuredDecimalTypeVal>   y_GageRandR_StatsMeasuredDecimalType
%type <Curve13CoreTypeVal>            y_Generatrix_Curve13CoreType
%type <GeometricCharac_1057_TypeVal>  y_GeometricCharac_1057_GeometricCharac_1057_Type_0
%type <GeometricCharac_1057_TypeVal>  y_GeometricCharac_1057_Type
%type <GeometricCharac_1057_TypeChoicePairVal> y_GeometricCharac_1057_TypeChoicePair
%type <ArrayReferenceFullTypeVal>     y_GeometricCharacteristicIds_ArrayReferenceFullType
%type <GeometricCharacteristicStatsEvalTypeVal> y_GeometricCharacteristicStatsEvalType
%type <GeometricCharacteristicStatsEvalTypeVal> y_GeometricCharacteristicStats_GeometricCharacteristicStatsEvalType
%type <XmlBooleanVal>                 y_GeometricCharacteristicValue_XmlBoolean
%type <XmlBooleanVal>                 y_GeometricCharacteristicValue_XmlBoolean_0
%type <GeometrySetTypeVal>            y_GeometrySetType
%type <GeometrySetTypeVal>            y_GeometrySet_GeometrySetType_0
%type <XmlDecimalVal>                 y_GoodnessOfFitThreshold_XmlDecimal_0
%type <MeasuredDecimalTypeVal>        y_GoodnessOfFit_MeasuredDecimalType_0
%type <StatsMeasuredDecimalTypeVal>   y_GoodnessOfFit_StatsMeasuredDecimalType
%type <XmlTokenVal>                   y_Grade_XmlToken
%type <GraphicsTypeVal>               y_GraphicsType
%type <GraphicsTypeVal>               y_Graphics_GraphicsType_0
%type <GreaterOrEqualTypeVal>         y_GreaterOrEqualType
%type <GreaterOrEqualTypeVal>         y_GreaterOrEqual_GreaterOrEqualType
%type <GreaterThanTypeVal>            y_GreaterThanType
%type <GreaterThanTypeVal>            y_GreaterThan_GreaterThanType
%type <FractionTypeVal>               y_Groove_FractionType_0
%type <GroupFeatureDef_1104_TypeVal>  y_GroupFeatureDef_1104_GroupFeatureDef_1104_Type_0
%type <GroupFeatureDef_1104_TypeVal>  y_GroupFeatureDef_1104_Type
%type <GroupFeatureDef_1104_TypeChoicePairVal> y_GroupFeatureDef_1104_TypeChoicePair
%type <GroupFeatureDefinitionTypeVal> y_GroupFeatureDefinitionType
%type <GroupFeatureDefinitionTypeVal> y_GroupFeatureDefinition_GroupFeatureDefinitionType
%type <GroupFeatureItemTypeVal>       y_GroupFeatureItemType
%type <GroupFeatureItemTypeVal>       y_GroupFeatureItem_GroupFeatureItemType
%type <GroupFeatureMeasurementTypeVal> y_GroupFeatureMeasurementType
%type <GroupFeatureMeasurementTypeVal> y_GroupFeatureMeasurement_GroupFeatureMeasurementType
%type <GroupFeatureNominalTypeVal>    y_GroupFeatureNominalType
%type <GroupFeatureNominalTypeVal>    y_GroupFeatureNominal_GroupFeatureNominalType
%type <I2TypeVal>                     y_GroupID_I2Type_0
%type <QIFReferenceFullTypeVal>       y_GroupId_QIFReferenceFullType
%type <AngularValueTypeVal>           y_HalfAngle_AngularValueType
%type <MeasuredAngularValueTypeVal>   y_HalfAngle_MeasuredAngularValueType
%type <HaltActionTypeVal>             y_HaltActionType
%type <HaltActionTypeVal>             y_Halt_HaltActionType
%type <HatchPatternTypeVal>           y_HatchPatternType
%type <HatchPatternsTypeVal>          y_HatchPatternsType
%type <HatchStyleFormEnumTypeVal>     y_HatchStyleFormEnumType
%type <QIFReferenceTypeVal>           y_HatchStyleId_QIFReferenceType_0
%type <HatchStyleSetTypeVal>          y_HatchStyleSetType
%type <HatchStyleSetTypeVal>          y_HatchStyleSet_HatchStyleSetType_0
%type <HatchStyleTypeVal>             y_HatchStyleType
%type <HatchStyleTypeVal>             y_HatchStyle_HatchStyleType
%type <LeaderHeadFormEnumTypeVal>     y_HeadForm2_LeaderHeadFormEnumType
%type <LeaderHeadFormTypeVal>         y_HeadForm_LeaderHeadFormType
%type <XmlDoubleVal>                  y_HeadHeight_XmlDouble
%type <MassValueTypeVal>              y_HeadMass_MassValueType_0
%type <CartesianWorkingVolumeTypeVal> y_HeadSize_CartesianWorkingVolumeType_0
%type <PartAssemblyHeaderTypeVal>     y_Header_PartAssemblyHeaderType_0
%type <ProductHeaderTypeVal>          y_Header_ProductHeaderType_0
%type <QIFDocumentHeaderTypeVal>      y_Header_QIFDocumentHeaderType_0
%type <HeightCharacteristicDefinitionTypeVal> y_HeightCharacteristicDefinitionType
%type <HeightCharacteristicDefinitionTypeVal> y_HeightCharacteristicDefinition_HeightCharacteristicDefinitionType
%type <HeightCharacteristicItemTypeVal> y_HeightCharacteristicItemType
%type <HeightCharacteristicItemTypeVal> y_HeightCharacteristicItem_HeightCharacteristicItemType
%type <HeightCharacteristicMeasurementTypeVal> y_HeightCharacteristicMeasurementType
%type <HeightCharacteristicMeasurementTypeVal> y_HeightCharacteristicMeasurement_HeightCharacteristicMeasurementType
%type <HeightCharacteristicNominalTypeVal> y_HeightCharacteristicNominalType
%type <HeightCharacteristicNominalTypeVal> y_HeightCharacteristicNominal_HeightCharacteristicNominalType
%type <HeightCharacteristicStatsEvalTypeVal> y_HeightCharacteristicStatsEvalType
%type <HeightCharacteristicStatsEvalTypeVal> y_HeightCharacteristicStats_HeightCharacteristicStatsEvalType
%type <LinearValueTypeVal>            y_Height_LinearValueType
%type <XmlDoubleVal>                  y_Height_XmlDouble
%type <PointTypeVal>                  y_HomeLocation_PointType_0
%type <LinearValueTypeVal>            y_HorizontalFieldOfView_LinearValueType_0
%type <XmlStringVal>                  y_HousingMaterial_XmlString_0
%type <LinearValueTypeVal>            y_Hysteresis_LinearValueType_0
%type <I2TypeVal>                     y_I2Type
%type <XmlNMTOKENVal>                 y_ISBN_XmlNMTOKEN_0
%type <ISO10360TestTyp_1240_TypeVal>  y_ISO10360TestTyp_1240_ISO10360TestTyp_1240_Type
%type <ISO10360TestTyp_1240_TypeVal>  y_ISO10360TestTyp_1240_Type
%type <ISO10360TestTyp_1240_TypeChoicePairVal> y_ISO10360TestTyp_1240_TypeChoicePair
%type <ISO10360TestTypeVal>           y_ISO10360TestType
%type <ISODegreeOfFreedomEnumTypeVal> y_ISODegreeOfFreedomEnumType
%type <ISODegreeOfFreedomEnumTypeVal> y_ISODegreeOfFreedom_ISODegreeOfFreedomEnumType
%type <QIFReferenceActiveTypeVal>     y_Id_QIFReferenceActiveType
%type <QIFReferenceFullTypeVal>       y_Id_QIFReferenceFullType
%type <QIFReferenceSimpleTypeVal>     y_Id_QIFReferenceSimpleType
%type <QIFReferenceTypeVal>           y_Id_QIFReferenceType
%type <QIFReferenceTypeVal>           y_Id_QIFReferenceType_0
%type <ArrayBinaryTypeVal>            y_Ids_ArrayBinaryType
%type <ArrayReferenceTypeVal>         y_Ids_ArrayReferenceType
%type <ArrayReferenceTypeVal>         y_Ids_ArrayReferenceType_0
%type <ListQIFReferenceSimpleTypeVal> y_Ids_ListQIFReferenceSimpleType
%type <IfActionGroupTypeVal>          y_IfActionGroupType
%type <IfActionGroupTypeVal>          y_IfActionGroup_IfActionGroupType
%type <IfThenCircleRuleTypeVal>       y_IfThenCircleRuleType
%type <IfThenCircleRuleTypeVal>       y_IfThenCircleRule_IfThenCircleRuleType
%type <IfThenCircularArcRuleTypeVal>  y_IfThenCircularArcRuleType
%type <IfThenCircularArcRuleTypeVal>  y_IfThenCircularArcRule_IfThenCircularArcRuleType
%type <IfThenConeRuleTypeVal>         y_IfThenConeRuleType
%type <IfThenConeRuleTypeVal>         y_IfThenConeRule_IfThenConeRuleType
%type <IfThenConicalSegmentRuleTypeVal> y_IfThenConicalSegmentRuleType
%type <IfThenConicalSegmentRuleTypeVal> y_IfThenConicalSegmentRule_IfThenConicalSegmentRuleType
%type <IfThenCurveRuleTypeVal>        y_IfThenCurveRuleType
%type <IfThenCurveRuleTypeVal>        y_IfThenCurveRule_IfThenCurveRuleType
%type <IfThenCylinderRuleTypeVal>     y_IfThenCylinderRuleType
%type <IfThenCylinderRuleTypeVal>     y_IfThenCylinderRule_IfThenCylinderRuleType
%type <IfThenCylindricalSegmentRuleTypeVal> y_IfThenCylindricalSegmentRuleType
%type <IfThenCylindricalSegmentRuleTypeVal> y_IfThenCylindricalSegmentRule_IfThenCylindricalSegmentRuleType
%type <IfThenDMERuleTypeVal>          y_IfThenDMERuleType
%type <IfThenEllipseRuleTypeVal>      y_IfThenEllipseRuleType
%type <IfThenEllipseRuleTypeVal>      y_IfThenEllipseRule_IfThenEllipseRuleType
%type <IfThenEllipticalArcRuleTypeVal> y_IfThenEllipticalArcRuleType
%type <IfThenEllipticalArcRuleTypeVal> y_IfThenEllipticalArcRule_IfThenEllipticalArcRuleType
%type <IfThenElongatedCircleRuleTypeVal> y_IfThenElongatedCircleRuleType
%type <IfThenElongatedCircleRuleTypeVal> y_IfThenElongatedCircleRule_IfThenElongatedCircleRuleType
%type <IfThenElongatedCylinderRuleTypeVal> y_IfThenElongatedCylinderRuleType
%type <IfThenElongatedCylinderRuleTypeVal> y_IfThenElongatedCylinderRule_IfThenElongatedCylinderRuleType
%type <IfThenElseFeatureRulesTypeVal> y_IfThenElseFeatureRulesType
%type <IfThenElseFeatureRulesTypeVal> y_IfThenElseFeatureRules_IfThenElseFeatureRulesType_0
%type <IfThenExtrudedCrossSectionRuleTypeVal> y_IfThenExtrudedCrossSectionRuleType
%type <IfThenExtrudedCrossSectionRuleTypeVal> y_IfThenExtrudedCrossSectionRule_IfThenExtrudedCrossSectionRuleType
%type <IfThenFeatureRuleTypeVal>      y_IfThenFeatureRuleType
%type <IfThenFeatureRuleTypeVal>      y_IfThenFeatureRule_IfThenFeatureRuleType
%type <IfThenFeatureRuleTypeVal>      y_IfThenFeatureRule_substituteType
%type <IfThenLineRuleTypeVal>         y_IfThenLineRuleType
%type <IfThenLineRuleTypeVal>         y_IfThenLineRule_IfThenLineRuleType
%type <IfThenOppositeAngledLinesRuleTypeVal> y_IfThenOppositeAngledLinesRuleType
%type <IfThenOppositeAngledLinesRuleTypeVal> y_IfThenOppositeAngledLinesRule_IfThenOppositeAngledLinesRuleType
%type <IfThenOppositeAngledPlanesRuleTypeVal> y_IfThenOppositeAngledPlanesRuleType
%type <IfThenOppositeAngledPlanesRuleTypeVal> y_IfThenOppositeAngledPlanesRule_IfThenOppositeAngledPlanesRuleType
%type <IfThenOppositeParallelLinesRuleTypeVal> y_IfThenOppositeParallelLinesRuleType
%type <IfThenOppositeParallelLinesRuleTypeVal> y_IfThenOppositeParallelLinesRule_IfThenOppositeParallelLinesRuleType
%type <IfThenOppositeParallelPlanesRuleTypeVal> y_IfThenOppositeParallelPlanesRuleType
%type <IfThenOppositeParallelPlanesRuleTypeVal> y_IfThenOppositeParallelPlanesRule_IfThenOppositeParallelPlanesRuleType
%type <IfThenPlaneRuleTypeVal>        y_IfThenPlaneRuleType
%type <IfThenPlaneRuleTypeVal>        y_IfThenPlaneRule_IfThenPlaneRuleType
%type <IfThenPointDefinedCurveRuleTypeVal> y_IfThenPointDefinedCurveRuleType
%type <IfThenPointDefinedCurveRuleTypeVal> y_IfThenPointDefinedCurveRule_IfThenPointDefinedCurveRuleType
%type <IfThenPointDefinedSurfaceRuleTypeVal> y_IfThenPointDefinedSurfaceRuleType
%type <IfThenPointDefinedSurfaceRuleTypeVal> y_IfThenPointDefinedSurfaceRule_IfThenPointDefinedSurfaceRuleType
%type <IfThenPointRuleTypeVal>        y_IfThenPointRuleType
%type <IfThenPointRuleTypeVal>        y_IfThenPointRule_IfThenPointRuleType
%type <IfThenSphereRuleTypeVal>       y_IfThenSphereRuleType
%type <IfThenSphereRuleTypeVal>       y_IfThenSphereRule_IfThenSphereRuleType
%type <IfThenSphericalSegmentRuleTypeVal> y_IfThenSphericalSegmentRuleType
%type <IfThenSphericalSegmentRuleTypeVal> y_IfThenSphericalSegmentRule_IfThenSphericalSegmentRuleType
%type <IfThenSurfaceOfRevolutionRuleTypeVal> y_IfThenSurfaceOfRevolutionRuleType
%type <IfThenSurfaceOfRevolutionRuleTypeVal> y_IfThenSurfaceOfRevolutionRule_IfThenSurfaceOfRevolutionRuleType
%type <IfThenSurfaceRuleTypeVal>      y_IfThenSurfaceRuleType
%type <IfThenSurfaceRuleTypeVal>      y_IfThenSurfaceRule_IfThenSurfaceRuleType
%type <IfThenToroidalSegmentRuleTypeVal> y_IfThenToroidalSegmentRuleType
%type <IfThenToroidalSegmentRuleTypeVal> y_IfThenToroidalSegmentRule_IfThenToroidalSegmentRuleType
%type <IfThenTorusRuleTypeVal>        y_IfThenTorusRuleType
%type <IfThenTorusRuleTypeVal>        y_IfThenTorusRule_IfThenTorusRuleType
%type <TestAndPlanElementTypeVal>     y_If_TestAndPlanElementType
%type <XmlStringVal>                  y_IlluminationUnit_XmlString_0
%type <ImageInstructionTypeVal>       y_ImageInstructionType
%type <ImageInstructionTypeVal>       y_ImageInstruction_ImageInstructionType
%type <XmlDecimalVal>                 y_InSpecRatio_XmlDecimal
%type <XmlDecimalVal>                 y_InSpecRatio_XmlDecimal_0
%type <AngularValueTypeVal>           y_IncrementalArc_AngularValueType
%type <LinearValueTypeVal>            y_IncrementalDistance_LinearValueType
%type <LinearValueTypeVal>            y_IncrementalRowDistance_LinearValueType
%type <XmlBooleanVal>                 y_Independency_XmlBoolean_0
%type <XmlPositiveIntegerVal>         y_Index_XmlPositiveInteger
%type <OrganizationTypeVal>           y_InspectingOrganization_OrganizationType_0
%type <XmlDateTimeVal>                y_InspectionEnd_XmlDateTime_0
%type <InspectionModeEnumTypeVal>     y_InspectionModeEnumType
%type <InspectionModeEnumTypeVal>     y_InspectionMode_InspectionModeEnumType_0
%type <EmployeeTypeVal>               y_InspectionOperator_EmployeeType_0
%type <ArrayReferenceTypeVal>         y_InspectionProgramExecutionSoftware_ArrayReferenceType_0
%type <ArrayReferenceTypeVal>         y_InspectionProgramGenerationSoftware_ArrayReferenceType_0
%type <InspectionProgramTypeVal>      y_InspectionProgramType
%type <InspectionProgramTypeVal>      y_InspectionProgram_InspectionProgramType_0
%type <InspectionScopeEnumTypeVal>    y_InspectionScopeEnumType
%type <InspectionScopeEnumTypeVal>    y_InspectionScope_InspectionScopeEnumType_0
%type <InspectionSoftwareItemsTypeVal> y_InspectionSoftwareItemsType
%type <InspectionSoftwareItemsTypeVal> y_InspectionSoftwareItems_InspectionSoftwareItemsType_0
%type <XmlDateTimeVal>                y_InspectionStart_XmlDateTime_0
%type <InspectionStatusEnumTypeVal>   y_InspectionStatusEnumType
%type <InspectionStatusEnumTypeVal>   y_InspectionStatusEnum_InspectionStatusEnumType
%type <InspectionStatusTypeVal>       y_InspectionStatusType
%type <InspectionStatusTypeChoicePairVal> y_InspectionStatusTypeChoicePair
%type <InspectionStatusTypeVal>       y_InspectionStatus_InspectionStatusType
%type <InspectionTrace_1042_TypeVal>  y_InspectionTrace_1042_InspectionTrace_1042_Type_0
%type <InspectionTrace_1042_TypeVal>  y_InspectionTrace_1042_Type
%type <InspectionTrace_1042_TypeChoicePairVal> y_InspectionTrace_1042_TypeChoicePair
%type <InspectionTraceabilityTypeVal> y_InspectionTraceabilityType
%type <InspectionTraceabilityTypeVal> y_InspectionTraceability_InspectionTraceabilityType_0
%type <ValidationPartAssemblyInstanceTypeVal> y_Instance_ValidationPartAssemblyInstanceType
%type <ValidationPartAssemblyInstancesTypeVal> y_Instances_ValidationPartAssemblyInstancesType_0
%type <StatsMeasuredDecimalTypeVal>   y_Interaction_StatsMeasuredDecimalType
%type <QIFReferenceFullTypeVal>       y_InternalCADCoordinateSystemId_QIFReferenceFullType_0
%type <InternalExternalEnumTypeVal>   y_InternalExternalEnumType
%type <InternalExternalEnumTypeVal>   y_InternalExternal_InternalExternalEnumType
%type <InternalExternalEnumTypeVal>   y_InternalExternal_InternalExternalEnumType_0
%type <XmlTokenVal>                   y_InternalLocation_XmlToken_0
%type <BaseFeatureTypeVal>            y_IntersectionFeature_BaseFeatureType
%type <SequencedBaseFeatureTypeVal>   y_IntersectionFeature_SequencedBaseFeatureType
%type <IntersectionPlaneEnumTypeVal>  y_IntersectionPlaneEnumType
%type <IntersectionPlaneEnumTypeVal>  y_IntersectionPlaneEnum_IntersectionPlaneEnumType
%type <IntersectionPlaneTypeVal>      y_IntersectionPlaneType
%type <BaseFeatureTypeVal>            y_IntersectionPlane_BaseFeatureType
%type <IntersectionPlaneTypeVal>      y_IntersectionPlane_IntersectionPlaneType_0
%type <CircleIntersectionTypeVal>     y_Intersection_CircleIntersectionType
%type <CircularArcIntersectionTypeVal> y_Intersection_CircularArcIntersectionType
%type <EllipseIntersectionTypeVal>    y_Intersection_EllipseIntersectionType
%type <EllipticalArcIntersectionTypeVal> y_Intersection_EllipticalArcIntersectionType
%type <LineIntersectionTypeVal>       y_Intersection_LineIntersectionType
%type <OppositeAngledLinesIntersectionTypeVal> y_Intersection_OppositeAngledLinesIntersectionType
%type <OppositeParallelLinesIntersectionTypeVal> y_Intersection_OppositeParallelLinesIntersectionType
%type <PointFeatureIntersectionTypeVal> y_Intersection_PointFeatureIntersectionType
%type <XmlBooleanVal>                 y_IsCounterboredHole_XmlBoolean
%type <XmlBooleanVal>                 y_IsCountersunkHole_XmlBoolean
%type <XmlBooleanVal>                 y_IsProfileGroup_XmlBoolean_0
%type <XmlBooleanVal>                 y_IsRunoutGroup_XmlBoolean_0
%type <XmlBooleanVal>                 y_IsSpotface_XmlBoolean
%type <QPIdReferenceTypeVal>          y_ItemQPId_QPIdReferenceType
%type <XmlStringVal>                  y_Job_XmlString_0
%type <CartesianCMMSpeedsTypeVal>     y_JoystickSpeeds_CartesianCMMSpeedsType_0
%type <ArrayDoubleTypeVal>            y_KnotsU_ArrayDoubleType
%type <ArrayDoubleTypeVal>            y_KnotsV_ArrayDoubleType
%type <ArrayDoubleTypeVal>            y_Knots_ArrayDoubleType
%type <StatsMeasuredDecimalTypeVal>   y_Kurtosis_StatsMeasuredDecimalType
%type <LinearVariableDifferentialTransformerSensorTypeVal> y_LVDTSensor_LinearVariableDifferentialTransformerSensorType
%type <XmlTokenVal>                   y_Label_XmlToken_0
%type <LinearValueTypeVal>            y_LargeEndDistance_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_LargeEndDistance_MeasuredLinearValueType_0
%type <XmlStringVal>                  y_LaserClass_XmlString_0
%type <LinearValueTypeVal>            y_LaserEffectiveLength_LinearValueType_0
%type <UserDefinedUnitValueTypeVal>   y_LaserPowerSupply_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_LaserPower_UserDefinedUnitValueType_0
%type <LaserRadarMeasureFeatureMethodTypeVal> y_LaserRadarMeasureFeatureMethodType
%type <LaserRadarMeasureFeatureMethodTypeVal> y_LaserRadarMeasureFeatureMethod_LaserRadarMeasureFeatureMethodType
%type <LaserRadarTypeVal>             y_LaserRadarType
%type <LaserRadarTypeVal>             y_LaserRadar_LaserRadarType
%type <XmlStringVal>                  y_LaserSafetyClass_XmlString_0
%type <XmlStringVal>                  y_LaserSource_XmlString_0
%type <LinearValueTypeVal>            y_LaserSpotSize_LinearValueType_0
%type <LaserTrackerMeasureFeatureMethodTypeVal> y_LaserTrackerMeasureFeatureMethodType
%type <LaserTrackerMeasureFeatureMethodTypeVal> y_LaserTrackerMeasureFeatureMethod_LaserTrackerMeasureFeatureMethodType
%type <LaserTrackerTypeVal>           y_LaserTrackerType
%type <LaserTrackerTypeVal>           y_LaserTracker_LaserTrackerType
%type <LaserTriangulationSensorTypeVal> y_LaserTriangulationSensorType
%type <LaserTriangulationSensorTypeVal> y_LaserTriangulationSensor_LaserTriangulationSensorType
%type <LaserTypeVal>                  y_LaserType
%type <LinearValueTypeVal>            y_LaserWaveLength_LinearValueType_0
%type <LaserTypeVal>                  y_Laser_LaserType_0
%type <SpeedValueTypeVal>             y_LateralTrackingSpeed_SpeedValueType_0
%type <OrientedLatitudeLongitudeSweepTypeVal> y_LatitudeLongitudeSweepFull_OrientedLatitudeLongitudeSweepType_0
%type <OrientedLatitudeLongitudeSweepTypeVal> y_LatitudeLongitudeSweepMeasurementRange_OrientedLatitudeLongitudeSweepType_0
%type <LatitudeLongitudeSweepTypeVal> y_LatitudeLongitudeSweepType
%type <LatitudeLongitudeSweepTypeVal> y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType
%type <LatitudeLongitudeSweepTypeVal> y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType_0
%type <OrientedLatitudeLongitudeSweepTypeVal> y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType
%type <OrientedLatitudeLongitudeSweepTypeVal> y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType_0
%type <LayerSetTypeVal>               y_LayerSetType
%type <LayerSetTypeVal>               y_LayerSet_LayerSetType_0
%type <LayerTypeVal>                  y_LayerType
%type <LayerTypeVal>                  y_Layer_LayerType
%type <LeaderCircularTypeVal>         y_LeaderCircularType
%type <LeaderCircularTypeVal>         y_LeaderCircular_LeaderCircularType
%type <LeaderDoubleHeadCircularTypeVal> y_LeaderDoubleHeadCircularType
%type <LeaderDoubleHeadCircularTypeVal> y_LeaderDoubleHeadCircular_LeaderDoubleHeadCircularType
%type <LeaderDoubleHeadExtendTypeVal> y_LeaderDoubleHeadExtendType
%type <LeaderDoubleHeadExtendTypeVal> y_LeaderDoubleHeadExtend_LeaderDoubleHeadExtendType
%type <LeaderDoubleHeadTypeVal>       y_LeaderDoubleHeadType
%type <LeaderDoubleHeadTypeVal>       y_LeaderDoubleHead_LeaderDoubleHeadType
%type <LeaderExtendTypeVal>           y_LeaderExtendType
%type <LeaderExtendTypeVal>           y_LeaderExtend_LeaderExtendType
%type <LeaderHeadFormEnumTypeVal>     y_LeaderHeadFormEnumType
%type <LeaderHeadFormTypeVal>         y_LeaderHeadFormType
%type <LeaderModifierEnumTypeVal>     y_LeaderModifierEnumType
%type <LeaderTypeVal>                 y_LeaderType
%type <LeaderTypeVal>                 y_Leader_LeaderType
%type <LeaderTypeVal>                 y_Leader_substituteType
%type <XmlBooleanVal>                 y_LeftHanded_XmlBoolean_0
%type <LengthCharacteristicDefinitionTypeVal> y_LengthCharacteristicDefinitionType
%type <LengthCharacteristicDefinitionTypeVal> y_LengthCharacteristicDefinition_LengthCharacteristicDefinitionType
%type <LengthCharacteristicItemTypeVal> y_LengthCharacteristicItemType
%type <LengthCharacteristicItemTypeVal> y_LengthCharacteristicItem_LengthCharacteristicItemType
%type <LengthCharacteristicMeasurementTypeVal> y_LengthCharacteristicMeasurementType
%type <LengthCharacteristicMeasurementTypeVal> y_LengthCharacteristicMeasurement_LengthCharacteristicMeasurementType
%type <LengthCharacteristicNominalTypeVal> y_LengthCharacteristicNominalType
%type <LengthCharacteristicNominalTypeVal> y_LengthCharacteristicNominal_LengthCharacteristicNominalType
%type <LengthCharacteristicStatsEvalTypeVal> y_LengthCharacteristicStatsEvalType
%type <LengthCharacteristicStatsEvalTypeVal> y_LengthCharacteristicStats_LengthCharacteristicStatsEvalType
%type <UnitVectorTypeVal>             y_LengthDirection_UnitVectorType
%type <LengthFunctionDiscreteTypeVal> y_LengthFunctionDiscreteType
%type <MeasuredLinearValueTypeVal>    y_LengthMax_MeasuredLinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_LengthMin_MeasuredLinearValueType_0
%type <LinearValueTypeVal>            y_LengthOfEachWeld_LinearValueType_0
%type <MeasuredUnitVectorTypeVal>     y_LengthVector_MeasuredUnitVectorType_0
%type <UnitVectorTypeVal>             y_LengthVector_UnitVectorType_0
%type <LinearValueTypeVal>            y_Length_LinearValueType
%type <LinearValueTypeVal>            y_Length_LinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_Length_MeasuredLinearValueType
%type <MeasuredLinearValueTypeVal>    y_Length_MeasuredLinearValueType_0
%type <XmlDoubleVal>                  y_Length_XmlDouble
%type <XmlDoubleVal>                  y_Length_XmlDouble_0
%type <LessOrEqualTypeVal>            y_LessOrEqualType
%type <LessOrEqualTypeVal>            y_LessOrEqual_LessOrEqualType
%type <LessThanTypeVal>               y_LessThanType
%type <LessThanTypeVal>               y_LessThan_LessThanType
%type <LesserErrorTypeVal>            y_LesserErrorType
%type <LesserErrorTypeVal>            y_LesserError_LesserErrorType
%type <CriticalityLevelEnumTypeVal>   y_LevelEnum_CriticalityLevelEnumType
%type <ChargeCoupledDeviceCameraSensorTypeVal> y_LightPenCMMChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType_0
%type <LightPenCMMTypeVal>            y_LightPenCMMType
%type <LightPenCMMTypeVal>            y_LightPenCMM_LightPenCMMType
%type <XmlStringVal>                  y_LightSource_XmlString_0
%type <XmlDecimalVal>                 y_Limit_XmlDecimal
%type <XmlPositiveIntegerVal>         y_Limit_XmlPositiveInteger
%type <LimitingNumberT_1133_TypeVal>  y_LimitingNumberT_1133_LimitingNumberT_1133_Type
%type <LimitingNumberT_1133_TypeVal>  y_LimitingNumberT_1133_Type
%type <LimitingNumberT_1133_TypeChoicePairVal> y_LimitingNumberT_1133_TypeChoicePair
%type <LimitingNumberTypeVal>         y_LimitingNumberType
%type <LimitsAndFitsSpecificationTypeVal> y_LimitsAndFitsSpecificationType
%type <LimitsAndFitsSpecificationTypeVal> y_LimitsAndFitsSpecification_LimitsAndFitsSpecificationType
%type <LineAuxiliaryTypeVal>          y_LineAuxiliaryType
%type <LineAuxiliaryTypeVal>          y_LineAuxiliary_LineAuxiliaryType
%type <LineBestFitTypeVal>            y_LineBestFitType
%type <LineCastTypeVal>               y_LineCastType
%type <LineCheckedFeatureTypeVal>     y_LineCheckedFeatureType
%type <LineCheckedTypeVal>            y_LineCheckedType
%type <LineCheckedTypeChoicePairVal>  y_LineCheckedTypeChoicePair
%type <LineConstructionMethodTypeVal> y_LineConstructionMethodType
%type <LineConstructionMethodTypeChoicePairVal> y_LineConstructionMethodTypeChoicePair
%type <LineCopyTypeVal>               y_LineCopyType
%type <UnitVectorTypeVal>             y_LineDirection_UnitVectorType
%type <LineExtractTypeVal>            y_LineExtractType
%type <LineFeatureDefinitionTypeVal>  y_LineFeatureDefinitionType
%type <LineFeatureDefinitionTypeVal>  y_LineFeatureDefinition_LineFeatureDefinitionType
%type <LineFeatureItemTypeVal>        y_LineFeatureItemType
%type <LineFeatureItemTypeVal>        y_LineFeatureItem_LineFeatureItemType
%type <LineFeatureMeasurementTypeVal> y_LineFeatureMeasurementType
%type <LineFeatureMeasurementTypeVal> y_LineFeatureMeasurement_LineFeatureMeasurementType
%type <LineFeatureNominalTypeVal>     y_LineFeatureNominalType
%type <LineFeatureNominalTypeVal>     y_LineFeatureNominal_LineFeatureNominalType
%type <LineFromScanTypeVal>           y_LineFromScanType
%type <LineIntersectionTypeVal>       y_LineIntersectionType
%type <LineMeasurementDeterminationTypeVal> y_LineMeasurementDeterminationType
%type <LineMeasurementDeterminationTypeChoicePairVal> y_LineMeasurementDeterminationTypeChoicePair
%type <LineMidlineTypeVal>            y_LineMidlineType
%type <LineParallelTypeVal>           y_LineParallelType
%type <LinePerpendicularTypeVal>      y_LinePerpendicularType
%type <LinePointSamplingStrategyTypeVal> y_LinePointSamplingStrategyType
%type <LinePointSamplingStrategyTypeChoicePairVal> y_LinePointSamplingStrategyTypeChoicePair
%type <LineProfileCharacteristicDefinitionTypeVal> y_LineProfileCharacteristicDefinitionType
%type <LineProfileCharacteristicDefinitionTypeVal> y_LineProfileCharacteristicDefinition_LineProfileCharacteristicDefinitionType
%type <LineProfileCharacteristicItemTypeVal> y_LineProfileCharacteristicItemType
%type <LineProfileCharacteristicItemTypeVal> y_LineProfileCharacteristicItem_LineProfileCharacteristicItemType
%type <LineProfileCharacteristicMeasurementTypeVal> y_LineProfileCharacteristicMeasurementType
%type <LineProfileCharacteristicMeasurementTypeVal> y_LineProfileCharacteristicMeasurement_LineProfileCharacteristicMeasurementType
%type <LineProfileCharacteristicNominalTypeVal> y_LineProfileCharacteristicNominalType
%type <LineProfileCharacteristicNominalTypeVal> y_LineProfileCharacteristicNominal_LineProfileCharacteristicNominalType
%type <LineProfileCharacteristicStatsEvalTypeVal> y_LineProfileCharacteristicStatsEvalType
%type <LineProfileCharacteristicStatsEvalTypeVal> y_LineProfileCharacteristicStats_LineProfileCharacteristicStatsEvalType
%type <LineProjectionTypeVal>         y_LineProjectionType
%type <LineRecompTypeVal>             y_LineRecompType
%type <LineSegment2dTypeVal>          y_LineSegment2dType
%type <LineSegmentTypeVal>            y_LineSegmentType
%type <LineStyleTypeVal>              y_LineStyleType
%type <LineStyleTypeVal>              y_LineStyle_LineStyleType_0
%type <LineTangentThroughTypeVal>     y_LineTangentThroughType
%type <LineTransformTypeVal>          y_LineTransformType
%type <LineSegmentTypeVal>            y_Line_LineSegmentType
%type <MeasuredLinearValueTypeVal>    y_LinearAbsoluteLinearity_MeasuredLinearValueType
%type <LinearAxisTypeVal>             y_LinearAxisType
%type <LinearAxisTypeVal>             y_LinearAxis_LinearAxisType
%type <LinearCharacter_1058_TypeVal>  y_LinearCharacter_1058_LinearCharacter_1058_Type
%type <LinearCharacter_1058_TypeVal>  y_LinearCharacter_1058_Type
%type <LinearCharacter_1058_TypeChoicePairVal> y_LinearCharacter_1058_TypeChoicePair
%type <LinearCharacter_1134_TypeVal>  y_LinearCharacter_1134_LinearCharacter_1134_Type
%type <LinearCharacter_1134_TypeVal>  y_LinearCharacter_1134_Type
%type <LinearCharacter_1134_TypeChoicePairVal> y_LinearCharacter_1134_TypeChoicePair
%type <LinearCharacter_1153_TypeVal>  y_LinearCharacter_1153_LinearCharacter_1153_Type
%type <LinearCharacter_1153_TypeVal>  y_LinearCharacter_1153_Type
%type <LinearCharacter_1154_TypeVal>  y_LinearCharacter_1154_LinearCharacter_1154_Type
%type <LinearCharacter_1154_TypeVal>  y_LinearCharacter_1154_Type
%type <LinearCharacter_1155_TypeVal>  y_LinearCharacter_1155_LinearCharacter_1155_Type
%type <LinearCharacter_1155_TypeVal>  y_LinearCharacter_1155_Type
%type <LinearCharacter_1156_TypeVal>  y_LinearCharacter_1156_LinearCharacter_1156_Type
%type <LinearCharacter_1156_TypeVal>  y_LinearCharacter_1156_Type
%type <LinearCharacteristicStatsEvalTypeVal> y_LinearCharacteristicStatsEvalType
%type <LinearCharacteristicStatsEvalTypeVal> y_LinearCharacteristicStats_LinearCharacteristicStatsEvalType
%type <LinearCoordinat_1059_TypeVal>  y_LinearCoordinat_1059_LinearCoordinat_1059_Type
%type <LinearCoordinat_1059_TypeVal>  y_LinearCoordinat_1059_Type
%type <LinearCoordinat_1059_TypeChoicePairVal> y_LinearCoordinat_1059_TypeChoicePair
%type <LinearCoordinateCharacteristicDefinitionTypeVal> y_LinearCoordinateCharacteristicDefinitionType
%type <LinearCoordinateCharacteristicDefinitionTypeVal> y_LinearCoordinateCharacteristicDefinition_LinearCoordinateCharacteristicDefinitionType
%type <LinearCoordinateCharacteristicItemTypeVal> y_LinearCoordinateCharacteristicItemType
%type <LinearCoordinateCharacteristicItemTypeVal> y_LinearCoordinateCharacteristicItem_LinearCoordinateCharacteristicItemType
%type <LinearCoordinateCharacteristicMeasurementTypeVal> y_LinearCoordinateCharacteristicMeasurementType
%type <LinearCoordinateCharacteristicMeasurementTypeVal> y_LinearCoordinateCharacteristicMeasurement_LinearCoordinateCharacteristicMeasurementType
%type <LinearCoordinateCharacteristicNominalTypeVal> y_LinearCoordinateCharacteristicNominalType
%type <LinearCoordinateCharacteristicNominalTypeVal> y_LinearCoordinateCharacteristicNominal_LinearCoordinateCharacteristicNominalType
%type <LinearCoordinateCharacteristicStatsEvalTypeVal> y_LinearCoordinateCharacteristicStatsEvalType
%type <LinearCoordinateCharacteristicStatsEvalTypeVal> y_LinearCoordinateCharacteristicStats_LinearCoordinateCharacteristicStatsEvalType
%type <LinearCoordinateDirectionEnumTypeVal> y_LinearCoordinateDirectionEnumType
%type <CriterionLinearTypeVal>        y_LinearCriterion_CriterionLinearType_0
%type <LinearDualValueTypeVal>        y_LinearDualValueType
%type <LinearErrorTypeVal>            y_LinearErrorType
%type <LinearErrorTypeVal>            y_LinearError_LinearErrorType
%type <LinearValueTypeVal>            y_LinearLimit_LinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_LinearMeasurement_MeasuredLinearValueType_0
%type <LinearOrRotaryAxisTypeVal>     y_LinearOrRotaryAxisType
%type <LinearResolutionTypeVal>       y_LinearResolutionType
%type <LinearResolutionTypeVal>       y_LinearResolution_LinearResolutionType
%type <LinearResolutionTypeVal>       y_LinearResolution_LinearResolutionType_0
%type <LinearValueTypeVal>            y_LinearSize_LinearValueType
%type <SummariesStatisticsLinearTypeVal> y_LinearStatsSummaries_SummariesStatisticsLinearType_0
%type <SummaryStatisticsLinearTypeVal> y_LinearStatsSummary_SummaryStatisticsLinearType
%type <LinearToleranceDefinitionTypeVal> y_LinearToleranceDefinitionType
%type <LinearToleranceTypeVal>        y_LinearToleranceType
%type <LinearTolerance_1016_TypeVal>  y_LinearTolerance_1016_LinearTolerance_1016_Type
%type <LinearTolerance_1016_TypeVal>  y_LinearTolerance_1016_Type
%type <LinearTolerance_1016_TypeChoicePairVal> y_LinearTolerance_1016_TypeChoicePair
%type <LinearTolerance_1017_TypeVal>  y_LinearTolerance_1017_LinearTolerance_1017_Type
%type <LinearTolerance_1017_TypeVal>  y_LinearTolerance_1017_Type
%type <LinearTolerance_1017_TypeChoicePairVal> y_LinearTolerance_1017_TypeChoicePair
%type <LinearTolerance_1033_TypeVal>  y_LinearTolerance_1033_LinearTolerance_1033_Type
%type <LinearTolerance_1033_TypeVal>  y_LinearTolerance_1033_Type
%type <LinearTolerance_1034_TypeVal>  y_LinearTolerance_1034_LinearTolerance_1034_Type
%type <LinearTolerance_1034_TypeVal>  y_LinearTolerance_1034_Type
%type <LinearTolerance_1035_TypeVal>  y_LinearTolerance_1035_LinearTolerance_1035_Type
%type <LinearTolerance_1035_TypeVal>  y_LinearTolerance_1035_Type
%type <LinearTolerance_1041_TypeVal>  y_LinearTolerance_1041_LinearTolerance_1041_Type_0
%type <LinearTolerance_1041_TypeVal>  y_LinearTolerance_1041_Type
%type <LinearToleranceDefinitionTypeVal> y_LinearTolerance_LinearToleranceDefinitionType
%type <LinearUnitTypeVal>             y_LinearUnitType
%type <LinearUnitTypeVal>             y_LinearUnit_LinearUnitType
%type <LinearUnitTypeVal>             y_LinearUnit_LinearUnitType_0
%type <LinearValueTypeVal>            y_LinearValueType
%type <LinearValueTypeVal>            y_LinearValue_LinearValueType
%type <LinearVariableDifferentialTransformerEnumTypeVal> y_LinearVariableDifferentialTransformerEnumType
%type <LinearVariableDifferentialTransformerSensorTypeVal> y_LinearVariableDifferentialTransformerSensorType
%type <XmlStringVal>                  y_LinearityError_XmlString_0
%type <LinearityStudyP_1204_TypeVal>  y_LinearityStudyP_1204_LinearityStudyP_1204_Type
%type <LinearityStudyP_1204_TypeVal>  y_LinearityStudyP_1204_Type
%type <LinearityStudyP_1204_TypeChoicePairVal> y_LinearityStudyP_1204_TypeChoicePair
%type <LinearityStudyPlanTypeVal>     y_LinearityStudyPlanType
%type <LinearityStudyPlanTypeVal>     y_LinearityStudyPlan_LinearityStudyPlanType
%type <LinearityStudyR_1205_TypeVal>  y_LinearityStudyR_1205_LinearityStudyR_1205_Type_0
%type <LinearityStudyR_1205_TypeVal>  y_LinearityStudyR_1205_Type
%type <LinearityStudyR_1205_TypeChoicePairVal> y_LinearityStudyR_1205_TypeChoicePair
%type <LinearityStudyResultsTypeVal>  y_LinearityStudyResultsType
%type <LinearityStudyResultsTypeVal>  y_LinearityStudyResults_LinearityStudyResultsType
%type <StatsMeasuredDecimalTypeVal>   y_Linearity_StatsMeasuredDecimalType
%type <UserDefinedUnitValueTypeVal>   y_Linearity_UserDefinedUnitValueType_0
%type <StiffnessTypeVal>              y_LinksStiffness_StiffnessType_0
%type <ListAccumulatedStatsValuesListTypeVal> y_ListAccumulatedStatsValuesListType
%type <ListAccumulatedStatsValuesTypeVal> y_ListAccumulatedStatsValuesType
%type <ListBooleanTypeVal>            y_ListBooleanType
%type <ListDateTimeTypeVal>           y_ListDateTimeType
%type <ListDoubleTypeVal>             y_ListDoubleType
%type <ListIntTypeVal>                y_ListIntType
%type <ListQIFReferenc_1002_TypeVal>  y_ListQIFReferenc_1002_ListQIFReferenc_1002_Type
%type <ListQIFReferenc_1002_TypeVal>  y_ListQIFReferenc_1002_Type
%type <ListQIFReferenceFullTypeVal>   y_ListQIFReferenceFullType
%type <ListQIFReferenceSimpleTypeVal> y_ListQIFReferenceSimpleType
%type <ListQIFReferenceTypeVal>       y_ListQIFReferenceType
%type <ListQIFReferenceTypeChoicePairVal> y_ListQIFReferenceTypeChoicePair
%type <ListSubgroupStatsValuesListTypeVal> y_ListSubgroupStatsValuesListType
%type <ListSubgroupStatsValuesTypeVal> y_ListSubgroupStatsValuesType
%type <ListSummaryStatsValuesListTypeVal> y_ListSummaryStatsValuesListType
%type <ListSummaryStatsValuesTypeVal> y_ListSummaryStatsValuesType
%type <ListTokenTypeVal>              y_ListTokenType
%type <LiztAACMMAccuracyTypeVal>      y_LiztAACMMAccuracy_AACMMAccuracyType_1_u
%type <LiztActionMethodBaseTypeVal>   y_LiztActionMethod_substituteType_1_u
%type <LiztActualComponentSetTypeVal> y_LiztActualComponentSet_ActualComponentSetType_1_u
%type <LiztActualComponentTypeVal>    y_LiztActualComponent_ActualComponentType_1_u
%type <LiztAlgorithmTypeVal>          y_LiztAlgorithm_AlgorithmType_1_u
%type <LiztAlignmentOperationBaseTypeVal> y_LiztAlignmentOperation_substituteType_1_u
%type <LiztSummaryStatisticsAngularTypeVal> y_LiztAngularStatsSummary_SummaryStatisticsAngularType_1_u
%type <LiztAngularUnitTypeVal>        y_LiztAngularUnit_AngularUnitType_0_u
%type <LiztAnnotationViewTypeVal>     y_LiztAnnotationView_AnnotationViewType_1_u
%type <LiztSummaryStatisticsAreaTypeVal> y_LiztAreaStatsSummary_SummaryStatisticsAreaType_1_u
%type <LiztAreaUnitTypeVal>           y_LiztAreaUnit_AreaUnitType_0_u
%type <LiztArea2dTypeVal>             y_LiztArea_Area2dType_1_u
%type <LiztSectionAreaTypeVal>        y_LiztArea_SectionAreaType_1_u
%type <LiztArithmeticExpressionBaseTypeVal> y_LiztArithmeticExpression_substituteType_2_2
%type <LiztArithmeticExpressionBaseTypeVal> y_LiztArithmeticExpression_substituteType_2_2_Check
%type <LiztArithmeticExpressionBaseTypeVal> y_LiztArithmeticExpression_substituteType_2_u
%type <LiztArithmeticExpressionBaseTypeVal> y_LiztArithmeticExpression_substituteType_2_u_Check
%type <LiztAsmPathTypeVal>            y_LiztAsmPath_AsmPathType_1_u
%type <LiztAssemblyTypeVal>           y_LiztAssembly_AssemblyType_1_u
%type <LiztAssignableCauseTypeVal>    y_LiztAssignableCause_AssignableCauseType_1_u
%type <LiztAttributeBaseTypeVal>      y_LiztAttribute_substituteType_1_u
%type <LiztAuxiliaryBaseTypeVal>      y_LiztAuxiliary_substituteType_1_u
%type <LiztAverageFeatureTypeVal>     y_LiztAverageFeature_AverageFeatureType_1_u
%type <LiztBaseFeaturePointSetTypeVal> y_LiztBaseFeaturePointSet_BaseFeaturePointSetType_1_u
%type <LiztBaseFeatureTypeVal>        y_LiztBaseFeature_BaseFeatureType_3_u
%type <LiztBaseFeatureTypeVal>        y_LiztBaseFeature_BaseFeatureType_3_u_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_1_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_2_2
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_2_2_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_2_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_2_u_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_3_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_4_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_4_u_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_5_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_5_u_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_6_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_9_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseFeature_SequencedBaseFeatureType_9_u_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseLine_SequencedBaseFeatureType_2_2
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBaseLine_SequencedBaseFeatureType_2_2_Check
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBasePlane_SequencedBaseFeatureType_2_2
%type <LiztSequencedBaseFeatureTypeVal> y_LiztBasePlane_SequencedBaseFeatureType_2_2_Check
%type <LiztBodyTypeVal>               y_LiztBody_BodyType_1_u
%type <LiztBooleanExpressionBaseTypeVal> y_LiztBooleanExpression_substituteType_2_2
%type <LiztBooleanExpressionBaseTypeVal> y_LiztBooleanExpression_substituteType_2_2_Check
%type <LiztBooleanExpressionBaseTypeVal> y_LiztBooleanExpression_substituteType_2_u
%type <LiztBooleanExpressionBaseTypeVal> y_LiztBooleanExpression_substituteType_2_u_Check
%type <LiztCalibrationTypeVal>        y_LiztCalibration_CalibrationType_1_u
%type <LiztCameraTypeVal>             y_LiztCamera_CameraType_1_u
%type <LiztCarriageTypeVal>           y_LiztCarriage_CarriageType_2_u
%type <LiztCarriageTypeVal>           y_LiztCarriage_CarriageType_2_u_Check
%type <LiztCartesianCMMAccuracyTypeVal> y_LiztCartesianCMMAccuracy_CartesianCMMAccuracyType_1_u
%type <LiztCharacteristicDefinitionBaseTypeVal> y_LiztCharacteristicDefinition_substituteType_1_u
%type <LiztCharacteristicGroupStatusTypeVal> y_LiztCharacteristicGroupStatus_CharacteristicGroupStatusType_1_u
%type <LiztCharacteristicGroupTypeVal> y_LiztCharacteristicGroup_substituteType_1_u
%type <LiztCharacteristicItemBaseTypeVal> y_LiztCharacteristicItem_substituteType_1_u
%type <LiztCharacteristicMeasurementBaseTypeVal> y_LiztCharacteristicMeasurement_substituteType_1_u
%type <LiztCharacteristicNominalBaseTypeVal> y_LiztCharacteristicNominal_substituteType_1_u
%type <LiztCharacteristicStatsEvalBaseTypeVal> y_LiztCharacteristicStats_substituteType_1_u
%type <LiztCoEdgeMeshTypeVal>         y_LiztCoEdgeMesh_CoEdgeMeshType_1_u
%type <LiztCoEdgeTypeVal>             y_LiztCoEdge_CoEdgeType_1_u
%type <LiztStatsWithReferenceBaseTypeVal> y_LiztCommonStatsValue_substituteType_1_u
%type <LiztComponentTypeVal>          y_LiztComponent_ComponentType_1_u
%type <LiztControlIssueDetailsListTypeVal> y_LiztControlIssueDetailsList_ControlIssueDetailsListType_1_u
%type <LiztControlIssueDetailsTypeVal> y_LiztControlIssueDetails_ControlIssueDetailsType_1_u
%type <LiztControlMethodTypeVal>      y_LiztControlMethod_ControlMethodType_1_u
%type <LiztCoordinateSystemActualTransformAssociationTypeVal> y_LiztCoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType_1_u
%type <LiztCADCoordinateSystemTypeVal> y_LiztCoordinateSystem_CADCoordinateSystemType_1_u
%type <LiztCoordinateSystemTypeVal>   y_LiztCoordinateSystem_CoordinateSystemType_1_u
%type <LiztCorrectiveActionPlanTypeVal> y_LiztCorrectiveActionPlan_CorrectiveActionPlanType_1_u
%type <LiztCorrectiveActionTypeVal>   y_LiztCorrectiveAction_CorrectiveActionType_1_u
%type <LiztCurve12BaseTypeVal>        y_LiztCurve12_substituteType_1_u
%type <LiztCurve13BaseTypeVal>        y_LiztCurve13_substituteType_1_u
%type <LiztCurve13CoreTypeVal>        y_LiztCurve_Curve13CoreType_2_2
%type <LiztCurve13CoreTypeVal>        y_LiztCurve_Curve13CoreType_2_2_Check
%type <LiztIfThenDMERuleTypeVal>      y_LiztDMEDecisionRule_IfThenDMERuleType_1_u
%type <LiztDMEDecisionBaseTypeVal>    y_LiztDMEDecision_substituteType_1_u
%type <LiztDMEParameterConstraintTypeVal> y_LiztDMEParameterConstraint_DMEParameterConstraintType_1_u
%type <LiztDatumDefinitionTypeVal>    y_LiztDatumDefinition_DatumDefinitionType_1_u
%type <LiztDatumReferenceFrameTypeVal> y_LiztDatumReferenceFrame_DatumReferenceFrameType_1_u
%type <LiztDatumTargetTypeVal>        y_LiztDatumTarget_DatumTargetType_1_u
%type <LiztDatumWithPrecedenceTypeVal> y_LiztDatum_DatumWithPrecedenceType_1_5
%type <LiztDatumWithPrecedenceTypeVal> y_LiztDatum_DatumWithPrecedenceType_1_5_Check
%type <LiztSequencedDatumTypeVal>     y_LiztDatum_SequencedDatumType_2_u
%type <LiztSequencedDatumTypeVal>     y_LiztDatum_SequencedDatumType_2_u_Check
%type <LiztDefiningPointMeasurementTypeVal> y_LiztDefiningPoint_DefiningPointMeasurementType_1_u
%type <LiztDefiningPointNominalTypeVal> y_LiztDefiningPoint_DefiningPointNominalType_1_u
%type <LiztDefinitionExternalTypeChoicePairVal> y_LiztDefinitionExternalTypeChoicePair
%type <LiztDegreeOfFreedomEnumTypeVal> y_LiztDegreeOfFreedom_DegreeOfFreedomEnumType_1_6
%type <LiztDegreeOfFreedomEnumTypeVal> y_LiztDegreeOfFreedom_DegreeOfFreedomEnumType_1_6_Check
%type <LiztDetachableSensorBaseTypeVal> y_LiztDetachableSensor_substituteType_1_u
%type <LiztDisplayStyleGroupTypeVal>  y_LiztDisplayStyleGroup_DisplayStyleGroupType_1_u
%type <LiztDisplayStyleTypeVal>       y_LiztDisplayStyle_DisplayStyleType_1_u
%type <LiztQPIdReferenceTypeVal>      y_LiztDocumentQPId_QPIdReferenceType_0_u
%type <LiztVersionReferenceTypeVal>   y_LiztEarlierVersion_VersionReferenceType_1_u
%type <LiztEdgeOrientedTypeVal>       y_LiztEdge_EdgeOrientedType_1_u
%type <LiztEdgeTypeVal>               y_LiztEdge_EdgeType_1_u
%type <LiztTestAndPlanElementTypeVal> y_LiztElseIf_TestAndPlanElementType_0_u
%type <LiztEmployeeTypeVal>           y_LiztEmployee_EmployeeType_1_u
%type <LiztEntityExternalTypeVal>     y_LiztEntity_EntityExternalType_1_u
%type <LiztEnvironmentTypeVal>        y_LiztEnvironment_EnvironmentType_1_u
%type <LiztXmlStringVal>              y_LiztError_XmlString_1_u
%type <LiztExclusionIdTypeVal>        y_LiztExclusion_ExclusionIdType_1_u
%type <LiztExclusionIndexTypeVal>     y_LiztExclusion_ExclusionIndexType_1_u
%type <LiztExplodedViewTypeVal>       y_LiztExplodedView_ExplodedViewType_1_u
%type <LiztExternalFileReferenceTypeVal> y_LiztExternalFileReference_ExternalFileReferenceType_1_u
%type <LiztExternalQIFDocumentReferenceTypeVal> y_LiztExternalQIFDocument_ExternalQIFDocumentReferenceType_1_u
%type <LiztFaceBaseTypeVal>           y_LiztFaceBase_substituteType_1_u
%type <LiztFeatureDefinitionBaseTypeVal> y_LiztFeatureDefinition_substituteType_1_u
%type <LiztFeatureItemBaseTypeVal>    y_LiztFeatureItem_substituteType_1_u
%type <LiztFeatureMeasurementBaseTypeVal> y_LiztFeatureMeasurement_substituteType_1_u
%type <LiztFeatureNominalBaseTypeVal> y_LiztFeatureNominal_substituteType_1_u
%type <LiztQIFFeaturePairTypeVal>     y_LiztFeaturePair_QIFFeaturePairType_1_u
%type <LiztFeatureZoneBaseTypeVal>    y_LiztFeatureZone_substituteType_1_u
%type <LiztFixtureTypeVal>            y_LiztFixture_FixtureType_1_u
%type <LiztFolderAssemblyTypeVal>     y_LiztFolderAssembly_FolderAssemblyType_1_u
%type <LiztFolderPartTypeVal>         y_LiztFolderPart_FolderPartType_1_u
%type <LiztFontTypeVal>               y_LiztFont_FontType_1_u
%type <LiztSummaryStatisticsForceTypeVal> y_LiztForceStatsSummary_SummaryStatisticsForceType_1_u
%type <LiztForceUnitTypeVal>          y_LiztForceUnit_ForceUnitType_0_u
%type <LiztFrameBaseTypeVal>          y_LiztFrame_substituteType_1_u
%type <LiztHatchStyleTypeVal>         y_LiztHatchStyle_HatchStyleType_1_u
%type <LiztISODegreeOfFreedomEnumTypeVal> y_LiztISODegreeOfFreedom_ISODegreeOfFreedomEnumType_1_6
%type <LiztISODegreeOfFreedomEnumTypeVal> y_LiztISODegreeOfFreedom_ISODegreeOfFreedomEnumType_1_6_Check
%type <LiztQIFReferenceActiveTypeVal> y_LiztId_QIFReferenceActiveType_1_u
%type <LiztQIFReferenceFullTypeVal>   y_LiztId_QIFReferenceFullType_1_u
%type <LiztQIFReferenceTypeVal>       y_LiztId_QIFReferenceType_1_u
%type <LiztIfThenFeatureRuleTypeVal>  y_LiztIfThenFeatureRule_substituteType_1_u
%type <LiztValidationPartAssemblyInstanceTypeVal> y_LiztInstance_ValidationPartAssemblyInstanceType_1_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2
%type <LiztSequencedBaseFeatureTypeVal> y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2_Check
%type <LiztLayerTypeVal>              y_LiztLayer_LayerType_1_u
%type <LiztLeaderTypeVal>             y_LiztLeader_substituteType_0_u
%type <LiztSummaryStatisticsLinearTypeVal> y_LiztLinearStatsSummary_SummaryStatisticsLinearType_1_u
%type <LiztLinearUnitTypeVal>         y_LiztLinearUnit_LinearUnitType_0_u
%type <LiztLinearValueTypeVal>        y_LiztLinearValue_LinearValueType_20_20
%type <LiztLinearValueTypeVal>        y_LiztLinearValue_LinearValueType_20_20_Check
%type <LiztLocatedTipTypeVal>         y_LiztLocatedTip_LocatedTipType_1_u
%type <LiztLogicalOperatio_1231_TypeChoicePairVal> y_LiztLogicalOperatio_1231_TypeChoicePair
%type <LiztLogicalOperationTypeVal>   y_LiztLogicalOperation_LogicalOperationType_1_u
%type <LiztLoopBaseTypeVal>           y_LiztLoopBase_substituteType_1_u
%type <LiztPolyline2dTypeVal>         y_LiztLoop_Polyline2dType_1_u
%type <LiztSectionPathTypeVal>        y_LiztLoop_SectionPathType_1_u
%type <LiztMachineCoordinateSystemTypeVal> y_LiztMachineCoordinateSystem_MachineCoordinateSystemType_0_u
%type <LiztManufacturingProcessTraceabilityTypeVal> y_LiztManufacturingProcessTraceability_ManufacturingProcessTraceabilityType_1_u
%type <LiztSummaryStatisticsMassTypeVal> y_LiztMassStatsSummary_SummaryStatisticsMassType_1_u
%type <LiztMassUnitTypeVal>           y_LiztMassUnit_MassUnitType_0_u
%type <LiztMaterialTypeVal>           y_LiztMaterial_MaterialType_1_u
%type <LiztMeasurandBaseTypeVal>      y_LiztMeasurand_substituteType_1_u
%type <LiztMeasurePointNominalTypeVal> y_LiztMeasurePoint_MeasurePointNominalType_1_u
%type <LiztMeasuredPointSetTypeVal>   y_LiztMeasuredPointSet_MeasuredPointSetType_1_u
%type <LiztMeasurementDeviceTypeVal>  y_LiztMeasurementDevice_substituteType_1_u
%type <LiztMeasurementResultsTypeVal> y_LiztMeasurementResults_MeasurementResultsType_1_u
%type <LiztMeasurementRoomTypeVal>    y_LiztMeasurementRoom_MeasurementRoomType_1_u
%type <LiztMeshTriangleTypeVal>       y_LiztMeshTriangle_MeshTriangleType_1_u
%type <LiztExplodedViewMoveGroupTypeVal> y_LiztMoveGroup_ExplodedViewMoveGroupType_1_u
%type <LiztPointSetNominalTypeVal>    y_LiztNominalPointSet_PointSetNominalType_1_u
%type <LiztTriangleVertexNormalTypeVal> y_LiztNormalSpecial_TriangleVertexNormalType_1_u
%type <LiztNotableEventTypeVal>       y_LiztNotableEvent_NotableEventType_1_u
%type <LiztNoteFlagTypeVal>           y_LiztNoteFlag_NoteFlagType_1_u
%type <LiztNoteTypeVal>               y_LiztNote_NoteType_1_u
%type <LiztNotedEventTypeVal>         y_LiztNotedEvent_NotedEventType_1_u
%type <LiztNumberedPlanElementTypeVal> y_LiztNumberedPlanElement_NumberedPlanElementType_1_u
%type <LiztStatsWithReferenceBaseTypeVal> y_LiztNumericCharacteristicStatsValue_substituteType_1_u
%type <LiztStatsWithReferenceBaseTypeVal> y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
%type <LiztMeasurementOriginOffsetTypeVal> y_LiztOrigin_MeasurementOriginOffsetType_1_3
%type <LiztMeasurementOriginOffsetTypeVal> y_LiztOrigin_MeasurementOriginOffsetType_1_3_Check
%type <LiztPMIDisplayTypeVal>         y_LiztPMIDisplay_PMIDisplayType_1_u
%type <LiztProcessParameterTypeVal>   y_LiztParameter_ProcessParameterType_1_u
%type <LiztPartNoteTypeVal>           y_LiztPartNote_PartNoteType_1_u
%type <LiztPartTypeVal>               y_LiztPart_PartType_1_u
%type <LiztStatsWithReferenceBaseTypeVal> y_LiztPassFailStatsValue_substituteType_1_u
%type <LiztPathTriangulationTypeVal>  y_LiztPathTriangulation_PathTriangulationType_1_u
%type <LiztSectionPathTypeVal>        y_LiztPath_SectionPathType_1_u
%type <LiztHatchPatternTypeVal>       y_LiztPattern_HatchPatternType_1_u
%type <LiztPlanElementBaseTypeVal>    y_LiztPlanElement_substituteType_1_u
%type <LiztPointCloudTypeVal>         y_LiztPointCloud_PointCloudType_1_u
%type <LiztPointDeviationStatsEvalTypeVal> y_LiztPointDeviationStats_PointDeviationStatsEvalType_1_u
%type <LiztPointDeviationTypeVal>     y_LiztPointDeviation_PointDeviationType_1_u
%type <LiztPointSetReferenceBaseTypeVal> y_LiztPointSetId_substituteType_1_u
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_3_3
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_3_3_Check
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_5_5
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_5_5_Check
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_6_6
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_6_6_Check
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_8_8
%type <LiztPoint2dSimpleTypeVal>      y_LiztPoint_Point2dSimpleType_8_8_Check
%type <LiztPointEntityTypeVal>        y_LiztPoint_PointEntityType_1_u
%type <LiztPolyline2dTypeVal>         y_LiztPolyline_Polyline2dType_1_u
%type <LiztXmlPositiveIntegerVal>     y_LiztPredecessor_XmlPositiveInteger_1_u
%type <LiztSummaryStatisticsPressureTypeVal> y_LiztPressureStatsSummary_SummaryStatisticsPressureType_1_u
%type <LiztPressureUnitTypeVal>       y_LiztPressureUnit_PressureUnitType_0_u
%type <LiztProductDataQualityCheckTypeVal> y_LiztProductDataQualityCheck_ProductDataQualityCheckType_1_u
%type <LiztQPIdFullReferenceTypeVal>  y_LiztQPId_QPIdFullReferenceType_1_u
%type <LiztQualificationTypeVal>      y_LiztQualification_QualificationType_1_u
%type <LiztArrayQPIdFullReferenceTypeVal> y_LiztResultsQPIds_ArrayQPIdFullReferenceType_1_u
%type <LiztSavedViewTypeVal>          y_LiztSavedView_SavedViewType_1_u
%type <LiztSectionGroupTypeVal>       y_LiztSectionGroup_SectionGroupType_1_u
%type <LiztZoneSectionPlaneTypeVal>   y_LiztSectionPlane_ZoneSectionPlaneType_1_u
%type <LiztShellTypeVal>              y_LiztShell_ShellType_1_u
%type <LiztSimplifiedRepresentationGroupTypeVal> y_LiztSimplifiedRepresentationGroup_SimplifiedRepresentationGroupType_1_u
%type <LiztSimplifiedRepresentationTypeVal> y_LiztSimplifiedRepresentation_SimplifiedRepresentationType_1_u
%type <LiztSimultaneousRequirementGroupTypeVal> y_LiztSimultaneousRequirementGroup_SimultaneousRequirementGroupType_1_u
%type <LiztSoftwareTypeVal>           y_LiztSoftware_SoftwareType_1_u
%type <LiztSummaryStatisticsSpeedTypeVal> y_LiztSpeedStatsSummary_SummaryStatisticsSpeedType_1_u
%type <LiztSpeedUnitTypeVal>          y_LiztSpeedUnit_SpeedUnitType_0_u
%type <LiztStandardTypeVal>           y_LiztStandard_StandardType_1_u
%type <LiztStatisticalStudyPlanBaseTypeVal> y_LiztStatisticalStudyPlan_substituteType_1_u
%type <LiztStatisticalStudyResultsBaseTypeVal> y_LiztStatisticalStudyResults_substituteType_1_u
%type <LiztSummaryStatisticsTypeVal>  y_LiztStatsSummary_SummaryStatisticsType_1_u
%type <LiztListAccumulatedStatsValuesTypeVal> y_LiztStatsValuesPerChar_ListAccumulatedStatsValuesType_0_u
%type <LiztListSubgroupStatsValuesTypeVal> y_LiztStatsValuesPerSubgroup_ListSubgroupStatsValuesType_0_u
%type <LiztSummaryStatsValuesListTypeVal> y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
%type <LiztStepWithPredecessorsTypeVal> y_LiztStepWithPredecessors_StepWithPredecessorsType_1_u
%type <LiztXmlStringVal>              y_LiztStringValue_XmlString_1_u
%type <LiztStudyIssueTypeVal>         y_LiztStudyIssue_StudyIssueType_1_u
%type <LiztCurve12OrientedTypeVal>    y_LiztSubCurve_Curve12OrientedType_1_u
%type <LiztCurve13OrientedTypeVal>    y_LiztSubCurve_Curve13OrientedType_1_u
%type <LiztSubgroupDecimalTypeVal>    y_LiztSubgroupDecimal_SubgroupDecimalType_1_u
%type <LiztSubgroupIntegerTypeVal>    y_LiztSubgroupInteger_SubgroupIntegerType_1_u
%type <LiztStatsValuesTypeVal>        y_LiztSubgroup_StatsValuesType_1_u
%type <LiztSubgroupTypeVal>           y_LiztSubgroup_SubgroupType_1_u
%type <LiztStatsWithReferenceBaseTypeVal> y_LiztSummaryStatsValue_substituteType_1_u
%type <LiztSummaryStatsValuesTypeVal> y_LiztSummaryStatsValues_SummaryStatsValuesType_1_u
%type <LiztSurfaceBaseTypeVal>        y_LiztSurface_substituteType_1_u
%type <LiztSequencedBaseFeatureTypeVal> y_LiztTangentFeature_SequencedBaseFeatureType_2_2
%type <LiztSequencedBaseFeatureTypeVal> y_LiztTangentFeature_SequencedBaseFeatureType_2_2_Check
%type <LiztSummaryStatisticsTemperatureTypeVal> y_LiztTemperatureStatsSummary_SummaryStatisticsTemperatureType_1_u
%type <LiztTemperatureUnitTypeVal>    y_LiztTemperatureUnit_TemperatureUnitType_0_u
%type <LiztTemperatureTypeVal>        y_LiztTemperature_TemperatureType_1_u
%type <LiztTextTypeVal>               y_LiztText_TextType_1_u
%type <LiztThreadSpecificationTypeVal> y_LiztThreadSpecification_ThreadSpecificationType_1_u
%type <LiztSummaryStatisticsTimeTypeVal> y_LiztTimeStatsSummary_SummaryStatisticsTimeType_1_u
%type <LiztTimeUnitTypeVal>           y_LiztTimeUnit_TimeUnitType_0_u
%type <LiztTokenExpressionBaseTypeVal> y_LiztTokenExpression_substituteType_2_2
%type <LiztTokenExpressionBaseTypeVal> y_LiztTokenExpression_substituteType_2_2_Check
%type <LiztToleranceDefinitionsTypeChoicePairVal> y_LiztToleranceDefinitionsTypeChoicePair
%type <LiztToolBaseTypeVal>           y_LiztTool_substituteType_1_u
%type <LiztTrailingZeroDimensionalCharacteristicDisplayGroupTypeVal> y_LiztTrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType_1_u
%type <LiztTrailingZeroGeometricCharacteristicDisplayGroupTypeVal> y_LiztTrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType_1_u
%type <LiztTransformInstanceTypeVal>  y_LiztTransform_TransformInstanceType_1_u
%type <LiztNonDestructiveTestingEnumTypeVal> y_LiztTypeOfTest_NonDestructiveTestingEnumType_1_u
%type <LiztCriterionUserDefinedUnitTypeVal> y_LiztUserDefinedUnitCriterion_CriterionUserDefinedUnitType_0_u
%type <LiztUserDefinedUnitValueTypeVal> y_LiztUserDefinedUnitLimit_UserDefinedUnitValueType_0_u
%type <LiztMeasuredUserDefinedUnitValueTypeVal> y_LiztUserDefinedUnitMeasurement_MeasuredUserDefinedUnitValueType_0_u
%type <LiztSummaryStatisticsUserDefinedUnitTypeVal> y_LiztUserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType_1_u
%type <LiztUserDefinedUnitTypeVal>    y_LiztUserDefinedUnit_UserDefinedUnitType_1_u
%type <LiztVariableDeclarationTypeVal> y_LiztVariable_VariableDeclarationType_1_u
%type <LiztVertexTypeVal>             y_LiztVertex_VertexType_1_u
%type <LiztWorkInstructionBaseTypeVal> y_LiztWorkInstruction_substituteType_1_u
%type <LiztZoneDataTypeVal>           y_LiztZoneData_ZoneDataType_1_u
%type <LiztZoneSectionTypeVal>        y_LiztZoneSection_ZoneSectionType_1_u
%type <LocalVariablesTypeVal>         y_LocalVariablesType
%type <LocalVariablesTypeVal>         y_LocalVariables_LocalVariablesType_0
%type <LocatedTipTypeVal>             y_LocatedTipType
%type <LocatedTipTypeVal>             y_LocatedTip_LocatedTipType
%type <LocatedTipsTypeVal>            y_LocatedTipsType
%type <LocatedTipsTypeVal>            y_LocatedTips_LocatedTipsType
%type <LocationCharacteristicStatsEvalTypeVal> y_LocationCharacteristicStatsEvalType
%type <LocationCharacteristicStatsEvalTypeVal> y_LocationCharacteristicStats_LocationCharacteristicStatsEvalType
%type <XmlStringVal>                  y_LocationDescription_XmlString
%type <QIFReferenceTypeVal>           y_LocationId_QIFReferenceType
%type <PointTypeVal>                  y_LocationOnCMM_PointType
%type <LocationOnDrawi_1060_TypeVal>  y_LocationOnDrawi_1060_LocationOnDrawi_1060_Type
%type <LocationOnDrawi_1060_TypeVal>  y_LocationOnDrawi_1060_Type
%type <LocationOnDrawi_1061_TypeVal>  y_LocationOnDrawi_1061_LocationOnDrawi_1061_Type
%type <LocationOnDrawi_1061_TypeVal>  y_LocationOnDrawi_1061_Type
%type <LocationOnDrawi_1062_TypeVal>  y_LocationOnDrawi_1062_LocationOnDrawi_1062_Type
%type <LocationOnDrawi_1062_TypeVal>  y_LocationOnDrawi_1062_Type
%type <LocationOnDrawingTypeVal>      y_LocationOnDrawingType
%type <LocationOnDrawingTypeChoicePairVal> y_LocationOnDrawingTypeChoicePair
%type <LocationOnDrawingTypeVal>      y_LocationOnDrawing_LocationOnDrawingType_0
%type <LocationSignificanceAllEnumTypeVal> y_LocationSignificanceAllEnumType
%type <LocationSignificanceOneSidesEnumTypeVal> y_LocationSignificanceOneSidesEnumType
%type <LocationSignificanceSpotSeamEnumTypeVal> y_LocationSignificanceSpotSeamEnumType
%type <LocationSignificanceAllEnumTypeVal> y_LocationSignificance_LocationSignificanceAllEnumType
%type <LocationSignificanceOneSidesEnumTypeVal> y_LocationSignificance_LocationSignificanceOneSidesEnumType
%type <LocationSignificanceSpotSeamEnumTypeVal> y_LocationSignificance_LocationSignificanceSpotSeamEnumType
%type <LocationTypeVal>               y_LocationType
%type <LocationTypeVal>               y_Location_LocationType
%type <MeasuredPointTypeVal>          y_Location_MeasuredPointType_0
%type <PointSimpleTypeVal>            y_Location_PointSimpleType
%type <PointTypeVal>                  y_Location_PointType
%type <RectangleTypeVal>              y_Location_RectangleType
%type <XmlStringVal>                  y_Location_XmlString_0
%type <LogicalOperatio_1231_TypeVal>  y_LogicalOperatio_1231_LogicalOperatio_1231_Type
%type <LogicalOperatio_1231_TypeVal>  y_LogicalOperatio_1231_Type
%type <LogicalOperatio_1231_TypeChoicePairVal> y_LogicalOperatio_1231_TypeChoicePair
%type <LogicalOperationEnumTypeVal>   y_LogicalOperationEnumType
%type <XmlUnsignedIntVal>             y_LogicalOperationResult_XmlUnsignedInt
%type <LogicalOperationTypeVal>       y_LogicalOperationType
%type <LogicalOperationTypeVal>       y_LogicalOperation_LogicalOperationType
%type <LogicalOperationsTypeVal>      y_LogicalOperationsType
%type <LogicalOperationsTypeVal>      y_LogicalOperations_LogicalOperationsType_0
%type <SpeedValueTypeVal>             y_LongitudinalTrackingSpeed_SpeedValueType_0
%type <LoopBaseTypeVal>               y_LoopBase_substituteType
%type <ArrayReferenceTypeVal>         y_LoopIds_ArrayReferenceType_0
%type <LoopMeshTypeVal>               y_LoopMeshType
%type <LoopMeshTypeVal>               y_LoopMesh_LoopMeshType
%type <LoopSetTypeVal>                y_LoopSetType
%type <LoopSetTypeVal>                y_LoopSet_LoopSetType_0
%type <LoopTypeVal>                   y_LoopType
%type <LoopTypeVal>                   y_Loop_LoopType
%type <Polyline2dTypeVal>             y_Loop_Polyline2dType
%type <SectionPathTypeVal>            y_Loop_SectionPathType
%type <Loops2dTypeVal>                y_Loops2dType
%type <Loops2dTypeVal>                y_Loops_Loops2dType
%type <SectionLoopsTypeVal>           y_Loops_SectionLoopsType
%type <XmlStringVal>                  y_LotNumber_XmlString_0
%type <StatsMeasuredDecimalTypeVal>   y_LowerConfidenceLimit_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_LowerControlLimitRange_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_LowerControlLimit_StatsMeasuredDecimalType
%type <Point2dSimpleTypeVal>          y_LowerPoint_Point2dSimpleType
%type <MachineCoordinateSystemOperationTypeVal> y_MachineCoordinateSystemOperationType
%type <MachineCoordinateSystemTypeVal> y_MachineCoordinateSystemType
%type <MachineCoordinateSystemTypeVal> y_MachineCoordinateSystem_MachineCoordinateSystemType
%type <XmlStringVal>                  y_MachineIdentifier_XmlString_0
%type <XmlStringVal>                  y_MachineManufacturerName_XmlString_0
%type <MachineCoordinateSystemOperationTypeVal> y_Machine_MachineCoordinateSystemOperationType
%type <XmlBooleanVal>                 y_Magnetic_XmlBoolean_0
%type <MagnetoInductiveSensorTypeVal> y_MagnetoInductiveSensorType
%type <MagnetoInductiveSensorTypeVal> y_MagnetoInductiveSensor_MagnetoInductiveSensorType
%type <XmlDecimalVal>                 y_Magnification_XmlDecimal_0
%type <WeldMainSymbolTypeVal>         y_MainSymbol_WeldMainSymbolType_0
%type <LinearValueTypeVal>            y_MajorDiameter_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_MajorDiameter_MeasuredLinearValueType_0
%type <ManualMeasureFeatureMethodTypeVal> y_ManualMeasureFeatureMethodType
%type <ManualMeasureFeatureMethodTypeVal> y_ManualMeasureFeatureMethod_ManualMeasureFeatureMethodType
%type <ManualMeasurementDeviceTypeVal> y_ManualMeasurementDeviceType
%type <ManualMeasurementDeviceTypeVal> y_ManualMeasurementDevice_ManualMeasurementDeviceType
%type <XmlStringVal>                  y_Manufacturer_XmlString
%type <XmlStringVal>                  y_Manufacturer_XmlString_0
%type <ManufacturingMethodEnumTypeVal> y_ManufacturingMethodEnumType
%type <ManufacturingMethodEnumTypeVal> y_ManufacturingMethodEnum_ManufacturingMethodEnumType
%type <ManufacturingMethodTypeVal>    y_ManufacturingMethodType
%type <ManufacturingMethodTypeChoicePairVal> y_ManufacturingMethodTypeChoicePair
%type <QIFReferenceFullTypeVal>       y_ManufacturingProcessId_QIFReferenceFullType_0
%type <QIFReferenceTypeVal>           y_ManufacturingProcessId_QIFReferenceType_0
%type <XmlUnsignedIntVal>             y_ManufacturingProcessTraceabilitiesCount_XmlUnsignedInt_0
%type <ManufacturingProcessTraceabilitiesTypeVal> y_ManufacturingProcessTraceabilitiesType
%type <ManufacturingProcessTraceabilitiesTypeVal> y_ManufacturingProcessTraceabilities_ManufacturingProcessTraceabilitiesType_0
%type <ManufacturingProcessTraceabilityTypeVal> y_ManufacturingProcessTraceabilityType
%type <ManufacturingProcessTraceabilityTypeVal> y_ManufacturingProcessTraceability_ManufacturingProcessTraceabilityType
%type <MarkingFeatureDefinitionTypeVal> y_MarkingFeatureDefinitionType
%type <MarkingFeatureDefinitionTypeVal> y_MarkingFeatureDefinition_MarkingFeatureDefinitionType
%type <MarkingFeatureItemTypeVal>     y_MarkingFeatureItemType
%type <MarkingFeatureItemTypeVal>     y_MarkingFeatureItem_MarkingFeatureItemType
%type <MarkingFeatureMeasurementTypeVal> y_MarkingFeatureMeasurementType
%type <MarkingFeatureMeasurementTypeVal> y_MarkingFeatureMeasurement_MarkingFeatureMeasurementType
%type <MarkingFeatureNominalTypeVal>  y_MarkingFeatureNominalType
%type <MarkingFeatureNominalTypeVal>  y_MarkingFeatureNominal_MarkingFeatureNominalType
%type <MarkingMethodEnumTypeVal>      y_MarkingMethodEnumType
%type <MarkingMethodEnumTypeVal>      y_MarkingMethodEnum_MarkingMethodEnumType
%type <MarkingMethodTypeVal>          y_MarkingMethodType
%type <MarkingMethodTypeChoicePairVal> y_MarkingMethodTypeChoicePair
%type <MarkingMethodTypeVal>          y_MarkingMethod_MarkingMethodType
%type <MeasuredMassValueTypeVal>      y_MassAbsoluteLinearity_MeasuredMassValueType
%type <MassCharacteris_1063_TypeVal>  y_MassCharacteris_1063_MassCharacteris_1063_Type
%type <MassCharacteris_1063_TypeVal>  y_MassCharacteris_1063_Type
%type <MassCharacteris_1063_TypeChoicePairVal> y_MassCharacteris_1063_TypeChoicePair
%type <CriterionMassTypeVal>          y_MassCriterion_CriterionMassType_0
%type <XmlDoubleVal>                  y_MassDensity_XmlDouble_0
%type <MassValueTypeVal>              y_MassLimit_MassValueType_0
%type <MeasuredMassValueTypeVal>      y_MassMeasurement_MeasuredMassValueType_0
%type <XmlDoubleVal>                  y_MassPropertyTolerance_XmlDouble_0
%type <SummariesStatisticsMassTypeVal> y_MassStatsSummaries_SummariesStatisticsMassType_0
%type <SummaryStatisticsMassTypeVal>  y_MassStatsSummary_SummaryStatisticsMassType
%type <MassToleranceTy_1018_TypeVal>  y_MassToleranceTy_1018_MassToleranceTy_1018_Type
%type <MassToleranceTy_1018_TypeVal>  y_MassToleranceTy_1018_Type
%type <MassToleranceTy_1018_TypeChoicePairVal> y_MassToleranceTy_1018_TypeChoicePair
%type <MassToleranceTy_1036_TypeVal>  y_MassToleranceTy_1036_MassToleranceTy_1036_Type
%type <MassToleranceTy_1036_TypeVal>  y_MassToleranceTy_1036_Type
%type <MassToleranceTypeVal>          y_MassToleranceType
%type <MassUnitTypeVal>               y_MassUnitType
%type <MassUnitTypeVal>               y_MassUnit_MassUnitType
%type <MassUnitTypeVal>               y_MassUnit_MassUnitType_0
%type <MassValueTypeVal>              y_MassValueType
%type <MassValueTypeVal>              y_Mass_MassValueType_0
%type <MaterialClassEnumTypeVal>      y_MaterialClassEnumType
%type <MaterialClassEnumTypeVal>      y_MaterialClassEnum_MaterialClassEnumType
%type <MaterialModifierEnumTypeVal>   y_MaterialCondition_MaterialModifierEnumType
%type <MaterialModifierEnumTypeVal>   y_MaterialCondition_MaterialModifierEnumType_0
%type <MaterialsTypeVal>              y_MaterialLibrary_MaterialsType_0
%type <MaterialModifierEnumTypeVal>   y_MaterialModifierEnumType
%type <MaterialModifierEnumTypeVal>   y_MaterialModifier_MaterialModifierEnumType
%type <MaterialTypeVal>               y_MaterialType
%type <MaterialType_1019_TypeVal>     y_MaterialType_1019_MaterialType_1019_Type_0
%type <MaterialType_1019_TypeVal>     y_MaterialType_1019_Type
%type <MaterialType_1019_TypeChoicePairVal> y_MaterialType_1019_TypeChoicePair
%type <MaterialTypeVal>               y_Material_MaterialType
%type <XmlStringVal>                  y_Material_XmlString_0
%type <MaterialsTypeVal>              y_MaterialsType
%type <PressureValueTypeVal>          y_MaxAmbientAirPressure_PressureValueType_0
%type <SpecifiedDecimalTypeVal>       y_MaxAmbientRelativeHumidity_SpecifiedDecimalType_0
%type <TemperatureValueTypeVal>       y_MaxAmbientTemperature_TemperatureValueType_0
%type <AngularValueTypeVal>           y_MaxAzimuthalAxisAngle_AngularValueType
%type <StatsLinearTypeVal>            y_MaxCircularityStats_StatsLinearType_0
%type <MeasuredLinearValueTypeVal>    y_MaxCircularity_MeasuredLinearValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxCurrentConsumption_UserDefinedUnitValueType_0
%type <StatsLinearTypeVal>            y_MaxCylindricityStats_StatsLinearType_0
%type <MeasuredLinearValueTypeVal>    y_MaxCylindricity_MeasuredLinearValueType_0
%type <LinearValueTypeVal>            y_MaxDeviationFromAverageFar_LinearValueType
%type <LinearValueTypeVal>            y_MaxDeviationFromAverageMiddle_LinearValueType
%type <LinearValueTypeVal>            y_MaxDeviationFromAverageNear_LinearValueType
%type <StatsAngularTypeVal>           y_MaxDeviationStats_StatsAngularType
%type <StatsAngularTypeVal>           y_MaxDeviationStats_StatsAngularType_0
%type <StatsAreaTypeVal>              y_MaxDeviationStats_StatsAreaType
%type <StatsAreaTypeVal>              y_MaxDeviationStats_StatsAreaType_0
%type <StatsForceTypeVal>             y_MaxDeviationStats_StatsForceType
%type <StatsForceTypeVal>             y_MaxDeviationStats_StatsForceType_0
%type <StatsLinearTypeVal>            y_MaxDeviationStats_StatsLinearType
%type <StatsLinearTypeVal>            y_MaxDeviationStats_StatsLinearType_0
%type <StatsMassTypeVal>              y_MaxDeviationStats_StatsMassType
%type <StatsMassTypeVal>              y_MaxDeviationStats_StatsMassType_0
%type <StatsPressureTypeVal>          y_MaxDeviationStats_StatsPressureType
%type <StatsPressureTypeVal>          y_MaxDeviationStats_StatsPressureType_0
%type <StatsSpeedTypeVal>             y_MaxDeviationStats_StatsSpeedType
%type <StatsSpeedTypeVal>             y_MaxDeviationStats_StatsSpeedType_0
%type <StatsTemperatureTypeVal>       y_MaxDeviationStats_StatsTemperatureType
%type <StatsTemperatureTypeVal>       y_MaxDeviationStats_StatsTemperatureType_0
%type <StatsTimeTypeVal>              y_MaxDeviationStats_StatsTimeType
%type <StatsTimeTypeVal>              y_MaxDeviationStats_StatsTimeType_0
%type <StatsUserDefinedUnitTypeVal>   y_MaxDeviationStats_StatsUserDefinedUnitType
%type <StatsUserDefinedUnitTypeVal>   y_MaxDeviationStats_StatsUserDefinedUnitType_0
%type <LinearDualValueTypeVal>        y_MaxDualValue_LinearDualValueType_0
%type <LinearValueTypeVal>            y_MaxEnvironmentalAltitude_LinearValueType_0
%type <LinearValueTypeVal>            y_MaxErrorConstant_LinearValueType
%type <MaxFeatureRulesTypeVal>        y_MaxFeatureRulesType
%type <MaxFeatureRulesTypeVal>        y_MaxFeatureRules_MaxFeatureRulesType_0
%type <MeasuredDecimalTypeVal>        y_MaxFirstAxis_MeasuredDecimalType
%type <StatsLinearTypeVal>            y_MaxFlatnessStats_StatsLinearType_0
%type <MeasuredLinearValueTypeVal>    y_MaxFlatness_MeasuredLinearValueType_0
%type <LinearValueTypeVal>            y_MaxFocusDistance_LinearValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxFramePerSecond_UserDefinedUnitValueType_0
%type <PositiveDecimalTypeVal>        y_MaxFrameRate_PositiveDecimalType_0
%type <ForceValueTypeVal>             y_MaxHoldingForce_ForceValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxKV_UserDefinedUnitValueType_0
%type <LinearValueTypeVal>            y_MaxLinearAxis_LinearValueType
%type <MassValueTypeVal>              y_MaxLoad_MassValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxMeasurementFrequency_UserDefinedUnitValueType_0
%type <LinearValueTypeVal>            y_MaxMeasurementRange_LinearValueType_0
%type <AngularValueTypeVal>           y_MaxMeasuringDistance_AngularValueType_0
%type <LinearValueTypeVal>            y_MaxMeasuringDistance_LinearValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxOperatingCurrent_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxOperatingVoltage_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxOutputVoltage_UserDefinedUnitValueType_0
%type <LinearValueTypeVal>            y_MaxPermissibleProbingError_LinearValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxPixelClockSpeed_UserDefinedUnitValueType_0
%type <PointTypeVal>                  y_MaxPoint_PointType
%type <UserDefinedUnitValueTypeVal>   y_MaxPointsRate_UserDefinedUnitValueType_0
%type <AngularValueTypeVal>           y_MaxPolarAxisAngle_AngularValueType
%type <AngularValueTypeVal>           y_MaxPolarAxis_AngularValueType
%type <UserDefinedUnitValueTypeVal>   y_MaxPowerSupplyVoltage_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxPower_UserDefinedUnitValueType_0
%type <PressureValueTypeVal>          y_MaxPressureFront_PressureValueType_0
%type <PressureValueTypeVal>          y_MaxPressureSide_PressureValueType_0
%type <PressureValueTypeVal>          y_MaxPressure_PressureValueType_0
%type <LinearValueTypeVal>            y_MaxRadialAxis_LinearValueType
%type <LinearValueTypeVal>            y_MaxRadius_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_MaxRadius_MeasuredLinearValueType
%type <UserDefinedUnitValueTypeVal>   y_MaxReadNoise_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxReadoutFrequency_UserDefinedUnitValueType_0
%type <TimeValueTypeVal>              y_MaxResponseTime_TimeValueType_0
%type <AngularValueTypeVal>           y_MaxRotaryAxis_AngularValueType
%type <MeasuredDecimalTypeVal>        y_MaxSecondAxis_MeasuredDecimalType
%type <StatsLinearTypeVal>            y_MaxStraightnessStats_StatsLinearType_0
%type <MeasuredLinearValueTypeVal>    y_MaxStraightness_MeasuredLinearValueType_0
%type <MeasuredDecimalTypeVal>        y_MaxThirdAxis_MeasuredDecimalType
%type <AngularValueTypeVal>           y_MaxTiltCompensation_AngularValueType_0
%type <AngularValueTypeVal>           y_MaxTilt_AngularValueType_0
%type <MaxTypeVal>                    y_MaxType
%type <StatsAngularTypeVal>           y_MaxValueStats_StatsAngularType
%type <StatsAngularTypeVal>           y_MaxValueStats_StatsAngularType_0
%type <StatsAreaTypeVal>              y_MaxValueStats_StatsAreaType
%type <StatsAreaTypeVal>              y_MaxValueStats_StatsAreaType_0
%type <StatsForceTypeVal>             y_MaxValueStats_StatsForceType
%type <StatsForceTypeVal>             y_MaxValueStats_StatsForceType_0
%type <StatsLinearTypeVal>            y_MaxValueStats_StatsLinearType
%type <StatsLinearTypeVal>            y_MaxValueStats_StatsLinearType_0
%type <StatsMassTypeVal>              y_MaxValueStats_StatsMassType
%type <StatsMassTypeVal>              y_MaxValueStats_StatsMassType_0
%type <StatsPressureTypeVal>          y_MaxValueStats_StatsPressureType
%type <StatsPressureTypeVal>          y_MaxValueStats_StatsPressureType_0
%type <StatsSpeedTypeVal>             y_MaxValueStats_StatsSpeedType
%type <StatsSpeedTypeVal>             y_MaxValueStats_StatsSpeedType_0
%type <StatsTemperatureTypeVal>       y_MaxValueStats_StatsTemperatureType
%type <StatsTemperatureTypeVal>       y_MaxValueStats_StatsTemperatureType_0
%type <StatsTimeTypeVal>              y_MaxValueStats_StatsTimeType
%type <StatsTimeTypeVal>              y_MaxValueStats_StatsTimeType_0
%type <StatsUserDefinedUnitTypeVal>   y_MaxValueStats_StatsUserDefinedUnitType
%type <StatsUserDefinedUnitTypeVal>   y_MaxValueStats_StatsUserDefinedUnitType_0
%type <AngularValueTypeVal>           y_MaxValue_AngularValueType
%type <AreaValueTypeVal>              y_MaxValue_AreaValueType
%type <ForceValueTypeVal>             y_MaxValue_ForceValueType
%type <LinearValueTypeVal>            y_MaxValue_LinearValueType
%type <MassValueTypeVal>              y_MaxValue_MassValueType
%type <MeasuredAngularValueTypeVal>   y_MaxValue_MeasuredAngularValueType_0
%type <MeasuredAreaValueTypeVal>      y_MaxValue_MeasuredAreaValueType_0
%type <MeasuredForceValueTypeVal>     y_MaxValue_MeasuredForceValueType_0
%type <MeasuredLinearValueTypeVal>    y_MaxValue_MeasuredLinearValueType_0
%type <MeasuredMassValueTypeVal>      y_MaxValue_MeasuredMassValueType_0
%type <MeasuredPressureValueTypeVal>  y_MaxValue_MeasuredPressureValueType_0
%type <MeasuredSpeedValueTypeVal>     y_MaxValue_MeasuredSpeedValueType_0
%type <MeasuredTemperatureValueTypeVal> y_MaxValue_MeasuredTemperatureValueType_0
%type <MeasuredTimeValueTypeVal>      y_MaxValue_MeasuredTimeValueType_0
%type <MeasuredUserDefinedUnitValueTypeVal> y_MaxValue_MeasuredUserDefinedUnitValueType_0
%type <PressureValueTypeVal>          y_MaxValue_PressureValueType
%type <SpeedValueTypeVal>             y_MaxValue_SpeedValueType
%type <TemperatureValueTypeVal>       y_MaxValue_TemperatureValueType
%type <TimeValueTypeVal>              y_MaxValue_TimeValueType
%type <UserDefinedUnitValueTypeVal>   y_MaxValue_UserDefinedUnitValueType
%type <UserDefinedUnitValueTypeVal>   y_MaxVibration_UserDefinedUnitValueType_0
%type <XmlStringVal>                  y_MaxWireAcceleration_XmlString_0
%type <ForceValueTypeVal>             y_MaxWireExtensionForce_ForceValueType_0
%type <LinearValueTypeVal>            y_MaxWorkpieceHeight_LinearValueType_0
%type <MassValueTypeVal>              y_MaxWorkpieceMass_MassValueType_0
%type <MassValueTypeVal>              y_MaxWorkpieceWeight_MassValueType_0
%type <SpeedValueTypeVal>             y_MaxXProbingSpeed_SpeedValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxXRotation_UserDefinedUnitValueType_0
%type <SpeedValueTypeVal>             y_MaxXTraverseSpeed_SpeedValueType_0
%type <SpeedValueTypeVal>             y_MaxYProbingSpeed_SpeedValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxYRotation_UserDefinedUnitValueType_0
%type <SpeedValueTypeVal>             y_MaxYTraverseSpeed_SpeedValueType_0
%type <LinearValueTypeVal>            y_MaxZAxis_LinearValueType
%type <SpeedValueTypeVal>             y_MaxZProbingSpeed_SpeedValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MaxZRotation_UserDefinedUnitValueType_0
%type <SpeedValueTypeVal>             y_MaxZTraverseSpeed_SpeedValueType_0
%type <MaxTypeVal>                    y_Max_MaxType
%type <CriteriaByUnitTypeVal>         y_MaximumAbsoluteAppraiserVariation_CriteriaByUnitType
%type <CriteriaByUnitTypeVal>         y_MaximumAbsoluteEquipmentVariation_CriteriaByUnitType
%type <CriteriaByUnitTypeVal>         y_MaximumAbsoluteTotalRandR_CriteriaByUnitType
%type <UserDefinedUnitValueTypeVal>   y_MaximumAngularVelocity_UserDefinedUnitValueType_0
%type <CriterionDecimalTypeVal>       y_MaximumRelativeAppraiserVariation_CriterionDecimalType
%type <CriterionDecimalTypeVal>       y_MaximumRelativeEquipmentVariation_CriterionDecimalType
%type <CriterionDecimalTypeVal>       y_MaximumRelativeTotalRandR_CriterionDecimalType
%type <LinearValueTypeVal>            y_MaximumToleranceValue_LinearValueType_0
%type <LinearValueTypeVal>            y_MaximumWorkingAmplitude_LinearValueType_0
%type <StatsMeasuredDecimalWithReferenceTypeVal> y_Maximum_StatsMeasuredDecimalWithReferenceType
%type <QIFMayTypeVal>                 y_May_QIFMayType
%type <ArrayReferenceTypeVal>         y_MeasurandIds_ArrayReferenceType
%type <MeasurandBaseTypeVal>          y_Measurand_substituteType
%type <MeasurandsTypeVal>             y_MeasurandsType
%type <MeasurandsTypeVal>             y_Measurands_MeasurandsType_0
%type <MeasureActionGroupFunctionEnumTypeVal> y_MeasureActionGroupFunctionEnumType
%type <MeasureActionGroupFunctionEnumTypeVal> y_MeasureActionGroupFunctionEnum_MeasureActionGroupFunctionEnumType
%type <MeasureActionGroupFunctionTypeVal> y_MeasureActionGroupFunctionType
%type <MeasureActionGroupFunctionTypeChoicePairVal> y_MeasureActionGroupFunctionTypeChoicePair
%type <MeasureActionGroupFunctionTypeVal> y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
%type <MeasureEvaluateAllActionTypeVal> y_MeasureEvaluateAllActionType
%type <MeasureEvaluateAllActionTypeVal> y_MeasureEvaluateAll_MeasureEvaluateAllActionType
%type <MeasureEvaluateSpecifiedActionTypeVal> y_MeasureEvaluateSpecifiedActionType
%type <MeasureEvaluateSpecifiedActionTypeVal> y_MeasureEvaluateSpecified_MeasureEvaluateSpecifiedActionType
%type <PointSetReferenceSingleTypeVal> y_MeasurePointId_PointSetReferenceSingleType
%type <ListQIFReferenceFullTypeVal>   y_MeasurePointNominalIds_ListQIFReferenceFullType
%type <MeasurePointNominalTypeVal>    y_MeasurePointNominalType
%type <MeasurePointNominalTypeVal>    y_MeasurePoint_MeasurePointNominalType
%type <MeasureSpecifiedFeaturesActionTypeVal> y_MeasureSpecifiedFeaturesActionType
%type <MeasureSpecifiedFeaturesActionTypeVal> y_MeasureSpecifiedFeatures_MeasureSpecifiedFeaturesActionType
%type <MeasureSpecifiedMeasurandsActionTypeVal> y_MeasureSpecifiedMeasurandsActionType
%type <MeasureSpecifiedMeasurandsActionTypeVal> y_MeasureSpecifiedMeasurands_MeasureSpecifiedMeasurandsActionType
%type <MeasuredAngularValueTypeVal>   y_MeasuredAngularValueType
%type <MeasuredAreaValueTypeVal>      y_MeasuredAreaValueType
%type <MeasuredAxisTypeVal>           y_MeasuredAxisType
%type <MeasuredCharacteristicsTypeVal> y_MeasuredCharacteristicsType
%type <MeasuredCharacteristicsTypeVal> y_MeasuredCharacteristics_MeasuredCharacteristicsType_0
%type <MeasuredDatumFeatureTypeVal>   y_MeasuredDatumFeatureType
%type <MeasuredDatumFeatureTypeVal>   y_MeasuredDatumFeature_MeasuredDatumFeatureType
%type <MeasuredDecimalTypeVal>        y_MeasuredDecimalType
%type <MeasuredEndRadiusTypeVal>      y_MeasuredEndRadiusType
%type <MeasuredFeatureTypeVal>        y_MeasuredFeatureType
%type <FeatureMeasurementsTypeVal>    y_MeasuredFeatures_FeatureMeasurementsType_0
%type <MeasuredForceValueTypeVal>     y_MeasuredForceValueType
%type <StatsArrayIdTypeVal>           y_MeasuredIds_StatsArrayIdType
%type <MeasuredLinearValueTypeVal>    y_MeasuredLinearValueType
%type <MeasuredMassValueTypeVal>      y_MeasuredMassValueType
%type <MeasuredPlaneTypeVal>          y_MeasuredPlaneType
%type <MeasuredPointAndVectorTypeVal> y_MeasuredPointAndVectorType
%type <StatsArrayIdTypeVal>           y_MeasuredPointIds_StatsArrayIdType
%type <MeasuredPointSe_1105_TypeVal>  y_MeasuredPointSe_1105_MeasuredPointSe_1105_Type_0
%type <MeasuredPointSe_1105_TypeVal>  y_MeasuredPointSe_1105_Type
%type <MeasuredPointSe_1105_TypeChoicePairVal> y_MeasuredPointSe_1105_TypeChoicePair
%type <MeasuredPointSe_1106_TypeVal>  y_MeasuredPointSe_1106_MeasuredPointSe_1106_Type
%type <MeasuredPointSe_1106_TypeVal>  y_MeasuredPointSe_1106_Type
%type <MeasuredPointSe_1106_TypeChoicePairVal> y_MeasuredPointSe_1106_TypeChoicePair
%type <MeasuredPointSe_1107_TypeVal>  y_MeasuredPointSe_1107_MeasuredPointSe_1107_Type_0
%type <MeasuredPointSe_1107_TypeVal>  y_MeasuredPointSe_1107_Type
%type <MeasuredPointSe_1107_TypeChoicePairVal> y_MeasuredPointSe_1107_TypeChoicePair
%type <MeasuredPointSe_1108_TypeVal>  y_MeasuredPointSe_1108_MeasuredPointSe_1108_Type
%type <MeasuredPointSe_1108_TypeVal>  y_MeasuredPointSe_1108_Type
%type <MeasuredPointSe_1108_TypeChoicePairVal> y_MeasuredPointSe_1108_TypeChoicePair
%type <MeasuredPointSe_1109_TypeVal>  y_MeasuredPointSe_1109_MeasuredPointSe_1109_Type_0
%type <MeasuredPointSe_1109_TypeVal>  y_MeasuredPointSe_1109_Type
%type <MeasuredPointSe_1109_TypeChoicePairVal> y_MeasuredPointSe_1109_TypeChoicePair
%type <MeasuredPointSe_1110_TypeVal>  y_MeasuredPointSe_1110_MeasuredPointSe_1110_Type_0
%type <MeasuredPointSe_1110_TypeVal>  y_MeasuredPointSe_1110_Type
%type <MeasuredPointSe_1110_TypeChoicePairVal> y_MeasuredPointSe_1110_TypeChoicePair
%type <MeasuredPointSe_1111_TypeVal>  y_MeasuredPointSe_1111_MeasuredPointSe_1111_Type_0
%type <MeasuredPointSe_1111_TypeVal>  y_MeasuredPointSe_1111_Type
%type <MeasuredPointSe_1111_TypeChoicePairVal> y_MeasuredPointSe_1111_TypeChoicePair
%type <MeasuredPointSe_1112_TypeVal>  y_MeasuredPointSe_1112_MeasuredPointSe_1112_Type_0
%type <MeasuredPointSe_1112_TypeVal>  y_MeasuredPointSe_1112_Type
%type <MeasuredPointSe_1112_TypeChoicePairVal> y_MeasuredPointSe_1112_TypeChoicePair
%type <MeasuredPointSe_1113_TypeVal>  y_MeasuredPointSe_1113_MeasuredPointSe_1113_Type_0
%type <MeasuredPointSe_1113_TypeVal>  y_MeasuredPointSe_1113_Type
%type <MeasuredPointSe_1113_TypeChoicePairVal> y_MeasuredPointSe_1113_TypeChoicePair
%type <MeasuredPointSe_1114_TypeVal>  y_MeasuredPointSe_1114_MeasuredPointSe_1114_Type_0
%type <MeasuredPointSe_1114_TypeVal>  y_MeasuredPointSe_1114_Type
%type <MeasuredPointSe_1114_TypeChoicePairVal> y_MeasuredPointSe_1114_TypeChoicePair
%type <MeasuredPointSe_1115_TypeVal>  y_MeasuredPointSe_1115_MeasuredPointSe_1115_Type_0
%type <MeasuredPointSe_1115_TypeVal>  y_MeasuredPointSe_1115_Type
%type <MeasuredPointSe_1115_TypeChoicePairVal> y_MeasuredPointSe_1115_TypeChoicePair
%type <MeasuredPointSe_1116_TypeVal>  y_MeasuredPointSe_1116_MeasuredPointSe_1116_Type_0
%type <MeasuredPointSe_1116_TypeVal>  y_MeasuredPointSe_1116_Type
%type <MeasuredPointSe_1116_TypeChoicePairVal> y_MeasuredPointSe_1116_TypeChoicePair
%type <MeasuredPointSe_1117_TypeVal>  y_MeasuredPointSe_1117_MeasuredPointSe_1117_Type_0
%type <MeasuredPointSe_1117_TypeVal>  y_MeasuredPointSe_1117_Type
%type <MeasuredPointSe_1125_TypeVal>  y_MeasuredPointSe_1125_MeasuredPointSe_1125_Type
%type <MeasuredPointSe_1125_TypeVal>  y_MeasuredPointSe_1125_Type
%type <MeasuredPointSe_1125_TypeChoicePairVal> y_MeasuredPointSe_1125_TypeChoicePair
%type <MeasuredPointSetTypeVal>       y_MeasuredPointSetType
%type <MeasuredPointSetTypeVal>       y_MeasuredPointSet_MeasuredPointSetType
%type <MeasuredPointSetsTypeVal>      y_MeasuredPointSetsType
%type <MeasuredPointSetsTypeVal>      y_MeasuredPointSets_MeasuredPointSetsType_0
%type <MeasuredPointTypeVal>          y_MeasuredPointType
%type <MeasuredPressureValueTypeVal>  y_MeasuredPressureValueType
%type <MeasuredSpeedValueTypeVal>     y_MeasuredSpeedValueType
%type <MeasuredTemperatureValueTypeVal> y_MeasuredTemperatureValueType
%type <MeasuredTimeValueTypeVal>      y_MeasuredTimeValueType
%type <MeasuredUnitVectorTypeVal>     y_MeasuredUnitVectorType
%type <MeasuredUserDefinedUnitValueTypeVal> y_MeasuredUserDefinedUnitValueType
%type <StatsValuesTypeVal>            y_MeasuredValues_StatsValuesType
%type <MeasuredZoneAxisTypeVal>       y_MeasuredZoneAxisType
%type <MeasuredZoneRadiiTypeVal>      y_MeasuredZoneRadiiType
%type <MeasuredFeatureTypeVal>        y_Measured_MeasuredFeatureType
%type <QIFReferenceTypeVal>           y_MeasurementDeviceId_QIFReferenceType_0
%type <ArrayReferenceFullTypeVal>     y_MeasurementDeviceIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_MeasurementDeviceIds_ArrayReferenceType_0
%type <MeasurementDeviceScaleTypeVal> y_MeasurementDeviceScaleType
%type <MeasurementDeviceTypeVal>      y_MeasurementDeviceType
%type <MeasurementDeviceTypeVal>      y_MeasurementDevice_MeasurementDeviceType
%type <MeasurementDeviceTypeVal>      y_MeasurementDevice_substituteType
%type <MeasurementDevicesTypeVal>     y_MeasurementDevicesType
%type <MeasurementDevicesTypeVal>     y_MeasurementDevices_MeasurementDevicesType_0
%type <MeasurementDirectiveEnumTypeVal> y_MeasurementDirectiveEnumType
%type <MeasurementDirectiveEnumTypeVal> y_MeasurementDirectiveEnum_MeasurementDirectiveEnumType
%type <MeasurementDirectiveTypeVal>   y_MeasurementDirectiveType
%type <MeasurementDirectiveTypeChoicePairVal> y_MeasurementDirectiveTypeChoicePair
%type <MeasurementDirectiveTypeVal>   y_MeasurementDirective_MeasurementDirectiveType_0
%type <LinearValueTypeVal>            y_MeasurementFieldSize_LinearValueType_0
%type <LaserTypeVal>                  y_MeasurementLaser_LaserType_0
%type <XmlStringVal>                  y_MeasurementObjectMaterial_XmlString_0
%type <MeasurementOffsetAlignmentOperationTypeVal> y_MeasurementOffsetAlignmentOperationType
%type <MeasurementOffsetAlignmentOperationTypeVal> y_MeasurementOffset_MeasurementOffsetAlignmentOperationType
%type <MeasurementOriginOffsetTypeVal> y_MeasurementOriginOffsetType
%type <UserDefinedUnitValueTypeVal>   y_MeasurementRate_UserDefinedUnitValueType_0
%type <MeasurementReso_1241_TypeVal>  y_MeasurementReso_1241_MeasurementReso_1241_Type_0
%type <MeasurementReso_1241_TypeVal>  y_MeasurementReso_1241_Type
%type <MeasurementReso_1241_TypeChoicePairVal> y_MeasurementReso_1241_TypeChoicePair
%type <XmlUnsignedIntVal>             y_MeasurementResourcesCount_XmlUnsignedInt_0
%type <MeasurementResourcesTypeVal>   y_MeasurementResourcesType
%type <MeasurementResourcesTypeVal>   y_MeasurementResources_MeasurementResourcesType_0
%type <MeasurementResultsSetTypeVal>  y_MeasurementResultsSetType
%type <MeasurementResultsSetTypeVal>  y_MeasurementResultsSet_MeasurementResultsSetType
%type <MeasurementResultsTypeVal>     y_MeasurementResultsType
%type <MeasurementResultsTypeVal>     y_MeasurementResults_MeasurementResultsType
%type <MeasurementRoomTypeVal>        y_MeasurementRoomType
%type <MeasurementRoomTypeVal>        y_MeasurementRoom_MeasurementRoomType
%type <MeasurementRoomsTypeVal>       y_MeasurementRoomsType
%type <MeasurementRoomsTypeVal>       y_MeasurementRooms_MeasurementRoomsType_0
%type <XmlBooleanVal>                 y_MeasurementsPlanPresent_XmlBoolean_0
%type <XmlUnsignedIntVal>             y_MeasurementsResultsCount_XmlUnsignedInt_0
%type <AngularErrorTypeVal>           y_MeasuringAccuracy_AngularErrorType_0
%type <ForceValueTypeVal>             y_MeasuringForce_ForceValueType_0
%type <XmlBooleanVal>                 y_MedianFeature_XmlBoolean_0
%type <MeshTriangleCor_1213_TypeVal>  y_MeshTriangleCor_1213_MeshTriangleCor_1213_Type
%type <MeshTriangleCor_1213_TypeVal>  y_MeshTriangleCor_1213_Type
%type <MeshTriangleCor_1213_TypeChoicePairVal> y_MeshTriangleCor_1213_TypeChoicePair
%type <MeshTriangleCor_1214_TypeVal>  y_MeshTriangleCor_1214_MeshTriangleCor_1214_Type_0
%type <MeshTriangleCor_1214_TypeVal>  y_MeshTriangleCor_1214_Type
%type <MeshTriangleCor_1214_TypeChoicePairVal> y_MeshTriangleCor_1214_TypeChoicePair
%type <MeshTriangleCor_1215_TypeVal>  y_MeshTriangleCor_1215_MeshTriangleCor_1215_Type
%type <MeshTriangleCor_1215_TypeVal>  y_MeshTriangleCor_1215_Type
%type <MeshTriangleCor_1215_TypeChoicePairVal> y_MeshTriangleCor_1215_TypeChoicePair
%type <MeshTriangleCor_1216_TypeVal>  y_MeshTriangleCor_1216_MeshTriangleCor_1216_Type_0
%type <MeshTriangleCor_1216_TypeVal>  y_MeshTriangleCor_1216_Type
%type <MeshTriangleCor_1216_TypeChoicePairVal> y_MeshTriangleCor_1216_TypeChoicePair
%type <MeshTriangleCoreTypeVal>       y_MeshTriangleCoreType
%type <MeshTriangleCoreTypeVal>       y_MeshTriangleCore_MeshTriangleCoreType
%type <MeshTriangleTyp_1217_TypeVal>  y_MeshTriangleTyp_1217_MeshTriangleTyp_1217_Type_0
%type <MeshTriangleTyp_1217_TypeVal>  y_MeshTriangleTyp_1217_Type
%type <MeshTriangleTyp_1217_TypeChoicePairVal> y_MeshTriangleTyp_1217_TypeChoicePair
%type <MeshTriangleTypeVal>           y_MeshTriangleType
%type <ElementReferenceTypeVal>       y_MeshTriangle_ElementReferenceType
%type <MeshTriangleTypeVal>           y_MeshTriangle_MeshTriangleType
%type <ElementReferenceTypeVal>       y_Mesh_ElementReferenceType
%type <PositionCoordinateMethodEnumTypeVal> y_Method_PositionCoordinateMethodEnumType
%type <MicrometerAnalogTypeVal>       y_MicrometerAnalogType
%type <MicrometerAnalogTypeVal>       y_MicrometerAnalog_MicrometerAnalogType
%type <MicrometerDigitalTypeVal>      y_MicrometerDigitalType
%type <MicrometerDigitalTypeVal>      y_MicrometerDigital_MicrometerDigitalType
%type <MicrometerTypeVal>             y_MicrometerType
%type <MicrometerTypeVal>             y_Micrometer_MicrometerType
%type <MicroscopeMeasureFeatureMethodTypeVal> y_MicroscopeMeasureFeatureMethodType
%type <MicroscopeMeasureFeatureMethodTypeVal> y_MicroscopeMeasureFeatureMethod_MicroscopeMeasureFeatureMethodType
%type <MicroscopeTypeVal>             y_MicroscopeType
%type <MicroscopeTypeVal>             y_Microscope_MicroscopeType
%type <PointFeatureMidPointTypeVal>   y_MidPoint_PointFeatureMidPointType
%type <LineMidlineTypeVal>            y_Midline_LineMidlineType
%type <PlaneMidplaneTypeVal>          y_Midplane_PlaneMidplaneType
%type <PressureValueTypeVal>          y_MinAmbientAirPressure_PressureValueType_0
%type <SpecifiedDecimalTypeVal>       y_MinAmbientRelativeHumidity_SpecifiedDecimalType_0
%type <TemperatureValueTypeVal>       y_MinAmbientTemperature_TemperatureValueType_0
%type <AngularValueTypeVal>           y_MinAzimuthalAxisAngle_AngularValueType
%type <StatsAngularTypeVal>           y_MinDeviationStats_StatsAngularType
%type <StatsAngularTypeVal>           y_MinDeviationStats_StatsAngularType_0
%type <StatsAreaTypeVal>              y_MinDeviationStats_StatsAreaType
%type <StatsAreaTypeVal>              y_MinDeviationStats_StatsAreaType_0
%type <StatsForceTypeVal>             y_MinDeviationStats_StatsForceType
%type <StatsForceTypeVal>             y_MinDeviationStats_StatsForceType_0
%type <StatsLinearTypeVal>            y_MinDeviationStats_StatsLinearType
%type <StatsLinearTypeVal>            y_MinDeviationStats_StatsLinearType_0
%type <StatsMassTypeVal>              y_MinDeviationStats_StatsMassType
%type <StatsMassTypeVal>              y_MinDeviationStats_StatsMassType_0
%type <StatsPressureTypeVal>          y_MinDeviationStats_StatsPressureType
%type <StatsPressureTypeVal>          y_MinDeviationStats_StatsPressureType_0
%type <StatsSpeedTypeVal>             y_MinDeviationStats_StatsSpeedType
%type <StatsSpeedTypeVal>             y_MinDeviationStats_StatsSpeedType_0
%type <StatsTemperatureTypeVal>       y_MinDeviationStats_StatsTemperatureType
%type <StatsTemperatureTypeVal>       y_MinDeviationStats_StatsTemperatureType_0
%type <StatsTimeTypeVal>              y_MinDeviationStats_StatsTimeType
%type <StatsTimeTypeVal>              y_MinDeviationStats_StatsTimeType_0
%type <StatsUserDefinedUnitTypeVal>   y_MinDeviationStats_StatsUserDefinedUnitType
%type <StatsUserDefinedUnitTypeVal>   y_MinDeviationStats_StatsUserDefinedUnitType_0
%type <LinearDualValueTypeVal>        y_MinDualValue_LinearDualValueType_0
%type <LinearValueTypeVal>            y_MinEnvironmentalAltitude_LinearValueType_0
%type <MeasuredDecimalTypeVal>        y_MinFirstAxis_MeasuredDecimalType
%type <LinearValueTypeVal>            y_MinFocusDistance_LinearValueType_0
%type <LinearValueTypeVal>            y_MinLinearAxis_LinearValueType
%type <LinearValueTypeVal>            y_MinMeasurementRange_LinearValueType_0
%type <AngularValueTypeVal>           y_MinMeasuringDistance_AngularValueType_0
%type <LinearValueTypeVal>            y_MinMeasuringDistance_LinearValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MinOperatingCurrent_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MinOperatingVoltage_UserDefinedUnitValueType_0
%type <PositiveDecimalTypeVal>        y_MinPointDensity_PositiveDecimalType
%type <PointTypeVal>                  y_MinPoint_PointType
%type <XmlUnsignedIntVal>             y_MinPoints_XmlUnsignedInt
%type <AngularValueTypeVal>           y_MinPolarAxisAngle_AngularValueType
%type <AngularValueTypeVal>           y_MinPolarAxis_AngularValueType
%type <UserDefinedUnitValueTypeVal>   y_MinPowerSupplyVoltage_UserDefinedUnitValueType_0
%type <LinearValueTypeVal>            y_MinRadialAxis_LinearValueType
%type <LinearValueTypeVal>            y_MinRadius_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_MinRadius_MeasuredLinearValueType
%type <AngularValueTypeVal>           y_MinRotaryAxis_AngularValueType
%type <MeasuredDecimalTypeVal>        y_MinSecondAxis_MeasuredDecimalType
%type <MeasuredDecimalTypeVal>        y_MinThirdAxis_MeasuredDecimalType
%type <MinTypeVal>                    y_MinType
%type <StatsAngularTypeVal>           y_MinValueStats_StatsAngularType
%type <StatsAngularTypeVal>           y_MinValueStats_StatsAngularType_0
%type <StatsAreaTypeVal>              y_MinValueStats_StatsAreaType
%type <StatsAreaTypeVal>              y_MinValueStats_StatsAreaType_0
%type <StatsForceTypeVal>             y_MinValueStats_StatsForceType
%type <StatsForceTypeVal>             y_MinValueStats_StatsForceType_0
%type <StatsLinearTypeVal>            y_MinValueStats_StatsLinearType
%type <StatsLinearTypeVal>            y_MinValueStats_StatsLinearType_0
%type <StatsMassTypeVal>              y_MinValueStats_StatsMassType
%type <StatsMassTypeVal>              y_MinValueStats_StatsMassType_0
%type <StatsPressureTypeVal>          y_MinValueStats_StatsPressureType
%type <StatsPressureTypeVal>          y_MinValueStats_StatsPressureType_0
%type <StatsSpeedTypeVal>             y_MinValueStats_StatsSpeedType
%type <StatsSpeedTypeVal>             y_MinValueStats_StatsSpeedType_0
%type <StatsTemperatureTypeVal>       y_MinValueStats_StatsTemperatureType
%type <StatsTemperatureTypeVal>       y_MinValueStats_StatsTemperatureType_0
%type <StatsTimeTypeVal>              y_MinValueStats_StatsTimeType
%type <StatsTimeTypeVal>              y_MinValueStats_StatsTimeType_0
%type <StatsUserDefinedUnitTypeVal>   y_MinValueStats_StatsUserDefinedUnitType
%type <StatsUserDefinedUnitTypeVal>   y_MinValueStats_StatsUserDefinedUnitType_0
%type <AngularValueTypeVal>           y_MinValue_AngularValueType
%type <AngularValueTypeVal>           y_MinValue_AngularValueType_0
%type <AreaValueTypeVal>              y_MinValue_AreaValueType
%type <AreaValueTypeVal>              y_MinValue_AreaValueType_0
%type <ForceValueTypeVal>             y_MinValue_ForceValueType
%type <ForceValueTypeVal>             y_MinValue_ForceValueType_0
%type <LinearValueTypeVal>            y_MinValue_LinearValueType
%type <LinearValueTypeVal>            y_MinValue_LinearValueType_0
%type <MassValueTypeVal>              y_MinValue_MassValueType
%type <MassValueTypeVal>              y_MinValue_MassValueType_0
%type <MeasuredAngularValueTypeVal>   y_MinValue_MeasuredAngularValueType_0
%type <MeasuredAreaValueTypeVal>      y_MinValue_MeasuredAreaValueType_0
%type <MeasuredForceValueTypeVal>     y_MinValue_MeasuredForceValueType_0
%type <MeasuredLinearValueTypeVal>    y_MinValue_MeasuredLinearValueType_0
%type <MeasuredMassValueTypeVal>      y_MinValue_MeasuredMassValueType_0
%type <MeasuredPressureValueTypeVal>  y_MinValue_MeasuredPressureValueType_0
%type <MeasuredSpeedValueTypeVal>     y_MinValue_MeasuredSpeedValueType_0
%type <MeasuredTemperatureValueTypeVal> y_MinValue_MeasuredTemperatureValueType_0
%type <MeasuredTimeValueTypeVal>      y_MinValue_MeasuredTimeValueType_0
%type <MeasuredUserDefinedUnitValueTypeVal> y_MinValue_MeasuredUserDefinedUnitValueType_0
%type <PressureValueTypeVal>          y_MinValue_PressureValueType
%type <PressureValueTypeVal>          y_MinValue_PressureValueType_0
%type <SpeedValueTypeVal>             y_MinValue_SpeedValueType
%type <SpeedValueTypeVal>             y_MinValue_SpeedValueType_0
%type <TemperatureValueTypeVal>       y_MinValue_TemperatureValueType
%type <TemperatureValueTypeVal>       y_MinValue_TemperatureValueType_0
%type <TimeValueTypeVal>              y_MinValue_TimeValueType
%type <TimeValueTypeVal>              y_MinValue_TimeValueType_0
%type <UserDefinedUnitValueTypeVal>   y_MinValue_UserDefinedUnitValueType
%type <UserDefinedUnitValueTypeVal>   y_MinValue_UserDefinedUnitValueType_0
%type <ForceValueTypeVal>             y_MinWireRetractionForce_ForceValueType_0
%type <LinearValueTypeVal>            y_MinZAxis_LinearValueType
%type <MinTypeVal>                    y_Min_MinType
%type <BoundingBoxTypeVal>            y_MinimumBoundingBox_BoundingBoxType_0
%type <XmlTokenVal>                   y_MinimumMaterialRemoval_XmlToken_0
%type <LinearValueTypeVal>            y_MinimumTargetDiameter_LinearValueType_0
%type <LinearValueTypeVal>            y_MinimumTolerance_LinearValueType_0
%type <StatsMeasuredDecimalWithReferenceTypeVal> y_Minimum_StatsMeasuredDecimalWithReferenceType
%type <XmlBooleanVal>                 y_Minimum_XmlBoolean
%type <LinearValueTypeVal>            y_MinorDiameter_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_MinorDiameter_MeasuredLinearValueType_0
%type <MinusTypeVal>                  y_MinusType
%type <MinusTypeVal>                  y_Minus_MinusType
%type <DisplayStyleModeTypeVal>       y_Mode_DisplayStyleModeType
%type <QIFReferenceFullTypeVal>       y_ModelId_QIFReferenceFullType
%type <XmlStringVal>                  y_ModelNumber_XmlString
%type <XmlStringVal>                  y_ModelNumber_XmlString_0
%type <XmlDoubleVal>                  y_ModelTolerance_XmlDouble_0
%type <XmlBooleanVal>                 y_ModifiedThread_XmlBoolean_0
%type <LeaderModifierEnumTypeVal>     y_Modifier_LeaderModifierEnumType_0
%type <ModifyingPlaneEnumTypeVal>     y_ModifyingPlaneEnumType
%type <XmlStringVal>                  y_MotorType_XmlString_0
%type <XmlStringVal>                  y_Mounting_XmlString_0
%type <MovableDatumTargetDirectionTypeVal> y_MovableDatumTargetDirectionType
%type <MovableDatumTargetDirectionTypeVal> y_MovableDatumTarget_MovableDatumTargetDirectionType_0
%type <ExplodedViewMoveGroupTypeVal>  y_MoveGroup_ExplodedViewMoveGroupType
%type <ExplodedViewMoveGroupsTypeVal> y_MoveGroups_ExplodedViewMoveGroupsType
%type <PointFeatureMovePointAxisTypeVal> y_MovePointAxis_PointFeatureMovePointAxisType
%type <PointFeatureMovePointVectorTypeVal> y_MovePointVector_PointFeatureMovePointVectorType
%type <PointFeatureMovePointTypeVal>  y_MovePoint_PointFeatureMovePointType
%type <MultiLeadThreadSpecificationTypeVal> y_MultiLeadSpecification_MultiLeadThreadSpecificationType
%type <MultiLeadThreadSpecificationTypeVal> y_MultiLeadThreadSpecificationType
%type <XmlIntVal>                     y_MultiPeakMeasurement_XmlInt_0
%type <MultipleCarriageCartesianCMMTypeVal> y_MultipleCarriageCartesianCMMType
%type <MultipleCarriageCartesianCMMTypeVal> y_MultipleCarriageCartesianCMM_MultipleCarriageCartesianCMMType
%type <QIFMustNotTypeVal>             y_MustNot_QIFMustNotType
%type <QIFMustTypeVal>                y_Must_QIFMustType
%type <XmlIDVal>                      y_Name_XmlID
%type <XmlNMTOKENVal>                 y_Name_XmlNMTOKEN_0
%type <XmlStringVal>                  y_Name_XmlString
%type <XmlStringVal>                  y_Name_XmlString_0
%type <XmlTokenVal>                   y_Name_XmlToken
%type <XmlTokenVal>                   y_Name_XmlToken_0
%type <NaturalTypeVal>                y_NaturalType
%type <LinearValueTypeVal>            y_Near_LinearValueType
%type <NegateTypeVal>                 y_NegateType
%type <NegateTypeVal>                 y_Negate_NegateType
%type <ArrayBinaryTypeVal>            y_NeighboursBinary_ArrayBinaryType
%type <ArrayI3TypeVal>                y_Neighbours_ArrayI3Type
%type <LinearValueTypeVal>            y_NestingIndex_LinearValueType
%type <LinearValueTypeVal>            y_NominalBallCenterToBallCenterLength_LinearValueType_0
%type <NominalDatumFeatureTypeVal>    y_NominalDatumFeatureType
%type <NominalDatumFeatureTypeVal>    y_NominalDatumFeature_NominalDatumFeatureType
%type <UnitVectorTypeVal>             y_NominalDirection_UnitVectorType
%type <NominalOffsetAlignmentOperationTypeVal> y_NominalOffsetAlignmentOperationType
%type <NominalOffsetAlignmentOperationTypeVal> y_NominalOffset_NominalOffsetAlignmentOperationType
%type <NominalPointSetListTypeVal>    y_NominalPointSetListType
%type <PointSetNominalTypeVal>        y_NominalPointSet_PointSetNominalType
%type <NominalPointSetListTypeVal>    y_NominalPointSets_NominalPointSetListType_0
%type <NominalRotationAlignmentOperationTypeVal> y_NominalRotationAlignmentOperationType
%type <NominalRotationAlignmentOperationTypeVal> y_NominalRotation_NominalRotationAlignmentOperationType
%type <LinearValueTypeVal>            y_NominalSinglePointAccuracy_LinearValueType_0
%type <TransformMatrixTypeVal>        y_NominalTransform_TransformMatrixType_0
%type <LinearValueTypeVal>            y_NominalVolumetricAccuracy_LinearValueType_0
%type <XmlBooleanVal>                 y_NominalsCalculated_XmlBoolean_0
%type <XmlTokenVal>                   y_NonConformanceDesignator_XmlToken_0
%type <NonDestructiveTestingEnumTypeVal> y_NonDestructiveTestingEnumType
%type <ArrayNonDestructiveTestingTypeVal> y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
%type <CoaxialityNonDiametricalZoneTypeVal> y_NonDiametricalZone_CoaxialityNonDiametricalZoneType
%type <ConcentricityNonDiametricalZoneTypeVal> y_NonDiametricalZone_ConcentricityNonDiametricalZoneType
%type <PositionNonDiametricalZoneTypeVal> y_NonDiametricalZone_PositionNonDiametricalZoneType
%type <StraightnessNonDiametricalZoneTypeVal> y_NonDiametricalZone_StraightnessNonDiametricalZoneType
%type <NonToleranceEnumTypeVal>       y_NonToleranceEnumType
%type <NonToleranceEnumTypeVal>       y_NonTolerance_NonToleranceEnumType
%type <TriangleVertexNormalTypeVal>   y_NormalSpecial_TriangleVertexNormalType
%type <MeasuredUnitVectorTypeVal>     y_Normal_MeasuredUnitVectorType
%type <MeasuredUnitVectorTypeVal>     y_Normal_MeasuredUnitVectorType_0
%type <UnitVectorSimpleTypeVal>       y_Normal_UnitVectorSimpleType
%type <UnitVectorTypeVal>             y_Normal_UnitVectorType
%type <UnitVectorTypeVal>             y_Normal_UnitVectorType_0
%type <StatsMeasuredDecimalTypeVal>   y_Normality_StatsMeasuredDecimalType
%type <ArrayBinaryTypeVal>            y_NormalsBinary_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_NormalsSpecialBinary_ArrayBinaryType
%type <ArrayTriangleVertexNormalTypeVal> y_NormalsSpecial_ArrayTriangleVertexNormalType
%type <ArrayUnitVectorTypeVal>        y_Normals_ArrayUnitVectorType
%type <ListDoubleTypeVal>             y_Normals_ListDoubleType
%type <XmlBooleanVal>                 y_NotConvex_XmlBoolean_0
%type <NotTypeVal>                    y_NotType
%type <NotTypeVal>                    y_Not_NotType
%type <QIFReferenceTypeVal>           y_NotableEventId_QIFReferenceType_0
%type <ArrayReferenceTypeVal>         y_NotableEventIds_ArrayReferenceType_0
%type <NotableEventTypeVal>           y_NotableEventType
%type <NotableEventTypeVal>           y_NotableEvent_NotableEventType
%type <NotableEventsTypeVal>          y_NotableEventsType
%type <NotableEventsTypeVal>          y_NotableEvents_NotableEventsType_0
%type <NoteFlagSetTypeVal>            y_NoteFlagSetType
%type <NoteFlagSetTypeVal>            y_NoteFlagSet_NoteFlagSetType_0
%type <NoteFlagTypeVal>               y_NoteFlagType
%type <NoteFlagTypeVal>               y_NoteFlag_NoteFlagType
%type <ArrayReferenceFullTypeVal>     y_NoteIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_NoteIds_ArrayReferenceType_0
%type <NoteSetTypeVal>                y_NoteSetType
%type <NoteSetTypeVal>                y_NoteSet_NoteSetType_0
%type <NoteTypeVal>                   y_NoteType
%type <NoteTypeVal>                   y_Note_NoteType
%type <ArrayReferenceFullTypeVal>     y_NotedEventIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_NotedEventIds_ArrayReferenceType_0
%type <NotedEventTypeVal>             y_NotedEventType
%type <NotedEventTypeVal>             y_NotedEvent_NotedEventType
%type <NotedEventsTypeVal>            y_NotedEventsType
%type <NotedEventsTypeVal>            y_NotedEvents_NotedEventsType_0
%type <CriterionIntegerTypeVal>       y_NumOutOfControlRng_CriterionIntegerType
%type <CriterionIntegerTypeVal>       y_NumOutOfControl_CriterionIntegerType
%type <CriterionIntegerTypeVal>       y_NumOutOfTolerance_CriterionIntegerType
%type <LimitingNumberTypeVal>         y_NumberAllowedExceptions_LimitingNumberType
%type <LimitingNumberTypeVal>         y_NumberAllowedExceptions_LimitingNumberType_0
%type <StatsNonNegativeIntegerTypeVal> y_NumberFailures_StatsNonNegativeIntegerType
%type <XmlPositiveIntegerVal>         y_NumberOfAppraisers_XmlPositiveInteger
%type <XmlIntVal>                     y_NumberOfCameraPixels_XmlInt_0
%type <NaturalTypeVal>                y_NumberOfFacets_NaturalType
%type <NaturalTypeVal>                y_NumberOfFeaturesPerRow_NaturalType
%type <NaturalTypeVal>                y_NumberOfFeatures_NaturalType
%type <XmlIntVal>                     y_NumberOfJoints_XmlInt_0
%type <XmlPositiveIntegerVal>         y_NumberOfMeasurementPoints_XmlPositiveInteger_0
%type <XmlPositiveIntegerVal>         y_NumberOfParts_XmlPositiveInteger
%type <XmlIntVal>                     y_NumberOfPixels_XmlInt_0
%type <XmlUnsignedIntVal>             y_NumberOfPoints_XmlUnsignedInt
%type <NaturalTypeVal>                y_NumberOfRows_NaturalType
%type <XmlPositiveIntegerVal>         y_NumberOfSamples_XmlPositiveInteger
%type <XmlPositiveIntegerVal>         y_NumberOfSteps_XmlPositiveInteger
%type <XmlPositiveIntegerVal>         y_NumberOfTrials_XmlPositiveInteger
%type <StatsNonNegativeIntegerWithReferencesTypeVal> y_NumberOutOfControl_StatsNonNegativeIntegerWithReferencesType
%type <StatsNonNegativeIntegerWithReferencesTypeVal> y_NumberOutOfTolerance_StatsNonNegativeIntegerWithReferencesType
%type <StatsNonNegativeIntegerWithReferencesTypeVal> y_NumberOverUpperTolerance_StatsNonNegativeIntegerWithReferencesType
%type <StatsNonNegativeIntegerTypeVal> y_NumberSubgroups_StatsNonNegativeIntegerType
%type <StatsNonNegativeIntegerWithReferencesTypeVal> y_NumberUnderLowerTolerance_StatsNonNegativeIntegerWithReferencesType
%type <NumberedPlanElementTypeVal>    y_NumberedPlanElementType
%type <NumberedPlanElementTypeVal>    y_NumberedPlanElement_NumberedPlanElementType
%type <NumberedPlanElementsTypeVal>   y_NumberedPlanElementsType
%type <NaturalTypeVal>                y_Numerator_NaturalType
%type <XmlPositiveIntegerVal>         y_Numerator_XmlPositiveInteger
%type <StatsWithReferenceBaseTypeVal> y_NumericCharacteristicStatsValue_substituteType
%type <StatsWithReferenceBaseTypeVal> y_NumericCharacteristicWithTolStatsValue_substituteType
%type <NumericalLengthAccuracyTypeVal> y_NumericalLengthAccuracyType
%type <Nurbs12CoreTypeVal>            y_Nurbs12CoreType
%type <Nurbs12CoreType_1218_TypeVal>  y_Nurbs12CoreType_1218_Nurbs12CoreType_1218_Type
%type <Nurbs12CoreType_1218_TypeVal>  y_Nurbs12CoreType_1218_Type
%type <Nurbs12CoreType_1218_TypeChoicePairVal> y_Nurbs12CoreType_1218_TypeChoicePair
%type <Nurbs12CoreTypeVal>            y_Nurbs12Core_Nurbs12CoreType
%type <Nurbs12TypeVal>                y_Nurbs12Type
%type <Nurbs12TypeVal>                y_Nurbs12_Nurbs12Type
%type <Nurbs13CoreTypeVal>            y_Nurbs13CoreType
%type <Nurbs13CoreType_1219_TypeVal>  y_Nurbs13CoreType_1219_Nurbs13CoreType_1219_Type
%type <Nurbs13CoreType_1219_TypeVal>  y_Nurbs13CoreType_1219_Type
%type <Nurbs13CoreType_1219_TypeChoicePairVal> y_Nurbs13CoreType_1219_TypeChoicePair
%type <Nurbs13CoreTypeVal>            y_Nurbs13Core_Nurbs13CoreType
%type <Nurbs13TypeVal>                y_Nurbs13Type
%type <Nurbs13TypeVal>                y_Nurbs13_Nurbs13Type
%type <Nurbs23CoreTypeVal>            y_Nurbs23CoreType
%type <Nurbs23CoreType_1220_TypeVal>  y_Nurbs23CoreType_1220_Nurbs23CoreType_1220_Type
%type <Nurbs23CoreType_1220_TypeVal>  y_Nurbs23CoreType_1220_Type
%type <Nurbs23CoreType_1220_TypeChoicePairVal> y_Nurbs23CoreType_1220_TypeChoicePair
%type <Nurbs23CoreTypeVal>            y_Nurbs23Core_Nurbs23CoreType
%type <Nurbs23TypeVal>                y_Nurbs23Type
%type <Nurbs23TypeVal>                y_Nurbs23_Nurbs23Type
%type <QIFReferenceFullTypeVal>       y_ObjectId_QIFReferenceFullType
%type <MeasuredTemperatureValueTypeVal> y_ObjectTemperature_MeasuredTemperatureValueType_0
%type <LinearValueTypeVal>            y_ObjectiveFocalLength_LinearValueType_0
%type <XmlDecimalVal>                 y_ObjectiveMagnification_XmlDecimal_0
%type <RoughnessObtentionEnumTypeVal> y_Obtention_RoughnessObtentionEnumType_0
%type <Offset23CoreTypeVal>           y_Offset23CoreType
%type <Offset23CoreTypeVal>           y_Offset23Core_Offset23CoreType
%type <Offset23TypeVal>               y_Offset23Type
%type <Offset23TypeVal>               y_Offset23_Offset23Type
%type <LinearValueTypeVal>            y_OffsetDistance_LinearValueType_0
%type <LinearValueTypeVal>            y_OffsetVolumetricPerformance_LinearValueType
%type <XmlBooleanVal>                 y_OffsetZone_XmlBoolean_0
%type <LinearValueTypeVal>            y_Offset_LinearValueType
%type <LinearValueTypeVal>            y_Offset_LinearValueType_0
%type <PlaneOffsetTypeVal>            y_Offset_PlaneOffsetType
%type <VectorTypeVal>                 y_Offset_VectorType
%type <XmlDecimalVal>                 y_Offset_XmlDecimal_0
%type <OneOfActionGroupTypeVal>       y_OneOfActionGroupType
%type <OneOfActionGroupTypeVal>       y_OneOfActionGroup_OneOfActionGroupType
%type <OneOfActionGroupTypeVal>       y_OneOfPlanRoot_OneOfActionGroupType
%type <WeldFilletOneSideTypeVal>      y_OneSide_WeldFilletOneSideType
%type <WeldGrooveOneSideTypeVal>      y_OneSide_WeldGrooveOneSideType
%type <OneSidedCapabilityCalculationEnumTypeVal> y_OneSidedCapabilityCalculationEnumType
%type <CriterionOutOfTypeVal>         y_OneThirdGrouping_CriterionOutOfType
%type <OpenCurvePointSamplingStrategyEnumTypeVal> y_OpenCurvePointSamplingStrategyEnumType
%type <XmlStringVal>                  y_OperatorIdentifier_XmlString_0
%type <OppositeAngledLinesBestFitTypeVal> y_OppositeAngledLinesBestFitType
%type <OppositeAngledLinesCastTypeVal> y_OppositeAngledLinesCastType
%type <OppositeAngledLinesCheckedFeatureTypeVal> y_OppositeAngledLinesCheckedFeatureType
%type <OppositeAngledLinesCheckedTypeVal> y_OppositeAngledLinesCheckedType
%type <OppositeAngledLinesCheckedTypeChoicePairVal> y_OppositeAngledLinesCheckedTypeChoicePair
%type <OppositeAngledLinesConstructionMethodTypeVal> y_OppositeAngledLinesConstructionMethodType
%type <OppositeAngledLinesConstructionMethodTypeChoicePairVal> y_OppositeAngledLinesConstructionMethodTypeChoicePair
%type <OppositeAngledLinesCopyTypeVal> y_OppositeAngledLinesCopyType
%type <OppositeAngledLinesFeatureDefinitionTypeVal> y_OppositeAngledLinesFeatureDefinitionType
%type <OppositeAngledLinesFeatureDefinitionTypeVal> y_OppositeAngledLinesFeatureDefinition_OppositeAngledLinesFeatureDefinitionType
%type <OppositeAngledLinesFeatureItemTypeVal> y_OppositeAngledLinesFeatureItemType
%type <OppositeAngledLinesFeatureItemTypeVal> y_OppositeAngledLinesFeatureItem_OppositeAngledLinesFeatureItemType
%type <OppositeAngledLinesFeatureMeasurementTypeVal> y_OppositeAngledLinesFeatureMeasurementType
%type <OppositeAngledLinesFeatureMeasurementTypeVal> y_OppositeAngledLinesFeatureMeasurement_OppositeAngledLinesFeatureMeasurementType
%type <OppositeAngledLinesFeatureNominalTypeVal> y_OppositeAngledLinesFeatureNominalType
%type <OppositeAngledLinesFeatureNominalTypeVal> y_OppositeAngledLinesFeatureNominal_OppositeAngledLinesFeatureNominalType
%type <OppositeAngledLinesFromScanTypeVal> y_OppositeAngledLinesFromScanType
%type <OppositeAngledLinesIntersectionTypeVal> y_OppositeAngledLinesIntersectionType
%type <OppositeAngledLinesMeasurementDeterminationTypeVal> y_OppositeAngledLinesMeasurementDeterminationType
%type <OppositeAngledLinesMeasurementDeterminationTypeChoicePairVal> y_OppositeAngledLinesMeasurementDeterminationTypeChoicePair
%type <OppositeAngledLinesPointSamplingStrategyTypeVal> y_OppositeAngledLinesPointSamplingStrategyType
%type <OppositeAngledLinesPointSamplingStrategyTypeChoicePairVal> y_OppositeAngledLinesPointSamplingStrategyTypeChoicePair
%type <OppositeAngledLinesProjectionTypeVal> y_OppositeAngledLinesProjectionType
%type <OppositeAngledLinesRecompTypeVal> y_OppositeAngledLinesRecompType
%type <OppositeAngledLinesTransformTypeVal> y_OppositeAngledLinesTransformType
%type <OppositeAngledP_1118_TypeVal>  y_OppositeAngledP_1118_OppositeAngledP_1118_Type
%type <OppositeAngledP_1118_TypeVal>  y_OppositeAngledP_1118_Type
%type <OppositeAngledP_1118_TypeChoicePairVal> y_OppositeAngledP_1118_TypeChoicePair
%type <OppositeAngledP_1119_TypeVal>  y_OppositeAngledP_1119_OppositeAngledP_1119_Type_0
%type <OppositeAngledP_1119_TypeVal>  y_OppositeAngledP_1119_Type
%type <OppositeAngledP_1119_TypeChoicePairVal> y_OppositeAngledP_1119_TypeChoicePair
%type <OppositeAngledPlanesBestFitTypeVal> y_OppositeAngledPlanesBestFitType
%type <OppositeAngledPlanesCastTypeVal> y_OppositeAngledPlanesCastType
%type <OppositeAngledPlanesCheckedFeatureTypeVal> y_OppositeAngledPlanesCheckedFeatureType
%type <OppositeAngledPlanesCheckedTypeVal> y_OppositeAngledPlanesCheckedType
%type <OppositeAngledPlanesCheckedTypeChoicePairVal> y_OppositeAngledPlanesCheckedTypeChoicePair
%type <OppositeAngledPlanesConstructionMethodTypeVal> y_OppositeAngledPlanesConstructionMethodType
%type <OppositeAngledPlanesConstructionMethodTypeChoicePairVal> y_OppositeAngledPlanesConstructionMethodTypeChoicePair
%type <OppositeAngledPlanesCopyTypeVal> y_OppositeAngledPlanesCopyType
%type <OppositeAngledPlanesFeatureDefinitionTypeVal> y_OppositeAngledPlanesFeatureDefinitionType
%type <OppositeAngledPlanesFeatureDefinitionTypeVal> y_OppositeAngledPlanesFeatureDefinition_OppositeAngledPlanesFeatureDefinitionType
%type <OppositeAngledPlanesFeatureItemTypeVal> y_OppositeAngledPlanesFeatureItemType
%type <OppositeAngledPlanesFeatureItemTypeVal> y_OppositeAngledPlanesFeatureItem_OppositeAngledPlanesFeatureItemType
%type <OppositeAngledPlanesFeatureMeasurementTypeVal> y_OppositeAngledPlanesFeatureMeasurementType
%type <OppositeAngledPlanesFeatureMeasurementTypeVal> y_OppositeAngledPlanesFeatureMeasurement_OppositeAngledPlanesFeatureMeasurementType
%type <OppositeAngledPlanesFeatureNominalTypeVal> y_OppositeAngledPlanesFeatureNominalType
%type <OppositeAngledPlanesFeatureNominalTypeVal> y_OppositeAngledPlanesFeatureNominal_OppositeAngledPlanesFeatureNominalType
%type <OppositeAngledPlanesFromScanTypeVal> y_OppositeAngledPlanesFromScanType
%type <OppositeAngledPlanesMeasurementDeterminationTypeVal> y_OppositeAngledPlanesMeasurementDeterminationType
%type <OppositeAngledPlanesMeasurementDeterminationTypeChoicePairVal> y_OppositeAngledPlanesMeasurementDeterminationTypeChoicePair
%type <OppositeAngledPlanesPointSamplingStrategyTypeVal> y_OppositeAngledPlanesPointSamplingStrategyType
%type <OppositeAngledPlanesPointSamplingStrategyTypeChoicePairVal> y_OppositeAngledPlanesPointSamplingStrategyTypeChoicePair
%type <OppositeAngledPlanesRecompTypeVal> y_OppositeAngledPlanesRecompType
%type <OppositeAngledPlanesTransformTypeVal> y_OppositeAngledPlanesTransformType
%type <OppositeParallelLinesBestFitTypeVal> y_OppositeParallelLinesBestFitType
%type <OppositeParallelLinesCastTypeVal> y_OppositeParallelLinesCastType
%type <OppositeParallelLinesCheckedFeatureTypeVal> y_OppositeParallelLinesCheckedFeatureType
%type <OppositeParallelLinesCheckedTypeVal> y_OppositeParallelLinesCheckedType
%type <OppositeParallelLinesCheckedTypeChoicePairVal> y_OppositeParallelLinesCheckedTypeChoicePair
%type <OppositeParallelLinesConstructionMethodTypeVal> y_OppositeParallelLinesConstructionMethodType
%type <OppositeParallelLinesConstructionMethodTypeChoicePairVal> y_OppositeParallelLinesConstructionMethodTypeChoicePair
%type <OppositeParallelLinesCopyTypeVal> y_OppositeParallelLinesCopyType
%type <OppositeParallelLinesFeatureDefinitionTypeVal> y_OppositeParallelLinesFeatureDefinitionType
%type <OppositeParallelLinesFeatureDefinitionTypeVal> y_OppositeParallelLinesFeatureDefinition_OppositeParallelLinesFeatureDefinitionType
%type <OppositeParallelLinesFeatureItemTypeVal> y_OppositeParallelLinesFeatureItemType
%type <OppositeParallelLinesFeatureItemTypeVal> y_OppositeParallelLinesFeatureItem_OppositeParallelLinesFeatureItemType
%type <OppositeParallelLinesFeatureMeasurementTypeVal> y_OppositeParallelLinesFeatureMeasurementType
%type <OppositeParallelLinesFeatureMeasurementTypeVal> y_OppositeParallelLinesFeatureMeasurement_OppositeParallelLinesFeatureMeasurementType
%type <OppositeParallelLinesFeatureNominalTypeVal> y_OppositeParallelLinesFeatureNominalType
%type <OppositeParallelLinesFeatureNominalTypeVal> y_OppositeParallelLinesFeatureNominal_OppositeParallelLinesFeatureNominalType
%type <OppositeParallelLinesFromScanTypeVal> y_OppositeParallelLinesFromScanType
%type <OppositeParallelLinesIntersectionTypeVal> y_OppositeParallelLinesIntersectionType
%type <OppositeParallelLinesMeasurementDeterminationTypeVal> y_OppositeParallelLinesMeasurementDeterminationType
%type <OppositeParallelLinesMeasurementDeterminationTypeChoicePairVal> y_OppositeParallelLinesMeasurementDeterminationTypeChoicePair
%type <OppositeParallelLinesPointSamplingStrategyTypeVal> y_OppositeParallelLinesPointSamplingStrategyType
%type <OppositeParallelLinesPointSamplingStrategyTypeChoicePairVal> y_OppositeParallelLinesPointSamplingStrategyTypeChoicePair
%type <OppositeParallelLinesProjectionTypeVal> y_OppositeParallelLinesProjectionType
%type <OppositeParallelLinesRecompTypeVal> y_OppositeParallelLinesRecompType
%type <OppositeParallelLinesTransformTypeVal> y_OppositeParallelLinesTransformType
%type <OppositeParallelPlanesBestFitTypeVal> y_OppositeParallelPlanesBestFitType
%type <OppositeParallelPlanesCastTypeVal> y_OppositeParallelPlanesCastType
%type <OppositeParallelPlanesCheckedFeatureTypeVal> y_OppositeParallelPlanesCheckedFeatureType
%type <OppositeParallelPlanesCheckedTypeVal> y_OppositeParallelPlanesCheckedType
%type <OppositeParallelPlanesCheckedTypeChoicePairVal> y_OppositeParallelPlanesCheckedTypeChoicePair
%type <OppositeParallelPlanesConstructionMethodTypeVal> y_OppositeParallelPlanesConstructionMethodType
%type <OppositeParallelPlanesConstructionMethodTypeChoicePairVal> y_OppositeParallelPlanesConstructionMethodTypeChoicePair
%type <OppositeParallelPlanesCopyTypeVal> y_OppositeParallelPlanesCopyType
%type <OppositeParallelPlanesFeatureDefinitionTypeVal> y_OppositeParallelPlanesFeatureDefinitionType
%type <OppositeParallelPlanesFeatureDefinitionTypeVal> y_OppositeParallelPlanesFeatureDefinition_OppositeParallelPlanesFeatureDefinitionType
%type <OppositeParallelPlanesFeatureItemTypeVal> y_OppositeParallelPlanesFeatureItemType
%type <OppositeParallelPlanesFeatureItemTypeVal> y_OppositeParallelPlanesFeatureItem_OppositeParallelPlanesFeatureItemType
%type <OppositeParallelPlanesFeatureMeasurementTypeVal> y_OppositeParallelPlanesFeatureMeasurementType
%type <OppositeParallelPlanesFeatureMeasurementTypeVal> y_OppositeParallelPlanesFeatureMeasurement_OppositeParallelPlanesFeatureMeasurementType
%type <OppositeParallelPlanesFeatureNominalTypeVal> y_OppositeParallelPlanesFeatureNominalType
%type <OppositeParallelPlanesFeatureNominalTypeVal> y_OppositeParallelPlanesFeatureNominal_OppositeParallelPlanesFeatureNominalType
%type <OppositeParallelPlanesFromScanTypeVal> y_OppositeParallelPlanesFromScanType
%type <OppositeParallelPlanesMeasurementDeterminationTypeVal> y_OppositeParallelPlanesMeasurementDeterminationType
%type <OppositeParallelPlanesMeasurementDeterminationTypeChoicePairVal> y_OppositeParallelPlanesMeasurementDeterminationTypeChoicePair
%type <OppositeParallelPlanesPointSamplingStrategyTypeVal> y_OppositeParallelPlanesPointSamplingStrategyType
%type <OppositeParallelPlanesPointSamplingStrategyTypeChoicePairVal> y_OppositeParallelPlanesPointSamplingStrategyTypeChoicePair
%type <OppositeParallelPlanesRecompTypeVal> y_OppositeParallelPlanesRecompType
%type <OppositeParallelPlanesTransformTypeVal> y_OppositeParallelPlanesTransformType
%type <OpticalComparatorTypeVal>      y_OpticalComparatorType
%type <OpticalComparatorTypeVal>      y_OpticalComparator_OpticalComparatorType
%type <LinearValueTypeVal>            y_OpticalFiberCableLength_LinearValueType_0
%type <OrTypeVal>                     y_OrType
%type <OrTypeVal>                     y_Or_OrType
%type <XmlStringVal>                  y_OrderNumber_XmlString_0
%type <NaturalTypeVal>                y_OrderU_NaturalType
%type <NaturalTypeVal>                y_OrderV_NaturalType
%type <NaturalTypeVal>                y_Order_NaturalType
%type <OrderedActionGroupTypeVal>     y_OrderedActionGroupType
%type <OrderedActionGroupTypeVal>     y_OrderedActionGroup_OrderedActionGroupType
%type <OrderedActionGroupTypeVal>     y_OrderedPlanRoot_OrderedActionGroupType
%type <ArrayNaturalTypeVal>           y_OrdersU_ArrayNaturalType
%type <ArrayNaturalTypeVal>           y_OrdersV_ArrayNaturalType
%type <ArrayNaturalTypeVal>           y_Orders_ArrayNaturalType
%type <OrganizationTypeVal>           y_OrganizationType
%type <StandardsOrganizationTypeVal>  y_Organization_StandardsOrganizationType
%type <XmlStringVal>                  y_Organization_XmlString_0
%type <OrientationChar_1064_TypeVal>  y_OrientationChar_1064_OrientationChar_1064_Type_0
%type <OrientationChar_1064_TypeVal>  y_OrientationChar_1064_Type
%type <OrientationChar_1064_TypeChoicePairVal> y_OrientationChar_1064_TypeChoicePair
%type <OrientationCharacteristicStatsEvalTypeVal> y_OrientationCharacteristicStatsEvalType
%type <OrientationCharacteristicStatsEvalTypeVal> y_OrientationCharacteristicStats_OrientationCharacteristicStatsEvalType
%type <OrientationDiametricalZoneTypeVal> y_OrientationDiametricalZoneType
%type <XmlBooleanVal>                 y_OrientationOnly_XmlBoolean_0
%type <OrientationPlanarZoneTypeVal>  y_OrientationPlanarZoneType
%type <ModifyingPlaneEnumTypeVal>     y_OrientationPlaneEnum_ModifyingPlaneEnumType
%type <OrientationPlaneTypeVal>       y_OrientationPlaneType
%type <OrientationPlaneTypeVal>       y_OrientationPlane_OrientationPlaneType_0
%type <OrientationZoneShapeTypeVal>   y_OrientationZoneShapeType
%type <OrientationZoneShapeTypeChoicePairVal> y_OrientationZoneShapeTypeChoicePair
%type <QuaternionTypeVal>             y_Orientation_QuaternionType
%type <OrientedLatitudeLongitudeSweepTypeVal> y_OrientedLatitudeLongitudeSweepType
%type <UnitVectorTypeVal>             y_OriginDirection_UnitVectorType
%type <AlignmentFeatureTypeVal>       y_OriginEntity_AlignmentFeatureType
%type <OriginReferenceTypeVal>        y_OriginReferenceType
%type <OriginReferenceTypeChoicePairVal> y_OriginReferenceTypeChoicePair
%type <OriginReference_1065_TypeVal>  y_OriginReference_1065_OriginReference_1065_Type
%type <OriginReference_1065_TypeVal>  y_OriginReference_1065_Type
%type <OriginReferenceTypeVal>        y_OriginReference_OriginReferenceType_0
%type <MeasurementOriginOffsetTypeVal> y_Origin_MeasurementOriginOffsetType
%type <Point2dSimpleTypeVal>          y_Origin_Point2dSimpleType
%type <PointSimpleTypeVal>            y_Origin_PointSimpleType
%type <PointSimpleTypeVal>            y_Origin_PointSimpleType_0
%type <PointTypeVal>                  y_Origin_PointType
%type <PointTypeVal>                  y_Origin_PointType_0
%type <CriterionOutOfTypeVal>         y_Oscillation_CriterionOutOfType
%type <XmlStringVal>                  y_OtherAccuracySource_XmlString
%type <XmlStringVal>                  y_OtherAddressDescription_XmlString
%type <XmlStringVal>                  y_OtherArea_XmlString
%type <XmlStringVal>                  y_OtherBottom_XmlString
%type <XmlStringVal>                  y_OtherCartesianCMMGeometry_XmlString
%type <XmlStringVal>                  y_OtherCharacteristicStatus_XmlString
%type <XmlStringVal>                  y_OtherControlIssue_XmlString
%type <XmlStringVal>                  y_OtherCoordinate_XmlString
%type <OtherCurveCheckedFeatureTypeVal> y_OtherCurveCheckedFeatureType
%type <OtherCurveCheckedTypeVal>      y_OtherCurveCheckedType
%type <OtherCurveCheckedTypeChoicePairVal> y_OtherCurveCheckedTypeChoicePair
%type <OtherCurveConstructionMethodTypeVal> y_OtherCurveConstructionMethodType
%type <OtherCurveConstructionMethodTypeChoicePairVal> y_OtherCurveConstructionMethodTypeChoicePair
%type <OtherCurveFeatureCopyTypeVal>  y_OtherCurveFeatureCopyType
%type <OtherCurveFeatureDefinitionTypeVal> y_OtherCurveFeatureDefinitionType
%type <OtherCurveFeatureDefinitionTypeVal> y_OtherCurveFeatureDefinition_OtherCurveFeatureDefinitionType
%type <OtherCurveFeatureItemTypeVal>  y_OtherCurveFeatureItemType
%type <OtherCurveFeatureItemTypeVal>  y_OtherCurveFeatureItem_OtherCurveFeatureItemType
%type <OtherCurveFeatureMeasurementTypeVal> y_OtherCurveFeatureMeasurementType
%type <OtherCurveFeatureMeasurementTypeVal> y_OtherCurveFeatureMeasurement_OtherCurveFeatureMeasurementType
%type <OtherCurveFeatureNominalTypeVal> y_OtherCurveFeatureNominalType
%type <OtherCurveFeatureNominalTypeVal> y_OtherCurveFeatureNominal_OtherCurveFeatureNominalType
%type <OtherCurveMeasurementDeterminationTypeVal> y_OtherCurveMeasurementDeterminationType
%type <OtherCurveMeasurementDeterminationTypeChoicePairVal> y_OtherCurveMeasurementDeterminationTypeChoicePair
%type <XmlStringVal>                  y_OtherDigitalModelFormat_XmlString
%type <XmlStringVal>                  y_OtherDistributionTransformation_XmlString
%type <XmlStringVal>                  y_OtherExclusionReason_XmlString
%type <XmlStringVal>                  y_OtherExtent_XmlString
%type <XmlStringVal>                  y_OtherFileSpec_XmlString
%type <OtherFormCharacteristicDefinitionTypeVal> y_OtherFormCharacteristicDefinitionType
%type <OtherFormCharacteristicDefinitionTypeVal> y_OtherFormCharacteristicDefinition_OtherFormCharacteristicDefinitionType
%type <OtherFormCharacteristicItemTypeVal> y_OtherFormCharacteristicItemType
%type <OtherFormCharacteristicItemTypeVal> y_OtherFormCharacteristicItem_OtherFormCharacteristicItemType
%type <OtherFormCharacteristicMeasurementTypeVal> y_OtherFormCharacteristicMeasurementType
%type <OtherFormCharacteristicMeasurementTypeVal> y_OtherFormCharacteristicMeasurement_OtherFormCharacteristicMeasurementType
%type <OtherFormCharacteristicNominalTypeVal> y_OtherFormCharacteristicNominalType
%type <OtherFormCharacteristicNominalTypeVal> y_OtherFormCharacteristicNominal_OtherFormCharacteristicNominalType
%type <OtherFormCharacteristicStatsEvalTypeVal> y_OtherFormCharacteristicStatsEvalType
%type <OtherFormCharacteristicStatsEvalTypeVal> y_OtherFormCharacteristicStats_OtherFormCharacteristicStatsEvalType
%type <XmlStringVal>                  y_OtherInspectionStatus_XmlString
%type <XmlStringVal>                  y_OtherLevel_XmlString
%type <XmlStringVal>                  y_OtherManufacturingMethod_XmlString
%type <XmlStringVal>                  y_OtherMarkingMethod_XmlString
%type <XmlStringVal>                  y_OtherMaterialClass_XmlString
%type <XmlStringVal>                  y_OtherMeasureActionGroupFunction_XmlString
%type <OtherMeasureFeatureMethodTypeVal> y_OtherMeasureFeatureMethodType
%type <OtherMeasureFeatureMethodTypeVal> y_OtherMeasureFeatureMethod_OtherMeasureFeatureMethodType
%type <XmlStringVal>                  y_OtherMeasurementDirective_XmlString
%type <OtherNonShapeFeatureDefinitionTypeVal> y_OtherNonShapeFeatureDefinitionType
%type <OtherNonShapeFeatureDefinitionTypeVal> y_OtherNonShapeFeatureDefinition_OtherNonShapeFeatureDefinitionType
%type <OtherNonShapeFeatureItemTypeVal> y_OtherNonShapeFeatureItemType
%type <OtherNonShapeFeatureItemTypeVal> y_OtherNonShapeFeatureItem_OtherNonShapeFeatureItemType
%type <OtherNonShapeFeatureMeasurementTypeVal> y_OtherNonShapeFeatureMeasurementType
%type <OtherNonShapeFeatureMeasurementTypeVal> y_OtherNonShapeFeatureMeasurement_OtherNonShapeFeatureMeasurementType
%type <OtherNonShapeFeatureNominalTypeVal> y_OtherNonShapeFeatureNominalType
%type <OtherNonShapeFeatureNominalTypeVal> y_OtherNonShapeFeatureNominal_OtherNonShapeFeatureNominalType
%type <XmlStringVal>                  y_OtherPrecedence_XmlString
%type <XmlStringVal>                  y_OtherSamplingInterval_XmlString
%type <XmlStringVal>                  y_OtherSecurityClassification_XmlString
%type <OtherShapeCheckedFeatureTypeVal> y_OtherShapeCheckedFeatureType
%type <OtherShapeCheckedTypeVal>      y_OtherShapeCheckedType
%type <OtherShapeCheckedTypeChoicePairVal> y_OtherShapeCheckedTypeChoicePair
%type <XmlStringVal>                  y_OtherShapeClass_XmlString
%type <OtherShapeConstructionMethodTypeVal> y_OtherShapeConstructionMethodType
%type <OtherShapeConstructionMethodTypeChoicePairVal> y_OtherShapeConstructionMethodTypeChoicePair
%type <OtherShapeFeatureCopyTypeVal>  y_OtherShapeFeatureCopyType
%type <OtherShapeFeatureDefinitionTypeVal> y_OtherShapeFeatureDefinitionType
%type <OtherShapeFeatureDefinitionTypeVal> y_OtherShapeFeatureDefinition_OtherShapeFeatureDefinitionType
%type <OtherShapeFeatureItemTypeVal>  y_OtherShapeFeatureItemType
%type <OtherShapeFeatureItemTypeVal>  y_OtherShapeFeatureItem_OtherShapeFeatureItemType
%type <OtherShapeFeatureMeasurementTypeVal> y_OtherShapeFeatureMeasurementType
%type <OtherShapeFeatureMeasurementTypeVal> y_OtherShapeFeatureMeasurement_OtherShapeFeatureMeasurementType
%type <OtherShapeFeatureNominalTypeVal> y_OtherShapeFeatureNominalType
%type <OtherShapeFeatureNominalTypeVal> y_OtherShapeFeatureNominal_OtherShapeFeatureNominalType
%type <OtherShapeMeasurementDeterminationTypeVal> y_OtherShapeMeasurementDeterminationType
%type <OtherShapeMeasurementDeterminationTypeChoicePairVal> y_OtherShapeMeasurementDeterminationTypeChoicePair
%type <WeldContourSymbolTypeVal>      y_OtherSideContourSymbol_WeldContourSymbolType_0
%type <WeldGrooveOneSideParametersTypeVal> y_OtherSideParameters_WeldGrooveOneSideParametersType_0
%type <WeldFilletOneSideInBothSidesTypeVal> y_OtherSide_WeldFilletOneSideInBothSidesType_0
%type <XmlStringVal>                  y_OtherSlotEnd_XmlString
%type <XmlStringVal>                  y_OtherStandardsOrganization_XmlString
%type <XmlStringVal>                  y_OtherStatsEvalStatus_XmlString
%type <XmlStringVal>                  y_OtherSubstituteFeatureAlgorithm_XmlString
%type <OtherSurfaceCheckedFeatureTypeVal> y_OtherSurfaceCheckedFeatureType
%type <OtherSurfaceCheckedTypeVal>    y_OtherSurfaceCheckedType
%type <OtherSurfaceCheckedTypeChoicePairVal> y_OtherSurfaceCheckedTypeChoicePair
%type <OtherSurfaceConstructionMethodTypeVal> y_OtherSurfaceConstructionMethodType
%type <OtherSurfaceConstructionMethodTypeChoicePairVal> y_OtherSurfaceConstructionMethodTypeChoicePair
%type <OtherSurfaceFea_1120_TypeVal>  y_OtherSurfaceFea_1120_OtherSurfaceFea_1120_Type_0
%type <OtherSurfaceFea_1120_TypeVal>  y_OtherSurfaceFea_1120_Type
%type <OtherSurfaceFea_1120_TypeChoicePairVal> y_OtherSurfaceFea_1120_TypeChoicePair
%type <OtherSurfaceFeatureCopyTypeVal> y_OtherSurfaceFeatureCopyType
%type <OtherSurfaceFeatureDefinitionTypeVal> y_OtherSurfaceFeatureDefinitionType
%type <OtherSurfaceFeatureDefinitionTypeVal> y_OtherSurfaceFeatureDefinition_OtherSurfaceFeatureDefinitionType
%type <OtherSurfaceFeatureItemTypeVal> y_OtherSurfaceFeatureItemType
%type <OtherSurfaceFeatureItemTypeVal> y_OtherSurfaceFeatureItem_OtherSurfaceFeatureItemType
%type <OtherSurfaceFeatureMeasurementTypeVal> y_OtherSurfaceFeatureMeasurementType
%type <OtherSurfaceFeatureMeasurementTypeVal> y_OtherSurfaceFeatureMeasurement_OtherSurfaceFeatureMeasurementType
%type <OtherSurfaceFeatureNominalTypeVal> y_OtherSurfaceFeatureNominalType
%type <OtherSurfaceFeatureNominalTypeVal> y_OtherSurfaceFeatureNominal_OtherSurfaceFeatureNominalType
%type <OtherSurfaceMeasurementDeterminationTypeVal> y_OtherSurfaceMeasurementDeterminationType
%type <OtherSurfaceMeasurementDeterminationTypeChoicePairVal> y_OtherSurfaceMeasurementDeterminationTypeChoicePair
%type <XmlTokenVal>                   y_OtherSurfaceParameter_XmlToken_0
%type <XmlStringVal>                  y_OtherTemperatureCompensation_XmlString
%type <XmlStringVal>                  y_OtherThreadClass_XmlString
%type <XmlStringVal>                  y_OtherThreadSeries_XmlString
%type <XmlStringVal>                  y_OtherTimeDescription_XmlString
%type <XmlStringVal>                  y_OtherTipEndGeometry_XmlString
%type <XmlStringVal>                  y_OtherTypeOfScale_XmlString
%type <OtherUnitsTypeVal>             y_OtherUnitsType
%type <OtherUnitsTypeVal>             y_OtherUnits_OtherUnitsType_0
%type <LinearValueTypeVal>            y_OuterDisposition_LinearValueType
%type <LinearValueTypeVal>            y_OuterDisposition_LinearValueType_0
%type <XmlStringVal>                  y_OutputFileFormat_XmlString_0
%type <UserDefinedUnitValueTypeVal>   y_OutputPower_UserDefinedUnitValueType_0
%type <LinearValueTypeVal>            y_OverallLength_LinearValueType_0
%type <AngularUnitTypeVal>            y_PMIAngularUnit_AngularUnitType_0
%type <AreaUnitTypeVal>               y_PMIAreaUnit_AreaUnitType_0
%type <PMIDisplaySetTypeVal>          y_PMIDisplaySetType
%type <PMIDisplaySetTypeVal>          y_PMIDisplaySet_PMIDisplaySetType
%type <PMIDisplayTypeVal>             y_PMIDisplayType
%type <PMIDisplayTypeVal>             y_PMIDisplay_PMIDisplayType
%type <LinearUnitTypeVal>             y_PMILinearUnit_LinearUnitType_0
%type <BaseFeatureTypeVal>            y_ParallelFeature_BaseFeatureType
%type <ParallelLinkCMMSpeedsTypeVal>  y_ParallelLinkCMMSpeedsType
%type <ParallelLinkCMMSpeedsTypeVal>  y_ParallelLinkCMMSpeeds_ParallelLinkCMMSpeedsType
%type <ParallelLinkCMMTypeVal>        y_ParallelLinkCMMType
%type <ParallelLinkCMMTypeVal>        y_ParallelLinkCMM_ParallelLinkCMMType
%type <XmlDecimalVal>                 y_ParallelScaleFactor_XmlDecimal
%type <LineParallelTypeVal>           y_Parallel_LineParallelType
%type <PlaneParallelTypeVal>          y_Parallel_PlaneParallelType
%type <ParallelismCharacteristicDefinitionTypeVal> y_ParallelismCharacteristicDefinitionType
%type <ParallelismCharacteristicDefinitionTypeVal> y_ParallelismCharacteristicDefinition_ParallelismCharacteristicDefinitionType
%type <ParallelismCharacteristicItemTypeVal> y_ParallelismCharacteristicItemType
%type <ParallelismCharacteristicItemTypeVal> y_ParallelismCharacteristicItem_ParallelismCharacteristicItemType
%type <ParallelismCharacteristicMeasurementTypeVal> y_ParallelismCharacteristicMeasurementType
%type <ParallelismCharacteristicMeasurementTypeVal> y_ParallelismCharacteristicMeasurement_ParallelismCharacteristicMeasurementType
%type <ParallelismCharacteristicNominalTypeVal> y_ParallelismCharacteristicNominalType
%type <ParallelismCharacteristicNominalTypeVal> y_ParallelismCharacteristicNominal_ParallelismCharacteristicNominalType
%type <ParallelismCharacteristicStatsEvalTypeVal> y_ParallelismCharacteristicStatsEvalType
%type <ParallelismCharacteristicStatsEvalTypeVal> y_ParallelismCharacteristicStats_ParallelismCharacteristicStatsEvalType
%type <LinearValueTypeVal>            y_Parallelism_LinearValueType_0
%type <DMEParameterConstraintSetTypeVal> y_ParameterConstraints_DMEParameterConstraintSetType_0
%type <XmlTokenVal>                   y_ParameterName_XmlToken
%type <XmlStringVal>                  y_ParameterType_XmlString
%type <XmlStringVal>                  y_ParameterValue_XmlString
%type <ProcessParameterTypeVal>       y_Parameter_ProcessParameterType
%type <ReferenceFeatureAssociationSpecificationParameterEnumTypeVal> y_Parameter_ReferenceFeatureAssociationSpecificationParameterEnumType
%type <XmlTokenVal>                   y_Parameter_XmlToken
%type <XmlStringVal>                  y_Parameters_XmlString_0
%type <QIFReferenceTypeVal>           y_ParentFeatureItemId_QIFReferenceType_0
%type <QIFReferenceTypeVal>           y_ParentFeatureNominalId_QIFReferenceType_0
%type <PartAssemblyHeaderTypeVal>     y_PartAssemblyHeaderType
%type <PartFamilyTypeVal>             y_PartFamilyType
%type <PartFamilyTypeVal>             y_PartFamily_PartFamilyType_0
%type <ArrayReferenceFullTypeVal>     y_PartNoteIds_ArrayReferenceFullType_0
%type <ArrayReferenceTypeVal>         y_PartNoteIds_ArrayReferenceType_0
%type <PartNoteSetTypeVal>            y_PartNoteSetType
%type <PartNoteSetTypeVal>            y_PartNoteSet_PartNoteSetType_0
%type <PartNoteTypeVal>               y_PartNoteType
%type <PartNoteTypeVal>               y_PartNote_PartNoteType
%type <PartSetTypeVal>                y_PartSetType
%type <PartSetTypeVal>                y_PartSet_PartSetType_0
%type <PartTypeVal>                   y_PartType
%type <StatsMeasuredDecimalTypeVal>   y_PartVariation_StatsMeasuredDecimalType
%type <ElementReferenceTypeVal>       y_Part_ElementReferenceType
%type <PartTypeVal>                   y_Part_PartType
%type <PartialInspectionTypeVal>      y_PartialInspectionType
%type <PartialInspectionTypeVal>      y_PartialInspection_PartialInspectionType_0
%type <PartiallyOrderedActionGroupTypeVal> y_PartiallyOrderedActionGroupType
%type <PartiallyOrderedActionGroupTypeVal> y_PartiallyOrderedActionGroup_PartiallyOrderedActionGroupType
%type <PartiallyOrderedActionGroupTypeVal> y_PartiallyOrderedPlanRoot_PartiallyOrderedActionGroupType
%type <StatsWithReferenceBaseTypeVal> y_PassFailStatsValue_substituteType
%type <StringValuesTypeVal>           y_PassValues_StringValuesType_0
%type <LinearValueTypeVal>            y_PatchRadius_LinearValueType
%type <PathTriangulationCoreTypeVal>  y_PathTriangulationCoreType
%type <PathTriangulationCoreTypeChoicePairVal> y_PathTriangulationCoreTypeChoicePair
%type <PathTriangulationCoreTypeVal>  y_PathTriangulationCore_PathTriangulationCoreType
%type <PathTriangulationTypeVal>      y_PathTriangulationType
%type <PathTriangulationTypeVal>      y_PathTriangulation_PathTriangulationType
%type <SectionPathTypeVal>            y_Path_SectionPathType
%type <XmlStringVal>                  y_Path_XmlString_0
%type <SectionPathsTypeVal>           y_Paths_SectionPathsType_0
%type <PatternFeatureCircleDefinitionTypeVal> y_PatternFeatureCircleDefinitionType
%type <PatternFeatureCircleDefinitionTypeVal> y_PatternFeatureCircleDefinition_PatternFeatureCircleDefinitionType
%type <PatternFeatureCircleItemTypeVal> y_PatternFeatureCircleItemType
%type <PatternFeatureCircleItemTypeVal> y_PatternFeatureCircleItem_PatternFeatureCircleItemType
%type <PatternFeatureCircleNominalTypeVal> y_PatternFeatureCircleNominalType
%type <PatternFeatureCircleNominalTypeVal> y_PatternFeatureCircleNominal_PatternFeatureCircleNominalType
%type <PatternFeatureCircularArcDefinitionTypeVal> y_PatternFeatureCircularArcDefinitionType
%type <PatternFeatureCircularArcDefinitionTypeVal> y_PatternFeatureCircularArcDefinition_PatternFeatureCircularArcDefinitionType
%type <PatternFeatureCircularArcItemTypeVal> y_PatternFeatureCircularArcItemType
%type <PatternFeatureCircularArcItemTypeVal> y_PatternFeatureCircularArcItem_PatternFeatureCircularArcItemType
%type <PatternFeatureCircularArcNominalTypeVal> y_PatternFeatureCircularArcNominalType
%type <PatternFeatureCircularArcNominalTypeVal> y_PatternFeatureCircularArcNominal_PatternFeatureCircularArcNominalType
%type <PatternFeatureLinearDefinitionTypeVal> y_PatternFeatureLinearDefinitionType
%type <PatternFeatureLinearDefinitionTypeVal> y_PatternFeatureLinearDefinition_PatternFeatureLinearDefinitionType
%type <PatternFeatureLinearItemTypeVal> y_PatternFeatureLinearItemType
%type <PatternFeatureLinearItemTypeVal> y_PatternFeatureLinearItem_PatternFeatureLinearItemType
%type <PatternFeatureLinearNominalTypeVal> y_PatternFeatureLinearNominalType
%type <PatternFeatureLinearNominalTypeVal> y_PatternFeatureLinearNominal_PatternFeatureLinearNominalType
%type <PatternFeatureParallelogramDefinitionTypeVal> y_PatternFeatureParallelogramDefinitionType
%type <PatternFeatureParallelogramDefinitionTypeVal> y_PatternFeatureParallelogramDefinition_PatternFeatureParallelogramDefinitionType
%type <PatternFeatureParallelogramItemTypeVal> y_PatternFeatureParallelogramItemType
%type <PatternFeatureParallelogramItemTypeVal> y_PatternFeatureParallelogramItem_PatternFeatureParallelogramItemType
%type <PatternFeatureParallelogramNominalTypeVal> y_PatternFeatureParallelogramNominalType
%type <PatternFeatureParallelogramNominalTypeVal> y_PatternFeatureParallelogramNominal_PatternFeatureParallelogramNominalType
%type <HatchPatternTypeVal>           y_Pattern_HatchPatternType
%type <HatchPatternsTypeVal>          y_Patterns_HatchPatternsType_0
%type <UserDefinedUnitValueTypeVal>   y_PermissibleAmbientLight_UserDefinedUnitValueType_0
%type <BaseFeatureTypeVal>            y_PerpendicularFeature_BaseFeatureType
%type <XmlDecimalVal>                 y_PerpendicularScaleFactor_XmlDecimal
%type <LinePerpendicularTypeVal>      y_Perpendicular_LinePerpendicularType
%type <PlanePerpendicularTypeVal>     y_Perpendicular_PlanePerpendicularType
%type <PerpendicularityCharacteristicDefinitionTypeVal> y_PerpendicularityCharacteristicDefinitionType
%type <PerpendicularityCharacteristicDefinitionTypeVal> y_PerpendicularityCharacteristicDefinition_PerpendicularityCharacteristicDefinitionType
%type <PerpendicularityCharacteristicItemTypeVal> y_PerpendicularityCharacteristicItemType
%type <PerpendicularityCharacteristicItemTypeVal> y_PerpendicularityCharacteristicItem_PerpendicularityCharacteristicItemType
%type <PerpendicularityCharacteristicMeasurementTypeVal> y_PerpendicularityCharacteristicMeasurementType
%type <PerpendicularityCharacteristicMeasurementTypeVal> y_PerpendicularityCharacteristicMeasurement_PerpendicularityCharacteristicMeasurementType
%type <PerpendicularityCharacteristicNominalTypeVal> y_PerpendicularityCharacteristicNominalType
%type <PerpendicularityCharacteristicNominalTypeVal> y_PerpendicularityCharacteristicNominal_PerpendicularityCharacteristicNominalType
%type <PerpendicularityCharacteristicStatsEvalTypeVal> y_PerpendicularityCharacteristicStatsEvalType
%type <PerpendicularityCharacteristicStatsEvalTypeVal> y_PerpendicularityCharacteristicStats_PerpendicularityCharacteristicStatsEvalType
%type <PhysicalAddressTypeVal>        y_PhysicalAddressType
%type <PhysicalModelTypeVal>          y_PhysicalModelType
%type <PhysicalModelTypeVal>          y_PhysicalModel_PhysicalModelType
%type <PickSomeActionGroupTypeVal>    y_PickSomeActionGroupType
%type <PickSomeActionGroupTypeVal>    y_PickSomeActionGroup_PickSomeActionGroupType
%type <PickSomeActionGroupTypeVal>    y_PickSomePlanRoot_PickSomeActionGroupType
%type <PointFeaturePierceTypeVal>     y_Pierce_PointFeaturePierceType
%type <StatsLinearTypeVal>            y_PitchDiameterStats_StatsLinearType_0
%type <MeasuredLinearValueTypeVal>    y_PitchDiameter_MeasuredLinearValueType_0
%type <LinearValueTypeVal>            y_Pitch_LinearValueType_0
%type <LinearValueTypeVal>            y_PixelSize_LinearValueType_0
%type <PlanElementBaseTypeVal>        y_PlanElement_substituteType
%type <QIFReferenceTypeVal>           y_PlanId_QIFReferenceType_0
%type <ActionGroupBaseTypeVal>        y_PlanRoot_substituteType
%type <PlanTypeVal>                   y_PlanType
%type <PlanTypeVal>                   y_Plan_PlanType_0
%type <OrientationPlanarZoneTypeVal>  y_PlanarZone_OrientationPlanarZoneType
%type <Plane23CoreTypeVal>            y_Plane23CoreType
%type <Plane23CoreTypeVal>            y_Plane23Core_Plane23CoreType
%type <Plane23TypeVal>                y_Plane23Type
%type <Plane23TypeVal>                y_Plane23_Plane23Type
%type <PlaneBestFitTypeVal>           y_PlaneBestFitType
%type <PlaneCastTypeVal>              y_PlaneCastType
%type <PlaneCheckedFeatureTypeVal>    y_PlaneCheckedFeatureType
%type <PlaneCheckedTypeVal>           y_PlaneCheckedType
%type <PlaneCheckedTypeChoicePairVal> y_PlaneCheckedTypeChoicePair
%type <PlaneConstructionMethodTypeVal> y_PlaneConstructionMethodType
%type <PlaneConstructionMethodTypeChoicePairVal> y_PlaneConstructionMethodTypeChoicePair
%type <PlaneCopyTypeVal>              y_PlaneCopyType
%type <PlaneExtractTypeVal>           y_PlaneExtractType
%type <PlaneFeatureDefinitionTypeVal> y_PlaneFeatureDefinitionType
%type <PlaneFeatureDefinitionTypeVal> y_PlaneFeatureDefinition_PlaneFeatureDefinitionType
%type <PlaneFeatureItemTypeVal>       y_PlaneFeatureItemType
%type <PlaneFeatureItemTypeVal>       y_PlaneFeatureItem_PlaneFeatureItemType
%type <PlaneFeatureMeasurementTypeVal> y_PlaneFeatureMeasurementType
%type <PlaneFeatureMeasurementTypeVal> y_PlaneFeatureMeasurement_PlaneFeatureMeasurementType
%type <PlaneFeatureNom_1121_TypeVal>  y_PlaneFeatureNom_1121_PlaneFeatureNom_1121_Type_0
%type <PlaneFeatureNom_1121_TypeVal>  y_PlaneFeatureNom_1121_Type
%type <PlaneFeatureNom_1121_TypeChoicePairVal> y_PlaneFeatureNom_1121_TypeChoicePair
%type <PlaneFeatureNominalTypeVal>    y_PlaneFeatureNominalType
%type <PlaneFeatureNominalTypeVal>    y_PlaneFeatureNominal_PlaneFeatureNominalType
%type <PlaneMeasurementDeterminationTypeVal> y_PlaneMeasurementDeterminationType
%type <PlaneMeasurementDeterminationTypeChoicePairVal> y_PlaneMeasurementDeterminationTypeChoicePair
%type <PlaneMidplaneTypeVal>          y_PlaneMidplaneType
%type <UnitVectorTypeVal>             y_PlaneNormal_UnitVectorType_0
%type <PlaneOffsetTypeVal>            y_PlaneOffsetType
%type <PlanePMIDisplayTypeVal>        y_PlanePMIDisplayType
%type <PlaneParallelTypeVal>          y_PlaneParallelType
%type <PlanePerpendicularTypeVal>     y_PlanePerpendicularType
%type <PlanePointSamplingStrategyEnumTypeVal> y_PlanePointSamplingStrategyEnumType
%type <PlanePointSamplingStrategyTypeVal> y_PlanePointSamplingStrategyType
%type <PlanePointSamplingStrategyTypeChoicePairVal> y_PlanePointSamplingStrategyTypeChoicePair
%type <PlaneRecompTypeVal>            y_PlaneRecompType
%type <PlaneReferenceTypeVal>         y_PlaneReferenceType
%type <PlaneReferenceTypeVal>         y_PlaneReference_PlaneReferenceType
%type <PlaneTangentThroughTypeVal>    y_PlaneTangentThroughType
%type <PlaneThroughTypeVal>           y_PlaneThroughType
%type <PlaneTransformTypeVal>         y_PlaneTransformType
%type <PlaneTypeVal>                  y_PlaneType
%type <PlaneXTypeVal>                 y_PlaneXType
%type <MeasuredPlaneTypeVal>          y_Plane_MeasuredPlaneType_0
%type <PlanePMIDisplayTypeVal>        y_Plane_PlanePMIDisplayType_0
%type <PlaneTypeVal>                  y_Plane_PlaneType
%type <PlaneTypeVal>                  y_Plane_PlaneType_0
%type <PlaneXTypeVal>                 y_Plane_PlaneXType
%type <LocationTypeVal>               y_PlantLocation_LocationType_0
%type <XmlStringVal>                  y_PlantSector_XmlString_0
%type <PlusTypeVal>                   y_PlusType
%type <PlusTypeVal>                   y_Plus_PlusType
%type <Point2dSimpleTypeVal>          y_Point2dSimpleType
%type <PointAccuracyTestTypeVal>      y_PointAccuracyTestType
%type <PointAndVectorTypeVal>         y_PointAndVectorType
%type <PointAuxiliaryTypeVal>         y_PointAuxiliaryType
%type <PointAuxiliaryTypeVal>         y_PointAuxiliary_PointAuxiliaryType
%type <PointCheckedFeatureTypeVal>    y_PointCheckedFeatureType
%type <PointCheckedTypeVal>           y_PointCheckedType
%type <PointCheckedTypeChoicePairVal> y_PointCheckedTypeChoicePair
%type <ArrayReferenceTypeVal>         y_PointCloudIds_ArrayReferenceType_0
%type <PointCloudSetTypeVal>          y_PointCloudSetType
%type <PointCloudSetTypeVal>          y_PointCloudSet_PointCloudSetType_0
%type <PointCloudTypeVal>             y_PointCloudType
%type <PointCloudType_1226_TypeVal>   y_PointCloudType_1226_PointCloudType_1226_Type
%type <PointCloudType_1226_TypeVal>   y_PointCloudType_1226_Type
%type <PointCloudType_1226_TypeChoicePairVal> y_PointCloudType_1226_TypeChoicePair
%type <PointCloudType_1227_TypeVal>   y_PointCloudType_1227_PointCloudType_1227_Type_0
%type <PointCloudType_1227_TypeVal>   y_PointCloudType_1227_Type
%type <PointCloudType_1227_TypeChoicePairVal> y_PointCloudType_1227_TypeChoicePair
%type <PointCloudType_1228_TypeVal>   y_PointCloudType_1228_PointCloudType_1228_Type_0
%type <PointCloudType_1228_TypeVal>   y_PointCloudType_1228_Type
%type <PointCloudType_1228_TypeChoicePairVal> y_PointCloudType_1228_TypeChoicePair
%type <PointCloudType_1229_TypeVal>   y_PointCloudType_1229_PointCloudType_1229_Type_0
%type <PointCloudType_1229_TypeVal>   y_PointCloudType_1229_Type
%type <PointCloudType_1229_TypeChoicePairVal> y_PointCloudType_1229_TypeChoicePair
%type <PointCloudTypeVal>             y_PointCloud_PointCloudType
%type <Point2dSimpleTypeVal>          y_PointConnection_Point2dSimpleType
%type <PointConstructionMethodTypeVal> y_PointConstructionMethodType
%type <PointConstructionMethodTypeChoicePairVal> y_PointConstructionMethodTypeChoicePair
%type <PointDefinedCurveBestFitTypeVal> y_PointDefinedCurveBestFitType
%type <PointDefinedCurveCheckedFeatureTypeVal> y_PointDefinedCurveCheckedFeatureType
%type <PointDefinedCurveCheckedTypeVal> y_PointDefinedCurveCheckedType
%type <PointDefinedCurveCheckedTypeChoicePairVal> y_PointDefinedCurveCheckedTypeChoicePair
%type <PointDefinedCurveConstructionMethodTypeVal> y_PointDefinedCurveConstructionMethodType
%type <PointDefinedCurveConstructionMethodTypeChoicePairVal> y_PointDefinedCurveConstructionMethodTypeChoicePair
%type <PointDefinedCurveCopyTypeVal>  y_PointDefinedCurveCopyType
%type <PointDefinedCurveExtractTypeVal> y_PointDefinedCurveExtractType
%type <PointDefinedCurveFeatureDefinitionTypeVal> y_PointDefinedCurveFeatureDefinitionType
%type <PointDefinedCurveFeatureDefinitionTypeVal> y_PointDefinedCurveFeatureDefinition_PointDefinedCurveFeatureDefinitionType
%type <PointDefinedCurveFeatureItemTypeVal> y_PointDefinedCurveFeatureItemType
%type <PointDefinedCurveFeatureItemTypeVal> y_PointDefinedCurveFeatureItem_PointDefinedCurveFeatureItemType
%type <PointDefinedCurveFeatureMeasurementTypeVal> y_PointDefinedCurveFeatureMeasurementType
%type <PointDefinedCurveFeatureMeasurementTypeVal> y_PointDefinedCurveFeatureMeasurement_PointDefinedCurveFeatureMeasurementType
%type <PointDefinedCurveFeatureNominalTypeVal> y_PointDefinedCurveFeatureNominalType
%type <PointDefinedCurveFeatureNominalTypeVal> y_PointDefinedCurveFeatureNominal_PointDefinedCurveFeatureNominalType
%type <PointDefinedCurveFromScanTypeVal> y_PointDefinedCurveFromScanType
%type <PointDefinedCurveMeasurementDeterminationTypeVal> y_PointDefinedCurveMeasurementDeterminationType
%type <PointDefinedCurveMeasurementDeterminationTypeChoicePairVal> y_PointDefinedCurveMeasurementDeterminationTypeChoicePair
%type <PointDefinedCurvePointSamplingStrategyTypeVal> y_PointDefinedCurvePointSamplingStrategyType
%type <PointDefinedCurvePointSamplingStrategyTypeChoicePairVal> y_PointDefinedCurvePointSamplingStrategyTypeChoicePair
%type <PointDefinedCurveRecompTypeVal> y_PointDefinedCurveRecompType
%type <PointDefinedCurveTransformTypeVal> y_PointDefinedCurveTransformType
%type <PointDefinedPointSamplingStrategyEnumTypeVal> y_PointDefinedPointSamplingStrategyEnumType
%type <PointDefinedSurfaceBestFitTypeVal> y_PointDefinedSurfaceBestFitType
%type <PointDefinedSurfaceCheckedFeatureTypeVal> y_PointDefinedSurfaceCheckedFeatureType
%type <PointDefinedSurfaceCheckedTypeVal> y_PointDefinedSurfaceCheckedType
%type <PointDefinedSurfaceCheckedTypeChoicePairVal> y_PointDefinedSurfaceCheckedTypeChoicePair
%type <PointDefinedSurfaceConstructionMethodTypeVal> y_PointDefinedSurfaceConstructionMethodType
%type <PointDefinedSurfaceConstructionMethodTypeChoicePairVal> y_PointDefinedSurfaceConstructionMethodTypeChoicePair
%type <PointDefinedSurfaceCopyTypeVal> y_PointDefinedSurfaceCopyType
%type <PointDefinedSurfaceExtractTypeVal> y_PointDefinedSurfaceExtractType
%type <PointDefinedSurfaceFeatureDefinitionTypeVal> y_PointDefinedSurfaceFeatureDefinitionType
%type <PointDefinedSurfaceFeatureDefinitionTypeVal> y_PointDefinedSurfaceFeatureDefinition_PointDefinedSurfaceFeatureDefinitionType
%type <PointDefinedSurfaceFeatureItemTypeVal> y_PointDefinedSurfaceFeatureItemType
%type <PointDefinedSurfaceFeatureItemTypeVal> y_PointDefinedSurfaceFeatureItem_PointDefinedSurfaceFeatureItemType
%type <PointDefinedSurfaceFeatureMeasurementTypeVal> y_PointDefinedSurfaceFeatureMeasurementType
%type <PointDefinedSurfaceFeatureMeasurementTypeVal> y_PointDefinedSurfaceFeatureMeasurement_PointDefinedSurfaceFeatureMeasurementType
%type <PointDefinedSurfaceFeatureNominalTypeVal> y_PointDefinedSurfaceFeatureNominalType
%type <PointDefinedSurfaceFeatureNominalTypeVal> y_PointDefinedSurfaceFeatureNominal_PointDefinedSurfaceFeatureNominalType
%type <PointDefinedSurfaceMeasurementDeterminationTypeVal> y_PointDefinedSurfaceMeasurementDeterminationType
%type <PointDefinedSurfaceMeasurementDeterminationTypeChoicePairVal> y_PointDefinedSurfaceMeasurementDeterminationTypeChoicePair
%type <PointDefinedSurfacePointSamplingStrategyTypeVal> y_PointDefinedSurfacePointSamplingStrategyType
%type <PointDefinedSurfacePointSamplingStrategyTypeChoicePairVal> y_PointDefinedSurfacePointSamplingStrategyTypeChoicePair
%type <PointDefinedSurfaceRecompTypeVal> y_PointDefinedSurfaceRecompType
%type <PointDefinedSurfaceTransformTypeVal> y_PointDefinedSurfaceTransformType
%type <PositiveDecimalTypeVal>        y_PointDensity_PositiveDecimalType
%type <PointDeviationStatsEvalTypeVal> y_PointDeviationStatsEvalType
%type <PointDeviationStatsEvalTypeVal> y_PointDeviationStats_PointDeviationStatsEvalType
%type <PointDeviationTypeVal>         y_PointDeviationType
%type <PointDeviationTypeVal>         y_PointDeviation_PointDeviationType
%type <PointDeviationsStatsEvalTypeVal> y_PointDeviationsStatsEvalType
%type <PointDeviationsStatsEvalTypeVal> y_PointDeviationsStats_PointDeviationsStatsEvalType_0
%type <PointDeviationsTypeVal>        y_PointDeviationsType
%type <PointDeviationsTypeVal>        y_PointDeviations_PointDeviationsType_0
%type <PointEntityTypeVal>            y_PointEntityType
%type <Point2dSimpleTypeVal>          y_PointExtension_Point2dSimpleType
%type <PointFeatureCastTypeVal>       y_PointFeatureCastType
%type <PointFeatureCenterOfGravityTypeVal> y_PointFeatureCenterOfGravityType
%type <PointFeatureCopyTypeVal>       y_PointFeatureCopyType
%type <PointFeatureDefinitionTypeVal> y_PointFeatureDefinitionType
%type <PointFeatureDefinitionTypeVal> y_PointFeatureDefinition_PointFeatureDefinitionType
%type <PointFeatureExt_1122_TypeVal>  y_PointFeatureExt_1122_PointFeatureExt_1122_Type
%type <PointFeatureExt_1122_TypeVal>  y_PointFeatureExt_1122_Type
%type <PointFeatureExt_1122_TypeChoicePairVal> y_PointFeatureExt_1122_TypeChoicePair
%type <PointFeatureExtremeTypeVal>    y_PointFeatureExtremeType
%type <PointFeatureFromConeTypeVal>   y_PointFeatureFromConeType
%type <PointFeatureFromScanTypeVal>   y_PointFeatureFromScanType
%type <PointFeatureIntersectionTypeVal> y_PointFeatureIntersectionType
%type <PointFeatureItemTypeVal>       y_PointFeatureItemType
%type <PointFeatureItemTypeVal>       y_PointFeatureItem_PointFeatureItemType
%type <PointFeatureMeasurementTypeVal> y_PointFeatureMeasurementType
%type <PointFeatureMeasurementTypeVal> y_PointFeatureMeasurement_PointFeatureMeasurementType
%type <PointFeatureMidPointTypeVal>   y_PointFeatureMidPointType
%type <PointFeatureMov_1123_TypeVal>  y_PointFeatureMov_1123_PointFeatureMov_1123_Type
%type <PointFeatureMov_1123_TypeVal>  y_PointFeatureMov_1123_Type
%type <PointFeatureMov_1123_TypeChoicePairVal> y_PointFeatureMov_1123_TypeChoicePair
%type <PointFeatureMovePointAxisTypeVal> y_PointFeatureMovePointAxisType
%type <PointFeatureMovePointTypeVal>  y_PointFeatureMovePointType
%type <PointFeatureMovePointVectorTypeVal> y_PointFeatureMovePointVectorType
%type <PointFeatureNom_1124_TypeVal>  y_PointFeatureNom_1124_PointFeatureNom_1124_Type_0
%type <PointFeatureNom_1124_TypeVal>  y_PointFeatureNom_1124_Type
%type <PointFeatureNom_1124_TypeChoicePairVal> y_PointFeatureNom_1124_TypeChoicePair
%type <PointFeatureNominalTypeVal>    y_PointFeatureNominalType
%type <PointFeatureNominalTypeVal>    y_PointFeatureNominal_PointFeatureNominalType
%type <PointFeaturePierceTypeVal>     y_PointFeaturePierceType
%type <PointFeatureProjectionTypeVal> y_PointFeatureProjectionType
%type <PointFeatureTransformTypeVal>  y_PointFeatureTransformType
%type <BaseFeatureTypeVal>            y_PointFeature_BaseFeatureType
%type <QIFReferenceFullTypeVal>       y_PointId_QIFReferenceFullType
%type <PointIndexTypeVal>             y_PointIndexType
%type <PointIndexTypeChoicePairVal>   y_PointIndexTypeChoicePair
%type <PointIndexTypeVal>             y_PointIndex_PointIndexType
%type <ArrayI3TypeVal>                y_PointIndices_ArrayI3Type
%type <PointListTypeVal>              y_PointListType
%type <PointListTypeVal>              y_PointList_PointListType_0
%type <PointSimpleTypeVal>            y_PointMax_PointSimpleType
%type <PointMeasurementDeterminationTypeVal> y_PointMeasurementDeterminationType
%type <PointMeasurementDeterminationTypeChoicePairVal> y_PointMeasurementDeterminationTypeChoicePair
%type <PointSimpleTypeVal>            y_PointMin_PointSimpleType
%type <PointPointSamplingStrategyEnumTypeVal> y_PointPointSamplingStrategyEnumType
%type <PointPointSamplingStrategyTypeVal> y_PointPointSamplingStrategyType
%type <PointPointSamplingStrategyTypeChoicePairVal> y_PointPointSamplingStrategyTypeChoicePair
%type <PointProfileCharacteristicDefinitionTypeVal> y_PointProfileCharacteristicDefinitionType
%type <PointProfileCharacteristicDefinitionTypeVal> y_PointProfileCharacteristicDefinition_PointProfileCharacteristicDefinitionType
%type <PointProfileCharacteristicItemTypeVal> y_PointProfileCharacteristicItemType
%type <PointProfileCharacteristicItemTypeVal> y_PointProfileCharacteristicItem_PointProfileCharacteristicItemType
%type <PointProfileCharacteristicMeasurementTypeVal> y_PointProfileCharacteristicMeasurementType
%type <PointProfileCharacteristicMeasurementTypeVal> y_PointProfileCharacteristicMeasurement_PointProfileCharacteristicMeasurementType
%type <PointProfileCharacteristicNominalTypeVal> y_PointProfileCharacteristicNominalType
%type <PointProfileCharacteristicNominalTypeVal> y_PointProfileCharacteristicNominal_PointProfileCharacteristicNominalType
%type <PointProfileCharacteristicStatsEvalTypeVal> y_PointProfileCharacteristicStatsEvalType
%type <PointProfileCharacteristicStatsEvalTypeVal> y_PointProfileCharacteristicStats_PointProfileCharacteristicStatsEvalType
%type <PointRangeTypeVal>             y_PointRangeType
%type <ClosedCurvePointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_ClosedCurvePointSamplingStrategyEnumType
%type <ConePointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_ConePointSamplingStrategyEnumType
%type <ElongatedCylinderPointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_ElongatedCylinderPointSamplingStrategyEnumType
%type <ExtrudedCrossSectionPointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_ExtrudedCrossSectionPointSamplingStrategyEnumType
%type <OpenCurvePointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType
%type <PlanePointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_PlanePointSamplingStrategyEnumType
%type <PointDefinedPointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_PointDefinedPointSamplingStrategyEnumType
%type <PointPointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_PointPointSamplingStrategyEnumType
%type <SpherePointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_SpherePointSamplingStrategyEnumType
%type <SurfaceOfRevolutionPointSamplingStrategyEnumTypeVal> y_PointSamplingStrategyEnum_SurfaceOfRevolutionPointSamplingStrategyEnumType
%type <PointSetReferenceBaseTypeVal>  y_PointSetId_substituteType
%type <PointSetNominalTypeVal>        y_PointSetNominalType
%type <PointSetReferenceRangeTypeVal> y_PointSetReferenceRangeType
%type <PointSetReferenceSingleTypeVal> y_PointSetReferenceSingleType
%type <PointSetReferenceWholeTypeVal> y_PointSetReferenceWholeType
%type <PointSetTypeVal>               y_PointSetType
%type <PointSetTypeVal>               y_PointSet_PointSetType_0
%type <PointSimpleTypeVal>            y_PointSimpleType
%type <PointTypeVal>                  y_PointType
%type <ElementReferenceTypeVal>       y_Point_ElementReferenceType
%type <MeasuredPointTypeVal>          y_Point_MeasuredPointType
%type <Point2dSimpleTypeVal>          y_Point_Point2dSimpleType
%type <PointEntityTypeVal>            y_Point_PointEntityType
%type <PointTypeVal>                  y_Point_PointType
%type <LaserTypeVal>                  y_PointingLaser_LaserType_0
%type <ArrayBinaryTypeVal>            y_PointsBinary_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_PointsColorBinary_ArrayBinaryType
%type <ArrayUnsignedByteTypeVal>      y_PointsColor_ArrayUnsignedByteType
%type <ArrayBinaryTypeVal>            y_PointsHiddenBinary_ArrayBinaryType
%type <ArrayIntTypeVal>               y_PointsHidden_ArrayIntType
%type <ArrayBinaryTypeVal>            y_PointsVisibleBinary_ArrayBinaryType
%type <ArrayIntTypeVal>               y_PointsVisible_ArrayIntType
%type <ArrayPoint2dTypeVal>           y_Points_ArrayPoint2dType
%type <ArrayPointTypeVal>             y_Points_ArrayPointType
%type <ListDoubleTypeVal>             y_Points_ListDoubleType
%type <ValidationPointsTypeVal>       y_Points_ValidationPointsType_0
%type <XmlDoubleVal>                  y_PoissonsRatio_XmlDouble_0
%type <AngularValueTypeVal>           y_PolarAngleResolution_AngularValueType
%type <PolyLineTypeVal>               y_PolyLineType
%type <PolyLineTypeVal>               y_PolyLine_PolyLineType
%type <PolyLineTypeVal>               y_PolyLine_PolyLineType_0
%type <Polyline12CoreT_1221_TypeVal>  y_Polyline12CoreT_1221_Polyline12CoreT_1221_Type
%type <Polyline12CoreT_1221_TypeVal>  y_Polyline12CoreT_1221_Type
%type <Polyline12CoreT_1221_TypeChoicePairVal> y_Polyline12CoreT_1221_TypeChoicePair
%type <Polyline12CoreTypeVal>         y_Polyline12CoreType
%type <Polyline12CoreTypeVal>         y_Polyline12Core_Polyline12CoreType
%type <Polyline12TypeVal>             y_Polyline12Type
%type <Polyline12TypeVal>             y_Polyline12_Polyline12Type
%type <Polyline13CoreT_1222_TypeVal>  y_Polyline13CoreT_1222_Polyline13CoreT_1222_Type
%type <Polyline13CoreT_1222_TypeVal>  y_Polyline13CoreT_1222_Type
%type <Polyline13CoreT_1222_TypeChoicePairVal> y_Polyline13CoreT_1222_TypeChoicePair
%type <Polyline13CoreTypeVal>         y_Polyline13CoreType
%type <Polyline13CoreTypeVal>         y_Polyline13Core_Polyline13CoreType
%type <Polyline13TypeVal>             y_Polyline13Type
%type <Polyline13TypeVal>             y_Polyline13_Polyline13Type
%type <Polyline2dTypeVal>             y_Polyline2dType
%type <Polyline2dType_1232_TypeVal>   y_Polyline2dType_1232_Polyline2dType_1232_Type
%type <Polyline2dType_1232_TypeVal>   y_Polyline2dType_1232_Type
%type <Polyline2dType_1232_TypeChoicePairVal> y_Polyline2dType_1232_TypeChoicePair
%type <Polyline2dTypeVal>             y_Polyline_Polyline2dType
%type <Polylines2dTypeVal>            y_Polylines2dType
%type <Polylines2dTypeVal>            y_Polylines_Polylines2dType_0
%type <PositionCapabilityCalculationEnumTypeVal> y_PositionCapabilityCalculationEnumType
%type <PositionCharacteristicDefinitionTypeVal> y_PositionCharacteristicDefinitionType
%type <PositionCharacteristicDefinitionTypeVal> y_PositionCharacteristicDefinition_PositionCharacteristicDefinitionType
%type <PositionCharacteristicItemTypeVal> y_PositionCharacteristicItemType
%type <PositionCharacteristicItemTypeVal> y_PositionCharacteristicItem_PositionCharacteristicItemType
%type <PositionCharacteristicMeasurementTypeVal> y_PositionCharacteristicMeasurementType
%type <PositionCharacteristicMeasurementTypeVal> y_PositionCharacteristicMeasurement_PositionCharacteristicMeasurementType
%type <PositionCharacteristicNominalTypeVal> y_PositionCharacteristicNominalType
%type <PositionCharacteristicNominalTypeVal> y_PositionCharacteristicNominal_PositionCharacteristicNominalType
%type <PositionCharacteristicStatsEvalTypeVal> y_PositionCharacteristicStatsEvalType
%type <PositionCharacteristicStatsEvalTypeVal> y_PositionCharacteristicStats_PositionCharacteristicStatsEvalType
%type <PositionCoordinateMethodEnumTypeVal> y_PositionCoordinateMethodEnumType
%type <PositionCoordinateMethodTypeVal> y_PositionCoordinateMethodType
%type <PositionDiametricalZoneTypeVal> y_PositionDiametricalZoneType
%type <PositionNonDiametricalZoneTypeVal> y_PositionNonDiametricalZoneType
%type <PositionSphericalZoneTypeVal>  y_PositionSphericalZoneType
%type <PositionZoneShapeTypeVal>      y_PositionZoneShapeType
%type <PositionZoneShapeTypeChoicePairVal> y_PositionZoneShapeTypeChoicePair
%type <PositiveDecimalTypeVal>        y_PositiveDecimalType
%type <XmlTokenVal>                   y_PostalBox_XmlToken_0
%type <XmlTokenVal>                   y_PostalCode_XmlToken_0
%type <CriterionDecimalTypeVal>       y_PpThreshold_CriterionDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_Pp_StatsMeasuredDecimalType
%type <CriterionDecimalTypeVal>       y_PpkThreshold_CriterionDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_Ppk_StatsMeasuredDecimalType
%type <PreInspectionTr_1043_TypeVal>  y_PreInspectionTr_1043_PreInspectionTr_1043_Type_0
%type <PreInspectionTr_1043_TypeVal>  y_PreInspectionTr_1043_Type
%type <PreInspectionTr_1043_TypeChoicePairVal> y_PreInspectionTr_1043_TypeChoicePair
%type <PreInspectionTraceabilityTypeVal> y_PreInspectionTraceabilityType
%type <PreInspectionTraceabilityTypeVal> y_PreInspectionTraceability_PreInspectionTraceabilityType_0
%type <PrecedenceEnumTypeVal>         y_PrecedenceEnumType
%type <PrecedenceEnumTypeVal>         y_PrecedenceEnum_PrecedenceEnumType
%type <PrecedenceTypeVal>             y_PrecedenceType
%type <PrecedenceTypeChoicePairVal>   y_PrecedenceTypeChoicePair
%type <PrecedenceTypeVal>             y_Precedence_PrecedenceType
%type <XmlPositiveIntegerVal>         y_Predecessor_XmlPositiveInteger
%type <PredecessorsTypeVal>           y_PredecessorsType
%type <PredecessorsTypeVal>           y_Predecessors_PredecessorsType_0
%type <QIFReferenceTypeVal>           y_PreferredActionMethodId_QIFReferenceType_0
%type <ArrayReferenceTypeVal>         y_PreferredResourceIds_ArrayReferenceType_0
%type <MeasuredPressureValueTypeVal>  y_PressureAbsoluteLinearity_MeasuredPressureValueType
%type <PressureCharact_1066_TypeVal>  y_PressureCharact_1066_PressureCharact_1066_Type
%type <PressureCharact_1066_TypeVal>  y_PressureCharact_1066_Type
%type <PressureCharact_1066_TypeChoicePairVal> y_PressureCharact_1066_TypeChoicePair
%type <CriterionPressureTypeVal>      y_PressureCriterion_CriterionPressureType_0
%type <PressureValueTypeVal>          y_PressureLimit_PressureValueType_0
%type <MeasuredPressureValueTypeVal>  y_PressureMeasurement_MeasuredPressureValueType_0
%type <SummariesStatisticsPressureTypeVal> y_PressureStatsSummaries_SummariesStatisticsPressureType_0
%type <SummaryStatisticsPressureTypeVal> y_PressureStatsSummary_SummaryStatisticsPressureType
%type <PressureToleran_1020_TypeVal>  y_PressureToleran_1020_PressureToleran_1020_Type
%type <PressureToleran_1020_TypeVal>  y_PressureToleran_1020_Type
%type <PressureToleran_1020_TypeChoicePairVal> y_PressureToleran_1020_TypeChoicePair
%type <PressureToleran_1037_TypeVal>  y_PressureToleran_1037_PressureToleran_1037_Type
%type <PressureToleran_1037_TypeVal>  y_PressureToleran_1037_Type
%type <PressureToleranceTypeVal>      y_PressureToleranceType
%type <PressureUnitTypeVal>           y_PressureUnitType
%type <PressureUnitTypeVal>           y_PressureUnit_PressureUnitType
%type <PressureUnitTypeVal>           y_PressureUnit_PressureUnitType_0
%type <PressureValueTypeVal>          y_PressureValueType
%type <QIFReferenceTypeVal>           y_PreviousOperationId_QIFReferenceType_0
%type <PrimaryAlignmentOperationTypeVal> y_PrimaryAlignmentOperationType
%type <PrimaryAlignmentOperationTypeVal> y_PrimaryAlignment_PrimaryAlignmentOperationType
%type <UnitVectorTypeVal>             y_PrimaryAxis_UnitVectorType
%type <AlignmentFeatureTypeVal>       y_PrimaryEntity_AlignmentFeatureType
%type <ManufacturingMethodTypeVal>    y_PrimaryManufacturingMethod_ManufacturingMethodType_0
%type <ShapeClassTypeVal>             y_PrimaryShapeClass_ShapeClassType_0
%type <PrimaryUnitsTypeVal>           y_PrimaryUnitsType
%type <PrimaryUnitsTypeVal>           y_PrimaryUnits_PrimaryUnitsType
%type <PrintedDrawingTypeVal>         y_PrintedDrawingType
%type <PrintedDrawingTypeVal>         y_PrintedDrawing_PrintedDrawingType
%type <ListDoubleTypeVal>             y_ProbeRadii_ListDoubleType
%type <XmlDecimalVal>                 y_ProbeRadius_XmlDecimal
%type <LinearValueTypeVal>            y_ProbeTipDiameter_LinearValueType_0
%type <ProbeTipTypeVal>               y_ProbeTipType
%type <ProbeTipTypeVal>               y_ProbeTip_ProbeTipType
%type <ProcessDifferen_1206_TypeVal>  y_ProcessDifferen_1206_ProcessDifferen_1206_Type
%type <ProcessDifferen_1206_TypeVal>  y_ProcessDifferen_1206_Type
%type <ProcessDifferen_1206_TypeChoicePairVal> y_ProcessDifferen_1206_TypeChoicePair
%type <ProcessDifferenceStudyPlanTypeVal> y_ProcessDifferenceStudyPlanType
%type <ProcessDifferenceStudyPlanTypeVal> y_ProcessDifferenceStudyPlan_ProcessDifferenceStudyPlanType
%type <ProcessDifferenceStudyResultsTypeVal> y_ProcessDifferenceStudyResultsType
%type <ProcessDifferenceStudyResultsTypeVal> y_ProcessDifferenceStudyResults_ProcessDifferenceStudyResultsType
%type <ProcessParameterTypeVal>       y_ProcessParameterType
%type <ProcessParametersTypeVal>      y_ProcessParametersType
%type <ProcessParametersTypeVal>      y_ProcessParameters_ProcessParametersType_0
%type <StatsMeasuredDecimalTypeVal>   y_ProcessVariation_StatsMeasuredDecimalType
%type <WeldingProcessEnumTypeVal>     y_Process_WeldingProcessEnumType
%type <XmlUnsignedIntVal>             y_ProductAsmPathsCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductAssemblySetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductAuxiliarySetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductComponentSetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductCoordinateSystemSetCount_XmlUnsignedInt_0
%type <ProductDataQual_1044_TypeVal>  y_ProductDataQual_1044_ProductDataQual_1044_Type
%type <ProductDataQual_1044_TypeVal>  y_ProductDataQual_1044_Type
%type <ProductDataQual_1044_TypeChoicePairVal> y_ProductDataQual_1044_TypeChoicePair
%type <ProductDataQualityAreaEnumTypeVal> y_ProductDataQualityAreaEnumType
%type <ProductDataQualityAreaTypeVal> y_ProductDataQualityAreaType
%type <ProductDataQualityCheckTypeVal> y_ProductDataQualityCheckType
%type <ProductDataQualityCheckTypeVal> y_ProductDataQualityCheck_ProductDataQualityCheckType
%type <ProductDataQualityChecksTypeVal> y_ProductDataQualityChecksType
%type <ProductDataQualityChecksTypeVal> y_ProductDataQualityChecks_ProductDataQualityChecksType_0
%type <ProductDataQualityTypeVal>     y_ProductDataQualityType
%type <ProductDataQualityTypeVal>     y_ProductDataQuality_ProductDataQualityType_0
%type <EnvironmentsTypeVal>           y_ProductEnvironments_EnvironmentsType_0
%type <XmlUnsignedIntVal>             y_ProductGeometrySetCount_XmlUnsignedInt_0
%type <ProductHeaderTypeVal>          y_ProductHeaderType
%type <XmlUnsignedIntVal>             y_ProductLayerSetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductNoteFlagSetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductNoteSetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductPartNoteSetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductPartSetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductTopologySetCount_XmlUnsignedInt_0
%type <ProductTraceabilityTypeVal>    y_ProductTraceabilityType
%type <ProductTypeVal>                y_ProductType
%type <ProductType_1238_TypeVal>      y_ProductType_1238_ProductType_1238_Type_0
%type <ProductType_1238_TypeVal>      y_ProductType_1238_Type
%type <ProductType_1238_TypeChoicePairVal> y_ProductType_1238_TypeChoicePair
%type <XmlUnsignedIntVal>             y_ProductViewSetCount_XmlUnsignedInt_0
%type <XmlUnsignedIntVal>             y_ProductVisualizationSetCount_XmlUnsignedInt_0
%type <ProductTypeVal>                y_Product_ProductType_0
%type <XmlTokenVal>                   y_ProductionMethod_XmlToken_0
%type <ProductionStudyPlanTypeVal>    y_ProductionStudyPlanType
%type <ProductionStudyPlanTypeVal>    y_ProductionStudyPlan_ProductionStudyPlanType
%type <ProductionStudyResultsTypeVal> y_ProductionStudyResultsType
%type <ProductionStudyResultsTypeVal> y_ProductionStudyResults_ProductionStudyResultsType
%type <ProfileCharacte_1067_TypeVal>  y_ProfileCharacte_1067_ProfileCharacte_1067_Type_0
%type <ProfileCharacte_1067_TypeVal>  y_ProfileCharacte_1067_Type
%type <ProfileCharacte_1067_TypeChoicePairVal> y_ProfileCharacte_1067_TypeChoicePair
%type <QIFReferenceFullTypeVal>       y_ProfileCurveId_QIFReferenceFullType_0
%type <ProfileProjectorMeasureFeatureMethodTypeVal> y_ProfileProjectorMeasureFeatureMethodType
%type <ProfileProjectorMeasureFeatureMethodTypeVal> y_ProfileProjectorMeasureFeatureMethod_ProfileProjectorMeasureFeatureMethodType
%type <LinearValueTypeVal>            y_ProjectedDatum_LinearValueType_0
%type <LinearValueTypeVal>            y_ProjectedToleranceZoneValue_LinearValueType_0
%type <LinearValueTypeVal>            y_ProjectedToleranceZone_LinearValueType_0
%type <BaseFeatureTypeVal>            y_ProjectionArc_BaseFeatureType
%type <BaseFeatureTypeVal>            y_ProjectionCircle_BaseFeatureType
%type <BaseFeatureTypeVal>            y_ProjectionFeature_BaseFeatureType
%type <BaseFeatureTypeVal>            y_ProjectionLine_BaseFeatureType
%type <BaseFeatureTypeVal>            y_ProjectionOppositeAngledLines_BaseFeatureType
%type <BaseFeatureTypeVal>            y_ProjectionOppositeParallelLines_BaseFeatureType
%type <BaseFeatureTypeVal>            y_ProjectionPlane_BaseFeatureType
%type <CircleProjectionTypeVal>       y_Projection_CircleProjectionType
%type <CircularArcProjectionTypeVal>  y_Projection_CircularArcProjectionType
%type <EllipseProjectionTypeVal>      y_Projection_EllipseProjectionType
%type <EllipticalArcProjectionTypeVal> y_Projection_EllipticalArcProjectionType
%type <LineProjectionTypeVal>         y_Projection_LineProjectionType
%type <OppositeAngledLinesProjectionTypeVal> y_Projection_OppositeAngledLinesProjectionType
%type <OppositeParallelLinesProjectionTypeVal> y_Projection_OppositeParallelLinesProjectionType
%type <PointFeatureProjectionTypeVal> y_Projection_PointFeatureProjectionType
%type <XmlBooleanVal>                 y_Projection_XmlBoolean_0
%type <XmlStringVal>                  y_ProtectionClass_XmlString_0
%type <QIFReferenceTypeVal>           y_ProxyMeasurementId_QIFReferenceType_0
%type <XmlStringVal>                  y_PurchaseOrderNumber_XmlString_0
%type <QIFDocumentHeaderTypeVal>      y_QIFDocumentHeaderType
%type <QIFDocumentTypeVal>            y_QIFDocumentType
%type <QIFFeaturePairTypeVal>         y_QIFFeaturePairType
%type <QIFMayTypeVal>                 y_QIFMayType
%type <QIFMustNotTypeVal>             y_QIFMustNotType
%type <QIFMustTypeVal>                y_QIFMustType
%type <QIFReferenceActiveTypeVal>     y_QIFReferenceActiveType
%type <QIFReferenceFullTypeVal>       y_QIFReferenceFullType
%type <QIFReferenceSimpleTypeVal>     y_QIFReferenceSimpleType
%type <QIFReferenceTypeVal>           y_QIFReferenceType
%type <QIFRulesTypeVal>               y_QIFRulesType
%type <QPIdFullReferenceTypeVal>      y_QPIdFullReferenceType
%type <QPIdReferenceTypeVal>          y_QPIdReferenceType
%type <QPIdReferenceTypeVal>          y_QPIdReference_QPIdReferenceType_0
%type <QPIdTypeVal>                   y_QPIdType
%type <QPIdFullReferenceTypeVal>      y_QPId_QPIdFullReferenceType
%type <QPIdReferenceTypeVal>          y_QPId_QPIdReferenceType
%type <QPIdTypeVal>                   y_QPId_QPIdType
%type <QualificationTypeVal>          y_QualificationType
%type <QualificationTypeVal>          y_Qualification_QualificationType
%type <QualificationsTypeVal>         y_QualificationsType
%type <QualificationsTypeVal>         y_Qualifications_QualificationsType_0
%type <ListDoubleTypeVal>             y_Quality_ListDoubleType
%type <QuaternionTypeVal>             y_QuaternionType
%type <RAPZResolutionTypeVal>         y_RAPResolution_RAPZResolutionType
%type <RAPZResolutionTypeVal>         y_RAPZResolutionType
%type <RAPZResolutionTypeVal>         y_RAPZResolution_RAPZResolutionType
%type <LinearValueTypeVal>            y_RadialAxisLength_LinearValueType
%type <RadialDifferentialScaleTypeVal> y_RadialDifferentialScaleType
%type <RadialDifferentialScaleTypeVal> y_RadialDifferentialScale_RadialDifferentialScaleType
%type <LinearValueTypeVal>            y_RadialError_LinearValueType
%type <LinearValueTypeVal>            y_RadialResolution_LinearValueType
%type <XmlTokenVal>                   y_Radial_XmlToken
%type <RadiusCharacteristicDefinitionTypeVal> y_RadiusCharacteristicDefinitionType
%type <RadiusCharacteristicDefinitionTypeVal> y_RadiusCharacteristicDefinition_RadiusCharacteristicDefinitionType
%type <RadiusCharacteristicItemTypeVal> y_RadiusCharacteristicItemType
%type <RadiusCharacteristicItemTypeVal> y_RadiusCharacteristicItem_RadiusCharacteristicItemType
%type <RadiusCharacteristicMeasurementTypeVal> y_RadiusCharacteristicMeasurementType
%type <RadiusCharacteristicMeasurementTypeVal> y_RadiusCharacteristicMeasurement_RadiusCharacteristicMeasurementType
%type <RadiusCharacteristicNominalTypeVal> y_RadiusCharacteristicNominalType
%type <RadiusCharacteristicNominalTypeVal> y_RadiusCharacteristicNominal_RadiusCharacteristicNominalType
%type <RadiusCharacteristicStatsEvalTypeVal> y_RadiusCharacteristicStatsEvalType
%type <RadiusCharacteristicStatsEvalTypeVal> y_RadiusCharacteristicStats_RadiusCharacteristicStatsEvalType
%type <MeasuredLinearValueTypeVal>    y_RadiusMax_MeasuredLinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_RadiusMin_MeasuredLinearValueType_0
%type <LinearValueTypeVal>            y_Radius_LinearValueType
%type <MeasuredLinearValueTypeVal>    y_Radius_MeasuredLinearValueType_0
%type <XmlDoubleVal>                  y_Radius_XmlDouble
%type <GageRandRStudyEnumTypeVal>     y_RandRStudyType_GageRandRStudyEnumType
%type <XmlTokenVal>                   y_RangeAngularUnit_XmlToken
%type <LinearValueTypeVal>            y_RangeForVolumetricUncertainty_LinearValueType_0
%type <XmlTokenVal>                   y_RangeLinearUnit_XmlToken
%type <PointSetReferenceRangeTypeVal> y_RangePointSetId_PointSetReferenceRangeType
%type <ListDoubleTypeVal>             y_RangeValues_ListDoubleType
%type <PointRangeTypeVal>             y_Range_PointRangeType
%type <StatsMeasuredDecimalTypeVal>   y_Range_StatsMeasuredDecimalType
%type <XmlDoubleVal>                  y_Ratio_XmlDouble
%type <XmlStringVal>                  y_ReasonForPartialInspection_XmlString
%type <ExclusionReasonTypeVal>        y_Reason_ExclusionReasonType
%type <CircleRecompTypeVal>           y_Recompensated_CircleRecompType
%type <CircularArcRecompTypeVal>      y_Recompensated_CircularArcRecompType
%type <ConeRecompTypeVal>             y_Recompensated_ConeRecompType
%type <ConicalSegmentRecompTypeVal>   y_Recompensated_ConicalSegmentRecompType
%type <CylinderRecompTypeVal>         y_Recompensated_CylinderRecompType
%type <CylindricalSegmentRecompTypeVal> y_Recompensated_CylindricalSegmentRecompType
%type <EllipseRecompTypeVal>          y_Recompensated_EllipseRecompType
%type <EllipticalArcRecompTypeVal>    y_Recompensated_EllipticalArcRecompType
%type <ElongatedCircleRecompTypeVal>  y_Recompensated_ElongatedCircleRecompType
%type <ElongatedCylinderRecompTypeVal> y_Recompensated_ElongatedCylinderRecompType
%type <ExtrudedCrossSectionRecompTypeVal> y_Recompensated_ExtrudedCrossSectionRecompType
%type <LineRecompTypeVal>             y_Recompensated_LineRecompType
%type <OppositeAngledLinesRecompTypeVal> y_Recompensated_OppositeAngledLinesRecompType
%type <OppositeAngledPlanesRecompTypeVal> y_Recompensated_OppositeAngledPlanesRecompType
%type <OppositeParallelLinesRecompTypeVal> y_Recompensated_OppositeParallelLinesRecompType
%type <OppositeParallelPlanesRecompTypeVal> y_Recompensated_OppositeParallelPlanesRecompType
%type <PlaneRecompTypeVal>            y_Recompensated_PlaneRecompType
%type <PointDefinedCurveRecompTypeVal> y_Recompensated_PointDefinedCurveRecompType
%type <PointDefinedSurfaceRecompTypeVal> y_Recompensated_PointDefinedSurfaceRecompType
%type <SphereRecompTypeVal>           y_Recompensated_SphereRecompType
%type <SphericalSegmentRecompTypeVal> y_Recompensated_SphericalSegmentRecompType
%type <SurfaceOfRevolutionRecompTypeVal> y_Recompensated_SurfaceOfRevolutionRecompType
%type <ThreadedFeatureRecompTypeVal>  y_Recompensated_ThreadedFeatureRecompType
%type <ToroidalSegmentRecompTypeVal>  y_Recompensated_ToroidalSegmentRecompType
%type <TorusRecompTypeVal>            y_Recompensated_TorusRecompType
%type <RectangleTypeVal>              y_RectangleType
%type <RectangleTypeVal>              y_Rectangle_RectangleType
%type <LinearValueTypeVal>            y_RectangularUnitAreaLength_LinearValueType
%type <UnitVectorTypeVal>             y_RectangularUnitAreaOrientation_UnitVectorType_0
%type <RectangularUnitAreaTypeVal>    y_RectangularUnitAreaType
%type <LinearValueTypeVal>            y_RectangularUnitAreaWidth_LinearValueType
%type <RectangularUnitAreaTypeVal>    y_RectangularUnitArea_RectangularUnitAreaType
%type <ReducedDatumEnumTypeVal>       y_ReducedDatumEnumType
%type <ReducedDatumEnumTypeVal>       y_ReducedDatum_ReducedDatumEnumType_0
%type <ReferenceFeatureAssociationSpecificationElementEnumTypeVal> y_ReferenceFeatureAssociationSpecificationElementEnumType
%type <ReferenceFeatureAssociationSpecificationElementTypeVal> y_ReferenceFeatureAssociationSpecificationElementType
%type <ReferenceFeatureAssociationSpecificationElementTypeVal> y_ReferenceFeatureAssociationSpecificationElement_ReferenceFeatureAssociationSpecificationElementType
%type <ReferenceFeatureAssociationSpecificationParameterEnumTypeVal> y_ReferenceFeatureAssociationSpecificationParameterEnumType
%type <QIFReferenceFullTypeVal>       y_ReferenceFeatureNominalId_QIFReferenceFullType_0
%type <ArrayReferenceFullTypeVal>     y_ReferenceFeatureNominalIds_ArrayReferenceFullType_0
%type <StatsLinearTypeVal>            y_ReferenceLengthStats_StatsLinearType_0
%type <LinearValueTypeVal>            y_ReferenceLength_LinearValueType
%type <LinearValueTypeVal>            y_ReferenceLength_LinearValueType_0
%type <Point2dSimpleTypeVal>          y_ReferenceLineBeginPoint_Point2dSimpleType
%type <Point2dSimpleTypeVal>          y_ReferenceLineEndPoint_Point2dSimpleType
%type <ElementReferenceFullTypeVal>   y_Reference_ElementReferenceFullType
%type <ReferencedComponentEnumTypeVal> y_ReferencedComponentEnumType
%type <ReferencedComponentEnumTypeVal> y_ReferencedComponent_ReferencedComponentEnumType
%type <QPIdFullReferenceTypeVal>      y_ReferencedQIFPlanInstance_QPIdFullReferenceType
%type <XmlNMTOKENVal>                 y_ReferencedQIFPlan_XmlNMTOKEN
%type <ArrayReferenceTypeVal>         y_ReferencedStandardIds_ArrayReferenceType_0
%type <XmlTokenVal>                   y_Region_XmlToken_0
%type <StatsMeasuredDecimalTypeVal>   y_RegressionIntercept_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_RegressionSlope_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_RelativeAppraiserVariation_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_RelativeBias_StatsMeasuredDecimalType
%type <MeasuredDecimalTypeVal>        y_RelativeDifference_MeasuredDecimalType_0
%type <XmlDecimalVal>                 y_RelativeDifference_XmlDecimal
%type <StatsMeasuredDecimalTypeVal>   y_RelativeEquipmentVariation_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_RelativeGageRandR_StatsMeasuredDecimalType
%type <FractionTypeVal>               y_RelativeHumidityControlMax_FractionType
%type <FractionTypeVal>               y_RelativeHumidityControlMin_FractionType
%type <FractionTypeVal>               y_RelativeHumidityRangeMax_FractionType
%type <FractionTypeVal>               y_RelativeHumidityRangeMin_FractionType
%type <MeasuredDecimalTypeVal>        y_RelativeHumidity_MeasuredDecimalType_0
%type <StatsMeasuredDecimalTypeVal>   y_RelativeInteraction_StatsMeasuredDecimalType
%type <XmlDecimalVal>                 y_RelativeLinearityMinimum_XmlDecimal
%type <MeasuredDecimalTypeVal>        y_RelativeLinearity_MeasuredDecimalType_0
%type <StatsMeasuredDecimalTypeVal>   y_RelativeLinearity_StatsMeasuredDecimalType
%type <MeasuredDecimalTypeVal>        y_RelativeMaximum_MeasuredDecimalType_0
%type <XmlDecimalVal>                 y_RelativeMaximum_XmlDecimal
%type <StatsMeasuredDecimalTypeVal>   y_RelativePartVariation_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_RelativeTotalVariation_StatsMeasuredDecimalType
%type <LinearValueTypeVal>            y_Repeatability_LinearValueType
%type <LinearValueTypeVal>            y_Repeatability_LinearValueType_0
%type <XmlStringVal>                  y_ReportNumber_XmlString_0
%type <XmlDateTimeVal>                y_ReportPreparationDate_XmlDateTime_0
%type <EmployeeTypeVal>               y_ReportPreparer_EmployeeType_0
%type <XmlTokenVal>                   y_ReportType_XmlToken_0
%type <SimultaneousRequirementEnumTypeVal> y_Requirement_SimultaneousRequirementEnumType
%type <XmlStringVal>                  y_Requirements_XmlString
%type <LinearValueTypeVal>            y_Resolution_LinearValueType_0
%type <XmlStringVal>                  y_Resolution_XmlString_0
%type <ResolutionBaseTypeVal>         y_Resolution_substituteType_0
%type <XmlStringVal>                  y_ResponsibilityIdentifier_XmlString_0
%type <XmlStringVal>                  y_ResultStatement_XmlString
%type <CheckStatusEnumTypeVal>        y_ResultStatus_CheckStatusEnumType
%type <ExternalFileReferencesTypeVal> y_ResultsFiles_ExternalFileReferencesType
%type <ArrayReferenceTypeVal>         y_ResultsIds_ArrayReferenceType
%type <ArrayQPIdFullReferenceTypeVal> y_ResultsQPIds_ArrayQPIdFullReferenceType
%type <ResultsTypeVal>                y_ResultsType
%type <ResultsTypeVal>                y_Results_ResultsType_0
%type <RetrievalMethodEnumTypeVal>    y_RetrievalMethodEnumType
%type <RetrievalMethodEnumTypeVal>    y_RetrievalMethod_RetrievalMethodEnumType
%type <XmlStringVal>                  y_Revision_XmlString_0
%type <Revolution23CoreTypeVal>       y_Revolution23CoreType
%type <Revolution23CoreTypeVal>       y_Revolution23Core_Revolution23CoreType
%type <Revolution23TypeVal>           y_Revolution23Type
%type <Revolution23TypeVal>           y_Revolution23_Revolution23Type
%type <ElementReferenceTypeVal>       y_RootAssembly_ElementReferenceType
%type <ElementReferenceTypeVal>       y_RootComponent_ElementReferenceType
%type <StatsMeasuredDecimalTypeVal>   y_RootMeanSquare_StatsMeasuredDecimalType
%type <FractionTypeVal>               y_RootOpening_FractionType_0
%type <ElementReferenceTypeVal>       y_RootPart_ElementReferenceType
%type <RotaryAxisTypeVal>             y_RotaryAxisType
%type <RotaryAxisTypeVal>             y_RotaryAxis_RotaryAxisType
%type <RotaryTableTypeVal>            y_RotaryTableType
%type <RotaryTableTypeVal>            y_RotaryTable_RotaryTableType_0
%type <ExplodedViewRotateTypeVal>     y_Rotate_ExplodedViewRotateType
%type <UnitVectorTypeVal>             y_RotationAxis_UnitVectorType
%type <UnitVectorTypeVal>             y_RotationAxis_UnitVectorType_0
%type <TransformRotationTypeVal>      y_Rotation_TransformRotationType_0
%type <RoughnessApplicabilityEnumTypeVal> y_RoughnessApplicabilityEnumType
%type <StatsWithTolLinearTypeVal>     y_RoughnessAverageValueStats_StatsWithTolLinearType_0
%type <MeasuredLinearValueTypeVal>    y_RoughnessAverageValue_MeasuredLinearValueType_0
%type <LinearValueTypeVal>            y_RoughnessAverage_LinearValueType
%type <RoughnessLayEnumTypeVal>       y_RoughnessLayEnumType
%type <RoughnessObtentionEnumTypeVal> y_RoughnessObtentionEnumType
%type <LinearValueTypeVal>            y_RowSeparationDistance_LinearValueType
%type <Ruled23CoreTypeVal>            y_Ruled23CoreType
%type <Ruled23CoreTypeVal>            y_Ruled23Core_Ruled23CoreType
%type <Ruled23TypeVal>                y_Ruled23Type
%type <Ruled23TypeVal>                y_Ruled23_Ruled23Type
%type <QPIdFullReferenceTypeVal>      y_RulesToUseQPId_QPIdFullReferenceType_0
%type <RulesUnitsTypeVal>             y_RulesUnitsType
%type <RulesUnitsTypeVal>             y_RulesUnits_RulesUnitsType_0
%type <QPIdFullReferenceTypeVal>      y_RulesUsedQPId_QPIdFullReferenceType_0
%type <QIFRulesTypeVal>               y_Rules_QIFRulesType_0
%type <XmlTokenVal>                   y_SIUnitName_XmlToken_0
%type <XmlStringVal>                  y_SafetyLevel_XmlString_0
%type <XmlPositiveIntegerVal>         y_SampleFrequency_XmlPositiveInteger
%type <XmlStringVal>                  y_SampleNumber_XmlString_0
%type <LinearValueTypeVal>            y_SamplePenetratingMaterialLength_LinearValueType_0
%type <XmlStringVal>                  y_SamplePenetratingMaterial_XmlString_0
%type <XmlPositiveIntegerVal>         y_SampleSize_XmlPositiveInteger
%type <SamplingCategoryIsTypeVal>     y_SamplingCategoryIsType
%type <SamplingCategoryIsTypeVal>     y_SamplingCategoryIs_SamplingCategoryIsType
%type <UserDefinedUnitValueTypeVal>   y_SamplingFrequency_UserDefinedUnitValueType_0
%type <XmlPositiveIntegerVal>         y_SamplingFrequency_XmlPositiveInteger
%type <SamplingIntervalEnumTypeVal>   y_SamplingIntervalEnumType
%type <SamplingIntervalEnumTypeVal>   y_SamplingIntervalEnum_SamplingIntervalEnumType
%type <SamplingIntervalTypeVal>       y_SamplingIntervalType
%type <SamplingIntervalTypeChoicePairVal> y_SamplingIntervalTypeChoicePair
%type <SamplingIntervalTypeVal>       y_SamplingInterval_SamplingIntervalType
%type <SamplingMethodT_1135_TypeVal>  y_SamplingMethodT_1135_SamplingMethodT_1135_Type
%type <SamplingMethodT_1135_TypeVal>  y_SamplingMethodT_1135_Type
%type <SamplingMethodT_1135_TypeChoicePairVal> y_SamplingMethodT_1135_TypeChoicePair
%type <SamplingMethodT_1157_TypeVal>  y_SamplingMethodT_1157_SamplingMethodT_1157_Type
%type <SamplingMethodT_1157_TypeVal>  y_SamplingMethodT_1157_Type
%type <SamplingMethodTypeVal>         y_SamplingMethodType
%type <SamplingMethodTypeVal>         y_SamplingMethod_SamplingMethodType
%type <XmlPositiveIntegerVal>         y_SamplingPeriod_XmlPositiveInteger
%type <UserDefinedUnitValueTypeVal>   y_SamplingRate_UserDefinedUnitValueType_0
%type <SavedViewSetTypeVal>           y_SavedViewSetType
%type <SavedViewSetTypeVal>           y_SavedViewSet_SavedViewSetType_0
%type <SavedViewTypeVal>              y_SavedViewType
%type <SavedViewTypeVal>              y_SavedView_SavedViewType
%type <XmlDecimalVal>                 y_ScaleCoefficientOfExpansionUncertainty_XmlDecimal_0
%type <XmlDecimalVal>                 y_ScaleCoefficientOfExpansion_XmlDecimal_0
%type <XmlDoubleVal>                  y_ScaleCoefficient_XmlDouble_0
%type <XmlDecimalVal>                 y_ScaleFactor_XmlDecimal
%type <XmlStringVal>                  y_ScaleMaterial_XmlString_0
%type <ScaleReferenceEnumTypeVal>     y_ScaleReferenceEnumType
%type <ScaleReferenceEnumTypeVal>     y_ScaleReference_ScaleReferenceEnumType_0
%type <LinearValueTypeVal>            y_ScaleResolution_LinearValueType_0
%type <ScaleTypeVal>                  y_ScaleType
%type <ScaleType_1005_TypeVal>        y_ScaleType_1005_ScaleType_1005_Type
%type <ScaleType_1005_TypeVal>        y_ScaleType_1005_Type
%type <ScaleType_1005_TypeChoicePairVal> y_ScaleType_1005_TypeChoicePair
%type <ScaleTypeVal>                  y_Scale_ScaleType_0
%type <MeasurementDeviceScalesBaseTypeVal> y_Scales_substituteType_0
%type <UserDefinedUnitValueTypeVal>   y_ScanningSpeed_UserDefinedUnitValueType_0
%type <XmlStringVal>                  y_Scope_XmlString_0
%type <XmlStringVal>                  y_ScreenMaterial_XmlString_0
%type <LinearValueTypeVal>            y_SearchRadius_LinearValueType
%type <UserDefinedAxisTypeVal>        y_SecondAxis_UserDefinedAxisType
%type <CompositeSegmentPositionDefinitionTypeVal> y_SecondCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0
%type <CompositeSegmentPositionMeasurementTypeVal> y_SecondCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0
%type <CompositeSegmentPositionStatsEvalTypeVal> y_SecondCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType
%type <CompositeSegmentProfileDefinitionTypeVal> y_SecondCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
%type <CompositeSegmentProfileMeasurementTypeVal> y_SecondCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
%type <CompositeSegmentProfileStatsEvalTypeVal> y_SecondCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType
%type <CompositeSegmentSymmetryDefinitionTypeVal> y_SecondCompositeSegmentSymmetryDefinition_CompositeSegmentSymmetryDefinitionType_0
%type <CompositeSegmentSymmetryMeasurementTypeVal> y_SecondCompositeSegmentSymmetryMeasurement_CompositeSegmentSymmetryMeasurementType_0
%type <CompositeSegmentSymmetryStatsEvalTypeVal> y_SecondCompositeSegmentSymmetryStats_CompositeSegmentSymmetryStatsEvalType
%type <LinearValueTypeVal>            y_SecondDirectionFirstNestingIndex_LinearValueType_0
%type <LinearValueTypeVal>            y_SecondDirectionNestingIndex_LinearValueType_0
%type <LinearValueTypeVal>            y_SecondDirectionSecondNestingIndex_LinearValueType_0
%type <QIFReferenceFullTypeVal>       y_SecondFeatureZone_QIFReferenceFullType_0
%type <QIFReferenceFullTypeVal>       y_SecondFeature_QIFReferenceFullType
%type <FractionTypeVal>               y_SecondLegLength_FractionType
%type <Point2dSimpleTypeVal>          y_SecondLineOrigin_Point2dSimpleType
%type <LinearValueTypeVal>            y_SecondNestingIndex_LinearValueType_0
%type <SecondaryAlignmentOperationTypeVal> y_SecondaryAlignmentOperationType
%type <SecondaryAlignmentOperationTypeVal> y_SecondaryAlignment_SecondaryAlignmentOperationType
%type <UnitVectorTypeVal>             y_SecondaryAxis_UnitVectorType
%type <UnitVectorTypeVal>             y_SecondaryAxis_UnitVectorType_0
%type <AlignmentFeatureTypeVal>       y_SecondaryEntity_AlignmentFeatureType
%type <LinearValueTypeVal>            y_SecondaryRoughnessParameter_LinearValueType_0
%type <SectionAreaTypeVal>            y_SectionAreaType
%type <SectionAreasTypeVal>           y_SectionAreasType
%type <SectionEdgesTypeVal>           y_SectionEdgesType
%type <SectionGroupTypeVal>           y_SectionGroupType
%type <SectionGroupTypeVal>           y_SectionGroup_SectionGroupType
%type <SectionGroupsTypeVal>          y_SectionGroupsType
%type <SectionGroupsTypeVal>          y_SectionGroups_SectionGroupsType_0
%type <SectionLoopsTypeVal>           y_SectionLoopsType
%type <SectionModifierEnumTypeVal>    y_SectionModifierEnumType
%type <SectionModifierEnumTypeVal>    y_SectionModifier_SectionModifierEnumType_0
%type <SectionPathTypeVal>            y_SectionPathType
%type <SectionPathsTypeVal>           y_SectionPathsType
%type <XmlUnsignedIntVal>             y_SectionPlane_XmlUnsignedInt
%type <ZoneSectionPlaneTypeVal>       y_SectionPlane_ZoneSectionPlaneType
%type <ZoneSectionPlanesTypeVal>      y_SectionPlanes_ZoneSectionPlanesType
%type <XmlStringVal>                  y_Section_XmlString_0
%type <SecurityClassificationEnumTypeVal> y_SecurityClassificationEnumType
%type <SecurityClassificationEnumTypeVal> y_SecurityClassificationEnum_SecurityClassificationEnumType
%type <SecurityClassificationTypeVal> y_SecurityClassificationType
%type <SecurityClassificationTypeChoicePairVal> y_SecurityClassificationTypeChoicePair
%type <SecurityClassificationTypeVal> y_SecurityClassification_SecurityClassificationType_0
%type <Segment12CoreTypeVal>          y_Segment12CoreType
%type <Segment12CoreTypeVal>          y_Segment12Core_Segment12CoreType
%type <Segment12TypeVal>              y_Segment12Type
%type <Segment12TypeVal>              y_Segment12_Segment12Type
%type <Segment13CoreTypeVal>          y_Segment13CoreType
%type <Segment13CoreTypeVal>          y_Segment13Core_Segment13CoreType
%type <Segment13TypeVal>              y_Segment13Type
%type <Segment13TypeVal>              y_Segment13_Segment13Type
%type <LineSegment2dTypeVal>          y_Segment1_LineSegment2dType
%type <LineSegment2dTypeVal>          y_Segment2_LineSegment2dType
%type <XmlDecimalVal>                 y_Sensitivity_XmlDecimal_0
%type <QIFReferenceTypeVal>           y_SensorId_QIFReferenceType
%type <QIFReferenceTypeVal>           y_SensorId_QIFReferenceType_0
%type <ArrayReferenceTypeVal>         y_SensorIds_ArrayReferenceType_0
%type <ListQIFReferenceTypeVal>       y_SensorIds_ListQIFReferenceType
%type <XmlBooleanVal>                 y_SeparateZone_XmlBoolean_0
%type <NaturalTypeVal>                y_SequenceNumber_NaturalType
%type <NaturalTypeVal>                y_SequenceNumber_NaturalType_0
%type <XmlPositiveIntegerVal>         y_SequenceNumber_XmlPositiveInteger
%type <SequencedBaseFeatureTypeVal>   y_SequencedBaseFeatureType
%type <SequencedDatumT_1021_TypeVal>  y_SequencedDatumT_1021_SequencedDatumT_1021_Type
%type <SequencedDatumT_1021_TypeVal>  y_SequencedDatumT_1021_Type
%type <SequencedDatumT_1021_TypeChoicePairVal> y_SequencedDatumT_1021_TypeChoicePair
%type <SequencedDatumTypeVal>         y_SequencedDatumType
%type <XmlStringVal>                  y_SerialNumber_XmlString
%type <XmlStringVal>                  y_SerialNumber_XmlString_0
%type <SetFeatureTypeVal>             y_SetFeatureType
%type <SetFeatureTypeVal>             y_Set_SetFeatureType
%type <ShapeClassEnumTypeVal>         y_ShapeClassEnumType
%type <ShapeClassEnumTypeVal>         y_ShapeClassEnum_ShapeClassEnumType
%type <ShapeClassIsTypeVal>           y_ShapeClassIsType
%type <ShapeClassIsTypeVal>           y_ShapeClassIs_ShapeClassIsType
%type <ShapeClassTypeVal>             y_ShapeClassType
%type <ShapeClassTypeChoicePairVal>   y_ShapeClassTypeChoicePair
%type <XmlStringVal>                  y_SheetNumber_XmlString_0
%type <ArrayReferenceTypeVal>         y_ShellIds_ArrayReferenceType_0
%type <ShellSetTypeVal>               y_ShellSetType
%type <ShellSetTypeVal>               y_ShellSet_ShellSetType
%type <ShellSetTypeVal>               y_ShellSet_ShellSetType_0
%type <ShellTypeVal>                  y_ShellType
%type <ShellTypeVal>                  y_Shell_ShellType
%type <XmlStringVal>                  y_Shift_XmlString_0
%type <XmlTokenVal>                   y_Shift_XmlToken_0
%type <UserDefinedUnitValueTypeVal>   y_ShockTolerance_UserDefinedUnitValueType_0
%type <WeldGrooveOneSideParametersTypeVal> y_SideParameters_WeldGrooveOneSideParametersType_0
%type <WeldOneSideParametersExtendSizeTypeVal> y_SideParameters_WeldOneSideParametersExtendSizeType_0
%type <WeldOneSideParametersExtendTypeVal> y_SideParameters_WeldOneSideParametersExtendType_0
%type <WeldPlugOneSideParametersTypeVal> y_SideParameters_WeldPlugOneSideParametersType_0
%type <WeldSpotOneSideParametersTypeVal> y_SideParameters_WeldSpotOneSideParametersType_0
%type <SignOffsTypeVal>               y_SignOffsType
%type <SignOffsTypeVal>               y_SignOffs_SignOffsType_0
%type <XmlBooleanVal>                 y_SignaturePresent_XmlBoolean_0
%type <XmlStringVal>                  y_Signature_XmlString_0
%type <SignificantDimensionEnumTypeVal> y_SignificanceModifier_SignificantDimensionEnumType_0
%type <SignificantDimensionEnumTypeVal> y_SignificantDimensionEnumType
%type <DatumTypeVal>                  y_SimpleDatum_DatumType
%type <SimpleStudyPlanTypeVal>        y_SimpleStudyPlanType
%type <SimpleStudyPlanTypeVal>        y_SimpleStudyPlan_SimpleStudyPlanType
%type <SimpleStudyResultsTypeVal>     y_SimpleStudyResultsType
%type <SimpleStudyResultsTypeVal>     y_SimpleStudyResults_SimpleStudyResultsType
%type <SimpleTactileProbeSensorTypeVal> y_SimpleTactileProbeSensorType
%type <SimpleTactileProbeSensorTypeVal> y_SimpleTactileProbeSensor_SimpleTactileProbeSensorType
%type <SimplifiedRepresentationFormEnumTypeVal> y_SimplifiedRepresentationFormEnumType
%type <SimplifiedRepresentationGroupTypeVal> y_SimplifiedRepresentationGroupType
%type <SimplifiedRepresentationGroupTypeVal> y_SimplifiedRepresentationGroup_SimplifiedRepresentationGroupType
%type <SimplifiedRepresentationGroupsTypeVal> y_SimplifiedRepresentationGroupsType
%type <SimplifiedRepresentationGroupsTypeVal> y_SimplifiedRepresentationGroups_SimplifiedRepresentationGroupsType_0
%type <QIFReferenceActiveTypeVal>     y_SimplifiedRepresentationId_QIFReferenceActiveType_0
%type <SimplifiedRepresentationSetTypeVal> y_SimplifiedRepresentationSetType
%type <SimplifiedRepresentationSetTypeVal> y_SimplifiedRepresentationSet_SimplifiedRepresentationSetType_0
%type <SimplifiedRepresentationTypeVal> y_SimplifiedRepresentationType
%type <SimplifiedRepresentationTypeVal> y_SimplifiedRepresentation_SimplifiedRepresentationType
%type <SimultaneousRequirementEnumTypeVal> y_SimultaneousRequirementEnumType
%type <SimultaneousRequirementGroupTypeVal> y_SimultaneousRequirementGroupType
%type <SimultaneousRequirementGroupTypeVal> y_SimultaneousRequirementGroup_SimultaneousRequirementGroupType
%type <SimultaneousRequirementGroupsTypeVal> y_SimultaneousRequirementGroupsType
%type <SimultaneousRequirementGroupsTypeVal> y_SimultaneousRequirementGroups_SimultaneousRequirementGroupsType_0
%type <SineBarTypeVal>                y_SineBarType
%type <SineBarTypeVal>                y_SineBar_SineBarType
%type <SingleLeadThreadSpecificationTypeVal> y_SingleLeadSpecification_SingleLeadThreadSpecificationType
%type <SingleLeadThreadSpecificationTypeVal> y_SingleLeadThreadSpecificationType
%type <SingleNestingIndexFilterSymbolEnumTypeVal> y_SingleNestingIndexFilterSymbolEnumType
%type <SingleNestingIndexFilterTypeVal> y_SingleNestingIndexFilterType
%type <SingleNestingIndexFilterTypeVal> y_SingleNestingIndexFilter_SingleNestingIndexFilterType
%type <XmlBooleanVal>                 y_SingleOpenEnd_XmlBoolean_0
%type <SinglePointArticulationPerformanceTestTypeVal> y_SinglePointArticulationPerformanceTestType
%type <SinglePointArticulationPerformanceTestTypeVal> y_SinglePointArticulationPerformanceTest_SinglePointArticulationPerformanceTestType_0
%type <PointSetReferenceSingleTypeVal> y_SinglePointSetId_PointSetReferenceSingleType
%type <NaturalTypeVal>                y_Single_NaturalType
%type <QIFReferenceTypeVal>           y_SizeCharacteristicDefinitionId_QIFReferenceType_0
%type <CartesianWorkingVolumeTypeVal> y_Size_CartesianWorkingVolumeType_0
%type <FractionTypeVal>               y_Size_FractionType_0
%type <NaturalTypeVal>                y_Size_NaturalType
%type <CriterionIntegerTypeVal>       y_SkewGrouping_CriterionIntegerType
%type <StatsMeasuredDecimalTypeVal>   y_Skew_StatsMeasuredDecimalType
%type <SlotEndEnumTypeVal>            y_SlotEndEnumType
%type <SlotEndEnumTypeVal>            y_SlotEndEnum_SlotEndEnumType
%type <SlotEndTypeVal>                y_SlotEndType
%type <SlotEndTypeChoicePairVal>      y_SlotEndTypeChoicePair
%type <LinearValueTypeVal>            y_SmallEndDistance_LinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_SmallEndDistance_MeasuredLinearValueType_0
%type <SoftwaresTypeVal>              y_SoftwareDefinitions_SoftwaresType_0
%type <QIFReferenceTypeVal>           y_SoftwareId_QIFReferenceType
%type <SoftwareTypeVal>               y_SoftwareType
%type <SoftwareTypeVal>               y_Software_SoftwareType
%type <SoftwaresTypeVal>              y_SoftwaresType
%type <XmlStringVal>                  y_SourceDescription_XmlString_0
%type <XmlStringVal>                  y_SourceOfRequiredness_XmlString_0
%type <XmlBooleanVal>                 y_Spacer_XmlBoolean_0
%type <XmlDoubleVal>                  y_SpecificHeatCapacity_XmlDouble_0
%type <XmlTokenVal>                   y_Specification_XmlToken_0
%type <SpecifiedDecimalTypeVal>       y_SpecifiedDecimalType
%type <MeasuredSpeedValueTypeVal>     y_SpeedAbsoluteLinearity_MeasuredSpeedValueType
%type <SpeedCharacteri_1068_TypeVal>  y_SpeedCharacteri_1068_SpeedCharacteri_1068_Type
%type <SpeedCharacteri_1068_TypeVal>  y_SpeedCharacteri_1068_Type
%type <SpeedCharacteri_1068_TypeChoicePairVal> y_SpeedCharacteri_1068_TypeChoicePair
%type <CriterionSpeedTypeVal>         y_SpeedCriterion_CriterionSpeedType_0
%type <SpeedValueTypeVal>             y_SpeedLimit_SpeedValueType_0
%type <MeasuredSpeedValueTypeVal>     y_SpeedMeasurement_MeasuredSpeedValueType_0
%type <SummariesStatisticsSpeedTypeVal> y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
%type <SummaryStatisticsSpeedTypeVal> y_SpeedStatsSummary_SummaryStatisticsSpeedType
%type <SpeedToleranceT_1022_TypeVal>  y_SpeedToleranceT_1022_SpeedToleranceT_1022_Type
%type <SpeedToleranceT_1022_TypeVal>  y_SpeedToleranceT_1022_Type
%type <SpeedToleranceT_1022_TypeChoicePairVal> y_SpeedToleranceT_1022_TypeChoicePair
%type <SpeedToleranceT_1038_TypeVal>  y_SpeedToleranceT_1038_SpeedToleranceT_1038_Type
%type <SpeedToleranceT_1038_TypeVal>  y_SpeedToleranceT_1038_Type
%type <SpeedToleranceTypeVal>         y_SpeedToleranceType
%type <SpeedUnitTypeVal>              y_SpeedUnitType
%type <SpeedUnitTypeVal>              y_SpeedUnit_SpeedUnitType
%type <SpeedUnitTypeVal>              y_SpeedUnit_SpeedUnitType_0
%type <SpeedValueTypeVal>             y_SpeedValueType
%type <Sphere23CoreTypeVal>           y_Sphere23CoreType
%type <Sphere23CoreTypeVal>           y_Sphere23Core_Sphere23CoreType
%type <Sphere23TypeVal>               y_Sphere23Type
%type <Sphere23TypeVal>               y_Sphere23_Sphere23Type
%type <SphereBestFitTypeVal>          y_SphereBestFitType
%type <SphereCastTypeVal>             y_SphereCastType
%type <SphereCheckedFeatureTypeVal>   y_SphereCheckedFeatureType
%type <SphereCheckedTypeVal>          y_SphereCheckedType
%type <SphereCheckedTypeChoicePairVal> y_SphereCheckedTypeChoicePair
%type <SphereConstructionMethodTypeVal> y_SphereConstructionMethodType
%type <SphereConstructionMethodTypeChoicePairVal> y_SphereConstructionMethodTypeChoicePair
%type <SphereCopyTypeVal>             y_SphereCopyType
%type <SphereFeatureDefinitionTypeVal> y_SphereFeatureDefinitionType
%type <SphereFeatureDefinitionTypeVal> y_SphereFeatureDefinition_SphereFeatureDefinitionType
%type <SphereFeatureItemTypeVal>      y_SphereFeatureItemType
%type <SphereFeatureItemTypeVal>      y_SphereFeatureItem_SphereFeatureItemType
%type <SphereFeatureMeasurementTypeVal> y_SphereFeatureMeasurementType
%type <SphereFeatureMeasurementTypeVal> y_SphereFeatureMeasurement_SphereFeatureMeasurementType
%type <SphereFeatureNominalTypeVal>   y_SphereFeatureNominalType
%type <SphereFeatureNominalTypeVal>   y_SphereFeatureNominal_SphereFeatureNominalType
%type <SphereFromScanTypeVal>         y_SphereFromScanType
%type <SphereMeasurementDeterminationTypeVal> y_SphereMeasurementDeterminationType
%type <SphereMeasurementDeterminationTypeChoicePairVal> y_SphereMeasurementDeterminationTypeChoicePair
%type <SpherePointSamplingStrategyEnumTypeVal> y_SpherePointSamplingStrategyEnumType
%type <SpherePointSamplingStrategyTypeVal> y_SpherePointSamplingStrategyType
%type <SpherePointSamplingStrategyTypeChoicePairVal> y_SpherePointSamplingStrategyTypeChoicePair
%type <SphereRecompTypeVal>           y_SphereRecompType
%type <SphereTransformTypeVal>        y_SphereTransformType
%type <SphereTypeVal>                 y_SphereType
%type <SphereTypeVal>                 y_Sphere_SphereType
%type <SphericalDiameterCharacteristicDefinitionTypeVal> y_SphericalDiameterCharacteristicDefinitionType
%type <SphericalDiameterCharacteristicDefinitionTypeVal> y_SphericalDiameterCharacteristicDefinition_SphericalDiameterCharacteristicDefinitionType
%type <SphericalDiameterCharacteristicItemTypeVal> y_SphericalDiameterCharacteristicItemType
%type <SphericalDiameterCharacteristicItemTypeVal> y_SphericalDiameterCharacteristicItem_SphericalDiameterCharacteristicItemType
%type <SphericalDiameterCharacteristicMeasurementTypeVal> y_SphericalDiameterCharacteristicMeasurementType
%type <SphericalDiameterCharacteristicMeasurementTypeVal> y_SphericalDiameterCharacteristicMeasurement_SphericalDiameterCharacteristicMeasurementType
%type <SphericalDiameterCharacteristicNominalTypeVal> y_SphericalDiameterCharacteristicNominalType
%type <SphericalDiameterCharacteristicNominalTypeVal> y_SphericalDiameterCharacteristicNominal_SphericalDiameterCharacteristicNominalType
%type <SphericalDiameterCharacteristicStatsEvalTypeVal> y_SphericalDiameterCharacteristicStatsEvalType
%type <SphericalDiameterCharacteristicStatsEvalTypeVal> y_SphericalDiameterCharacteristicStats_SphericalDiameterCharacteristicStatsEvalType
%type <SphericalRadiusCharacteristicDefinitionTypeVal> y_SphericalRadiusCharacteristicDefinitionType
%type <SphericalRadiusCharacteristicDefinitionTypeVal> y_SphericalRadiusCharacteristicDefinition_SphericalRadiusCharacteristicDefinitionType
%type <SphericalRadiusCharacteristicItemTypeVal> y_SphericalRadiusCharacteristicItemType
%type <SphericalRadiusCharacteristicItemTypeVal> y_SphericalRadiusCharacteristicItem_SphericalRadiusCharacteristicItemType
%type <SphericalRadiusCharacteristicMeasurementTypeVal> y_SphericalRadiusCharacteristicMeasurementType
%type <SphericalRadiusCharacteristicMeasurementTypeVal> y_SphericalRadiusCharacteristicMeasurement_SphericalRadiusCharacteristicMeasurementType
%type <SphericalRadiusCharacteristicNominalTypeVal> y_SphericalRadiusCharacteristicNominalType
%type <SphericalRadiusCharacteristicNominalTypeVal> y_SphericalRadiusCharacteristicNominal_SphericalRadiusCharacteristicNominalType
%type <SphericalRadiusCharacteristicStatsEvalTypeVal> y_SphericalRadiusCharacteristicStatsEvalType
%type <SphericalRadiusCharacteristicStatsEvalTypeVal> y_SphericalRadiusCharacteristicStats_SphericalRadiusCharacteristicStatsEvalType
%type <SphericalResolu_1242_TypeVal>  y_SphericalResolu_1242_SphericalResolu_1242_Type
%type <SphericalResolu_1242_TypeVal>  y_SphericalResolu_1242_Type
%type <SphericalResolu_1242_TypeChoicePairVal> y_SphericalResolu_1242_TypeChoicePair
%type <SphericalResolu_1245_TypeVal>  y_SphericalResolu_1245_SphericalResolu_1245_Type
%type <SphericalResolu_1245_TypeVal>  y_SphericalResolu_1245_Type
%type <SphericalResolutionTypeVal>    y_SphericalResolutionType
%type <SphericalResolutionTypeVal>    y_SphericalResolution_SphericalResolutionType
%type <SphericalSegmentBestFitTypeVal> y_SphericalSegmentBestFitType
%type <SphericalSegmentCastTypeVal>   y_SphericalSegmentCastType
%type <SphericalSegmentCheckedFeatureTypeVal> y_SphericalSegmentCheckedFeatureType
%type <SphericalSegmentCheckedTypeVal> y_SphericalSegmentCheckedType
%type <SphericalSegmentCheckedTypeChoicePairVal> y_SphericalSegmentCheckedTypeChoicePair
%type <SphericalSegmentConstructionMethodTypeVal> y_SphericalSegmentConstructionMethodType
%type <SphericalSegmentConstructionMethodTypeChoicePairVal> y_SphericalSegmentConstructionMethodTypeChoicePair
%type <SphericalSegmentCopyTypeVal>   y_SphericalSegmentCopyType
%type <SphericalSegmentFeatureDefinitionTypeVal> y_SphericalSegmentFeatureDefinitionType
%type <SphericalSegmentFeatureDefinitionTypeVal> y_SphericalSegmentFeatureDefinition_SphericalSegmentFeatureDefinitionType
%type <SphericalSegmentFeatureItemTypeVal> y_SphericalSegmentFeatureItemType
%type <SphericalSegmentFeatureItemTypeVal> y_SphericalSegmentFeatureItem_SphericalSegmentFeatureItemType
%type <SphericalSegmentFeatureMeasurementTypeVal> y_SphericalSegmentFeatureMeasurementType
%type <SphericalSegmentFeatureMeasurementTypeVal> y_SphericalSegmentFeatureMeasurement_SphericalSegmentFeatureMeasurementType
%type <SphericalSegmentFeatureNominalTypeVal> y_SphericalSegmentFeatureNominalType
%type <SphericalSegmentFeatureNominalTypeVal> y_SphericalSegmentFeatureNominal_SphericalSegmentFeatureNominalType
%type <SphericalSegmentMeasurementDeterminationTypeVal> y_SphericalSegmentMeasurementDeterminationType
%type <SphericalSegmentMeasurementDeterminationTypeChoicePairVal> y_SphericalSegmentMeasurementDeterminationTypeChoicePair
%type <SphericalSegmentPointSamplingStrategyTypeVal> y_SphericalSegmentPointSamplingStrategyType
%type <SphericalSegmentPointSamplingStrategyTypeChoicePairVal> y_SphericalSegmentPointSamplingStrategyTypeChoicePair
%type <SphericalSegmentRecompTypeVal> y_SphericalSegmentRecompType
%type <SphericalSegmentTransformTypeVal> y_SphericalSegmentTransformType
%type <SphericalWorkingVolumeTypeVal> y_SphericalWorkingVolumeType
%type <SphericalWorkingVolumeTypeVal> y_SphericalWorkingVolume_SphericalWorkingVolumeType
%type <ConcentricitySphericalZoneTypeVal> y_SphericalZone_ConcentricitySphericalZoneType
%type <PositionSphericalZoneTypeVal>  y_SphericalZone_PositionSphericalZoneType
%type <SphericityChara_1069_TypeVal>  y_SphericityChara_1069_SphericityChara_1069_Type_0
%type <SphericityChara_1069_TypeVal>  y_SphericityChara_1069_Type
%type <SphericityCharacteristicDefinitionTypeVal> y_SphericityCharacteristicDefinitionType
%type <SphericityCharacteristicDefinitionTypeVal> y_SphericityCharacteristicDefinition_SphericityCharacteristicDefinitionType
%type <SphericityCharacteristicItemTypeVal> y_SphericityCharacteristicItemType
%type <SphericityCharacteristicItemTypeVal> y_SphericityCharacteristicItem_SphericityCharacteristicItemType
%type <SphericityCharacteristicMeasurementTypeVal> y_SphericityCharacteristicMeasurementType
%type <SphericityCharacteristicMeasurementTypeVal> y_SphericityCharacteristicMeasurement_SphericityCharacteristicMeasurementType
%type <SphericityCharacteristicNominalTypeVal> y_SphericityCharacteristicNominalType
%type <SphericityCharacteristicNominalTypeVal> y_SphericityCharacteristicNominal_SphericityCharacteristicNominalType
%type <SphericityCharacteristicStatsEvalTypeVal> y_SphericityCharacteristicStatsEvalType
%type <SphericityCharacteristicStatsEvalTypeVal> y_SphericityCharacteristicStats_SphericityCharacteristicStatsEvalType
%type <Spline12CoreTypeVal>           y_Spline12CoreType
%type <Spline12CoreTypeVal>           y_Spline12Core_Spline12CoreType
%type <Spline12TypeVal>               y_Spline12Type
%type <Spline12TypeVal>               y_Spline12_Spline12Type
%type <Spline13CoreTypeVal>           y_Spline13CoreType
%type <Spline13CoreTypeVal>           y_Spline13Core_Spline13CoreType
%type <Spline13TypeVal>               y_Spline13Type
%type <Spline13TypeVal>               y_Spline13_Spline13Type
%type <Spline23CoreTypeVal>           y_Spline23CoreType
%type <Spline23CoreTypeVal>           y_Spline23Core_Spline23CoreType
%type <Spline23TypeVal>               y_Spline23Type
%type <Spline23TypeVal>               y_Spline23_Spline23Type
%type <LinearValueTypeVal>            y_SpotDiameter_LinearValueType_0
%type <SquareCharacteristicDefinitionTypeVal> y_SquareCharacteristicDefinitionType
%type <SquareCharacteristicDefinitionTypeVal> y_SquareCharacteristicDefinition_SquareCharacteristicDefinitionType
%type <SquareCharacteristicItemTypeVal> y_SquareCharacteristicItemType
%type <SquareCharacteristicItemTypeVal> y_SquareCharacteristicItem_SquareCharacteristicItemType
%type <SquareCharacteristicMeasurementTypeVal> y_SquareCharacteristicMeasurementType
%type <SquareCharacteristicMeasurementTypeVal> y_SquareCharacteristicMeasurement_SquareCharacteristicMeasurementType
%type <SquareCharacteristicNominalTypeVal> y_SquareCharacteristicNominalType
%type <SquareCharacteristicNominalTypeVal> y_SquareCharacteristicNominal_SquareCharacteristicNominalType
%type <SquareCharacteristicStatsEvalTypeVal> y_SquareCharacteristicStatsEvalType
%type <SquareCharacteristicStatsEvalTypeVal> y_SquareCharacteristicStats_SquareCharacteristicStatsEvalType
%type <StabilityStudyPlanTypeVal>     y_StabilityStudyPlanType
%type <StabilityStudyPlanTypeVal>     y_StabilityStudyPlan_StabilityStudyPlanType
%type <StabilityStudyResultsTypeVal>  y_StabilityStudyResultsType
%type <StabilityStudyResultsTypeVal>  y_StabilityStudyResults_StabilityStudyResultsType
%type <UserDefinedUnitValueTypeVal>   y_StadiaBaseConstant_UserDefinedUnitValueType_0
%type <UserDefinedUnitValueTypeVal>   y_StadiaRateConstant_UserDefinedUnitValueType_0
%type <XmlStringVal>                  y_StageMaterial_XmlString_0
%type <AngularValueTypeVal>           y_StageSwivelingAngle_AngularValueType_0
%type <XmlBooleanVal>                 y_Staggered_XmlBoolean_0
%type <LinearValueTypeVal>            y_StandOffDistance_LinearValueType_0
%type <StatsMeasuredDecimalTypeVal>   y_StandardDeviation_StatsMeasuredDecimalType
%type <XmlDecimalVal>                 y_StandardDeviation_XmlDecimal
%type <QIFReferenceTypeVal>           y_StandardId_QIFReferenceType
%type <XmlStringVal>                  y_StandardName_XmlString_0
%type <StandardTypeVal>               y_StandardType
%type <StandardTypeVal>               y_Standard_StandardType
%type <StandardsTypeVal>              y_StandardsDefinitions_StandardsType_0
%type <StandardsOrganizationEnumTypeVal> y_StandardsOrganizationEnumType
%type <StandardsOrganizationEnumTypeVal> y_StandardsOrganizationEnum_StandardsOrganizationEnumType
%type <StandardsOrganizationTypeVal>  y_StandardsOrganizationType
%type <StandardsOrganizationTypeChoicePairVal> y_StandardsOrganizationTypeChoicePair
%type <StandardsTypeVal>              y_StandardsType
%type <UnitVectorTypeVal>             y_StartDirection_UnitVectorType_0
%type <MeasuredPointTypeVal>          y_StartPoint_MeasuredPointType
%type <Point2dSimpleTypeVal>          y_StartPoint_Point2dSimpleType
%type <PointSimpleTypeVal>            y_StartPoint_PointSimpleType
%type <PointTypeVal>                  y_StartPoint_PointType
%type <NaturalTypeVal>                y_Start_NaturalType
%type <XmlBooleanVal>                 y_StatisticalCharacteristic_XmlBoolean_0
%type <StatisticalStud_1207_TypeVal>  y_StatisticalStud_1207_StatisticalStud_1207_Type_0
%type <StatisticalStud_1207_TypeVal>  y_StatisticalStud_1207_Type
%type <StatisticalStud_1208_TypeVal>  y_StatisticalStud_1208_StatisticalStud_1208_Type_0
%type <StatisticalStud_1208_TypeVal>  y_StatisticalStud_1208_Type
%type <StatisticalStud_1209_TypeVal>  y_StatisticalStud_1209_StatisticalStud_1209_Type_0
%type <StatisticalStud_1209_TypeVal>  y_StatisticalStud_1209_Type
%type <StatisticalStud_1209_TypeChoicePairVal> y_StatisticalStud_1209_TypeChoicePair
%type <StatisticalStud_1210_TypeVal>  y_StatisticalStud_1210_StatisticalStud_1210_Type_0
%type <StatisticalStud_1210_TypeVal>  y_StatisticalStud_1210_Type
%type <StatisticalStud_1210_TypeChoicePairVal> y_StatisticalStud_1210_TypeChoicePair
%type <StatisticalStud_1211_TypeVal>  y_StatisticalStud_1211_StatisticalStud_1211_Type_0
%type <StatisticalStud_1211_TypeVal>  y_StatisticalStud_1211_Type
%type <StatisticalStud_1211_TypeChoicePairVal> y_StatisticalStud_1211_TypeChoicePair
%type <XmlUnsignedIntVal>             y_StatisticalStudiesResultsCount_XmlUnsignedInt_0
%type <StatisticalStudiesResultsTypeVal> y_StatisticalStudiesResultsType
%type <StatisticalStudiesResultsTypeVal> y_StatisticalStudiesResults_StatisticalStudiesResultsType_0
%type <StatisticalStudyPlanBaseTypeVal> y_StatisticalStudyPlan_substituteType
%type <XmlUnsignedIntVal>             y_StatisticalStudyPlansCount_XmlUnsignedInt_0
%type <StatisticalStudyPlansTypeVal>  y_StatisticalStudyPlansType
%type <StatisticalStudyPlansTypeVal>  y_StatisticalStudyPlans_StatisticalStudyPlansType_0
%type <StatisticalStudyResultsBaseTypeVal> y_StatisticalStudyResults_substituteType
%type <StatisticsTypeVal>             y_StatisticsType
%type <StatisticsTypeVal>             y_Statistics_StatisticsType_0
%type <StatsAngularTypeVal>           y_StatsAngularType
%type <StatsAreaTypeVal>              y_StatsAreaType
%type <StatsArrayIdTypeVal>           y_StatsArrayIdType
%type <StatsEvalStatusEnumTypeVal>    y_StatsEvalStatusEnumType
%type <StatsEvalStatusEnumTypeVal>    y_StatsEvalStatusEnum_StatsEvalStatusEnumType
%type <StatsEvalStatusTypeVal>        y_StatsEvalStatusType
%type <StatsEvalStatusTypeChoicePairVal> y_StatsEvalStatusTypeChoicePair
%type <StatsForceTypeVal>             y_StatsForceType
%type <StatsLinearTypeVal>            y_StatsLinearType
%type <StatsMassTypeVal>              y_StatsMassType
%type <StatsMeasuredDecimalTypeVal>   y_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalWithReferenceTypeVal> y_StatsMeasuredDecimalWithReferenceType
%type <StatsNonNegativeIntegerTypeVal> y_StatsNonNegativeIntegerType
%type <StatsNonNegativeIntegerWithReferencesTypeVal> y_StatsNonNegativeIntegerWithReferencesType
%type <StatsPassFailTypeVal>          y_StatsPassFailType
%type <StatsPressureTypeVal>          y_StatsPressureType
%type <StatsSpeedTypeVal>             y_StatsSpeedType
%type <SummariesStatisticsTypeVal>    y_StatsSummaries_SummariesStatisticsType_0
%type <SummaryStatisticsTypeVal>      y_StatsSummary_SummaryStatisticsType
%type <StatsTemperatureTypeVal>       y_StatsTemperatureType
%type <StatsTimeTypeVal>              y_StatsTimeType
%type <StatsUserDefinedUnitTypeVal>   y_StatsUserDefinedUnitType
%type <StatsValuesEnumTypeVal>        y_StatsValuesEnumType
%type <ListAccumulatedStatsValuesTypeVal> y_StatsValuesPerChar_ListAccumulatedStatsValuesType
%type <ListSubgroupStatsValuesTypeVal> y_StatsValuesPerSubgroup_ListSubgroupStatsValuesType
%type <SummaryStatsValuesListTypeVal> y_StatsValuesSummarys_SummaryStatsValuesListType
%type <StatsValuesTypeVal>            y_StatsValuesType
%type <StatsWithRefere_1006_TypeVal>  y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
%type <StatsWithRefere_1006_TypeVal>  y_StatsWithRefere_1006_Type
%type <StatsWithRefere_1006_TypeChoicePairVal> y_StatsWithRefere_1006_TypeChoicePair
%type <StatsWithTolAngularTypeVal>    y_StatsWithTolAngularType
%type <StatsWithTolAreaTypeVal>       y_StatsWithTolAreaType
%type <StatsWithTolForceTypeVal>      y_StatsWithTolForceType
%type <StatsWithTolLinearTypeVal>     y_StatsWithTolLinearType
%type <StatsWithTolMassTypeVal>       y_StatsWithTolMassType
%type <StatsWithTolPressureTypeVal>   y_StatsWithTolPressureType
%type <StatsWithTolSpeedTypeVal>      y_StatsWithTolSpeedType
%type <StatsWithTolTemperatureTypeVal> y_StatsWithTolTemperatureType
%type <StatsWithTolTimeTypeVal>       y_StatsWithTolTimeType
%type <StatsWithTolUserDefinedUnitTypeVal> y_StatsWithTolUserDefinedUnitType
%type <ListAccumulatedStatsValuesListTypeVal> y_Stats_ListAccumulatedStatsValuesListType
%type <ListSubgroupStatsValuesListTypeVal> y_Stats_ListSubgroupStatsValuesListType
%type <ListSummaryStatsValuesListTypeVal> y_Stats_ListSummaryStatsValuesListType
%type <CharacteristicStatusTypeVal>   y_Status_CharacteristicStatusType
%type <InspectionStatusTypeVal>       y_Status_InspectionStatusType
%type <StatsEvalStatusTypeVal>        y_Status_StatsEvalStatusType
%type <LinearValueTypeVal>            y_StemDiameter_LinearValueType_0
%type <XmlStringVal>                  y_StemMaterial_XmlString_0
%type <StepWithPredecessorsTypeVal>   y_StepWithPredecessorsType
%type <StepWithPredecessorsTypeVal>   y_StepWithPredecessors_StepWithPredecessorsType
%type <NumberedPlanElementTypeVal>    y_Step_NumberedPlanElementType
%type <StepsWithPredecessorsTypeVal>  y_StepsWithPredecessorsType
%type <StepsWithPredecessorsTypeVal>  y_StepsWithPredecessors_StepsWithPredecessorsType
%type <NumberedPlanElementsTypeVal>   y_Steps_NumberedPlanElementsType
%type <UnnumberedPlanElementsTypeVal> y_Steps_UnnumberedPlanElementsType
%type <StiffnessTypeVal>              y_StiffnessType
%type <NaturalTypeVal>                y_Stop_NaturalType
%type <StraightnessCha_1070_TypeVal>  y_StraightnessCha_1070_StraightnessCha_1070_Type
%type <StraightnessCha_1070_TypeVal>  y_StraightnessCha_1070_Type
%type <StraightnessCha_1070_TypeChoicePairVal> y_StraightnessCha_1070_TypeChoicePair
%type <StraightnessCha_1087_TypeVal>  y_StraightnessCha_1087_StraightnessCha_1087_Type
%type <StraightnessCha_1087_TypeVal>  y_StraightnessCha_1087_Type
%type <StraightnessCha_1088_TypeVal>  y_StraightnessCha_1088_StraightnessCha_1088_Type
%type <StraightnessCha_1088_TypeVal>  y_StraightnessCha_1088_Type
%type <StraightnessCharacteristicDefinitionTypeVal> y_StraightnessCharacteristicDefinitionType
%type <StraightnessCharacteristicDefinitionTypeVal> y_StraightnessCharacteristicDefinition_StraightnessCharacteristicDefinitionType
%type <StraightnessCharacteristicItemTypeVal> y_StraightnessCharacteristicItemType
%type <StraightnessCharacteristicItemTypeVal> y_StraightnessCharacteristicItem_StraightnessCharacteristicItemType
%type <StraightnessCharacteristicMeasurementTypeVal> y_StraightnessCharacteristicMeasurementType
%type <StraightnessCharacteristicMeasurementTypeVal> y_StraightnessCharacteristicMeasurement_StraightnessCharacteristicMeasurementType
%type <StraightnessCharacteristicNominalTypeVal> y_StraightnessCharacteristicNominalType
%type <StraightnessCharacteristicNominalTypeVal> y_StraightnessCharacteristicNominal_StraightnessCharacteristicNominalType
%type <StraightnessCharacteristicStatsEvalTypeVal> y_StraightnessCharacteristicStatsEvalType
%type <StraightnessCharacteristicStatsEvalTypeVal> y_StraightnessCharacteristicStats_StraightnessCharacteristicStatsEvalType
%type <StraightnessDiametricalZoneTypeVal> y_StraightnessDiametricalZoneType
%type <StraightnessNonDiametricalZoneTypeVal> y_StraightnessNonDiametricalZoneType
%type <StraightnessZoneShapeTypeVal>  y_StraightnessZoneShapeType
%type <StraightnessZoneShapeTypeChoicePairVal> y_StraightnessZoneShapeTypeChoicePair
%type <CriterionOutOfTypeVal>         y_Stratification_CriterionOutOfType
%type <XmlTokenVal>                   y_StreetNumber_XmlToken_0
%type <XmlTokenVal>                   y_Street_XmlToken_0
%type <XmlStringVal>                  y_StringValue_XmlString
%type <StringValuesTypeVal>           y_StringValuesType
%type <StructuredLightSensorTypeVal>  y_StructuredLightSensorType
%type <StructuredLightSensorTypeVal>  y_StructuredLightSensor_StructuredLightSensorType
%type <QIFReferenceTypeVal>           y_StudyId_QIFReferenceType_0
%type <QIFReferenceTypeVal>           y_StudyIssueId_QIFReferenceType_0
%type <StudyIssueTypeVal>             y_StudyIssueType
%type <StudyIssueType_1136_TypeVal>   y_StudyIssueType_1136_StudyIssueType_1136_Type_0
%type <StudyIssueType_1136_TypeVal>   y_StudyIssueType_1136_Type
%type <StudyIssueType_1136_TypeChoicePairVal> y_StudyIssueType_1136_TypeChoicePair
%type <StudyIssueTypeVal>             y_StudyIssue_StudyIssueType
%type <StudyIssuesTypeVal>            y_StudyIssuesType
%type <StudyIssuesTypeVal>            y_StudyIssues_StudyIssuesType_0
%type <Curve12OrientedTypeVal>        y_SubCurve_Curve12OrientedType
%type <Curve13OrientedTypeVal>        y_SubCurve_Curve13OrientedType
%type <ArraySubCurve12TypeVal>        y_SubCurves_ArraySubCurve12Type
%type <ArraySubCurve13TypeVal>        y_SubCurves_ArraySubCurve13Type
%type <SubgroupDecimalsTypeVal>       y_SubgroupAverages_SubgroupDecimalsType
%type <SubgroupDecimalArrayTypeVal>   y_SubgroupDecimalArrayType
%type <SubgroupDecimalTypeVal>        y_SubgroupDecimalType
%type <SubgroupDecimalTypeVal>        y_SubgroupDecimal_SubgroupDecimalType
%type <SubgroupDecimalsTypeVal>       y_SubgroupDecimalsType
%type <SubgroupDecimalsTypeVal>       y_SubgroupDifferences_SubgroupDecimalsType
%type <SubgroupIntegersTypeVal>       y_SubgroupEffectiveNumbers_SubgroupIntegersType
%type <ArrayReferenceTypeVal>         y_SubgroupIds_ArrayReferenceType
%type <SubgroupIntegerArrayTypeVal>   y_SubgroupIntegerArrayType
%type <SubgroupIntegerTypeVal>        y_SubgroupIntegerType
%type <SubgroupIntegerTypeVal>        y_SubgroupInteger_SubgroupIntegerType
%type <SubgroupIntegersTypeVal>       y_SubgroupIntegersType
%type <SubgroupDecimalsTypeVal>       y_SubgroupMaxima_SubgroupDecimalsType
%type <SubgroupDecimalsTypeVal>       y_SubgroupMinima_SubgroupDecimalsType
%type <SubgroupIntegersTypeVal>       y_SubgroupNumbersOutOfTolerance_SubgroupIntegersType
%type <SubgroupIntegersTypeVal>       y_SubgroupNumbersOverUpperTolerance_SubgroupIntegersType
%type <SubgroupIntegersTypeVal>       y_SubgroupNumbersUnderLowerTolerance_SubgroupIntegersType
%type <SubgroupDecimalsTypeVal>       y_SubgroupRanges_SubgroupDecimalsType
%type <XmlPositiveIntegerVal>         y_SubgroupSize_XmlPositiveInteger
%type <XmlPositiveIntegerVal>         y_SubgroupSize_XmlPositiveInteger_0
%type <SubgroupStatsValuesEnumTypeVal> y_SubgroupStatsValuesEnumType
%type <SubgroupIntegersTypeVal>       y_SubgroupTotalNumbers_SubgroupIntegersType
%type <SubgroupTypeVal>               y_SubgroupType
%type <SubgroupValuesTypeVal>         y_SubgroupValuesType
%type <SubgroupValuesTypeVal>         y_SubgroupValues_SubgroupValuesType
%type <StatsValuesTypeVal>            y_Subgroup_StatsValuesType
%type <SubgroupTypeVal>               y_Subgroup_SubgroupType
%type <SubgroupsTypeVal>              y_SubgroupsType
%type <SubgroupsTypeVal>              y_Subgroups_SubgroupsType
%type <SubstituteFeatu_1023_TypeVal>  y_SubstituteFeatu_1023_SubstituteFeatu_1023_Type
%type <SubstituteFeatu_1023_TypeVal>  y_SubstituteFeatu_1023_Type
%type <SubstituteFeatu_1023_TypeChoicePairVal> y_SubstituteFeatu_1023_TypeChoicePair
%type <SubstituteFeatureAlgorithmEnumTypeVal> y_SubstituteFeatureAlgorithmEnumType
%type <SubstituteFeatureAlgorithmEnumTypeVal> y_SubstituteFeatureAlgorithmEnum_SubstituteFeatureAlgorithmEnumType
%type <QIFReferenceTypeVal>           y_SubstituteFeatureAlgorithmId_QIFReferenceType
%type <SubstituteFeatureAlgorithmTypeVal> y_SubstituteFeatureAlgorithmType
%type <SubstituteFeatureAlgorithmTypeVal> y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
%type <WeldingProcessSuffixEnumTypeVal> y_Suffix_WeldingProcessSuffixEnumType_0
%type <SummariesStatisticsAngularTypeVal> y_SummariesStatisticsAngularType
%type <SummariesStatisticsAreaTypeVal> y_SummariesStatisticsAreaType
%type <SummariesStatisticsForceTypeVal> y_SummariesStatisticsForceType
%type <SummariesStatisticsLinearTypeVal> y_SummariesStatisticsLinearType
%type <SummariesStatisticsMassTypeVal> y_SummariesStatisticsMassType
%type <SummariesStatisticsPressureTypeVal> y_SummariesStatisticsPressureType
%type <SummariesStatisticsSpeedTypeVal> y_SummariesStatisticsSpeedType
%type <SummariesStatisticsTemperatureTypeVal> y_SummariesStatisticsTemperatureType
%type <SummariesStatisticsTimeTypeVal> y_SummariesStatisticsTimeType
%type <SummariesStatisticsTypeVal>    y_SummariesStatisticsType
%type <SummariesStatisticsUserDefinedUnitTypeVal> y_SummariesStatisticsUserDefinedUnitType
%type <StatsMeasuredDecimalTypeVal>   y_SummaryAverage_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_SummaryMaximum_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_SummaryMinimum_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_SummaryRange_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_SummaryStandardDeviation_StatsMeasuredDecimalType
%type <SummaryStatisticsAngularTypeVal> y_SummaryStatisticsAngularType
%type <SummaryStatisticsAreaTypeVal>  y_SummaryStatisticsAreaType
%type <SummaryStatisticsForceTypeVal> y_SummaryStatisticsForceType
%type <SummaryStatisticsLinearTypeVal> y_SummaryStatisticsLinearType
%type <SummaryStatisticsMassTypeVal>  y_SummaryStatisticsMassType
%type <SummaryStatisticsPressureTypeVal> y_SummaryStatisticsPressureType
%type <SummaryStatisticsSpeedTypeVal> y_SummaryStatisticsSpeedType
%type <SummaryStatisticsTemperatureTypeVal> y_SummaryStatisticsTemperatureType
%type <SummaryStatisticsTimeTypeVal>  y_SummaryStatisticsTimeType
%type <SummaryStatisticsTypeVal>      y_SummaryStatisticsType
%type <SummaryStatisticsUserDefinedUnitTypeVal> y_SummaryStatisticsUserDefinedUnitType
%type <StatsWithReferenceBaseTypeVal> y_SummaryStatsValue_substituteType
%type <SummaryStatsValuesEnumTypeVal> y_SummaryStatsValuesEnumType
%type <SummaryStatsValuesListTypeVal> y_SummaryStatsValuesListType
%type <SummaryStatsValuesTypeVal>     y_SummaryStatsValuesType
%type <SummaryStatsValuesTypeVal>     y_SummaryStatsValues_SummaryStatsValuesType
%type <ListSummaryStatsValuesTypeVal> y_SummaryStats_ListSummaryStatsValuesType
%type <SummaryStatsValuesEnumTypeVal> y_SummaryType_SummaryStatsValuesEnumType
%type <WeldSupplementarySymbolEnumTypeVal> y_SupplementarySymbol_WeldSupplementarySymbolEnumType_0
%type <WeldSupplementarySymbolTypeVal> y_SupplementarySymbol_WeldSupplementarySymbolType_0
%type <XmlStringVal>                  y_SupplierCode_XmlString_0
%type <SurfaceCoreTypeVal>            y_SurfaceCoreType
%type <SurfaceCoreBaseTypeVal>        y_SurfaceCore_substituteType
%type <QIFReferenceFullTypeVal>       y_SurfaceFeatureNominalId_QIFReferenceFullType
%type <QIFReferenceFullTypeVal>       y_SurfaceFeatureNominalId_QIFReferenceFullType_0
%type <BaseFeatureTypeVal>            y_SurfaceFeature_BaseFeatureType
%type <XmlStringVal>                  y_SurfaceIlluminationLightSource_XmlString_0
%type <SurfaceMeshSetTypeVal>         y_SurfaceMeshSetType
%type <SurfaceMeshSetTypeVal>         y_SurfaceMeshSet_SurfaceMeshSetType_0
%type <SurfaceOfRevolutionBestFitTypeVal> y_SurfaceOfRevolutionBestFitType
%type <SurfaceOfRevolutionCastTypeVal> y_SurfaceOfRevolutionCastType
%type <SurfaceOfRevolutionCheckedFeatureTypeVal> y_SurfaceOfRevolutionCheckedFeatureType
%type <SurfaceOfRevolutionCheckedTypeVal> y_SurfaceOfRevolutionCheckedType
%type <SurfaceOfRevolutionCheckedTypeChoicePairVal> y_SurfaceOfRevolutionCheckedTypeChoicePair
%type <SurfaceOfRevolutionConstructionMethodTypeVal> y_SurfaceOfRevolutionConstructionMethodType
%type <SurfaceOfRevolutionConstructionMethodTypeChoicePairVal> y_SurfaceOfRevolutionConstructionMethodTypeChoicePair
%type <SurfaceOfRevolutionCopyTypeVal> y_SurfaceOfRevolutionCopyType
%type <SurfaceOfRevolutionFeatureDefinitionTypeVal> y_SurfaceOfRevolutionFeatureDefinitionType
%type <SurfaceOfRevolutionFeatureDefinitionTypeVal> y_SurfaceOfRevolutionFeatureDefinition_SurfaceOfRevolutionFeatureDefinitionType
%type <SurfaceOfRevolutionFeatureItemTypeVal> y_SurfaceOfRevolutionFeatureItemType
%type <SurfaceOfRevolutionFeatureItemTypeVal> y_SurfaceOfRevolutionFeatureItem_SurfaceOfRevolutionFeatureItemType
%type <SurfaceOfRevolutionFeatureMeasurementTypeVal> y_SurfaceOfRevolutionFeatureMeasurementType
%type <SurfaceOfRevolutionFeatureMeasurementTypeVal> y_SurfaceOfRevolutionFeatureMeasurement_SurfaceOfRevolutionFeatureMeasurementType
%type <SurfaceOfRevolutionFeatureNominalTypeVal> y_SurfaceOfRevolutionFeatureNominalType
%type <SurfaceOfRevolutionFeatureNominalTypeVal> y_SurfaceOfRevolutionFeatureNominal_SurfaceOfRevolutionFeatureNominalType
%type <SurfaceOfRevolutionMeasurementDeterminationTypeVal> y_SurfaceOfRevolutionMeasurementDeterminationType
%type <SurfaceOfRevolutionMeasurementDeterminationTypeChoicePairVal> y_SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair
%type <SurfaceOfRevolutionPointSamplingStrategyEnumTypeVal> y_SurfaceOfRevolutionPointSamplingStrategyEnumType
%type <SurfaceOfRevolutionPointSamplingStrategyTypeVal> y_SurfaceOfRevolutionPointSamplingStrategyType
%type <SurfaceOfRevolutionPointSamplingStrategyTypeChoicePairVal> y_SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair
%type <SurfaceOfRevolutionRecompTypeVal> y_SurfaceOfRevolutionRecompType
%type <SurfaceOfRevolutionTransformTypeVal> y_SurfaceOfRevolutionTransformType
%type <TimeValueTypeVal>              y_SurfacePointsSpeed_TimeValueType_0
%type <SurfaceProfileCharacteristicDefinitionTypeVal> y_SurfaceProfileCharacteristicDefinitionType
%type <SurfaceProfileCharacteristicDefinitionTypeVal> y_SurfaceProfileCharacteristicDefinition_SurfaceProfileCharacteristicDefinitionType
%type <SurfaceProfileCharacteristicItemTypeVal> y_SurfaceProfileCharacteristicItemType
%type <SurfaceProfileCharacteristicItemTypeVal> y_SurfaceProfileCharacteristicItem_SurfaceProfileCharacteristicItemType
%type <SurfaceProfileCharacteristicMeasurementTypeVal> y_SurfaceProfileCharacteristicMeasurementType
%type <SurfaceProfileCharacteristicMeasurementTypeVal> y_SurfaceProfileCharacteristicMeasurement_SurfaceProfileCharacteristicMeasurementType
%type <SurfaceProfileCharacteristicNominalTypeVal> y_SurfaceProfileCharacteristicNominalType
%type <SurfaceProfileCharacteristicNominalTypeVal> y_SurfaceProfileCharacteristicNominal_SurfaceProfileCharacteristicNominalType
%type <SurfaceProfileCharacteristicStatsEvalTypeVal> y_SurfaceProfileCharacteristicStatsEvalType
%type <SurfaceProfileCharacteristicStatsEvalTypeVal> y_SurfaceProfileCharacteristicStats_SurfaceProfileCharacteristicStatsEvalType
%type <SurfaceProfileN_1071_TypeVal>  y_SurfaceProfileN_1071_SurfaceProfileN_1071_Type_0
%type <SurfaceProfileN_1071_TypeVal>  y_SurfaceProfileN_1071_Type
%type <SurfaceProfileN_1071_TypeChoicePairVal> y_SurfaceProfileN_1071_TypeChoicePair
%type <SurfaceProfileNonUniformCharacteristicDefinitionTypeVal> y_SurfaceProfileNonUniformCharacteristicDefinitionType
%type <SurfaceProfileNonUniformCharacteristicDefinitionTypeVal> y_SurfaceProfileNonUniformCharacteristicDefinition_SurfaceProfileNonUniformCharacteristicDefinitionType
%type <SurfaceProfileNonUniformCharacteristicItemTypeVal> y_SurfaceProfileNonUniformCharacteristicItemType
%type <SurfaceProfileNonUniformCharacteristicItemTypeVal> y_SurfaceProfileNonUniformCharacteristicItem_SurfaceProfileNonUniformCharacteristicItemType
%type <SurfaceProfileNonUniformCharacteristicMeasurementTypeVal> y_SurfaceProfileNonUniformCharacteristicMeasurementType
%type <SurfaceProfileNonUniformCharacteristicMeasurementTypeVal> y_SurfaceProfileNonUniformCharacteristicMeasurement_SurfaceProfileNonUniformCharacteristicMeasurementType
%type <SurfaceProfileNonUniformCharacteristicNominalTypeVal> y_SurfaceProfileNonUniformCharacteristicNominalType
%type <SurfaceProfileNonUniformCharacteristicNominalTypeVal> y_SurfaceProfileNonUniformCharacteristicNominal_SurfaceProfileNonUniformCharacteristicNominalType
%type <SurfaceProfileNonUniformCharacteristicStatsEvalTypeVal> y_SurfaceProfileNonUniformCharacteristicStatsEvalType
%type <SurfaceProfileNonUniformCharacteristicStatsEvalTypeVal> y_SurfaceProfileNonUniformCharacteristicStats_SurfaceProfileNonUniformCharacteristicStatsEvalType
%type <SurfaceSetTypeVal>             y_SurfaceSetType
%type <SurfaceSetTypeVal>             y_SurfaceSet_SurfaceSetType_0
%type <SurfaceTextureCharacteristicDefinitionTypeVal> y_SurfaceTextureCharacteristicDefinitionType
%type <SurfaceTextureCharacteristicDefinitionTypeVal> y_SurfaceTextureCharacteristicDefinition_SurfaceTextureCharacteristicDefinitionType
%type <SurfaceTextureCharacteristicItemTypeVal> y_SurfaceTextureCharacteristicItemType
%type <SurfaceTextureCharacteristicItemTypeVal> y_SurfaceTextureCharacteristicItem_SurfaceTextureCharacteristicItemType
%type <SurfaceTextureCharacteristicMeasurementTypeVal> y_SurfaceTextureCharacteristicMeasurementType
%type <SurfaceTextureCharacteristicMeasurementTypeVal> y_SurfaceTextureCharacteristicMeasurement_SurfaceTextureCharacteristicMeasurementType
%type <SurfaceTextureCharacteristicNominalTypeVal> y_SurfaceTextureCharacteristicNominalType
%type <SurfaceTextureCharacteristicNominalTypeVal> y_SurfaceTextureCharacteristicNominal_SurfaceTextureCharacteristicNominalType
%type <SurfaceTextureCharacteristicStatsEvalTypeVal> y_SurfaceTextureCharacteristicStatsEvalType
%type <SurfaceTextureCharacteristicStatsEvalTypeVal> y_SurfaceTextureCharacteristicStats_SurfaceTextureCharacteristicStatsEvalType
%type <ElementReferenceTypeVal>       y_Surface_ElementReferenceType
%type <SurfaceCoreTypeVal>            y_Surface_SurfaceCoreType
%type <SurfaceBaseTypeVal>            y_Surface_substituteType
%type <UserDefinedUnitValueTypeVal>   y_SustainedDataRate_UserDefinedUnitValueType_0
%type <SweepTypeVal>                  y_SweepFull_SweepType_0
%type <SweepTypeVal>                  y_SweepMeasurementRange_SweepType_0
%type <SweepTypeVal>                  y_SweepType
%type <SweepTypeVal>                  y_Sweep_SweepType
%type <SweepTypeVal>                  y_Sweep_SweepType_0
%type <DualNestingIndexFilterSymbolEnumTypeVal> y_Symbol_DualNestingIndexFilterSymbolEnumType
%type <SingleNestingIndexFilterSymbolEnumTypeVal> y_Symbol_SingleNestingIndexFilterSymbolEnumType
%type <WeldContourSymbolEnumTypeVal>  y_Symbol_WeldContourSymbolEnumType
%type <WeldMainSymbolEnumTypeVal>     y_Symbol_WeldMainSymbolEnumType
%type <WeldSupplementarySymbolEnumTypeVal> y_Symbol_WeldSupplementarySymbolEnumType
%type <SymmetryCharacteristicDefinitionTypeVal> y_SymmetryCharacteristicDefinitionType
%type <SymmetryCharacteristicDefinitionTypeVal> y_SymmetryCharacteristicDefinition_SymmetryCharacteristicDefinitionType
%type <SymmetryCharacteristicItemTypeVal> y_SymmetryCharacteristicItemType
%type <SymmetryCharacteristicItemTypeVal> y_SymmetryCharacteristicItem_SymmetryCharacteristicItemType
%type <SymmetryCharacteristicMeasurementTypeVal> y_SymmetryCharacteristicMeasurementType
%type <SymmetryCharacteristicMeasurementTypeVal> y_SymmetryCharacteristicMeasurement_SymmetryCharacteristicMeasurementType
%type <SymmetryCharacteristicNominalTypeVal> y_SymmetryCharacteristicNominalType
%type <SymmetryCharacteristicNominalTypeVal> y_SymmetryCharacteristicNominal_SymmetryCharacteristicNominalType
%type <SymmetryCharacteristicStatsEvalTypeVal> y_SymmetryCharacteristicStatsEvalType
%type <SymmetryCharacteristicStatsEvalTypeVal> y_SymmetryCharacteristicStats_SymmetryCharacteristicStatsEvalType
%type <StatsMeasuredDecimalTypeVal>   y_TDistribution_StatsMeasuredDecimalType
%type <TableErrorsTypeVal>            y_TableErrorsType
%type <TableErrorsTypeVal>            y_TableErrors_TableErrorsType
%type <LinearValueTypeVal>            y_TableRadius_LinearValueType
%type <FrameWeldSymbolTailTypeVal>    y_Tail_FrameWeldSymbolTailType_0
%type <BaseFeatureTypeVal>            y_TangentFeature_BaseFeatureType
%type <SequencedBaseFeatureTypeVal>   y_TangentFeature_SequencedBaseFeatureType
%type <XmlBooleanVal>                 y_TangentPlane_XmlBoolean_0
%type <CircleTangentThroughTypeVal>   y_TangentThrough_CircleTangentThroughType
%type <LineTangentThroughTypeVal>     y_TangentThrough_LineTangentThroughType
%type <PlaneTangentThroughTypeVal>    y_TangentThrough_PlaneTangentThroughType
%type <CircleTangentTypeVal>          y_Tangent_CircleTangentType
%type <LinearValueTypeVal>            y_TangentialError_LinearValueType
%type <AngularValueTypeVal>           y_TaperAngle_AngularValueType
%type <MeasuredAngularValueTypeVal>   y_TaperAngle_MeasuredAngularValueType
%type <MeasuredAngularValueTypeVal>   y_TaperAngle_MeasuredAngularValueType_0
%type <LinearDualValueTypeVal>        y_TargetDualValue_LinearDualValueType_0
%type <TargetMirrorEnumTypeVal>       y_TargetMirrorEnumType
%type <TargetMirrorEnumTypeVal>       y_TargetMirror_TargetMirrorEnumType_0
%type <AngularValueTypeVal>           y_TargetValue_AngularValueType_0
%type <AreaValueTypeVal>              y_TargetValue_AreaValueType_0
%type <ForceValueTypeVal>             y_TargetValue_ForceValueType_0
%type <LinearValueTypeVal>            y_TargetValue_LinearValueType_0
%type <MassValueTypeVal>              y_TargetValue_MassValueType_0
%type <PressureValueTypeVal>          y_TargetValue_PressureValueType_0
%type <SpeedValueTypeVal>             y_TargetValue_SpeedValueType_0
%type <TemperatureValueTypeVal>       y_TargetValue_TemperatureValueType_0
%type <TimeValueTypeVal>              y_TargetValue_TimeValueType_0
%type <UserDefinedUnitValueTypeVal>   y_TargetValue_UserDefinedUnitValueType
%type <QIFReferenceFullTypeVal>       y_TargetZoneId_QIFReferenceFullType_0
%type <XmlTokenVal>                   y_TelephoneNumber_XmlToken_0
%type <XmlTokenVal>                   y_TelexNumber_XmlToken_0
%type <MeasuredTemperatureValueTypeVal> y_TemperatureAbsoluteLinearity_MeasuredTemperatureValueType
%type <TemperatureChar_1072_TypeVal>  y_TemperatureChar_1072_TemperatureChar_1072_Type
%type <TemperatureChar_1072_TypeVal>  y_TemperatureChar_1072_Type
%type <TemperatureChar_1072_TypeChoicePairVal> y_TemperatureChar_1072_TypeChoicePair
%type <TemperatureCompensationEnumTypeVal> y_TemperatureCompensationEnumType
%type <TemperatureCompensationEnumTypeVal> y_TemperatureCompensationEnum_TemperatureCompensationEnumType
%type <TemperatureCompensationTypeVal> y_TemperatureCompensationType
%type <TemperatureCompensationTypeChoicePairVal> y_TemperatureCompensationTypeChoicePair
%type <TemperatureCompensationTypeVal> y_TemperatureCompensation_TemperatureCompensationType_0
%type <TemperatureTypeVal>            y_TemperatureControlMax_TemperatureType
%type <TemperatureTypeVal>            y_TemperatureControlMin_TemperatureType
%type <CriterionTemperatureTypeVal>   y_TemperatureCriterion_CriterionTemperatureType_0
%type <TemperatureValueTypeVal>       y_TemperatureLimit_TemperatureValueType_0
%type <MeasuredTemperatureValueTypeVal> y_TemperatureMeasurement_MeasuredTemperatureValueType_0
%type <TemperatureTypeVal>            y_TemperatureRangeMax_TemperatureType
%type <TemperatureTypeVal>            y_TemperatureRangeMin_TemperatureType
%type <UserDefinedUnitValueTypeVal>   y_TemperatureStability_UserDefinedUnitValueType_0
%type <SummariesStatisticsTemperatureTypeVal> y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
%type <SummaryStatisticsTemperatureTypeVal> y_TemperatureStatsSummary_SummaryStatisticsTemperatureType
%type <TemperatureTole_1024_TypeVal>  y_TemperatureTole_1024_TemperatureTole_1024_Type
%type <TemperatureTole_1024_TypeVal>  y_TemperatureTole_1024_Type
%type <TemperatureTole_1024_TypeChoicePairVal> y_TemperatureTole_1024_TypeChoicePair
%type <TemperatureTole_1039_TypeVal>  y_TemperatureTole_1039_TemperatureTole_1039_Type
%type <TemperatureTole_1039_TypeVal>  y_TemperatureTole_1039_Type
%type <TemperatureToleranceTypeVal>   y_TemperatureToleranceType
%type <TemperatureTypeVal>            y_TemperatureType
%type <TemperatureUnitTypeVal>        y_TemperatureUnitType
%type <TemperatureUnitTypeVal>        y_TemperatureUnit_TemperatureUnitType
%type <TemperatureUnitTypeVal>        y_TemperatureUnit_TemperatureUnitType_0
%type <TemperatureValueTypeVal>       y_TemperatureValueType
%type <TemperatureTypeVal>            y_Temperature_TemperatureType
%type <TemperatureValueTypeVal>       y_Temperature_TemperatureValueType
%type <TemperaturesTypeVal>           y_TemperaturesType
%type <TemperaturesTypeVal>           y_Temperatures_TemperaturesType_0
%type <XmlDoubleVal>                  y_TensileYieldStress_XmlDouble_0
%type <PointSimpleTypeVal>            y_TerminationPoint_PointSimpleType
%type <TestAndPlanElementTypeVal>     y_TestAndPlanElementType
%type <XmlStringVal>                  y_TextHidden_XmlString_0
%type <TextInstructionTypeVal>        y_TextInstructionType
%type <TextInstructionTypeVal>        y_TextInstruction_TextInstructionType
%type <XmlStringVal>                  y_TextInstruction_XmlString
%type <XmlStringVal>                  y_TextSpecification_XmlString
%type <TextThreadSpecificationTypeVal> y_TextThreadSpecificationType
%type <TextThreadSpecificationTypeVal> y_TextThreadSpecification_TextThreadSpecificationType
%type <TextTypeVal>                   y_TextType
%type <TextTypeVal>                   y_Text_TextType
%type <XmlStringVal>                  y_Text_XmlString
%type <XmlStringVal>                  y_Text_XmlString_0
%type <TextsTypeVal>                  y_TextsType
%type <TextsTypeVal>                  y_Texts_TextsType_0
%type <SubstituteFeatureAlgorithmTypeVal> y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
%type <CirclePointSamplingStrategyTypeVal> y_ThenPointStrategy_CirclePointSamplingStrategyType_0
%type <CircularArcPointSamplingStrategyTypeVal> y_ThenPointStrategy_CircularArcPointSamplingStrategyType_0
%type <ConePointSamplingStrategyTypeVal> y_ThenPointStrategy_ConePointSamplingStrategyType_0
%type <ConicalSegmentPointSamplingStrategyTypeVal> y_ThenPointStrategy_ConicalSegmentPointSamplingStrategyType_0
%type <CylinderPointSamplingStrategyTypeVal> y_ThenPointStrategy_CylinderPointSamplingStrategyType_0
%type <CylindricalSegmentPointSamplingStrategyTypeVal> y_ThenPointStrategy_CylindricalSegmentPointSamplingStrategyType_0
%type <EllipsePointSamplingStrategyTypeVal> y_ThenPointStrategy_EllipsePointSamplingStrategyType_0
%type <EllipticalArcPointSamplingStrategyTypeVal> y_ThenPointStrategy_EllipticalArcPointSamplingStrategyType_0
%type <ElongatedCirclePointSamplingStrategyTypeVal> y_ThenPointStrategy_ElongatedCirclePointSamplingStrategyType_0
%type <ElongatedCylinderPointSamplingStrategyTypeVal> y_ThenPointStrategy_ElongatedCylinderPointSamplingStrategyType_0
%type <ExtrudedCrossSectionPointSamplingStrategyTypeVal> y_ThenPointStrategy_ExtrudedCrossSectionPointSamplingStrategyType_0
%type <LinePointSamplingStrategyTypeVal> y_ThenPointStrategy_LinePointSamplingStrategyType_0
%type <OppositeAngledLinesPointSamplingStrategyTypeVal> y_ThenPointStrategy_OppositeAngledLinesPointSamplingStrategyType_0
%type <OppositeAngledPlanesPointSamplingStrategyTypeVal> y_ThenPointStrategy_OppositeAngledPlanesPointSamplingStrategyType_0
%type <OppositeParallelLinesPointSamplingStrategyTypeVal> y_ThenPointStrategy_OppositeParallelLinesPointSamplingStrategyType_0
%type <OppositeParallelPlanesPointSamplingStrategyTypeVal> y_ThenPointStrategy_OppositeParallelPlanesPointSamplingStrategyType_0
%type <PlanePointSamplingStrategyTypeVal> y_ThenPointStrategy_PlanePointSamplingStrategyType_0
%type <PointDefinedCurvePointSamplingStrategyTypeVal> y_ThenPointStrategy_PointDefinedCurvePointSamplingStrategyType_0
%type <PointDefinedSurfacePointSamplingStrategyTypeVal> y_ThenPointStrategy_PointDefinedSurfacePointSamplingStrategyType_0
%type <PointPointSamplingStrategyTypeVal> y_ThenPointStrategy_PointPointSamplingStrategyType_0
%type <SpherePointSamplingStrategyTypeVal> y_ThenPointStrategy_SpherePointSamplingStrategyType_0
%type <SphericalSegmentPointSamplingStrategyTypeVal> y_ThenPointStrategy_SphericalSegmentPointSamplingStrategyType_0
%type <SurfaceOfRevolutionPointSamplingStrategyTypeVal> y_ThenPointStrategy_SurfaceOfRevolutionPointSamplingStrategyType_0
%type <ToroidalSegmentPointSamplingStrategyTypeVal> y_ThenPointStrategy_ToroidalSegmentPointSamplingStrategyType_0
%type <TorusPointSamplingStrategyTypeVal> y_ThenPointStrategy_TorusPointSamplingStrategyType_0
%type <ThenPointsTypeVal>             y_ThenPointsType
%type <ThenPointsType_1212_TypeVal>   y_ThenPointsType_1212_ThenPointsType_1212_Type_0
%type <ThenPointsType_1212_TypeVal>   y_ThenPointsType_1212_Type
%type <ThenPointsType_1212_TypeChoicePairVal> y_ThenPointsType_1212_TypeChoicePair
%type <ThenPointsTypeVal>             y_ThenPoints_ThenPointsType
%type <ThenPointsTypeVal>             y_ThenPoints_ThenPointsType_0
%type <TheodoliteMeasureFeatureMethodTypeVal> y_TheodoliteMeasureFeatureMethodType
%type <TheodoliteMeasureFeatureMethodTypeVal> y_TheodoliteMeasureFeatureMethod_TheodoliteMeasureFeatureMethodType
%type <TheodoliteTypeVal>             y_TheodoliteType
%type <TheodoliteTypeVal>             y_Theodolite_TheodoliteType
%type <XmlDoubleVal>                  y_ThermalConductivity_XmlDouble_0
%type <XmlDoubleVal>                  y_ThermalExpansion_XmlDouble_0
%type <ThicknessCharacteristicDefinitionTypeVal> y_ThicknessCharacteristicDefinitionType
%type <ThicknessCharacteristicDefinitionTypeVal> y_ThicknessCharacteristicDefinition_ThicknessCharacteristicDefinitionType
%type <ThicknessCharacteristicItemTypeVal> y_ThicknessCharacteristicItemType
%type <ThicknessCharacteristicItemTypeVal> y_ThicknessCharacteristicItem_ThicknessCharacteristicItemType
%type <ThicknessCharacteristicMeasurementTypeVal> y_ThicknessCharacteristicMeasurementType
%type <ThicknessCharacteristicMeasurementTypeVal> y_ThicknessCharacteristicMeasurement_ThicknessCharacteristicMeasurementType
%type <ThicknessCharacteristicNominalTypeVal> y_ThicknessCharacteristicNominalType
%type <ThicknessCharacteristicNominalTypeVal> y_ThicknessCharacteristicNominal_ThicknessCharacteristicNominalType
%type <ThicknessCharacteristicStatsEvalTypeVal> y_ThicknessCharacteristicStatsEvalType
%type <ThicknessCharacteristicStatsEvalTypeVal> y_ThicknessCharacteristicStats_ThicknessCharacteristicStatsEvalType
%type <UserDefinedAxisTypeVal>        y_ThirdAxis_UserDefinedAxisType
%type <CompositeSegmentPositionDefinitionTypeVal> y_ThirdCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0
%type <CompositeSegmentPositionMeasurementTypeVal> y_ThirdCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0
%type <CompositeSegmentPositionStatsEvalTypeVal> y_ThirdCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType_0
%type <CompositeSegmentProfileDefinitionTypeVal> y_ThirdCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
%type <CompositeSegmentProfileMeasurementTypeVal> y_ThirdCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
%type <CompositeSegmentProfileStatsEvalTypeVal> y_ThirdCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType_0
%type <CompositeSegmentSymmetryDefinitionTypeVal> y_ThirdCompositeSegmentSymmetryDefinition_CompositeSegmentSymmetryDefinitionType_0
%type <CompositeSegmentSymmetryMeasurementTypeVal> y_ThirdCompositeSegmentSymmetryMeasurement_CompositeSegmentSymmetryMeasurementType_0
%type <CompositeSegmentSymmetryStatsEvalTypeVal> y_ThirdCompositeSegmentSymmetryStats_CompositeSegmentSymmetryStatsEvalType_0
%type <QPIdTypeVal>                   y_ThisInstanceQPId_QPIdType_0
%type <QPIdTypeVal>                   y_ThisResultsInstanceQPId_QPIdType_0
%type <QPIdTypeVal>                   y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
%type <ThreadCharacteristicDefinitionTypeVal> y_ThreadCharacteristicDefinitionType
%type <ThreadCharacteristicDefinitionTypeVal> y_ThreadCharacteristicDefinition_ThreadCharacteristicDefinitionType
%type <ThreadCharacteristicItemTypeVal> y_ThreadCharacteristicItemType
%type <ThreadCharacteristicItemTypeVal> y_ThreadCharacteristicItem_ThreadCharacteristicItemType
%type <ThreadCharacteristicMeasurementTypeVal> y_ThreadCharacteristicMeasurementType
%type <ThreadCharacteristicMeasurementTypeVal> y_ThreadCharacteristicMeasurement_ThreadCharacteristicMeasurementType
%type <ThreadCharacteristicNominalTypeVal> y_ThreadCharacteristicNominalType
%type <ThreadCharacteristicNominalTypeVal> y_ThreadCharacteristicNominal_ThreadCharacteristicNominalType
%type <ThreadCharacteristicStatsEvalTypeVal> y_ThreadCharacteristicStatsEvalType
%type <ThreadCharacteristicStatsEvalTypeVal> y_ThreadCharacteristicStats_ThreadCharacteristicStatsEvalType
%type <ThreadClassEnumTypeVal>        y_ThreadClassEnumType
%type <ThreadClassEnumTypeVal>        y_ThreadClassEnum_ThreadClassEnumType
%type <ThreadClassTypeVal>            y_ThreadClassType
%type <ThreadClassTypeChoicePairVal>  y_ThreadClassTypeChoicePair
%type <SpecifiedDecimalTypeVal>       y_ThreadDensity_SpecifiedDecimalType
%type <LinearValueTypeVal>            y_ThreadLeadDistance_LinearValueType
%type <NaturalTypeVal>                y_ThreadLeadStarts_NaturalType
%type <LinearValueTypeVal>            y_ThreadLengthEngagement_LinearValueType_0
%type <LinearValueTypeVal>            y_ThreadPitch_LinearValueType
%type <ThreadSeriesEnumTypeVal>       y_ThreadSeriesEnumType
%type <ThreadSeriesEnumTypeVal>       y_ThreadSeriesEnum_ThreadSeriesEnumType
%type <ThreadSeriesTypeVal>           y_ThreadSeriesType
%type <ThreadSeriesTypeChoicePairVal> y_ThreadSeriesTypeChoicePair
%type <ThreadSeriesTypeVal>           y_ThreadSeries_ThreadSeriesType
%type <QIFReferenceTypeVal>           y_ThreadSpecificationId_QIFReferenceType
%type <ThreadSpecificationTypeVal>    y_ThreadSpecificationType
%type <ThreadSpecificationTypeChoicePairVal> y_ThreadSpecificationTypeChoicePair
%type <ThreadSpecificationTypeVal>    y_ThreadSpecification_ThreadSpecificationType
%type <XmlUnsignedIntVal>             y_ThreadSpecificationsCount_XmlUnsignedInt_0
%type <ThreadSpecificationsTypeVal>   y_ThreadSpecificationsType
%type <ThreadSpecificationsTypeVal>   y_ThreadSpecifications_ThreadSpecificationsType_0
%type <StatsPassFailTypeVal>          y_ThreadStats_StatsPassFailType_0
%type <ThreadClassTypeVal>            y_ThreadToleranceClass_ThreadClassType
%type <ThreadedFeatureBestFitTypeVal> y_ThreadedFeatureBestFitType
%type <ThreadedFeatureCastTypeVal>    y_ThreadedFeatureCastType
%type <ThreadedFeatureCheckedFeatureTypeVal> y_ThreadedFeatureCheckedFeatureType
%type <ThreadedFeatureCheckedTypeVal> y_ThreadedFeatureCheckedType
%type <ThreadedFeatureCheckedTypeChoicePairVal> y_ThreadedFeatureCheckedTypeChoicePair
%type <ThreadedFeatureConstructionMethodTypeVal> y_ThreadedFeatureConstructionMethodType
%type <ThreadedFeatureConstructionMethodTypeChoicePairVal> y_ThreadedFeatureConstructionMethodTypeChoicePair
%type <ThreadedFeatureCopyTypeVal>    y_ThreadedFeatureCopyType
%type <ThreadedFeatureDefinitionTypeVal> y_ThreadedFeatureDefinitionType
%type <ThreadedFeatureDefinitionTypeVal> y_ThreadedFeatureDefinition_ThreadedFeatureDefinitionType
%type <ThreadedFeatureFromCylinderTypeVal> y_ThreadedFeatureFromCylinderType
%type <ThreadedFeatureItemTypeVal>    y_ThreadedFeatureItemType
%type <ThreadedFeatureItemTypeVal>    y_ThreadedFeatureItem_ThreadedFeatureItemType
%type <ThreadedFeatureMeasurementDeterminationTypeVal> y_ThreadedFeatureMeasurementDeterminationType
%type <ThreadedFeatureMeasurementDeterminationTypeChoicePairVal> y_ThreadedFeatureMeasurementDeterminationTypeChoicePair
%type <ThreadedFeatureMeasurementTypeVal> y_ThreadedFeatureMeasurementType
%type <ThreadedFeatureMeasurementTypeVal> y_ThreadedFeatureMeasurement_ThreadedFeatureMeasurementType
%type <ThreadedFeatureNominalTypeVal> y_ThreadedFeatureNominalType
%type <ThreadedFeatureNominalTypeVal> y_ThreadedFeatureNominal_ThreadedFeatureNominalType
%type <ThreadedFeatureRecompTypeVal>  y_ThreadedFeatureRecompType
%type <ThreadedFeatureTransformTypeVal> y_ThreadedFeatureTransformType
%type <PlaneThroughTypeVal>           y_Through_PlaneThroughType
%type <MeasuredTimeValueTypeVal>      y_TimeAbsoluteLinearity_MeasuredTimeValueType
%type <TimeCharacteris_1073_TypeVal>  y_TimeCharacteris_1073_TimeCharacteris_1073_Type
%type <TimeCharacteris_1073_TypeVal>  y_TimeCharacteris_1073_Type
%type <TimeCharacteris_1073_TypeChoicePairVal> y_TimeCharacteris_1073_TypeChoicePair
%type <XmlDateTimeVal>                y_TimeCreated_XmlDateTime_0
%type <CriterionTimeTypeVal>          y_TimeCriterion_CriterionTimeType_0
%type <TimeDescriptionEnumTypeVal>    y_TimeDescriptionEnumType
%type <TimeDescriptionEnumTypeVal>    y_TimeDescriptionEnum_TimeDescriptionEnumType
%type <TimeDescriptionTypeVal>        y_TimeDescriptionType
%type <TimeDescriptionTypeChoicePairVal> y_TimeDescriptionTypeChoicePair
%type <TimeDescriptionTypeVal>        y_TimeDescription_TimeDescriptionType_0
%type <TimeValueTypeVal>              y_TimeLimit_TimeValueType_0
%type <MeasuredTimeValueTypeVal>      y_TimeMeasurement_MeasuredTimeValueType_0
%type <XmlDateTimeVal>                y_TimeOccurred_XmlDateTime_0
%type <XmlDateTimeVal>                y_TimeStamp_XmlDateTime
%type <XmlDateTimeVal>                y_TimeStamp_XmlDateTime_0
%type <ListDateTimeTypeVal>           y_TimeStamps_ListDateTimeType
%type <SummariesStatisticsTimeTypeVal> y_TimeStatsSummaries_SummariesStatisticsTimeType_0
%type <SummaryStatisticsTimeTypeVal>  y_TimeStatsSummary_SummaryStatisticsTimeType
%type <TimeToleranceTy_1025_TypeVal>  y_TimeToleranceTy_1025_TimeToleranceTy_1025_Type
%type <TimeToleranceTy_1025_TypeVal>  y_TimeToleranceTy_1025_Type
%type <TimeToleranceTy_1025_TypeChoicePairVal> y_TimeToleranceTy_1025_TypeChoicePair
%type <TimeToleranceTy_1040_TypeVal>  y_TimeToleranceTy_1040_TimeToleranceTy_1040_Type
%type <TimeToleranceTy_1040_TypeVal>  y_TimeToleranceTy_1040_Type
%type <TimeToleranceTypeVal>          y_TimeToleranceType
%type <TimeUnitTypeVal>               y_TimeUnitType
%type <TimeUnitTypeVal>               y_TimeUnit_TimeUnitType
%type <TimeUnitTypeVal>               y_TimeUnit_TimeUnitType_0
%type <TimeValueTypeVal>              y_TimeValueType
%type <TimesTypeVal>                  y_TimesType
%type <TimesTypeVal>                  y_Times_TimesType
%type <LinearValueTypeVal>            y_TipEndDiameter_LinearValueType_0
%type <TipEndGeometryEnumTypeVal>     y_TipEndGeometryEnumType
%type <TipEndGeometryEnumTypeVal>     y_TipEndGeometryEnum_TipEndGeometryEnumType
%type <TipEndGeometryTypeVal>         y_TipEndGeometryType
%type <TipEndGeometryTypeChoicePairVal> y_TipEndGeometryTypeChoicePair
%type <TipEndGeometryTypeVal>         y_TipEndGeometry_TipEndGeometryType_0
%type <PointTypeVal>                  y_TipEndLocation_PointType
%type <XmlStringVal>                  y_TipEndMaterial_XmlString_0
%type <QIFReferenceTypeVal>           y_TipId_QIFReferenceType
%type <QIFReferenceTypeVal>           y_TipId_QIFReferenceType_0
%type <ListQIFReferenceTypeVal>       y_TipIds_ListQIFReferenceType
%type <XmlStringVal>                  y_Title_XmlString_0
%type <QIFReferenceFullTypeVal>       y_ToCurveZoneId_QIFReferenceFullType
%type <LinearValueTypeVal>            y_ToPointOuterDisposition_LinearValueType
%type <LinearValueTypeVal>            y_ToPointToleranceValue_LinearValueType
%type <LinearValueTypeVal>            y_ToPointToleranceValue_LinearValueType_0
%type <LinearValueTypeVal>            y_ToPointUnequallyDisposedZone_LinearValueType
%type <QIFReferenceFullTypeVal>       y_ToPointZoneId_QIFReferenceFullType
%type <TokenConstantTypeVal>          y_TokenConstantType
%type <TokenConstantTypeVal>          y_TokenConstant_TokenConstantType
%type <TokenEqualTypeVal>             y_TokenEqualType
%type <TokenEqualTypeVal>             y_TokenEqual_TokenEqualType
%type <TokenExpressionBaseTypeVal>    y_TokenExpression_substituteType
%type <TokenParameterValueTypeVal>    y_TokenParameterValueType
%type <TokenParameterValueTypeVal>    y_TokenParameterValue_TokenParameterValueType
%type <ToleranceDefinitionsTypeVal>   y_ToleranceDefinitionsType
%type <ToleranceDefinitionsTypeChoicePairVal> y_ToleranceDefinitionsTypeChoicePair
%type <LinearDualValueTypeVal>        y_ToleranceDualValue_LinearDualValueType_0
%type <LinearValueTypeVal>            y_ToleranceValuePerUnit_LinearValueType
%type <LinearValueTypeVal>            y_ToleranceValue_LinearValueType
%type <ToleranceZonePe_1026_TypeVal>  y_ToleranceZonePe_1026_ToleranceZonePe_1026_Type
%type <ToleranceZonePe_1026_TypeVal>  y_ToleranceZonePe_1026_Type
%type <ToleranceZonePe_1026_TypeChoicePairVal> y_ToleranceZonePe_1026_TypeChoicePair
%type <ToleranceZonePerUnitAngleTypeVal> y_ToleranceZonePerUnitAngleType
%type <ToleranceZonePerUnitAngleTypeVal> y_ToleranceZonePerUnitAngle_ToleranceZonePerUnitAngleType
%type <ToleranceZonePerUnitLengthTypeVal> y_ToleranceZonePerUnitArcLength_ToleranceZonePerUnitLengthType
%type <ToleranceZonePerUnitAreaTypeVal> y_ToleranceZonePerUnitAreaType
%type <ToleranceZonePerUnitAreaTypeVal> y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType
%type <ToleranceZonePerUnitAreaTypeVal> y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType_0
%type <ToleranceZonePerUnitLengthTypeVal> y_ToleranceZonePerUnitLengthType
%type <ToleranceZonePerUnitLengthTypeVal> y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType
%type <ToleranceZonePerUnitLengthTypeVal> y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType_0
%type <ToleranceZonePerUnitPolarAreaTypeVal> y_ToleranceZonePerUnitPolarAreaType
%type <ToleranceZonePerUnitPolarAreaTypeVal> y_ToleranceZonePerUnitPolarArea_ToleranceZonePerUnitPolarAreaType
%type <AngularToleranceTypeVal>       y_Tolerance_AngularToleranceType
%type <AreaToleranceTypeVal>          y_Tolerance_AreaToleranceType
%type <ForceToleranceTypeVal>         y_Tolerance_ForceToleranceType
%type <LinearToleranceTypeVal>        y_Tolerance_LinearToleranceType
%type <MassToleranceTypeVal>          y_Tolerance_MassToleranceType
%type <PressureToleranceTypeVal>      y_Tolerance_PressureToleranceType
%type <SpeedToleranceTypeVal>         y_Tolerance_SpeedToleranceType
%type <TemperatureToleranceTypeVal>   y_Tolerance_TemperatureToleranceType
%type <TimeToleranceTypeVal>          y_Tolerance_TimeToleranceType
%type <ArrayReferenceTypeVal>         y_ToolIds_ArrayReferenceType_0
%type <ToolWithCCDCameraSensorTypeVal> y_ToolWithCCDCameraSensorType
%type <ToolWithCCDCameraSensorTypeVal> y_ToolWithCCDCameraSensor_ToolWithCCDCameraSensorType
%type <ToolWithCapacitiveSensorTypeVal> y_ToolWithCapacitiveSensorType
%type <ToolWithCapacitiveSensorTypeVal> y_ToolWithCapacitiveSensor_ToolWithCapacitiveSensorType
%type <ToolWithComplexTactileProbeSensorTypeVal> y_ToolWithComplexTactileProbeSensorType
%type <ToolWithComplexTactileProbeSensorTypeVal> y_ToolWithComplexTactileProbeSensor_ToolWithComplexTactileProbeSensorType
%type <ToolWithConfocalChromaticSensorTypeVal> y_ToolWithConfocalChromaticSensorType
%type <ToolWithConfocalChromaticSensorTypeVal> y_ToolWithConfocalChromaticSensor_ToolWithConfocalChromaticSensorType
%type <ToolWithDVRTSensorTypeVal>     y_ToolWithDVRTSensorType
%type <ToolWithDVRTSensorTypeVal>     y_ToolWithDVRTSensor_ToolWithDVRTSensorType
%type <ToolWithDetachableSensorsTypeVal> y_ToolWithDetachableSensorsType
%type <ToolWithDetachableSensorsTypeVal> y_ToolWithDetachableSensors_ToolWithDetachableSensorsType
%type <ToolWithDrawWireSensorTypeVal> y_ToolWithDrawWireSensorType
%type <ToolWithDrawWireSensorTypeVal> y_ToolWithDrawWireSensor_ToolWithDrawWireSensorType
%type <ToolWithEddyCurrentSensorTypeVal> y_ToolWithEddyCurrentSensorType
%type <ToolWithEddyCurrentSensorTypeVal> y_ToolWithEddyCurrentSensor_ToolWithEddyCurrentSensorType
%type <ToolWithLVDTSensorTypeVal>     y_ToolWithLVDTSensorType
%type <ToolWithLVDTSensorTypeVal>     y_ToolWithLVDTSensor_ToolWithLVDTSensorType
%type <ToolWithLaserTriangulationSensorTypeVal> y_ToolWithLaserTriangulationSensorType
%type <ToolWithLaserTriangulationSensorTypeVal> y_ToolWithLaserTriangulationSensor_ToolWithLaserTriangulationSensorType
%type <ToolWithMagnetoInductiveSensorTypeVal> y_ToolWithMagnetoInductiveSensorType
%type <ToolWithMagnetoInductiveSensorTypeVal> y_ToolWithMagnetoInductiveSensor_ToolWithMagnetoInductiveSensorType
%type <ToolWithSimpleTactileProbeSensorTypeVal> y_ToolWithSimpleTactileProbeSensorType
%type <ToolWithSimpleTactileProbeSensorTypeVal> y_ToolWithSimpleTactileProbeSensor_ToolWithSimpleTactileProbeSensorType
%type <ToolWithStructuredLightSensorTypeVal> y_ToolWithStructuredLightSensorType
%type <ToolWithStructuredLightSensorTypeVal> y_ToolWithStructuredLightSensor_ToolWithStructuredLightSensorType
%type <ToolWithUltrasonicSensorTypeVal> y_ToolWithUltrasonicSensorType
%type <ToolWithUltrasonicSensorTypeVal> y_ToolWithUltrasonicSensor_ToolWithUltrasonicSensorType
%type <ToolBaseTypeVal>               y_Tool_substituteType
%type <TimeValueTypeVal>              y_ToolingBallSpeed_TimeValueType_0
%type <ToolsTypeVal>                  y_ToolsType
%type <ToolsTypeVal>                  y_Tools_ToolsType_0
%type <TopologyEnumTypeVal>           y_TopologyEnumType
%type <TopologySetTypeVal>            y_TopologySetType
%type <TopologySetTypeVal>            y_TopologySet_TopologySetType_0
%type <TopologyEnumTypeVal>           y_Topology_TopologyEnumType_0
%type <ToroidalSegmentBestFitTypeVal> y_ToroidalSegmentBestFitType
%type <ToroidalSegmentCastTypeVal>    y_ToroidalSegmentCastType
%type <ToroidalSegmentCheckedFeatureTypeVal> y_ToroidalSegmentCheckedFeatureType
%type <ToroidalSegmentCheckedTypeVal> y_ToroidalSegmentCheckedType
%type <ToroidalSegmentCheckedTypeChoicePairVal> y_ToroidalSegmentCheckedTypeChoicePair
%type <ToroidalSegmentConstructionMethodTypeVal> y_ToroidalSegmentConstructionMethodType
%type <ToroidalSegmentConstructionMethodTypeChoicePairVal> y_ToroidalSegmentConstructionMethodTypeChoicePair
%type <ToroidalSegmentCopyTypeVal>    y_ToroidalSegmentCopyType
%type <ToroidalSegmentFeatureDefinitionTypeVal> y_ToroidalSegmentFeatureDefinitionType
%type <ToroidalSegmentFeatureDefinitionTypeVal> y_ToroidalSegmentFeatureDefinition_ToroidalSegmentFeatureDefinitionType
%type <ToroidalSegmentFeatureItemTypeVal> y_ToroidalSegmentFeatureItemType
%type <ToroidalSegmentFeatureItemTypeVal> y_ToroidalSegmentFeatureItem_ToroidalSegmentFeatureItemType
%type <ToroidalSegmentFeatureMeasurementTypeVal> y_ToroidalSegmentFeatureMeasurementType
%type <ToroidalSegmentFeatureMeasurementTypeVal> y_ToroidalSegmentFeatureMeasurement_ToroidalSegmentFeatureMeasurementType
%type <ToroidalSegmentFeatureNominalTypeVal> y_ToroidalSegmentFeatureNominalType
%type <ToroidalSegmentFeatureNominalTypeVal> y_ToroidalSegmentFeatureNominal_ToroidalSegmentFeatureNominalType
%type <ToroidalSegmentMeasurementDeterminationTypeVal> y_ToroidalSegmentMeasurementDeterminationType
%type <ToroidalSegmentMeasurementDeterminationTypeChoicePairVal> y_ToroidalSegmentMeasurementDeterminationTypeChoicePair
%type <ToroidalSegmentPointSamplingStrategyTypeVal> y_ToroidalSegmentPointSamplingStrategyType
%type <ToroidalSegmentPointSamplingStrategyTypeChoicePairVal> y_ToroidalSegmentPointSamplingStrategyTypeChoicePair
%type <ToroidalSegmentRecompTypeVal>  y_ToroidalSegmentRecompType
%type <ToroidalSegmentTransformTypeVal> y_ToroidalSegmentTransformType
%type <ToroidicityCharacteristicDefinitionTypeVal> y_ToroidicityCharacteristicDefinitionType
%type <ToroidicityCharacteristicDefinitionTypeVal> y_ToroidicityCharacteristicDefinition_ToroidicityCharacteristicDefinitionType
%type <ToroidicityCharacteristicItemTypeVal> y_ToroidicityCharacteristicItemType
%type <ToroidicityCharacteristicItemTypeVal> y_ToroidicityCharacteristicItem_ToroidicityCharacteristicItemType
%type <ToroidicityCharacteristicMeasurementTypeVal> y_ToroidicityCharacteristicMeasurementType
%type <ToroidicityCharacteristicMeasurementTypeVal> y_ToroidicityCharacteristicMeasurement_ToroidicityCharacteristicMeasurementType
%type <ToroidicityCharacteristicNominalTypeVal> y_ToroidicityCharacteristicNominalType
%type <ToroidicityCharacteristicNominalTypeVal> y_ToroidicityCharacteristicNominal_ToroidicityCharacteristicNominalType
%type <ToroidicityCharacteristicStatsEvalTypeVal> y_ToroidicityCharacteristicStatsEvalType
%type <ToroidicityCharacteristicStatsEvalTypeVal> y_ToroidicityCharacteristicStats_ToroidicityCharacteristicStatsEvalType
%type <Torus23CoreTypeVal>            y_Torus23CoreType
%type <Torus23CoreTypeVal>            y_Torus23Core_Torus23CoreType
%type <Torus23TypeVal>                y_Torus23Type
%type <Torus23TypeVal>                y_Torus23_Torus23Type
%type <TorusBestFitTypeVal>           y_TorusBestFitType
%type <TorusCastTypeVal>              y_TorusCastType
%type <TorusCheckedFeatureTypeVal>    y_TorusCheckedFeatureType
%type <TorusCheckedTypeVal>           y_TorusCheckedType
%type <TorusCheckedTypeChoicePairVal> y_TorusCheckedTypeChoicePair
%type <TorusConstructionMethodTypeVal> y_TorusConstructionMethodType
%type <TorusConstructionMethodTypeChoicePairVal> y_TorusConstructionMethodTypeChoicePair
%type <TorusCopyTypeVal>              y_TorusCopyType
%type <TorusFeatureDefinitionTypeVal> y_TorusFeatureDefinitionType
%type <TorusFeatureDefinitionTypeVal> y_TorusFeatureDefinition_TorusFeatureDefinitionType
%type <TorusFeatureItemTypeVal>       y_TorusFeatureItemType
%type <TorusFeatureItemTypeVal>       y_TorusFeatureItem_TorusFeatureItemType
%type <TorusFeatureMeasurementTypeVal> y_TorusFeatureMeasurementType
%type <TorusFeatureMeasurementTypeVal> y_TorusFeatureMeasurement_TorusFeatureMeasurementType
%type <TorusFeatureNominalTypeVal>    y_TorusFeatureNominalType
%type <TorusFeatureNominalTypeVal>    y_TorusFeatureNominal_TorusFeatureNominalType
%type <TorusFromScanTypeVal>          y_TorusFromScanType
%type <TorusMeasurementDeterminationTypeVal> y_TorusMeasurementDeterminationType
%type <TorusMeasurementDeterminationTypeChoicePairVal> y_TorusMeasurementDeterminationTypeChoicePair
%type <TorusPointSamplingStrategyTypeVal> y_TorusPointSamplingStrategyType
%type <TorusPointSamplingStrategyTypeChoicePairVal> y_TorusPointSamplingStrategyTypeChoicePair
%type <TorusRecompTypeVal>            y_TorusRecompType
%type <TorusTransformTypeVal>         y_TorusTransformType
%type <XmlDecimalVal>                 y_TotalMagnification_XmlDecimal_0
%type <StatsNonNegativeIntegerTypeVal> y_TotalNumber_StatsNonNegativeIntegerType
%type <TotalRunoutCharacteristicDefinitionTypeVal> y_TotalRunoutCharacteristicDefinitionType
%type <TotalRunoutCharacteristicDefinitionTypeVal> y_TotalRunoutCharacteristicDefinition_TotalRunoutCharacteristicDefinitionType
%type <TotalRunoutCharacteristicItemTypeVal> y_TotalRunoutCharacteristicItemType
%type <TotalRunoutCharacteristicItemTypeVal> y_TotalRunoutCharacteristicItem_TotalRunoutCharacteristicItemType
%type <TotalRunoutCharacteristicMeasurementTypeVal> y_TotalRunoutCharacteristicMeasurementType
%type <TotalRunoutCharacteristicMeasurementTypeVal> y_TotalRunoutCharacteristicMeasurement_TotalRunoutCharacteristicMeasurementType
%type <TotalRunoutCharacteristicNominalTypeVal> y_TotalRunoutCharacteristicNominalType
%type <TotalRunoutCharacteristicNominalTypeVal> y_TotalRunoutCharacteristicNominal_TotalRunoutCharacteristicNominalType
%type <TotalRunoutCharacteristicStatsEvalTypeVal> y_TotalRunoutCharacteristicStatsEvalType
%type <TotalRunoutCharacteristicStatsEvalTypeVal> y_TotalRunoutCharacteristicStats_TotalRunoutCharacteristicStatsEvalType
%type <StatsMeasuredDecimalTypeVal>   y_TotalVariation_StatsMeasuredDecimalType
%type <XmlTokenVal>                   y_Town_XmlToken_0
%type <ActualProductTraceabilityTypeVal> y_Traceability_ActualProductTraceabilityType_0
%type <InspectionTraceabilityTypeVal> y_Traceability_InspectionTraceabilityType_0
%type <ProductTraceabilityTypeVal>    y_Traceability_ProductTraceabilityType_0
%type <TrailingZeroDimensionalCharacteristicDisplayGroupTypeVal> y_TrailingZeroDimensionalCharacteristicDisplayGroupType
%type <TrailingZeroDimensionalCharacteristicDisplayGroupTypeVal> y_TrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType
%type <TrailingZeroDimensionalCharacteristicDisplayGroupsTypeVal> y_TrailingZeroDimensionalCharacteristicDisplayGroupsType
%type <TrailingZeroDimensionalCharacteristicDisplayGroupsTypeVal> y_TrailingZeroDimensionalCharacteristicDisplayGroups_TrailingZeroDimensionalCharacteristicDisplayGroupsType_0
%type <TrailingZeroDisplayTypeVal>    y_TrailingZeroDisplayType
%type <TrailingZeroDisplayTypeVal>    y_TrailingZeroDisplay_TrailingZeroDisplayType_0
%type <TrailingZeroGeometricCharacteristicDisplayGroupTypeVal> y_TrailingZeroGeometricCharacteristicDisplayGroupType
%type <TrailingZeroGeometricCharacteristicDisplayGroupTypeVal> y_TrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType
%type <TrailingZeroGeometricCharacteristicDisplayGroupsTypeVal> y_TrailingZeroGeometricCharacteristicDisplayGroupsType
%type <TrailingZeroGeometricCharacteristicDisplayGroupsTypeVal> y_TrailingZeroGeometricCharacteristicDisplayGroups_TrailingZeroGeometricCharacteristicDisplayGroupsType_0
%type <QIFReferenceTypeVal>           y_TranformId_QIFReferenceType
%type <QIFReferenceTypeVal>           y_TransformId_QIFReferenceType_0
%type <TransformInstanceTypeVal>      y_TransformInstanceType
%type <TransformListTypeVal>          y_TransformListType
%type <TransformMatrixTypeVal>        y_TransformMatrixType
%type <TransformRotationTypeVal>      y_TransformRotationType
%type <CircleTransformTypeVal>        y_Transform_CircleTransformType
%type <CircularArcTransformTypeVal>   y_Transform_CircularArcTransformType
%type <ConeTransformTypeVal>          y_Transform_ConeTransformType
%type <ConicalSegmentTransformTypeVal> y_Transform_ConicalSegmentTransformType
%type <CylinderTransformTypeVal>      y_Transform_CylinderTransformType
%type <CylindricalSegmentTransformTypeVal> y_Transform_CylindricalSegmentTransformType
%type <EdgePointTransformTypeVal>     y_Transform_EdgePointTransformType
%type <ElementReferenceTypeVal>       y_Transform_ElementReferenceType_0
%type <EllipseTransformTypeVal>       y_Transform_EllipseTransformType
%type <EllipticalArcTransformTypeVal> y_Transform_EllipticalArcTransformType
%type <ElongatedCircleTransformTypeVal> y_Transform_ElongatedCircleTransformType
%type <ElongatedCylinderTransformTypeVal> y_Transform_ElongatedCylinderTransformType
%type <ExtrudedCrossSectionTransformTypeVal> y_Transform_ExtrudedCrossSectionTransformType
%type <LineTransformTypeVal>          y_Transform_LineTransformType
%type <OppositeAngledLinesTransformTypeVal> y_Transform_OppositeAngledLinesTransformType
%type <OppositeAngledPlanesTransformTypeVal> y_Transform_OppositeAngledPlanesTransformType
%type <OppositeParallelLinesTransformTypeVal> y_Transform_OppositeParallelLinesTransformType
%type <OppositeParallelPlanesTransformTypeVal> y_Transform_OppositeParallelPlanesTransformType
%type <PlaneTransformTypeVal>         y_Transform_PlaneTransformType
%type <PointDefinedCurveTransformTypeVal> y_Transform_PointDefinedCurveTransformType
%type <PointDefinedSurfaceTransformTypeVal> y_Transform_PointDefinedSurfaceTransformType
%type <PointFeatureTransformTypeVal>  y_Transform_PointFeatureTransformType
%type <SphereTransformTypeVal>        y_Transform_SphereTransformType
%type <SphericalSegmentTransformTypeVal> y_Transform_SphericalSegmentTransformType
%type <SurfaceOfRevolutionTransformTypeVal> y_Transform_SurfaceOfRevolutionTransformType
%type <ThreadedFeatureTransformTypeVal> y_Transform_ThreadedFeatureTransformType
%type <ToroidalSegmentTransformTypeVal> y_Transform_ToroidalSegmentTransformType
%type <TorusTransformTypeVal>         y_Transform_TorusTransformType
%type <TransformInstanceTypeVal>      y_Transform_TransformInstanceType
%type <TransformationReferenceTypeVal> y_TransformationReferenceType
%type <TransformationReferenceTypeVal> y_Transformation_TransformationReferenceType
%type <XmlUnsignedIntVal>             y_TransformsCount_XmlUnsignedInt_0
%type <TransformListTypeVal>          y_Transforms_TransformListType_0
%type <ExplodedViewTranslateTypeVal>  y_Translate_ExplodedViewTranslateType
%type <TransparencyTypeVal>           y_TransparencyType
%type <TransparencyTypeVal>           y_Transparency_TransparencyType_0
%type <CriterionIntegerTypeVal>       y_TrendGrouping_CriterionIntegerType
%type <TriangleVertexNormalTypeVal>   y_TriangleVertexNormalType
%type <ArrayBinaryTypeVal>            y_TrianglesBinary_ArrayBinaryType
%type <ArrayBinaryTypeVal>            y_TrianglesColorBinary_ArrayBinaryType
%type <ArrayUnsignedByteTypeVal>      y_TrianglesColor_ArrayUnsignedByteType
%type <ArrayBinaryTypeVal>            y_TrianglesHiddenBinary_ArrayBinaryType
%type <ArrayIntTypeVal>               y_TrianglesHidden_ArrayIntType
%type <ArrayBinaryTypeVal>            y_TrianglesVisibleBinary_ArrayBinaryType
%type <ArrayIntTypeVal>               y_TrianglesVisible_ArrayIntType
%type <ArrayI3TypeVal>                y_Triangles_ArrayI3Type
%type <ArrayIntTypeVal>               y_Triangles_ArrayIntType
%type <Triangulation2dTypeVal>        y_Triangulation2dType
%type <Triangulation2d_1233_TypeVal>  y_Triangulation2d_1233_Triangulation2d_1233_Type
%type <Triangulation2d_1233_TypeVal>  y_Triangulation2d_1233_Type
%type <Triangulation2d_1233_TypeChoicePairVal> y_Triangulation2d_1233_TypeChoicePair
%type <Triangulation2d_1234_TypeVal>  y_Triangulation2d_1234_Triangulation2d_1234_Type
%type <Triangulation2d_1234_TypeVal>  y_Triangulation2d_1234_Type
%type <Triangulation2d_1234_TypeChoicePairVal> y_Triangulation2d_1234_TypeChoicePair
%type <Triangulation2dTypeVal>        y_Triangulation_Triangulation2dType
%type <TwentyLinearValuesTypeVal>     y_TwentyLinearValuesType
%type <LinearValueTypeVal>            y_TwiceStandardDeviationFar_LinearValueType
%type <LinearValueTypeVal>            y_TwiceStandardDeviationMiddle_LinearValueType
%type <LinearValueTypeVal>            y_TwiceStandardDeviationNear_LinearValueType
%type <LinearValueTypeVal>            y_TwiceStandardDeviation_LinearValueType
%type <CriterionOutOfTypeVal>         y_TwoThirdsGrouping_CriterionOutOfType
%type <TypeOfCoordinatesTypeVal>      y_TypeOfCoordinatesType
%type <TypeOfCoordinatesTypeChoicePairVal> y_TypeOfCoordinatesTypeChoicePair
%type <TypeOfCoordinatesTypeVal>      y_TypeOfCoordinates_TypeOfCoordinatesType
%type <LinearVariableDifferentialTransformerEnumTypeVal> y_TypeOfLinearVariableDifferentialTransformer_LinearVariableDifferentialTransformerEnumType_0
%type <TypeOfScaleEnumTypeVal>        y_TypeOfScaleEnumType
%type <TypeOfScaleEnumTypeVal>        y_TypeOfScaleEnum_TypeOfScaleEnumType
%type <TypeOfScaleTypeVal>            y_TypeOfScaleType
%type <TypeOfScaleTypeChoicePairVal>  y_TypeOfScaleTypeChoicePair
%type <TypeOfScaleTypeVal>            y_TypeOfScale_TypeOfScaleType_0
%type <StatsValuesEnumTypeVal>        y_TypeOfSummary_StatsValuesEnumType
%type <NonDestructiveTestingEnumTypeVal> y_TypeOfTest_NonDestructiveTestingEnumType
%type <ProductDataQualityAreaTypeVal> y_Type_ProductDataQualityAreaType
%type <XmlAnyURIVal>                  y_URI_XmlAnyURI
%type <XmlAnyURIVal>                  y_URI_XmlAnyURI_0
%type <QPIdTypeVal>                   y_UUID_QPIdType_0
%type <XmlDoubleVal>                  y_UltimateTensileStress_XmlDouble_0
%type <UltrasonicSensorTypeVal>       y_UltrasonicSensorType
%type <UltrasonicSensorTypeVal>       y_UltrasonicSensor_UltrasonicSensorType
%type <WeldFilletUnequalLegLengthTypeVal> y_UnEqualLegLength_WeldFilletUnequalLegLengthType
%type <LinearValueTypeVal>            y_UnequallyDisposedZone_LinearValueType
%type <UniformScaleTypeVal>           y_UniformScaleType
%type <UniformScaleTypeVal>           y_UniformScale_UniformScaleType
%type <AngularValueTypeVal>           y_UnitAngle_AngularValueType
%type <UnitConversionTypeVal>         y_UnitConversionType
%type <UnitConversionTypeVal>         y_UnitConversion_UnitConversionType_0
%type <LinearValueTypeVal>            y_UnitLength_LinearValueType
%type <XmlTokenVal>                   y_UnitName_XmlToken
%type <UnitVector2dSimpleTypeVal>     y_UnitVector2dSimpleType
%type <UnitVectorSimpleTypeVal>       y_UnitVectorSimpleType
%type <UnitVectorTypeVal>             y_UnitVectorType
%type <XmlBooleanVal>                 y_UnitedOrContinuousFeature_XmlBoolean_0
%type <OtherUnitsTypeVal>             y_Units_OtherUnitsType_0
%type <UniversalLengthMeasureFeatureMethodTypeVal> y_UniversalLengthMeasureFeatureMethodType
%type <UniversalLengthMeasureFeatureMethodTypeVal> y_UniversalLengthMeasureFeatureMethod_UniversalLengthMeasureFeatureMethodType
%type <UniversalLengthMeasuringTypeVal> y_UniversalLengthMeasuringType
%type <UniversalLengthMeasuringTypeVal> y_UniversalLengthMeasuring_UniversalLengthMeasuringType
%type <UnnumberedPlanElementsTypeVal> y_UnnumberedPlanElementsType
%type <UnorderedActionGroupTypeVal>   y_UnorderedActionGroupType
%type <UnorderedActionGroupTypeVal>   y_UnorderedActionGroup_UnorderedActionGroupType
%type <UnorderedActionGroupTypeVal>   y_UnorderedPlanRoot_UnorderedActionGroupType
%type <StatsMeasuredDecimalTypeVal>   y_UpperConfidenceLimit_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_UpperControlLimitRange_StatsMeasuredDecimalType
%type <StatsMeasuredDecimalTypeVal>   y_UpperControlLimit_StatsMeasuredDecimalType
%type <Point2dSimpleTypeVal>          y_UpperPoint_Point2dSimpleType
%type <BinaryDataTypeVal>             y_UserDataBinary_BinaryDataType
%type <XmlStringVal>                  y_UserDataXML_XmlString_0
%type <UserDefinedAngu_1137_TypeVal>  y_UserDefinedAngu_1137_Type
%type <UserDefinedAngu_1137_TypeChoicePairVal> y_UserDefinedAngu_1137_TypeChoicePair
%type <UserDefinedAngu_1137_TypeVal>  y_UserDefinedAngu_1137_UserDefinedAngu_1137_Type
%type <UserDefinedAngu_1158_TypeVal>  y_UserDefinedAngu_1158_Type
%type <UserDefinedAngu_1158_TypeVal>  y_UserDefinedAngu_1158_UserDefinedAngu_1158_Type
%type <UserDefinedAngu_1159_TypeVal>  y_UserDefinedAngu_1159_Type
%type <UserDefinedAngu_1159_TypeVal>  y_UserDefinedAngu_1159_UserDefinedAngu_1159_Type
%type <UserDefinedAngu_1160_TypeVal>  y_UserDefinedAngu_1160_Type
%type <UserDefinedAngu_1160_TypeVal>  y_UserDefinedAngu_1160_UserDefinedAngu_1160_Type
%type <UserDefinedAngu_1161_TypeVal>  y_UserDefinedAngu_1161_Type
%type <UserDefinedAngu_1161_TypeVal>  y_UserDefinedAngu_1161_UserDefinedAngu_1161_Type
%type <UserDefinedAngularCharacteristicDefinitionTypeVal> y_UserDefinedAngularCharacteristicDefinitionType
%type <UserDefinedAngularCharacteristicDefinitionTypeVal> y_UserDefinedAngularCharacteristicDefinition_UserDefinedAngularCharacteristicDefinitionType
%type <UserDefinedAngularCharacteristicItemTypeVal> y_UserDefinedAngularCharacteristicItemType
%type <UserDefinedAngularCharacteristicItemTypeVal> y_UserDefinedAngularCharacteristicItem_UserDefinedAngularCharacteristicItemType
%type <UserDefinedAngularCharacteristicMeasurementTypeVal> y_UserDefinedAngularCharacteristicMeasurementType
%type <UserDefinedAngularCharacteristicMeasurementTypeVal> y_UserDefinedAngularCharacteristicMeasurement_UserDefinedAngularCharacteristicMeasurementType
%type <UserDefinedAngularCharacteristicNominalTypeVal> y_UserDefinedAngularCharacteristicNominalType
%type <UserDefinedAngularCharacteristicNominalTypeVal> y_UserDefinedAngularCharacteristicNominal_UserDefinedAngularCharacteristicNominalType
%type <UserDefinedAngularCharacteristicStatsEvalTypeVal> y_UserDefinedAngularCharacteristicStatsEvalType
%type <UserDefinedAngularCharacteristicStatsEvalTypeVal> y_UserDefinedAngularCharacteristicStats_UserDefinedAngularCharacteristicStatsEvalType
%type <UserDefinedAreaCharacteristicDefinitionTypeVal> y_UserDefinedAreaCharacteristicDefinitionType
%type <UserDefinedAreaCharacteristicDefinitionTypeVal> y_UserDefinedAreaCharacteristicDefinition_UserDefinedAreaCharacteristicDefinitionType
%type <UserDefinedAreaCharacteristicItemTypeVal> y_UserDefinedAreaCharacteristicItemType
%type <UserDefinedAreaCharacteristicItemTypeVal> y_UserDefinedAreaCharacteristicItem_UserDefinedAreaCharacteristicItemType
%type <UserDefinedAreaCharacteristicMeasurementTypeVal> y_UserDefinedAreaCharacteristicMeasurementType
%type <UserDefinedAreaCharacteristicMeasurementTypeVal> y_UserDefinedAreaCharacteristicMeasurement_UserDefinedAreaCharacteristicMeasurementType
%type <UserDefinedAreaCharacteristicNominalTypeVal> y_UserDefinedAreaCharacteristicNominalType
%type <UserDefinedAreaCharacteristicNominalTypeVal> y_UserDefinedAreaCharacteristicNominal_UserDefinedAreaCharacteristicNominalType
%type <UserDefinedAreaCharacteristicStatsEvalTypeVal> y_UserDefinedAreaCharacteristicStatsEvalType
%type <UserDefinedAreaCharacteristicStatsEvalTypeVal> y_UserDefinedAreaCharacteristicStats_UserDefinedAreaCharacteristicStatsEvalType
%type <UserDefinedArea_1138_TypeVal>  y_UserDefinedArea_1138_Type
%type <UserDefinedArea_1138_TypeChoicePairVal> y_UserDefinedArea_1138_TypeChoicePair
%type <UserDefinedArea_1138_TypeVal>  y_UserDefinedArea_1138_UserDefinedArea_1138_Type
%type <UserDefinedArea_1162_TypeVal>  y_UserDefinedArea_1162_Type
%type <UserDefinedArea_1162_TypeVal>  y_UserDefinedArea_1162_UserDefinedArea_1162_Type
%type <UserDefinedArea_1163_TypeVal>  y_UserDefinedArea_1163_Type
%type <UserDefinedArea_1163_TypeVal>  y_UserDefinedArea_1163_UserDefinedArea_1163_Type
%type <UserDefinedArea_1164_TypeVal>  y_UserDefinedArea_1164_Type
%type <UserDefinedArea_1164_TypeVal>  y_UserDefinedArea_1164_UserDefinedArea_1164_Type
%type <UserDefinedArea_1165_TypeVal>  y_UserDefinedArea_1165_Type
%type <UserDefinedArea_1165_TypeVal>  y_UserDefinedArea_1165_UserDefinedArea_1165_Type
%type <UserDefinedAttributeCharacteristicDefinitionTypeVal> y_UserDefinedAttributeCharacteristicDefinitionType
%type <UserDefinedAttributeCharacteristicDefinitionTypeVal> y_UserDefinedAttributeCharacteristicDefinition_UserDefinedAttributeCharacteristicDefinitionType
%type <UserDefinedAttributeCharacteristicItemTypeVal> y_UserDefinedAttributeCharacteristicItemType
%type <UserDefinedAttributeCharacteristicItemTypeVal> y_UserDefinedAttributeCharacteristicItem_UserDefinedAttributeCharacteristicItemType
%type <UserDefinedAttributeCharacteristicMeasurementTypeVal> y_UserDefinedAttributeCharacteristicMeasurementType
%type <UserDefinedAttributeCharacteristicMeasurementTypeVal> y_UserDefinedAttributeCharacteristicMeasurement_UserDefinedAttributeCharacteristicMeasurementType
%type <UserDefinedAttributeCharacteristicNominalTypeVal> y_UserDefinedAttributeCharacteristicNominalType
%type <UserDefinedAttributeCharacteristicNominalTypeVal> y_UserDefinedAttributeCharacteristicNominal_UserDefinedAttributeCharacteristicNominalType
%type <UserDefinedAttributeCharacteristicStatsEvalTypeVal> y_UserDefinedAttributeCharacteristicStatsEvalType
%type <UserDefinedAttributeCharacteristicStatsEvalTypeVal> y_UserDefinedAttributeCharacteristicStats_UserDefinedAttributeCharacteristicStatsEvalType
%type <UserDefinedAxisTypeVal>        y_UserDefinedAxisType
%type <UserDefinedForc_1139_TypeVal>  y_UserDefinedForc_1139_Type
%type <UserDefinedForc_1139_TypeChoicePairVal> y_UserDefinedForc_1139_TypeChoicePair
%type <UserDefinedForc_1139_TypeVal>  y_UserDefinedForc_1139_UserDefinedForc_1139_Type
%type <UserDefinedForc_1166_TypeVal>  y_UserDefinedForc_1166_Type
%type <UserDefinedForc_1166_TypeVal>  y_UserDefinedForc_1166_UserDefinedForc_1166_Type
%type <UserDefinedForc_1167_TypeVal>  y_UserDefinedForc_1167_Type
%type <UserDefinedForc_1167_TypeVal>  y_UserDefinedForc_1167_UserDefinedForc_1167_Type
%type <UserDefinedForc_1168_TypeVal>  y_UserDefinedForc_1168_Type
%type <UserDefinedForc_1168_TypeVal>  y_UserDefinedForc_1168_UserDefinedForc_1168_Type
%type <UserDefinedForc_1169_TypeVal>  y_UserDefinedForc_1169_Type
%type <UserDefinedForc_1169_TypeVal>  y_UserDefinedForc_1169_UserDefinedForc_1169_Type
%type <UserDefinedForceCharacteristicDefinitionTypeVal> y_UserDefinedForceCharacteristicDefinitionType
%type <UserDefinedForceCharacteristicDefinitionTypeVal> y_UserDefinedForceCharacteristicDefinition_UserDefinedForceCharacteristicDefinitionType
%type <UserDefinedForceCharacteristicItemTypeVal> y_UserDefinedForceCharacteristicItemType
%type <UserDefinedForceCharacteristicItemTypeVal> y_UserDefinedForceCharacteristicItem_UserDefinedForceCharacteristicItemType
%type <UserDefinedForceCharacteristicMeasurementTypeVal> y_UserDefinedForceCharacteristicMeasurementType
%type <UserDefinedForceCharacteristicMeasurementTypeVal> y_UserDefinedForceCharacteristicMeasurement_UserDefinedForceCharacteristicMeasurementType
%type <UserDefinedForceCharacteristicNominalTypeVal> y_UserDefinedForceCharacteristicNominalType
%type <UserDefinedForceCharacteristicNominalTypeVal> y_UserDefinedForceCharacteristicNominal_UserDefinedForceCharacteristicNominalType
%type <UserDefinedForceCharacteristicStatsEvalTypeVal> y_UserDefinedForceCharacteristicStatsEvalType
%type <UserDefinedForceCharacteristicStatsEvalTypeVal> y_UserDefinedForceCharacteristicStats_UserDefinedForceCharacteristicStatsEvalType
%type <UserDefinedLine_1140_TypeVal>  y_UserDefinedLine_1140_Type
%type <UserDefinedLine_1140_TypeChoicePairVal> y_UserDefinedLine_1140_TypeChoicePair
%type <UserDefinedLine_1140_TypeVal>  y_UserDefinedLine_1140_UserDefinedLine_1140_Type
%type <UserDefinedLine_1170_TypeVal>  y_UserDefinedLine_1170_Type
%type <UserDefinedLine_1170_TypeVal>  y_UserDefinedLine_1170_UserDefinedLine_1170_Type
%type <UserDefinedLine_1171_TypeVal>  y_UserDefinedLine_1171_Type
%type <UserDefinedLine_1171_TypeVal>  y_UserDefinedLine_1171_UserDefinedLine_1171_Type
%type <UserDefinedLine_1172_TypeVal>  y_UserDefinedLine_1172_Type
%type <UserDefinedLine_1172_TypeVal>  y_UserDefinedLine_1172_UserDefinedLine_1172_Type
%type <UserDefinedLine_1173_TypeVal>  y_UserDefinedLine_1173_Type
%type <UserDefinedLine_1173_TypeVal>  y_UserDefinedLine_1173_UserDefinedLine_1173_Type
%type <UserDefinedLinearCharacteristicDefinitionTypeVal> y_UserDefinedLinearCharacteristicDefinitionType
%type <UserDefinedLinearCharacteristicDefinitionTypeVal> y_UserDefinedLinearCharacteristicDefinition_UserDefinedLinearCharacteristicDefinitionType
%type <UserDefinedLinearCharacteristicItemTypeVal> y_UserDefinedLinearCharacteristicItemType
%type <UserDefinedLinearCharacteristicItemTypeVal> y_UserDefinedLinearCharacteristicItem_UserDefinedLinearCharacteristicItemType
%type <UserDefinedLinearCharacteristicMeasurementTypeVal> y_UserDefinedLinearCharacteristicMeasurementType
%type <UserDefinedLinearCharacteristicMeasurementTypeVal> y_UserDefinedLinearCharacteristicMeasurement_UserDefinedLinearCharacteristicMeasurementType
%type <UserDefinedLinearCharacteristicNominalTypeVal> y_UserDefinedLinearCharacteristicNominalType
%type <UserDefinedLinearCharacteristicNominalTypeVal> y_UserDefinedLinearCharacteristicNominal_UserDefinedLinearCharacteristicNominalType
%type <UserDefinedLinearCharacteristicStatsEvalTypeVal> y_UserDefinedLinearCharacteristicStatsEvalType
%type <UserDefinedLinearCharacteristicStatsEvalTypeVal> y_UserDefinedLinearCharacteristicStats_UserDefinedLinearCharacteristicStatsEvalType
%type <UserDefinedMassCharacteristicDefinitionTypeVal> y_UserDefinedMassCharacteristicDefinitionType
%type <UserDefinedMassCharacteristicDefinitionTypeVal> y_UserDefinedMassCharacteristicDefinition_UserDefinedMassCharacteristicDefinitionType
%type <UserDefinedMassCharacteristicItemTypeVal> y_UserDefinedMassCharacteristicItemType
%type <UserDefinedMassCharacteristicItemTypeVal> y_UserDefinedMassCharacteristicItem_UserDefinedMassCharacteristicItemType
%type <UserDefinedMassCharacteristicMeasurementTypeVal> y_UserDefinedMassCharacteristicMeasurementType
%type <UserDefinedMassCharacteristicMeasurementTypeVal> y_UserDefinedMassCharacteristicMeasurement_UserDefinedMassCharacteristicMeasurementType
%type <UserDefinedMassCharacteristicNominalTypeVal> y_UserDefinedMassCharacteristicNominalType
%type <UserDefinedMassCharacteristicNominalTypeVal> y_UserDefinedMassCharacteristicNominal_UserDefinedMassCharacteristicNominalType
%type <UserDefinedMassCharacteristicStatsEvalTypeVal> y_UserDefinedMassCharacteristicStatsEvalType
%type <UserDefinedMassCharacteristicStatsEvalTypeVal> y_UserDefinedMassCharacteristicStats_UserDefinedMassCharacteristicStatsEvalType
%type <UserDefinedMass_1141_TypeVal>  y_UserDefinedMass_1141_Type
%type <UserDefinedMass_1141_TypeChoicePairVal> y_UserDefinedMass_1141_TypeChoicePair
%type <UserDefinedMass_1141_TypeVal>  y_UserDefinedMass_1141_UserDefinedMass_1141_Type
%type <UserDefinedMass_1174_TypeVal>  y_UserDefinedMass_1174_Type
%type <UserDefinedMass_1174_TypeVal>  y_UserDefinedMass_1174_UserDefinedMass_1174_Type
%type <UserDefinedMass_1175_TypeVal>  y_UserDefinedMass_1175_Type
%type <UserDefinedMass_1175_TypeVal>  y_UserDefinedMass_1175_UserDefinedMass_1175_Type
%type <UserDefinedMass_1176_TypeVal>  y_UserDefinedMass_1176_Type
%type <UserDefinedMass_1176_TypeVal>  y_UserDefinedMass_1176_UserDefinedMass_1176_Type
%type <UserDefinedMass_1177_TypeVal>  y_UserDefinedMass_1177_Type
%type <UserDefinedMass_1177_TypeVal>  y_UserDefinedMass_1177_UserDefinedMass_1177_Type
%type <UserDefinedPres_1142_TypeVal>  y_UserDefinedPres_1142_Type
%type <UserDefinedPres_1142_TypeChoicePairVal> y_UserDefinedPres_1142_TypeChoicePair
%type <UserDefinedPres_1142_TypeVal>  y_UserDefinedPres_1142_UserDefinedPres_1142_Type
%type <UserDefinedPres_1178_TypeVal>  y_UserDefinedPres_1178_Type
%type <UserDefinedPres_1178_TypeVal>  y_UserDefinedPres_1178_UserDefinedPres_1178_Type
%type <UserDefinedPres_1179_TypeVal>  y_UserDefinedPres_1179_Type
%type <UserDefinedPres_1179_TypeVal>  y_UserDefinedPres_1179_UserDefinedPres_1179_Type
%type <UserDefinedPres_1180_TypeVal>  y_UserDefinedPres_1180_Type
%type <UserDefinedPres_1180_TypeVal>  y_UserDefinedPres_1180_UserDefinedPres_1180_Type
%type <UserDefinedPres_1181_TypeVal>  y_UserDefinedPres_1181_Type
%type <UserDefinedPres_1181_TypeVal>  y_UserDefinedPres_1181_UserDefinedPres_1181_Type
%type <UserDefinedPressureCharacteristicDefinitionTypeVal> y_UserDefinedPressureCharacteristicDefinitionType
%type <UserDefinedPressureCharacteristicDefinitionTypeVal> y_UserDefinedPressureCharacteristicDefinition_UserDefinedPressureCharacteristicDefinitionType
%type <UserDefinedPressureCharacteristicItemTypeVal> y_UserDefinedPressureCharacteristicItemType
%type <UserDefinedPressureCharacteristicItemTypeVal> y_UserDefinedPressureCharacteristicItem_UserDefinedPressureCharacteristicItemType
%type <UserDefinedPressureCharacteristicMeasurementTypeVal> y_UserDefinedPressureCharacteristicMeasurementType
%type <UserDefinedPressureCharacteristicMeasurementTypeVal> y_UserDefinedPressureCharacteristicMeasurement_UserDefinedPressureCharacteristicMeasurementType
%type <UserDefinedPressureCharacteristicNominalTypeVal> y_UserDefinedPressureCharacteristicNominalType
%type <UserDefinedPressureCharacteristicNominalTypeVal> y_UserDefinedPressureCharacteristicNominal_UserDefinedPressureCharacteristicNominalType
%type <UserDefinedPressureCharacteristicStatsEvalTypeVal> y_UserDefinedPressureCharacteristicStatsEvalType
%type <UserDefinedPressureCharacteristicStatsEvalTypeVal> y_UserDefinedPressureCharacteristicStats_UserDefinedPressureCharacteristicStatsEvalType
%type <UserDefinedReso_1243_TypeVal>  y_UserDefinedReso_1243_Type
%type <UserDefinedReso_1243_TypeChoicePairVal> y_UserDefinedReso_1243_TypeChoicePair
%type <UserDefinedReso_1243_TypeVal>  y_UserDefinedReso_1243_UserDefinedReso_1243_Type
%type <UserDefinedReso_1246_TypeVal>  y_UserDefinedReso_1246_Type
%type <UserDefinedReso_1246_TypeVal>  y_UserDefinedReso_1246_UserDefinedReso_1246_Type
%type <UserDefinedResolutionTypeVal>  y_UserDefinedResolutionType
%type <UserDefinedResolutionTypeVal>  y_UserDefinedResolution_UserDefinedResolutionType
%type <UserDefinedSpee_1143_TypeVal>  y_UserDefinedSpee_1143_Type
%type <UserDefinedSpee_1143_TypeChoicePairVal> y_UserDefinedSpee_1143_TypeChoicePair
%type <UserDefinedSpee_1143_TypeVal>  y_UserDefinedSpee_1143_UserDefinedSpee_1143_Type
%type <UserDefinedSpee_1182_TypeVal>  y_UserDefinedSpee_1182_Type
%type <UserDefinedSpee_1182_TypeVal>  y_UserDefinedSpee_1182_UserDefinedSpee_1182_Type
%type <UserDefinedSpee_1183_TypeVal>  y_UserDefinedSpee_1183_Type
%type <UserDefinedSpee_1183_TypeVal>  y_UserDefinedSpee_1183_UserDefinedSpee_1183_Type
%type <UserDefinedSpee_1184_TypeVal>  y_UserDefinedSpee_1184_Type
%type <UserDefinedSpee_1184_TypeVal>  y_UserDefinedSpee_1184_UserDefinedSpee_1184_Type
%type <UserDefinedSpee_1185_TypeVal>  y_UserDefinedSpee_1185_Type
%type <UserDefinedSpee_1185_TypeVal>  y_UserDefinedSpee_1185_UserDefinedSpee_1185_Type
%type <UserDefinedSpeedCharacteristicDefinitionTypeVal> y_UserDefinedSpeedCharacteristicDefinitionType
%type <UserDefinedSpeedCharacteristicDefinitionTypeVal> y_UserDefinedSpeedCharacteristicDefinition_UserDefinedSpeedCharacteristicDefinitionType
%type <UserDefinedSpeedCharacteristicItemTypeVal> y_UserDefinedSpeedCharacteristicItemType
%type <UserDefinedSpeedCharacteristicItemTypeVal> y_UserDefinedSpeedCharacteristicItem_UserDefinedSpeedCharacteristicItemType
%type <UserDefinedSpeedCharacteristicMeasurementTypeVal> y_UserDefinedSpeedCharacteristicMeasurementType
%type <UserDefinedSpeedCharacteristicMeasurementTypeVal> y_UserDefinedSpeedCharacteristicMeasurement_UserDefinedSpeedCharacteristicMeasurementType
%type <UserDefinedSpeedCharacteristicNominalTypeVal> y_UserDefinedSpeedCharacteristicNominalType
%type <UserDefinedSpeedCharacteristicNominalTypeVal> y_UserDefinedSpeedCharacteristicNominal_UserDefinedSpeedCharacteristicNominalType
%type <UserDefinedSpeedCharacteristicStatsEvalTypeVal> y_UserDefinedSpeedCharacteristicStatsEvalType
%type <UserDefinedSpeedCharacteristicStatsEvalTypeVal> y_UserDefinedSpeedCharacteristicStats_UserDefinedSpeedCharacteristicStatsEvalType
%type <XmlTokenVal>                   y_UserDefinedStrategy_XmlToken
%type <UserDefinedTemp_1144_TypeVal>  y_UserDefinedTemp_1144_Type
%type <UserDefinedTemp_1144_TypeChoicePairVal> y_UserDefinedTemp_1144_TypeChoicePair
%type <UserDefinedTemp_1144_TypeVal>  y_UserDefinedTemp_1144_UserDefinedTemp_1144_Type
%type <UserDefinedTemp_1186_TypeVal>  y_UserDefinedTemp_1186_Type
%type <UserDefinedTemp_1186_TypeVal>  y_UserDefinedTemp_1186_UserDefinedTemp_1186_Type
%type <UserDefinedTemp_1187_TypeVal>  y_UserDefinedTemp_1187_Type
%type <UserDefinedTemp_1187_TypeVal>  y_UserDefinedTemp_1187_UserDefinedTemp_1187_Type
%type <UserDefinedTemp_1188_TypeVal>  y_UserDefinedTemp_1188_Type
%type <UserDefinedTemp_1188_TypeVal>  y_UserDefinedTemp_1188_UserDefinedTemp_1188_Type
%type <UserDefinedTemp_1189_TypeVal>  y_UserDefinedTemp_1189_Type
%type <UserDefinedTemp_1189_TypeVal>  y_UserDefinedTemp_1189_UserDefinedTemp_1189_Type
%type <UserDefinedTemperatureCharacteristicDefinitionTypeVal> y_UserDefinedTemperatureCharacteristicDefinitionType
%type <UserDefinedTemperatureCharacteristicDefinitionTypeVal> y_UserDefinedTemperatureCharacteristicDefinition_UserDefinedTemperatureCharacteristicDefinitionType
%type <UserDefinedTemperatureCharacteristicItemTypeVal> y_UserDefinedTemperatureCharacteristicItemType
%type <UserDefinedTemperatureCharacteristicItemTypeVal> y_UserDefinedTemperatureCharacteristicItem_UserDefinedTemperatureCharacteristicItemType
%type <UserDefinedTemperatureCharacteristicMeasurementTypeVal> y_UserDefinedTemperatureCharacteristicMeasurementType
%type <UserDefinedTemperatureCharacteristicMeasurementTypeVal> y_UserDefinedTemperatureCharacteristicMeasurement_UserDefinedTemperatureCharacteristicMeasurementType
%type <UserDefinedTemperatureCharacteristicNominalTypeVal> y_UserDefinedTemperatureCharacteristicNominalType
%type <UserDefinedTemperatureCharacteristicNominalTypeVal> y_UserDefinedTemperatureCharacteristicNominal_UserDefinedTemperatureCharacteristicNominalType
%type <UserDefinedTemperatureCharacteristicStatsEvalTypeVal> y_UserDefinedTemperatureCharacteristicStatsEvalType
%type <UserDefinedTemperatureCharacteristicStatsEvalTypeVal> y_UserDefinedTemperatureCharacteristicStats_UserDefinedTemperatureCharacteristicStatsEvalType
%type <UserDefinedTimeCharacteristicDefinitionTypeVal> y_UserDefinedTimeCharacteristicDefinitionType
%type <UserDefinedTimeCharacteristicDefinitionTypeVal> y_UserDefinedTimeCharacteristicDefinition_UserDefinedTimeCharacteristicDefinitionType
%type <UserDefinedTimeCharacteristicItemTypeVal> y_UserDefinedTimeCharacteristicItemType
%type <UserDefinedTimeCharacteristicItemTypeVal> y_UserDefinedTimeCharacteristicItem_UserDefinedTimeCharacteristicItemType
%type <UserDefinedTimeCharacteristicMeasurementTypeVal> y_UserDefinedTimeCharacteristicMeasurementType
%type <UserDefinedTimeCharacteristicMeasurementTypeVal> y_UserDefinedTimeCharacteristicMeasurement_UserDefinedTimeCharacteristicMeasurementType
%type <UserDefinedTimeCharacteristicNominalTypeVal> y_UserDefinedTimeCharacteristicNominalType
%type <UserDefinedTimeCharacteristicNominalTypeVal> y_UserDefinedTimeCharacteristicNominal_UserDefinedTimeCharacteristicNominalType
%type <UserDefinedTimeCharacteristicStatsEvalTypeVal> y_UserDefinedTimeCharacteristicStatsEvalType
%type <UserDefinedTimeCharacteristicStatsEvalTypeVal> y_UserDefinedTimeCharacteristicStats_UserDefinedTimeCharacteristicStatsEvalType
%type <UserDefinedTime_1145_TypeVal>  y_UserDefinedTime_1145_Type
%type <UserDefinedTime_1145_TypeChoicePairVal> y_UserDefinedTime_1145_TypeChoicePair
%type <UserDefinedTime_1145_TypeVal>  y_UserDefinedTime_1145_UserDefinedTime_1145_Type
%type <UserDefinedTime_1190_TypeVal>  y_UserDefinedTime_1190_Type
%type <UserDefinedTime_1190_TypeVal>  y_UserDefinedTime_1190_UserDefinedTime_1190_Type
%type <UserDefinedTime_1191_TypeVal>  y_UserDefinedTime_1191_Type
%type <UserDefinedTime_1191_TypeVal>  y_UserDefinedTime_1191_UserDefinedTime_1191_Type
%type <UserDefinedTime_1192_TypeVal>  y_UserDefinedTime_1192_Type
%type <UserDefinedTime_1192_TypeVal>  y_UserDefinedTime_1192_UserDefinedTime_1192_Type
%type <UserDefinedTime_1193_TypeVal>  y_UserDefinedTime_1193_Type
%type <UserDefinedTime_1193_TypeVal>  y_UserDefinedTime_1193_UserDefinedTime_1193_Type
%type <MeasuredUserDefinedUnitValueTypeVal> y_UserDefinedUnitAbsoluteLinearity_MeasuredUserDefinedUnitValueType
%type <UserDefinedUnitCharacteristicDefinitionTypeVal> y_UserDefinedUnitCharacteristicDefinitionType
%type <UserDefinedUnitCharacteristicDefinitionTypeVal> y_UserDefinedUnitCharacteristicDefinition_UserDefinedUnitCharacteristicDefinitionType
%type <UserDefinedUnitCharacteristicItemTypeVal> y_UserDefinedUnitCharacteristicItemType
%type <UserDefinedUnitCharacteristicItemTypeVal> y_UserDefinedUnitCharacteristicItem_UserDefinedUnitCharacteristicItemType
%type <UserDefinedUnitCharacteristicMeasurementTypeVal> y_UserDefinedUnitCharacteristicMeasurementType
%type <UserDefinedUnitCharacteristicMeasurementTypeVal> y_UserDefinedUnitCharacteristicMeasurement_UserDefinedUnitCharacteristicMeasurementType
%type <UserDefinedUnitCharacteristicNominalTypeVal> y_UserDefinedUnitCharacteristicNominalType
%type <UserDefinedUnitCharacteristicNominalTypeVal> y_UserDefinedUnitCharacteristicNominal_UserDefinedUnitCharacteristicNominalType
%type <UserDefinedUnitCharacteristicStatsEvalTypeVal> y_UserDefinedUnitCharacteristicStatsEvalType
%type <UserDefinedUnitCharacteristicStatsEvalTypeVal> y_UserDefinedUnitCharacteristicStats_UserDefinedUnitCharacteristicStatsEvalType
%type <CriterionUserDefinedUnitTypeVal> y_UserDefinedUnitCriterion_CriterionUserDefinedUnitType
%type <UserDefinedUnitValueTypeVal>   y_UserDefinedUnitLimit_UserDefinedUnitValueType
%type <MeasuredUserDefinedUnitValueTypeVal> y_UserDefinedUnitMeasurement_MeasuredUserDefinedUnitValueType
%type <SummariesStatisticsUserDefinedUnitTypeVal> y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
%type <SummaryStatisticsUserDefinedUnitTypeVal> y_UserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType
%type <UserDefinedUnitTypeVal>        y_UserDefinedUnitType
%type <UserDefinedUnitValueTypeVal>   y_UserDefinedUnitValueType
%type <UserDefinedUnit_1074_TypeVal>  y_UserDefinedUnit_1074_Type
%type <UserDefinedUnit_1074_TypeChoicePairVal> y_UserDefinedUnit_1074_TypeChoicePair
%type <UserDefinedUnit_1074_TypeVal>  y_UserDefinedUnit_1074_UserDefinedUnit_1074_Type
%type <UserDefinedUnit_1089_TypeVal>  y_UserDefinedUnit_1089_Type
%type <UserDefinedUnit_1089_TypeVal>  y_UserDefinedUnit_1089_UserDefinedUnit_1089_Type
%type <UserDefinedUnit_1146_TypeVal>  y_UserDefinedUnit_1146_Type
%type <UserDefinedUnit_1146_TypeChoicePairVal> y_UserDefinedUnit_1146_TypeChoicePair
%type <UserDefinedUnit_1146_TypeVal>  y_UserDefinedUnit_1146_UserDefinedUnit_1146_Type
%type <UserDefinedUnit_1194_TypeVal>  y_UserDefinedUnit_1194_Type
%type <UserDefinedUnit_1194_TypeVal>  y_UserDefinedUnit_1194_UserDefinedUnit_1194_Type
%type <UserDefinedUnit_1195_TypeVal>  y_UserDefinedUnit_1195_Type
%type <UserDefinedUnit_1195_TypeVal>  y_UserDefinedUnit_1195_UserDefinedUnit_1195_Type
%type <UserDefinedUnit_1196_TypeVal>  y_UserDefinedUnit_1196_Type
%type <UserDefinedUnit_1196_TypeVal>  y_UserDefinedUnit_1196_UserDefinedUnit_1196_Type
%type <UserDefinedUnit_1197_TypeVal>  y_UserDefinedUnit_1197_Type
%type <UserDefinedUnit_1197_TypeVal>  y_UserDefinedUnit_1197_UserDefinedUnit_1197_Type
%type <UserDefinedUnitTypeVal>        y_UserDefinedUnit_UserDefinedUnitType
%type <UserDefinedUnitsTypeVal>       y_UserDefinedUnitsType
%type <UserDefinedUnitsTypeVal>       y_UserDefinedUnits_UserDefinedUnitsType_0
%type <QIFReferenceTypeVal>           y_UserDefinedWorkingVolumeId_QIFReferenceType
%type <UserDefinedWorkingVolumeTypeVal> y_UserDefinedWorkingVolumeType
%type <UserDefinedWorkingVolumeTypeVal> y_UserDefinedWorkingVolume_UserDefinedWorkingVolumeType
%type <XmlDecimalVal>                 y_Val_XmlDecimal
%type <ValidationBodyTypeVal>         y_ValidationBodyType
%type <ValidationCountsTypeVal>       y_ValidationCountsType
%type <ValidationCountsTypeVal>       y_ValidationCounts_ValidationCountsType_0
%type <ValidationEdgeTypeVal>         y_ValidationEdgeType
%type <ValidationFaceTypeVal>         y_ValidationFaceType
%type <ValidationPartAssemblyInstanceTypeVal> y_ValidationPartAssemblyInstanceType
%type <ValidationPartAssemblyInstancesTypeVal> y_ValidationPartAssemblyInstancesType
%type <ValidationPartAssemblyTypeVal> y_ValidationPartAssemblyType
%type <ValidationPoint_1003_TypeVal>  y_ValidationPoint_1003_Type
%type <ValidationPoint_1003_TypeChoicePairVal> y_ValidationPoint_1003_TypeChoicePair
%type <ValidationPoint_1003_TypeVal>  y_ValidationPoint_1003_ValidationPoint_1003_Type
%type <ValidationPoint_1004_TypeVal>  y_ValidationPoint_1004_Type
%type <ValidationPoint_1004_TypeChoicePairVal> y_ValidationPoint_1004_TypeChoicePair
%type <ValidationPoint_1004_TypeVal>  y_ValidationPoint_1004_ValidationPoint_1004_Type_0
%type <ValidationPointsTypeVal>       y_ValidationPointsType
%type <ValidationBodyTypeVal>         y_Validation_ValidationBodyType_0
%type <ValidationEdgeTypeVal>         y_Validation_ValidationEdgeType_0
%type <ValidationFaceTypeVal>         y_Validation_ValidationFaceType_0
%type <ValidationPartAssemblyTypeVal> y_Validation_ValidationPartAssemblyType_0
%type <StatsWithTolAngularTypeVal>    y_ValueStats_StatsWithTolAngularType
%type <StatsWithTolAreaTypeVal>       y_ValueStats_StatsWithTolAreaType
%type <StatsWithTolForceTypeVal>      y_ValueStats_StatsWithTolForceType
%type <StatsWithTolLinearTypeVal>     y_ValueStats_StatsWithTolLinearType
%type <StatsWithTolLinearTypeVal>     y_ValueStats_StatsWithTolLinearType_0
%type <StatsWithTolMassTypeVal>       y_ValueStats_StatsWithTolMassType
%type <StatsWithTolPressureTypeVal>   y_ValueStats_StatsWithTolPressureType
%type <StatsWithTolSpeedTypeVal>      y_ValueStats_StatsWithTolSpeedType
%type <StatsWithTolTemperatureTypeVal> y_ValueStats_StatsWithTolTemperatureType
%type <StatsWithTolTimeTypeVal>       y_ValueStats_StatsWithTolTimeType
%type <StatsWithTolUserDefinedUnitTypeVal> y_ValueStats_StatsWithTolUserDefinedUnitType
%type <D4TypeVal>                     y_Value_D4Type
%type <LinearValueTypeVal>            y_Value_LinearValueType
%type <MeasuredAngularValueTypeVal>   y_Value_MeasuredAngularValueType_0
%type <MeasuredAreaValueTypeVal>      y_Value_MeasuredAreaValueType_0
%type <MeasuredDecimalTypeVal>        y_Value_MeasuredDecimalType
%type <MeasuredForceValueTypeVal>     y_Value_MeasuredForceValueType_0
%type <MeasuredLinearValueTypeVal>    y_Value_MeasuredLinearValueType_0
%type <MeasuredMassValueTypeVal>      y_Value_MeasuredMassValueType_0
%type <MeasuredPressureValueTypeVal>  y_Value_MeasuredPressureValueType_0
%type <MeasuredSpeedValueTypeVal>     y_Value_MeasuredSpeedValueType_0
%type <MeasuredTemperatureValueTypeVal> y_Value_MeasuredTemperatureValueType_0
%type <MeasuredTimeValueTypeVal>      y_Value_MeasuredTimeValueType_0
%type <MeasuredUserDefinedUnitValueTypeVal> y_Value_MeasuredUserDefinedUnitValueType_0
%type <QPIdTypeVal>                   y_Value_QPIdType
%type <XmlNonNegativeIntegerVal>      y_Value_XmlNonNegativeInteger
%type <XmlStringVal>                  y_Value_XmlString_0
%type <ListTokenTypeVal>              y_Values_ListTokenType
%type <SubgroupDecimalArrayTypeVal>   y_Values_SubgroupDecimalArrayType
%type <SubgroupIntegerArrayTypeVal>   y_Values_SubgroupIntegerArrayType
%type <XmlBooleanVal>                 y_VariableAngle_XmlBoolean_0
%type <VariableDeclarationTypeVal>    y_VariableDeclarationType
%type <XmlIDREFVal>                   y_VariableName_XmlIDREF
%type <VariableSetTypeVal>            y_VariableSetType
%type <VariableSetTypeVal>            y_VariableSet_VariableSetType
%type <VariableValueTypeVal>          y_VariableValueType
%type <VariableValueTypeVal>          y_VariableValue_VariableValueType
%type <VariableDeclarationTypeVal>    y_Variable_VariableDeclarationType
%type <VectorSimpleTypeVal>           y_VectorSimpleType
%type <VectorTypeVal>                 y_VectorType
%type <MeasuredUnitVectorTypeVal>     y_Vector_MeasuredUnitVectorType
%type <UnitVectorTypeVal>             y_Vector_UnitVectorType
%type <UnitVectorTypeVal>             y_Vector_UnitVectorType_0
%type <XmlTokenVal>                   y_VendorName_XmlToken
%type <VersionBaseTypeVal>            y_VersionBaseType
%type <VersionHistoryTypeVal>         y_VersionHistoryType
%type <VersionHistoryTypeVal>         y_VersionHistory_VersionHistoryType_0
%type <VersionReferenceTypeVal>       y_VersionReferenceType
%type <VersionTypeVal>                y_VersionType
%type <VersionBaseTypeVal>            y_Version_VersionBaseType_0
%type <VersionTypeVal>                y_Version_VersionType_0
%type <XmlStringVal>                  y_Version_XmlString_0
%type <XmlTokenVal>                   y_Version_XmlToken_0
%type <ElementReferenceTypeVal>       y_VertexBeg_ElementReferenceType
%type <ElementReferenceTypeVal>       y_VertexEnd_ElementReferenceType
%type <QIFReferenceFullTypeVal>       y_VertexId_QIFReferenceFullType
%type <ArrayReferenceTypeVal>         y_VertexIds_ArrayReferenceType_0
%type <VertexSetTypeVal>              y_VertexSetType
%type <VertexSetTypeVal>              y_VertexSet_VertexSetType_0
%type <VertexTypeVal>                 y_VertexType
%type <MeasuredPointTypeVal>          y_Vertex_MeasuredPointType_0
%type <PointTypeVal>                  y_Vertex_PointType_0
%type <VertexTypeVal>                 y_Vertex_VertexType
%type <LinearValueTypeVal>            y_VerticalFieldOfView_LinearValueType_0
%type <ArrayBinaryTypeVal>            y_VerticesBinary_ArrayBinaryType
%type <ArrayPoint2dTypeVal>           y_Vertices_ArrayPoint2dType
%type <ArrayPointTypeVal>             y_Vertices_ArrayPointType
%type <ArrayReferenceTypeVal>         y_Vertices_ArrayReferenceType_0
%type <UserDefinedUnitValueTypeVal>   y_VibrationTolerance_UserDefinedUnitValueType_0
%type <VideoInstructionTypeVal>       y_VideoInstructionType
%type <VideoInstructionTypeVal>       y_VideoInstruction_VideoInstructionType
%type <QIFReferenceFullTypeVal>       y_ViewId_QIFReferenceFullType
%type <ArrayReferenceTypeVal>         y_ViewIds_ArrayReferenceType_0
%type <PointSimpleTypeVal>            y_ViewPlaneOrigin_PointSimpleType
%type <ViewSetTypeVal>                y_ViewSetType
%type <ViewSetTypeVal>                y_ViewSet_ViewSetType_0
%type <XmlStringVal>                  y_View_XmlString
%type <VirtualMeasurementTypeVal>     y_VirtualMeasurementType
%type <VirtualMeasurementTypeVal>     y_VirtualMeasurement_VirtualMeasurementType_0
%type <VisualizationSetTypeVal>       y_VisualizationSetType
%type <VisualizationSetTypeVal>       y_VisualizationSet_VisualizationSetType_0
%type <XmlDoubleVal>                  y_Volume_XmlDouble_0
%type <VolumetricPerformanceTestTypeVal> y_VolumetricPerformanceTestType
%type <VolumetricPerformanceTestTypeVal> y_VolumetricPerformanceTest_VolumetricPerformanceTestType_0
%type <LinearValueTypeVal>            y_VolumetricPerformance_LinearValueType
%type <LinearValueTypeVal>            y_VolumetricUncertainty_LinearValueType_0
%type <ArrayDoubleTypeVal>            y_Weights_ArrayDoubleType_0
%type <WeldBevelCharacteristicDefinitionTypeVal> y_WeldBevelCharacteristicDefinitionType
%type <WeldBevelCharacteristicDefinitionTypeVal> y_WeldBevelCharacteristicDefinition_WeldBevelCharacteristicDefinitionType
%type <WeldBevelCharacteristicItemTypeVal> y_WeldBevelCharacteristicItemType
%type <WeldBevelCharacteristicItemTypeVal> y_WeldBevelCharacteristicItem_WeldBevelCharacteristicItemType
%type <WeldBevelCharacteristicMeasurementTypeVal> y_WeldBevelCharacteristicMeasurementType
%type <WeldBevelCharacteristicMeasurementTypeVal> y_WeldBevelCharacteristicMeasurement_WeldBevelCharacteristicMeasurementType
%type <WeldBevelCharacteristicNominalTypeVal> y_WeldBevelCharacteristicNominalType
%type <WeldBevelCharacteristicNominalTypeVal> y_WeldBevelCharacteristicNominal_WeldBevelCharacteristicNominalType
%type <WeldBevelCharacteristicStatsEvalTypeVal> y_WeldBevelCharacteristicStatsEvalType
%type <WeldBevelCharacteristicStatsEvalTypeVal> y_WeldBevelCharacteristicStats_WeldBevelCharacteristicStatsEvalType
%type <ArrayReferenceFullTypeVal>     y_WeldCharacteristicDefinitionIds_ArrayReferenceFullType
%type <ArrayReferenceTypeVal>         y_WeldCharacteristicItemIds_ArrayReferenceType
%type <ArrayReferenceTypeVal>         y_WeldCharacteristicMeasurementIds_ArrayReferenceType
%type <ArrayReferenceFullTypeVal>     y_WeldCharacteristicNominalIds_ArrayReferenceFullType
%type <WeldCompoundCharacteristicDefinitionTypeVal> y_WeldCompoundCharacteristicDefinitionType
%type <WeldCompoundCharacteristicDefinitionTypeVal> y_WeldCompoundCharacteristicDefinition_WeldCompoundCharacteristicDefinitionType
%type <WeldCompoundCharacteristicItemTypeVal> y_WeldCompoundCharacteristicItemType
%type <WeldCompoundCharacteristicItemTypeVal> y_WeldCompoundCharacteristicItem_WeldCompoundCharacteristicItemType
%type <WeldCompoundCharacteristicMeasurementTypeVal> y_WeldCompoundCharacteristicMeasurementType
%type <WeldCompoundCharacteristicMeasurementTypeVal> y_WeldCompoundCharacteristicMeasurement_WeldCompoundCharacteristicMeasurementType
%type <WeldCompoundCharacteristicNominalTypeVal> y_WeldCompoundCharacteristicNominalType
%type <WeldCompoundCharacteristicNominalTypeVal> y_WeldCompoundCharacteristicNominal_WeldCompoundCharacteristicNominalType
%type <WeldCompoundCharacteristicStatsEvalTypeVal> y_WeldCompoundCharacteristicStatsEvalType
%type <WeldCompoundCharacteristicStatsEvalTypeVal> y_WeldCompoundCharacteristicStats_WeldCompoundCharacteristicStatsEvalType
%type <WeldContourSymbolEnumTypeVal>  y_WeldContourSymbolEnumType
%type <WeldContourSymbolTypeVal>      y_WeldContourSymbolType
%type <WeldEdgeCharacteristicDefinitionTypeVal> y_WeldEdgeCharacteristicDefinitionType
%type <WeldEdgeCharacteristicDefinitionTypeVal> y_WeldEdgeCharacteristicDefinition_WeldEdgeCharacteristicDefinitionType
%type <WeldEdgeCharacteristicItemTypeVal> y_WeldEdgeCharacteristicItemType
%type <WeldEdgeCharacteristicItemTypeVal> y_WeldEdgeCharacteristicItem_WeldEdgeCharacteristicItemType
%type <WeldEdgeCharacteristicMeasurementTypeVal> y_WeldEdgeCharacteristicMeasurementType
%type <WeldEdgeCharacteristicMeasurementTypeVal> y_WeldEdgeCharacteristicMeasurement_WeldEdgeCharacteristicMeasurementType
%type <WeldEdgeCharacteristicNominalTypeVal> y_WeldEdgeCharacteristicNominalType
%type <WeldEdgeCharacteristicNominalTypeVal> y_WeldEdgeCharacteristicNominal_WeldEdgeCharacteristicNominalType
%type <WeldEdgeCharacteristicStatsEvalTypeVal> y_WeldEdgeCharacteristicStatsEvalType
%type <WeldEdgeCharacteristicStatsEvalTypeVal> y_WeldEdgeCharacteristicStats_WeldEdgeCharacteristicStatsEvalType
%type <WeldFilletBothSidesTypeVal>    y_WeldFilletBothSidesType
%type <WeldFilletChara_1075_TypeVal>  y_WeldFilletChara_1075_Type
%type <WeldFilletChara_1075_TypeChoicePairVal> y_WeldFilletChara_1075_TypeChoicePair
%type <WeldFilletChara_1075_TypeVal>  y_WeldFilletChara_1075_WeldFilletChara_1075_Type_0
%type <WeldFilletChara_1076_TypeVal>  y_WeldFilletChara_1076_Type
%type <WeldFilletChara_1076_TypeChoicePairVal> y_WeldFilletChara_1076_TypeChoicePair
%type <WeldFilletChara_1076_TypeVal>  y_WeldFilletChara_1076_WeldFilletChara_1076_Type_0
%type <WeldFilletCharacteristicDefinitionTypeVal> y_WeldFilletCharacteristicDefinitionType
%type <WeldFilletCharacteristicDefinitionTypeVal> y_WeldFilletCharacteristicDefinition_WeldFilletCharacteristicDefinitionType
%type <WeldFilletCharacteristicItemTypeVal> y_WeldFilletCharacteristicItemType
%type <WeldFilletCharacteristicItemTypeVal> y_WeldFilletCharacteristicItem_WeldFilletCharacteristicItemType
%type <WeldFilletCharacteristicMeasurementTypeVal> y_WeldFilletCharacteristicMeasurementType
%type <WeldFilletCharacteristicMeasurementTypeVal> y_WeldFilletCharacteristicMeasurement_WeldFilletCharacteristicMeasurementType
%type <WeldFilletCharacteristicNominalTypeVal> y_WeldFilletCharacteristicNominalType
%type <WeldFilletCharacteristicNominalTypeVal> y_WeldFilletCharacteristicNominal_WeldFilletCharacteristicNominalType
%type <WeldFilletCharacteristicStatsEvalTypeVal> y_WeldFilletCharacteristicStatsEvalType
%type <WeldFilletCharacteristicStatsEvalTypeVal> y_WeldFilletCharacteristicStats_WeldFilletCharacteristicStatsEvalType
%type <WeldFilletEqualLegLengthTypeVal> y_WeldFilletEqualLegLengthType
%type <WeldFilletOneSi_1077_TypeVal>  y_WeldFilletOneSi_1077_Type
%type <WeldFilletOneSi_1077_TypeChoicePairVal> y_WeldFilletOneSi_1077_TypeChoicePair
%type <WeldFilletOneSi_1077_TypeVal>  y_WeldFilletOneSi_1077_WeldFilletOneSi_1077_Type_0
%type <WeldFilletOneSideInBothSidesTypeVal> y_WeldFilletOneSideInBothSidesType
%type <WeldFilletOneSideTypeVal>      y_WeldFilletOneSideType
%type <WeldFilletUnequalLegLengthTypeVal> y_WeldFilletUnequalLegLengthType
%type <WeldFinishingDesignatorEnumTypeVal> y_WeldFinishingDesignatorEnumType
%type <WeldFinishingTypeVal>          y_WeldFinishingType
%type <WeldFlareBevelCharacteristicDefinitionTypeVal> y_WeldFlareBevelCharacteristicDefinitionType
%type <WeldFlareBevelCharacteristicDefinitionTypeVal> y_WeldFlareBevelCharacteristicDefinition_WeldFlareBevelCharacteristicDefinitionType
%type <WeldFlareBevelCharacteristicItemTypeVal> y_WeldFlareBevelCharacteristicItemType
%type <WeldFlareBevelCharacteristicItemTypeVal> y_WeldFlareBevelCharacteristicItem_WeldFlareBevelCharacteristicItemType
%type <WeldFlareBevelCharacteristicMeasurementTypeVal> y_WeldFlareBevelCharacteristicMeasurementType
%type <WeldFlareBevelCharacteristicMeasurementTypeVal> y_WeldFlareBevelCharacteristicMeasurement_WeldFlareBevelCharacteristicMeasurementType
%type <WeldFlareBevelCharacteristicNominalTypeVal> y_WeldFlareBevelCharacteristicNominalType
%type <WeldFlareBevelCharacteristicNominalTypeVal> y_WeldFlareBevelCharacteristicNominal_WeldFlareBevelCharacteristicNominalType
%type <WeldFlareBevelCharacteristicStatsEvalTypeVal> y_WeldFlareBevelCharacteristicStatsEvalType
%type <WeldFlareBevelCharacteristicStatsEvalTypeVal> y_WeldFlareBevelCharacteristicStats_WeldFlareBevelCharacteristicStatsEvalType
%type <WeldFlareVCharacteristicDefinitionTypeVal> y_WeldFlareVCharacteristicDefinitionType
%type <WeldFlareVCharacteristicDefinitionTypeVal> y_WeldFlareVCharacteristicDefinition_WeldFlareVCharacteristicDefinitionType
%type <WeldFlareVCharacteristicItemTypeVal> y_WeldFlareVCharacteristicItemType
%type <WeldFlareVCharacteristicItemTypeVal> y_WeldFlareVCharacteristicItem_WeldFlareVCharacteristicItemType
%type <WeldFlareVCharacteristicMeasurementTypeVal> y_WeldFlareVCharacteristicMeasurementType
%type <WeldFlareVCharacteristicMeasurementTypeVal> y_WeldFlareVCharacteristicMeasurement_WeldFlareVCharacteristicMeasurementType
%type <WeldFlareVCharacteristicNominalTypeVal> y_WeldFlareVCharacteristicNominalType
%type <WeldFlareVCharacteristicNominalTypeVal> y_WeldFlareVCharacteristicNominal_WeldFlareVCharacteristicNominalType
%type <WeldFlareVCharacteristicStatsEvalTypeVal> y_WeldFlareVCharacteristicStatsEvalType
%type <WeldFlareVCharacteristicStatsEvalTypeVal> y_WeldFlareVCharacteristicStats_WeldFlareVCharacteristicStatsEvalType
%type <WeldGrooveBothSidesExtendedTypeVal> y_WeldGrooveBothSidesExtendedType
%type <WeldGrooveChara_1078_TypeVal>  y_WeldGrooveChara_1078_Type
%type <WeldGrooveChara_1078_TypeChoicePairVal> y_WeldGrooveChara_1078_TypeChoicePair
%type <WeldGrooveChara_1078_TypeVal>  y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
%type <WeldGrooveChara_1079_TypeVal>  y_WeldGrooveChara_1079_Type
%type <WeldGrooveChara_1079_TypeChoicePairVal> y_WeldGrooveChara_1079_TypeChoicePair
%type <WeldGrooveChara_1079_TypeVal>  y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
%type <WeldGrooveOneSi_1080_TypeVal>  y_WeldGrooveOneSi_1080_Type
%type <WeldGrooveOneSi_1080_TypeVal>  y_WeldGrooveOneSi_1080_WeldGrooveOneSi_1080_Type
%type <WeldGrooveOneSideParametersTypeVal> y_WeldGrooveOneSideParametersType
%type <WeldGrooveOneSideTypeVal>      y_WeldGrooveOneSideType
%type <WeldJCharacteristicDefinitionTypeVal> y_WeldJCharacteristicDefinitionType
%type <WeldJCharacteristicDefinitionTypeVal> y_WeldJCharacteristicDefinition_WeldJCharacteristicDefinitionType
%type <WeldJCharacteristicItemTypeVal> y_WeldJCharacteristicItemType
%type <WeldJCharacteristicItemTypeVal> y_WeldJCharacteristicItem_WeldJCharacteristicItemType
%type <WeldJCharacteristicMeasurementTypeVal> y_WeldJCharacteristicMeasurementType
%type <WeldJCharacteristicMeasurementTypeVal> y_WeldJCharacteristicMeasurement_WeldJCharacteristicMeasurementType
%type <WeldJCharacteristicNominalTypeVal> y_WeldJCharacteristicNominalType
%type <WeldJCharacteristicNominalTypeVal> y_WeldJCharacteristicNominal_WeldJCharacteristicNominalType
%type <WeldJCharacteristicStatsEvalTypeVal> y_WeldJCharacteristicStatsEvalType
%type <WeldJCharacteristicStatsEvalTypeVal> y_WeldJCharacteristicStats_WeldJCharacteristicStatsEvalType
%type <WeldMainSymbolEnumTypeVal>     y_WeldMainSymbolEnumType
%type <WeldMainSymbolTypeVal>         y_WeldMainSymbolType
%type <NaturalTypeVal>                y_WeldNumber_NaturalType_0
%type <WeldOneSideParametersExtendSizeTypeVal> y_WeldOneSideParametersExtendSizeType
%type <WeldOneSideParametersExtendTypeVal> y_WeldOneSideParametersExtendType
%type <WeldPlugCharacteristicDefinitionTypeVal> y_WeldPlugCharacteristicDefinitionType
%type <WeldPlugCharacteristicDefinitionTypeVal> y_WeldPlugCharacteristicDefinition_WeldPlugCharacteristicDefinitionType
%type <WeldPlugCharacteristicItemTypeVal> y_WeldPlugCharacteristicItemType
%type <WeldPlugCharacteristicItemTypeVal> y_WeldPlugCharacteristicItem_WeldPlugCharacteristicItemType
%type <WeldPlugCharacteristicMeasurementTypeVal> y_WeldPlugCharacteristicMeasurementType
%type <WeldPlugCharacteristicMeasurementTypeVal> y_WeldPlugCharacteristicMeasurement_WeldPlugCharacteristicMeasurementType
%type <WeldPlugCharacteristicNominalTypeVal> y_WeldPlugCharacteristicNominalType
%type <WeldPlugCharacteristicNominalTypeVal> y_WeldPlugCharacteristicNominal_WeldPlugCharacteristicNominalType
%type <WeldPlugCharacteristicStatsEvalTypeVal> y_WeldPlugCharacteristicStatsEvalType
%type <WeldPlugCharacteristicStatsEvalTypeVal> y_WeldPlugCharacteristicStats_WeldPlugCharacteristicStatsEvalType
%type <WeldPlugOneSideParametersTypeVal> y_WeldPlugOneSideParametersType
%type <WeldScarfCharacteristicDefinitionTypeVal> y_WeldScarfCharacteristicDefinitionType
%type <WeldScarfCharacteristicDefinitionTypeVal> y_WeldScarfCharacteristicDefinition_WeldScarfCharacteristicDefinitionType
%type <WeldScarfCharacteristicItemTypeVal> y_WeldScarfCharacteristicItemType
%type <WeldScarfCharacteristicItemTypeVal> y_WeldScarfCharacteristicItem_WeldScarfCharacteristicItemType
%type <WeldScarfCharacteristicMeasurementTypeVal> y_WeldScarfCharacteristicMeasurementType
%type <WeldScarfCharacteristicMeasurementTypeVal> y_WeldScarfCharacteristicMeasurement_WeldScarfCharacteristicMeasurementType
%type <WeldScarfCharacteristicNominalTypeVal> y_WeldScarfCharacteristicNominalType
%type <WeldScarfCharacteristicNominalTypeVal> y_WeldScarfCharacteristicNominal_WeldScarfCharacteristicNominalType
%type <WeldScarfCharacteristicStatsEvalTypeVal> y_WeldScarfCharacteristicStatsEvalType
%type <WeldScarfCharacteristicStatsEvalTypeVal> y_WeldScarfCharacteristicStats_WeldScarfCharacteristicStatsEvalType
%type <WeldSeamCharacteristicDefinitionTypeVal> y_WeldSeamCharacteristicDefinitionType
%type <WeldSeamCharacteristicDefinitionTypeVal> y_WeldSeamCharacteristicDefinition_WeldSeamCharacteristicDefinitionType
%type <WeldSeamCharacteristicItemTypeVal> y_WeldSeamCharacteristicItemType
%type <WeldSeamCharacteristicItemTypeVal> y_WeldSeamCharacteristicItem_WeldSeamCharacteristicItemType
%type <WeldSeamCharacteristicMeasurementTypeVal> y_WeldSeamCharacteristicMeasurementType
%type <WeldSeamCharacteristicMeasurementTypeVal> y_WeldSeamCharacteristicMeasurement_WeldSeamCharacteristicMeasurementType
%type <WeldSeamCharacteristicNominalTypeVal> y_WeldSeamCharacteristicNominalType
%type <WeldSeamCharacteristicNominalTypeVal> y_WeldSeamCharacteristicNominal_WeldSeamCharacteristicNominalType
%type <WeldSeamCharacteristicStatsEvalTypeVal> y_WeldSeamCharacteristicStatsEvalType
%type <WeldSeamCharacteristicStatsEvalTypeVal> y_WeldSeamCharacteristicStats_WeldSeamCharacteristicStatsEvalType
%type <WeldSlotCharacteristicDefinitionTypeVal> y_WeldSlotCharacteristicDefinitionType
%type <WeldSlotCharacteristicDefinitionTypeVal> y_WeldSlotCharacteristicDefinition_WeldSlotCharacteristicDefinitionType
%type <WeldSlotCharacteristicItemTypeVal> y_WeldSlotCharacteristicItemType
%type <WeldSlotCharacteristicItemTypeVal> y_WeldSlotCharacteristicItem_WeldSlotCharacteristicItemType
%type <WeldSlotCharacteristicMeasurementTypeVal> y_WeldSlotCharacteristicMeasurementType
%type <WeldSlotCharacteristicMeasurementTypeVal> y_WeldSlotCharacteristicMeasurement_WeldSlotCharacteristicMeasurementType
%type <WeldSlotCharacteristicNominalTypeVal> y_WeldSlotCharacteristicNominalType
%type <WeldSlotCharacteristicNominalTypeVal> y_WeldSlotCharacteristicNominal_WeldSlotCharacteristicNominalType
%type <WeldSlotCharacteristicStatsEvalTypeVal> y_WeldSlotCharacteristicStatsEvalType
%type <WeldSlotCharacteristicStatsEvalTypeVal> y_WeldSlotCharacteristicStats_WeldSlotCharacteristicStatsEvalType
%type <WeldSpotCharacteristicDefinitionTypeVal> y_WeldSpotCharacteristicDefinitionType
%type <WeldSpotCharacteristicDefinitionTypeVal> y_WeldSpotCharacteristicDefinition_WeldSpotCharacteristicDefinitionType
%type <WeldSpotCharacteristicItemTypeVal> y_WeldSpotCharacteristicItemType
%type <WeldSpotCharacteristicItemTypeVal> y_WeldSpotCharacteristicItem_WeldSpotCharacteristicItemType
%type <WeldSpotCharacteristicMeasurementTypeVal> y_WeldSpotCharacteristicMeasurementType
%type <WeldSpotCharacteristicMeasurementTypeVal> y_WeldSpotCharacteristicMeasurement_WeldSpotCharacteristicMeasurementType
%type <WeldSpotCharacteristicNominalTypeVal> y_WeldSpotCharacteristicNominalType
%type <WeldSpotCharacteristicNominalTypeVal> y_WeldSpotCharacteristicNominal_WeldSpotCharacteristicNominalType
%type <WeldSpotCharacteristicStatsEvalTypeVal> y_WeldSpotCharacteristicStatsEvalType
%type <WeldSpotCharacteristicStatsEvalTypeVal> y_WeldSpotCharacteristicStats_WeldSpotCharacteristicStatsEvalType
%type <WeldSpotOneSideParametersTypeVal> y_WeldSpotOneSideParametersType
%type <WeldSquareCharacteristicDefinitionTypeVal> y_WeldSquareCharacteristicDefinitionType
%type <WeldSquareCharacteristicDefinitionTypeVal> y_WeldSquareCharacteristicDefinition_WeldSquareCharacteristicDefinitionType
%type <WeldSquareCharacteristicItemTypeVal> y_WeldSquareCharacteristicItemType
%type <WeldSquareCharacteristicItemTypeVal> y_WeldSquareCharacteristicItem_WeldSquareCharacteristicItemType
%type <WeldSquareCharacteristicMeasurementTypeVal> y_WeldSquareCharacteristicMeasurementType
%type <WeldSquareCharacteristicMeasurementTypeVal> y_WeldSquareCharacteristicMeasurement_WeldSquareCharacteristicMeasurementType
%type <WeldSquareCharacteristicNominalTypeVal> y_WeldSquareCharacteristicNominalType
%type <WeldSquareCharacteristicNominalTypeVal> y_WeldSquareCharacteristicNominal_WeldSquareCharacteristicNominalType
%type <WeldSquareCharacteristicStatsEvalTypeVal> y_WeldSquareCharacteristicStatsEvalType
%type <WeldSquareCharacteristicStatsEvalTypeVal> y_WeldSquareCharacteristicStats_WeldSquareCharacteristicStatsEvalType
%type <StatsPassFailTypeVal>          y_WeldStats_StatsPassFailType_0
%type <WeldStudCharacteristicDefinitionTypeVal> y_WeldStudCharacteristicDefinitionType
%type <WeldStudCharacteristicDefinitionTypeVal> y_WeldStudCharacteristicDefinition_WeldStudCharacteristicDefinitionType
%type <WeldStudCharacteristicItemTypeVal> y_WeldStudCharacteristicItemType
%type <WeldStudCharacteristicItemTypeVal> y_WeldStudCharacteristicItem_WeldStudCharacteristicItemType
%type <WeldStudCharacteristicMeasurementTypeVal> y_WeldStudCharacteristicMeasurementType
%type <WeldStudCharacteristicMeasurementTypeVal> y_WeldStudCharacteristicMeasurement_WeldStudCharacteristicMeasurementType
%type <WeldStudCharacteristicNominalTypeVal> y_WeldStudCharacteristicNominalType
%type <WeldStudCharacteristicNominalTypeVal> y_WeldStudCharacteristicNominal_WeldStudCharacteristicNominalType
%type <WeldStudCharacteristicStatsEvalTypeVal> y_WeldStudCharacteristicStatsEvalType
%type <WeldStudCharacteristicStatsEvalTypeVal> y_WeldStudCharacteristicStats_WeldStudCharacteristicStatsEvalType
%type <WeldSupplementarySymbolEnumTypeVal> y_WeldSupplementarySymbolEnumType
%type <WeldSupplementarySymbolTypeVal> y_WeldSupplementarySymbolType
%type <WeldSurfacingCharacteristicDefinitionTypeVal> y_WeldSurfacingCharacteristicDefinitionType
%type <WeldSurfacingCharacteristicDefinitionTypeVal> y_WeldSurfacingCharacteristicDefinition_WeldSurfacingCharacteristicDefinitionType
%type <WeldSurfacingCharacteristicItemTypeVal> y_WeldSurfacingCharacteristicItemType
%type <WeldSurfacingCharacteristicItemTypeVal> y_WeldSurfacingCharacteristicItem_WeldSurfacingCharacteristicItemType
%type <WeldSurfacingCharacteristicMeasurementTypeVal> y_WeldSurfacingCharacteristicMeasurementType
%type <WeldSurfacingCharacteristicMeasurementTypeVal> y_WeldSurfacingCharacteristicMeasurement_WeldSurfacingCharacteristicMeasurementType
%type <WeldSurfacingCharacteristicNominalTypeVal> y_WeldSurfacingCharacteristicNominalType
%type <WeldSurfacingCharacteristicNominalTypeVal> y_WeldSurfacingCharacteristicNominal_WeldSurfacingCharacteristicNominalType
%type <WeldSurfacingCharacteristicStatsEvalTypeVal> y_WeldSurfacingCharacteristicStatsEvalType
%type <WeldSurfacingCharacteristicStatsEvalTypeVal> y_WeldSurfacingCharacteristicStats_WeldSurfacingCharacteristicStatsEvalType
%type <XmlUnsignedIntVal>             y_WeldSymbolSetCount_XmlUnsignedInt_0
%type <WeldUCharacteristicDefinitionTypeVal> y_WeldUCharacteristicDefinitionType
%type <WeldUCharacteristicDefinitionTypeVal> y_WeldUCharacteristicDefinition_WeldUCharacteristicDefinitionType
%type <WeldUCharacteristicItemTypeVal> y_WeldUCharacteristicItemType
%type <WeldUCharacteristicItemTypeVal> y_WeldUCharacteristicItem_WeldUCharacteristicItemType
%type <WeldUCharacteristicMeasurementTypeVal> y_WeldUCharacteristicMeasurementType
%type <WeldUCharacteristicMeasurementTypeVal> y_WeldUCharacteristicMeasurement_WeldUCharacteristicMeasurementType
%type <WeldUCharacteristicNominalTypeVal> y_WeldUCharacteristicNominalType
%type <WeldUCharacteristicNominalTypeVal> y_WeldUCharacteristicNominal_WeldUCharacteristicNominalType
%type <WeldUCharacteristicStatsEvalTypeVal> y_WeldUCharacteristicStatsEvalType
%type <WeldUCharacteristicStatsEvalTypeVal> y_WeldUCharacteristicStats_WeldUCharacteristicStatsEvalType
%type <WeldVCharacteristicDefinitionTypeVal> y_WeldVCharacteristicDefinitionType
%type <WeldVCharacteristicDefinitionTypeVal> y_WeldVCharacteristicDefinition_WeldVCharacteristicDefinitionType
%type <WeldVCharacteristicItemTypeVal> y_WeldVCharacteristicItemType
%type <WeldVCharacteristicItemTypeVal> y_WeldVCharacteristicItem_WeldVCharacteristicItemType
%type <WeldVCharacteristicMeasurementTypeVal> y_WeldVCharacteristicMeasurementType
%type <WeldVCharacteristicMeasurementTypeVal> y_WeldVCharacteristicMeasurement_WeldVCharacteristicMeasurementType
%type <WeldVCharacteristicNominalTypeVal> y_WeldVCharacteristicNominalType
%type <WeldVCharacteristicNominalTypeVal> y_WeldVCharacteristicNominal_WeldVCharacteristicNominalType
%type <WeldVCharacteristicStatsEvalTypeVal> y_WeldVCharacteristicStatsEvalType
%type <WeldVCharacteristicStatsEvalTypeVal> y_WeldVCharacteristicStats_WeldVCharacteristicStatsEvalType
%type <WeldingProcessEnumTypeVal>     y_WeldingProcessEnumType
%type <WeldingProcessSuffixEnumTypeVal> y_WeldingProcessSuffixEnumType
%type <WeldingProcessTypeVal>         y_WeldingProcessType
%type <WeldingProcessTypeVal>         y_WeldingProcess_WeldingProcessType_0
%type <XmlStringVal>                  y_WhatIsMeasured_XmlString
%type <XmlStringVal>                  y_WhatToMeasure_XmlString
%type <WhileActionGroupTypeVal>       y_WhileActionGroupType
%type <WhileActionGroupTypeVal>       y_WhileActionGroup_WhileActionGroupType
%type <PointSetReferenceWholeTypeVal> y_WholePointSetId_PointSetReferenceWholeType
%type <WidthCharacteristicDefinitionTypeVal> y_WidthCharacteristicDefinitionType
%type <WidthCharacteristicDefinitionTypeVal> y_WidthCharacteristicDefinition_WidthCharacteristicDefinitionType
%type <WidthCharacteristicItemTypeVal> y_WidthCharacteristicItemType
%type <WidthCharacteristicItemTypeVal> y_WidthCharacteristicItem_WidthCharacteristicItemType
%type <WidthCharacteristicMeasurementTypeVal> y_WidthCharacteristicMeasurementType
%type <WidthCharacteristicMeasurementTypeVal> y_WidthCharacteristicMeasurement_WidthCharacteristicMeasurementType
%type <WidthCharacteristicNominalTypeVal> y_WidthCharacteristicNominalType
%type <WidthCharacteristicNominalTypeVal> y_WidthCharacteristicNominal_WidthCharacteristicNominalType
%type <WidthCharacteristicStatsEvalTypeVal> y_WidthCharacteristicStatsEvalType
%type <WidthCharacteristicStatsEvalTypeVal> y_WidthCharacteristicStats_WidthCharacteristicStatsEvalType
%type <UnitVectorTypeVal>             y_WidthDirection_UnitVectorType
%type <MeasuredLinearValueTypeVal>    y_WidthMax_MeasuredLinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_WidthMin_MeasuredLinearValueType_0
%type <LinearValueTypeVal>            y_Width_LinearValueType
%type <LinearValueTypeVal>            y_Width_LinearValueType_0
%type <MeasuredLinearValueTypeVal>    y_Width_MeasuredLinearValueType_0
%type <XmlDoubleVal>                  y_Width_XmlDouble
%type <WitnessLinesTyp_1235_TypeVal>  y_WitnessLinesTyp_1235_Type
%type <WitnessLinesTyp_1235_TypeVal>  y_WitnessLinesTyp_1235_WitnessLinesTyp_1235_Type
%type <WitnessLinesTyp_1236_TypeVal>  y_WitnessLinesTyp_1236_Type
%type <WitnessLinesTyp_1236_TypeVal>  y_WitnessLinesTyp_1236_WitnessLinesTyp_1236_Type
%type <WitnessLinesTypeVal>           y_WitnessLinesType
%type <WitnessLinesTypeChoicePairVal> y_WitnessLinesTypeChoicePair
%type <WitnessLinesTypeVal>           y_WitnessLines_WitnessLinesType_0
%type <ArrayReferenceTypeVal>         y_WorkInstructionIds_ArrayReferenceType_0
%type <WorkInstructionBaseTypeVal>    y_WorkInstruction_substituteType
%type <WorkInstructionsTypeVal>       y_WorkInstructionsType
%type <WorkInstructionsTypeVal>       y_WorkInstructions_WorkInstructionsType_0
%type <ClosedShellSetTypeVal>         y_WorkingClosedShellSet_ClosedShellSetType
%type <LinearValueTypeVal>            y_WorkingDistance_LinearValueType_0
%type <WorkingVolumeBaseTypeVal>      y_WorkingVolume_substituteType_0
%type <StatsLinearTypeVal>            y_WorstNegativeDeviationStats_StatsLinearType_0
%type <LinearValueTypeVal>            y_WorstNegativeDeviation_LinearValueType_0
%type <StatsLinearTypeVal>            y_WorstPositiveDeviationStats_StatsLinearType_0
%type <LinearValueTypeVal>            y_WorstPositiveDeviation_LinearValueType_0
%type <CMMDirectionEnumTypeVal>       y_XAxisDirection_CMMDirectionEnumType
%type <LinearValueTypeVal>            y_XAxisLength_LinearValueType_0
%type <AngleFunctionDiscreteTypeVal>  y_XAxisPitch_AngleFunctionDiscreteType
%type <AngleFunctionDiscreteTypeVal>  y_XAxisRoll_AngleFunctionDiscreteType
%type <LengthFunctionDiscreteTypeVal> y_XAxisStraightnessY_LengthFunctionDiscreteType
%type <LengthFunctionDiscreteTypeVal> y_XAxisStraightnessZ_LengthFunctionDiscreteType
%type <AngleFunctionDiscreteTypeVal>  y_XAxisYaw_AngleFunctionDiscreteType
%type <UnitVectorSimpleTypeVal>       y_XDirection_UnitVectorSimpleType
%type <ArrayBinaryTypeVal>            y_XIds_ArrayBinaryType
%type <ListQIFReferenceSimpleTypeVal> y_XIds_ListQIFReferenceSimpleType
%type <LinearValueTypeVal>            y_XLinearAccuracy_LinearValueType
%type <LengthFunctionDiscreteTypeVal> y_XLinearity_LengthFunctionDiscreteType
%type <LinearValueTypeVal>            y_XResolution_LinearValueType
%type <XmlDecimalVal>                 y_XScaleFactor_XmlDecimal
%type <MeasurementDeviceScaleTypeVal> y_XScale_MeasurementDeviceScaleType
%type <UserDefinedUnitValueTypeVal>   y_XStiffness_UserDefinedUnitValueType_0
%type <XmlDoubleVal>                  y_XYSquareness_XmlDouble
%type <XYZLinearSpecificationTypeVal> y_XYZLinearSpecificationType
%type <XYZResolutionTypeVal>          y_XYZResolutionType
%type <XYZResolutionTypeVal>          y_XYZResolution_XYZResolutionType
%type <XYZResolutionTypeVal>          y_XYZResolution_XYZResolutionType_0
%type <PointSimpleTypeVal>            y_XYZ_PointSimpleType
%type <PointTypeVal>                  y_XYZ_PointType
%type <Point2dSimpleTypeVal>          y_XY_Point2dSimpleType
%type <XmlDoubleVal>                  y_XZSquareness_XmlDouble
%type <LinearValueTypeVal>            y_X_LinearValueType_0
%type <UnitVectorTypeVal>             y_XaxisDirection_UnitVectorType
%type <XmlTokenVal>                   y_Xaxis_XmlToken
%type <XmlAnyURIVal>                  y_XsltFile_XmlAnyURI_0
%type <CMMDirectionEnumTypeVal>       y_YAxisDirection_CMMDirectionEnumType
%type <LinearValueTypeVal>            y_YAxisLength_LinearValueType_0
%type <AngleFunctionDiscreteTypeVal>  y_YAxisPitch_AngleFunctionDiscreteType
%type <AngleFunctionDiscreteTypeVal>  y_YAxisRoll_AngleFunctionDiscreteType
%type <LengthFunctionDiscreteTypeVal> y_YAxisStraightnessX_LengthFunctionDiscreteType
%type <LengthFunctionDiscreteTypeVal> y_YAxisStraightnessZ_LengthFunctionDiscreteType
%type <AngleFunctionDiscreteTypeVal>  y_YAxisYaw_AngleFunctionDiscreteType
%type <UnitVectorSimpleTypeVal>       y_YDirection_UnitVectorSimpleType
%type <LinearValueTypeVal>            y_YLinearAccuracy_LinearValueType
%type <LengthFunctionDiscreteTypeVal> y_YLinearity_LengthFunctionDiscreteType
%type <LinearValueTypeVal>            y_YResolution_LinearValueType
%type <XmlDecimalVal>                 y_YScaleFactor_XmlDecimal
%type <MeasurementDeviceScaleTypeVal> y_YScale_MeasurementDeviceScaleType
%type <UserDefinedUnitValueTypeVal>   y_YStiffness_UserDefinedUnitValueType_0
%type <XmlDoubleVal>                  y_YZSquareness_XmlDouble
%type <LinearValueTypeVal>            y_Y_LinearValueType_0
%type <UnitVectorTypeVal>             y_YaxisDirection_UnitVectorType
%type <XmlTokenVal>                   y_Yaxis_XmlToken
%type <XmlStringVal>                  y_Year_XmlString_0
%type <XmlDoubleVal>                  y_YoungsModulus_XmlDouble_0
%type <CMMDirectionEnumTypeVal>       y_ZAxisDirection_CMMDirectionEnumType
%type <LinearValueTypeVal>            y_ZAxisLength_LinearValueType
%type <LinearValueTypeVal>            y_ZAxisLength_LinearValueType_0
%type <AngleFunctionDiscreteTypeVal>  y_ZAxisPitch_AngleFunctionDiscreteType
%type <AngleFunctionDiscreteTypeVal>  y_ZAxisRoll_AngleFunctionDiscreteType
%type <LengthFunctionDiscreteTypeVal> y_ZAxisStraightnessX_LengthFunctionDiscreteType
%type <LengthFunctionDiscreteTypeVal> y_ZAxisStraightnessY_LengthFunctionDiscreteType
%type <AngleFunctionDiscreteTypeVal>  y_ZAxisYaw_AngleFunctionDiscreteType
%type <UnitVectorSimpleTypeVal>       y_ZDirection_UnitVectorSimpleType
%type <LinearValueTypeVal>            y_ZLinearAccuracy_LinearValueType
%type <LengthFunctionDiscreteTypeVal> y_ZLinearity_LengthFunctionDiscreteType
%type <LinearValueTypeVal>            y_ZResolution_LinearValueType
%type <XmlDecimalVal>                 y_ZScaleFactor_XmlDecimal
%type <MeasurementDeviceScaleTypeVal> y_ZScale_MeasurementDeviceScaleType
%type <UserDefinedUnitValueTypeVal>   y_ZStiffness_UserDefinedUnitValueType_0
%type <LinearValueTypeVal>            y_Z_LinearValueType_0
%type <UnitVectorTypeVal>             y_ZaxisDirection_UnitVectorType
%type <XmlTokenVal>                   y_Zaxis_XmlToken
%type <UnitVectorTypeVal>             y_ZeroIndexDirection_UnitVectorType
%type <PointSimpleTypeVal>            y_ZextensionPoint1_PointSimpleType_0
%type <PointSimpleTypeVal>            y_ZextensionPoint2_PointSimpleType_0
%type <MeasuredZoneAxisTypeVal>       y_ZoneAxis_MeasuredZoneAxisType
%type <ZoneDataSetTypeVal>            y_ZoneDataSetType
%type <ZoneDataSetTypeVal>            y_ZoneDataSet_ZoneDataSetType_0
%type <ZoneDataTypeVal>               y_ZoneDataType
%type <ZoneDataTypeVal>               y_ZoneData_ZoneDataType
%type <UnitVectorTypeVal>             y_ZoneDirection_UnitVectorType_0
%type <MeasuredZoneAxisTypeVal>       y_ZoneLine_MeasuredZoneAxisType_0
%type <ZoneOrientationEnumTypeVal>    y_ZoneOrientationEnumType
%type <ZoneOrientationEnumTypeVal>    y_ZoneOrientationEnum_ZoneOrientationEnumType_0
%type <UnitVectorTypeVal>             y_ZoneOrientationVector_UnitVectorType_0
%type <MeasuredUnitVectorTypeVal>     y_ZoneOrientation_MeasuredUnitVectorType_0
%type <MeasuredPlaneTypeVal>          y_ZonePlane_MeasuredPlaneType
%type <MeasuredPlaneTypeVal>          y_ZonePlane_MeasuredPlaneType_0
%type <MeasuredPointTypeVal>          y_ZonePoint_MeasuredPointType
%type <MeasuredZoneRadiiTypeVal>      y_ZoneRadii_MeasuredZoneRadiiType
%type <QIFReferenceActiveTypeVal>     y_ZoneSectionId_QIFReferenceActiveType_0
%type <ZoneSectionPlaneTypeVal>       y_ZoneSectionPlaneType
%type <ZoneSectionPlanesTypeVal>      y_ZoneSectionPlanesType
%type <ZoneSectionSetTypeVal>         y_ZoneSectionSetType
%type <ZoneSectionSetTypeVal>         y_ZoneSectionSet_ZoneSectionSetType_0
%type <ZoneSectionTypeVal>            y_ZoneSectionType
%type <ZoneSectionTypeVal>            y_ZoneSection_ZoneSectionType
%type <CoaxialityZoneShapeTypeVal>    y_ZoneShape_CoaxialityZoneShapeType
%type <ConcentricityZoneShapeTypeVal> y_ZoneShape_ConcentricityZoneShapeType
%type <OrientationZoneShapeTypeVal>   y_ZoneShape_OrientationZoneShapeType
%type <PositionZoneShapeTypeVal>      y_ZoneShape_PositionZoneShapeType
%type <StraightnessZoneShapeTypeVal>  y_ZoneShape_StraightnessZoneShapeType

%token <iVal> BAD
%token <sVal> DATASTRING
%token <iVal> ENCODING
%token <iVal> ENDITEM
%token <iVal> ENDVERSION
%token <iVal> ENDWHOLEITEM
%token <iVal> STANDALONE
%token <iVal> STARTVERSION
%token <sVal> TERMINALSTRING
%token <iVal> XMLNSPREFIX
%token <iVal> XMLNSTARGET
%token <iVal> XMLVERSION

%token <iVal> xmlnsATTR
%token <iVal> xmlnsColonATTR
%token <iVal> xsiSchemaLocationATTR
%token <iVal> xsiNoNameLocationATTR

%token <iVal> AEND
%token <iVal> ASTART
%token <iVal> AACMMEND
%token <iVal> AACMMSTART
%token <iVal> AACMMAccuracyEND
%token <iVal> AACMMAccuracySTART
%token <iVal> AACMMB89TestEND
%token <iVal> AACMMB89TestSTART
%token <iVal> AACMMISO10360TestEND
%token <iVal> AACMMISO10360TestSTART
%token <iVal> AACMMPointAccuracyTestEND
%token <iVal> AACMMPointAccuracyTestSTART
%token <iVal> AAxisResolutionEND
%token <iVal> AAxisResolutionSTART
%token <iVal> ABCResolutionEND
%token <iVal> ABCResolutionSTART
%token <iVal> ACombinedResolutionEND
%token <iVal> ACombinedResolutionSTART
%token <iVal> AbsoluteDifferencesEND
%token <iVal> AbsoluteDifferencesSTART
%token <iVal> AbsoluteMaximumsEND
%token <iVal> AbsoluteMaximumsSTART
%token <iVal> AbsoluteMinimumsEND
%token <iVal> AbsoluteMinimumsSTART
%token <iVal> AccuraciesEND
%token <iVal> AccuraciesSTART
%token <iVal> AccuracyEND
%token <iVal> AccuracySTART
%token <iVal> AccuracySourceEND
%token <iVal> AccuracySourceSTART
%token <iVal> AccuracySourceEnumEND
%token <iVal> AccuracySourceEnumSTART
%token <iVal> AccuracyValueEND
%token <iVal> AccuracyValueSTART
%token <iVal> ActionEND
%token <iVal> ActionSTART
%token <iVal> ActionMethodsEND
%token <iVal> ActionMethodsSTART
%token <iVal> ActionToTakeEND
%token <iVal> ActionToTakeSTART
%token <iVal> ActionToTakeEnumEND
%token <iVal> ActionToTakeEnumSTART
%token <iVal> ActiveEND
%token <iVal> ActiveSTART
%token <iVal> ActivePixelsNumberEND
%token <iVal> ActivePixelsNumberSTART
%token <iVal> ActiveViewEND
%token <iVal> ActiveViewSTART
%token <iVal> ActualComponentEND
%token <iVal> ActualComponentSTART
%token <iVal> ActualComponentIdEND
%token <iVal> ActualComponentIdSTART
%token <iVal> ActualComponentIdsEND
%token <iVal> ActualComponentIdsSTART
%token <iVal> ActualComponentSetEND
%token <iVal> ActualComponentSetSTART
%token <iVal> ActualComponentSetsEND
%token <iVal> ActualComponentSetsSTART
%token <iVal> ActualSinglePointAccuracyEND
%token <iVal> ActualSinglePointAccuracySTART
%token <iVal> ActualTransformIdEND
%token <iVal> ActualTransformIdSTART
%token <iVal> ActualTransformsEND
%token <iVal> ActualTransformsSTART
%token <iVal> ActualVolumetricAccuracyEND
%token <iVal> ActualVolumetricAccuracySTART
%token <iVal> AdditionalChangesEND
%token <iVal> AdditionalChangesSTART
%token <iVal> AddonNameEND
%token <iVal> AddonNameSTART
%token <iVal> AddonOrganizationEND
%token <iVal> AddonOrganizationSTART
%token <iVal> AddressEND
%token <iVal> AddressSTART
%token <iVal> AddressDescriptionEnumEND
%token <iVal> AddressDescriptionEnumSTART
%token <iVal> AdjacentNormalEND
%token <iVal> AdjacentNormalSTART
%token <iVal> Aggregate12END
%token <iVal> Aggregate12START
%token <iVal> Aggregate12CoreEND
%token <iVal> Aggregate12CoreSTART
%token <iVal> Aggregate13END
%token <iVal> Aggregate13START
%token <iVal> Aggregate13CoreEND
%token <iVal> Aggregate13CoreSTART
%token <iVal> AlgorithmEND
%token <iVal> AlgorithmSTART
%token <iVal> AlgorithmDefinitionsEND
%token <iVal> AlgorithmDefinitionsSTART
%token <iVal> AlgorithmIdEND
%token <iVal> AlgorithmIdSTART
%token <iVal> AlignmentEND
%token <iVal> AlignmentSTART
%token <iVal> AlignmentOperationsEND
%token <iVal> AlignmentOperationsSTART
%token <iVal> AllEND
%token <iVal> AllSTART
%token <iVal> AllAroundEND
%token <iVal> AllAroundSTART
%token <iVal> AlongRowDirectionEND
%token <iVal> AlongRowDirectionSTART
%token <iVal> AlternativeActionMethodIdsEND
%token <iVal> AlternativeActionMethodIdsSTART
%token <iVal> AmbientTemperatureEND
%token <iVal> AmbientTemperatureSTART
%token <iVal> AnalysisModeEND
%token <iVal> AnalysisModeSTART
%token <iVal> AnalysisSoftwareEND
%token <iVal> AnalysisSoftwareSTART
%token <iVal> AnalysisVectorEND
%token <iVal> AnalysisVectorSTART
%token <iVal> AndEND
%token <iVal> AndSTART
%token <iVal> AngleEND
%token <iVal> AngleSTART
%token <iVal> AngleBetweenCharacteristicDefinitionEND
%token <iVal> AngleBetweenCharacteristicDefinitionSTART
%token <iVal> AngleBetweenCharacteristicItemEND
%token <iVal> AngleBetweenCharacteristicItemSTART
%token <iVal> AngleBetweenCharacteristicMeasurementEND
%token <iVal> AngleBetweenCharacteristicMeasurementSTART
%token <iVal> AngleBetweenCharacteristicNominalEND
%token <iVal> AngleBetweenCharacteristicNominalSTART
%token <iVal> AngleBetweenCharacteristicStatsEND
%token <iVal> AngleBetweenCharacteristicStatsSTART
%token <iVal> AngleCharacteristicDefinitionEND
%token <iVal> AngleCharacteristicDefinitionSTART
%token <iVal> AngleCharacteristicItemEND
%token <iVal> AngleCharacteristicItemSTART
%token <iVal> AngleCharacteristicMeasurementEND
%token <iVal> AngleCharacteristicMeasurementSTART
%token <iVal> AngleCharacteristicNominalEND
%token <iVal> AngleCharacteristicNominalSTART
%token <iVal> AngleCharacteristicStatsEND
%token <iVal> AngleCharacteristicStatsSTART
%token <iVal> AngleFromCharacteristicDefinitionEND
%token <iVal> AngleFromCharacteristicDefinitionSTART
%token <iVal> AngleFromCharacteristicItemEND
%token <iVal> AngleFromCharacteristicItemSTART
%token <iVal> AngleFromCharacteristicMeasurementEND
%token <iVal> AngleFromCharacteristicMeasurementSTART
%token <iVal> AngleFromCharacteristicNominalEND
%token <iVal> AngleFromCharacteristicNominalSTART
%token <iVal> AngleFromCharacteristicStatsEND
%token <iVal> AngleFromCharacteristicStatsSTART
%token <iVal> AngleResolutionEND
%token <iVal> AngleResolutionSTART
%token <iVal> AngularAbsoluteLinearityEND
%token <iVal> AngularAbsoluteLinearitySTART
%token <iVal> AngularAccuracyEND
%token <iVal> AngularAccuracySTART
%token <iVal> AngularCharacteristicStatsEND
%token <iVal> AngularCharacteristicStatsSTART
%token <iVal> AngularCoordinateCharacteristicDefinitionEND
%token <iVal> AngularCoordinateCharacteristicDefinitionSTART
%token <iVal> AngularCoordinateCharacteristicItemEND
%token <iVal> AngularCoordinateCharacteristicItemSTART
%token <iVal> AngularCoordinateCharacteristicMeasurementEND
%token <iVal> AngularCoordinateCharacteristicMeasurementSTART
%token <iVal> AngularCoordinateCharacteristicNominalEND
%token <iVal> AngularCoordinateCharacteristicNominalSTART
%token <iVal> AngularCoordinateCharacteristicStatsEND
%token <iVal> AngularCoordinateCharacteristicStatsSTART
%token <iVal> AngularCriterionEND
%token <iVal> AngularCriterionSTART
%token <iVal> AngularLimitEND
%token <iVal> AngularLimitSTART
%token <iVal> AngularMeasurementEND
%token <iVal> AngularMeasurementSTART
%token <iVal> AngularStatsSummariesEND
%token <iVal> AngularStatsSummariesSTART
%token <iVal> AngularStatsSummaryEND
%token <iVal> AngularStatsSummarySTART
%token <iVal> AngularToleranceEND
%token <iVal> AngularToleranceSTART
%token <iVal> AngularUnitEND
%token <iVal> AngularUnitSTART
%token <iVal> AngularityCharacteristicDefinitionEND
%token <iVal> AngularityCharacteristicDefinitionSTART
%token <iVal> AngularityCharacteristicItemEND
%token <iVal> AngularityCharacteristicItemSTART
%token <iVal> AngularityCharacteristicMeasurementEND
%token <iVal> AngularityCharacteristicMeasurementSTART
%token <iVal> AngularityCharacteristicNominalEND
%token <iVal> AngularityCharacteristicNominalSTART
%token <iVal> AngularityCharacteristicStatsEND
%token <iVal> AngularityCharacteristicStatsSTART
%token <iVal> AnnotationHiddenIdsEND
%token <iVal> AnnotationHiddenIdsSTART
%token <iVal> AnnotationViewEND
%token <iVal> AnnotationViewSTART
%token <iVal> AnnotationViewIdEND
%token <iVal> AnnotationViewIdSTART
%token <iVal> AnnotationViewSetEND
%token <iVal> AnnotationViewSetSTART
%token <iVal> AnnotationVisibleIdsEND
%token <iVal> AnnotationVisibleIdsSTART
%token <iVal> ApertureSizeEND
%token <iVal> ApertureSizeSTART
%token <iVal> ApplicabilityEND
%token <iVal> ApplicabilitySTART
%token <iVal> ApplicationEND
%token <iVal> ApplicationSTART
%token <iVal> ApplicationNameEND
%token <iVal> ApplicationNameSTART
%token <iVal> ApplicationSourceEND
%token <iVal> ApplicationSourceSTART
%token <iVal> ApplicationToolEND
%token <iVal> ApplicationToolSTART
%token <iVal> AppliedFrequencyEND
%token <iVal> AppliedFrequencySTART
%token <iVal> AppraiserVariationEND
%token <iVal> AppraiserVariationSTART
%token <iVal> ArcCircular12END
%token <iVal> ArcCircular12START
%token <iVal> ArcCircular12CoreEND
%token <iVal> ArcCircular12CoreSTART
%token <iVal> ArcCircular13END
%token <iVal> ArcCircular13START
%token <iVal> ArcCircular13CoreEND
%token <iVal> ArcCircular13CoreSTART
%token <iVal> ArcConic12END
%token <iVal> ArcConic12START
%token <iVal> ArcConic12CoreEND
%token <iVal> ArcConic12CoreSTART
%token <iVal> ArcConic13END
%token <iVal> ArcConic13START
%token <iVal> ArcConic13CoreEND
%token <iVal> ArcConic13CoreSTART
%token <iVal> ArcRadiusEND
%token <iVal> ArcRadiusSTART
%token <iVal> AreaEND
%token <iVal> AreaSTART
%token <iVal> AreaAbsoluteLinearityEND
%token <iVal> AreaAbsoluteLinearitySTART
%token <iVal> AreaCriterionEND
%token <iVal> AreaCriterionSTART
%token <iVal> AreaEnumEND
%token <iVal> AreaEnumSTART
%token <iVal> AreaLimitEND
%token <iVal> AreaLimitSTART
%token <iVal> AreaMeasurementEND
%token <iVal> AreaMeasurementSTART
%token <iVal> AreaStatsSummariesEND
%token <iVal> AreaStatsSummariesSTART
%token <iVal> AreaStatsSummaryEND
%token <iVal> AreaStatsSummarySTART
%token <iVal> AreaUnitEND
%token <iVal> AreaUnitSTART
%token <iVal> AreasEND
%token <iVal> AreasSTART
%token <iVal> ArithmeticCharacteristicParameterEND
%token <iVal> ArithmeticCharacteristicParameterSTART
%token <iVal> ArithmeticConstantEND
%token <iVal> ArithmeticConstantSTART
%token <iVal> ArithmeticDMEParameterEND
%token <iVal> ArithmeticDMEParameterSTART
%token <iVal> ArithmeticEqualEND
%token <iVal> ArithmeticEqualSTART
%token <iVal> ArithmeticFeatureParameterEND
%token <iVal> ArithmeticFeatureParameterSTART
%token <iVal> ArithmeticParameterValueEND
%token <iVal> ArithmeticParameterValueSTART
%token <iVal> ArithmeticPartParameterEND
%token <iVal> ArithmeticPartParameterSTART
%token <iVal> ArrowSideEND
%token <iVal> ArrowSideSTART
%token <iVal> ArrowSideContourSymbolEND
%token <iVal> ArrowSideContourSymbolSTART
%token <iVal> ArrowSideParametersEND
%token <iVal> ArrowSideParametersSTART
%token <iVal> AsmPathEND
%token <iVal> AsmPathSTART
%token <iVal> AsmPathIdEND
%token <iVal> AsmPathIdSTART
%token <iVal> AsmPathIdsEND
%token <iVal> AsmPathIdsSTART
%token <iVal> AsmPathsEND
%token <iVal> AsmPathsSTART
%token <iVal> AssemblyEND
%token <iVal> AssemblySTART
%token <iVal> AssemblySetEND
%token <iVal> AssemblySetSTART
%token <iVal> AssignableCauseEND
%token <iVal> AssignableCauseSTART
%token <iVal> AssignableCauseEnumEND
%token <iVal> AssignableCauseEnumSTART
%token <iVal> AssignableCauseIdsEND
%token <iVal> AssignableCauseIdsSTART
%token <iVal> AssignableCausesEND
%token <iVal> AssignableCausesSTART
%token <iVal> AssociatedTolerancedFeatureSpecificationElementEND
%token <iVal> AssociatedTolerancedFeatureSpecificationElementSTART
%token <iVal> AssociatedTraceabilityIdEND
%token <iVal> AssociatedTraceabilityIdSTART
%token <iVal> AssociationEND
%token <iVal> AssociationSTART
%token <iVal> AttributeBoolEND
%token <iVal> AttributeBoolSTART
%token <iVal> AttributeD1END
%token <iVal> AttributeD1START
%token <iVal> AttributeD2END
%token <iVal> AttributeD2START
%token <iVal> AttributeD3END
%token <iVal> AttributeD3START
%token <iVal> AttributeI1END
%token <iVal> AttributeI1START
%token <iVal> AttributeI2END
%token <iVal> AttributeI2START
%token <iVal> AttributeI3END
%token <iVal> AttributeI3START
%token <iVal> AttributeQPIdEND
%token <iVal> AttributeQPIdSTART
%token <iVal> AttributeStatsEND
%token <iVal> AttributeStatsSTART
%token <iVal> AttributeStrEND
%token <iVal> AttributeStrSTART
%token <iVal> AttributeTimeEND
%token <iVal> AttributeTimeSTART
%token <iVal> AttributeUserEND
%token <iVal> AttributeUserSTART
%token <iVal> AttributesEND
%token <iVal> AttributesSTART
%token <iVal> AuthorEND
%token <iVal> AuthorSTART
%token <iVal> AutocollimatorEND
%token <iVal> AutocollimatorSTART
%token <iVal> AutocollimatorMeasureFeatureMethodEND
%token <iVal> AutocollimatorMeasureFeatureMethodSTART
%token <iVal> AuxiliaryIdsEND
%token <iVal> AuxiliaryIdsSTART
%token <iVal> AuxiliarySetEND
%token <iVal> AuxiliarySetSTART
%token <iVal> AverageEND
%token <iVal> AverageSTART
%token <iVal> AverageDiameterEND
%token <iVal> AverageDiameterSTART
%token <iVal> AverageFeatureEND
%token <iVal> AverageFeatureSTART
%token <iVal> AverageFeaturesEND
%token <iVal> AverageFeaturesSTART
%token <iVal> AverageRangeEND
%token <iVal> AverageRangeSTART
%token <iVal> AverageSpotDiameterEND
%token <iVal> AverageSpotDiameterSTART
%token <iVal> AxesRotationAngleEND
%token <iVal> AxesRotationAngleSTART
%token <iVal> AxesTravelDistanceEND
%token <iVal> AxesTravelDistanceSTART
%token <iVal> AxialDifferentialScaleEND
%token <iVal> AxialDifferentialScaleSTART
%token <iVal> AxialErrorEND
%token <iVal> AxialErrorSTART
%token <iVal> AxisEND
%token <iVal> AxisSTART
%token <iVal> AxisBacklashEND
%token <iVal> AxisBacklashSTART
%token <iVal> AxisDirectionEND
%token <iVal> AxisDirectionSTART
%token <iVal> AxisNameEND
%token <iVal> AxisNameSTART
%token <iVal> AxisPointEND
%token <iVal> AxisPointSTART
%token <iVal> AxisRepeatabilityEND
%token <iVal> AxisRepeatabilitySTART
%token <iVal> AxisVectorEND
%token <iVal> AxisVectorSTART
%token <iVal> AzimuthAngularAccuracyEND
%token <iVal> AzimuthAngularAccuracySTART
%token <iVal> AzimuthalAngleResolutionEND
%token <iVal> AzimuthalAngleResolutionSTART
%token <iVal> BEND
%token <iVal> BSTART
%token <iVal> BAxisResolutionEND
%token <iVal> BAxisResolutionSTART
%token <iVal> BCombinedResolutionEND
%token <iVal> BCombinedResolutionSTART
%token <iVal> BalloonEND
%token <iVal> BalloonSTART
%token <iVal> BalloonLocationEND
%token <iVal> BalloonLocationSTART
%token <iVal> BalloonStyleEND
%token <iVal> BalloonStyleSTART
%token <iVal> BaseArcEND
%token <iVal> BaseArcSTART
%token <iVal> BaseAxisFeatureEND
%token <iVal> BaseAxisFeatureSTART
%token <iVal> BaseCircleEND
%token <iVal> BaseCircleSTART
%token <iVal> BaseConeEND
%token <iVal> BaseConeSTART
%token <iVal> BaseConicalSegmentEND
%token <iVal> BaseConicalSegmentSTART
%token <iVal> BaseCoordinateSystemIdEND
%token <iVal> BaseCoordinateSystemIdSTART
%token <iVal> BaseCylinderEND
%token <iVal> BaseCylinderSTART
%token <iVal> BaseCylindricalSegmentEND
%token <iVal> BaseCylindricalSegmentSTART
%token <iVal> BaseEdgePointEND
%token <iVal> BaseEdgePointSTART
%token <iVal> BaseEllipseEND
%token <iVal> BaseEllipseSTART
%token <iVal> BaseEllipticalArcEND
%token <iVal> BaseEllipticalArcSTART
%token <iVal> BaseElongatedCircleEND
%token <iVal> BaseElongatedCircleSTART
%token <iVal> BaseElongatedCylinderEND
%token <iVal> BaseElongatedCylinderSTART
%token <iVal> BaseErrorEND
%token <iVal> BaseErrorSTART
%token <iVal> BaseExtrudedCrossSectionEND
%token <iVal> BaseExtrudedCrossSectionSTART
%token <iVal> BaseFeatureEND
%token <iVal> BaseFeatureSTART
%token <iVal> BaseFeaturePointListEND
%token <iVal> BaseFeaturePointListSTART
%token <iVal> BaseFeaturePointSetEND
%token <iVal> BaseFeaturePointSetSTART
%token <iVal> BaseLineEND
%token <iVal> BaseLineSTART
%token <iVal> BaseLocationFeatureEND
%token <iVal> BaseLocationFeatureSTART
%token <iVal> BaseOppositeAngledLinesEND
%token <iVal> BaseOppositeAngledLinesSTART
%token <iVal> BaseOppositeAngledPlanesEND
%token <iVal> BaseOppositeAngledPlanesSTART
%token <iVal> BaseOppositeParallelLinesEND
%token <iVal> BaseOppositeParallelLinesSTART
%token <iVal> BaseOppositeParallelPlanesEND
%token <iVal> BaseOppositeParallelPlanesSTART
%token <iVal> BaseOtherCurveFeatureEND
%token <iVal> BaseOtherCurveFeatureSTART
%token <iVal> BaseOtherShapeFeatureEND
%token <iVal> BaseOtherShapeFeatureSTART
%token <iVal> BaseOtherSurfaceFeatureEND
%token <iVal> BaseOtherSurfaceFeatureSTART
%token <iVal> BasePlaneEND
%token <iVal> BasePlaneSTART
%token <iVal> BasePointDefinedCurveEND
%token <iVal> BasePointDefinedCurveSTART
%token <iVal> BasePointDefinedSurfaceEND
%token <iVal> BasePointDefinedSurfaceSTART
%token <iVal> BasePointFeatureEND
%token <iVal> BasePointFeatureSTART
%token <iVal> BaseSphereEND
%token <iVal> BaseSphereSTART
%token <iVal> BaseSphericalSegmentEND
%token <iVal> BaseSphericalSegmentSTART
%token <iVal> BaseSurfaceOfRevolutionEND
%token <iVal> BaseSurfaceOfRevolutionSTART
%token <iVal> BaseThreadedFeatureEND
%token <iVal> BaseThreadedFeatureSTART
%token <iVal> BaseToroidalSegmentEND
%token <iVal> BaseToroidalSegmentSTART
%token <iVal> BaseTorusEND
%token <iVal> BaseTorusSTART
%token <iVal> BaselineProductNumberEND
%token <iVal> BaselineProductNumberSTART
%token <iVal> BaselineProductVersionEND
%token <iVal> BaselineProductVersionSTART
%token <iVal> BasicSizeEND
%token <iVal> BasicSizeSTART
%token <iVal> BeginPointEND
%token <iVal> BeginPointSTART
%token <iVal> BestFitEND
%token <iVal> BestFitSTART
%token <iVal> BetweenRowDirectionEND
%token <iVal> BetweenRowDirectionSTART
%token <iVal> BiasEND
%token <iVal> BiasSTART
%token <iVal> BiasStudyPlanEND
%token <iVal> BiasStudyPlanSTART
%token <iVal> BiasStudyResultsEND
%token <iVal> BiasStudyResultsSTART
%token <iVal> BinaryColorsEND
%token <iVal> BinaryColorsSTART
%token <iVal> BinaryCompensatedEND
%token <iVal> BinaryCompensatedSTART
%token <iVal> BinaryDeviationsEND
%token <iVal> BinaryDeviationsSTART
%token <iVal> BinaryMeasurePointNominalIdsEND
%token <iVal> BinaryMeasurePointNominalIdsSTART
%token <iVal> BinaryNormalsEND
%token <iVal> BinaryNormalsSTART
%token <iVal> BinaryPointIndicesEND
%token <iVal> BinaryPointIndicesSTART
%token <iVal> BinaryPointsEND
%token <iVal> BinaryPointsSTART
%token <iVal> BinaryProbeRadiiEND
%token <iVal> BinaryProbeRadiiSTART
%token <iVal> BinaryQualityEND
%token <iVal> BinaryQualitySTART
%token <iVal> BinarySensorIdsEND
%token <iVal> BinarySensorIdsSTART
%token <iVal> BinaryTipIdsEND
%token <iVal> BinaryTipIdsSTART
%token <iVal> BodyEND
%token <iVal> BodySTART
%token <iVal> BodyIdEND
%token <iVal> BodyIdSTART
%token <iVal> BodyIdsEND
%token <iVal> BodyIdsSTART
%token <iVal> BodySetEND
%token <iVal> BodySetSTART
%token <iVal> BonusEND
%token <iVal> BonusSTART
%token <iVal> BonusStatsEND
%token <iVal> BonusStatsSTART
%token <iVal> BooleanEqualEND
%token <iVal> BooleanEqualSTART
%token <iVal> BothSidesEND
%token <iVal> BothSidesSTART
%token <iVal> BottomEND
%token <iVal> BottomSTART
%token <iVal> BottomEnumEND
%token <iVal> BottomEnumSTART
%token <iVal> BoundaryZoneEND
%token <iVal> BoundaryZoneSTART
%token <iVal> BoxEND
%token <iVal> BoxSTART
%token <iVal> BoxCoxTransformationEND
%token <iVal> BoxCoxTransformationSTART
%token <iVal> CADSoftwareEND
%token <iVal> CADSoftwareSTART
%token <iVal> CAxisResolutionEND
%token <iVal> CAxisResolutionSTART
%token <iVal> CCombinedResolutionEND
%token <iVal> CCombinedResolutionSTART
%token <iVal> CMMEND
%token <iVal> CMMSTART
%token <iVal> CMMGeometryEND
%token <iVal> CMMGeometrySTART
%token <iVal> CMMSpeedsEND
%token <iVal> CMMSpeedsSTART
%token <iVal> CPsEND
%token <iVal> CPsSTART
%token <iVal> CPsBinaryEND
%token <iVal> CPsBinarySTART
%token <iVal> CabinetDimensionsEND
%token <iVal> CabinetDimensionsSTART
%token <iVal> CalculateAverageFeaturesEND
%token <iVal> CalculateAverageFeaturesSTART
%token <iVal> CalibratedComparatorMeasureFeatureMethodEND
%token <iVal> CalibratedComparatorMeasureFeatureMethodSTART
%token <iVal> CalibrationEND
%token <iVal> CalibrationSTART
%token <iVal> CalibrationDateEND
%token <iVal> CalibrationDateSTART
%token <iVal> CalibrationMasterEND
%token <iVal> CalibrationMasterSTART
%token <iVal> CalibrationsEND
%token <iVal> CalibrationsSTART
%token <iVal> CaliperEND
%token <iVal> CaliperSTART
%token <iVal> CaliperDialEND
%token <iVal> CaliperDialSTART
%token <iVal> CaliperDigitalEND
%token <iVal> CaliperDigitalSTART
%token <iVal> CameraEND
%token <iVal> CameraSTART
%token <iVal> CameraIdsEND
%token <iVal> CameraIdsSTART
%token <iVal> CameraSetEND
%token <iVal> CameraSetSTART
%token <iVal> CanMeasureDepthEND
%token <iVal> CanMeasureDepthSTART
%token <iVal> CanMeasureInnerDEND
%token <iVal> CanMeasureInnerDSTART
%token <iVal> CanMeasureOuterDEND
%token <iVal> CanMeasureOuterDSTART
%token <iVal> CapabilityCalculationMethodEND
%token <iVal> CapabilityCalculationMethodSTART
%token <iVal> CapabilityStudyPlanEND
%token <iVal> CapabilityStudyPlanSTART
%token <iVal> CapabilityStudyResultsEND
%token <iVal> CapabilityStudyResultsSTART
%token <iVal> CapacitiveSensorEND
%token <iVal> CapacitiveSensorSTART
%token <iVal> CarriageEND
%token <iVal> CarriageSTART
%token <iVal> CarriagesEND
%token <iVal> CarriagesSTART
%token <iVal> CartesianCMMEND
%token <iVal> CartesianCMMSTART
%token <iVal> CartesianCMMAccuracyEND
%token <iVal> CartesianCMMAccuracySTART
%token <iVal> CartesianCMMAxisDirectionsEND
%token <iVal> CartesianCMMAxisDirectionsSTART
%token <iVal> CartesianCMMB89TestEND
%token <iVal> CartesianCMMB89TestSTART
%token <iVal> CartesianCMMFPSTestEND
%token <iVal> CartesianCMMFPSTestSTART
%token <iVal> CartesianCMMGeometryEnumEND
%token <iVal> CartesianCMMGeometryEnumSTART
%token <iVal> CartesianCMMISO10360TestEND
%token <iVal> CartesianCMMISO10360TestSTART
%token <iVal> CartesianCMMPointAccuracyTestEND
%token <iVal> CartesianCMMPointAccuracyTestSTART
%token <iVal> CartesianCMMSpeedsEND
%token <iVal> CartesianCMMSpeedsSTART
%token <iVal> CartesianMeasurementDeviceScalesEND
%token <iVal> CartesianMeasurementDeviceScalesSTART
%token <iVal> CartesianResolutionEND
%token <iVal> CartesianResolutionSTART
%token <iVal> CartesianWorkingVolumeEND
%token <iVal> CartesianWorkingVolumeSTART
%token <iVal> CastEND
%token <iVal> CastSTART
%token <iVal> CenterEND
%token <iVal> CenterSTART
%token <iVal> CenterLineEND
%token <iVal> CenterLineSTART
%token <iVal> CenterOfGravityEND
%token <iVal> CenterOfGravitySTART
%token <iVal> CenterPlaneEND
%token <iVal> CenterPlaneSTART
%token <iVal> CenterPointEND
%token <iVal> CenterPointSTART
%token <iVal> CentroidEND
%token <iVal> CentroidSTART
%token <iVal> CharacteristicDefinitionIdEND
%token <iVal> CharacteristicDefinitionIdSTART
%token <iVal> CharacteristicDefinitionsEND
%token <iVal> CharacteristicDefinitionsSTART
%token <iVal> CharacteristicDefinitionsCountEND
%token <iVal> CharacteristicDefinitionsCountSTART
%token <iVal> CharacteristicDesignatorEND
%token <iVal> CharacteristicDesignatorSTART
%token <iVal> CharacteristicGroupEND
%token <iVal> CharacteristicGroupSTART
%token <iVal> CharacteristicGroupStatusEND
%token <iVal> CharacteristicGroupStatusSTART
%token <iVal> CharacteristicGroupStatusesEND
%token <iVal> CharacteristicGroupStatusesSTART
%token <iVal> CharacteristicGroupsEND
%token <iVal> CharacteristicGroupsSTART
%token <iVal> CharacteristicGroupsCountEND
%token <iVal> CharacteristicGroupsCountSTART
%token <iVal> CharacteristicIsEND
%token <iVal> CharacteristicIsSTART
%token <iVal> CharacteristicItemIdEND
%token <iVal> CharacteristicItemIdSTART
%token <iVal> CharacteristicItemIdsEND
%token <iVal> CharacteristicItemIdsSTART
%token <iVal> CharacteristicItemsEND
%token <iVal> CharacteristicItemsSTART
%token <iVal> CharacteristicItemsCountEND
%token <iVal> CharacteristicItemsCountSTART
%token <iVal> CharacteristicManufacturingProcessGroupEND
%token <iVal> CharacteristicManufacturingProcessGroupSTART
%token <iVal> CharacteristicMeasurementIdsEND
%token <iVal> CharacteristicMeasurementIdsSTART
%token <iVal> CharacteristicMeasurementsEND
%token <iVal> CharacteristicMeasurementsSTART
%token <iVal> CharacteristicNominalIdEND
%token <iVal> CharacteristicNominalIdSTART
%token <iVal> CharacteristicNominalIdsEND
%token <iVal> CharacteristicNominalIdsSTART
%token <iVal> CharacteristicNominalsEND
%token <iVal> CharacteristicNominalsSTART
%token <iVal> CharacteristicNominalsCountEND
%token <iVal> CharacteristicNominalsCountSTART
%token <iVal> CharacteristicStatusEnumEND
%token <iVal> CharacteristicStatusEnumSTART
%token <iVal> CharacteristicToleranceEND
%token <iVal> CharacteristicToleranceSTART
%token <iVal> CharacteristicTypeEnumEND
%token <iVal> CharacteristicTypeEnumSTART
%token <iVal> CharacteristicsEND
%token <iVal> CharacteristicsSTART
%token <iVal> CharacteristicsStatsEND
%token <iVal> CharacteristicsStatsSTART
%token <iVal> ChargeCoupledDeviceCameraSensorEND
%token <iVal> ChargeCoupledDeviceCameraSensorSTART
%token <iVal> CheckDetailsEND
%token <iVal> CheckDetailsSTART
%token <iVal> CheckedEND
%token <iVal> CheckedSTART
%token <iVal> ChecksApprovedEND
%token <iVal> ChecksApprovedSTART
%token <iVal> ChecksPerformedEND
%token <iVal> ChecksPerformedSTART
%token <iVal> ChordCharacteristicDefinitionEND
%token <iVal> ChordCharacteristicDefinitionSTART
%token <iVal> ChordCharacteristicItemEND
%token <iVal> ChordCharacteristicItemSTART
%token <iVal> ChordCharacteristicMeasurementEND
%token <iVal> ChordCharacteristicMeasurementSTART
%token <iVal> ChordCharacteristicNominalEND
%token <iVal> ChordCharacteristicNominalSTART
%token <iVal> ChordCharacteristicStatsEND
%token <iVal> ChordCharacteristicStatsSTART
%token <iVal> ChosenResourceIdsEND
%token <iVal> ChosenResourceIdsSTART
%token <iVal> CircleEND
%token <iVal> CircleSTART
%token <iVal> CircleCenterEND
%token <iVal> CircleCenterSTART
%token <iVal> CircleFeatureDefinitionEND
%token <iVal> CircleFeatureDefinitionSTART
%token <iVal> CircleFeatureItemEND
%token <iVal> CircleFeatureItemSTART
%token <iVal> CircleFeatureMeasurementEND
%token <iVal> CircleFeatureMeasurementSTART
%token <iVal> CircleFeatureNominalEND
%token <iVal> CircleFeatureNominalSTART
%token <iVal> CircleRadiusEND
%token <iVal> CircleRadiusSTART
%token <iVal> CircularArcFeatureDefinitionEND
%token <iVal> CircularArcFeatureDefinitionSTART
%token <iVal> CircularArcFeatureItemEND
%token <iVal> CircularArcFeatureItemSTART
%token <iVal> CircularArcFeatureMeasurementEND
%token <iVal> CircularArcFeatureMeasurementSTART
%token <iVal> CircularArcFeatureNominalEND
%token <iVal> CircularArcFeatureNominalSTART
%token <iVal> CircularRunoutCharacteristicDefinitionEND
%token <iVal> CircularRunoutCharacteristicDefinitionSTART
%token <iVal> CircularRunoutCharacteristicItemEND
%token <iVal> CircularRunoutCharacteristicItemSTART
%token <iVal> CircularRunoutCharacteristicMeasurementEND
%token <iVal> CircularRunoutCharacteristicMeasurementSTART
%token <iVal> CircularRunoutCharacteristicNominalEND
%token <iVal> CircularRunoutCharacteristicNominalSTART
%token <iVal> CircularRunoutCharacteristicStatsEND
%token <iVal> CircularRunoutCharacteristicStatsSTART
%token <iVal> CircularUnitAreaEND
%token <iVal> CircularUnitAreaSTART
%token <iVal> CircularUnitAreaDiameterEND
%token <iVal> CircularUnitAreaDiameterSTART
%token <iVal> CircularityCharacteristicDefinitionEND
%token <iVal> CircularityCharacteristicDefinitionSTART
%token <iVal> CircularityCharacteristicItemEND
%token <iVal> CircularityCharacteristicItemSTART
%token <iVal> CircularityCharacteristicMeasurementEND
%token <iVal> CircularityCharacteristicMeasurementSTART
%token <iVal> CircularityCharacteristicNominalEND
%token <iVal> CircularityCharacteristicNominalSTART
%token <iVal> CircularityCharacteristicStatsEND
%token <iVal> CircularityCharacteristicStatsSTART
%token <iVal> ClosedShellSetWorkingVolumeEND
%token <iVal> ClosedShellSetWorkingVolumeSTART
%token <iVal> ClosedSurfaceEND
%token <iVal> ClosedSurfaceSTART
%token <iVal> CmEND
%token <iVal> CmSTART
%token <iVal> CmkEND
%token <iVal> CmkSTART
%token <iVal> CoEdgeEND
%token <iVal> CoEdgeSTART
%token <iVal> CoEdgeMeshEND
%token <iVal> CoEdgeMeshSTART
%token <iVal> CoEdgesEND
%token <iVal> CoEdgesSTART
%token <iVal> CoEdgesMeshEND
%token <iVal> CoEdgesMeshSTART
%token <iVal> CoaxialityCharacteristicDefinitionEND
%token <iVal> CoaxialityCharacteristicDefinitionSTART
%token <iVal> CoaxialityCharacteristicItemEND
%token <iVal> CoaxialityCharacteristicItemSTART
%token <iVal> CoaxialityCharacteristicMeasurementEND
%token <iVal> CoaxialityCharacteristicMeasurementSTART
%token <iVal> CoaxialityCharacteristicNominalEND
%token <iVal> CoaxialityCharacteristicNominalSTART
%token <iVal> CoaxialityCharacteristicStatsEND
%token <iVal> CoaxialityCharacteristicStatsSTART
%token <iVal> CoefficientsEND
%token <iVal> CoefficientsSTART
%token <iVal> CollectionPlaneEND
%token <iVal> CollectionPlaneSTART
%token <iVal> CollectionPlaneEnumEND
%token <iVal> CollectionPlaneEnumSTART
%token <iVal> ColorEND
%token <iVal> ColorSTART
%token <iVal> ColorsEND
%token <iVal> ColorsSTART
%token <iVal> CombinedAzimuthalResolutionEND
%token <iVal> CombinedAzimuthalResolutionSTART
%token <iVal> CombinedCartesianResolutionEND
%token <iVal> CombinedCartesianResolutionSTART
%token <iVal> CombinedPolarResolutionEND
%token <iVal> CombinedPolarResolutionSTART
%token <iVal> CombinedRadialResolutionEND
%token <iVal> CombinedRadialResolutionSTART
%token <iVal> CombinedSphericalResolutionEND
%token <iVal> CombinedSphericalResolutionSTART
%token <iVal> CombinedUserDefinedResolutionEND
%token <iVal> CombinedUserDefinedResolutionSTART
%token <iVal> CommonCoordinateSystemIdEND
%token <iVal> CommonCoordinateSystemIdSTART
%token <iVal> CommonFileSpecEnumEND
%token <iVal> CommonFileSpecEnumSTART
%token <iVal> CommonStatsValueEND
%token <iVal> CommonStatsValueSTART
%token <iVal> CommonToleranceEND
%token <iVal> CommonToleranceSTART
%token <iVal> CommonZoneEND
%token <iVal> CommonZoneSTART
%token <iVal> ComparisonEND
%token <iVal> ComparisonSTART
%token <iVal> CompensatedEND
%token <iVal> CompensatedSTART
%token <iVal> CompensationsEND
%token <iVal> CompensationsSTART
%token <iVal> ComplexTactileProbeSensorEND
%token <iVal> ComplexTactileProbeSensorSTART
%token <iVal> ComponentEND
%token <iVal> ComponentSTART
%token <iVal> ComponentIdsEND
%token <iVal> ComponentIdsSTART
%token <iVal> ComponentSetEND
%token <iVal> ComponentSetSTART
%token <iVal> CompositeLevelEND
%token <iVal> CompositeLevelSTART
%token <iVal> CompositeSegmentsStatsEND
%token <iVal> CompositeSegmentsStatsSTART
%token <iVal> CompoundDatumEND
%token <iVal> CompoundDatumSTART
%token <iVal> CompressiveYieldStressEND
%token <iVal> CompressiveYieldStressSTART
%token <iVal> ComputedTomographyEND
%token <iVal> ComputedTomographySTART
%token <iVal> ComputedTomographyMeasureFeatureMethodEND
%token <iVal> ComputedTomographyMeasureFeatureMethodSTART
%token <iVal> ConcentricityCharacteristicDefinitionEND
%token <iVal> ConcentricityCharacteristicDefinitionSTART
%token <iVal> ConcentricityCharacteristicItemEND
%token <iVal> ConcentricityCharacteristicItemSTART
%token <iVal> ConcentricityCharacteristicMeasurementEND
%token <iVal> ConcentricityCharacteristicMeasurementSTART
%token <iVal> ConcentricityCharacteristicNominalEND
%token <iVal> ConcentricityCharacteristicNominalSTART
%token <iVal> ConcentricityCharacteristicStatsEND
%token <iVal> ConcentricityCharacteristicStatsSTART
%token <iVal> Cone23END
%token <iVal> Cone23START
%token <iVal> Cone23CoreEND
%token <iVal> Cone23CoreSTART
%token <iVal> ConeFeatureDefinitionEND
%token <iVal> ConeFeatureDefinitionSTART
%token <iVal> ConeFeatureItemEND
%token <iVal> ConeFeatureItemSTART
%token <iVal> ConeFeatureMeasurementEND
%token <iVal> ConeFeatureMeasurementSTART
%token <iVal> ConeFeatureNominalEND
%token <iVal> ConeFeatureNominalSTART
%token <iVal> ConfocalChromaticSensorEND
%token <iVal> ConfocalChromaticSensorSTART
%token <iVal> ConicalSegmentFeatureDefinitionEND
%token <iVal> ConicalSegmentFeatureDefinitionSTART
%token <iVal> ConicalSegmentFeatureItemEND
%token <iVal> ConicalSegmentFeatureItemSTART
%token <iVal> ConicalSegmentFeatureMeasurementEND
%token <iVal> ConicalSegmentFeatureMeasurementSTART
%token <iVal> ConicalSegmentFeatureNominalEND
%token <iVal> ConicalSegmentFeatureNominalSTART
%token <iVal> ConicalTaperCharacteristicDefinitionEND
%token <iVal> ConicalTaperCharacteristicDefinitionSTART
%token <iVal> ConicalTaperCharacteristicItemEND
%token <iVal> ConicalTaperCharacteristicItemSTART
%token <iVal> ConicalTaperCharacteristicMeasurementEND
%token <iVal> ConicalTaperCharacteristicMeasurementSTART
%token <iVal> ConicalTaperCharacteristicNominalEND
%token <iVal> ConicalTaperCharacteristicNominalSTART
%token <iVal> ConicalTaperCharacteristicStatsEND
%token <iVal> ConicalTaperCharacteristicStatsSTART
%token <iVal> ConicityCharacteristicDefinitionEND
%token <iVal> ConicityCharacteristicDefinitionSTART
%token <iVal> ConicityCharacteristicItemEND
%token <iVal> ConicityCharacteristicItemSTART
%token <iVal> ConicityCharacteristicMeasurementEND
%token <iVal> ConicityCharacteristicMeasurementSTART
%token <iVal> ConicityCharacteristicNominalEND
%token <iVal> ConicityCharacteristicNominalSTART
%token <iVal> ConicityCharacteristicStatsEND
%token <iVal> ConicityCharacteristicStatsSTART
%token <iVal> ConstantIsEND
%token <iVal> ConstantIsSTART
%token <iVal> ConstrainOrientationEND
%token <iVal> ConstrainOrientationSTART
%token <iVal> ConstrainSubsequentEND
%token <iVal> ConstrainSubsequentSTART
%token <iVal> ConstructedEND
%token <iVal> ConstructedSTART
%token <iVal> ContactingFeatureEND
%token <iVal> ContactingFeatureSTART
%token <iVal> ContourIlluminationLightSourceEND
%token <iVal> ContourIlluminationLightSourceSTART
%token <iVal> ContourSymbolEND
%token <iVal> ContourSymbolSTART
%token <iVal> ControlIssueEND
%token <iVal> ControlIssueSTART
%token <iVal> ControlIssueDetailsEND
%token <iVal> ControlIssueDetailsSTART
%token <iVal> ControlIssueDetailsListEND
%token <iVal> ControlIssueDetailsListSTART
%token <iVal> ControlIssueEnumEND
%token <iVal> ControlIssueEnumSTART
%token <iVal> ControlMethodEND
%token <iVal> ControlMethodSTART
%token <iVal> ControlMethodIdEND
%token <iVal> ControlMethodIdSTART
%token <iVal> ControlMethodsEND
%token <iVal> ControlMethodsSTART
%token <iVal> ControlledRadiusEND
%token <iVal> ControlledRadiusSTART
%token <iVal> CoordinateEnumEND
%token <iVal> CoordinateEnumSTART
%token <iVal> CoordinateMeasureFeatureMethodEND
%token <iVal> CoordinateMeasureFeatureMethodSTART
%token <iVal> CoordinateMethodEND
%token <iVal> CoordinateMethodSTART
%token <iVal> CoordinateSystemEND
%token <iVal> CoordinateSystemSTART
%token <iVal> CoordinateSystemActualTransformAssociationEND
%token <iVal> CoordinateSystemActualTransformAssociationSTART
%token <iVal> CoordinateSystemActualTransformAssociationsEND
%token <iVal> CoordinateSystemActualTransformAssociationsSTART
%token <iVal> CoordinateSystemCoreEND
%token <iVal> CoordinateSystemCoreSTART
%token <iVal> CoordinateSystemDefinitionsEND
%token <iVal> CoordinateSystemDefinitionsSTART
%token <iVal> CoordinateSystemIdEND
%token <iVal> CoordinateSystemIdSTART
%token <iVal> CoordinateSystemIdsEND
%token <iVal> CoordinateSystemIdsSTART
%token <iVal> CoordinateSystemSetEND
%token <iVal> CoordinateSystemSetSTART
%token <iVal> CoordinateSystemsEND
%token <iVal> CoordinateSystemsSTART
%token <iVal> CoordinateSystemsCountEND
%token <iVal> CoordinateSystemsCountSTART
%token <iVal> CopyEND
%token <iVal> CopySTART
%token <iVal> CornerPointEND
%token <iVal> CornerPointSTART
%token <iVal> CorrectiveActionEND
%token <iVal> CorrectiveActionSTART
%token <iVal> CorrectiveActionIdsEND
%token <iVal> CorrectiveActionIdsSTART
%token <iVal> CorrectiveActionPlanEND
%token <iVal> CorrectiveActionPlanSTART
%token <iVal> CorrectiveActionPlanIdEND
%token <iVal> CorrectiveActionPlanIdSTART
%token <iVal> CorrectiveActionPlansEND
%token <iVal> CorrectiveActionPlansSTART
%token <iVal> CorrectiveActionPlansCountEND
%token <iVal> CorrectiveActionPlansCountSTART
%token <iVal> CorrectiveActionsEND
%token <iVal> CorrectiveActionsSTART
%token <iVal> CountEND
%token <iVal> CountSTART
%token <iVal> CountryEND
%token <iVal> CountrySTART
%token <iVal> CpEND
%token <iVal> CpSTART
%token <iVal> CpThresholdEND
%token <iVal> CpThresholdSTART
%token <iVal> CpkEND
%token <iVal> CpkSTART
%token <iVal> CpkThresholdEND
%token <iVal> CpkThresholdSTART
%token <iVal> CpmEND
%token <iVal> CpmSTART
%token <iVal> CrestDiameterToleranceClassEND
%token <iVal> CrestDiameterToleranceClassSTART
%token <iVal> CriticalityEND
%token <iVal> CriticalitySTART
%token <iVal> CrossSectionReferenceFeatureIdEND
%token <iVal> CrossSectionReferenceFeatureIdSTART
%token <iVal> CurveEND
%token <iVal> CurveSTART
%token <iVal> Curve12END
%token <iVal> Curve12START
%token <iVal> Curve12SetEND
%token <iVal> Curve12SetSTART
%token <iVal> Curve13SetEND
%token <iVal> Curve13SetSTART
%token <iVal> CurveFeatureEND
%token <iVal> CurveFeatureSTART
%token <iVal> CurveFeatureNominalIdEND
%token <iVal> CurveFeatureNominalIdSTART
%token <iVal> CurveIdsEND
%token <iVal> CurveIdsSTART
%token <iVal> CurveLengthCharacteristicDefinitionEND
%token <iVal> CurveLengthCharacteristicDefinitionSTART
%token <iVal> CurveLengthCharacteristicItemEND
%token <iVal> CurveLengthCharacteristicItemSTART
%token <iVal> CurveLengthCharacteristicMeasurementEND
%token <iVal> CurveLengthCharacteristicMeasurementSTART
%token <iVal> CurveLengthCharacteristicNominalEND
%token <iVal> CurveLengthCharacteristicNominalSTART
%token <iVal> CurveLengthCharacteristicStatsEND
%token <iVal> CurveLengthCharacteristicStatsSTART
%token <iVal> CurveMeshEND
%token <iVal> CurveMeshSTART
%token <iVal> CurveMeshSetEND
%token <iVal> CurveMeshSetSTART
%token <iVal> CurvePointsEND
%token <iVal> CurvePointsSTART
%token <iVal> CustomerNumberEND
%token <iVal> CustomerNumberSTART
%token <iVal> CustomerOrganizationEND
%token <iVal> CustomerOrganizationSTART
%token <iVal> CutoffEND
%token <iVal> CutoffSTART
%token <iVal> CylinderEND
%token <iVal> CylinderSTART
%token <iVal> Cylinder23END
%token <iVal> Cylinder23START
%token <iVal> Cylinder23CoreEND
%token <iVal> Cylinder23CoreSTART
%token <iVal> CylinderCenterToCylinderCenterAccuracyEND
%token <iVal> CylinderCenterToCylinderCenterAccuracySTART
%token <iVal> CylinderFeatureDefinitionEND
%token <iVal> CylinderFeatureDefinitionSTART
%token <iVal> CylinderFeatureItemEND
%token <iVal> CylinderFeatureItemSTART
%token <iVal> CylinderFeatureMeasurementEND
%token <iVal> CylinderFeatureMeasurementSTART
%token <iVal> CylinderFeatureNominalEND
%token <iVal> CylinderFeatureNominalSTART
%token <iVal> CylindricalSegmentFeatureDefinitionEND
%token <iVal> CylindricalSegmentFeatureDefinitionSTART
%token <iVal> CylindricalSegmentFeatureItemEND
%token <iVal> CylindricalSegmentFeatureItemSTART
%token <iVal> CylindricalSegmentFeatureMeasurementEND
%token <iVal> CylindricalSegmentFeatureMeasurementSTART
%token <iVal> CylindricalSegmentFeatureNominalEND
%token <iVal> CylindricalSegmentFeatureNominalSTART
%token <iVal> CylindricalWorkingVolumeEND
%token <iVal> CylindricalWorkingVolumeSTART
%token <iVal> CylindricityCharacteristicDefinitionEND
%token <iVal> CylindricityCharacteristicDefinitionSTART
%token <iVal> CylindricityCharacteristicItemEND
%token <iVal> CylindricityCharacteristicItemSTART
%token <iVal> CylindricityCharacteristicMeasurementEND
%token <iVal> CylindricityCharacteristicMeasurementSTART
%token <iVal> CylindricityCharacteristicNominalEND
%token <iVal> CylindricityCharacteristicNominalSTART
%token <iVal> CylindricityCharacteristicStatsEND
%token <iVal> CylindricityCharacteristicStatsSTART
%token <iVal> DMEClassNameEND
%token <iVal> DMEClassNameSTART
%token <iVal> DMEClassNameEnumEND
%token <iVal> DMEClassNameEnumSTART
%token <iVal> DMEDecisionEND
%token <iVal> DMEDecisionSTART
%token <iVal> DMEDecisionClassEND
%token <iVal> DMEDecisionClassSTART
%token <iVal> DMEDecisionIdEND
%token <iVal> DMEDecisionIdSTART
%token <iVal> DMEDecisionMakeModelEND
%token <iVal> DMEDecisionMakeModelSTART
%token <iVal> DMEDecisionRuleEND
%token <iVal> DMEDecisionRuleSTART
%token <iVal> DMEIdEND
%token <iVal> DMEIdSTART
%token <iVal> DMEParameterConstraintEND
%token <iVal> DMEParameterConstraintSTART
%token <iVal> DMESelectionRulesEND
%token <iVal> DMESelectionRulesSTART
%token <iVal> DMESelectionRulesCountEND
%token <iVal> DMESelectionRulesCountSTART
%token <iVal> DMESoftwareEND
%token <iVal> DMESoftwareSTART
%token <iVal> DMEThenEND
%token <iVal> DMEThenSTART
%token <iVal> DRFTransformActualIdEND
%token <iVal> DRFTransformActualIdSTART
%token <iVal> DVRTSensorEND
%token <iVal> DVRTSensorSTART
%token <iVal> DarkCurrentEND
%token <iVal> DarkCurrentSTART
%token <iVal> DataEND
%token <iVal> DataSTART
%token <iVal> DateAndTimeEND
%token <iVal> DateAndTimeSTART
%token <iVal> DatumEND
%token <iVal> DatumSTART
%token <iVal> DatumDefinitionEND
%token <iVal> DatumDefinitionSTART
%token <iVal> DatumDefinitionIdEND
%token <iVal> DatumDefinitionIdSTART
%token <iVal> DatumDefinitionIdsEND
%token <iVal> DatumDefinitionIdsSTART
%token <iVal> DatumDefinitionsEND
%token <iVal> DatumDefinitionsSTART
%token <iVal> DatumDefinitionsCountEND
%token <iVal> DatumDefinitionsCountSTART
%token <iVal> DatumFeatureSimulatorModifierEND
%token <iVal> DatumFeatureSimulatorModifierSTART
%token <iVal> DatumFixedEND
%token <iVal> DatumFixedSTART
%token <iVal> DatumLabelEND
%token <iVal> DatumLabelSTART
%token <iVal> DatumPrecedenceEND
%token <iVal> DatumPrecedenceSTART
%token <iVal> DatumReferenceFrameEND
%token <iVal> DatumReferenceFrameSTART
%token <iVal> DatumReferenceFrameIdEND
%token <iVal> DatumReferenceFrameIdSTART
%token <iVal> DatumReferenceFrameIdsEND
%token <iVal> DatumReferenceFrameIdsSTART
%token <iVal> DatumReferenceFramesEND
%token <iVal> DatumReferenceFramesSTART
%token <iVal> DatumReferenceFramesCountEND
%token <iVal> DatumReferenceFramesCountSTART
%token <iVal> DatumTargetEND
%token <iVal> DatumTargetSTART
%token <iVal> DatumTargetDefinitionIdsEND
%token <iVal> DatumTargetDefinitionIdsSTART
%token <iVal> DatumTargetDefinitionsEND
%token <iVal> DatumTargetDefinitionsSTART
%token <iVal> DatumTargetDefinitionsCountEND
%token <iVal> DatumTargetDefinitionsCountSTART
%token <iVal> DatumTargetIdsEND
%token <iVal> DatumTargetIdsSTART
%token <iVal> DatumTargetLabelEND
%token <iVal> DatumTargetLabelSTART
%token <iVal> DatumTargetTranslationDirectionEND
%token <iVal> DatumTargetTranslationDirectionSTART
%token <iVal> DatumTranslationEND
%token <iVal> DatumTranslationSTART
%token <iVal> DatumTranslationAllowedEND
%token <iVal> DatumTranslationAllowedSTART
%token <iVal> DatumsEND
%token <iVal> DatumsSTART
%token <iVal> DatumsOkEND
%token <iVal> DatumsOkSTART
%token <iVal> DatumsOkStatsEND
%token <iVal> DatumsOkStatsSTART
%token <iVal> DeclarationEND
%token <iVal> DeclarationSTART
%token <iVal> DefaultCharacteristicDefinitionsEND
%token <iVal> DefaultCharacteristicDefinitionsSTART
%token <iVal> DefaultCharacteristicDefinitionsCountEND
%token <iVal> DefaultCharacteristicDefinitionsCountSTART
%token <iVal> DefaultToleranceDefinitionsEND
%token <iVal> DefaultToleranceDefinitionsSTART
%token <iVal> DefaultToleranceDefinitionsCountEND
%token <iVal> DefaultToleranceDefinitionsCountSTART
%token <iVal> DefinedAsLimitEND
%token <iVal> DefinedAsLimitSTART
%token <iVal> DefiningPointEND
%token <iVal> DefiningPointSTART
%token <iVal> DefiningPointsEND
%token <iVal> DefiningPointsSTART
%token <iVal> DefinitionExternalEND
%token <iVal> DefinitionExternalSTART
%token <iVal> DefinitionIdEND
%token <iVal> DefinitionIdSTART
%token <iVal> DegreeOfFreedomEND
%token <iVal> DegreeOfFreedomSTART
%token <iVal> DegreesOfFreedomEND
%token <iVal> DegreesOfFreedomSTART
%token <iVal> DenominatorEND
%token <iVal> DenominatorSTART
%token <iVal> DepartmentEND
%token <iVal> DepartmentSTART
%token <iVal> DepthEND
%token <iVal> DepthSTART
%token <iVal> DepthCharacteristicDefinitionEND
%token <iVal> DepthCharacteristicDefinitionSTART
%token <iVal> DepthCharacteristicItemEND
%token <iVal> DepthCharacteristicItemSTART
%token <iVal> DepthCharacteristicMeasurementEND
%token <iVal> DepthCharacteristicMeasurementSTART
%token <iVal> DepthCharacteristicNominalEND
%token <iVal> DepthCharacteristicNominalSTART
%token <iVal> DepthCharacteristicStatsEND
%token <iVal> DepthCharacteristicStatsSTART
%token <iVal> DepthMaxEND
%token <iVal> DepthMaxSTART
%token <iVal> DepthMinEND
%token <iVal> DepthMinSTART
%token <iVal> DepthVectorEND
%token <iVal> DepthVectorSTART
%token <iVal> DescriptionEND
%token <iVal> DescriptionSTART
%token <iVal> DesignatorEND
%token <iVal> DesignatorSTART
%token <iVal> DetachableCapacitiveSensorEND
%token <iVal> DetachableCapacitiveSensorSTART
%token <iVal> DetachableLVDTSensorEND
%token <iVal> DetachableLVDTSensorSTART
%token <iVal> DetachableSensorsEND
%token <iVal> DetachableSensorsSTART
%token <iVal> DetachableTactileProbeSensorEND
%token <iVal> DetachableTactileProbeSensorSTART
%token <iVal> DetectorBitNumberEND
%token <iVal> DetectorBitNumberSTART
%token <iVal> DetectorPixelSizeEND
%token <iVal> DetectorPixelSizeSTART
%token <iVal> DeterminationModeEND
%token <iVal> DeterminationModeSTART
%token <iVal> DeterminationModifierEND
%token <iVal> DeterminationModifierSTART
%token <iVal> DeviationEND
%token <iVal> DeviationSTART
%token <iVal> DeviationStatsEND
%token <iVal> DeviationStatsSTART
%token <iVal> DeviationsEND
%token <iVal> DeviationsSTART
%token <iVal> DeviationsFromCalibrationEND
%token <iVal> DeviationsFromCalibrationSTART
%token <iVal> DiameterEND
%token <iVal> DiameterSTART
%token <iVal> DiameterBottomEND
%token <iVal> DiameterBottomSTART
%token <iVal> DiameterCharacteristicDefinitionEND
%token <iVal> DiameterCharacteristicDefinitionSTART
%token <iVal> DiameterCharacteristicItemEND
%token <iVal> DiameterCharacteristicItemSTART
%token <iVal> DiameterCharacteristicMeasurementEND
%token <iVal> DiameterCharacteristicMeasurementSTART
%token <iVal> DiameterCharacteristicNominalEND
%token <iVal> DiameterCharacteristicNominalSTART
%token <iVal> DiameterCharacteristicStatsEND
%token <iVal> DiameterCharacteristicStatsSTART
%token <iVal> DiameterMajorEND
%token <iVal> DiameterMajorSTART
%token <iVal> DiameterMaxEND
%token <iVal> DiameterMaxSTART
%token <iVal> DiameterMinEND
%token <iVal> DiameterMinSTART
%token <iVal> DiameterMinorEND
%token <iVal> DiameterMinorSTART
%token <iVal> DiameterModifierEND
%token <iVal> DiameterModifierSTART
%token <iVal> DiameterTopEND
%token <iVal> DiameterTopSTART
%token <iVal> DiametricalSizeEND
%token <iVal> DiametricalSizeSTART
%token <iVal> DiametricalZoneEND
%token <iVal> DiametricalZoneSTART
%token <iVal> DifferenceEND
%token <iVal> DifferenceSTART
%token <iVal> DigitalDrawingEND
%token <iVal> DigitalDrawingSTART
%token <iVal> DigitalModelEND
%token <iVal> DigitalModelSTART
%token <iVal> DigitalModelFormatEnumEND
%token <iVal> DigitalModelFormatEnumSTART
%token <iVal> DimensionModifiersEND
%token <iVal> DimensionModifiersSTART
%token <iVal> DimensionTypeEND
%token <iVal> DimensionTypeSTART
%token <iVal> DimensionalCharacteristicIdsEND
%token <iVal> DimensionalCharacteristicIdsSTART
%token <iVal> DimensionalCharacteristicValueLimitsEND
%token <iVal> DimensionalCharacteristicValueLimitsSTART
%token <iVal> DimensionalCharacteristicValueTargetEND
%token <iVal> DimensionalCharacteristicValueTargetSTART
%token <iVal> DimensionalityEND
%token <iVal> DimensionalitySTART
%token <iVal> DirBegEND
%token <iVal> DirBegSTART
%token <iVal> DirMeridianPrimeEND
%token <iVal> DirMeridianPrimeSTART
%token <iVal> DirNorthPoleEND
%token <iVal> DirNorthPoleSTART
%token <iVal> DirUEND
%token <iVal> DirUSTART
%token <iVal> DirVEND
%token <iVal> DirVSTART
%token <iVal> DirectionEND
%token <iVal> DirectionSTART
%token <iVal> DirectionCurveIdEND
%token <iVal> DirectionCurveIdSTART
%token <iVal> DirectionFeatureEND
%token <iVal> DirectionFeatureSTART
%token <iVal> DirectionFeatureEnumEND
%token <iVal> DirectionFeatureEnumSTART
%token <iVal> DirectionOfLayEND
%token <iVal> DirectionOfLaySTART
%token <iVal> DirectionalOffsetEND
%token <iVal> DirectionalOffsetSTART
%token <iVal> DirectionsEND
%token <iVal> DirectionsSTART
%token <iVal> DirectionsBinaryEND
%token <iVal> DirectionsBinarySTART
%token <iVal> DisplayStyleEND
%token <iVal> DisplayStyleSTART
%token <iVal> DisplayStyleGroupEND
%token <iVal> DisplayStyleGroupSTART
%token <iVal> DisplayStyleGroupsEND
%token <iVal> DisplayStyleGroupsSTART
%token <iVal> DisplayStyleIdEND
%token <iVal> DisplayStyleIdSTART
%token <iVal> DisplayStyleSetEND
%token <iVal> DisplayStyleSetSTART
%token <iVal> DistanceEND
%token <iVal> DistanceSTART
%token <iVal> DistanceAccuracyEND
%token <iVal> DistanceAccuracySTART
%token <iVal> DistanceBetweenCharacteristicDefinitionEND
%token <iVal> DistanceBetweenCharacteristicDefinitionSTART
%token <iVal> DistanceBetweenCharacteristicItemEND
%token <iVal> DistanceBetweenCharacteristicItemSTART
%token <iVal> DistanceBetweenCharacteristicMeasurementEND
%token <iVal> DistanceBetweenCharacteristicMeasurementSTART
%token <iVal> DistanceBetweenCharacteristicNominalEND
%token <iVal> DistanceBetweenCharacteristicNominalSTART
%token <iVal> DistanceBetweenCharacteristicStatsEND
%token <iVal> DistanceBetweenCharacteristicStatsSTART
%token <iVal> DistanceFromCharacteristicDefinitionEND
%token <iVal> DistanceFromCharacteristicDefinitionSTART
%token <iVal> DistanceFromCharacteristicItemEND
%token <iVal> DistanceFromCharacteristicItemSTART
%token <iVal> DistanceFromCharacteristicMeasurementEND
%token <iVal> DistanceFromCharacteristicMeasurementSTART
%token <iVal> DistanceFromCharacteristicNominalEND
%token <iVal> DistanceFromCharacteristicNominalSTART
%token <iVal> DistanceFromCharacteristicStatsEND
%token <iVal> DistanceFromCharacteristicStatsSTART
%token <iVal> DistanceVariableEND
%token <iVal> DistanceVariableSTART
%token <iVal> DistributionTransformationEND
%token <iVal> DistributionTransformationSTART
%token <iVal> DistributionTransformationEnumEND
%token <iVal> DistributionTransformationEnumSTART
%token <iVal> DividedByEND
%token <iVal> DividedBySTART
%token <iVal> DocumentFileInstructionEND
%token <iVal> DocumentFileInstructionSTART
%token <iVal> DocumentQPIdEND
%token <iVal> DocumentQPIdSTART
%token <iVal> DomainAngleEND
%token <iVal> DomainAngleSTART
%token <iVal> DomainLatitudeEND
%token <iVal> DomainLatitudeSTART
%token <iVal> DomainLinearUnitEND
%token <iVal> DomainLinearUnitSTART
%token <iVal> DomainLongitudeEND
%token <iVal> DomainLongitudeSTART
%token <iVal> DomainValuesEND
%token <iVal> DomainValuesSTART
%token <iVal> DraftAngleEND
%token <iVal> DraftAngleSTART
%token <iVal> DraftVectorEND
%token <iVal> DraftVectorSTART
%token <iVal> DrawWireSensorEND
%token <iVal> DrawWireSensorSTART
%token <iVal> DrawingIdEND
%token <iVal> DrawingIdSTART
%token <iVal> DrawingNumberEND
%token <iVal> DrawingNumberSTART
%token <iVal> DrawingZoneEND
%token <iVal> DrawingZoneSTART
%token <iVal> DualNestingIndexFilterEND
%token <iVal> DualNestingIndexFilterSTART
%token <iVal> EachElementEND
%token <iVal> EachElementSTART
%token <iVal> EachRadialElementEND
%token <iVal> EachRadialElementSTART
%token <iVal> EarlierVersionEND
%token <iVal> EarlierVersionSTART
%token <iVal> EddyCurrentSensorEND
%token <iVal> EddyCurrentSensorSTART
%token <iVal> EdgeEND
%token <iVal> EdgeSTART
%token <iVal> EdgeIdsEND
%token <iVal> EdgeIdsSTART
%token <iVal> EdgeOrientedEND
%token <iVal> EdgeOrientedSTART
%token <iVal> EdgePointFeatureDefinitionEND
%token <iVal> EdgePointFeatureDefinitionSTART
%token <iVal> EdgePointFeatureItemEND
%token <iVal> EdgePointFeatureItemSTART
%token <iVal> EdgePointFeatureMeasurementEND
%token <iVal> EdgePointFeatureMeasurementSTART
%token <iVal> EdgePointFeatureNominalEND
%token <iVal> EdgePointFeatureNominalSTART
%token <iVal> EdgePointsEND
%token <iVal> EdgePointsSTART
%token <iVal> EdgeSetEND
%token <iVal> EdgeSetSTART
%token <iVal> EdgesEND
%token <iVal> EdgesSTART
%token <iVal> EdgesBinaryEND
%token <iVal> EdgesBinarySTART
%token <iVal> EffectiveCartesianWorkingVolumeEND
%token <iVal> EffectiveCartesianWorkingVolumeSTART
%token <iVal> EffectiveClosedShellSetWorkingVolumeEND
%token <iVal> EffectiveClosedShellSetWorkingVolumeSTART
%token <iVal> EffectiveCylindricalWorkingVolumeEND
%token <iVal> EffectiveCylindricalWorkingVolumeSTART
%token <iVal> EffectiveDiameterOfObjectiveEND
%token <iVal> EffectiveDiameterOfObjectiveSTART
%token <iVal> EffectiveDiameterPerformanceTestEND
%token <iVal> EffectiveDiameterPerformanceTestSTART
%token <iVal> EffectiveNumberEND
%token <iVal> EffectiveNumberSTART
%token <iVal> EffectiveScreenDiameterEND
%token <iVal> EffectiveScreenDiameterSTART
%token <iVal> EffectiveSphericalWorkingVolumeEND
%token <iVal> EffectiveSphericalWorkingVolumeSTART
%token <iVal> EffectiveUserDefinedWorkingVolumeEND
%token <iVal> EffectiveUserDefinedWorkingVolumeSTART
%token <iVal> EffectiveWorkingVolumeEND
%token <iVal> EffectiveWorkingVolumeSTART
%token <iVal> ElectronicDescriptionEND
%token <iVal> ElectronicDescriptionSTART
%token <iVal> ElectronicMailAddressEND
%token <iVal> ElectronicMailAddressSTART
%token <iVal> ElementIdsEND
%token <iVal> ElementIdsSTART
%token <iVal> ElevationAngularAccuracyEND
%token <iVal> ElevationAngularAccuracySTART
%token <iVal> EllipseFeatureDefinitionEND
%token <iVal> EllipseFeatureDefinitionSTART
%token <iVal> EllipseFeatureItemEND
%token <iVal> EllipseFeatureItemSTART
%token <iVal> EllipseFeatureMeasurementEND
%token <iVal> EllipseFeatureMeasurementSTART
%token <iVal> EllipseFeatureNominalEND
%token <iVal> EllipseFeatureNominalSTART
%token <iVal> EllipticalArcFeatureDefinitionEND
%token <iVal> EllipticalArcFeatureDefinitionSTART
%token <iVal> EllipticalArcFeatureItemEND
%token <iVal> EllipticalArcFeatureItemSTART
%token <iVal> EllipticalArcFeatureMeasurementEND
%token <iVal> EllipticalArcFeatureMeasurementSTART
%token <iVal> EllipticalArcFeatureNominalEND
%token <iVal> EllipticalArcFeatureNominalSTART
%token <iVal> EllipticityCharacteristicDefinitionEND
%token <iVal> EllipticityCharacteristicDefinitionSTART
%token <iVal> EllipticityCharacteristicItemEND
%token <iVal> EllipticityCharacteristicItemSTART
%token <iVal> EllipticityCharacteristicMeasurementEND
%token <iVal> EllipticityCharacteristicMeasurementSTART
%token <iVal> EllipticityCharacteristicNominalEND
%token <iVal> EllipticityCharacteristicNominalSTART
%token <iVal> EllipticityCharacteristicStatsEND
%token <iVal> EllipticityCharacteristicStatsSTART
%token <iVal> ElongatedCircleFeatureDefinitionEND
%token <iVal> ElongatedCircleFeatureDefinitionSTART
%token <iVal> ElongatedCircleFeatureItemEND
%token <iVal> ElongatedCircleFeatureItemSTART
%token <iVal> ElongatedCircleFeatureMeasurementEND
%token <iVal> ElongatedCircleFeatureMeasurementSTART
%token <iVal> ElongatedCircleFeatureNominalEND
%token <iVal> ElongatedCircleFeatureNominalSTART
%token <iVal> ElongatedCylinderFeatureDefinitionEND
%token <iVal> ElongatedCylinderFeatureDefinitionSTART
%token <iVal> ElongatedCylinderFeatureItemEND
%token <iVal> ElongatedCylinderFeatureItemSTART
%token <iVal> ElongatedCylinderFeatureMeasurementEND
%token <iVal> ElongatedCylinderFeatureMeasurementSTART
%token <iVal> ElongatedCylinderFeatureNominalEND
%token <iVal> ElongatedCylinderFeatureNominalSTART
%token <iVal> ElongatedZoneEND
%token <iVal> ElongatedZoneSTART
%token <iVal> ElseEND
%token <iVal> ElseSTART
%token <iVal> ElseDoEND
%token <iVal> ElseDoSTART
%token <iVal> ElseIfEND
%token <iVal> ElseIfSTART
%token <iVal> EmployeeEND
%token <iVal> EmployeeSTART
%token <iVal> EmployeeIdEND
%token <iVal> EmployeeIdSTART
%token <iVal> EndPointEND
%token <iVal> EndPointSTART
%token <iVal> EndRadiusEND
%token <iVal> EndRadiusSTART
%token <iVal> EndRadius1END
%token <iVal> EndRadius1START
%token <iVal> EndRadius2END
%token <iVal> EndRadius2START
%token <iVal> EndTypeEND
%token <iVal> EndTypeSTART
%token <iVal> EntitiesEND
%token <iVal> EntitiesSTART
%token <iVal> EntityEND
%token <iVal> EntitySTART
%token <iVal> EntityExternalIdsEND
%token <iVal> EntityExternalIdsSTART
%token <iVal> EntityIdEND
%token <iVal> EntityIdSTART
%token <iVal> EntityInternalIdsEND
%token <iVal> EntityInternalIdsSTART
%token <iVal> EnvelopeRequirementEND
%token <iVal> EnvelopeRequirementSTART
%token <iVal> EnvironmentEND
%token <iVal> EnvironmentSTART
%token <iVal> EnvironmentalRangeEND
%token <iVal> EnvironmentalRangeSTART
%token <iVal> EqualLegLengthEND
%token <iVal> EqualLegLengthSTART
%token <iVal> EquipmentVariationEND
%token <iVal> EquipmentVariationSTART
%token <iVal> ErrorEND
%token <iVal> ErrorSTART
%token <iVal> ErrorRateEND
%token <iVal> ErrorRateSTART
%token <iVal> ErrorsEND
%token <iVal> ErrorsSTART
%token <iVal> EstablishDatumMeasurandEND
%token <iVal> EstablishDatumMeasurandSTART
%token <iVal> EstimatedStandardDeviationEND
%token <iVal> EstimatedStandardDeviationSTART
%token <iVal> EvaluateCharacteristicMeasurandEND
%token <iVal> EvaluateCharacteristicMeasurandSTART
%token <iVal> EvaluateSpecifiedCharacteristicsEND
%token <iVal> EvaluateSpecifiedCharacteristicsSTART
%token <iVal> ExcitationAmplitudeEND
%token <iVal> ExcitationAmplitudeSTART
%token <iVal> ExcitationFrequencyEND
%token <iVal> ExcitationFrequencySTART
%token <iVal> ExclusionEND
%token <iVal> ExclusionSTART
%token <iVal> ExclusionReasonEnumEND
%token <iVal> ExclusionReasonEnumSTART
%token <iVal> ExclusionsEND
%token <iVal> ExclusionsSTART
%token <iVal> ExpandedEND
%token <iVal> ExpandedSTART
%token <iVal> ExpirationDateEND
%token <iVal> ExpirationDateSTART
%token <iVal> ExplodedViewEND
%token <iVal> ExplodedViewSTART
%token <iVal> ExplodedViewIdEND
%token <iVal> ExplodedViewIdSTART
%token <iVal> ExplodedViewSetEND
%token <iVal> ExplodedViewSetSTART
%token <iVal> ExportControlClassificationEND
%token <iVal> ExportControlClassificationSTART
%token <iVal> ExtentEND
%token <iVal> ExtentSTART
%token <iVal> ExtentEnumEND
%token <iVal> ExtentEnumSTART
%token <iVal> ExternalCADCoordinateSystemIdEND
%token <iVal> ExternalCADCoordinateSystemIdSTART
%token <iVal> ExternalFileEND
%token <iVal> ExternalFileSTART
%token <iVal> ExternalFileReferenceEND
%token <iVal> ExternalFileReferenceSTART
%token <iVal> ExternalFileReferencesEND
%token <iVal> ExternalFileReferencesSTART
%token <iVal> ExternalQIFDocumentEND
%token <iVal> ExternalQIFDocumentSTART
%token <iVal> ExternalQIFReferencesEND
%token <iVal> ExternalQIFReferencesSTART
%token <iVal> ExternalQIFReferencesCountEND
%token <iVal> ExternalQIFReferencesCountSTART
%token <iVal> ExternalReferenceMeasureFeatureMethodEND
%token <iVal> ExternalReferenceMeasureFeatureMethodSTART
%token <iVal> ExtractEND
%token <iVal> ExtractSTART
%token <iVal> ExtremeEND
%token <iVal> ExtremeSTART
%token <iVal> ExtremeLimitEND
%token <iVal> ExtremeLimitSTART
%token <iVal> Extrude23END
%token <iVal> Extrude23START
%token <iVal> Extrude23CoreEND
%token <iVal> Extrude23CoreSTART
%token <iVal> ExtrudedCrossSectionFeatureDefinitionEND
%token <iVal> ExtrudedCrossSectionFeatureDefinitionSTART
%token <iVal> ExtrudedCrossSectionFeatureItemEND
%token <iVal> ExtrudedCrossSectionFeatureItemSTART
%token <iVal> ExtrudedCrossSectionFeatureMeasurementEND
%token <iVal> ExtrudedCrossSectionFeatureMeasurementSTART
%token <iVal> ExtrudedCrossSectionFeatureNominalEND
%token <iVal> ExtrudedCrossSectionFeatureNominalSTART
%token <iVal> EyePieceMagnificationEND
%token <iVal> EyePieceMagnificationSTART
%token <iVal> FaceEND
%token <iVal> FaceSTART
%token <iVal> FaceIdsEND
%token <iVal> FaceIdsSTART
%token <iVal> FaceMeshEND
%token <iVal> FaceMeshSTART
%token <iVal> FacePointsEND
%token <iVal> FacePointsSTART
%token <iVal> FaceSetEND
%token <iVal> FaceSetSTART
%token <iVal> FacsimileNumberEND
%token <iVal> FacsimileNumberSTART
%token <iVal> FactorEND
%token <iVal> FactorSTART
%token <iVal> FailValuesEND
%token <iVal> FailValuesSTART
%token <iVal> FailurePercentageEND
%token <iVal> FailurePercentageSTART
%token <iVal> FarEND
%token <iVal> FarSTART
%token <iVal> FeatureAreaEND
%token <iVal> FeatureAreaSTART
%token <iVal> FeatureDefinitionIdEND
%token <iVal> FeatureDefinitionIdSTART
%token <iVal> FeatureDefinitionsEND
%token <iVal> FeatureDefinitionsSTART
%token <iVal> FeatureDefinitionsCountEND
%token <iVal> FeatureDefinitionsCountSTART
%token <iVal> FeatureDirectionEND
%token <iVal> FeatureDirectionSTART
%token <iVal> FeatureIdEND
%token <iVal> FeatureIdSTART
%token <iVal> FeatureIsDatumEND
%token <iVal> FeatureIsDatumSTART
%token <iVal> FeatureIsInternalEND
%token <iVal> FeatureIsInternalSTART
%token <iVal> FeatureItemIdEND
%token <iVal> FeatureItemIdSTART
%token <iVal> FeatureItemIdsEND
%token <iVal> FeatureItemIdsSTART
%token <iVal> FeatureItemsEND
%token <iVal> FeatureItemsSTART
%token <iVal> FeatureItemsCountEND
%token <iVal> FeatureItemsCountSTART
%token <iVal> FeatureLengthEND
%token <iVal> FeatureLengthSTART
%token <iVal> FeatureMeasurementIdsEND
%token <iVal> FeatureMeasurementIdsSTART
%token <iVal> FeatureNameEND
%token <iVal> FeatureNameSTART
%token <iVal> FeatureNominalIdEND
%token <iVal> FeatureNominalIdSTART
%token <iVal> FeatureNominalIdsEND
%token <iVal> FeatureNominalIdsSTART
%token <iVal> FeatureNominalPairsEND
%token <iVal> FeatureNominalPairsSTART
%token <iVal> FeatureNominalsEND
%token <iVal> FeatureNominalsSTART
%token <iVal> FeatureNominalsCountEND
%token <iVal> FeatureNominalsCountSTART
%token <iVal> FeaturePairEND
%token <iVal> FeaturePairSTART
%token <iVal> FeatureRulesEND
%token <iVal> FeatureRulesSTART
%token <iVal> FeatureRulesCountEND
%token <iVal> FeatureRulesCountSTART
%token <iVal> FeatureSizeEND
%token <iVal> FeatureSizeSTART
%token <iVal> FeatureSpeedEND
%token <iVal> FeatureSpeedSTART
%token <iVal> FeatureTypeEnumEND
%token <iVal> FeatureTypeEnumSTART
%token <iVal> FeatureTypeIsEND
%token <iVal> FeatureTypeIsSTART
%token <iVal> FeatureZoneAreaBetweenEND
%token <iVal> FeatureZoneAreaBetweenSTART
%token <iVal> FeatureZoneAreaCircularEND
%token <iVal> FeatureZoneAreaCircularSTART
%token <iVal> FeatureZoneAreaCylindricalEND
%token <iVal> FeatureZoneAreaCylindricalSTART
%token <iVal> FeatureZoneAreaIrregularEND
%token <iVal> FeatureZoneAreaIrregularSTART
%token <iVal> FeatureZoneAreaRectangularEND
%token <iVal> FeatureZoneAreaRectangularSTART
%token <iVal> FeatureZoneAreaSphericalEND
%token <iVal> FeatureZoneAreaSphericalSTART
%token <iVal> FeatureZoneCurveCircularEND
%token <iVal> FeatureZoneCurveCircularSTART
%token <iVal> FeatureZoneCurveIrregularEND
%token <iVal> FeatureZoneCurveIrregularSTART
%token <iVal> FeatureZoneCurveLineEND
%token <iVal> FeatureZoneCurveLineSTART
%token <iVal> FeatureZoneIdsEND
%token <iVal> FeatureZoneIdsSTART
%token <iVal> FeatureZonePointEND
%token <iVal> FeatureZonePointSTART
%token <iVal> FeatureZonesEND
%token <iVal> FeatureZonesSTART
%token <iVal> FeaturesEND
%token <iVal> FeaturesSTART
%token <iVal> FieldEND
%token <iVal> FieldSTART
%token <iVal> FieldOfViewEND
%token <iVal> FieldOfViewSTART
%token <iVal> FieldOfViewDiameterEND
%token <iVal> FieldOfViewDiameterSTART
%token <iVal> FileEND
%token <iVal> FileSTART
%token <iVal> FileSpecEND
%token <iVal> FileSpecSTART
%token <iVal> FileUnitsEND
%token <iVal> FileUnitsSTART
%token <iVal> FilterEND
%token <iVal> FilterSTART
%token <iVal> FinishingEND
%token <iVal> FinishingSTART
%token <iVal> FinishingDesignatorEND
%token <iVal> FinishingDesignatorSTART
%token <iVal> FirstArticleStudyPlanEND
%token <iVal> FirstArticleStudyPlanSTART
%token <iVal> FirstArticleStudyResultsEND
%token <iVal> FirstArticleStudyResultsSTART
%token <iVal> FirstAxisEND
%token <iVal> FirstAxisSTART
%token <iVal> FirstFeatureEND
%token <iVal> FirstFeatureSTART
%token <iVal> FirstFeatureLocationEND
%token <iVal> FirstFeatureLocationSTART
%token <iVal> FirstFeatureZoneEND
%token <iVal> FirstFeatureZoneSTART
%token <iVal> FirstLegLengthEND
%token <iVal> FirstLegLengthSTART
%token <iVal> FirstLineOriginEND
%token <iVal> FirstLineOriginSTART
%token <iVal> FirstNestingIndexEND
%token <iVal> FirstNestingIndexSTART
%token <iVal> FixtureEND
%token <iVal> FixtureSTART
%token <iVal> FixtureIdEND
%token <iVal> FixtureIdSTART
%token <iVal> FixturesEND
%token <iVal> FixturesSTART
%token <iVal> FlatTaperCharacteristicDefinitionEND
%token <iVal> FlatTaperCharacteristicDefinitionSTART
%token <iVal> FlatTaperCharacteristicItemEND
%token <iVal> FlatTaperCharacteristicItemSTART
%token <iVal> FlatTaperCharacteristicMeasurementEND
%token <iVal> FlatTaperCharacteristicMeasurementSTART
%token <iVal> FlatTaperCharacteristicNominalEND
%token <iVal> FlatTaperCharacteristicNominalSTART
%token <iVal> FlatTaperCharacteristicStatsEND
%token <iVal> FlatTaperCharacteristicStatsSTART
%token <iVal> FlatnessCharacteristicDefinitionEND
%token <iVal> FlatnessCharacteristicDefinitionSTART
%token <iVal> FlatnessCharacteristicItemEND
%token <iVal> FlatnessCharacteristicItemSTART
%token <iVal> FlatnessCharacteristicMeasurementEND
%token <iVal> FlatnessCharacteristicMeasurementSTART
%token <iVal> FlatnessCharacteristicNominalEND
%token <iVal> FlatnessCharacteristicNominalSTART
%token <iVal> FlatnessCharacteristicStatsEND
%token <iVal> FlatnessCharacteristicStatsSTART
%token <iVal> FocalSpotSizeEND
%token <iVal> FocalSpotSizeSTART
%token <iVal> FolderAssemblyEND
%token <iVal> FolderAssemblySTART
%token <iVal> FolderIdsEND
%token <iVal> FolderIdsSTART
%token <iVal> FolderPartEND
%token <iVal> FolderPartSTART
%token <iVal> FoldersAssemblyEND
%token <iVal> FoldersAssemblySTART
%token <iVal> FoldersPartEND
%token <iVal> FoldersPartSTART
%token <iVal> FontEND
%token <iVal> FontSTART
%token <iVal> FontsEND
%token <iVal> FontsSTART
%token <iVal> ForceAbsoluteLinearityEND
%token <iVal> ForceAbsoluteLinearitySTART
%token <iVal> ForceCriterionEND
%token <iVal> ForceCriterionSTART
%token <iVal> ForceLimitEND
%token <iVal> ForceLimitSTART
%token <iVal> ForceMeasurementEND
%token <iVal> ForceMeasurementSTART
%token <iVal> ForceStatsSummariesEND
%token <iVal> ForceStatsSummariesSTART
%token <iVal> ForceStatsSummaryEND
%token <iVal> ForceStatsSummarySTART
%token <iVal> ForceUnitEND
%token <iVal> ForceUnitSTART
%token <iVal> FormEND
%token <iVal> FormSTART
%token <iVal> FormVarianceEND
%token <iVal> FormVarianceSTART
%token <iVal> FormalStandardIdEND
%token <iVal> FormalStandardIdSTART
%token <iVal> FormatEND
%token <iVal> FormatSTART
%token <iVal> FourthCompositeSegmentPositionDefinitionEND
%token <iVal> FourthCompositeSegmentPositionDefinitionSTART
%token <iVal> FourthCompositeSegmentPositionMeasurementEND
%token <iVal> FourthCompositeSegmentPositionMeasurementSTART
%token <iVal> FourthCompositeSegmentPositionStatsEND
%token <iVal> FourthCompositeSegmentPositionStatsSTART
%token <iVal> FourthCompositeSegmentProfileDefinitionEND
%token <iVal> FourthCompositeSegmentProfileDefinitionSTART
%token <iVal> FourthCompositeSegmentProfileMeasurementEND
%token <iVal> FourthCompositeSegmentProfileMeasurementSTART
%token <iVal> FourthCompositeSegmentProfileStatsEND
%token <iVal> FourthCompositeSegmentProfileStatsSTART
%token <iVal> FractionEND
%token <iVal> FractionSTART
%token <iVal> FrameCircularEND
%token <iVal> FrameCircularSTART
%token <iVal> FrameFlagEND
%token <iVal> FrameFlagSTART
%token <iVal> FrameHexagonalEND
%token <iVal> FrameHexagonalSTART
%token <iVal> FrameIrregularFormEND
%token <iVal> FrameIrregularFormSTART
%token <iVal> FrameOctagonalEND
%token <iVal> FrameOctagonalSTART
%token <iVal> FramePentagonalEND
%token <iVal> FramePentagonalSTART
%token <iVal> FrameRectangularEND
%token <iVal> FrameRectangularSTART
%token <iVal> FrameTriangleEND
%token <iVal> FrameTriangleSTART
%token <iVal> FrameWeldSymbolEND
%token <iVal> FrameWeldSymbolSTART
%token <iVal> FramesEND
%token <iVal> FramesSTART
%token <iVal> FreeStateEND
%token <iVal> FreeStateSTART
%token <iVal> FrequencyResponseEND
%token <iVal> FrequencyResponseSTART
%token <iVal> FromConeEND
%token <iVal> FromConeSTART
%token <iVal> FromCurveZoneIdEND
%token <iVal> FromCurveZoneIdSTART
%token <iVal> FromCylinderEND
%token <iVal> FromCylinderSTART
%token <iVal> FromPointZoneIdEND
%token <iVal> FromPointZoneIdSTART
%token <iVal> FromScanEND
%token <iVal> FromScanSTART
%token <iVal> FullAngleEND
%token <iVal> FullAngleSTART
%token <iVal> FunctionalSizeEND
%token <iVal> FunctionalSizeSTART
%token <iVal> FunctionalSizeStatsEND
%token <iVal> FunctionalSizeStatsSTART
%token <iVal> GDTEND
%token <iVal> GDTSTART
%token <iVal> GageDeviceEND
%token <iVal> GageDeviceSTART
%token <iVal> GageMeasureFeatureMethodEND
%token <iVal> GageMeasureFeatureMethodSTART
%token <iVal> GageRandREND
%token <iVal> GageRandRSTART
%token <iVal> GageRandRStudyPlanEND
%token <iVal> GageRandRStudyPlanSTART
%token <iVal> GageRandRStudyResultsEND
%token <iVal> GageRandRStudyResultsSTART
%token <iVal> GeneratrixEND
%token <iVal> GeneratrixSTART
%token <iVal> GeometricCharacteristicIdsEND
%token <iVal> GeometricCharacteristicIdsSTART
%token <iVal> GeometricCharacteristicStatsEND
%token <iVal> GeometricCharacteristicStatsSTART
%token <iVal> GeometricCharacteristicValueEND
%token <iVal> GeometricCharacteristicValueSTART
%token <iVal> GeometrySetEND
%token <iVal> GeometrySetSTART
%token <iVal> GoodnessOfFitEND
%token <iVal> GoodnessOfFitSTART
%token <iVal> GoodnessOfFitThresholdEND
%token <iVal> GoodnessOfFitThresholdSTART
%token <iVal> GradeEND
%token <iVal> GradeSTART
%token <iVal> GraphicsEND
%token <iVal> GraphicsSTART
%token <iVal> GreaterOrEqualEND
%token <iVal> GreaterOrEqualSTART
%token <iVal> GreaterThanEND
%token <iVal> GreaterThanSTART
%token <iVal> GrooveEND
%token <iVal> GrooveSTART
%token <iVal> GroupFeatureDefinitionEND
%token <iVal> GroupFeatureDefinitionSTART
%token <iVal> GroupFeatureItemEND
%token <iVal> GroupFeatureItemSTART
%token <iVal> GroupFeatureMeasurementEND
%token <iVal> GroupFeatureMeasurementSTART
%token <iVal> GroupFeatureNominalEND
%token <iVal> GroupFeatureNominalSTART
%token <iVal> GroupIDEND
%token <iVal> GroupIDSTART
%token <iVal> GroupIdEND
%token <iVal> GroupIdSTART
%token <iVal> HalfAngleEND
%token <iVal> HalfAngleSTART
%token <iVal> HaltEND
%token <iVal> HaltSTART
%token <iVal> HatchStyleEND
%token <iVal> HatchStyleSTART
%token <iVal> HatchStyleIdEND
%token <iVal> HatchStyleIdSTART
%token <iVal> HatchStyleSetEND
%token <iVal> HatchStyleSetSTART
%token <iVal> HeadFormEND
%token <iVal> HeadFormSTART
%token <iVal> HeadForm2END
%token <iVal> HeadForm2START
%token <iVal> HeadHeightEND
%token <iVal> HeadHeightSTART
%token <iVal> HeadMassEND
%token <iVal> HeadMassSTART
%token <iVal> HeadSizeEND
%token <iVal> HeadSizeSTART
%token <iVal> HeaderEND
%token <iVal> HeaderSTART
%token <iVal> HeightEND
%token <iVal> HeightSTART
%token <iVal> HeightCharacteristicDefinitionEND
%token <iVal> HeightCharacteristicDefinitionSTART
%token <iVal> HeightCharacteristicItemEND
%token <iVal> HeightCharacteristicItemSTART
%token <iVal> HeightCharacteristicMeasurementEND
%token <iVal> HeightCharacteristicMeasurementSTART
%token <iVal> HeightCharacteristicNominalEND
%token <iVal> HeightCharacteristicNominalSTART
%token <iVal> HeightCharacteristicStatsEND
%token <iVal> HeightCharacteristicStatsSTART
%token <iVal> HomeLocationEND
%token <iVal> HomeLocationSTART
%token <iVal> HorizontalFieldOfViewEND
%token <iVal> HorizontalFieldOfViewSTART
%token <iVal> HousingMaterialEND
%token <iVal> HousingMaterialSTART
%token <iVal> HysteresisEND
%token <iVal> HysteresisSTART
%token <iVal> ISBNEND
%token <iVal> ISBNSTART
%token <iVal> ISODegreeOfFreedomEND
%token <iVal> ISODegreeOfFreedomSTART
%token <iVal> IdEND
%token <iVal> IdSTART
%token <iVal> IdsEND
%token <iVal> IdsSTART
%token <iVal> IfEND
%token <iVal> IfSTART
%token <iVal> IfActionGroupEND
%token <iVal> IfActionGroupSTART
%token <iVal> IfThenCircleRuleEND
%token <iVal> IfThenCircleRuleSTART
%token <iVal> IfThenCircularArcRuleEND
%token <iVal> IfThenCircularArcRuleSTART
%token <iVal> IfThenConeRuleEND
%token <iVal> IfThenConeRuleSTART
%token <iVal> IfThenConicalSegmentRuleEND
%token <iVal> IfThenConicalSegmentRuleSTART
%token <iVal> IfThenCurveRuleEND
%token <iVal> IfThenCurveRuleSTART
%token <iVal> IfThenCylinderRuleEND
%token <iVal> IfThenCylinderRuleSTART
%token <iVal> IfThenCylindricalSegmentRuleEND
%token <iVal> IfThenCylindricalSegmentRuleSTART
%token <iVal> IfThenEllipseRuleEND
%token <iVal> IfThenEllipseRuleSTART
%token <iVal> IfThenEllipticalArcRuleEND
%token <iVal> IfThenEllipticalArcRuleSTART
%token <iVal> IfThenElongatedCircleRuleEND
%token <iVal> IfThenElongatedCircleRuleSTART
%token <iVal> IfThenElongatedCylinderRuleEND
%token <iVal> IfThenElongatedCylinderRuleSTART
%token <iVal> IfThenElseFeatureRulesEND
%token <iVal> IfThenElseFeatureRulesSTART
%token <iVal> IfThenExtrudedCrossSectionRuleEND
%token <iVal> IfThenExtrudedCrossSectionRuleSTART
%token <iVal> IfThenFeatureRuleEND
%token <iVal> IfThenFeatureRuleSTART
%token <iVal> IfThenLineRuleEND
%token <iVal> IfThenLineRuleSTART
%token <iVal> IfThenOppositeAngledLinesRuleEND
%token <iVal> IfThenOppositeAngledLinesRuleSTART
%token <iVal> IfThenOppositeAngledPlanesRuleEND
%token <iVal> IfThenOppositeAngledPlanesRuleSTART
%token <iVal> IfThenOppositeParallelLinesRuleEND
%token <iVal> IfThenOppositeParallelLinesRuleSTART
%token <iVal> IfThenOppositeParallelPlanesRuleEND
%token <iVal> IfThenOppositeParallelPlanesRuleSTART
%token <iVal> IfThenPlaneRuleEND
%token <iVal> IfThenPlaneRuleSTART
%token <iVal> IfThenPointDefinedCurveRuleEND
%token <iVal> IfThenPointDefinedCurveRuleSTART
%token <iVal> IfThenPointDefinedSurfaceRuleEND
%token <iVal> IfThenPointDefinedSurfaceRuleSTART
%token <iVal> IfThenPointRuleEND
%token <iVal> IfThenPointRuleSTART
%token <iVal> IfThenSphereRuleEND
%token <iVal> IfThenSphereRuleSTART
%token <iVal> IfThenSphericalSegmentRuleEND
%token <iVal> IfThenSphericalSegmentRuleSTART
%token <iVal> IfThenSurfaceOfRevolutionRuleEND
%token <iVal> IfThenSurfaceOfRevolutionRuleSTART
%token <iVal> IfThenSurfaceRuleEND
%token <iVal> IfThenSurfaceRuleSTART
%token <iVal> IfThenToroidalSegmentRuleEND
%token <iVal> IfThenToroidalSegmentRuleSTART
%token <iVal> IfThenTorusRuleEND
%token <iVal> IfThenTorusRuleSTART
%token <iVal> IlluminationUnitEND
%token <iVal> IlluminationUnitSTART
%token <iVal> ImageInstructionEND
%token <iVal> ImageInstructionSTART
%token <iVal> InSpecRatioEND
%token <iVal> InSpecRatioSTART
%token <iVal> IncrementalArcEND
%token <iVal> IncrementalArcSTART
%token <iVal> IncrementalDistanceEND
%token <iVal> IncrementalDistanceSTART
%token <iVal> IncrementalRowDistanceEND
%token <iVal> IncrementalRowDistanceSTART
%token <iVal> IndependencyEND
%token <iVal> IndependencySTART
%token <iVal> IndexEND
%token <iVal> IndexSTART
%token <iVal> InspectingOrganizationEND
%token <iVal> InspectingOrganizationSTART
%token <iVal> InspectionEndEND
%token <iVal> InspectionEndSTART
%token <iVal> InspectionModeEND
%token <iVal> InspectionModeSTART
%token <iVal> InspectionOperatorEND
%token <iVal> InspectionOperatorSTART
%token <iVal> InspectionProgramEND
%token <iVal> InspectionProgramSTART
%token <iVal> InspectionProgramExecutionSoftwareEND
%token <iVal> InspectionProgramExecutionSoftwareSTART
%token <iVal> InspectionProgramGenerationSoftwareEND
%token <iVal> InspectionProgramGenerationSoftwareSTART
%token <iVal> InspectionScopeEND
%token <iVal> InspectionScopeSTART
%token <iVal> InspectionSoftwareItemsEND
%token <iVal> InspectionSoftwareItemsSTART
%token <iVal> InspectionStartEND
%token <iVal> InspectionStartSTART
%token <iVal> InspectionStatusEND
%token <iVal> InspectionStatusSTART
%token <iVal> InspectionStatusEnumEND
%token <iVal> InspectionStatusEnumSTART
%token <iVal> InspectionTraceabilityEND
%token <iVal> InspectionTraceabilitySTART
%token <iVal> InstanceEND
%token <iVal> InstanceSTART
%token <iVal> InstancesEND
%token <iVal> InstancesSTART
%token <iVal> InteractionEND
%token <iVal> InteractionSTART
%token <iVal> InternalCADCoordinateSystemIdEND
%token <iVal> InternalCADCoordinateSystemIdSTART
%token <iVal> InternalExternalEND
%token <iVal> InternalExternalSTART
%token <iVal> InternalLocationEND
%token <iVal> InternalLocationSTART
%token <iVal> IntersectionEND
%token <iVal> IntersectionSTART
%token <iVal> IntersectionFeatureEND
%token <iVal> IntersectionFeatureSTART
%token <iVal> IntersectionPlaneEND
%token <iVal> IntersectionPlaneSTART
%token <iVal> IntersectionPlaneEnumEND
%token <iVal> IntersectionPlaneEnumSTART
%token <iVal> IsCounterboredHoleEND
%token <iVal> IsCounterboredHoleSTART
%token <iVal> IsCountersunkHoleEND
%token <iVal> IsCountersunkHoleSTART
%token <iVal> IsProfileGroupEND
%token <iVal> IsProfileGroupSTART
%token <iVal> IsRunoutGroupEND
%token <iVal> IsRunoutGroupSTART
%token <iVal> IsSpotfaceEND
%token <iVal> IsSpotfaceSTART
%token <iVal> ItemQPIdEND
%token <iVal> ItemQPIdSTART
%token <iVal> JobEND
%token <iVal> JobSTART
%token <iVal> JoystickSpeedsEND
%token <iVal> JoystickSpeedsSTART
%token <iVal> KnotsEND
%token <iVal> KnotsSTART
%token <iVal> KnotsUEND
%token <iVal> KnotsUSTART
%token <iVal> KnotsVEND
%token <iVal> KnotsVSTART
%token <iVal> KurtosisEND
%token <iVal> KurtosisSTART
%token <iVal> LVDTSensorEND
%token <iVal> LVDTSensorSTART
%token <iVal> LabelEND
%token <iVal> LabelSTART
%token <iVal> LargeEndDistanceEND
%token <iVal> LargeEndDistanceSTART
%token <iVal> LaserEND
%token <iVal> LaserSTART
%token <iVal> LaserClassEND
%token <iVal> LaserClassSTART
%token <iVal> LaserEffectiveLengthEND
%token <iVal> LaserEffectiveLengthSTART
%token <iVal> LaserPowerEND
%token <iVal> LaserPowerSTART
%token <iVal> LaserPowerSupplyEND
%token <iVal> LaserPowerSupplySTART
%token <iVal> LaserRadarEND
%token <iVal> LaserRadarSTART
%token <iVal> LaserRadarMeasureFeatureMethodEND
%token <iVal> LaserRadarMeasureFeatureMethodSTART
%token <iVal> LaserSafetyClassEND
%token <iVal> LaserSafetyClassSTART
%token <iVal> LaserSourceEND
%token <iVal> LaserSourceSTART
%token <iVal> LaserSpotSizeEND
%token <iVal> LaserSpotSizeSTART
%token <iVal> LaserTrackerEND
%token <iVal> LaserTrackerSTART
%token <iVal> LaserTrackerMeasureFeatureMethodEND
%token <iVal> LaserTrackerMeasureFeatureMethodSTART
%token <iVal> LaserTriangulationSensorEND
%token <iVal> LaserTriangulationSensorSTART
%token <iVal> LaserWaveLengthEND
%token <iVal> LaserWaveLengthSTART
%token <iVal> LateralTrackingSpeedEND
%token <iVal> LateralTrackingSpeedSTART
%token <iVal> LatitudeLongitudeSweepEND
%token <iVal> LatitudeLongitudeSweepSTART
%token <iVal> LatitudeLongitudeSweepFullEND
%token <iVal> LatitudeLongitudeSweepFullSTART
%token <iVal> LatitudeLongitudeSweepMeasurementRangeEND
%token <iVal> LatitudeLongitudeSweepMeasurementRangeSTART
%token <iVal> LayerEND
%token <iVal> LayerSTART
%token <iVal> LayerSetEND
%token <iVal> LayerSetSTART
%token <iVal> LeaderEND
%token <iVal> LeaderSTART
%token <iVal> LeaderCircularEND
%token <iVal> LeaderCircularSTART
%token <iVal> LeaderDoubleHeadEND
%token <iVal> LeaderDoubleHeadSTART
%token <iVal> LeaderDoubleHeadCircularEND
%token <iVal> LeaderDoubleHeadCircularSTART
%token <iVal> LeaderDoubleHeadExtendEND
%token <iVal> LeaderDoubleHeadExtendSTART
%token <iVal> LeaderExtendEND
%token <iVal> LeaderExtendSTART
%token <iVal> LeftHandedEND
%token <iVal> LeftHandedSTART
%token <iVal> LengthEND
%token <iVal> LengthSTART
%token <iVal> LengthCharacteristicDefinitionEND
%token <iVal> LengthCharacteristicDefinitionSTART
%token <iVal> LengthCharacteristicItemEND
%token <iVal> LengthCharacteristicItemSTART
%token <iVal> LengthCharacteristicMeasurementEND
%token <iVal> LengthCharacteristicMeasurementSTART
%token <iVal> LengthCharacteristicNominalEND
%token <iVal> LengthCharacteristicNominalSTART
%token <iVal> LengthCharacteristicStatsEND
%token <iVal> LengthCharacteristicStatsSTART
%token <iVal> LengthDirectionEND
%token <iVal> LengthDirectionSTART
%token <iVal> LengthMaxEND
%token <iVal> LengthMaxSTART
%token <iVal> LengthMinEND
%token <iVal> LengthMinSTART
%token <iVal> LengthOfEachWeldEND
%token <iVal> LengthOfEachWeldSTART
%token <iVal> LengthVectorEND
%token <iVal> LengthVectorSTART
%token <iVal> LessOrEqualEND
%token <iVal> LessOrEqualSTART
%token <iVal> LessThanEND
%token <iVal> LessThanSTART
%token <iVal> LesserErrorEND
%token <iVal> LesserErrorSTART
%token <iVal> LevelEnumEND
%token <iVal> LevelEnumSTART
%token <iVal> LightPenCMMEND
%token <iVal> LightPenCMMSTART
%token <iVal> LightPenCMMChargeCoupledDeviceCameraSensorEND
%token <iVal> LightPenCMMChargeCoupledDeviceCameraSensorSTART
%token <iVal> LightSourceEND
%token <iVal> LightSourceSTART
%token <iVal> LimitEND
%token <iVal> LimitSTART
%token <iVal> LimitsAndFitsSpecificationEND
%token <iVal> LimitsAndFitsSpecificationSTART
%token <iVal> LineEND
%token <iVal> LineSTART
%token <iVal> LineAuxiliaryEND
%token <iVal> LineAuxiliarySTART
%token <iVal> LineDirectionEND
%token <iVal> LineDirectionSTART
%token <iVal> LineFeatureDefinitionEND
%token <iVal> LineFeatureDefinitionSTART
%token <iVal> LineFeatureItemEND
%token <iVal> LineFeatureItemSTART
%token <iVal> LineFeatureMeasurementEND
%token <iVal> LineFeatureMeasurementSTART
%token <iVal> LineFeatureNominalEND
%token <iVal> LineFeatureNominalSTART
%token <iVal> LineProfileCharacteristicDefinitionEND
%token <iVal> LineProfileCharacteristicDefinitionSTART
%token <iVal> LineProfileCharacteristicItemEND
%token <iVal> LineProfileCharacteristicItemSTART
%token <iVal> LineProfileCharacteristicMeasurementEND
%token <iVal> LineProfileCharacteristicMeasurementSTART
%token <iVal> LineProfileCharacteristicNominalEND
%token <iVal> LineProfileCharacteristicNominalSTART
%token <iVal> LineProfileCharacteristicStatsEND
%token <iVal> LineProfileCharacteristicStatsSTART
%token <iVal> LineStyleEND
%token <iVal> LineStyleSTART
%token <iVal> LinearAbsoluteLinearityEND
%token <iVal> LinearAbsoluteLinearitySTART
%token <iVal> LinearAxisEND
%token <iVal> LinearAxisSTART
%token <iVal> LinearCharacteristicStatsEND
%token <iVal> LinearCharacteristicStatsSTART
%token <iVal> LinearCoordinateCharacteristicDefinitionEND
%token <iVal> LinearCoordinateCharacteristicDefinitionSTART
%token <iVal> LinearCoordinateCharacteristicItemEND
%token <iVal> LinearCoordinateCharacteristicItemSTART
%token <iVal> LinearCoordinateCharacteristicMeasurementEND
%token <iVal> LinearCoordinateCharacteristicMeasurementSTART
%token <iVal> LinearCoordinateCharacteristicNominalEND
%token <iVal> LinearCoordinateCharacteristicNominalSTART
%token <iVal> LinearCoordinateCharacteristicStatsEND
%token <iVal> LinearCoordinateCharacteristicStatsSTART
%token <iVal> LinearCriterionEND
%token <iVal> LinearCriterionSTART
%token <iVal> LinearErrorEND
%token <iVal> LinearErrorSTART
%token <iVal> LinearLimitEND
%token <iVal> LinearLimitSTART
%token <iVal> LinearMeasurementEND
%token <iVal> LinearMeasurementSTART
%token <iVal> LinearResolutionEND
%token <iVal> LinearResolutionSTART
%token <iVal> LinearSizeEND
%token <iVal> LinearSizeSTART
%token <iVal> LinearStatsSummariesEND
%token <iVal> LinearStatsSummariesSTART
%token <iVal> LinearStatsSummaryEND
%token <iVal> LinearStatsSummarySTART
%token <iVal> LinearToleranceEND
%token <iVal> LinearToleranceSTART
%token <iVal> LinearUnitEND
%token <iVal> LinearUnitSTART
%token <iVal> LinearValueEND
%token <iVal> LinearValueSTART
%token <iVal> LinearityEND
%token <iVal> LinearitySTART
%token <iVal> LinearityErrorEND
%token <iVal> LinearityErrorSTART
%token <iVal> LinearityStudyPlanEND
%token <iVal> LinearityStudyPlanSTART
%token <iVal> LinearityStudyResultsEND
%token <iVal> LinearityStudyResultsSTART
%token <iVal> LinksStiffnessEND
%token <iVal> LinksStiffnessSTART
%token <iVal> LocalVariablesEND
%token <iVal> LocalVariablesSTART
%token <iVal> LocatedTipEND
%token <iVal> LocatedTipSTART
%token <iVal> LocatedTipsEND
%token <iVal> LocatedTipsSTART
%token <iVal> LocationEND
%token <iVal> LocationSTART
%token <iVal> LocationCharacteristicStatsEND
%token <iVal> LocationCharacteristicStatsSTART
%token <iVal> LocationDescriptionEND
%token <iVal> LocationDescriptionSTART
%token <iVal> LocationIdEND
%token <iVal> LocationIdSTART
%token <iVal> LocationOnCMMEND
%token <iVal> LocationOnCMMSTART
%token <iVal> LocationOnDrawingEND
%token <iVal> LocationOnDrawingSTART
%token <iVal> LocationSignificanceEND
%token <iVal> LocationSignificanceSTART
%token <iVal> LogicalOperationEND
%token <iVal> LogicalOperationSTART
%token <iVal> LogicalOperationResultEND
%token <iVal> LogicalOperationResultSTART
%token <iVal> LogicalOperationsEND
%token <iVal> LogicalOperationsSTART
%token <iVal> LongitudinalTrackingSpeedEND
%token <iVal> LongitudinalTrackingSpeedSTART
%token <iVal> LoopEND
%token <iVal> LoopSTART
%token <iVal> LoopIdsEND
%token <iVal> LoopIdsSTART
%token <iVal> LoopMeshEND
%token <iVal> LoopMeshSTART
%token <iVal> LoopSetEND
%token <iVal> LoopSetSTART
%token <iVal> LoopsEND
%token <iVal> LoopsSTART
%token <iVal> LotNumberEND
%token <iVal> LotNumberSTART
%token <iVal> LowerConfidenceLimitEND
%token <iVal> LowerConfidenceLimitSTART
%token <iVal> LowerControlLimitEND
%token <iVal> LowerControlLimitSTART
%token <iVal> LowerControlLimitRangeEND
%token <iVal> LowerControlLimitRangeSTART
%token <iVal> LowerPointEND
%token <iVal> LowerPointSTART
%token <iVal> MachineEND
%token <iVal> MachineSTART
%token <iVal> MachineCoordinateSystemEND
%token <iVal> MachineCoordinateSystemSTART
%token <iVal> MachineIdentifierEND
%token <iVal> MachineIdentifierSTART
%token <iVal> MachineManufacturerNameEND
%token <iVal> MachineManufacturerNameSTART
%token <iVal> MagneticEND
%token <iVal> MagneticSTART
%token <iVal> MagnetoInductiveSensorEND
%token <iVal> MagnetoInductiveSensorSTART
%token <iVal> MagnificationEND
%token <iVal> MagnificationSTART
%token <iVal> MainSymbolEND
%token <iVal> MainSymbolSTART
%token <iVal> MajorDiameterEND
%token <iVal> MajorDiameterSTART
%token <iVal> ManualMeasureFeatureMethodEND
%token <iVal> ManualMeasureFeatureMethodSTART
%token <iVal> ManualMeasurementDeviceEND
%token <iVal> ManualMeasurementDeviceSTART
%token <iVal> ManufacturerEND
%token <iVal> ManufacturerSTART
%token <iVal> ManufacturingMethodEnumEND
%token <iVal> ManufacturingMethodEnumSTART
%token <iVal> ManufacturingProcessIdEND
%token <iVal> ManufacturingProcessIdSTART
%token <iVal> ManufacturingProcessTraceabilitiesEND
%token <iVal> ManufacturingProcessTraceabilitiesSTART
%token <iVal> ManufacturingProcessTraceabilitiesCountEND
%token <iVal> ManufacturingProcessTraceabilitiesCountSTART
%token <iVal> ManufacturingProcessTraceabilityEND
%token <iVal> ManufacturingProcessTraceabilitySTART
%token <iVal> MarkingFeatureDefinitionEND
%token <iVal> MarkingFeatureDefinitionSTART
%token <iVal> MarkingFeatureItemEND
%token <iVal> MarkingFeatureItemSTART
%token <iVal> MarkingFeatureMeasurementEND
%token <iVal> MarkingFeatureMeasurementSTART
%token <iVal> MarkingFeatureNominalEND
%token <iVal> MarkingFeatureNominalSTART
%token <iVal> MarkingMethodEND
%token <iVal> MarkingMethodSTART
%token <iVal> MarkingMethodEnumEND
%token <iVal> MarkingMethodEnumSTART
%token <iVal> MassEND
%token <iVal> MassSTART
%token <iVal> MassAbsoluteLinearityEND
%token <iVal> MassAbsoluteLinearitySTART
%token <iVal> MassCriterionEND
%token <iVal> MassCriterionSTART
%token <iVal> MassDensityEND
%token <iVal> MassDensitySTART
%token <iVal> MassLimitEND
%token <iVal> MassLimitSTART
%token <iVal> MassMeasurementEND
%token <iVal> MassMeasurementSTART
%token <iVal> MassPropertyToleranceEND
%token <iVal> MassPropertyToleranceSTART
%token <iVal> MassStatsSummariesEND
%token <iVal> MassStatsSummariesSTART
%token <iVal> MassStatsSummaryEND
%token <iVal> MassStatsSummarySTART
%token <iVal> MassUnitEND
%token <iVal> MassUnitSTART
%token <iVal> MaterialEND
%token <iVal> MaterialSTART
%token <iVal> MaterialClassEnumEND
%token <iVal> MaterialClassEnumSTART
%token <iVal> MaterialConditionEND
%token <iVal> MaterialConditionSTART
%token <iVal> MaterialLibraryEND
%token <iVal> MaterialLibrarySTART
%token <iVal> MaterialModifierEND
%token <iVal> MaterialModifierSTART
%token <iVal> MaxEND
%token <iVal> MaxSTART
%token <iVal> MaxAmbientAirPressureEND
%token <iVal> MaxAmbientAirPressureSTART
%token <iVal> MaxAmbientRelativeHumidityEND
%token <iVal> MaxAmbientRelativeHumiditySTART
%token <iVal> MaxAmbientTemperatureEND
%token <iVal> MaxAmbientTemperatureSTART
%token <iVal> MaxAzimuthalAxisAngleEND
%token <iVal> MaxAzimuthalAxisAngleSTART
%token <iVal> MaxCircularityEND
%token <iVal> MaxCircularitySTART
%token <iVal> MaxCircularityStatsEND
%token <iVal> MaxCircularityStatsSTART
%token <iVal> MaxCurrentConsumptionEND
%token <iVal> MaxCurrentConsumptionSTART
%token <iVal> MaxCylindricityEND
%token <iVal> MaxCylindricitySTART
%token <iVal> MaxCylindricityStatsEND
%token <iVal> MaxCylindricityStatsSTART
%token <iVal> MaxDeviationFromAverageFarEND
%token <iVal> MaxDeviationFromAverageFarSTART
%token <iVal> MaxDeviationFromAverageMiddleEND
%token <iVal> MaxDeviationFromAverageMiddleSTART
%token <iVal> MaxDeviationFromAverageNearEND
%token <iVal> MaxDeviationFromAverageNearSTART
%token <iVal> MaxDeviationStatsEND
%token <iVal> MaxDeviationStatsSTART
%token <iVal> MaxDualValueEND
%token <iVal> MaxDualValueSTART
%token <iVal> MaxEnvironmentalAltitudeEND
%token <iVal> MaxEnvironmentalAltitudeSTART
%token <iVal> MaxErrorConstantEND
%token <iVal> MaxErrorConstantSTART
%token <iVal> MaxFeatureRulesEND
%token <iVal> MaxFeatureRulesSTART
%token <iVal> MaxFirstAxisEND
%token <iVal> MaxFirstAxisSTART
%token <iVal> MaxFlatnessEND
%token <iVal> MaxFlatnessSTART
%token <iVal> MaxFlatnessStatsEND
%token <iVal> MaxFlatnessStatsSTART
%token <iVal> MaxFocusDistanceEND
%token <iVal> MaxFocusDistanceSTART
%token <iVal> MaxFramePerSecondEND
%token <iVal> MaxFramePerSecondSTART
%token <iVal> MaxFrameRateEND
%token <iVal> MaxFrameRateSTART
%token <iVal> MaxHoldingForceEND
%token <iVal> MaxHoldingForceSTART
%token <iVal> MaxKVEND
%token <iVal> MaxKVSTART
%token <iVal> MaxLinearAxisEND
%token <iVal> MaxLinearAxisSTART
%token <iVal> MaxLoadEND
%token <iVal> MaxLoadSTART
%token <iVal> MaxMeasurementFrequencyEND
%token <iVal> MaxMeasurementFrequencySTART
%token <iVal> MaxMeasurementRangeEND
%token <iVal> MaxMeasurementRangeSTART
%token <iVal> MaxMeasuringDistanceEND
%token <iVal> MaxMeasuringDistanceSTART
%token <iVal> MaxOperatingCurrentEND
%token <iVal> MaxOperatingCurrentSTART
%token <iVal> MaxOperatingVoltageEND
%token <iVal> MaxOperatingVoltageSTART
%token <iVal> MaxOutputVoltageEND
%token <iVal> MaxOutputVoltageSTART
%token <iVal> MaxPermissibleProbingErrorEND
%token <iVal> MaxPermissibleProbingErrorSTART
%token <iVal> MaxPixelClockSpeedEND
%token <iVal> MaxPixelClockSpeedSTART
%token <iVal> MaxPointEND
%token <iVal> MaxPointSTART
%token <iVal> MaxPointsRateEND
%token <iVal> MaxPointsRateSTART
%token <iVal> MaxPolarAxisEND
%token <iVal> MaxPolarAxisSTART
%token <iVal> MaxPolarAxisAngleEND
%token <iVal> MaxPolarAxisAngleSTART
%token <iVal> MaxPowerEND
%token <iVal> MaxPowerSTART
%token <iVal> MaxPowerSupplyVoltageEND
%token <iVal> MaxPowerSupplyVoltageSTART
%token <iVal> MaxPressureEND
%token <iVal> MaxPressureSTART
%token <iVal> MaxPressureFrontEND
%token <iVal> MaxPressureFrontSTART
%token <iVal> MaxPressureSideEND
%token <iVal> MaxPressureSideSTART
%token <iVal> MaxRadialAxisEND
%token <iVal> MaxRadialAxisSTART
%token <iVal> MaxRadiusEND
%token <iVal> MaxRadiusSTART
%token <iVal> MaxReadNoiseEND
%token <iVal> MaxReadNoiseSTART
%token <iVal> MaxReadoutFrequencyEND
%token <iVal> MaxReadoutFrequencySTART
%token <iVal> MaxResponseTimeEND
%token <iVal> MaxResponseTimeSTART
%token <iVal> MaxRotaryAxisEND
%token <iVal> MaxRotaryAxisSTART
%token <iVal> MaxSecondAxisEND
%token <iVal> MaxSecondAxisSTART
%token <iVal> MaxStraightnessEND
%token <iVal> MaxStraightnessSTART
%token <iVal> MaxStraightnessStatsEND
%token <iVal> MaxStraightnessStatsSTART
%token <iVal> MaxThirdAxisEND
%token <iVal> MaxThirdAxisSTART
%token <iVal> MaxTiltEND
%token <iVal> MaxTiltSTART
%token <iVal> MaxTiltCompensationEND
%token <iVal> MaxTiltCompensationSTART
%token <iVal> MaxValueEND
%token <iVal> MaxValueSTART
%token <iVal> MaxValueStatsEND
%token <iVal> MaxValueStatsSTART
%token <iVal> MaxVibrationEND
%token <iVal> MaxVibrationSTART
%token <iVal> MaxWireAccelerationEND
%token <iVal> MaxWireAccelerationSTART
%token <iVal> MaxWireExtensionForceEND
%token <iVal> MaxWireExtensionForceSTART
%token <iVal> MaxWorkpieceHeightEND
%token <iVal> MaxWorkpieceHeightSTART
%token <iVal> MaxWorkpieceMassEND
%token <iVal> MaxWorkpieceMassSTART
%token <iVal> MaxWorkpieceWeightEND
%token <iVal> MaxWorkpieceWeightSTART
%token <iVal> MaxXProbingSpeedEND
%token <iVal> MaxXProbingSpeedSTART
%token <iVal> MaxXRotationEND
%token <iVal> MaxXRotationSTART
%token <iVal> MaxXTraverseSpeedEND
%token <iVal> MaxXTraverseSpeedSTART
%token <iVal> MaxYProbingSpeedEND
%token <iVal> MaxYProbingSpeedSTART
%token <iVal> MaxYRotationEND
%token <iVal> MaxYRotationSTART
%token <iVal> MaxYTraverseSpeedEND
%token <iVal> MaxYTraverseSpeedSTART
%token <iVal> MaxZAxisEND
%token <iVal> MaxZAxisSTART
%token <iVal> MaxZProbingSpeedEND
%token <iVal> MaxZProbingSpeedSTART
%token <iVal> MaxZRotationEND
%token <iVal> MaxZRotationSTART
%token <iVal> MaxZTraverseSpeedEND
%token <iVal> MaxZTraverseSpeedSTART
%token <iVal> MaximumEND
%token <iVal> MaximumSTART
%token <iVal> MaximumAbsoluteAppraiserVariationEND
%token <iVal> MaximumAbsoluteAppraiserVariationSTART
%token <iVal> MaximumAbsoluteEquipmentVariationEND
%token <iVal> MaximumAbsoluteEquipmentVariationSTART
%token <iVal> MaximumAbsoluteTotalRandREND
%token <iVal> MaximumAbsoluteTotalRandRSTART
%token <iVal> MaximumAngularVelocityEND
%token <iVal> MaximumAngularVelocitySTART
%token <iVal> MaximumRelativeAppraiserVariationEND
%token <iVal> MaximumRelativeAppraiserVariationSTART
%token <iVal> MaximumRelativeEquipmentVariationEND
%token <iVal> MaximumRelativeEquipmentVariationSTART
%token <iVal> MaximumRelativeTotalRandREND
%token <iVal> MaximumRelativeTotalRandRSTART
%token <iVal> MaximumToleranceValueEND
%token <iVal> MaximumToleranceValueSTART
%token <iVal> MaximumWorkingAmplitudeEND
%token <iVal> MaximumWorkingAmplitudeSTART
%token <iVal> MayEND
%token <iVal> MaySTART
%token <iVal> MeasurandIdsEND
%token <iVal> MeasurandIdsSTART
%token <iVal> MeasurandsEND
%token <iVal> MeasurandsSTART
%token <iVal> MeasureActionGroupFunctionEND
%token <iVal> MeasureActionGroupFunctionSTART
%token <iVal> MeasureActionGroupFunctionEnumEND
%token <iVal> MeasureActionGroupFunctionEnumSTART
%token <iVal> MeasureEvaluateAllEND
%token <iVal> MeasureEvaluateAllSTART
%token <iVal> MeasureEvaluateSpecifiedEND
%token <iVal> MeasureEvaluateSpecifiedSTART
%token <iVal> MeasurePointEND
%token <iVal> MeasurePointSTART
%token <iVal> MeasurePointIdEND
%token <iVal> MeasurePointIdSTART
%token <iVal> MeasurePointNominalIdsEND
%token <iVal> MeasurePointNominalIdsSTART
%token <iVal> MeasureSpecifiedFeaturesEND
%token <iVal> MeasureSpecifiedFeaturesSTART
%token <iVal> MeasureSpecifiedMeasurandsEND
%token <iVal> MeasureSpecifiedMeasurandsSTART
%token <iVal> MeasuredEND
%token <iVal> MeasuredSTART
%token <iVal> MeasuredCharacteristicsEND
%token <iVal> MeasuredCharacteristicsSTART
%token <iVal> MeasuredDatumFeatureEND
%token <iVal> MeasuredDatumFeatureSTART
%token <iVal> MeasuredFeaturesEND
%token <iVal> MeasuredFeaturesSTART
%token <iVal> MeasuredIdsEND
%token <iVal> MeasuredIdsSTART
%token <iVal> MeasuredPointIdsEND
%token <iVal> MeasuredPointIdsSTART
%token <iVal> MeasuredPointSetEND
%token <iVal> MeasuredPointSetSTART
%token <iVal> MeasuredPointSetsEND
%token <iVal> MeasuredPointSetsSTART
%token <iVal> MeasuredValuesEND
%token <iVal> MeasuredValuesSTART
%token <iVal> MeasurementDeviceEND
%token <iVal> MeasurementDeviceSTART
%token <iVal> MeasurementDeviceIdEND
%token <iVal> MeasurementDeviceIdSTART
%token <iVal> MeasurementDeviceIdsEND
%token <iVal> MeasurementDeviceIdsSTART
%token <iVal> MeasurementDevicesEND
%token <iVal> MeasurementDevicesSTART
%token <iVal> MeasurementDirectiveEND
%token <iVal> MeasurementDirectiveSTART
%token <iVal> MeasurementDirectiveEnumEND
%token <iVal> MeasurementDirectiveEnumSTART
%token <iVal> MeasurementFieldSizeEND
%token <iVal> MeasurementFieldSizeSTART
%token <iVal> MeasurementLaserEND
%token <iVal> MeasurementLaserSTART
%token <iVal> MeasurementObjectMaterialEND
%token <iVal> MeasurementObjectMaterialSTART
%token <iVal> MeasurementOffsetEND
%token <iVal> MeasurementOffsetSTART
%token <iVal> MeasurementRateEND
%token <iVal> MeasurementRateSTART
%token <iVal> MeasurementResourcesEND
%token <iVal> MeasurementResourcesSTART
%token <iVal> MeasurementResourcesCountEND
%token <iVal> MeasurementResourcesCountSTART
%token <iVal> MeasurementResultsEND
%token <iVal> MeasurementResultsSTART
%token <iVal> MeasurementResultsSetEND
%token <iVal> MeasurementResultsSetSTART
%token <iVal> MeasurementRoomEND
%token <iVal> MeasurementRoomSTART
%token <iVal> MeasurementRoomsEND
%token <iVal> MeasurementRoomsSTART
%token <iVal> MeasurementsPlanPresentEND
%token <iVal> MeasurementsPlanPresentSTART
%token <iVal> MeasurementsResultsCountEND
%token <iVal> MeasurementsResultsCountSTART
%token <iVal> MeasuringAccuracyEND
%token <iVal> MeasuringAccuracySTART
%token <iVal> MeasuringForceEND
%token <iVal> MeasuringForceSTART
%token <iVal> MedianFeatureEND
%token <iVal> MedianFeatureSTART
%token <iVal> MeshEND
%token <iVal> MeshSTART
%token <iVal> MeshTriangleEND
%token <iVal> MeshTriangleSTART
%token <iVal> MeshTriangleCoreEND
%token <iVal> MeshTriangleCoreSTART
%token <iVal> MethodEND
%token <iVal> MethodSTART
%token <iVal> MicrometerEND
%token <iVal> MicrometerSTART
%token <iVal> MicrometerAnalogEND
%token <iVal> MicrometerAnalogSTART
%token <iVal> MicrometerDigitalEND
%token <iVal> MicrometerDigitalSTART
%token <iVal> MicroscopeEND
%token <iVal> MicroscopeSTART
%token <iVal> MicroscopeMeasureFeatureMethodEND
%token <iVal> MicroscopeMeasureFeatureMethodSTART
%token <iVal> MidPointEND
%token <iVal> MidPointSTART
%token <iVal> MidlineEND
%token <iVal> MidlineSTART
%token <iVal> MidplaneEND
%token <iVal> MidplaneSTART
%token <iVal> MinEND
%token <iVal> MinSTART
%token <iVal> MinAmbientAirPressureEND
%token <iVal> MinAmbientAirPressureSTART
%token <iVal> MinAmbientRelativeHumidityEND
%token <iVal> MinAmbientRelativeHumiditySTART
%token <iVal> MinAmbientTemperatureEND
%token <iVal> MinAmbientTemperatureSTART
%token <iVal> MinAzimuthalAxisAngleEND
%token <iVal> MinAzimuthalAxisAngleSTART
%token <iVal> MinDeviationStatsEND
%token <iVal> MinDeviationStatsSTART
%token <iVal> MinDualValueEND
%token <iVal> MinDualValueSTART
%token <iVal> MinEnvironmentalAltitudeEND
%token <iVal> MinEnvironmentalAltitudeSTART
%token <iVal> MinFirstAxisEND
%token <iVal> MinFirstAxisSTART
%token <iVal> MinFocusDistanceEND
%token <iVal> MinFocusDistanceSTART
%token <iVal> MinLinearAxisEND
%token <iVal> MinLinearAxisSTART
%token <iVal> MinMeasurementRangeEND
%token <iVal> MinMeasurementRangeSTART
%token <iVal> MinMeasuringDistanceEND
%token <iVal> MinMeasuringDistanceSTART
%token <iVal> MinOperatingCurrentEND
%token <iVal> MinOperatingCurrentSTART
%token <iVal> MinOperatingVoltageEND
%token <iVal> MinOperatingVoltageSTART
%token <iVal> MinPointEND
%token <iVal> MinPointSTART
%token <iVal> MinPointDensityEND
%token <iVal> MinPointDensitySTART
%token <iVal> MinPointsEND
%token <iVal> MinPointsSTART
%token <iVal> MinPolarAxisEND
%token <iVal> MinPolarAxisSTART
%token <iVal> MinPolarAxisAngleEND
%token <iVal> MinPolarAxisAngleSTART
%token <iVal> MinPowerSupplyVoltageEND
%token <iVal> MinPowerSupplyVoltageSTART
%token <iVal> MinRadialAxisEND
%token <iVal> MinRadialAxisSTART
%token <iVal> MinRadiusEND
%token <iVal> MinRadiusSTART
%token <iVal> MinRotaryAxisEND
%token <iVal> MinRotaryAxisSTART
%token <iVal> MinSecondAxisEND
%token <iVal> MinSecondAxisSTART
%token <iVal> MinThirdAxisEND
%token <iVal> MinThirdAxisSTART
%token <iVal> MinValueEND
%token <iVal> MinValueSTART
%token <iVal> MinValueStatsEND
%token <iVal> MinValueStatsSTART
%token <iVal> MinWireRetractionForceEND
%token <iVal> MinWireRetractionForceSTART
%token <iVal> MinZAxisEND
%token <iVal> MinZAxisSTART
%token <iVal> MinimumEND
%token <iVal> MinimumSTART
%token <iVal> MinimumBoundingBoxEND
%token <iVal> MinimumBoundingBoxSTART
%token <iVal> MinimumMaterialRemovalEND
%token <iVal> MinimumMaterialRemovalSTART
%token <iVal> MinimumTargetDiameterEND
%token <iVal> MinimumTargetDiameterSTART
%token <iVal> MinimumToleranceEND
%token <iVal> MinimumToleranceSTART
%token <iVal> MinorDiameterEND
%token <iVal> MinorDiameterSTART
%token <iVal> MinusEND
%token <iVal> MinusSTART
%token <iVal> ModeEND
%token <iVal> ModeSTART
%token <iVal> ModelIdEND
%token <iVal> ModelIdSTART
%token <iVal> ModelNumberEND
%token <iVal> ModelNumberSTART
%token <iVal> ModelToleranceEND
%token <iVal> ModelToleranceSTART
%token <iVal> ModifiedThreadEND
%token <iVal> ModifiedThreadSTART
%token <iVal> ModifierEND
%token <iVal> ModifierSTART
%token <iVal> MotorTypeEND
%token <iVal> MotorTypeSTART
%token <iVal> MountingEND
%token <iVal> MountingSTART
%token <iVal> MovableDatumTargetEND
%token <iVal> MovableDatumTargetSTART
%token <iVal> MoveGroupEND
%token <iVal> MoveGroupSTART
%token <iVal> MoveGroupsEND
%token <iVal> MoveGroupsSTART
%token <iVal> MovePointEND
%token <iVal> MovePointSTART
%token <iVal> MovePointAxisEND
%token <iVal> MovePointAxisSTART
%token <iVal> MovePointVectorEND
%token <iVal> MovePointVectorSTART
%token <iVal> MultiLeadSpecificationEND
%token <iVal> MultiLeadSpecificationSTART
%token <iVal> MultiPeakMeasurementEND
%token <iVal> MultiPeakMeasurementSTART
%token <iVal> MultipleCarriageCartesianCMMEND
%token <iVal> MultipleCarriageCartesianCMMSTART
%token <iVal> MustEND
%token <iVal> MustSTART
%token <iVal> MustNotEND
%token <iVal> MustNotSTART
%token <iVal> NameEND
%token <iVal> NameSTART
%token <iVal> NearEND
%token <iVal> NearSTART
%token <iVal> NegateEND
%token <iVal> NegateSTART
%token <iVal> NeighboursEND
%token <iVal> NeighboursSTART
%token <iVal> NeighboursBinaryEND
%token <iVal> NeighboursBinarySTART
%token <iVal> NestingIndexEND
%token <iVal> NestingIndexSTART
%token <iVal> NominalBallCenterToBallCenterLengthEND
%token <iVal> NominalBallCenterToBallCenterLengthSTART
%token <iVal> NominalDatumFeatureEND
%token <iVal> NominalDatumFeatureSTART
%token <iVal> NominalDirectionEND
%token <iVal> NominalDirectionSTART
%token <iVal> NominalOffsetEND
%token <iVal> NominalOffsetSTART
%token <iVal> NominalPointSetEND
%token <iVal> NominalPointSetSTART
%token <iVal> NominalPointSetsEND
%token <iVal> NominalPointSetsSTART
%token <iVal> NominalRotationEND
%token <iVal> NominalRotationSTART
%token <iVal> NominalSinglePointAccuracyEND
%token <iVal> NominalSinglePointAccuracySTART
%token <iVal> NominalTransformEND
%token <iVal> NominalTransformSTART
%token <iVal> NominalVolumetricAccuracyEND
%token <iVal> NominalVolumetricAccuracySTART
%token <iVal> NominalsCalculatedEND
%token <iVal> NominalsCalculatedSTART
%token <iVal> NonConformanceDesignatorEND
%token <iVal> NonConformanceDesignatorSTART
%token <iVal> NonDestructiveTestingEND
%token <iVal> NonDestructiveTestingSTART
%token <iVal> NonDiametricalZoneEND
%token <iVal> NonDiametricalZoneSTART
%token <iVal> NonToleranceEND
%token <iVal> NonToleranceSTART
%token <iVal> NormalEND
%token <iVal> NormalSTART
%token <iVal> NormalSpecialEND
%token <iVal> NormalSpecialSTART
%token <iVal> NormalityEND
%token <iVal> NormalitySTART
%token <iVal> NormalsEND
%token <iVal> NormalsSTART
%token <iVal> NormalsBinaryEND
%token <iVal> NormalsBinarySTART
%token <iVal> NormalsSpecialEND
%token <iVal> NormalsSpecialSTART
%token <iVal> NormalsSpecialBinaryEND
%token <iVal> NormalsSpecialBinarySTART
%token <iVal> NotEND
%token <iVal> NotSTART
%token <iVal> NotConvexEND
%token <iVal> NotConvexSTART
%token <iVal> NotableEventEND
%token <iVal> NotableEventSTART
%token <iVal> NotableEventIdEND
%token <iVal> NotableEventIdSTART
%token <iVal> NotableEventIdsEND
%token <iVal> NotableEventIdsSTART
%token <iVal> NotableEventsEND
%token <iVal> NotableEventsSTART
%token <iVal> NoteEND
%token <iVal> NoteSTART
%token <iVal> NoteFlagEND
%token <iVal> NoteFlagSTART
%token <iVal> NoteFlagSetEND
%token <iVal> NoteFlagSetSTART
%token <iVal> NoteIdsEND
%token <iVal> NoteIdsSTART
%token <iVal> NoteSetEND
%token <iVal> NoteSetSTART
%token <iVal> NotedEventEND
%token <iVal> NotedEventSTART
%token <iVal> NotedEventIdsEND
%token <iVal> NotedEventIdsSTART
%token <iVal> NotedEventsEND
%token <iVal> NotedEventsSTART
%token <iVal> NumOutOfControlEND
%token <iVal> NumOutOfControlSTART
%token <iVal> NumOutOfControlRngEND
%token <iVal> NumOutOfControlRngSTART
%token <iVal> NumOutOfToleranceEND
%token <iVal> NumOutOfToleranceSTART
%token <iVal> NumberAllowedExceptionsEND
%token <iVal> NumberAllowedExceptionsSTART
%token <iVal> NumberFailuresEND
%token <iVal> NumberFailuresSTART
%token <iVal> NumberOfAppraisersEND
%token <iVal> NumberOfAppraisersSTART
%token <iVal> NumberOfCameraPixelsEND
%token <iVal> NumberOfCameraPixelsSTART
%token <iVal> NumberOfFacetsEND
%token <iVal> NumberOfFacetsSTART
%token <iVal> NumberOfFeaturesEND
%token <iVal> NumberOfFeaturesSTART
%token <iVal> NumberOfFeaturesPerRowEND
%token <iVal> NumberOfFeaturesPerRowSTART
%token <iVal> NumberOfJointsEND
%token <iVal> NumberOfJointsSTART
%token <iVal> NumberOfMeasurementPointsEND
%token <iVal> NumberOfMeasurementPointsSTART
%token <iVal> NumberOfPartsEND
%token <iVal> NumberOfPartsSTART
%token <iVal> NumberOfPixelsEND
%token <iVal> NumberOfPixelsSTART
%token <iVal> NumberOfPointsEND
%token <iVal> NumberOfPointsSTART
%token <iVal> NumberOfRowsEND
%token <iVal> NumberOfRowsSTART
%token <iVal> NumberOfSamplesEND
%token <iVal> NumberOfSamplesSTART
%token <iVal> NumberOfStepsEND
%token <iVal> NumberOfStepsSTART
%token <iVal> NumberOfTrialsEND
%token <iVal> NumberOfTrialsSTART
%token <iVal> NumberOutOfControlEND
%token <iVal> NumberOutOfControlSTART
%token <iVal> NumberOutOfToleranceEND
%token <iVal> NumberOutOfToleranceSTART
%token <iVal> NumberOverUpperToleranceEND
%token <iVal> NumberOverUpperToleranceSTART
%token <iVal> NumberSubgroupsEND
%token <iVal> NumberSubgroupsSTART
%token <iVal> NumberUnderLowerToleranceEND
%token <iVal> NumberUnderLowerToleranceSTART
%token <iVal> NumberedPlanElementEND
%token <iVal> NumberedPlanElementSTART
%token <iVal> NumeratorEND
%token <iVal> NumeratorSTART
%token <iVal> NumericCharacteristicStatsValueEND
%token <iVal> NumericCharacteristicStatsValueSTART
%token <iVal> Nurbs12END
%token <iVal> Nurbs12START
%token <iVal> Nurbs12CoreEND
%token <iVal> Nurbs12CoreSTART
%token <iVal> Nurbs13END
%token <iVal> Nurbs13START
%token <iVal> Nurbs13CoreEND
%token <iVal> Nurbs13CoreSTART
%token <iVal> Nurbs23END
%token <iVal> Nurbs23START
%token <iVal> Nurbs23CoreEND
%token <iVal> Nurbs23CoreSTART
%token <iVal> ObjectIdEND
%token <iVal> ObjectIdSTART
%token <iVal> ObjectTemperatureEND
%token <iVal> ObjectTemperatureSTART
%token <iVal> ObjectiveFocalLengthEND
%token <iVal> ObjectiveFocalLengthSTART
%token <iVal> ObjectiveMagnificationEND
%token <iVal> ObjectiveMagnificationSTART
%token <iVal> ObtentionEND
%token <iVal> ObtentionSTART
%token <iVal> OffsetEND
%token <iVal> OffsetSTART
%token <iVal> Offset23END
%token <iVal> Offset23START
%token <iVal> Offset23CoreEND
%token <iVal> Offset23CoreSTART
%token <iVal> OffsetDistanceEND
%token <iVal> OffsetDistanceSTART
%token <iVal> OffsetVolumetricPerformanceEND
%token <iVal> OffsetVolumetricPerformanceSTART
%token <iVal> OffsetZoneEND
%token <iVal> OffsetZoneSTART
%token <iVal> OneOfActionGroupEND
%token <iVal> OneOfActionGroupSTART
%token <iVal> OneOfPlanRootEND
%token <iVal> OneOfPlanRootSTART
%token <iVal> OneSideEND
%token <iVal> OneSideSTART
%token <iVal> OneThirdGroupingEND
%token <iVal> OneThirdGroupingSTART
%token <iVal> OperatorIdentifierEND
%token <iVal> OperatorIdentifierSTART
%token <iVal> OppositeAngledLinesFeatureDefinitionEND
%token <iVal> OppositeAngledLinesFeatureDefinitionSTART
%token <iVal> OppositeAngledLinesFeatureItemEND
%token <iVal> OppositeAngledLinesFeatureItemSTART
%token <iVal> OppositeAngledLinesFeatureMeasurementEND
%token <iVal> OppositeAngledLinesFeatureMeasurementSTART
%token <iVal> OppositeAngledLinesFeatureNominalEND
%token <iVal> OppositeAngledLinesFeatureNominalSTART
%token <iVal> OppositeAngledPlanesFeatureDefinitionEND
%token <iVal> OppositeAngledPlanesFeatureDefinitionSTART
%token <iVal> OppositeAngledPlanesFeatureItemEND
%token <iVal> OppositeAngledPlanesFeatureItemSTART
%token <iVal> OppositeAngledPlanesFeatureMeasurementEND
%token <iVal> OppositeAngledPlanesFeatureMeasurementSTART
%token <iVal> OppositeAngledPlanesFeatureNominalEND
%token <iVal> OppositeAngledPlanesFeatureNominalSTART
%token <iVal> OppositeParallelLinesFeatureDefinitionEND
%token <iVal> OppositeParallelLinesFeatureDefinitionSTART
%token <iVal> OppositeParallelLinesFeatureItemEND
%token <iVal> OppositeParallelLinesFeatureItemSTART
%token <iVal> OppositeParallelLinesFeatureMeasurementEND
%token <iVal> OppositeParallelLinesFeatureMeasurementSTART
%token <iVal> OppositeParallelLinesFeatureNominalEND
%token <iVal> OppositeParallelLinesFeatureNominalSTART
%token <iVal> OppositeParallelPlanesFeatureDefinitionEND
%token <iVal> OppositeParallelPlanesFeatureDefinitionSTART
%token <iVal> OppositeParallelPlanesFeatureItemEND
%token <iVal> OppositeParallelPlanesFeatureItemSTART
%token <iVal> OppositeParallelPlanesFeatureMeasurementEND
%token <iVal> OppositeParallelPlanesFeatureMeasurementSTART
%token <iVal> OppositeParallelPlanesFeatureNominalEND
%token <iVal> OppositeParallelPlanesFeatureNominalSTART
%token <iVal> OpticalComparatorEND
%token <iVal> OpticalComparatorSTART
%token <iVal> OpticalFiberCableLengthEND
%token <iVal> OpticalFiberCableLengthSTART
%token <iVal> OrEND
%token <iVal> OrSTART
%token <iVal> OrderEND
%token <iVal> OrderSTART
%token <iVal> OrderNumberEND
%token <iVal> OrderNumberSTART
%token <iVal> OrderUEND
%token <iVal> OrderUSTART
%token <iVal> OrderVEND
%token <iVal> OrderVSTART
%token <iVal> OrderedActionGroupEND
%token <iVal> OrderedActionGroupSTART
%token <iVal> OrderedPlanRootEND
%token <iVal> OrderedPlanRootSTART
%token <iVal> OrdersEND
%token <iVal> OrdersSTART
%token <iVal> OrdersUEND
%token <iVal> OrdersUSTART
%token <iVal> OrdersVEND
%token <iVal> OrdersVSTART
%token <iVal> OrganizationEND
%token <iVal> OrganizationSTART
%token <iVal> OrientationEND
%token <iVal> OrientationSTART
%token <iVal> OrientationCharacteristicStatsEND
%token <iVal> OrientationCharacteristicStatsSTART
%token <iVal> OrientationOnlyEND
%token <iVal> OrientationOnlySTART
%token <iVal> OrientationPlaneEND
%token <iVal> OrientationPlaneSTART
%token <iVal> OrientationPlaneEnumEND
%token <iVal> OrientationPlaneEnumSTART
%token <iVal> OriginEND
%token <iVal> OriginSTART
%token <iVal> OriginDirectionEND
%token <iVal> OriginDirectionSTART
%token <iVal> OriginEntityEND
%token <iVal> OriginEntitySTART
%token <iVal> OriginReferenceEND
%token <iVal> OriginReferenceSTART
%token <iVal> OscillationEND
%token <iVal> OscillationSTART
%token <iVal> OtherAccuracySourceEND
%token <iVal> OtherAccuracySourceSTART
%token <iVal> OtherAddressDescriptionEND
%token <iVal> OtherAddressDescriptionSTART
%token <iVal> OtherAreaEND
%token <iVal> OtherAreaSTART
%token <iVal> OtherBottomEND
%token <iVal> OtherBottomSTART
%token <iVal> OtherCartesianCMMGeometryEND
%token <iVal> OtherCartesianCMMGeometrySTART
%token <iVal> OtherCharacteristicStatusEND
%token <iVal> OtherCharacteristicStatusSTART
%token <iVal> OtherControlIssueEND
%token <iVal> OtherControlIssueSTART
%token <iVal> OtherCoordinateEND
%token <iVal> OtherCoordinateSTART
%token <iVal> OtherCurveFeatureDefinitionEND
%token <iVal> OtherCurveFeatureDefinitionSTART
%token <iVal> OtherCurveFeatureItemEND
%token <iVal> OtherCurveFeatureItemSTART
%token <iVal> OtherCurveFeatureMeasurementEND
%token <iVal> OtherCurveFeatureMeasurementSTART
%token <iVal> OtherCurveFeatureNominalEND
%token <iVal> OtherCurveFeatureNominalSTART
%token <iVal> OtherDigitalModelFormatEND
%token <iVal> OtherDigitalModelFormatSTART
%token <iVal> OtherDistributionTransformationEND
%token <iVal> OtherDistributionTransformationSTART
%token <iVal> OtherExclusionReasonEND
%token <iVal> OtherExclusionReasonSTART
%token <iVal> OtherExtentEND
%token <iVal> OtherExtentSTART
%token <iVal> OtherFileSpecEND
%token <iVal> OtherFileSpecSTART
%token <iVal> OtherFormCharacteristicDefinitionEND
%token <iVal> OtherFormCharacteristicDefinitionSTART
%token <iVal> OtherFormCharacteristicItemEND
%token <iVal> OtherFormCharacteristicItemSTART
%token <iVal> OtherFormCharacteristicMeasurementEND
%token <iVal> OtherFormCharacteristicMeasurementSTART
%token <iVal> OtherFormCharacteristicNominalEND
%token <iVal> OtherFormCharacteristicNominalSTART
%token <iVal> OtherFormCharacteristicStatsEND
%token <iVal> OtherFormCharacteristicStatsSTART
%token <iVal> OtherInspectionStatusEND
%token <iVal> OtherInspectionStatusSTART
%token <iVal> OtherLevelEND
%token <iVal> OtherLevelSTART
%token <iVal> OtherManufacturingMethodEND
%token <iVal> OtherManufacturingMethodSTART
%token <iVal> OtherMarkingMethodEND
%token <iVal> OtherMarkingMethodSTART
%token <iVal> OtherMaterialClassEND
%token <iVal> OtherMaterialClassSTART
%token <iVal> OtherMeasureActionGroupFunctionEND
%token <iVal> OtherMeasureActionGroupFunctionSTART
%token <iVal> OtherMeasureFeatureMethodEND
%token <iVal> OtherMeasureFeatureMethodSTART
%token <iVal> OtherMeasurementDirectiveEND
%token <iVal> OtherMeasurementDirectiveSTART
%token <iVal> OtherNonShapeFeatureDefinitionEND
%token <iVal> OtherNonShapeFeatureDefinitionSTART
%token <iVal> OtherNonShapeFeatureItemEND
%token <iVal> OtherNonShapeFeatureItemSTART
%token <iVal> OtherNonShapeFeatureMeasurementEND
%token <iVal> OtherNonShapeFeatureMeasurementSTART
%token <iVal> OtherNonShapeFeatureNominalEND
%token <iVal> OtherNonShapeFeatureNominalSTART
%token <iVal> OtherPrecedenceEND
%token <iVal> OtherPrecedenceSTART
%token <iVal> OtherSamplingIntervalEND
%token <iVal> OtherSamplingIntervalSTART
%token <iVal> OtherSecurityClassificationEND
%token <iVal> OtherSecurityClassificationSTART
%token <iVal> OtherShapeClassEND
%token <iVal> OtherShapeClassSTART
%token <iVal> OtherShapeFeatureDefinitionEND
%token <iVal> OtherShapeFeatureDefinitionSTART
%token <iVal> OtherShapeFeatureItemEND
%token <iVal> OtherShapeFeatureItemSTART
%token <iVal> OtherShapeFeatureMeasurementEND
%token <iVal> OtherShapeFeatureMeasurementSTART
%token <iVal> OtherShapeFeatureNominalEND
%token <iVal> OtherShapeFeatureNominalSTART
%token <iVal> OtherSideEND
%token <iVal> OtherSideSTART
%token <iVal> OtherSideContourSymbolEND
%token <iVal> OtherSideContourSymbolSTART
%token <iVal> OtherSideParametersEND
%token <iVal> OtherSideParametersSTART
%token <iVal> OtherSlotEndEND
%token <iVal> OtherSlotEndSTART
%token <iVal> OtherStandardsOrganizationEND
%token <iVal> OtherStandardsOrganizationSTART
%token <iVal> OtherStatsEvalStatusEND
%token <iVal> OtherStatsEvalStatusSTART
%token <iVal> OtherSubstituteFeatureAlgorithmEND
%token <iVal> OtherSubstituteFeatureAlgorithmSTART
%token <iVal> OtherSurfaceFeatureDefinitionEND
%token <iVal> OtherSurfaceFeatureDefinitionSTART
%token <iVal> OtherSurfaceFeatureItemEND
%token <iVal> OtherSurfaceFeatureItemSTART
%token <iVal> OtherSurfaceFeatureMeasurementEND
%token <iVal> OtherSurfaceFeatureMeasurementSTART
%token <iVal> OtherSurfaceFeatureNominalEND
%token <iVal> OtherSurfaceFeatureNominalSTART
%token <iVal> OtherSurfaceParameterEND
%token <iVal> OtherSurfaceParameterSTART
%token <iVal> OtherTemperatureCompensationEND
%token <iVal> OtherTemperatureCompensationSTART
%token <iVal> OtherThreadClassEND
%token <iVal> OtherThreadClassSTART
%token <iVal> OtherThreadSeriesEND
%token <iVal> OtherThreadSeriesSTART
%token <iVal> OtherTimeDescriptionEND
%token <iVal> OtherTimeDescriptionSTART
%token <iVal> OtherTipEndGeometryEND
%token <iVal> OtherTipEndGeometrySTART
%token <iVal> OtherTypeOfScaleEND
%token <iVal> OtherTypeOfScaleSTART
%token <iVal> OtherUnitsEND
%token <iVal> OtherUnitsSTART
%token <iVal> OuterDispositionEND
%token <iVal> OuterDispositionSTART
%token <iVal> OutputFileFormatEND
%token <iVal> OutputFileFormatSTART
%token <iVal> OutputPowerEND
%token <iVal> OutputPowerSTART
%token <iVal> OverallLengthEND
%token <iVal> OverallLengthSTART
%token <iVal> PMIAngularUnitEND
%token <iVal> PMIAngularUnitSTART
%token <iVal> PMIAreaUnitEND
%token <iVal> PMIAreaUnitSTART
%token <iVal> PMIDisplayEND
%token <iVal> PMIDisplaySTART
%token <iVal> PMIDisplaySetEND
%token <iVal> PMIDisplaySetSTART
%token <iVal> PMILinearUnitEND
%token <iVal> PMILinearUnitSTART
%token <iVal> ParallelEND
%token <iVal> ParallelSTART
%token <iVal> ParallelFeatureEND
%token <iVal> ParallelFeatureSTART
%token <iVal> ParallelLinkCMMEND
%token <iVal> ParallelLinkCMMSTART
%token <iVal> ParallelLinkCMMSpeedsEND
%token <iVal> ParallelLinkCMMSpeedsSTART
%token <iVal> ParallelScaleFactorEND
%token <iVal> ParallelScaleFactorSTART
%token <iVal> ParallelismEND
%token <iVal> ParallelismSTART
%token <iVal> ParallelismCharacteristicDefinitionEND
%token <iVal> ParallelismCharacteristicDefinitionSTART
%token <iVal> ParallelismCharacteristicItemEND
%token <iVal> ParallelismCharacteristicItemSTART
%token <iVal> ParallelismCharacteristicMeasurementEND
%token <iVal> ParallelismCharacteristicMeasurementSTART
%token <iVal> ParallelismCharacteristicNominalEND
%token <iVal> ParallelismCharacteristicNominalSTART
%token <iVal> ParallelismCharacteristicStatsEND
%token <iVal> ParallelismCharacteristicStatsSTART
%token <iVal> ParameterEND
%token <iVal> ParameterSTART
%token <iVal> ParameterConstraintsEND
%token <iVal> ParameterConstraintsSTART
%token <iVal> ParameterNameEND
%token <iVal> ParameterNameSTART
%token <iVal> ParameterTypeEND
%token <iVal> ParameterTypeSTART
%token <iVal> ParameterValueEND
%token <iVal> ParameterValueSTART
%token <iVal> ParametersEND
%token <iVal> ParametersSTART
%token <iVal> ParentFeatureItemIdEND
%token <iVal> ParentFeatureItemIdSTART
%token <iVal> ParentFeatureNominalIdEND
%token <iVal> ParentFeatureNominalIdSTART
%token <iVal> PartEND
%token <iVal> PartSTART
%token <iVal> PartFamilyEND
%token <iVal> PartFamilySTART
%token <iVal> PartNoteEND
%token <iVal> PartNoteSTART
%token <iVal> PartNoteIdsEND
%token <iVal> PartNoteIdsSTART
%token <iVal> PartNoteSetEND
%token <iVal> PartNoteSetSTART
%token <iVal> PartSetEND
%token <iVal> PartSetSTART
%token <iVal> PartVariationEND
%token <iVal> PartVariationSTART
%token <iVal> PartialInspectionEND
%token <iVal> PartialInspectionSTART
%token <iVal> PartiallyOrderedActionGroupEND
%token <iVal> PartiallyOrderedActionGroupSTART
%token <iVal> PartiallyOrderedPlanRootEND
%token <iVal> PartiallyOrderedPlanRootSTART
%token <iVal> PassValuesEND
%token <iVal> PassValuesSTART
%token <iVal> PatchRadiusEND
%token <iVal> PatchRadiusSTART
%token <iVal> PathEND
%token <iVal> PathSTART
%token <iVal> PathTriangulationEND
%token <iVal> PathTriangulationSTART
%token <iVal> PathTriangulationCoreEND
%token <iVal> PathTriangulationCoreSTART
%token <iVal> PathsEND
%token <iVal> PathsSTART
%token <iVal> PatternEND
%token <iVal> PatternSTART
%token <iVal> PatternFeatureCircleDefinitionEND
%token <iVal> PatternFeatureCircleDefinitionSTART
%token <iVal> PatternFeatureCircleItemEND
%token <iVal> PatternFeatureCircleItemSTART
%token <iVal> PatternFeatureCircleNominalEND
%token <iVal> PatternFeatureCircleNominalSTART
%token <iVal> PatternFeatureCircularArcDefinitionEND
%token <iVal> PatternFeatureCircularArcDefinitionSTART
%token <iVal> PatternFeatureCircularArcItemEND
%token <iVal> PatternFeatureCircularArcItemSTART
%token <iVal> PatternFeatureCircularArcNominalEND
%token <iVal> PatternFeatureCircularArcNominalSTART
%token <iVal> PatternFeatureLinearDefinitionEND
%token <iVal> PatternFeatureLinearDefinitionSTART
%token <iVal> PatternFeatureLinearItemEND
%token <iVal> PatternFeatureLinearItemSTART
%token <iVal> PatternFeatureLinearNominalEND
%token <iVal> PatternFeatureLinearNominalSTART
%token <iVal> PatternFeatureParallelogramDefinitionEND
%token <iVal> PatternFeatureParallelogramDefinitionSTART
%token <iVal> PatternFeatureParallelogramItemEND
%token <iVal> PatternFeatureParallelogramItemSTART
%token <iVal> PatternFeatureParallelogramNominalEND
%token <iVal> PatternFeatureParallelogramNominalSTART
%token <iVal> PatternsEND
%token <iVal> PatternsSTART
%token <iVal> PermissibleAmbientLightEND
%token <iVal> PermissibleAmbientLightSTART
%token <iVal> PerpendicularEND
%token <iVal> PerpendicularSTART
%token <iVal> PerpendicularFeatureEND
%token <iVal> PerpendicularFeatureSTART
%token <iVal> PerpendicularScaleFactorEND
%token <iVal> PerpendicularScaleFactorSTART
%token <iVal> PerpendicularityCharacteristicDefinitionEND
%token <iVal> PerpendicularityCharacteristicDefinitionSTART
%token <iVal> PerpendicularityCharacteristicItemEND
%token <iVal> PerpendicularityCharacteristicItemSTART
%token <iVal> PerpendicularityCharacteristicMeasurementEND
%token <iVal> PerpendicularityCharacteristicMeasurementSTART
%token <iVal> PerpendicularityCharacteristicNominalEND
%token <iVal> PerpendicularityCharacteristicNominalSTART
%token <iVal> PerpendicularityCharacteristicStatsEND
%token <iVal> PerpendicularityCharacteristicStatsSTART
%token <iVal> PhysicalModelEND
%token <iVal> PhysicalModelSTART
%token <iVal> PickSomeActionGroupEND
%token <iVal> PickSomeActionGroupSTART
%token <iVal> PickSomePlanRootEND
%token <iVal> PickSomePlanRootSTART
%token <iVal> PierceEND
%token <iVal> PierceSTART
%token <iVal> PitchEND
%token <iVal> PitchSTART
%token <iVal> PitchDiameterEND
%token <iVal> PitchDiameterSTART
%token <iVal> PitchDiameterStatsEND
%token <iVal> PitchDiameterStatsSTART
%token <iVal> PixelSizeEND
%token <iVal> PixelSizeSTART
%token <iVal> PlanEND
%token <iVal> PlanSTART
%token <iVal> PlanIdEND
%token <iVal> PlanIdSTART
%token <iVal> PlanarZoneEND
%token <iVal> PlanarZoneSTART
%token <iVal> PlaneEND
%token <iVal> PlaneSTART
%token <iVal> Plane23END
%token <iVal> Plane23START
%token <iVal> Plane23CoreEND
%token <iVal> Plane23CoreSTART
%token <iVal> PlaneFeatureDefinitionEND
%token <iVal> PlaneFeatureDefinitionSTART
%token <iVal> PlaneFeatureItemEND
%token <iVal> PlaneFeatureItemSTART
%token <iVal> PlaneFeatureMeasurementEND
%token <iVal> PlaneFeatureMeasurementSTART
%token <iVal> PlaneFeatureNominalEND
%token <iVal> PlaneFeatureNominalSTART
%token <iVal> PlaneNormalEND
%token <iVal> PlaneNormalSTART
%token <iVal> PlaneReferenceEND
%token <iVal> PlaneReferenceSTART
%token <iVal> PlantLocationEND
%token <iVal> PlantLocationSTART
%token <iVal> PlantSectorEND
%token <iVal> PlantSectorSTART
%token <iVal> PlusEND
%token <iVal> PlusSTART
%token <iVal> PointEND
%token <iVal> PointSTART
%token <iVal> PointAuxiliaryEND
%token <iVal> PointAuxiliarySTART
%token <iVal> PointCloudEND
%token <iVal> PointCloudSTART
%token <iVal> PointCloudIdsEND
%token <iVal> PointCloudIdsSTART
%token <iVal> PointCloudSetEND
%token <iVal> PointCloudSetSTART
%token <iVal> PointConnectionEND
%token <iVal> PointConnectionSTART
%token <iVal> PointDefinedCurveFeatureDefinitionEND
%token <iVal> PointDefinedCurveFeatureDefinitionSTART
%token <iVal> PointDefinedCurveFeatureItemEND
%token <iVal> PointDefinedCurveFeatureItemSTART
%token <iVal> PointDefinedCurveFeatureMeasurementEND
%token <iVal> PointDefinedCurveFeatureMeasurementSTART
%token <iVal> PointDefinedCurveFeatureNominalEND
%token <iVal> PointDefinedCurveFeatureNominalSTART
%token <iVal> PointDefinedSurfaceFeatureDefinitionEND
%token <iVal> PointDefinedSurfaceFeatureDefinitionSTART
%token <iVal> PointDefinedSurfaceFeatureItemEND
%token <iVal> PointDefinedSurfaceFeatureItemSTART
%token <iVal> PointDefinedSurfaceFeatureMeasurementEND
%token <iVal> PointDefinedSurfaceFeatureMeasurementSTART
%token <iVal> PointDefinedSurfaceFeatureNominalEND
%token <iVal> PointDefinedSurfaceFeatureNominalSTART
%token <iVal> PointDensityEND
%token <iVal> PointDensitySTART
%token <iVal> PointDeviationEND
%token <iVal> PointDeviationSTART
%token <iVal> PointDeviationStatsEND
%token <iVal> PointDeviationStatsSTART
%token <iVal> PointDeviationsEND
%token <iVal> PointDeviationsSTART
%token <iVal> PointDeviationsStatsEND
%token <iVal> PointDeviationsStatsSTART
%token <iVal> PointExtensionEND
%token <iVal> PointExtensionSTART
%token <iVal> PointFeatureEND
%token <iVal> PointFeatureSTART
%token <iVal> PointFeatureDefinitionEND
%token <iVal> PointFeatureDefinitionSTART
%token <iVal> PointFeatureItemEND
%token <iVal> PointFeatureItemSTART
%token <iVal> PointFeatureMeasurementEND
%token <iVal> PointFeatureMeasurementSTART
%token <iVal> PointFeatureNominalEND
%token <iVal> PointFeatureNominalSTART
%token <iVal> PointIdEND
%token <iVal> PointIdSTART
%token <iVal> PointIndexEND
%token <iVal> PointIndexSTART
%token <iVal> PointIndicesEND
%token <iVal> PointIndicesSTART
%token <iVal> PointListEND
%token <iVal> PointListSTART
%token <iVal> PointMaxEND
%token <iVal> PointMaxSTART
%token <iVal> PointMinEND
%token <iVal> PointMinSTART
%token <iVal> PointProfileCharacteristicDefinitionEND
%token <iVal> PointProfileCharacteristicDefinitionSTART
%token <iVal> PointProfileCharacteristicItemEND
%token <iVal> PointProfileCharacteristicItemSTART
%token <iVal> PointProfileCharacteristicMeasurementEND
%token <iVal> PointProfileCharacteristicMeasurementSTART
%token <iVal> PointProfileCharacteristicNominalEND
%token <iVal> PointProfileCharacteristicNominalSTART
%token <iVal> PointProfileCharacteristicStatsEND
%token <iVal> PointProfileCharacteristicStatsSTART
%token <iVal> PointSamplingStrategyEnumEND
%token <iVal> PointSamplingStrategyEnumSTART
%token <iVal> PointSetEND
%token <iVal> PointSetSTART
%token <iVal> PointingLaserEND
%token <iVal> PointingLaserSTART
%token <iVal> PointsEND
%token <iVal> PointsSTART
%token <iVal> PointsBinaryEND
%token <iVal> PointsBinarySTART
%token <iVal> PointsColorEND
%token <iVal> PointsColorSTART
%token <iVal> PointsColorBinaryEND
%token <iVal> PointsColorBinarySTART
%token <iVal> PointsHiddenEND
%token <iVal> PointsHiddenSTART
%token <iVal> PointsHiddenBinaryEND
%token <iVal> PointsHiddenBinarySTART
%token <iVal> PointsVisibleEND
%token <iVal> PointsVisibleSTART
%token <iVal> PointsVisibleBinaryEND
%token <iVal> PointsVisibleBinarySTART
%token <iVal> PoissonsRatioEND
%token <iVal> PoissonsRatioSTART
%token <iVal> PolarAngleResolutionEND
%token <iVal> PolarAngleResolutionSTART
%token <iVal> PolyLineEND
%token <iVal> PolyLineSTART
%token <iVal> PolylineEND
%token <iVal> PolylineSTART
%token <iVal> Polyline12END
%token <iVal> Polyline12START
%token <iVal> Polyline12CoreEND
%token <iVal> Polyline12CoreSTART
%token <iVal> Polyline13END
%token <iVal> Polyline13START
%token <iVal> Polyline13CoreEND
%token <iVal> Polyline13CoreSTART
%token <iVal> PolylinesEND
%token <iVal> PolylinesSTART
%token <iVal> PositionCharacteristicDefinitionEND
%token <iVal> PositionCharacteristicDefinitionSTART
%token <iVal> PositionCharacteristicItemEND
%token <iVal> PositionCharacteristicItemSTART
%token <iVal> PositionCharacteristicMeasurementEND
%token <iVal> PositionCharacteristicMeasurementSTART
%token <iVal> PositionCharacteristicNominalEND
%token <iVal> PositionCharacteristicNominalSTART
%token <iVal> PositionCharacteristicStatsEND
%token <iVal> PositionCharacteristicStatsSTART
%token <iVal> PostalBoxEND
%token <iVal> PostalBoxSTART
%token <iVal> PostalCodeEND
%token <iVal> PostalCodeSTART
%token <iVal> PpEND
%token <iVal> PpSTART
%token <iVal> PpThresholdEND
%token <iVal> PpThresholdSTART
%token <iVal> PpkEND
%token <iVal> PpkSTART
%token <iVal> PpkThresholdEND
%token <iVal> PpkThresholdSTART
%token <iVal> PreInspectionTraceabilityEND
%token <iVal> PreInspectionTraceabilitySTART
%token <iVal> PrecedenceEND
%token <iVal> PrecedenceSTART
%token <iVal> PrecedenceEnumEND
%token <iVal> PrecedenceEnumSTART
%token <iVal> PredecessorEND
%token <iVal> PredecessorSTART
%token <iVal> PredecessorsEND
%token <iVal> PredecessorsSTART
%token <iVal> PreferredActionMethodIdEND
%token <iVal> PreferredActionMethodIdSTART
%token <iVal> PreferredResourceIdsEND
%token <iVal> PreferredResourceIdsSTART
%token <iVal> PressureAbsoluteLinearityEND
%token <iVal> PressureAbsoluteLinearitySTART
%token <iVal> PressureCriterionEND
%token <iVal> PressureCriterionSTART
%token <iVal> PressureLimitEND
%token <iVal> PressureLimitSTART
%token <iVal> PressureMeasurementEND
%token <iVal> PressureMeasurementSTART
%token <iVal> PressureStatsSummariesEND
%token <iVal> PressureStatsSummariesSTART
%token <iVal> PressureStatsSummaryEND
%token <iVal> PressureStatsSummarySTART
%token <iVal> PressureUnitEND
%token <iVal> PressureUnitSTART
%token <iVal> PreviousOperationIdEND
%token <iVal> PreviousOperationIdSTART
%token <iVal> PrimaryAlignmentEND
%token <iVal> PrimaryAlignmentSTART
%token <iVal> PrimaryAxisEND
%token <iVal> PrimaryAxisSTART
%token <iVal> PrimaryEntityEND
%token <iVal> PrimaryEntitySTART
%token <iVal> PrimaryManufacturingMethodEND
%token <iVal> PrimaryManufacturingMethodSTART
%token <iVal> PrimaryShapeClassEND
%token <iVal> PrimaryShapeClassSTART
%token <iVal> PrimaryUnitsEND
%token <iVal> PrimaryUnitsSTART
%token <iVal> PrintedDrawingEND
%token <iVal> PrintedDrawingSTART
%token <iVal> ProbeRadiiEND
%token <iVal> ProbeRadiiSTART
%token <iVal> ProbeRadiusEND
%token <iVal> ProbeRadiusSTART
%token <iVal> ProbeTipEND
%token <iVal> ProbeTipSTART
%token <iVal> ProbeTipDiameterEND
%token <iVal> ProbeTipDiameterSTART
%token <iVal> ProcessEND
%token <iVal> ProcessSTART
%token <iVal> ProcessDifferenceStudyPlanEND
%token <iVal> ProcessDifferenceStudyPlanSTART
%token <iVal> ProcessDifferenceStudyResultsEND
%token <iVal> ProcessDifferenceStudyResultsSTART
%token <iVal> ProcessParametersEND
%token <iVal> ProcessParametersSTART
%token <iVal> ProcessVariationEND
%token <iVal> ProcessVariationSTART
%token <iVal> ProductEND
%token <iVal> ProductSTART
%token <iVal> ProductAsmPathsCountEND
%token <iVal> ProductAsmPathsCountSTART
%token <iVal> ProductAssemblySetCountEND
%token <iVal> ProductAssemblySetCountSTART
%token <iVal> ProductAuxiliarySetCountEND
%token <iVal> ProductAuxiliarySetCountSTART
%token <iVal> ProductComponentSetCountEND
%token <iVal> ProductComponentSetCountSTART
%token <iVal> ProductCoordinateSystemSetCountEND
%token <iVal> ProductCoordinateSystemSetCountSTART
%token <iVal> ProductDataQualityEND
%token <iVal> ProductDataQualitySTART
%token <iVal> ProductDataQualityCheckEND
%token <iVal> ProductDataQualityCheckSTART
%token <iVal> ProductDataQualityChecksEND
%token <iVal> ProductDataQualityChecksSTART
%token <iVal> ProductEnvironmentsEND
%token <iVal> ProductEnvironmentsSTART
%token <iVal> ProductGeometrySetCountEND
%token <iVal> ProductGeometrySetCountSTART
%token <iVal> ProductLayerSetCountEND
%token <iVal> ProductLayerSetCountSTART
%token <iVal> ProductNoteFlagSetCountEND
%token <iVal> ProductNoteFlagSetCountSTART
%token <iVal> ProductNoteSetCountEND
%token <iVal> ProductNoteSetCountSTART
%token <iVal> ProductPartNoteSetCountEND
%token <iVal> ProductPartNoteSetCountSTART
%token <iVal> ProductPartSetCountEND
%token <iVal> ProductPartSetCountSTART
%token <iVal> ProductTopologySetCountEND
%token <iVal> ProductTopologySetCountSTART
%token <iVal> ProductViewSetCountEND
%token <iVal> ProductViewSetCountSTART
%token <iVal> ProductVisualizationSetCountEND
%token <iVal> ProductVisualizationSetCountSTART
%token <iVal> ProductionMethodEND
%token <iVal> ProductionMethodSTART
%token <iVal> ProductionStudyPlanEND
%token <iVal> ProductionStudyPlanSTART
%token <iVal> ProductionStudyResultsEND
%token <iVal> ProductionStudyResultsSTART
%token <iVal> ProfileCurveIdEND
%token <iVal> ProfileCurveIdSTART
%token <iVal> ProfileProjectorMeasureFeatureMethodEND
%token <iVal> ProfileProjectorMeasureFeatureMethodSTART
%token <iVal> ProjectedDatumEND
%token <iVal> ProjectedDatumSTART
%token <iVal> ProjectedToleranceZoneEND
%token <iVal> ProjectedToleranceZoneSTART
%token <iVal> ProjectedToleranceZoneValueEND
%token <iVal> ProjectedToleranceZoneValueSTART
%token <iVal> ProjectionEND
%token <iVal> ProjectionSTART
%token <iVal> ProjectionArcEND
%token <iVal> ProjectionArcSTART
%token <iVal> ProjectionCircleEND
%token <iVal> ProjectionCircleSTART
%token <iVal> ProjectionFeatureEND
%token <iVal> ProjectionFeatureSTART
%token <iVal> ProjectionLineEND
%token <iVal> ProjectionLineSTART
%token <iVal> ProjectionOppositeAngledLinesEND
%token <iVal> ProjectionOppositeAngledLinesSTART
%token <iVal> ProjectionOppositeParallelLinesEND
%token <iVal> ProjectionOppositeParallelLinesSTART
%token <iVal> ProjectionPlaneEND
%token <iVal> ProjectionPlaneSTART
%token <iVal> ProtectionClassEND
%token <iVal> ProtectionClassSTART
%token <iVal> ProxyMeasurementIdEND
%token <iVal> ProxyMeasurementIdSTART
%token <iVal> PurchaseOrderNumberEND
%token <iVal> PurchaseOrderNumberSTART
%token <iVal> QIFDocumentEND
%token <iVal> QIFDocumentSTART
%token <iVal> QPIdEND
%token <iVal> QPIdSTART
%token <iVal> QPIdReferenceEND
%token <iVal> QPIdReferenceSTART
%token <iVal> QualificationEND
%token <iVal> QualificationSTART
%token <iVal> QualificationsEND
%token <iVal> QualificationsSTART
%token <iVal> QualityEND
%token <iVal> QualitySTART
%token <iVal> RAPResolutionEND
%token <iVal> RAPResolutionSTART
%token <iVal> RAPZResolutionEND
%token <iVal> RAPZResolutionSTART
%token <iVal> RadialEND
%token <iVal> RadialSTART
%token <iVal> RadialAxisLengthEND
%token <iVal> RadialAxisLengthSTART
%token <iVal> RadialDifferentialScaleEND
%token <iVal> RadialDifferentialScaleSTART
%token <iVal> RadialErrorEND
%token <iVal> RadialErrorSTART
%token <iVal> RadialResolutionEND
%token <iVal> RadialResolutionSTART
%token <iVal> RadiusEND
%token <iVal> RadiusSTART
%token <iVal> RadiusCharacteristicDefinitionEND
%token <iVal> RadiusCharacteristicDefinitionSTART
%token <iVal> RadiusCharacteristicItemEND
%token <iVal> RadiusCharacteristicItemSTART
%token <iVal> RadiusCharacteristicMeasurementEND
%token <iVal> RadiusCharacteristicMeasurementSTART
%token <iVal> RadiusCharacteristicNominalEND
%token <iVal> RadiusCharacteristicNominalSTART
%token <iVal> RadiusCharacteristicStatsEND
%token <iVal> RadiusCharacteristicStatsSTART
%token <iVal> RadiusMaxEND
%token <iVal> RadiusMaxSTART
%token <iVal> RadiusMinEND
%token <iVal> RadiusMinSTART
%token <iVal> RandRStudyTypeEND
%token <iVal> RandRStudyTypeSTART
%token <iVal> RangeEND
%token <iVal> RangeSTART
%token <iVal> RangeAngularUnitEND
%token <iVal> RangeAngularUnitSTART
%token <iVal> RangeForVolumetricUncertaintyEND
%token <iVal> RangeForVolumetricUncertaintySTART
%token <iVal> RangeLinearUnitEND
%token <iVal> RangeLinearUnitSTART
%token <iVal> RangePointSetIdEND
%token <iVal> RangePointSetIdSTART
%token <iVal> RangeValuesEND
%token <iVal> RangeValuesSTART
%token <iVal> RatioEND
%token <iVal> RatioSTART
%token <iVal> ReasonEND
%token <iVal> ReasonSTART
%token <iVal> ReasonForPartialInspectionEND
%token <iVal> ReasonForPartialInspectionSTART
%token <iVal> RecompensatedEND
%token <iVal> RecompensatedSTART
%token <iVal> RectangleEND
%token <iVal> RectangleSTART
%token <iVal> RectangularUnitAreaEND
%token <iVal> RectangularUnitAreaSTART
%token <iVal> RectangularUnitAreaLengthEND
%token <iVal> RectangularUnitAreaLengthSTART
%token <iVal> RectangularUnitAreaOrientationEND
%token <iVal> RectangularUnitAreaOrientationSTART
%token <iVal> RectangularUnitAreaWidthEND
%token <iVal> RectangularUnitAreaWidthSTART
%token <iVal> ReducedDatumEND
%token <iVal> ReducedDatumSTART
%token <iVal> ReferenceEND
%token <iVal> ReferenceSTART
%token <iVal> ReferenceFeatureAssociationSpecificationElementEND
%token <iVal> ReferenceFeatureAssociationSpecificationElementSTART
%token <iVal> ReferenceFeatureNominalIdEND
%token <iVal> ReferenceFeatureNominalIdSTART
%token <iVal> ReferenceFeatureNominalIdsEND
%token <iVal> ReferenceFeatureNominalIdsSTART
%token <iVal> ReferenceLengthEND
%token <iVal> ReferenceLengthSTART
%token <iVal> ReferenceLengthStatsEND
%token <iVal> ReferenceLengthStatsSTART
%token <iVal> ReferenceLineBeginPointEND
%token <iVal> ReferenceLineBeginPointSTART
%token <iVal> ReferenceLineEndPointEND
%token <iVal> ReferenceLineEndPointSTART
%token <iVal> ReferencedComponentEND
%token <iVal> ReferencedComponentSTART
%token <iVal> ReferencedQIFPlanEND
%token <iVal> ReferencedQIFPlanSTART
%token <iVal> ReferencedQIFPlanInstanceEND
%token <iVal> ReferencedQIFPlanInstanceSTART
%token <iVal> ReferencedStandardIdsEND
%token <iVal> ReferencedStandardIdsSTART
%token <iVal> RegionEND
%token <iVal> RegionSTART
%token <iVal> RegressionInterceptEND
%token <iVal> RegressionInterceptSTART
%token <iVal> RegressionSlopeEND
%token <iVal> RegressionSlopeSTART
%token <iVal> RelativeAppraiserVariationEND
%token <iVal> RelativeAppraiserVariationSTART
%token <iVal> RelativeBiasEND
%token <iVal> RelativeBiasSTART
%token <iVal> RelativeDifferenceEND
%token <iVal> RelativeDifferenceSTART
%token <iVal> RelativeEquipmentVariationEND
%token <iVal> RelativeEquipmentVariationSTART
%token <iVal> RelativeGageRandREND
%token <iVal> RelativeGageRandRSTART
%token <iVal> RelativeHumidityEND
%token <iVal> RelativeHumiditySTART
%token <iVal> RelativeHumidityControlMaxEND
%token <iVal> RelativeHumidityControlMaxSTART
%token <iVal> RelativeHumidityControlMinEND
%token <iVal> RelativeHumidityControlMinSTART
%token <iVal> RelativeHumidityRangeMaxEND
%token <iVal> RelativeHumidityRangeMaxSTART
%token <iVal> RelativeHumidityRangeMinEND
%token <iVal> RelativeHumidityRangeMinSTART
%token <iVal> RelativeInteractionEND
%token <iVal> RelativeInteractionSTART
%token <iVal> RelativeLinearityEND
%token <iVal> RelativeLinearitySTART
%token <iVal> RelativeLinearityMinimumEND
%token <iVal> RelativeLinearityMinimumSTART
%token <iVal> RelativeMaximumEND
%token <iVal> RelativeMaximumSTART
%token <iVal> RelativePartVariationEND
%token <iVal> RelativePartVariationSTART
%token <iVal> RelativeTotalVariationEND
%token <iVal> RelativeTotalVariationSTART
%token <iVal> RepeatabilityEND
%token <iVal> RepeatabilitySTART
%token <iVal> ReportNumberEND
%token <iVal> ReportNumberSTART
%token <iVal> ReportPreparationDateEND
%token <iVal> ReportPreparationDateSTART
%token <iVal> ReportPreparerEND
%token <iVal> ReportPreparerSTART
%token <iVal> ReportTypeEND
%token <iVal> ReportTypeSTART
%token <iVal> RequirementEND
%token <iVal> RequirementSTART
%token <iVal> RequirementsEND
%token <iVal> RequirementsSTART
%token <iVal> ResolutionEND
%token <iVal> ResolutionSTART
%token <iVal> ResponsibilityIdentifierEND
%token <iVal> ResponsibilityIdentifierSTART
%token <iVal> ResultStatementEND
%token <iVal> ResultStatementSTART
%token <iVal> ResultStatusEND
%token <iVal> ResultStatusSTART
%token <iVal> ResultsEND
%token <iVal> ResultsSTART
%token <iVal> ResultsFilesEND
%token <iVal> ResultsFilesSTART
%token <iVal> ResultsIdsEND
%token <iVal> ResultsIdsSTART
%token <iVal> ResultsQPIdsEND
%token <iVal> ResultsQPIdsSTART
%token <iVal> RetrievalMethodEND
%token <iVal> RetrievalMethodSTART
%token <iVal> RevisionEND
%token <iVal> RevisionSTART
%token <iVal> Revolution23END
%token <iVal> Revolution23START
%token <iVal> Revolution23CoreEND
%token <iVal> Revolution23CoreSTART
%token <iVal> RootAssemblyEND
%token <iVal> RootAssemblySTART
%token <iVal> RootComponentEND
%token <iVal> RootComponentSTART
%token <iVal> RootMeanSquareEND
%token <iVal> RootMeanSquareSTART
%token <iVal> RootOpeningEND
%token <iVal> RootOpeningSTART
%token <iVal> RootPartEND
%token <iVal> RootPartSTART
%token <iVal> RotaryAxisEND
%token <iVal> RotaryAxisSTART
%token <iVal> RotaryTableEND
%token <iVal> RotaryTableSTART
%token <iVal> RotateEND
%token <iVal> RotateSTART
%token <iVal> RotationEND
%token <iVal> RotationSTART
%token <iVal> RotationAxisEND
%token <iVal> RotationAxisSTART
%token <iVal> RoughnessAverageEND
%token <iVal> RoughnessAverageSTART
%token <iVal> RoughnessAverageValueEND
%token <iVal> RoughnessAverageValueSTART
%token <iVal> RoughnessAverageValueStatsEND
%token <iVal> RoughnessAverageValueStatsSTART
%token <iVal> RowSeparationDistanceEND
%token <iVal> RowSeparationDistanceSTART
%token <iVal> Ruled23END
%token <iVal> Ruled23START
%token <iVal> Ruled23CoreEND
%token <iVal> Ruled23CoreSTART
%token <iVal> RulesEND
%token <iVal> RulesSTART
%token <iVal> RulesToUseQPIdEND
%token <iVal> RulesToUseQPIdSTART
%token <iVal> RulesUnitsEND
%token <iVal> RulesUnitsSTART
%token <iVal> RulesUsedQPIdEND
%token <iVal> RulesUsedQPIdSTART
%token <iVal> SIUnitNameEND
%token <iVal> SIUnitNameSTART
%token <iVal> SafetyLevelEND
%token <iVal> SafetyLevelSTART
%token <iVal> SampleFrequencyEND
%token <iVal> SampleFrequencySTART
%token <iVal> SampleNumberEND
%token <iVal> SampleNumberSTART
%token <iVal> SamplePenetratingMaterialEND
%token <iVal> SamplePenetratingMaterialSTART
%token <iVal> SamplePenetratingMaterialLengthEND
%token <iVal> SamplePenetratingMaterialLengthSTART
%token <iVal> SampleSizeEND
%token <iVal> SampleSizeSTART
%token <iVal> SamplingCategoryIsEND
%token <iVal> SamplingCategoryIsSTART
%token <iVal> SamplingFrequencyEND
%token <iVal> SamplingFrequencySTART
%token <iVal> SamplingIntervalEND
%token <iVal> SamplingIntervalSTART
%token <iVal> SamplingIntervalEnumEND
%token <iVal> SamplingIntervalEnumSTART
%token <iVal> SamplingMethodEND
%token <iVal> SamplingMethodSTART
%token <iVal> SamplingPeriodEND
%token <iVal> SamplingPeriodSTART
%token <iVal> SamplingRateEND
%token <iVal> SamplingRateSTART
%token <iVal> SavedViewEND
%token <iVal> SavedViewSTART
%token <iVal> SavedViewSetEND
%token <iVal> SavedViewSetSTART
%token <iVal> ScaleEND
%token <iVal> ScaleSTART
%token <iVal> ScaleCoefficientEND
%token <iVal> ScaleCoefficientSTART
%token <iVal> ScaleCoefficientOfExpansionEND
%token <iVal> ScaleCoefficientOfExpansionSTART
%token <iVal> ScaleCoefficientOfExpansionUncertaintyEND
%token <iVal> ScaleCoefficientOfExpansionUncertaintySTART
%token <iVal> ScaleFactorEND
%token <iVal> ScaleFactorSTART
%token <iVal> ScaleMaterialEND
%token <iVal> ScaleMaterialSTART
%token <iVal> ScaleReferenceEND
%token <iVal> ScaleReferenceSTART
%token <iVal> ScaleResolutionEND
%token <iVal> ScaleResolutionSTART
%token <iVal> ScanningSpeedEND
%token <iVal> ScanningSpeedSTART
%token <iVal> ScopeEND
%token <iVal> ScopeSTART
%token <iVal> ScreenMaterialEND
%token <iVal> ScreenMaterialSTART
%token <iVal> SearchRadiusEND
%token <iVal> SearchRadiusSTART
%token <iVal> SecondAxisEND
%token <iVal> SecondAxisSTART
%token <iVal> SecondCompositeSegmentPositionDefinitionEND
%token <iVal> SecondCompositeSegmentPositionDefinitionSTART
%token <iVal> SecondCompositeSegmentPositionMeasurementEND
%token <iVal> SecondCompositeSegmentPositionMeasurementSTART
%token <iVal> SecondCompositeSegmentPositionStatsEND
%token <iVal> SecondCompositeSegmentPositionStatsSTART
%token <iVal> SecondCompositeSegmentProfileDefinitionEND
%token <iVal> SecondCompositeSegmentProfileDefinitionSTART
%token <iVal> SecondCompositeSegmentProfileMeasurementEND
%token <iVal> SecondCompositeSegmentProfileMeasurementSTART
%token <iVal> SecondCompositeSegmentProfileStatsEND
%token <iVal> SecondCompositeSegmentProfileStatsSTART
%token <iVal> SecondCompositeSegmentSymmetryDefinitionEND
%token <iVal> SecondCompositeSegmentSymmetryDefinitionSTART
%token <iVal> SecondCompositeSegmentSymmetryMeasurementEND
%token <iVal> SecondCompositeSegmentSymmetryMeasurementSTART
%token <iVal> SecondCompositeSegmentSymmetryStatsEND
%token <iVal> SecondCompositeSegmentSymmetryStatsSTART
%token <iVal> SecondDirectionFirstNestingIndexEND
%token <iVal> SecondDirectionFirstNestingIndexSTART
%token <iVal> SecondDirectionNestingIndexEND
%token <iVal> SecondDirectionNestingIndexSTART
%token <iVal> SecondDirectionSecondNestingIndexEND
%token <iVal> SecondDirectionSecondNestingIndexSTART
%token <iVal> SecondFeatureEND
%token <iVal> SecondFeatureSTART
%token <iVal> SecondFeatureZoneEND
%token <iVal> SecondFeatureZoneSTART
%token <iVal> SecondLegLengthEND
%token <iVal> SecondLegLengthSTART
%token <iVal> SecondLineOriginEND
%token <iVal> SecondLineOriginSTART
%token <iVal> SecondNestingIndexEND
%token <iVal> SecondNestingIndexSTART
%token <iVal> SecondaryAlignmentEND
%token <iVal> SecondaryAlignmentSTART
%token <iVal> SecondaryAxisEND
%token <iVal> SecondaryAxisSTART
%token <iVal> SecondaryEntityEND
%token <iVal> SecondaryEntitySTART
%token <iVal> SecondaryRoughnessParameterEND
%token <iVal> SecondaryRoughnessParameterSTART
%token <iVal> SectionEND
%token <iVal> SectionSTART
%token <iVal> SectionGroupEND
%token <iVal> SectionGroupSTART
%token <iVal> SectionGroupsEND
%token <iVal> SectionGroupsSTART
%token <iVal> SectionModifierEND
%token <iVal> SectionModifierSTART
%token <iVal> SectionPlaneEND
%token <iVal> SectionPlaneSTART
%token <iVal> SectionPlanesEND
%token <iVal> SectionPlanesSTART
%token <iVal> SecurityClassificationEND
%token <iVal> SecurityClassificationSTART
%token <iVal> SecurityClassificationEnumEND
%token <iVal> SecurityClassificationEnumSTART
%token <iVal> Segment1END
%token <iVal> Segment1START
%token <iVal> Segment12END
%token <iVal> Segment12START
%token <iVal> Segment12CoreEND
%token <iVal> Segment12CoreSTART
%token <iVal> Segment13END
%token <iVal> Segment13START
%token <iVal> Segment13CoreEND
%token <iVal> Segment13CoreSTART
%token <iVal> Segment2END
%token <iVal> Segment2START
%token <iVal> SensitivityEND
%token <iVal> SensitivitySTART
%token <iVal> SensorIdEND
%token <iVal> SensorIdSTART
%token <iVal> SensorIdsEND
%token <iVal> SensorIdsSTART
%token <iVal> SeparateZoneEND
%token <iVal> SeparateZoneSTART
%token <iVal> SequenceNumberEND
%token <iVal> SequenceNumberSTART
%token <iVal> SerialNumberEND
%token <iVal> SerialNumberSTART
%token <iVal> SetEND
%token <iVal> SetSTART
%token <iVal> ShapeClassEnumEND
%token <iVal> ShapeClassEnumSTART
%token <iVal> ShapeClassIsEND
%token <iVal> ShapeClassIsSTART
%token <iVal> SheetNumberEND
%token <iVal> SheetNumberSTART
%token <iVal> ShellEND
%token <iVal> ShellSTART
%token <iVal> ShellIdsEND
%token <iVal> ShellIdsSTART
%token <iVal> ShellSetEND
%token <iVal> ShellSetSTART
%token <iVal> ShiftEND
%token <iVal> ShiftSTART
%token <iVal> ShockToleranceEND
%token <iVal> ShockToleranceSTART
%token <iVal> SideParametersEND
%token <iVal> SideParametersSTART
%token <iVal> SignOffsEND
%token <iVal> SignOffsSTART
%token <iVal> SignatureEND
%token <iVal> SignatureSTART
%token <iVal> SignaturePresentEND
%token <iVal> SignaturePresentSTART
%token <iVal> SignificanceModifierEND
%token <iVal> SignificanceModifierSTART
%token <iVal> SimpleDatumEND
%token <iVal> SimpleDatumSTART
%token <iVal> SimpleStudyPlanEND
%token <iVal> SimpleStudyPlanSTART
%token <iVal> SimpleStudyResultsEND
%token <iVal> SimpleStudyResultsSTART
%token <iVal> SimpleTactileProbeSensorEND
%token <iVal> SimpleTactileProbeSensorSTART
%token <iVal> SimplifiedRepresentationEND
%token <iVal> SimplifiedRepresentationSTART
%token <iVal> SimplifiedRepresentationGroupEND
%token <iVal> SimplifiedRepresentationGroupSTART
%token <iVal> SimplifiedRepresentationGroupsEND
%token <iVal> SimplifiedRepresentationGroupsSTART
%token <iVal> SimplifiedRepresentationIdEND
%token <iVal> SimplifiedRepresentationIdSTART
%token <iVal> SimplifiedRepresentationSetEND
%token <iVal> SimplifiedRepresentationSetSTART
%token <iVal> SimultaneousRequirementGroupEND
%token <iVal> SimultaneousRequirementGroupSTART
%token <iVal> SimultaneousRequirementGroupsEND
%token <iVal> SimultaneousRequirementGroupsSTART
%token <iVal> SineBarEND
%token <iVal> SineBarSTART
%token <iVal> SingleEND
%token <iVal> SingleSTART
%token <iVal> SingleLeadSpecificationEND
%token <iVal> SingleLeadSpecificationSTART
%token <iVal> SingleNestingIndexFilterEND
%token <iVal> SingleNestingIndexFilterSTART
%token <iVal> SingleOpenEndEND
%token <iVal> SingleOpenEndSTART
%token <iVal> SinglePointArticulationPerformanceTestEND
%token <iVal> SinglePointArticulationPerformanceTestSTART
%token <iVal> SinglePointSetIdEND
%token <iVal> SinglePointSetIdSTART
%token <iVal> SizeEND
%token <iVal> SizeSTART
%token <iVal> SizeCharacteristicDefinitionIdEND
%token <iVal> SizeCharacteristicDefinitionIdSTART
%token <iVal> SkewEND
%token <iVal> SkewSTART
%token <iVal> SkewGroupingEND
%token <iVal> SkewGroupingSTART
%token <iVal> SlotEndEnumEND
%token <iVal> SlotEndEnumSTART
%token <iVal> SmallEndDistanceEND
%token <iVal> SmallEndDistanceSTART
%token <iVal> SoftwareEND
%token <iVal> SoftwareSTART
%token <iVal> SoftwareDefinitionsEND
%token <iVal> SoftwareDefinitionsSTART
%token <iVal> SoftwareIdEND
%token <iVal> SoftwareIdSTART
%token <iVal> SourceDescriptionEND
%token <iVal> SourceDescriptionSTART
%token <iVal> SourceOfRequirednessEND
%token <iVal> SourceOfRequirednessSTART
%token <iVal> SpacerEND
%token <iVal> SpacerSTART
%token <iVal> SpecificHeatCapacityEND
%token <iVal> SpecificHeatCapacitySTART
%token <iVal> SpecificationEND
%token <iVal> SpecificationSTART
%token <iVal> SpeedAbsoluteLinearityEND
%token <iVal> SpeedAbsoluteLinearitySTART
%token <iVal> SpeedCriterionEND
%token <iVal> SpeedCriterionSTART
%token <iVal> SpeedLimitEND
%token <iVal> SpeedLimitSTART
%token <iVal> SpeedMeasurementEND
%token <iVal> SpeedMeasurementSTART
%token <iVal> SpeedStatsSummariesEND
%token <iVal> SpeedStatsSummariesSTART
%token <iVal> SpeedStatsSummaryEND
%token <iVal> SpeedStatsSummarySTART
%token <iVal> SpeedUnitEND
%token <iVal> SpeedUnitSTART
%token <iVal> SphereEND
%token <iVal> SphereSTART
%token <iVal> Sphere23END
%token <iVal> Sphere23START
%token <iVal> Sphere23CoreEND
%token <iVal> Sphere23CoreSTART
%token <iVal> SphereFeatureDefinitionEND
%token <iVal> SphereFeatureDefinitionSTART
%token <iVal> SphereFeatureItemEND
%token <iVal> SphereFeatureItemSTART
%token <iVal> SphereFeatureMeasurementEND
%token <iVal> SphereFeatureMeasurementSTART
%token <iVal> SphereFeatureNominalEND
%token <iVal> SphereFeatureNominalSTART
%token <iVal> SphericalDiameterCharacteristicDefinitionEND
%token <iVal> SphericalDiameterCharacteristicDefinitionSTART
%token <iVal> SphericalDiameterCharacteristicItemEND
%token <iVal> SphericalDiameterCharacteristicItemSTART
%token <iVal> SphericalDiameterCharacteristicMeasurementEND
%token <iVal> SphericalDiameterCharacteristicMeasurementSTART
%token <iVal> SphericalDiameterCharacteristicNominalEND
%token <iVal> SphericalDiameterCharacteristicNominalSTART
%token <iVal> SphericalDiameterCharacteristicStatsEND
%token <iVal> SphericalDiameterCharacteristicStatsSTART
%token <iVal> SphericalRadiusCharacteristicDefinitionEND
%token <iVal> SphericalRadiusCharacteristicDefinitionSTART
%token <iVal> SphericalRadiusCharacteristicItemEND
%token <iVal> SphericalRadiusCharacteristicItemSTART
%token <iVal> SphericalRadiusCharacteristicMeasurementEND
%token <iVal> SphericalRadiusCharacteristicMeasurementSTART
%token <iVal> SphericalRadiusCharacteristicNominalEND
%token <iVal> SphericalRadiusCharacteristicNominalSTART
%token <iVal> SphericalRadiusCharacteristicStatsEND
%token <iVal> SphericalRadiusCharacteristicStatsSTART
%token <iVal> SphericalResolutionEND
%token <iVal> SphericalResolutionSTART
%token <iVal> SphericalSegmentFeatureDefinitionEND
%token <iVal> SphericalSegmentFeatureDefinitionSTART
%token <iVal> SphericalSegmentFeatureItemEND
%token <iVal> SphericalSegmentFeatureItemSTART
%token <iVal> SphericalSegmentFeatureMeasurementEND
%token <iVal> SphericalSegmentFeatureMeasurementSTART
%token <iVal> SphericalSegmentFeatureNominalEND
%token <iVal> SphericalSegmentFeatureNominalSTART
%token <iVal> SphericalWorkingVolumeEND
%token <iVal> SphericalWorkingVolumeSTART
%token <iVal> SphericalZoneEND
%token <iVal> SphericalZoneSTART
%token <iVal> SphericityCharacteristicDefinitionEND
%token <iVal> SphericityCharacteristicDefinitionSTART
%token <iVal> SphericityCharacteristicItemEND
%token <iVal> SphericityCharacteristicItemSTART
%token <iVal> SphericityCharacteristicMeasurementEND
%token <iVal> SphericityCharacteristicMeasurementSTART
%token <iVal> SphericityCharacteristicNominalEND
%token <iVal> SphericityCharacteristicNominalSTART
%token <iVal> SphericityCharacteristicStatsEND
%token <iVal> SphericityCharacteristicStatsSTART
%token <iVal> Spline12END
%token <iVal> Spline12START
%token <iVal> Spline12CoreEND
%token <iVal> Spline12CoreSTART
%token <iVal> Spline13END
%token <iVal> Spline13START
%token <iVal> Spline13CoreEND
%token <iVal> Spline13CoreSTART
%token <iVal> Spline23END
%token <iVal> Spline23START
%token <iVal> Spline23CoreEND
%token <iVal> Spline23CoreSTART
%token <iVal> SpotDiameterEND
%token <iVal> SpotDiameterSTART
%token <iVal> SquareCharacteristicDefinitionEND
%token <iVal> SquareCharacteristicDefinitionSTART
%token <iVal> SquareCharacteristicItemEND
%token <iVal> SquareCharacteristicItemSTART
%token <iVal> SquareCharacteristicMeasurementEND
%token <iVal> SquareCharacteristicMeasurementSTART
%token <iVal> SquareCharacteristicNominalEND
%token <iVal> SquareCharacteristicNominalSTART
%token <iVal> SquareCharacteristicStatsEND
%token <iVal> SquareCharacteristicStatsSTART
%token <iVal> StabilityStudyPlanEND
%token <iVal> StabilityStudyPlanSTART
%token <iVal> StabilityStudyResultsEND
%token <iVal> StabilityStudyResultsSTART
%token <iVal> StadiaBaseConstantEND
%token <iVal> StadiaBaseConstantSTART
%token <iVal> StadiaRateConstantEND
%token <iVal> StadiaRateConstantSTART
%token <iVal> StageMaterialEND
%token <iVal> StageMaterialSTART
%token <iVal> StageSwivelingAngleEND
%token <iVal> StageSwivelingAngleSTART
%token <iVal> StaggeredEND
%token <iVal> StaggeredSTART
%token <iVal> StandOffDistanceEND
%token <iVal> StandOffDistanceSTART
%token <iVal> StandardEND
%token <iVal> StandardSTART
%token <iVal> StandardDeviationEND
%token <iVal> StandardDeviationSTART
%token <iVal> StandardIdEND
%token <iVal> StandardIdSTART
%token <iVal> StandardNameEND
%token <iVal> StandardNameSTART
%token <iVal> StandardsDefinitionsEND
%token <iVal> StandardsDefinitionsSTART
%token <iVal> StandardsOrganizationEnumEND
%token <iVal> StandardsOrganizationEnumSTART
%token <iVal> StartEND
%token <iVal> StartSTART
%token <iVal> StartDirectionEND
%token <iVal> StartDirectionSTART
%token <iVal> StartPointEND
%token <iVal> StartPointSTART
%token <iVal> StatisticalCharacteristicEND
%token <iVal> StatisticalCharacteristicSTART
%token <iVal> StatisticalStudiesResultsEND
%token <iVal> StatisticalStudiesResultsSTART
%token <iVal> StatisticalStudiesResultsCountEND
%token <iVal> StatisticalStudiesResultsCountSTART
%token <iVal> StatisticalStudyPlansEND
%token <iVal> StatisticalStudyPlansSTART
%token <iVal> StatisticalStudyPlansCountEND
%token <iVal> StatisticalStudyPlansCountSTART
%token <iVal> StatisticsEND
%token <iVal> StatisticsSTART
%token <iVal> StatsEND
%token <iVal> StatsSTART
%token <iVal> StatsEvalStatusEnumEND
%token <iVal> StatsEvalStatusEnumSTART
%token <iVal> StatsSummariesEND
%token <iVal> StatsSummariesSTART
%token <iVal> StatsSummaryEND
%token <iVal> StatsSummarySTART
%token <iVal> StatsValuesPerCharEND
%token <iVal> StatsValuesPerCharSTART
%token <iVal> StatsValuesPerSubgroupEND
%token <iVal> StatsValuesPerSubgroupSTART
%token <iVal> StatsValuesSummarysEND
%token <iVal> StatsValuesSummarysSTART
%token <iVal> StatusEND
%token <iVal> StatusSTART
%token <iVal> StemDiameterEND
%token <iVal> StemDiameterSTART
%token <iVal> StemMaterialEND
%token <iVal> StemMaterialSTART
%token <iVal> StepEND
%token <iVal> StepSTART
%token <iVal> StepWithPredecessorsEND
%token <iVal> StepWithPredecessorsSTART
%token <iVal> StepsEND
%token <iVal> StepsSTART
%token <iVal> StepsWithPredecessorsEND
%token <iVal> StepsWithPredecessorsSTART
%token <iVal> StopEND
%token <iVal> StopSTART
%token <iVal> StraightnessCharacteristicDefinitionEND
%token <iVal> StraightnessCharacteristicDefinitionSTART
%token <iVal> StraightnessCharacteristicItemEND
%token <iVal> StraightnessCharacteristicItemSTART
%token <iVal> StraightnessCharacteristicMeasurementEND
%token <iVal> StraightnessCharacteristicMeasurementSTART
%token <iVal> StraightnessCharacteristicNominalEND
%token <iVal> StraightnessCharacteristicNominalSTART
%token <iVal> StraightnessCharacteristicStatsEND
%token <iVal> StraightnessCharacteristicStatsSTART
%token <iVal> StratificationEND
%token <iVal> StratificationSTART
%token <iVal> StreetEND
%token <iVal> StreetSTART
%token <iVal> StreetNumberEND
%token <iVal> StreetNumberSTART
%token <iVal> StringValueEND
%token <iVal> StringValueSTART
%token <iVal> StructuredLightSensorEND
%token <iVal> StructuredLightSensorSTART
%token <iVal> StudyIdEND
%token <iVal> StudyIdSTART
%token <iVal> StudyIssueEND
%token <iVal> StudyIssueSTART
%token <iVal> StudyIssueIdEND
%token <iVal> StudyIssueIdSTART
%token <iVal> StudyIssuesEND
%token <iVal> StudyIssuesSTART
%token <iVal> SubCurveEND
%token <iVal> SubCurveSTART
%token <iVal> SubCurvesEND
%token <iVal> SubCurvesSTART
%token <iVal> SubgroupEND
%token <iVal> SubgroupSTART
%token <iVal> SubgroupAveragesEND
%token <iVal> SubgroupAveragesSTART
%token <iVal> SubgroupDecimalEND
%token <iVal> SubgroupDecimalSTART
%token <iVal> SubgroupDifferencesEND
%token <iVal> SubgroupDifferencesSTART
%token <iVal> SubgroupEffectiveNumbersEND
%token <iVal> SubgroupEffectiveNumbersSTART
%token <iVal> SubgroupIdsEND
%token <iVal> SubgroupIdsSTART
%token <iVal> SubgroupIntegerEND
%token <iVal> SubgroupIntegerSTART
%token <iVal> SubgroupMaximaEND
%token <iVal> SubgroupMaximaSTART
%token <iVal> SubgroupMinimaEND
%token <iVal> SubgroupMinimaSTART
%token <iVal> SubgroupNumbersOutOfToleranceEND
%token <iVal> SubgroupNumbersOutOfToleranceSTART
%token <iVal> SubgroupNumbersOverUpperToleranceEND
%token <iVal> SubgroupNumbersOverUpperToleranceSTART
%token <iVal> SubgroupNumbersUnderLowerToleranceEND
%token <iVal> SubgroupNumbersUnderLowerToleranceSTART
%token <iVal> SubgroupRangesEND
%token <iVal> SubgroupRangesSTART
%token <iVal> SubgroupSizeEND
%token <iVal> SubgroupSizeSTART
%token <iVal> SubgroupTotalNumbersEND
%token <iVal> SubgroupTotalNumbersSTART
%token <iVal> SubgroupValuesEND
%token <iVal> SubgroupValuesSTART
%token <iVal> SubgroupsEND
%token <iVal> SubgroupsSTART
%token <iVal> SubstituteFeatureAlgorithmEND
%token <iVal> SubstituteFeatureAlgorithmSTART
%token <iVal> SubstituteFeatureAlgorithmEnumEND
%token <iVal> SubstituteFeatureAlgorithmEnumSTART
%token <iVal> SubstituteFeatureAlgorithmIdEND
%token <iVal> SubstituteFeatureAlgorithmIdSTART
%token <iVal> SuffixEND
%token <iVal> SuffixSTART
%token <iVal> SummaryAverageEND
%token <iVal> SummaryAverageSTART
%token <iVal> SummaryMaximumEND
%token <iVal> SummaryMaximumSTART
%token <iVal> SummaryMinimumEND
%token <iVal> SummaryMinimumSTART
%token <iVal> SummaryRangeEND
%token <iVal> SummaryRangeSTART
%token <iVal> SummaryStandardDeviationEND
%token <iVal> SummaryStandardDeviationSTART
%token <iVal> SummaryStatsEND
%token <iVal> SummaryStatsSTART
%token <iVal> SummaryStatsValuesEND
%token <iVal> SummaryStatsValuesSTART
%token <iVal> SummaryTypeEND
%token <iVal> SummaryTypeSTART
%token <iVal> SupplementarySymbolEND
%token <iVal> SupplementarySymbolSTART
%token <iVal> SupplierCodeEND
%token <iVal> SupplierCodeSTART
%token <iVal> SurfaceEND
%token <iVal> SurfaceSTART
%token <iVal> SurfaceFeatureEND
%token <iVal> SurfaceFeatureSTART
%token <iVal> SurfaceFeatureNominalIdEND
%token <iVal> SurfaceFeatureNominalIdSTART
%token <iVal> SurfaceIlluminationLightSourceEND
%token <iVal> SurfaceIlluminationLightSourceSTART
%token <iVal> SurfaceMeshSetEND
%token <iVal> SurfaceMeshSetSTART
%token <iVal> SurfaceOfRevolutionFeatureDefinitionEND
%token <iVal> SurfaceOfRevolutionFeatureDefinitionSTART
%token <iVal> SurfaceOfRevolutionFeatureItemEND
%token <iVal> SurfaceOfRevolutionFeatureItemSTART
%token <iVal> SurfaceOfRevolutionFeatureMeasurementEND
%token <iVal> SurfaceOfRevolutionFeatureMeasurementSTART
%token <iVal> SurfaceOfRevolutionFeatureNominalEND
%token <iVal> SurfaceOfRevolutionFeatureNominalSTART
%token <iVal> SurfacePointsSpeedEND
%token <iVal> SurfacePointsSpeedSTART
%token <iVal> SurfaceProfileCharacteristicDefinitionEND
%token <iVal> SurfaceProfileCharacteristicDefinitionSTART
%token <iVal> SurfaceProfileCharacteristicItemEND
%token <iVal> SurfaceProfileCharacteristicItemSTART
%token <iVal> SurfaceProfileCharacteristicMeasurementEND
%token <iVal> SurfaceProfileCharacteristicMeasurementSTART
%token <iVal> SurfaceProfileCharacteristicNominalEND
%token <iVal> SurfaceProfileCharacteristicNominalSTART
%token <iVal> SurfaceProfileCharacteristicStatsEND
%token <iVal> SurfaceProfileCharacteristicStatsSTART
%token <iVal> SurfaceProfileNonUniformCharacteristicDefinitionEND
%token <iVal> SurfaceProfileNonUniformCharacteristicDefinitionSTART
%token <iVal> SurfaceProfileNonUniformCharacteristicItemEND
%token <iVal> SurfaceProfileNonUniformCharacteristicItemSTART
%token <iVal> SurfaceProfileNonUniformCharacteristicMeasurementEND
%token <iVal> SurfaceProfileNonUniformCharacteristicMeasurementSTART
%token <iVal> SurfaceProfileNonUniformCharacteristicNominalEND
%token <iVal> SurfaceProfileNonUniformCharacteristicNominalSTART
%token <iVal> SurfaceProfileNonUniformCharacteristicStatsEND
%token <iVal> SurfaceProfileNonUniformCharacteristicStatsSTART
%token <iVal> SurfaceSetEND
%token <iVal> SurfaceSetSTART
%token <iVal> SurfaceTextureCharacteristicDefinitionEND
%token <iVal> SurfaceTextureCharacteristicDefinitionSTART
%token <iVal> SurfaceTextureCharacteristicItemEND
%token <iVal> SurfaceTextureCharacteristicItemSTART
%token <iVal> SurfaceTextureCharacteristicMeasurementEND
%token <iVal> SurfaceTextureCharacteristicMeasurementSTART
%token <iVal> SurfaceTextureCharacteristicNominalEND
%token <iVal> SurfaceTextureCharacteristicNominalSTART
%token <iVal> SurfaceTextureCharacteristicStatsEND
%token <iVal> SurfaceTextureCharacteristicStatsSTART
%token <iVal> SustainedDataRateEND
%token <iVal> SustainedDataRateSTART
%token <iVal> SweepEND
%token <iVal> SweepSTART
%token <iVal> SweepFullEND
%token <iVal> SweepFullSTART
%token <iVal> SweepMeasurementRangeEND
%token <iVal> SweepMeasurementRangeSTART
%token <iVal> SymbolEND
%token <iVal> SymbolSTART
%token <iVal> SymmetryCharacteristicDefinitionEND
%token <iVal> SymmetryCharacteristicDefinitionSTART
%token <iVal> SymmetryCharacteristicItemEND
%token <iVal> SymmetryCharacteristicItemSTART
%token <iVal> SymmetryCharacteristicMeasurementEND
%token <iVal> SymmetryCharacteristicMeasurementSTART
%token <iVal> SymmetryCharacteristicNominalEND
%token <iVal> SymmetryCharacteristicNominalSTART
%token <iVal> SymmetryCharacteristicStatsEND
%token <iVal> SymmetryCharacteristicStatsSTART
%token <iVal> TDistributionEND
%token <iVal> TDistributionSTART
%token <iVal> TableErrorsEND
%token <iVal> TableErrorsSTART
%token <iVal> TableRadiusEND
%token <iVal> TableRadiusSTART
%token <iVal> TailEND
%token <iVal> TailSTART
%token <iVal> TangentEND
%token <iVal> TangentSTART
%token <iVal> TangentFeatureEND
%token <iVal> TangentFeatureSTART
%token <iVal> TangentPlaneEND
%token <iVal> TangentPlaneSTART
%token <iVal> TangentThroughEND
%token <iVal> TangentThroughSTART
%token <iVal> TangentialErrorEND
%token <iVal> TangentialErrorSTART
%token <iVal> TaperAngleEND
%token <iVal> TaperAngleSTART
%token <iVal> TargetDualValueEND
%token <iVal> TargetDualValueSTART
%token <iVal> TargetMirrorEND
%token <iVal> TargetMirrorSTART
%token <iVal> TargetValueEND
%token <iVal> TargetValueSTART
%token <iVal> TargetZoneIdEND
%token <iVal> TargetZoneIdSTART
%token <iVal> TelephoneNumberEND
%token <iVal> TelephoneNumberSTART
%token <iVal> TelexNumberEND
%token <iVal> TelexNumberSTART
%token <iVal> TemperatureEND
%token <iVal> TemperatureSTART
%token <iVal> TemperatureAbsoluteLinearityEND
%token <iVal> TemperatureAbsoluteLinearitySTART
%token <iVal> TemperatureCompensationEND
%token <iVal> TemperatureCompensationSTART
%token <iVal> TemperatureCompensationEnumEND
%token <iVal> TemperatureCompensationEnumSTART
%token <iVal> TemperatureControlMaxEND
%token <iVal> TemperatureControlMaxSTART
%token <iVal> TemperatureControlMinEND
%token <iVal> TemperatureControlMinSTART
%token <iVal> TemperatureCriterionEND
%token <iVal> TemperatureCriterionSTART
%token <iVal> TemperatureLimitEND
%token <iVal> TemperatureLimitSTART
%token <iVal> TemperatureMeasurementEND
%token <iVal> TemperatureMeasurementSTART
%token <iVal> TemperatureRangeMaxEND
%token <iVal> TemperatureRangeMaxSTART
%token <iVal> TemperatureRangeMinEND
%token <iVal> TemperatureRangeMinSTART
%token <iVal> TemperatureStabilityEND
%token <iVal> TemperatureStabilitySTART
%token <iVal> TemperatureStatsSummariesEND
%token <iVal> TemperatureStatsSummariesSTART
%token <iVal> TemperatureStatsSummaryEND
%token <iVal> TemperatureStatsSummarySTART
%token <iVal> TemperatureUnitEND
%token <iVal> TemperatureUnitSTART
%token <iVal> TemperaturesEND
%token <iVal> TemperaturesSTART
%token <iVal> TensileYieldStressEND
%token <iVal> TensileYieldStressSTART
%token <iVal> TerminationPointEND
%token <iVal> TerminationPointSTART
%token <iVal> TextEND
%token <iVal> TextSTART
%token <iVal> TextHiddenEND
%token <iVal> TextHiddenSTART
%token <iVal> TextInstructionEND
%token <iVal> TextInstructionSTART
%token <iVal> TextSpecificationEND
%token <iVal> TextSpecificationSTART
%token <iVal> TextThreadSpecificationEND
%token <iVal> TextThreadSpecificationSTART
%token <iVal> TextsEND
%token <iVal> TextsSTART
%token <iVal> ThenFittingAlgorithmEND
%token <iVal> ThenFittingAlgorithmSTART
%token <iVal> ThenPointStrategyEND
%token <iVal> ThenPointStrategySTART
%token <iVal> ThenPointsEND
%token <iVal> ThenPointsSTART
%token <iVal> TheodoliteEND
%token <iVal> TheodoliteSTART
%token <iVal> TheodoliteMeasureFeatureMethodEND
%token <iVal> TheodoliteMeasureFeatureMethodSTART
%token <iVal> ThermalConductivityEND
%token <iVal> ThermalConductivitySTART
%token <iVal> ThermalExpansionEND
%token <iVal> ThermalExpansionSTART
%token <iVal> ThicknessCharacteristicDefinitionEND
%token <iVal> ThicknessCharacteristicDefinitionSTART
%token <iVal> ThicknessCharacteristicItemEND
%token <iVal> ThicknessCharacteristicItemSTART
%token <iVal> ThicknessCharacteristicMeasurementEND
%token <iVal> ThicknessCharacteristicMeasurementSTART
%token <iVal> ThicknessCharacteristicNominalEND
%token <iVal> ThicknessCharacteristicNominalSTART
%token <iVal> ThicknessCharacteristicStatsEND
%token <iVal> ThicknessCharacteristicStatsSTART
%token <iVal> ThirdAxisEND
%token <iVal> ThirdAxisSTART
%token <iVal> ThirdCompositeSegmentPositionDefinitionEND
%token <iVal> ThirdCompositeSegmentPositionDefinitionSTART
%token <iVal> ThirdCompositeSegmentPositionMeasurementEND
%token <iVal> ThirdCompositeSegmentPositionMeasurementSTART
%token <iVal> ThirdCompositeSegmentPositionStatsEND
%token <iVal> ThirdCompositeSegmentPositionStatsSTART
%token <iVal> ThirdCompositeSegmentProfileDefinitionEND
%token <iVal> ThirdCompositeSegmentProfileDefinitionSTART
%token <iVal> ThirdCompositeSegmentProfileMeasurementEND
%token <iVal> ThirdCompositeSegmentProfileMeasurementSTART
%token <iVal> ThirdCompositeSegmentProfileStatsEND
%token <iVal> ThirdCompositeSegmentProfileStatsSTART
%token <iVal> ThirdCompositeSegmentSymmetryDefinitionEND
%token <iVal> ThirdCompositeSegmentSymmetryDefinitionSTART
%token <iVal> ThirdCompositeSegmentSymmetryMeasurementEND
%token <iVal> ThirdCompositeSegmentSymmetryMeasurementSTART
%token <iVal> ThirdCompositeSegmentSymmetryStatsEND
%token <iVal> ThirdCompositeSegmentSymmetryStatsSTART
%token <iVal> ThisInstanceQPIdEND
%token <iVal> ThisInstanceQPIdSTART
%token <iVal> ThisResultsInstanceQPIdEND
%token <iVal> ThisResultsInstanceQPIdSTART
%token <iVal> ThisStatisticalStudyResultsInstanceQPIdEND
%token <iVal> ThisStatisticalStudyResultsInstanceQPIdSTART
%token <iVal> ThreadCharacteristicDefinitionEND
%token <iVal> ThreadCharacteristicDefinitionSTART
%token <iVal> ThreadCharacteristicItemEND
%token <iVal> ThreadCharacteristicItemSTART
%token <iVal> ThreadCharacteristicMeasurementEND
%token <iVal> ThreadCharacteristicMeasurementSTART
%token <iVal> ThreadCharacteristicNominalEND
%token <iVal> ThreadCharacteristicNominalSTART
%token <iVal> ThreadCharacteristicStatsEND
%token <iVal> ThreadCharacteristicStatsSTART
%token <iVal> ThreadClassEnumEND
%token <iVal> ThreadClassEnumSTART
%token <iVal> ThreadDensityEND
%token <iVal> ThreadDensitySTART
%token <iVal> ThreadLeadDistanceEND
%token <iVal> ThreadLeadDistanceSTART
%token <iVal> ThreadLeadStartsEND
%token <iVal> ThreadLeadStartsSTART
%token <iVal> ThreadLengthEngagementEND
%token <iVal> ThreadLengthEngagementSTART
%token <iVal> ThreadPitchEND
%token <iVal> ThreadPitchSTART
%token <iVal> ThreadSeriesEND
%token <iVal> ThreadSeriesSTART
%token <iVal> ThreadSeriesEnumEND
%token <iVal> ThreadSeriesEnumSTART
%token <iVal> ThreadSpecificationEND
%token <iVal> ThreadSpecificationSTART
%token <iVal> ThreadSpecificationIdEND
%token <iVal> ThreadSpecificationIdSTART
%token <iVal> ThreadSpecificationsEND
%token <iVal> ThreadSpecificationsSTART
%token <iVal> ThreadSpecificationsCountEND
%token <iVal> ThreadSpecificationsCountSTART
%token <iVal> ThreadStatsEND
%token <iVal> ThreadStatsSTART
%token <iVal> ThreadToleranceClassEND
%token <iVal> ThreadToleranceClassSTART
%token <iVal> ThreadedFeatureDefinitionEND
%token <iVal> ThreadedFeatureDefinitionSTART
%token <iVal> ThreadedFeatureItemEND
%token <iVal> ThreadedFeatureItemSTART
%token <iVal> ThreadedFeatureMeasurementEND
%token <iVal> ThreadedFeatureMeasurementSTART
%token <iVal> ThreadedFeatureNominalEND
%token <iVal> ThreadedFeatureNominalSTART
%token <iVal> ThroughEND
%token <iVal> ThroughSTART
%token <iVal> TimeAbsoluteLinearityEND
%token <iVal> TimeAbsoluteLinearitySTART
%token <iVal> TimeCreatedEND
%token <iVal> TimeCreatedSTART
%token <iVal> TimeCriterionEND
%token <iVal> TimeCriterionSTART
%token <iVal> TimeDescriptionEND
%token <iVal> TimeDescriptionSTART
%token <iVal> TimeDescriptionEnumEND
%token <iVal> TimeDescriptionEnumSTART
%token <iVal> TimeLimitEND
%token <iVal> TimeLimitSTART
%token <iVal> TimeMeasurementEND
%token <iVal> TimeMeasurementSTART
%token <iVal> TimeOccurredEND
%token <iVal> TimeOccurredSTART
%token <iVal> TimeStampEND
%token <iVal> TimeStampSTART
%token <iVal> TimeStampsEND
%token <iVal> TimeStampsSTART
%token <iVal> TimeStatsSummariesEND
%token <iVal> TimeStatsSummariesSTART
%token <iVal> TimeStatsSummaryEND
%token <iVal> TimeStatsSummarySTART
%token <iVal> TimeUnitEND
%token <iVal> TimeUnitSTART
%token <iVal> TimesEND
%token <iVal> TimesSTART
%token <iVal> TipEndDiameterEND
%token <iVal> TipEndDiameterSTART
%token <iVal> TipEndGeometryEND
%token <iVal> TipEndGeometrySTART
%token <iVal> TipEndGeometryEnumEND
%token <iVal> TipEndGeometryEnumSTART
%token <iVal> TipEndLocationEND
%token <iVal> TipEndLocationSTART
%token <iVal> TipEndMaterialEND
%token <iVal> TipEndMaterialSTART
%token <iVal> TipIdEND
%token <iVal> TipIdSTART
%token <iVal> TipIdsEND
%token <iVal> TipIdsSTART
%token <iVal> TitleEND
%token <iVal> TitleSTART
%token <iVal> ToCurveZoneIdEND
%token <iVal> ToCurveZoneIdSTART
%token <iVal> ToPointOuterDispositionEND
%token <iVal> ToPointOuterDispositionSTART
%token <iVal> ToPointToleranceValueEND
%token <iVal> ToPointToleranceValueSTART
%token <iVal> ToPointUnequallyDisposedZoneEND
%token <iVal> ToPointUnequallyDisposedZoneSTART
%token <iVal> ToPointZoneIdEND
%token <iVal> ToPointZoneIdSTART
%token <iVal> TokenConstantEND
%token <iVal> TokenConstantSTART
%token <iVal> TokenEqualEND
%token <iVal> TokenEqualSTART
%token <iVal> TokenParameterValueEND
%token <iVal> TokenParameterValueSTART
%token <iVal> ToleranceEND
%token <iVal> ToleranceSTART
%token <iVal> ToleranceDualValueEND
%token <iVal> ToleranceDualValueSTART
%token <iVal> ToleranceValueEND
%token <iVal> ToleranceValueSTART
%token <iVal> ToleranceValuePerUnitEND
%token <iVal> ToleranceValuePerUnitSTART
%token <iVal> ToleranceZonePerUnitAngleEND
%token <iVal> ToleranceZonePerUnitAngleSTART
%token <iVal> ToleranceZonePerUnitArcLengthEND
%token <iVal> ToleranceZonePerUnitArcLengthSTART
%token <iVal> ToleranceZonePerUnitAreaEND
%token <iVal> ToleranceZonePerUnitAreaSTART
%token <iVal> ToleranceZonePerUnitLengthEND
%token <iVal> ToleranceZonePerUnitLengthSTART
%token <iVal> ToleranceZonePerUnitPolarAreaEND
%token <iVal> ToleranceZonePerUnitPolarAreaSTART
%token <iVal> ToolIdsEND
%token <iVal> ToolIdsSTART
%token <iVal> ToolWithCCDCameraSensorEND
%token <iVal> ToolWithCCDCameraSensorSTART
%token <iVal> ToolWithCapacitiveSensorEND
%token <iVal> ToolWithCapacitiveSensorSTART
%token <iVal> ToolWithComplexTactileProbeSensorEND
%token <iVal> ToolWithComplexTactileProbeSensorSTART
%token <iVal> ToolWithConfocalChromaticSensorEND
%token <iVal> ToolWithConfocalChromaticSensorSTART
%token <iVal> ToolWithDVRTSensorEND
%token <iVal> ToolWithDVRTSensorSTART
%token <iVal> ToolWithDetachableSensorsEND
%token <iVal> ToolWithDetachableSensorsSTART
%token <iVal> ToolWithDrawWireSensorEND
%token <iVal> ToolWithDrawWireSensorSTART
%token <iVal> ToolWithEddyCurrentSensorEND
%token <iVal> ToolWithEddyCurrentSensorSTART
%token <iVal> ToolWithIntegratedSensorEND
%token <iVal> ToolWithIntegratedSensorSTART
%token <iVal> ToolWithLVDTSensorEND
%token <iVal> ToolWithLVDTSensorSTART
%token <iVal> ToolWithLaserTriangulationSensorEND
%token <iVal> ToolWithLaserTriangulationSensorSTART
%token <iVal> ToolWithMagnetoInductiveSensorEND
%token <iVal> ToolWithMagnetoInductiveSensorSTART
%token <iVal> ToolWithSimpleTactileProbeSensorEND
%token <iVal> ToolWithSimpleTactileProbeSensorSTART
%token <iVal> ToolWithStructuredLightSensorEND
%token <iVal> ToolWithStructuredLightSensorSTART
%token <iVal> ToolWithUltrasonicSensorEND
%token <iVal> ToolWithUltrasonicSensorSTART
%token <iVal> ToolingBallSpeedEND
%token <iVal> ToolingBallSpeedSTART
%token <iVal> ToolsEND
%token <iVal> ToolsSTART
%token <iVal> TopologyEND
%token <iVal> TopologySTART
%token <iVal> TopologySetEND
%token <iVal> TopologySetSTART
%token <iVal> ToroidalSegmentFeatureDefinitionEND
%token <iVal> ToroidalSegmentFeatureDefinitionSTART
%token <iVal> ToroidalSegmentFeatureItemEND
%token <iVal> ToroidalSegmentFeatureItemSTART
%token <iVal> ToroidalSegmentFeatureMeasurementEND
%token <iVal> ToroidalSegmentFeatureMeasurementSTART
%token <iVal> ToroidalSegmentFeatureNominalEND
%token <iVal> ToroidalSegmentFeatureNominalSTART
%token <iVal> ToroidicityCharacteristicDefinitionEND
%token <iVal> ToroidicityCharacteristicDefinitionSTART
%token <iVal> ToroidicityCharacteristicItemEND
%token <iVal> ToroidicityCharacteristicItemSTART
%token <iVal> ToroidicityCharacteristicMeasurementEND
%token <iVal> ToroidicityCharacteristicMeasurementSTART
%token <iVal> ToroidicityCharacteristicNominalEND
%token <iVal> ToroidicityCharacteristicNominalSTART
%token <iVal> ToroidicityCharacteristicStatsEND
%token <iVal> ToroidicityCharacteristicStatsSTART
%token <iVal> Torus23END
%token <iVal> Torus23START
%token <iVal> Torus23CoreEND
%token <iVal> Torus23CoreSTART
%token <iVal> TorusFeatureDefinitionEND
%token <iVal> TorusFeatureDefinitionSTART
%token <iVal> TorusFeatureItemEND
%token <iVal> TorusFeatureItemSTART
%token <iVal> TorusFeatureMeasurementEND
%token <iVal> TorusFeatureMeasurementSTART
%token <iVal> TorusFeatureNominalEND
%token <iVal> TorusFeatureNominalSTART
%token <iVal> TotalMagnificationEND
%token <iVal> TotalMagnificationSTART
%token <iVal> TotalNumberEND
%token <iVal> TotalNumberSTART
%token <iVal> TotalRunoutCharacteristicDefinitionEND
%token <iVal> TotalRunoutCharacteristicDefinitionSTART
%token <iVal> TotalRunoutCharacteristicItemEND
%token <iVal> TotalRunoutCharacteristicItemSTART
%token <iVal> TotalRunoutCharacteristicMeasurementEND
%token <iVal> TotalRunoutCharacteristicMeasurementSTART
%token <iVal> TotalRunoutCharacteristicNominalEND
%token <iVal> TotalRunoutCharacteristicNominalSTART
%token <iVal> TotalRunoutCharacteristicStatsEND
%token <iVal> TotalRunoutCharacteristicStatsSTART
%token <iVal> TotalVariationEND
%token <iVal> TotalVariationSTART
%token <iVal> TownEND
%token <iVal> TownSTART
%token <iVal> TraceabilityEND
%token <iVal> TraceabilitySTART
%token <iVal> TrailingZeroDimensionalCharacteristicDisplayGroupEND
%token <iVal> TrailingZeroDimensionalCharacteristicDisplayGroupSTART
%token <iVal> TrailingZeroDimensionalCharacteristicDisplayGroupsEND
%token <iVal> TrailingZeroDimensionalCharacteristicDisplayGroupsSTART
%token <iVal> TrailingZeroDisplayEND
%token <iVal> TrailingZeroDisplaySTART
%token <iVal> TrailingZeroGeometricCharacteristicDisplayGroupEND
%token <iVal> TrailingZeroGeometricCharacteristicDisplayGroupSTART
%token <iVal> TrailingZeroGeometricCharacteristicDisplayGroupsEND
%token <iVal> TrailingZeroGeometricCharacteristicDisplayGroupsSTART
%token <iVal> TranformIdEND
%token <iVal> TranformIdSTART
%token <iVal> TransformEND
%token <iVal> TransformSTART
%token <iVal> TransformIdEND
%token <iVal> TransformIdSTART
%token <iVal> TransformationEND
%token <iVal> TransformationSTART
%token <iVal> TransformsEND
%token <iVal> TransformsSTART
%token <iVal> TransformsCountEND
%token <iVal> TransformsCountSTART
%token <iVal> TranslateEND
%token <iVal> TranslateSTART
%token <iVal> TransparencyEND
%token <iVal> TransparencySTART
%token <iVal> TrendGroupingEND
%token <iVal> TrendGroupingSTART
%token <iVal> TrianglesEND
%token <iVal> TrianglesSTART
%token <iVal> TrianglesBinaryEND
%token <iVal> TrianglesBinarySTART
%token <iVal> TrianglesColorEND
%token <iVal> TrianglesColorSTART
%token <iVal> TrianglesColorBinaryEND
%token <iVal> TrianglesColorBinarySTART
%token <iVal> TrianglesHiddenEND
%token <iVal> TrianglesHiddenSTART
%token <iVal> TrianglesHiddenBinaryEND
%token <iVal> TrianglesHiddenBinarySTART
%token <iVal> TrianglesVisibleEND
%token <iVal> TrianglesVisibleSTART
%token <iVal> TrianglesVisibleBinaryEND
%token <iVal> TrianglesVisibleBinarySTART
%token <iVal> TriangulationEND
%token <iVal> TriangulationSTART
%token <iVal> TwiceStandardDeviationEND
%token <iVal> TwiceStandardDeviationSTART
%token <iVal> TwiceStandardDeviationFarEND
%token <iVal> TwiceStandardDeviationFarSTART
%token <iVal> TwiceStandardDeviationMiddleEND
%token <iVal> TwiceStandardDeviationMiddleSTART
%token <iVal> TwiceStandardDeviationNearEND
%token <iVal> TwiceStandardDeviationNearSTART
%token <iVal> TwoThirdsGroupingEND
%token <iVal> TwoThirdsGroupingSTART
%token <iVal> TypeEND
%token <iVal> TypeSTART
%token <iVal> TypeOfCoordinatesEND
%token <iVal> TypeOfCoordinatesSTART
%token <iVal> TypeOfLinearVariableDifferentialTransformerEND
%token <iVal> TypeOfLinearVariableDifferentialTransformerSTART
%token <iVal> TypeOfScaleEND
%token <iVal> TypeOfScaleSTART
%token <iVal> TypeOfScaleEnumEND
%token <iVal> TypeOfScaleEnumSTART
%token <iVal> TypeOfSummaryEND
%token <iVal> TypeOfSummarySTART
%token <iVal> TypeOfTestEND
%token <iVal> TypeOfTestSTART
%token <iVal> URIEND
%token <iVal> URISTART
%token <iVal> UUIDEND
%token <iVal> UUIDSTART
%token <iVal> UltimateTensileStressEND
%token <iVal> UltimateTensileStressSTART
%token <iVal> UltrasonicSensorEND
%token <iVal> UltrasonicSensorSTART
%token <iVal> UnEqualLegLengthEND
%token <iVal> UnEqualLegLengthSTART
%token <iVal> UnequallyDisposedZoneEND
%token <iVal> UnequallyDisposedZoneSTART
%token <iVal> UniformScaleEND
%token <iVal> UniformScaleSTART
%token <iVal> UnitAngleEND
%token <iVal> UnitAngleSTART
%token <iVal> UnitConversionEND
%token <iVal> UnitConversionSTART
%token <iVal> UnitLengthEND
%token <iVal> UnitLengthSTART
%token <iVal> UnitNameEND
%token <iVal> UnitNameSTART
%token <iVal> UnitedOrContinuousFeatureEND
%token <iVal> UnitedOrContinuousFeatureSTART
%token <iVal> UnitsEND
%token <iVal> UnitsSTART
%token <iVal> UniversalLengthMeasureFeatureMethodEND
%token <iVal> UniversalLengthMeasureFeatureMethodSTART
%token <iVal> UniversalLengthMeasuringEND
%token <iVal> UniversalLengthMeasuringSTART
%token <iVal> UnorderedActionGroupEND
%token <iVal> UnorderedActionGroupSTART
%token <iVal> UnorderedPlanRootEND
%token <iVal> UnorderedPlanRootSTART
%token <iVal> UpperConfidenceLimitEND
%token <iVal> UpperConfidenceLimitSTART
%token <iVal> UpperControlLimitEND
%token <iVal> UpperControlLimitSTART
%token <iVal> UpperControlLimitRangeEND
%token <iVal> UpperControlLimitRangeSTART
%token <iVal> UpperPointEND
%token <iVal> UpperPointSTART
%token <iVal> UserDataBinaryEND
%token <iVal> UserDataBinarySTART
%token <iVal> UserDataXMLEND
%token <iVal> UserDataXMLSTART
%token <iVal> UserDefinedAngularCharacteristicDefinitionEND
%token <iVal> UserDefinedAngularCharacteristicDefinitionSTART
%token <iVal> UserDefinedAngularCharacteristicItemEND
%token <iVal> UserDefinedAngularCharacteristicItemSTART
%token <iVal> UserDefinedAngularCharacteristicMeasurementEND
%token <iVal> UserDefinedAngularCharacteristicMeasurementSTART
%token <iVal> UserDefinedAngularCharacteristicNominalEND
%token <iVal> UserDefinedAngularCharacteristicNominalSTART
%token <iVal> UserDefinedAngularCharacteristicStatsEND
%token <iVal> UserDefinedAngularCharacteristicStatsSTART
%token <iVal> UserDefinedAreaCharacteristicDefinitionEND
%token <iVal> UserDefinedAreaCharacteristicDefinitionSTART
%token <iVal> UserDefinedAreaCharacteristicItemEND
%token <iVal> UserDefinedAreaCharacteristicItemSTART
%token <iVal> UserDefinedAreaCharacteristicMeasurementEND
%token <iVal> UserDefinedAreaCharacteristicMeasurementSTART
%token <iVal> UserDefinedAreaCharacteristicNominalEND
%token <iVal> UserDefinedAreaCharacteristicNominalSTART
%token <iVal> UserDefinedAreaCharacteristicStatsEND
%token <iVal> UserDefinedAreaCharacteristicStatsSTART
%token <iVal> UserDefinedAttributeCharacteristicDefinitionEND
%token <iVal> UserDefinedAttributeCharacteristicDefinitionSTART
%token <iVal> UserDefinedAttributeCharacteristicItemEND
%token <iVal> UserDefinedAttributeCharacteristicItemSTART
%token <iVal> UserDefinedAttributeCharacteristicMeasurementEND
%token <iVal> UserDefinedAttributeCharacteristicMeasurementSTART
%token <iVal> UserDefinedAttributeCharacteristicNominalEND
%token <iVal> UserDefinedAttributeCharacteristicNominalSTART
%token <iVal> UserDefinedAttributeCharacteristicStatsEND
%token <iVal> UserDefinedAttributeCharacteristicStatsSTART
%token <iVal> UserDefinedForceCharacteristicDefinitionEND
%token <iVal> UserDefinedForceCharacteristicDefinitionSTART
%token <iVal> UserDefinedForceCharacteristicItemEND
%token <iVal> UserDefinedForceCharacteristicItemSTART
%token <iVal> UserDefinedForceCharacteristicMeasurementEND
%token <iVal> UserDefinedForceCharacteristicMeasurementSTART
%token <iVal> UserDefinedForceCharacteristicNominalEND
%token <iVal> UserDefinedForceCharacteristicNominalSTART
%token <iVal> UserDefinedForceCharacteristicStatsEND
%token <iVal> UserDefinedForceCharacteristicStatsSTART
%token <iVal> UserDefinedLinearCharacteristicDefinitionEND
%token <iVal> UserDefinedLinearCharacteristicDefinitionSTART
%token <iVal> UserDefinedLinearCharacteristicItemEND
%token <iVal> UserDefinedLinearCharacteristicItemSTART
%token <iVal> UserDefinedLinearCharacteristicMeasurementEND
%token <iVal> UserDefinedLinearCharacteristicMeasurementSTART
%token <iVal> UserDefinedLinearCharacteristicNominalEND
%token <iVal> UserDefinedLinearCharacteristicNominalSTART
%token <iVal> UserDefinedLinearCharacteristicStatsEND
%token <iVal> UserDefinedLinearCharacteristicStatsSTART
%token <iVal> UserDefinedMassCharacteristicDefinitionEND
%token <iVal> UserDefinedMassCharacteristicDefinitionSTART
%token <iVal> UserDefinedMassCharacteristicItemEND
%token <iVal> UserDefinedMassCharacteristicItemSTART
%token <iVal> UserDefinedMassCharacteristicMeasurementEND
%token <iVal> UserDefinedMassCharacteristicMeasurementSTART
%token <iVal> UserDefinedMassCharacteristicNominalEND
%token <iVal> UserDefinedMassCharacteristicNominalSTART
%token <iVal> UserDefinedMassCharacteristicStatsEND
%token <iVal> UserDefinedMassCharacteristicStatsSTART
%token <iVal> UserDefinedPressureCharacteristicDefinitionEND
%token <iVal> UserDefinedPressureCharacteristicDefinitionSTART
%token <iVal> UserDefinedPressureCharacteristicItemEND
%token <iVal> UserDefinedPressureCharacteristicItemSTART
%token <iVal> UserDefinedPressureCharacteristicMeasurementEND
%token <iVal> UserDefinedPressureCharacteristicMeasurementSTART
%token <iVal> UserDefinedPressureCharacteristicNominalEND
%token <iVal> UserDefinedPressureCharacteristicNominalSTART
%token <iVal> UserDefinedPressureCharacteristicStatsEND
%token <iVal> UserDefinedPressureCharacteristicStatsSTART
%token <iVal> UserDefinedResolutionEND
%token <iVal> UserDefinedResolutionSTART
%token <iVal> UserDefinedSpeedCharacteristicDefinitionEND
%token <iVal> UserDefinedSpeedCharacteristicDefinitionSTART
%token <iVal> UserDefinedSpeedCharacteristicItemEND
%token <iVal> UserDefinedSpeedCharacteristicItemSTART
%token <iVal> UserDefinedSpeedCharacteristicMeasurementEND
%token <iVal> UserDefinedSpeedCharacteristicMeasurementSTART
%token <iVal> UserDefinedSpeedCharacteristicNominalEND
%token <iVal> UserDefinedSpeedCharacteristicNominalSTART
%token <iVal> UserDefinedSpeedCharacteristicStatsEND
%token <iVal> UserDefinedSpeedCharacteristicStatsSTART
%token <iVal> UserDefinedStrategyEND
%token <iVal> UserDefinedStrategySTART
%token <iVal> UserDefinedTemperatureCharacteristicDefinitionEND
%token <iVal> UserDefinedTemperatureCharacteristicDefinitionSTART
%token <iVal> UserDefinedTemperatureCharacteristicItemEND
%token <iVal> UserDefinedTemperatureCharacteristicItemSTART
%token <iVal> UserDefinedTemperatureCharacteristicMeasurementEND
%token <iVal> UserDefinedTemperatureCharacteristicMeasurementSTART
%token <iVal> UserDefinedTemperatureCharacteristicNominalEND
%token <iVal> UserDefinedTemperatureCharacteristicNominalSTART
%token <iVal> UserDefinedTemperatureCharacteristicStatsEND
%token <iVal> UserDefinedTemperatureCharacteristicStatsSTART
%token <iVal> UserDefinedTimeCharacteristicDefinitionEND
%token <iVal> UserDefinedTimeCharacteristicDefinitionSTART
%token <iVal> UserDefinedTimeCharacteristicItemEND
%token <iVal> UserDefinedTimeCharacteristicItemSTART
%token <iVal> UserDefinedTimeCharacteristicMeasurementEND
%token <iVal> UserDefinedTimeCharacteristicMeasurementSTART
%token <iVal> UserDefinedTimeCharacteristicNominalEND
%token <iVal> UserDefinedTimeCharacteristicNominalSTART
%token <iVal> UserDefinedTimeCharacteristicStatsEND
%token <iVal> UserDefinedTimeCharacteristicStatsSTART
%token <iVal> UserDefinedUnitEND
%token <iVal> UserDefinedUnitSTART
%token <iVal> UserDefinedUnitAbsoluteLinearityEND
%token <iVal> UserDefinedUnitAbsoluteLinearitySTART
%token <iVal> UserDefinedUnitCharacteristicDefinitionEND
%token <iVal> UserDefinedUnitCharacteristicDefinitionSTART
%token <iVal> UserDefinedUnitCharacteristicItemEND
%token <iVal> UserDefinedUnitCharacteristicItemSTART
%token <iVal> UserDefinedUnitCharacteristicMeasurementEND
%token <iVal> UserDefinedUnitCharacteristicMeasurementSTART
%token <iVal> UserDefinedUnitCharacteristicNominalEND
%token <iVal> UserDefinedUnitCharacteristicNominalSTART
%token <iVal> UserDefinedUnitCharacteristicStatsEND
%token <iVal> UserDefinedUnitCharacteristicStatsSTART
%token <iVal> UserDefinedUnitCriterionEND
%token <iVal> UserDefinedUnitCriterionSTART
%token <iVal> UserDefinedUnitLimitEND
%token <iVal> UserDefinedUnitLimitSTART
%token <iVal> UserDefinedUnitMeasurementEND
%token <iVal> UserDefinedUnitMeasurementSTART
%token <iVal> UserDefinedUnitStatsSummariesEND
%token <iVal> UserDefinedUnitStatsSummariesSTART
%token <iVal> UserDefinedUnitStatsSummaryEND
%token <iVal> UserDefinedUnitStatsSummarySTART
%token <iVal> UserDefinedUnitsEND
%token <iVal> UserDefinedUnitsSTART
%token <iVal> UserDefinedWorkingVolumeEND
%token <iVal> UserDefinedWorkingVolumeSTART
%token <iVal> UserDefinedWorkingVolumeIdEND
%token <iVal> UserDefinedWorkingVolumeIdSTART
%token <iVal> ValEND
%token <iVal> ValSTART
%token <iVal> ValidationEND
%token <iVal> ValidationSTART
%token <iVal> ValidationCountsEND
%token <iVal> ValidationCountsSTART
%token <iVal> ValueEND
%token <iVal> ValueSTART
%token <iVal> ValueStatsEND
%token <iVal> ValueStatsSTART
%token <iVal> ValuesEND
%token <iVal> ValuesSTART
%token <iVal> VariableEND
%token <iVal> VariableSTART
%token <iVal> VariableAngleEND
%token <iVal> VariableAngleSTART
%token <iVal> VariableNameEND
%token <iVal> VariableNameSTART
%token <iVal> VariableSetEND
%token <iVal> VariableSetSTART
%token <iVal> VariableValueEND
%token <iVal> VariableValueSTART
%token <iVal> VectorEND
%token <iVal> VectorSTART
%token <iVal> VendorNameEND
%token <iVal> VendorNameSTART
%token <iVal> VersionEND
%token <iVal> VersionSTART
%token <iVal> VersionHistoryEND
%token <iVal> VersionHistorySTART
%token <iVal> VertexEND
%token <iVal> VertexSTART
%token <iVal> VertexBegEND
%token <iVal> VertexBegSTART
%token <iVal> VertexEndEND
%token <iVal> VertexEndSTART
%token <iVal> VertexIdEND
%token <iVal> VertexIdSTART
%token <iVal> VertexIdsEND
%token <iVal> VertexIdsSTART
%token <iVal> VertexSetEND
%token <iVal> VertexSetSTART
%token <iVal> VerticalFieldOfViewEND
%token <iVal> VerticalFieldOfViewSTART
%token <iVal> VerticesEND
%token <iVal> VerticesSTART
%token <iVal> VerticesBinaryEND
%token <iVal> VerticesBinarySTART
%token <iVal> VibrationToleranceEND
%token <iVal> VibrationToleranceSTART
%token <iVal> VideoInstructionEND
%token <iVal> VideoInstructionSTART
%token <iVal> ViewEND
%token <iVal> ViewSTART
%token <iVal> ViewIdEND
%token <iVal> ViewIdSTART
%token <iVal> ViewIdsEND
%token <iVal> ViewIdsSTART
%token <iVal> ViewPlaneOriginEND
%token <iVal> ViewPlaneOriginSTART
%token <iVal> ViewSetEND
%token <iVal> ViewSetSTART
%token <iVal> VirtualMeasurementEND
%token <iVal> VirtualMeasurementSTART
%token <iVal> VisualizationSetEND
%token <iVal> VisualizationSetSTART
%token <iVal> VolumeEND
%token <iVal> VolumeSTART
%token <iVal> VolumetricPerformanceEND
%token <iVal> VolumetricPerformanceSTART
%token <iVal> VolumetricPerformanceTestEND
%token <iVal> VolumetricPerformanceTestSTART
%token <iVal> VolumetricUncertaintyEND
%token <iVal> VolumetricUncertaintySTART
%token <iVal> WeightsEND
%token <iVal> WeightsSTART
%token <iVal> WeldBevelCharacteristicDefinitionEND
%token <iVal> WeldBevelCharacteristicDefinitionSTART
%token <iVal> WeldBevelCharacteristicItemEND
%token <iVal> WeldBevelCharacteristicItemSTART
%token <iVal> WeldBevelCharacteristicMeasurementEND
%token <iVal> WeldBevelCharacteristicMeasurementSTART
%token <iVal> WeldBevelCharacteristicNominalEND
%token <iVal> WeldBevelCharacteristicNominalSTART
%token <iVal> WeldBevelCharacteristicStatsEND
%token <iVal> WeldBevelCharacteristicStatsSTART
%token <iVal> WeldCharacteristicDefinitionIdsEND
%token <iVal> WeldCharacteristicDefinitionIdsSTART
%token <iVal> WeldCharacteristicItemIdsEND
%token <iVal> WeldCharacteristicItemIdsSTART
%token <iVal> WeldCharacteristicMeasurementIdsEND
%token <iVal> WeldCharacteristicMeasurementIdsSTART
%token <iVal> WeldCharacteristicNominalIdsEND
%token <iVal> WeldCharacteristicNominalIdsSTART
%token <iVal> WeldCompoundCharacteristicDefinitionEND
%token <iVal> WeldCompoundCharacteristicDefinitionSTART
%token <iVal> WeldCompoundCharacteristicItemEND
%token <iVal> WeldCompoundCharacteristicItemSTART
%token <iVal> WeldCompoundCharacteristicMeasurementEND
%token <iVal> WeldCompoundCharacteristicMeasurementSTART
%token <iVal> WeldCompoundCharacteristicNominalEND
%token <iVal> WeldCompoundCharacteristicNominalSTART
%token <iVal> WeldCompoundCharacteristicStatsEND
%token <iVal> WeldCompoundCharacteristicStatsSTART
%token <iVal> WeldEdgeCharacteristicDefinitionEND
%token <iVal> WeldEdgeCharacteristicDefinitionSTART
%token <iVal> WeldEdgeCharacteristicItemEND
%token <iVal> WeldEdgeCharacteristicItemSTART
%token <iVal> WeldEdgeCharacteristicMeasurementEND
%token <iVal> WeldEdgeCharacteristicMeasurementSTART
%token <iVal> WeldEdgeCharacteristicNominalEND
%token <iVal> WeldEdgeCharacteristicNominalSTART
%token <iVal> WeldEdgeCharacteristicStatsEND
%token <iVal> WeldEdgeCharacteristicStatsSTART
%token <iVal> WeldFilletCharacteristicDefinitionEND
%token <iVal> WeldFilletCharacteristicDefinitionSTART
%token <iVal> WeldFilletCharacteristicItemEND
%token <iVal> WeldFilletCharacteristicItemSTART
%token <iVal> WeldFilletCharacteristicMeasurementEND
%token <iVal> WeldFilletCharacteristicMeasurementSTART
%token <iVal> WeldFilletCharacteristicNominalEND
%token <iVal> WeldFilletCharacteristicNominalSTART
%token <iVal> WeldFilletCharacteristicStatsEND
%token <iVal> WeldFilletCharacteristicStatsSTART
%token <iVal> WeldFlareBevelCharacteristicDefinitionEND
%token <iVal> WeldFlareBevelCharacteristicDefinitionSTART
%token <iVal> WeldFlareBevelCharacteristicItemEND
%token <iVal> WeldFlareBevelCharacteristicItemSTART
%token <iVal> WeldFlareBevelCharacteristicMeasurementEND
%token <iVal> WeldFlareBevelCharacteristicMeasurementSTART
%token <iVal> WeldFlareBevelCharacteristicNominalEND
%token <iVal> WeldFlareBevelCharacteristicNominalSTART
%token <iVal> WeldFlareBevelCharacteristicStatsEND
%token <iVal> WeldFlareBevelCharacteristicStatsSTART
%token <iVal> WeldFlareVCharacteristicDefinitionEND
%token <iVal> WeldFlareVCharacteristicDefinitionSTART
%token <iVal> WeldFlareVCharacteristicItemEND
%token <iVal> WeldFlareVCharacteristicItemSTART
%token <iVal> WeldFlareVCharacteristicMeasurementEND
%token <iVal> WeldFlareVCharacteristicMeasurementSTART
%token <iVal> WeldFlareVCharacteristicNominalEND
%token <iVal> WeldFlareVCharacteristicNominalSTART
%token <iVal> WeldFlareVCharacteristicStatsEND
%token <iVal> WeldFlareVCharacteristicStatsSTART
%token <iVal> WeldJCharacteristicDefinitionEND
%token <iVal> WeldJCharacteristicDefinitionSTART
%token <iVal> WeldJCharacteristicItemEND
%token <iVal> WeldJCharacteristicItemSTART
%token <iVal> WeldJCharacteristicMeasurementEND
%token <iVal> WeldJCharacteristicMeasurementSTART
%token <iVal> WeldJCharacteristicNominalEND
%token <iVal> WeldJCharacteristicNominalSTART
%token <iVal> WeldJCharacteristicStatsEND
%token <iVal> WeldJCharacteristicStatsSTART
%token <iVal> WeldNumberEND
%token <iVal> WeldNumberSTART
%token <iVal> WeldPlugCharacteristicDefinitionEND
%token <iVal> WeldPlugCharacteristicDefinitionSTART
%token <iVal> WeldPlugCharacteristicItemEND
%token <iVal> WeldPlugCharacteristicItemSTART
%token <iVal> WeldPlugCharacteristicMeasurementEND
%token <iVal> WeldPlugCharacteristicMeasurementSTART
%token <iVal> WeldPlugCharacteristicNominalEND
%token <iVal> WeldPlugCharacteristicNominalSTART
%token <iVal> WeldPlugCharacteristicStatsEND
%token <iVal> WeldPlugCharacteristicStatsSTART
%token <iVal> WeldScarfCharacteristicDefinitionEND
%token <iVal> WeldScarfCharacteristicDefinitionSTART
%token <iVal> WeldScarfCharacteristicItemEND
%token <iVal> WeldScarfCharacteristicItemSTART
%token <iVal> WeldScarfCharacteristicMeasurementEND
%token <iVal> WeldScarfCharacteristicMeasurementSTART
%token <iVal> WeldScarfCharacteristicNominalEND
%token <iVal> WeldScarfCharacteristicNominalSTART
%token <iVal> WeldScarfCharacteristicStatsEND
%token <iVal> WeldScarfCharacteristicStatsSTART
%token <iVal> WeldSeamCharacteristicDefinitionEND
%token <iVal> WeldSeamCharacteristicDefinitionSTART
%token <iVal> WeldSeamCharacteristicItemEND
%token <iVal> WeldSeamCharacteristicItemSTART
%token <iVal> WeldSeamCharacteristicMeasurementEND
%token <iVal> WeldSeamCharacteristicMeasurementSTART
%token <iVal> WeldSeamCharacteristicNominalEND
%token <iVal> WeldSeamCharacteristicNominalSTART
%token <iVal> WeldSeamCharacteristicStatsEND
%token <iVal> WeldSeamCharacteristicStatsSTART
%token <iVal> WeldSlotCharacteristicDefinitionEND
%token <iVal> WeldSlotCharacteristicDefinitionSTART
%token <iVal> WeldSlotCharacteristicItemEND
%token <iVal> WeldSlotCharacteristicItemSTART
%token <iVal> WeldSlotCharacteristicMeasurementEND
%token <iVal> WeldSlotCharacteristicMeasurementSTART
%token <iVal> WeldSlotCharacteristicNominalEND
%token <iVal> WeldSlotCharacteristicNominalSTART
%token <iVal> WeldSlotCharacteristicStatsEND
%token <iVal> WeldSlotCharacteristicStatsSTART
%token <iVal> WeldSpotCharacteristicDefinitionEND
%token <iVal> WeldSpotCharacteristicDefinitionSTART
%token <iVal> WeldSpotCharacteristicItemEND
%token <iVal> WeldSpotCharacteristicItemSTART
%token <iVal> WeldSpotCharacteristicMeasurementEND
%token <iVal> WeldSpotCharacteristicMeasurementSTART
%token <iVal> WeldSpotCharacteristicNominalEND
%token <iVal> WeldSpotCharacteristicNominalSTART
%token <iVal> WeldSpotCharacteristicStatsEND
%token <iVal> WeldSpotCharacteristicStatsSTART
%token <iVal> WeldSquareCharacteristicDefinitionEND
%token <iVal> WeldSquareCharacteristicDefinitionSTART
%token <iVal> WeldSquareCharacteristicItemEND
%token <iVal> WeldSquareCharacteristicItemSTART
%token <iVal> WeldSquareCharacteristicMeasurementEND
%token <iVal> WeldSquareCharacteristicMeasurementSTART
%token <iVal> WeldSquareCharacteristicNominalEND
%token <iVal> WeldSquareCharacteristicNominalSTART
%token <iVal> WeldSquareCharacteristicStatsEND
%token <iVal> WeldSquareCharacteristicStatsSTART
%token <iVal> WeldStatsEND
%token <iVal> WeldStatsSTART
%token <iVal> WeldStudCharacteristicDefinitionEND
%token <iVal> WeldStudCharacteristicDefinitionSTART
%token <iVal> WeldStudCharacteristicItemEND
%token <iVal> WeldStudCharacteristicItemSTART
%token <iVal> WeldStudCharacteristicMeasurementEND
%token <iVal> WeldStudCharacteristicMeasurementSTART
%token <iVal> WeldStudCharacteristicNominalEND
%token <iVal> WeldStudCharacteristicNominalSTART
%token <iVal> WeldStudCharacteristicStatsEND
%token <iVal> WeldStudCharacteristicStatsSTART
%token <iVal> WeldSurfacingCharacteristicDefinitionEND
%token <iVal> WeldSurfacingCharacteristicDefinitionSTART
%token <iVal> WeldSurfacingCharacteristicItemEND
%token <iVal> WeldSurfacingCharacteristicItemSTART
%token <iVal> WeldSurfacingCharacteristicMeasurementEND
%token <iVal> WeldSurfacingCharacteristicMeasurementSTART
%token <iVal> WeldSurfacingCharacteristicNominalEND
%token <iVal> WeldSurfacingCharacteristicNominalSTART
%token <iVal> WeldSurfacingCharacteristicStatsEND
%token <iVal> WeldSurfacingCharacteristicStatsSTART
%token <iVal> WeldSymbolSetCountEND
%token <iVal> WeldSymbolSetCountSTART
%token <iVal> WeldUCharacteristicDefinitionEND
%token <iVal> WeldUCharacteristicDefinitionSTART
%token <iVal> WeldUCharacteristicItemEND
%token <iVal> WeldUCharacteristicItemSTART
%token <iVal> WeldUCharacteristicMeasurementEND
%token <iVal> WeldUCharacteristicMeasurementSTART
%token <iVal> WeldUCharacteristicNominalEND
%token <iVal> WeldUCharacteristicNominalSTART
%token <iVal> WeldUCharacteristicStatsEND
%token <iVal> WeldUCharacteristicStatsSTART
%token <iVal> WeldVCharacteristicDefinitionEND
%token <iVal> WeldVCharacteristicDefinitionSTART
%token <iVal> WeldVCharacteristicItemEND
%token <iVal> WeldVCharacteristicItemSTART
%token <iVal> WeldVCharacteristicMeasurementEND
%token <iVal> WeldVCharacteristicMeasurementSTART
%token <iVal> WeldVCharacteristicNominalEND
%token <iVal> WeldVCharacteristicNominalSTART
%token <iVal> WeldVCharacteristicStatsEND
%token <iVal> WeldVCharacteristicStatsSTART
%token <iVal> WeldingProcessEND
%token <iVal> WeldingProcessSTART
%token <iVal> WhatIsMeasuredEND
%token <iVal> WhatIsMeasuredSTART
%token <iVal> WhatToMeasureEND
%token <iVal> WhatToMeasureSTART
%token <iVal> WhileActionGroupEND
%token <iVal> WhileActionGroupSTART
%token <iVal> WholePointSetIdEND
%token <iVal> WholePointSetIdSTART
%token <iVal> WidthEND
%token <iVal> WidthSTART
%token <iVal> WidthCharacteristicDefinitionEND
%token <iVal> WidthCharacteristicDefinitionSTART
%token <iVal> WidthCharacteristicItemEND
%token <iVal> WidthCharacteristicItemSTART
%token <iVal> WidthCharacteristicMeasurementEND
%token <iVal> WidthCharacteristicMeasurementSTART
%token <iVal> WidthCharacteristicNominalEND
%token <iVal> WidthCharacteristicNominalSTART
%token <iVal> WidthCharacteristicStatsEND
%token <iVal> WidthCharacteristicStatsSTART
%token <iVal> WidthDirectionEND
%token <iVal> WidthDirectionSTART
%token <iVal> WidthMaxEND
%token <iVal> WidthMaxSTART
%token <iVal> WidthMinEND
%token <iVal> WidthMinSTART
%token <iVal> WitnessLinesEND
%token <iVal> WitnessLinesSTART
%token <iVal> WorkInstructionIdsEND
%token <iVal> WorkInstructionIdsSTART
%token <iVal> WorkInstructionsEND
%token <iVal> WorkInstructionsSTART
%token <iVal> WorkingClosedShellSetEND
%token <iVal> WorkingClosedShellSetSTART
%token <iVal> WorkingDistanceEND
%token <iVal> WorkingDistanceSTART
%token <iVal> WorstNegativeDeviationEND
%token <iVal> WorstNegativeDeviationSTART
%token <iVal> WorstNegativeDeviationStatsEND
%token <iVal> WorstNegativeDeviationStatsSTART
%token <iVal> WorstPositiveDeviationEND
%token <iVal> WorstPositiveDeviationSTART
%token <iVal> WorstPositiveDeviationStatsEND
%token <iVal> WorstPositiveDeviationStatsSTART
%token <iVal> XEND
%token <iVal> XSTART
%token <iVal> XAxisDirectionEND
%token <iVal> XAxisDirectionSTART
%token <iVal> XAxisLengthEND
%token <iVal> XAxisLengthSTART
%token <iVal> XAxisPitchEND
%token <iVal> XAxisPitchSTART
%token <iVal> XAxisRollEND
%token <iVal> XAxisRollSTART
%token <iVal> XAxisStraightnessYEND
%token <iVal> XAxisStraightnessYSTART
%token <iVal> XAxisStraightnessZEND
%token <iVal> XAxisStraightnessZSTART
%token <iVal> XAxisYawEND
%token <iVal> XAxisYawSTART
%token <iVal> XDirectionEND
%token <iVal> XDirectionSTART
%token <iVal> XIdsEND
%token <iVal> XIdsSTART
%token <iVal> XLinearAccuracyEND
%token <iVal> XLinearAccuracySTART
%token <iVal> XLinearityEND
%token <iVal> XLinearitySTART
%token <iVal> XResolutionEND
%token <iVal> XResolutionSTART
%token <iVal> XScaleEND
%token <iVal> XScaleSTART
%token <iVal> XScaleFactorEND
%token <iVal> XScaleFactorSTART
%token <iVal> XStiffnessEND
%token <iVal> XStiffnessSTART
%token <iVal> XYEND
%token <iVal> XYSTART
%token <iVal> XYSquarenessEND
%token <iVal> XYSquarenessSTART
%token <iVal> XYZEND
%token <iVal> XYZSTART
%token <iVal> XYZResolutionEND
%token <iVal> XYZResolutionSTART
%token <iVal> XZSquarenessEND
%token <iVal> XZSquarenessSTART
%token <iVal> XaxisEND
%token <iVal> XaxisSTART
%token <iVal> XaxisDirectionEND
%token <iVal> XaxisDirectionSTART
%token <iVal> XsltFileEND
%token <iVal> XsltFileSTART
%token <iVal> YEND
%token <iVal> YSTART
%token <iVal> YAxisDirectionEND
%token <iVal> YAxisDirectionSTART
%token <iVal> YAxisLengthEND
%token <iVal> YAxisLengthSTART
%token <iVal> YAxisPitchEND
%token <iVal> YAxisPitchSTART
%token <iVal> YAxisRollEND
%token <iVal> YAxisRollSTART
%token <iVal> YAxisStraightnessXEND
%token <iVal> YAxisStraightnessXSTART
%token <iVal> YAxisStraightnessZEND
%token <iVal> YAxisStraightnessZSTART
%token <iVal> YAxisYawEND
%token <iVal> YAxisYawSTART
%token <iVal> YDirectionEND
%token <iVal> YDirectionSTART
%token <iVal> YLinearAccuracyEND
%token <iVal> YLinearAccuracySTART
%token <iVal> YLinearityEND
%token <iVal> YLinearitySTART
%token <iVal> YResolutionEND
%token <iVal> YResolutionSTART
%token <iVal> YScaleEND
%token <iVal> YScaleSTART
%token <iVal> YScaleFactorEND
%token <iVal> YScaleFactorSTART
%token <iVal> YStiffnessEND
%token <iVal> YStiffnessSTART
%token <iVal> YZSquarenessEND
%token <iVal> YZSquarenessSTART
%token <iVal> YaxisEND
%token <iVal> YaxisSTART
%token <iVal> YaxisDirectionEND
%token <iVal> YaxisDirectionSTART
%token <iVal> YearEND
%token <iVal> YearSTART
%token <iVal> YoungsModulusEND
%token <iVal> YoungsModulusSTART
%token <iVal> ZEND
%token <iVal> ZSTART
%token <iVal> ZAxisDirectionEND
%token <iVal> ZAxisDirectionSTART
%token <iVal> ZAxisLengthEND
%token <iVal> ZAxisLengthSTART
%token <iVal> ZAxisPitchEND
%token <iVal> ZAxisPitchSTART
%token <iVal> ZAxisRollEND
%token <iVal> ZAxisRollSTART
%token <iVal> ZAxisStraightnessXEND
%token <iVal> ZAxisStraightnessXSTART
%token <iVal> ZAxisStraightnessYEND
%token <iVal> ZAxisStraightnessYSTART
%token <iVal> ZAxisYawEND
%token <iVal> ZAxisYawSTART
%token <iVal> ZDirectionEND
%token <iVal> ZDirectionSTART
%token <iVal> ZLinearAccuracyEND
%token <iVal> ZLinearAccuracySTART
%token <iVal> ZLinearityEND
%token <iVal> ZLinearitySTART
%token <iVal> ZResolutionEND
%token <iVal> ZResolutionSTART
%token <iVal> ZScaleEND
%token <iVal> ZScaleSTART
%token <iVal> ZScaleFactorEND
%token <iVal> ZScaleFactorSTART
%token <iVal> ZStiffnessEND
%token <iVal> ZStiffnessSTART
%token <iVal> ZaxisEND
%token <iVal> ZaxisSTART
%token <iVal> ZaxisDirectionEND
%token <iVal> ZaxisDirectionSTART
%token <iVal> ZeroIndexDirectionEND
%token <iVal> ZeroIndexDirectionSTART
%token <iVal> ZextensionPoint1END
%token <iVal> ZextensionPoint1START
%token <iVal> ZextensionPoint2END
%token <iVal> ZextensionPoint2START
%token <iVal> ZoneAxisEND
%token <iVal> ZoneAxisSTART
%token <iVal> ZoneDataEND
%token <iVal> ZoneDataSTART
%token <iVal> ZoneDataSetEND
%token <iVal> ZoneDataSetSTART
%token <iVal> ZoneDirectionEND
%token <iVal> ZoneDirectionSTART
%token <iVal> ZoneLineEND
%token <iVal> ZoneLineSTART
%token <iVal> ZoneOrientationEND
%token <iVal> ZoneOrientationSTART
%token <iVal> ZoneOrientationEnumEND
%token <iVal> ZoneOrientationEnumSTART
%token <iVal> ZoneOrientationVectorEND
%token <iVal> ZoneOrientationVectorSTART
%token <iVal> ZonePlaneEND
%token <iVal> ZonePlaneSTART
%token <iVal> ZonePointEND
%token <iVal> ZonePointSTART
%token <iVal> ZoneRadiiEND
%token <iVal> ZoneRadiiSTART
%token <iVal> ZoneSectionEND
%token <iVal> ZoneSectionSTART
%token <iVal> ZoneSectionIdEND
%token <iVal> ZoneSectionIdSTART
%token <iVal> ZoneSectionSetEND
%token <iVal> ZoneSectionSetSTART
%token <iVal> ZoneShapeEND
%token <iVal> ZoneShapeSTART

%token <iVal> IndexATTR
%token <iVal> MaterialNameATTR
%token <iVal> activeATTR
%token <iVal> angleATTR
%token <iVal> angularUnitATTR
%token <iVal> applyColorATTR
%token <iVal> areaUnitATTR
%token <iVal> asmPathIdATTR
%token <iVal> asmPathXIdATTR
%token <iVal> boldATTR
%token <iVal> closedATTR
%token <iVal> colorATTR
%token <iVal> combinedUncertaintyATTR
%token <iVal> countATTR
%token <iVal> crossedATTR
%token <iVal> decimalPlacesATTR
%token <iVal> defaultDesirabilityATTR
%token <iVal> desirabilityATTR
%token <iVal> domainATTR
%token <iVal> domainUATTR
%token <iVal> domainVATTR
%token <iVal> fontIndexATTR
%token <iVal> forceUnitATTR
%token <iVal> formATTR
%token <iVal> hasOuterATTR
%token <iVal> hatchingATTR
%token <iVal> hiddenATTR
%token <iVal> idATTR
%token <iVal> idMaxATTR
%token <iVal> indexATTR
%token <iVal> italicATTR
%token <iVal> labelATTR
%token <iVal> lineHeightATTR
%token <iVal> linearUnitATTR
%token <iVal> massUnitATTR
%token <iVal> materialIndexATTR
%token <iVal> meanErrorATTR
%token <iVal> nATTR
%token <iVal> nameATTR
%token <iVal> nameUserAttributeATTR
%token <iVal> normalATTR
%token <iVal> normalizedATTR
%token <iVal> offsetVATTR
%token <iVal> originMassPropertyATTR
%token <iVal> pressureUnitATTR
%token <iVal> rangeATTR
%token <iVal> rightATTR
%token <iVal> scaleUATTR
%token <iVal> scaleVATTR
%token <iVal> significantFiguresATTR
%token <iVal> sizeATTR
%token <iVal> sizeElementATTR
%token <iVal> speedUnitATTR
%token <iVal> subgroupIdATTR
%token <iVal> temperatureUnitATTR
%token <iVal> thicknessATTR
%token <iVal> timeUnitATTR
%token <iVal> toleranceATTR
%token <iVal> transparencyATTR
%token <iVal> turnedATTR
%token <iVal> turnedSecondCurveATTR
%token <iVal> turnedVATTR
%token <iVal> underlineATTR
%token <iVal> unitNameATTR
%token <iVal> valATTR
%token <iVal> validityATTR
%token <iVal> valueATTR
%token <iVal> versionQIFATTR
%token <iVal> vertexATTR
%token <iVal> widthATTR
%token <iVal> xCombinedUncertaintyATTR
%token <iVal> xDecimalPlacesATTR
%token <iVal> xIdATTR
%token <iVal> xMeanErrorATTR
%token <iVal> xSignificantFiguresATTR
%token <iVal> xValidityATTR
%token <iVal> yCombinedUncertaintyATTR
%token <iVal> yDecimalPlacesATTR
%token <iVal> yMeanErrorATTR
%token <iVal> ySignificantFiguresATTR
%token <iVal> yValidityATTR
%token <iVal> zCombinedUncertaintyATTR
%token <iVal> zDecimalPlacesATTR
%token <iVal> zMeanErrorATTR
%token <iVal> zSignificantFiguresATTR
%token <iVal> zValidityATTR
%token <iVal> zoneVarianceATTR

%%

y_QIFDocumentFile :
          y_XmlVersion QIFDocumentSTART y_XmlHeaderForQIFDocument
          y_QIFDocumentType QIFDocumentEND
          {$$ = new QIFDocumentFile($1, $3, $4);
           QIFDocumentTree = $$;
           if ($3->getidMax())
             {
               $4->setidMax($3->getidMax());
               $3->setidMax(0);
             }
           if ($3->getversionQIF())
             {
               $4->setversionQIF($3->getversionQIF());
               $3->setversionQIF(0);
             }
           if ($1) yyUnrefMap.erase($1);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if (yyUnrefMap.size())
             {
               delete $$;
               return yyerror("bug: unreferenced memory exists");
             }
           if (XmlIDREF::idMissing())
             {
               delete $$;
               return yyerror("xs:ID missing for xs:IDREF");
             }
          }
        ;

y_XmlHeaderForQIFDocument:
          y_LiztAttributePair ENDITEM
          {$$ = new XmlHeaderForQIFDocument();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad header attributes");
             }
           delete $1;
          }
        ;

y_AttributePair :
          y_attributeName TERMINALSTRING
          {$$ = new AttributePair($1, $2);
           yyUnrefMap[$$] = $$;
           free($1);
           free($2);
          }
        ;

y_LiztAttributePair :
          y_AttributePair
          {$$ = new AttributePairLisd($1);
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
          }
        | y_LiztAttributePair y_AttributePair
          {$$ = $1;
           yyUnrefMap.erase($2);
           $$->push_back($2);
          }
        ;

y_XmlAnyURI :
          DATASTRING
          {$$ = new XmlAnyURI($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlAnyURI");
             }
          }
        ;

y_XmlBoolean :
          DATASTRING
          {$$ = new XmlBoolean($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlBoolean");
             }
          }
        ;

y_XmlDateTime :
          DATASTRING
          {$$ = new XmlDateTime($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlDateTime");
             }
          }
        ;

y_XmlDecimal :
          DATASTRING
          {$$ = new XmlDecimal($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlDecimal");
             }
          }
        ;

y_XmlDouble :
          DATASTRING
          {$$ = new XmlDouble($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlDouble");
             }
          }
        ;

y_XmlID :
          DATASTRING
          {$$ = new XmlID($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlID");
             }
          }
        ;

y_XmlIDREF :
          DATASTRING
          {$$ = new XmlIDREF($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlIDREF");
             }
          }
        ;

y_XmlInt :
          DATASTRING
          {$$ = new XmlInt($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlInt");
             }
          }
        ;

y_XmlInteger :
          DATASTRING
          {$$ = new XmlInteger($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlInteger");
             }
          }
        ;

y_XmlNMTOKEN :
          DATASTRING
          {$$ = new XmlNMTOKEN($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlNMTOKEN");
             }
          }
        ;

y_XmlNonNegativeInteger :
          DATASTRING
          {$$ = new XmlNonNegativeInteger($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlNonNegativeInteger");
             }
          }
        ;

y_XmlPositiveInteger :
          DATASTRING
          {$$ = new XmlPositiveInteger($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlPositiveInteger");
             }
          }
        ;

y_XmlString :
          DATASTRING
          {$$ = new XmlString($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlString");
             }
          }
        ;

y_XmlToken :
          DATASTRING
          {$$ = new XmlToken($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlToken");
             }
          }
        ;

y_XmlUnsignedByte :
          DATASTRING
          {$$ = new XmlUnsignedByte($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlUnsignedByte");
             }
          }
        ;

y_XmlUnsignedInt :
          DATASTRING
          {$$ = new XmlUnsignedInt($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             {
              return yyerror("bad XmlUnsignedInt");
             }
          }
        ;

y_XmlVersion :
          STARTVERSION XMLVERSION TERMINALSTRING ENDVERSION
          {$$ = new XmlVersion();
           yyUnrefMap[$$] = $$;
           if (strcmp($3, "1.0"))
             {
              free($3);
              return yyerror("version number must be 1.0");
             }
           free($3);
          }
        | STARTVERSION XMLVERSION TERMINALSTRING
          ENCODING TERMINALSTRING ENDVERSION
          {$$ = new XmlVersion();
           yyUnrefMap[$$] = $$;
           if (strcmp($3, "1.0"))
             {
              free($3);
              free($5);
              return yyerror("version number must be 1.0");
             }
           else if ((strcmp($5, "UTF-8")) && (strcmp($5, "utf-8")))
             {
              free($3);
              free($5);
              return yyerror("encoding must be UTF-8 or utf-8");
             }
           else
             strncpy($$->encoding, $5, 6);
           free($3);
           free($5);
          }
        | STARTVERSION XMLVERSION TERMINALSTRING
          STANDALONE TERMINALSTRING ENDVERSION
          {$$ = new XmlVersion();
           yyUnrefMap[$$] = $$;
           if (strcmp($3, "1.0"))
             {
              free($3);
              free($5);
              return yyerror("version number must be 1.0");
             }
           else if ((strcmp($5, "yes")) && (strcmp($5, "no")))
             {
              free($3);
              free($5);
              return yyerror("standalone must be yes or no");
             }
           else
             strncpy($$->standalone, $5, 5);
           free($3);
           free($5);
          }
        | STARTVERSION XMLVERSION TERMINALSTRING ENCODING TERMINALSTRING
          STANDALONE TERMINALSTRING ENDVERSION
          {$$ = new XmlVersion();
           yyUnrefMap[$$] = $$;
           if (strcmp($3, "1.0"))
             {
              free($3);
              free($5);
              free($7);
              return yyerror("version number must be 1.0");
             }
           else if ((strcmp($5, "UTF-8")) && (strcmp($5, "utf-8")))
             {
              free($3);
              free($5);
              free($7);
              return yyerror("encoding must be UTF-8 or utf-8");
             }
           else if ((strcmp($7, "yes")) && (strcmp($7, "no")))
             {
              free($3);
              free($5);
              free($7);
              return yyerror("standalone must be yes or no");
             }
           else
             {
              strncpy($$->encoding, $5, 6);
              strncpy($$->standalone, $7, 5);
              free($3);
              free($5);
              free($7);
             }
          }
        ;

y_attributeName :
          xmlnsATTR  {$$ = strdup("xmlns");}
        | xmlnsColonATTR {$$ = strdup("xmlns:");}
        | xsiSchemaLocationATTR {$$ = strdup("xsi:schemaLocation");}
        | xsiNoNameLocationATTR {$$ = strdup("xsi:noNamespaceSchemaLocation");}
        | IndexATTR {$$ = strdup("Index");}
        | MaterialNameATTR {$$ = strdup("MaterialName");}
        | activeATTR {$$ = strdup("active");}
        | angleATTR {$$ = strdup("angle");}
        | angularUnitATTR {$$ = strdup("angularUnit");}
        | applyColorATTR {$$ = strdup("applyColor");}
        | areaUnitATTR {$$ = strdup("areaUnit");}
        | asmPathIdATTR {$$ = strdup("asmPathId");}
        | asmPathXIdATTR {$$ = strdup("asmPathXId");}
        | boldATTR {$$ = strdup("bold");}
        | closedATTR {$$ = strdup("closed");}
        | colorATTR {$$ = strdup("color");}
        | combinedUncertaintyATTR {$$ = strdup("combinedUncertainty");}
        | countATTR {$$ = strdup("count");}
        | crossedATTR {$$ = strdup("crossed");}
        | decimalPlacesATTR {$$ = strdup("decimalPlaces");}
        | defaultDesirabilityATTR {$$ = strdup("defaultDesirability");}
        | desirabilityATTR {$$ = strdup("desirability");}
        | domainATTR {$$ = strdup("domain");}
        | domainUATTR {$$ = strdup("domainU");}
        | domainVATTR {$$ = strdup("domainV");}
        | fontIndexATTR {$$ = strdup("fontIndex");}
        | forceUnitATTR {$$ = strdup("forceUnit");}
        | formATTR {$$ = strdup("form");}
        | hasOuterATTR {$$ = strdup("hasOuter");}
        | hatchingATTR {$$ = strdup("hatching");}
        | hiddenATTR {$$ = strdup("hidden");}
        | idATTR {$$ = strdup("id");}
        | idMaxATTR {$$ = strdup("idMax");}
        | indexATTR {$$ = strdup("index");}
        | italicATTR {$$ = strdup("italic");}
        | labelATTR {$$ = strdup("label");}
        | lineHeightATTR {$$ = strdup("lineHeight");}
        | linearUnitATTR {$$ = strdup("linearUnit");}
        | massUnitATTR {$$ = strdup("massUnit");}
        | materialIndexATTR {$$ = strdup("materialIndex");}
        | meanErrorATTR {$$ = strdup("meanError");}
        | nATTR {$$ = strdup("n");}
        | nameATTR {$$ = strdup("name");}
        | nameUserAttributeATTR {$$ = strdup("nameUserAttribute");}
        | normalATTR {$$ = strdup("normal");}
        | normalizedATTR {$$ = strdup("normalized");}
        | offsetVATTR {$$ = strdup("offsetV");}
        | originMassPropertyATTR {$$ = strdup("originMassProperty");}
        | pressureUnitATTR {$$ = strdup("pressureUnit");}
        | rangeATTR {$$ = strdup("range");}
        | rightATTR {$$ = strdup("right");}
        | scaleUATTR {$$ = strdup("scaleU");}
        | scaleVATTR {$$ = strdup("scaleV");}
        | significantFiguresATTR {$$ = strdup("significantFigures");}
        | sizeATTR {$$ = strdup("size");}
        | sizeElementATTR {$$ = strdup("sizeElement");}
        | speedUnitATTR {$$ = strdup("speedUnit");}
        | subgroupIdATTR {$$ = strdup("subgroupId");}
        | temperatureUnitATTR {$$ = strdup("temperatureUnit");}
        | thicknessATTR {$$ = strdup("thickness");}
        | timeUnitATTR {$$ = strdup("timeUnit");}
        | toleranceATTR {$$ = strdup("tolerance");}
        | transparencyATTR {$$ = strdup("transparency");}
        | turnedATTR {$$ = strdup("turned");}
        | turnedSecondCurveATTR {$$ = strdup("turnedSecondCurve");}
        | turnedVATTR {$$ = strdup("turnedV");}
        | underlineATTR {$$ = strdup("underline");}
        | unitNameATTR {$$ = strdup("unitName");}
        | valATTR {$$ = strdup("val");}
        | validityATTR {$$ = strdup("validity");}
        | valueATTR {$$ = strdup("value");}
        | versionQIFATTR {$$ = strdup("versionQIF");}
        | vertexATTR {$$ = strdup("vertex");}
        | widthATTR {$$ = strdup("width");}
        | xCombinedUncertaintyATTR {$$ = strdup("xCombinedUncertainty");}
        | xDecimalPlacesATTR {$$ = strdup("xDecimalPlaces");}
        | xIdATTR {$$ = strdup("xId");}
        | xMeanErrorATTR {$$ = strdup("xMeanError");}
        | xSignificantFiguresATTR {$$ = strdup("xSignificantFigures");}
        | xValidityATTR {$$ = strdup("xValidity");}
        | yCombinedUncertaintyATTR {$$ = strdup("yCombinedUncertainty");}
        | yDecimalPlacesATTR {$$ = strdup("yDecimalPlaces");}
        | yMeanErrorATTR {$$ = strdup("yMeanError");}
        | ySignificantFiguresATTR {$$ = strdup("ySignificantFigures");}
        | yValidityATTR {$$ = strdup("yValidity");}
        | zCombinedUncertaintyATTR {$$ = strdup("zCombinedUncertainty");}
        | zDecimalPlacesATTR {$$ = strdup("zDecimalPlaces");}
        | zMeanErrorATTR {$$ = strdup("zMeanError");}
        | zSignificantFiguresATTR {$$ = strdup("zSignificantFigures");}
        | zValidityATTR {$$ = strdup("zValidity");}
        | zoneVarianceATTR {$$ = strdup("zoneVariance");}
        ;

y_AACMMAccuraciesType :
          y_LiztAttributePair ENDITEM
          y_LiztAACMMAccuracy_AACMMAccuracyType_1_u
          {$$ = new AACMMAccuraciesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AACMMAccuraciesType attributes");
             }
           delete $1;
          }
        ;

y_AACMMAccuracyTest_substituteType :
          y_AACMMB89Test_AACMMB89TestType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AACMMISO10360Test_ISO10360TestType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AACMMPointAccuracyTest_PointAccuracyTestType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AACMMAccuracyType :
          ENDITEM y_EnvironmentalRange_EnvironmentalRangeType
          y_AACMMAccuracyTest_substituteType
          y_AccuracySource_AccuracySourceType
          {$$ = new AACMMAccuracyType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_AACMMAccuracy_AACMMAccuracyType :
          AACMMAccuracySTART y_AACMMAccuracyType AACMMAccuracyEND
          {$$ = $2;
           $$->printElement = "AACMMAccuracy";
          }
        ;

y_AACMMB89TestType :
          ENDITEM
          y_EffectiveDiameterPerformanceTest_EffectiveDiameterPerformanceTestType_0
          y_SinglePointArticulationPerformanceTest_SinglePointArticulationPerformanceTestType_0
          y_VolumetricPerformanceTest_VolumetricPerformanceTestType_0
          {$$ = new AACMMB89TestType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_AACMMB89Test_AACMMB89TestType :
          AACMMB89TestSTART ENDWHOLEITEM
          {$$ = new AACMMB89TestType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "AACMMB89Test";
          }
        | AACMMB89TestSTART y_AACMMB89TestType AACMMB89TestEND
          {$$ = $2;
           $$->printElement = "AACMMB89Test";
          }
        ;

y_AACMMISO10360Test_ISO10360TestType :
          AACMMISO10360TestSTART y_ISO10360TestType AACMMISO10360TestEND
          {$$ = $2;
           $$->printElement = "AACMMISO10360Test";
          }
        ;

y_AACMMPointAccuracyTest_PointAccuracyTestType :
          AACMMPointAccuracyTestSTART y_PointAccuracyTestType
          AACMMPointAccuracyTestEND
          {$$ = $2;
           $$->printElement = "AACMMPointAccuracyTest";
          }
        ;

y_AACMMType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_HomeLocation_PointType_0 y_NumberOfJoints_XmlInt_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_ProbeTipDiameter_LinearValueType_0
          y_Accuracies_AACMMAccuraciesType_0
          {$$ = new AACMMType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AACMMType attributes");
             }
           delete $1;
          }
        ;

y_AACMM_AACMMType :
          AACMMSTART y_AACMMType AACMMEND
          {$$ = $2;
           $$->printElement = "AACMM";
          }
        ;

y_AAxisResolution_LinearOrRotaryAxisType :
          AAxisResolutionSTART y_LinearOrRotaryAxisType AAxisResolutionEND
          {$$ = $2;}
        ;

y_ABCResolutionType :
          ENDITEM y_AAxisResolution_LinearOrRotaryAxisType
          y_BAxisResolution_LinearOrRotaryAxisType
          y_CAxisResolution_LinearOrRotaryAxisType
          {$$ = new ABCResolutionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ABCResolution_ABCResolutionType :
          ABCResolutionSTART y_ABCResolutionType ABCResolutionEND
          {$$ = $2;}
        ;

y_ACombinedResolution_LinearOrRotaryAxisType :
          ACombinedResolutionSTART y_LinearOrRotaryAxisType
          ACombinedResolutionEND
          {$$ = $2;}
        ;

y_A_XmlDouble :
          ASTART ENDITEM {yyReadData = 1;} y_XmlDouble AEND
          {$$ = $4;}
        ;

y_AbsoluteDifferences_AbsoluteLimitsByUnitType :
          AbsoluteDifferencesSTART y_AbsoluteLimitsByUnitType
          AbsoluteDifferencesEND
          {$$ = $2;}
        | AbsoluteDifferencesSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new AbsoluteLimitsByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad AbsoluteLimitsByUnitType attributes");
             }
           delete $2;
          }
        ;

y_AbsoluteDifferences_AbsoluteMeasurementsByUnitType_0 :
          /* empty */
          {$$ = 0;}
        | AbsoluteDifferencesSTART y_AbsoluteMeasurementsByUnitType
          AbsoluteDifferencesEND
          {$$ = $2;}
        | AbsoluteDifferencesSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new AbsoluteMeasurementsByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad AbsoluteMeasurementsByUnitType attributes");
             }
           delete $2;
          }
        ;

y_AbsoluteLimitsByUnitType :
          y_LiztAttributePair ENDITEM y_LinearLimit_LinearValueType_0
          y_AngularLimit_AngularValueType_0 y_AreaLimit_AreaValueType_0
          y_ForceLimit_ForceValueType_0 y_MassLimit_MassValueType_0
          y_PressureLimit_PressureValueType_0 y_SpeedLimit_SpeedValueType_0
          y_TemperatureLimit_TemperatureValueType_0
          y_TimeLimit_TimeValueType_0
          y_LiztUserDefinedUnitLimit_UserDefinedUnitValueType_0_u
          {$$ = new AbsoluteLimitsByUnitType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AbsoluteLimitsByUnitType attributes");
             }
           delete $1;
          }
        ;

y_AbsoluteMaximums_AbsoluteLimitsByUnitType :
          AbsoluteMaximumsSTART y_AbsoluteLimitsByUnitType
          AbsoluteMaximumsEND
          {$$ = $2;}
        | AbsoluteMaximumsSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new AbsoluteLimitsByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad AbsoluteLimitsByUnitType attributes");
             }
           delete $2;
          }
        ;

y_AbsoluteMaximums_AbsoluteMeasurementsByUnitType_0 :
          /* empty */
          {$$ = 0;}
        | AbsoluteMaximumsSTART y_AbsoluteMeasurementsByUnitType
          AbsoluteMaximumsEND
          {$$ = $2;}
        | AbsoluteMaximumsSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new AbsoluteMeasurementsByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad AbsoluteMeasurementsByUnitType attributes");
             }
           delete $2;
          }
        ;

y_AbsoluteMeasurementsByUnitType :
          y_LiztAttributePair ENDITEM
          y_LinearMeasurement_MeasuredLinearValueType_0
          y_AngularMeasurement_MeasuredAngularValueType_0
          y_AreaMeasurement_MeasuredAreaValueType_0
          y_ForceMeasurement_MeasuredForceValueType_0
          y_MassMeasurement_MeasuredMassValueType_0
          y_PressureMeasurement_MeasuredPressureValueType_0
          y_SpeedMeasurement_MeasuredSpeedValueType_0
          y_TemperatureMeasurement_MeasuredTemperatureValueType_0
          y_TimeMeasurement_MeasuredTimeValueType_0
          y_LiztUserDefinedUnitMeasurement_MeasuredUserDefinedUnitValueType_0_u
          {$$ = new AbsoluteMeasurementsByUnitType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AbsoluteMeasurementsByUnitType attributes");
             }
           delete $1;
          }
        ;

y_AbsoluteMinimums_AbsoluteLimitsByUnitType :
          AbsoluteMinimumsSTART y_AbsoluteLimitsByUnitType
          AbsoluteMinimumsEND
          {$$ = $2;}
        | AbsoluteMinimumsSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new AbsoluteLimitsByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad AbsoluteLimitsByUnitType attributes");
             }
           delete $2;
          }
        ;

y_Accuracies_AACMMAccuraciesType_0 :
          /* empty */
          {$$ = 0;}
        | AccuraciesSTART y_AACMMAccuraciesType AccuraciesEND
          {$$ = $2;}
        ;

y_Accuracies_CartesianCMMAccuraciesType_0 :
          /* empty */
          {$$ = 0;}
        | AccuraciesSTART y_CartesianCMMAccuraciesType AccuraciesEND
          {$$ = $2;}
        ;

y_AccuracySourceEnumType :
          DATASTRING
          {$$ = new AccuracySourceEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad AccuracySourceEnumType value");
          }
        ;

y_AccuracySourceEnum_AccuracySourceEnumType :
          AccuracySourceEnumSTART ENDITEM {yyReadData = 1;}
          y_AccuracySourceEnumType AccuracySourceEnumEND
          {$$ = $4;}
        ;

y_AccuracySourceType :
          ENDITEM y_AccuracySourceTypeChoicePair
          {$$ = new AccuracySourceType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AccuracySourceTypeChoicePair :
          y_AccuracySourceEnum_AccuracySourceEnumType
          {$$ = new AccuracySourceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AccuracySourceTypeType = AccuracySourceTypeChoicePair::AccuracySourceEnumE;
           $$->AccuracySourceTypeValue.AccuracySourceEnum = $1;
          }
        | y_OtherAccuracySource_XmlString
          {$$ = new AccuracySourceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AccuracySourceTypeType = AccuracySourceTypeChoicePair::OtherAccuracySourceE;
           $$->AccuracySourceTypeValue.OtherAccuracySource = $1;
          }
        ;

y_AccuracySource_AccuracySourceType :
          AccuracySourceSTART y_AccuracySourceType AccuracySourceEND
          {$$ = $2;}
        ;

y_AccuracyValue_LinearValueType :
          AccuracyValueSTART y_LinearValueType AccuracyValueEND
          {$$ = $2;}
        ;

y_Accuracy_LinearErrorType_0 :
          /* empty */
          {$$ = 0;}
        | AccuracySTART y_LinearErrorType AccuracyEND
          {$$ = $2;}
        ;

y_Accuracy_LinearValueType :
          AccuracySTART y_LinearValueType AccuracyEND
          {$$ = $2;}
        ;

y_Accuracy_NumericalLengthAccuracyType_0 :
          /* empty */
          {$$ = 0;}
        | AccuracySTART y_NumericalLengthAccuracyType AccuracyEND
          {$$ = $2;
           $$->printElement = "Accuracy";
          }
        ;

y_ActionMethod_substituteType :
          y_AutocollimatorMeasureFeatureMethod_AutocollimatorMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CalibratedComparatorMeasureFeatureMethod_CalibratedComparatorMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ComputedTomographyMeasureFeatureMethod_ComputedTomographyMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CoordinateMeasureFeatureMethod_CoordinateMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ExternalReferenceMeasureFeatureMethod_ExternalReferenceMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GageMeasureFeatureMethod_GageMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LaserRadarMeasureFeatureMethod_LaserRadarMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LaserTrackerMeasureFeatureMethod_LaserTrackerMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ManualMeasureFeatureMethod_ManualMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MicroscopeMeasureFeatureMethod_MicroscopeMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherMeasureFeatureMethod_OtherMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ProfileProjectorMeasureFeatureMethod_ProfileProjectorMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TheodoliteMeasureFeatureMethod_TheodoliteMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UniversalLengthMeasureFeatureMethod_UniversalLengthMeasureFeatureMethodType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ActionMethodsType :
          y_LiztAttributePair ENDITEM y_LiztActionMethod_substituteType_1_u
          {$$ = new ActionMethodsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ActionMethodsType attributes");
             }
           delete $1;
          }
        ;

y_ActionMethods_ActionMethodsType_0 :
          /* empty */
          {$$ = 0;}
        | ActionMethodsSTART y_ActionMethodsType ActionMethodsEND
          {$$ = $2;}
        ;

y_ActionToTakeEnumType :
          DATASTRING
          {$$ = new ActionToTakeEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ActionToTakeEnumType value");
          }
        ;

y_ActionToTakeEnum_ActionToTakeEnumType :
          ActionToTakeEnumSTART ENDITEM {yyReadData = 1;}
          y_ActionToTakeEnumType ActionToTakeEnumEND
          {$$ = $4;}
        ;

y_ActionToTake_XmlString :
          ActionToTakeSTART ENDITEM {yyReadData = 1;} y_XmlString
          ActionToTakeEND
          {$$ = $4;}
        ;

y_Action_LogicalOperationEnumType :
          ActionSTART ENDITEM {yyReadData = 1;} y_LogicalOperationEnumType
          ActionEND
          {$$ = $4;}
        ;

y_ActivePixelsNumber_FunctionDiscreteType_0 :
          /* empty */
          {$$ = 0;}
        | ActivePixelsNumberSTART y_FunctionDiscreteType
          ActivePixelsNumberEND
          {$$ = $2;}
        ;

y_ActiveView_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ActiveViewSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ActiveViewEND
          {$$ = $4;}
        ;

y_Active_XmlBoolean :
          ActiveSTART ENDITEM {yyReadData = 1;} y_XmlBoolean ActiveEND
          {$$ = $4;}
        ;

y_ActualComponentId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ActualComponentIdSTART y_QIFReferenceFullType
          ActualComponentIdEND
          {$$ = $2;}
        ;

y_ActualComponentId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ActualComponentIdSTART y_QIFReferenceType ActualComponentIdEND
          {$$ = $2;}
        ;

y_ActualComponentIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ActualComponentIdsSTART y_ArrayReferenceType
          ActualComponentIdsEND
          {$$ = $2;}
        ;

y_ActualComponentSetType :
          y_LiztAttributePair ENDITEM
          y_LiztActualComponent_ActualComponentType_1_u
          {$$ = new ActualComponentSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ActualComponentSetType attributes");
             }
           delete $1;
          }
        ;

y_ActualComponentSet_ActualComponentSetType :
          ActualComponentSetSTART y_ActualComponentSetType
          ActualComponentSetEND
          {$$ = $2;}
        ;

y_ActualComponentSetsType :
          y_LiztAttributePair ENDITEM
          y_LiztActualComponentSet_ActualComponentSetType_1_u
          {$$ = new ActualComponentSetsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ActualComponentSetsType attributes");
             }
           delete $1;
          }
        ;

y_ActualComponentSets_ActualComponentSetsType_0 :
          /* empty */
          {$$ = 0;}
        | ActualComponentSetsSTART y_ActualComponentSetsType
          ActualComponentSetsEND
          {$$ = $2;}
        ;

y_ActualComponentType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_SerialNumber_XmlString_0 y_AdditionalChanges_XmlString_0
          y_Status_InspectionStatusType
          y_Traceability_ActualProductTraceabilityType_0
          y_AsmPathId_QIFReferenceType_0
          {$$ = new ActualComponentType($3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ActualComponentType attributes");
             }
           delete $1;
          }
        ;

y_ActualComponent_ActualComponentType :
          ActualComponentSTART y_ActualComponentType ActualComponentEND
          {$$ = $2;}
        ;

y_ActualProductTraceabilityType :
          ENDITEM y_SampleNumber_XmlString_0 y_LotNumber_XmlString_0
          y_ReportNumber_XmlString_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_FixtureId_QIFReferenceType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_InspectionStart_XmlDateTime_0 y_InspectionEnd_XmlDateTime_0
          y_InspectionSoftwareItems_InspectionSoftwareItemsType_0
          y_InspectionProgram_InspectionProgramType_0
          y_InspectionOperator_EmployeeType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ProductEnvironments_EnvironmentsType_0 y_Errors_ErrorsType_0
          y_Attributes_AttributesType_0
          {$$ = new ActualProductTraceabilityType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
          }
        ;

y_ActualSinglePointAccuracy_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ActualSinglePointAccuracySTART y_LinearValueType
          ActualSinglePointAccuracyEND
          {$$ = $2;}
        ;

y_ActualTransformId_QIFReferenceType :
          ActualTransformIdSTART y_QIFReferenceType ActualTransformIdEND
          {$$ = $2;}
        ;

y_ActualTransformId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ActualTransformIdSTART y_QIFReferenceType ActualTransformIdEND
          {$$ = $2;}
        ;

y_ActualTransforms_TransformListType_0 :
          /* empty */
          {$$ = 0;}
        | ActualTransformsSTART y_TransformListType ActualTransformsEND
          {$$ = $2;}
        ;

y_ActualVolumetricAccuracy_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ActualVolumetricAccuracySTART y_LinearValueType
          ActualVolumetricAccuracyEND
          {$$ = $2;}
        ;

y_AdditionalChanges_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | AdditionalChangesSTART ENDITEM {yyReadData = 1;} y_XmlString
          AdditionalChangesEND
          {$$ = $4;}
        ;

y_AddonName_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | AddonNameSTART ENDITEM {yyReadData = 1;} y_XmlString AddonNameEND
          {$$ = $4;}
        ;

y_AddonOrganization_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | AddonOrganizationSTART ENDITEM {yyReadData = 1;} y_XmlString
          AddonOrganizationEND
          {$$ = $4;}
        ;

y_AddressDescriptionEnumType :
          DATASTRING
          {$$ = new AddressDescriptionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad AddressDescriptionEnumType value");
          }
        ;

y_AddressDescriptionEnum_AddressDescriptionEnumType :
          AddressDescriptionEnumSTART ENDITEM {yyReadData = 1;}
          y_AddressDescriptionEnumType AddressDescriptionEnumEND
          {$$ = $4;}
        ;

y_AddressDescriptionType :
          ENDITEM y_AddressDescriptionTypeChoicePair
          {$$ = new AddressDescriptionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AddressDescriptionTypeChoicePair :
          y_AddressDescriptionEnum_AddressDescriptionEnumType
          {$$ = new AddressDescriptionTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AddressDescriptionTypeType = AddressDescriptionTypeChoicePair::AddressDescriptionEnumE;
           $$->AddressDescriptionTypeValue.AddressDescriptionEnum = $1;
          }
        | y_OtherAddressDescription_XmlString
          {$$ = new AddressDescriptionTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AddressDescriptionTypeType = AddressDescriptionTypeChoicePair::OtherAddressDescriptionE;
           $$->AddressDescriptionTypeValue.OtherAddressDescription = $1;
          }
        ;

y_Address_PhysicalAddressType_0 :
          /* empty */
          {$$ = 0;}
        | AddressSTART ENDWHOLEITEM
          {$$ = new PhysicalAddressType();
           yyUnrefMap[$$] = $$;
          }
        | AddressSTART y_PhysicalAddressType AddressEND
          {$$ = $2;}
        ;

y_AdjacentNormal_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | AdjacentNormalSTART y_MeasuredUnitVectorType AdjacentNormalEND
          {$$ = $2;}
        ;

y_AdjacentNormal_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | AdjacentNormalSTART y_UnitVectorType AdjacentNormalEND
          {$$ = $2;}
        ;

y_Aggregate12CoreType :
          y_LiztAttributePair ENDITEM y_SubCurves_ArraySubCurve12Type
          {$$ = new Aggregate12CoreType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Aggregate12CoreType attributes");
             }
           delete $1;
          }
        ;

y_Aggregate12Core_Aggregate12CoreType :
          Aggregate12CoreSTART y_Aggregate12CoreType Aggregate12CoreEND
          {$$ = $2;
           $$->printElement = "Aggregate12Core";
          }
        ;

y_Aggregate12Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Aggregate12Core_Aggregate12CoreType
          {$$ = new Aggregate12Type($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Aggregate12Type attributes");
             }
           delete $1;
          }
        ;

y_Aggregate12_Aggregate12Type :
          Aggregate12START y_Aggregate12Type Aggregate12END
          {$$ = $2;
           $$->printElement = "Aggregate12";
          }
        ;

y_Aggregate13CoreType :
          y_LiztAttributePair ENDITEM y_SubCurves_ArraySubCurve13Type
          {$$ = new Aggregate13CoreType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Aggregate13CoreType attributes");
             }
           delete $1;
          }
        ;

y_Aggregate13Core_Aggregate13CoreType :
          Aggregate13CoreSTART y_Aggregate13CoreType Aggregate13CoreEND
          {$$ = $2;
           $$->printElement = "Aggregate13Core";
          }
        ;

y_Aggregate13Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Aggregate13Core_Aggregate13CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Aggregate13Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Aggregate13Type attributes");
             }
           delete $1;
          }
        ;

y_Aggregate13_Aggregate13Type :
          Aggregate13START y_Aggregate13Type Aggregate13END
          {$$ = $2;
           $$->printElement = "Aggregate13";
          }
        ;

y_AlgorithmDefinitions_AlgorithmsType_0 :
          /* empty */
          {$$ = 0;}
        | AlgorithmDefinitionsSTART y_AlgorithmsType
          AlgorithmDefinitionsEND
          {$$ = $2;}
        ;

y_AlgorithmId_QIFReferenceType :
          AlgorithmIdSTART y_QIFReferenceType AlgorithmIdEND
          {$$ = $2;}
        ;

y_AlgorithmType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_AlgorithmType_1007_AlgorithmType_1007_Type y_Name_XmlString
          y_Description_XmlString_0
          {$$ = new AlgorithmType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AlgorithmType attributes");
             }
           delete $1;
          }
        ;

y_AlgorithmType_1007_AlgorithmType_1007_Type :
          y_AlgorithmType_1007_Type
          {$$ = $1;}
        ;

y_AlgorithmType_1007_Type :
          y_AlgorithmType_1007_TypeChoicePair
          {$$ = new AlgorithmType_1007_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AlgorithmType_1007_TypeChoicePair :
          y_AlgorithmType_1_1027_AlgorithmType_1_1027_Type
          {$$ = new AlgorithmType_1007_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AlgorithmType_1007_TypeType = AlgorithmType_1007_TypeChoicePair::AlgorithmType_1_1027E;
           $$->AlgorithmType_1007_TypeValue.AlgorithmType_1_1027 = $1;
          }
        | y_AlgorithmType_1_1028_AlgorithmType_1_1028_Type
          {$$ = new AlgorithmType_1007_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AlgorithmType_1007_TypeType = AlgorithmType_1007_TypeChoicePair::AlgorithmType_1_1028E;
           $$->AlgorithmType_1007_TypeValue.AlgorithmType_1_1028 = $1;
          }
        ;

y_AlgorithmType_1_1027_AlgorithmType_1_1027_Type :
          y_AlgorithmType_1_1027_Type
          {$$ = $1;}
        ;

y_AlgorithmType_1_1027_Type :
          y_SoftwareId_QIFReferenceType y_Parameters_XmlString_0
          {$$ = new AlgorithmType_1_1027_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AlgorithmType_1_1028_AlgorithmType_1_1028_Type :
          y_AlgorithmType_1_1028_Type
          {$$ = $1;}
        ;

y_AlgorithmType_1_1028_Type :
          y_StandardId_QIFReferenceType y_Section_XmlString_0
          {$$ = new AlgorithmType_1_1028_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Algorithm_AlgorithmType :
          AlgorithmSTART y_AlgorithmType AlgorithmEND
          {$$ = $2;}
        ;

y_AlgorithmsType :
          y_LiztAttributePair ENDITEM y_LiztAlgorithm_AlgorithmType_1_u
          {$$ = new AlgorithmsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AlgorithmsType attributes");
             }
           delete $1;
          }
        ;

y_AlignmentEnumType :
          DATASTRING
          {$$ = new AlignmentEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad AlignmentEnumType value");
          }
        ;

y_AlignmentFeatur_1008_AlignmentFeatur_1008_Type :
          y_AlignmentFeatur_1008_Type
          {$$ = $1;}
        ;

y_AlignmentFeatur_1008_Type :
          y_AlignmentFeatur_1008_TypeChoicePair
          {$$ = new AlignmentFeatur_1008_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AlignmentFeatur_1008_TypeChoicePair :
          y_BaseFeature_BaseFeatureType
          {$$ = new AlignmentFeatur_1008_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AlignmentFeatur_1008_TypeType = AlignmentFeatur_1008_TypeChoicePair::BaseFeatureE;
           $$->AlignmentFeatur_1008_TypeValue.BaseFeature = $1;
          }
        | y_DatumDefinitionId_QIFReferenceFullType
          {$$ = new AlignmentFeatur_1008_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AlignmentFeatur_1008_TypeType = AlignmentFeatur_1008_TypeChoicePair::DatumDefinitionIdE;
           $$->AlignmentFeatur_1008_TypeValue.DatumDefinitionId = $1;
          }
        ;

y_AlignmentFeatureType :
          ENDITEM y_AlignmentFeatur_1008_AlignmentFeatur_1008_Type
          {$$ = new AlignmentFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AlignmentOperation_substituteType :
          y_BestFit_BestFitAlignmentOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DatumPrecedence_DatumPrecedenceAlignmentOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Machine_MachineCoordinateSystemOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MeasurementOffset_MeasurementOffsetAlignmentOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NominalOffset_NominalOffsetAlignmentOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NominalRotation_NominalRotationAlignmentOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PrimaryAlignment_PrimaryAlignmentOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SecondaryAlignment_SecondaryAlignmentOperationType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AlignmentOperationsType :
          y_LiztAttributePair ENDITEM
          y_LiztAlignmentOperation_substituteType_1_u
          y_BaseCoordinateSystemId_QIFReferenceFullType_0
          {$$ = new AlignmentOperationsType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AlignmentOperationsType attributes");
             }
           delete $1;
          }
        ;

y_AlignmentOperations_AlignmentOperationsType_0 :
          /* empty */
          {$$ = 0;}
        | AlignmentOperationsSTART y_AlignmentOperationsType
          AlignmentOperationsEND
          {$$ = $2;}
        ;

y_Alignment_AlignmentEnumType_0 :
          /* empty */
          {$$ = 0;}
        | AlignmentSTART ENDITEM {yyReadData = 1;} y_AlignmentEnumType
          AlignmentEND
          {$$ = $4;}
        ;

y_AllAround_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | AllAroundSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          AllAroundEND
          {$$ = $4;}
        ;

y_All_XmlToken :
          AllSTART ENDITEM {yyReadData = 1;} y_XmlToken AllEND
          {$$ = $4;}
        ;

y_AlongRowDirection_VectorType :
          AlongRowDirectionSTART y_VectorType AlongRowDirectionEND
          {$$ = $2;}
        ;

y_AlternativeActionMethodIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | AlternativeActionMethodIdsSTART y_ArrayReferenceType
          AlternativeActionMethodIdsEND
          {$$ = $2;}
        ;

y_AmbientTemperature_MeasuredTemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | AmbientTemperatureSTART y_MeasuredTemperatureValueType
          AmbientTemperatureEND
          {$$ = $2;}
        ;

y_AnalysisMode_AngleBetweenAnalysisModeEnumType :
          AnalysisModeSTART ENDITEM {yyReadData = 1;}
          y_AngleBetweenAnalysisModeEnumType AnalysisModeEND
          {$$ = $4;}
        ;

y_AnalysisMode_DistanceBetweenAnalysisModeEnumType :
          AnalysisModeSTART ENDITEM {yyReadData = 1;}
          y_DistanceBetweenAnalysisModeEnumType AnalysisModeEND
          {$$ = $4;}
        ;

y_AnalysisSoftware_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | AnalysisSoftwareSTART y_ArrayReferenceType AnalysisSoftwareEND
          {$$ = $2;}
        ;

y_AnalysisVector_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | AnalysisVectorSTART y_MeasuredUnitVectorType AnalysisVectorEND
          {$$ = $2;}
        ;

y_AnalysisVector_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | AnalysisVectorSTART y_UnitVectorType AnalysisVectorEND
          {$$ = $2;}
        ;

y_AndType :
          y_LiztAttributePair ENDITEM
          y_LiztBooleanExpression_substituteType_2_u_Check
          {$$ = new AndType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AndType attributes");
             }
           delete $1;
          }
        ;

y_And_AndType :
          AndSTART y_AndType AndEND
          {$$ = $2;
           $$->printElement = "And";
          }
        ;

y_AngleBetweenAnalysisModeEnumType :
          DATASTRING
          {$$ = new AngleBetweenAnalysisModeEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad AngleBetweenAnalysisModeEnumType value");
          }
        ;

y_AngleBetweenCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_AngularCharacte_1045_AngularCharacte_1045_Type
          {$$ = new AngleBetweenCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleBetweenCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_AngleBetweenCharacteristicDefinition_AngleBetweenCharacteristicDefinitionType :
          AngleBetweenCharacteristicDefinitionSTART
          y_AngleBetweenCharacteristicDefinitionType
          AngleBetweenCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "AngleBetweenCharacteristicDefinition";
          }
        ;

y_AngleBetweenCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new AngleBetweenCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleBetweenCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_AngleBetweenCharacteristicItem_AngleBetweenCharacteristicItemType :
          AngleBetweenCharacteristicItemSTART
          y_AngleBetweenCharacteristicItemType
          AngleBetweenCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "AngleBetweenCharacteristicItem";
          }
        ;

y_AngleBetweenCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredAngularValueType_0
          y_MaxValue_MeasuredAngularValueType_0
          y_MinValue_MeasuredAngularValueType_0
          y_AnalysisVector_MeasuredUnitVectorType_0
          y_Vertex_MeasuredPointType_0
          {$$ = new AngleBetweenCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleBetweenCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_AngleBetweenCharacteristicMeasurement_AngleBetweenCharacteristicMeasurementType :
          AngleBetweenCharacteristicMeasurementSTART
          y_AngleBetweenCharacteristicMeasurementType
          AngleBetweenCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "AngleBetweenCharacteristicMeasurement";
          }
        ;

y_AngleBetweenCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_AngularValueType_0
          y_FeatureNominalPairs_ArrayPairReferenceFullType_0
          y_AnalysisVector_UnitVectorType_0
          y_AnalysisMode_AngleBetweenAnalysisModeEnumType
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_MeasurementDirective_MeasurementDirectiveType_0
          y_Vertex_PointType_0
          {$$ = new AngleBetweenCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleBetweenCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_AngleBetweenCharacteristicNominal_AngleBetweenCharacteristicNominalType :
          AngleBetweenCharacteristicNominalSTART
          y_AngleBetweenCharacteristicNominalType
          AngleBetweenCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "AngleBetweenCharacteristicNominal";
          }
        ;

y_AngleBetweenCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_AngularCharacte_1126_AngularCharacte_1126_Type
          {$$ = new AngleBetweenCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_AngleBetweenCharacteristicStats_AngleBetweenCharacteristicStatsEvalType :
          AngleBetweenCharacteristicStatsSTART
          y_AngleBetweenCharacteristicStatsEvalType
          AngleBetweenCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "AngleBetweenCharacteristicStats";
          }
        ;

y_AngleCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_AngularCharacte_1045_AngularCharacte_1045_Type
          {$$ = new AngleCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_AngleCharacteristicDefinition_AngleCharacteristicDefinitionType :
          AngleCharacteristicDefinitionSTART
          y_AngleCharacteristicDefinitionType
          AngleCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "AngleCharacteristicDefinition";
          }
        ;

y_AngleCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new AngleCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_AngleCharacteristicItem_AngleCharacteristicItemType :
          AngleCharacteristicItemSTART y_AngleCharacteristicItemType
          AngleCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "AngleCharacteristicItem";
          }
        ;

y_AngleCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredAngularValueType_0
          y_MaxValue_MeasuredAngularValueType_0
          y_MinValue_MeasuredAngularValueType_0
          {$$ = new AngleCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_AngleCharacteristicMeasurement_AngleCharacteristicMeasurementType :
          AngleCharacteristicMeasurementSTART
          y_AngleCharacteristicMeasurementType
          AngleCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "AngleCharacteristicMeasurement";
          }
        ;

y_AngleCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_AngularValueType_0
          {$$ = new AngleCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_AngleCharacteristicNominal_AngleCharacteristicNominalType :
          AngleCharacteristicNominalSTART y_AngleCharacteristicNominalType
          AngleCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "AngleCharacteristicNominal";
          }
        ;

y_AngleCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_AngularCharacte_1126_AngularCharacte_1126_Type
          {$$ = new AngleCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_AngleCharacteristicStats_AngleCharacteristicStatsEvalType :
          AngleCharacteristicStatsSTART y_AngleCharacteristicStatsEvalType
          AngleCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "AngleCharacteristicStats";
          }
        ;

y_AngleFromCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_AngularCharacte_1045_AngularCharacte_1045_Type
          {$$ = new AngleFromCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleFromCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_AngleFromCharacteristicDefinition_AngleFromCharacteristicDefinitionType :
          AngleFromCharacteristicDefinitionSTART
          y_AngleFromCharacteristicDefinitionType
          AngleFromCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "AngleFromCharacteristicDefinition";
          }
        ;

y_AngleFromCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new AngleFromCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleFromCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_AngleFromCharacteristicItem_AngleFromCharacteristicItemType :
          AngleFromCharacteristicItemSTART
          y_AngleFromCharacteristicItemType AngleFromCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "AngleFromCharacteristicItem";
          }
        ;

y_AngleFromCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredAngularValueType_0
          y_MaxValue_MeasuredAngularValueType_0
          y_MinValue_MeasuredAngularValueType_0
          y_AnalysisVector_MeasuredUnitVectorType_0
          y_Vertex_MeasuredPointType_0
          {$$ = new AngleFromCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleFromCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_AngleFromCharacteristicMeasurement_AngleFromCharacteristicMeasurementType :
          AngleFromCharacteristicMeasurementSTART
          y_AngleFromCharacteristicMeasurementType
          AngleFromCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "AngleFromCharacteristicMeasurement";
          }
        ;

y_AngleFromCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_AngularValueType_0
          y_OriginReference_OriginReferenceType_0
          y_AnalysisVector_UnitVectorType_0
          y_AnalysisMode_AngleBetweenAnalysisModeEnumType
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_MeasurementDirective_MeasurementDirectiveType_0
          y_Vertex_PointType_0
          {$$ = new AngleFromCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleFromCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_AngleFromCharacteristicNominal_AngleFromCharacteristicNominalType :
          AngleFromCharacteristicNominalSTART
          y_AngleFromCharacteristicNominalType
          AngleFromCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "AngleFromCharacteristicNominal";
          }
        ;

y_AngleFromCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_AngularCharacte_1126_AngularCharacte_1126_Type
          {$$ = new AngleFromCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_AngleFromCharacteristicStats_AngleFromCharacteristicStatsEvalType :
          AngleFromCharacteristicStatsSTART
          y_AngleFromCharacteristicStatsEvalType
          AngleFromCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "AngleFromCharacteristicStats";
          }
        ;

y_AngleFunctionDiscreteType :
          y_LiztAttributePair ENDITEM y_DomainValues_ListDoubleType
          y_RangeValues_ListDoubleType y_DomainLinearUnit_XmlToken
          y_RangeAngularUnit_XmlToken
          {$$ = new AngleFunctionDiscreteType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleFunctionDiscreteType attributes");
             }
           delete $1;
          }
        ;

y_AngleRangeType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new AngleRangeType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_AngleRangeType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new AngleRangeType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngleRangeType attributes");
             }
           delete $1;
          }
        ;

y_AngleResolution_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | AngleResolutionSTART y_AngularValueType AngleResolutionEND
          {$$ = $2;}
        ;

y_Angle_AngularValueType :
          AngleSTART y_AngularValueType AngleEND
          {$$ = $2;}
        ;

y_Angle_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | AngleSTART y_AngularValueType AngleEND
          {$$ = $2;}
        ;

y_AngularAbsoluteLinearity_MeasuredAngularValueType :
          AngularAbsoluteLinearitySTART y_MeasuredAngularValueType
          AngularAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_AngularAccuracy_AngularErrorType_0 :
          /* empty */
          {$$ = 0;}
        | AngularAccuracySTART y_AngularErrorType AngularAccuracyEND
          {$$ = $2;}
        ;

y_AngularAccuracy_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | AngularAccuracySTART y_AngularValueType AngularAccuracyEND
          {$$ = $2;}
        ;

y_AngularCharacte_1045_AngularCharacte_1045_Type :
          y_AngularCharacte_1045_Type
          {$$ = $1;}
        ;

y_AngularCharacte_1045_Type :
          y_AngularCharacte_1045_TypeChoicePair
          {$$ = new AngularCharacte_1045_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AngularCharacte_1045_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new AngularCharacte_1045_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1045_TypeType = AngularCharacte_1045_TypeChoicePair::NonToleranceE;
           $$->AngularCharacte_1045_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_AngularToleranceType
          {$$ = new AngularCharacte_1045_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1045_TypeType = AngularCharacte_1045_TypeChoicePair::ToleranceE;
           $$->AngularCharacte_1045_TypeValue.Tolerance = $1;
          }
        ;

y_AngularCharacte_1126_AngularCharacte_1126_Type :
          y_AngularCharacte_1126_Type
          {$$ = $1;}
        ;

y_AngularCharacte_1126_Type :
          y_AngularCharacte_1126_TypeChoicePair
          {$$ = new AngularCharacte_1126_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AngularCharacte_1126_TypeChoicePair :
          y_AngularCharacte_1147_AngularCharacte_1147_Type
          {$$ = new AngularCharacte_1126_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1126_TypeType = AngularCharacte_1126_TypeChoicePair::AngularCharacte_1147E;
           $$->AngularCharacte_1126_TypeValue.AngularCharacte_1147 = $1;
          }
        | y_AngularCharacte_1148_AngularCharacte_1148_Type
          {$$ = new AngularCharacte_1126_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1126_TypeType = AngularCharacte_1126_TypeChoicePair::AngularCharacte_1148E;
           $$->AngularCharacte_1126_TypeValue.AngularCharacte_1148 = $1;
          }
        | y_AngularCharacte_1149_AngularCharacte_1149_Type
          {$$ = new AngularCharacte_1126_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1126_TypeType = AngularCharacte_1126_TypeChoicePair::AngularCharacte_1149E;
           $$->AngularCharacte_1126_TypeValue.AngularCharacte_1149 = $1;
          }
        | y_AngularCharacte_1150_AngularCharacte_1150_Type
          {$$ = new AngularCharacte_1126_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1126_TypeType = AngularCharacte_1126_TypeChoicePair::AngularCharacte_1150E;
           $$->AngularCharacte_1126_TypeValue.AngularCharacte_1150 = $1;
          }
        | y_MinDeviationStats_StatsAngularType
          {$$ = new AngularCharacte_1126_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1126_TypeType = AngularCharacte_1126_TypeChoicePair::MinDeviationStatsE;
           $$->AngularCharacte_1126_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsAngularType
          {$$ = new AngularCharacte_1126_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCharacte_1126_TypeType = AngularCharacte_1126_TypeChoicePair::MinValueStatsE;
           $$->AngularCharacte_1126_TypeValue.MinValueStats = $1;
          }
        ;

y_AngularCharacte_1147_AngularCharacte_1147_Type :
          y_AngularCharacte_1147_Type
          {$$ = $1;}
        ;

y_AngularCharacte_1147_Type :
          y_ValueStats_StatsWithTolAngularType
          y_MaxValueStats_StatsAngularType_0
          y_MinValueStats_StatsAngularType_0
          {$$ = new AngularCharacte_1147_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_AngularCharacte_1148_AngularCharacte_1148_Type :
          y_AngularCharacte_1148_Type
          {$$ = $1;}
        ;

y_AngularCharacte_1148_Type :
          y_MaxValueStats_StatsAngularType
          y_MinValueStats_StatsAngularType_0
          {$$ = new AngularCharacte_1148_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AngularCharacte_1149_AngularCharacte_1149_Type :
          y_AngularCharacte_1149_Type
          {$$ = $1;}
        ;

y_AngularCharacte_1149_Type :
          y_DeviationStats_StatsWithTolAngularType
          y_MaxDeviationStats_StatsAngularType_0
          y_MinDeviationStats_StatsAngularType_0
          {$$ = new AngularCharacte_1149_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_AngularCharacte_1150_AngularCharacte_1150_Type :
          y_AngularCharacte_1150_Type
          {$$ = $1;}
        ;

y_AngularCharacte_1150_Type :
          y_MaxDeviationStats_StatsAngularType
          y_MinDeviationStats_StatsAngularType_0
          {$$ = new AngularCharacte_1150_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AngularCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_AngularCharacte_1126_AngularCharacte_1126_Type
          {$$ = new AngularCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_AngularCharacteristicStats_AngularCharacteristicStatsEvalType :
          AngularCharacteristicStatsSTART
          y_AngularCharacteristicStatsEvalType
          AngularCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "AngularCharacteristicStats";
          }
        ;

y_AngularCoordina_1046_AngularCoordina_1046_Type :
          y_AngularCoordina_1046_Type
          {$$ = $1;}
        ;

y_AngularCoordina_1046_Type :
          y_AngularCoordina_1046_TypeChoicePair
          {$$ = new AngularCoordina_1046_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AngularCoordina_1046_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new AngularCoordina_1046_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCoordina_1046_TypeType = AngularCoordina_1046_TypeChoicePair::NonToleranceE;
           $$->AngularCoordina_1046_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_AngularToleranceType
          {$$ = new AngularCoordina_1046_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularCoordina_1046_TypeType = AngularCoordina_1046_TypeChoicePair::ToleranceE;
           $$->AngularCoordina_1046_TypeValue.Tolerance = $1;
          }
        ;

y_AngularCoordinateCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_AngularCoordina_1046_AngularCoordina_1046_Type
          {$$ = new AngularCoordinateCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularCoordinateCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_AngularCoordinateCharacteristicDefinition_AngularCoordinateCharacteristicDefinitionType :
          AngularCoordinateCharacteristicDefinitionSTART
          y_AngularCoordinateCharacteristicDefinitionType
          AngularCoordinateCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "AngularCoordinateCharacteristicDefinition";
          }
        ;

y_AngularCoordinateCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new AngularCoordinateCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularCoordinateCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_AngularCoordinateCharacteristicItem_AngularCoordinateCharacteristicItemType :
          AngularCoordinateCharacteristicItemSTART
          y_AngularCoordinateCharacteristicItemType
          AngularCoordinateCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "AngularCoordinateCharacteristicItem";
          }
        ;

y_AngularCoordinateCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_TypeOfCoordinates_TypeOfCoordinatesType
          y_Value_MeasuredAngularValueType_0
          y_MaxValue_MeasuredAngularValueType_0
          y_MinValue_MeasuredAngularValueType_0
          {$$ = new AngularCoordinateCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularCoordinateCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_AngularCoordinateCharacteristicMeasurement_AngularCoordinateCharacteristicMeasurementType :
          AngularCoordinateCharacteristicMeasurementSTART
          y_AngularCoordinateCharacteristicMeasurementType
          AngularCoordinateCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "AngularCoordinateCharacteristicMeasurement";
          }
        ;

y_AngularCoordinateCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_AngularValueType_0
          y_Direction_AngularCoordinateDirectionEnumType
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new AngularCoordinateCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularCoordinateCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_AngularCoordinateCharacteristicNominal_AngularCoordinateCharacteristicNominalType :
          AngularCoordinateCharacteristicNominalSTART
          y_AngularCoordinateCharacteristicNominalType
          AngularCoordinateCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "AngularCoordinateCharacteristicNominal";
          }
        ;

y_AngularCoordinateCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_AngularCharacte_1126_AngularCharacte_1126_Type
          {$$ = new AngularCoordinateCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_AngularCoordinateCharacteristicStats_AngularCoordinateCharacteristicStatsEvalType :
          AngularCoordinateCharacteristicStatsSTART
          y_AngularCoordinateCharacteristicStatsEvalType
          AngularCoordinateCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "AngularCoordinateCharacteristicStats";
          }
        ;

y_AngularCoordinateDirectionEnumType :
          DATASTRING
          {$$ = new AngularCoordinateDirectionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad AngularCoordinateDirectionEnumType value");
          }
        ;

y_AngularCriterion_CriterionAngularType_0 :
          /* empty */
          {$$ = 0;}
        | AngularCriterionSTART y_CriterionAngularType AngularCriterionEND
          {$$ = $2;
           $$->printElement = "AngularCriterion";
          }
        ;

y_AngularErrorType :
          ENDITEM y_BaseError_AngularValueType y_ErrorRate_XmlDecimal
          {$$ = new AngularErrorType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_AngularLimit_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | AngularLimitSTART y_AngularValueType AngularLimitEND
          {$$ = $2;}
        ;

y_AngularMeasurement_MeasuredAngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | AngularMeasurementSTART y_MeasuredAngularValueType
          AngularMeasurementEND
          {$$ = $2;}
        ;

y_AngularStatsSummaries_SummariesStatisticsAngularType_0 :
          /* empty */
          {$$ = 0;}
        | AngularStatsSummariesSTART y_SummariesStatisticsAngularType
          AngularStatsSummariesEND
          {$$ = $2;}
        ;

y_AngularStatsSummary_SummaryStatisticsAngularType :
          AngularStatsSummarySTART y_SummaryStatisticsAngularType
          AngularStatsSummaryEND
          {$$ = $2;
           $$->printElement = "AngularStatsSummary";
          }
        ;

y_AngularToleranc_1009_AngularToleranc_1009_Type :
          y_AngularToleranc_1009_Type
          {$$ = $1;}
        ;

y_AngularToleranc_1009_Type :
          y_AngularToleranc_1009_TypeChoicePair
          {$$ = new AngularToleranc_1009_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AngularToleranc_1009_TypeChoicePair :
          y_AngularToleranc_1029_AngularToleranc_1029_Type
          {$$ = new AngularToleranc_1009_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularToleranc_1009_TypeType = AngularToleranc_1009_TypeChoicePair::AngularToleranc_1029E;
           $$->AngularToleranc_1009_TypeValue.AngularToleranc_1029 = $1;
          }
        | y_MinValue_AngularValueType
          {$$ = new AngularToleranc_1009_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularToleranc_1009_TypeType = AngularToleranc_1009_TypeChoicePair::MinValueE;
           $$->AngularToleranc_1009_TypeValue.MinValue = $1;
          }
        ;

y_AngularToleranc_1010_AngularToleranc_1010_Type :
          y_AngularToleranc_1010_Type
          {$$ = $1;}
        ;

y_AngularToleranc_1010_Type :
          y_AngularToleranc_1010_TypeChoicePair
          {$$ = new AngularToleranc_1010_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AngularToleranc_1010_TypeChoicePair :
          y_AngularToleranc_1030_AngularToleranc_1030_Type
          {$$ = new AngularToleranc_1010_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularToleranc_1010_TypeType = AngularToleranc_1010_TypeChoicePair::AngularToleranc_1030E;
           $$->AngularToleranc_1010_TypeValue.AngularToleranc_1030 = $1;
          }
        | y_DefinitionId_QIFReferenceFullType
          {$$ = new AngularToleranc_1010_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularToleranc_1010_TypeType = AngularToleranc_1010_TypeChoicePair::DefinitionIdE;
           $$->AngularToleranc_1010_TypeValue.DefinitionId = $1;
          }
        | y_MinValue_AngularValueType
          {$$ = new AngularToleranc_1010_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AngularToleranc_1010_TypeType = AngularToleranc_1010_TypeChoicePair::MinValueE;
           $$->AngularToleranc_1010_TypeValue.MinValue = $1;
          }
        ;

y_AngularToleranc_1029_AngularToleranc_1029_Type :
          y_AngularToleranc_1029_Type
          {$$ = $1;}
        ;

y_AngularToleranc_1029_Type :
          y_MaxValue_AngularValueType y_MinValue_AngularValueType_0
          {$$ = new AngularToleranc_1029_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AngularToleranc_1030_AngularToleranc_1030_Type :
          y_AngularToleranc_1030_Type
          {$$ = $1;}
        ;

y_AngularToleranc_1030_Type :
          y_MaxValue_AngularValueType y_MinValue_AngularValueType_0
          {$$ = new AngularToleranc_1030_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AngularToleranceDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_AngularToleranc_1009_AngularToleranc_1009_Type
          {$$ = new AngularToleranceDefinitionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularToleranceDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_AngularToleranceType :
          ENDITEM y_AngularToleranc_1010_AngularToleranc_1010_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new AngularToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_AngularTolerance_AngularToleranceDefinitionType :
          AngularToleranceSTART y_AngularToleranceDefinitionType
          AngularToleranceEND
          {$$ = $2;}
        ;

y_AngularUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new AngularUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_AngularUnit_AngularUnitType :
          AngularUnitSTART y_AngularUnitType AngularUnitEND
          {$$ = $2;}
        ;

y_AngularUnit_AngularUnitType_0 :
          /* empty */
          {$$ = 0;}
        | AngularUnitSTART y_AngularUnitType AngularUnitEND
          {$$ = $2;}
        ;

y_AngularValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new AngularValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new AngularValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularValueType attributes");
             }
           delete $1;
          }
        ;

y_AngularityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_MaterialCondition_MaterialModifierEnumType
          y_SizeCharacteristicDefinitionId_QIFReferenceType_0
          y_ZoneShape_OrientationZoneShapeType y_TangentPlane_XmlBoolean_0
          y_MaximumToleranceValue_LinearValueType_0
          y_ProjectedToleranceZoneValue_LinearValueType_0
          y_OrientationChar_1064_OrientationChar_1064_Type_0
          {$$ = new AngularityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_AngularityCharacteristicDefinition_AngularityCharacteristicDefinitionType :
          AngularityCharacteristicDefinitionSTART
          y_AngularityCharacteristicDefinitionType
          AngularityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "AngularityCharacteristicDefinition";
          }
        ;

y_AngularityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new AngularityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_AngularityCharacteristicItem_AngularityCharacteristicItemType :
          AngularityCharacteristicItemSTART
          y_AngularityCharacteristicItemType
          AngularityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "AngularityCharacteristicItem";
          }
        ;

y_AngularityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0 y_DatumsOk_XmlBoolean_0
          y_Bonus_MeasuredLinearValueType_0
          y_ReferenceLength_LinearValueType_0
          y_DRFTransformActualId_QIFReferenceType_0
          {$$ = new AngularityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_AngularityCharacteristicMeasurement_AngularityCharacteristicMeasurementType :
          AngularityCharacteristicMeasurementSTART
          y_AngularityCharacteristicMeasurementType
          AngularityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "AngularityCharacteristicMeasurement";
          }
        ;

y_AngularityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_Angle_AngularValueType_0
          {$$ = new AngularityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AngularityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_AngularityCharacteristicNominal_AngularityCharacteristicNominalType :
          AngularityCharacteristicNominalSTART
          y_AngularityCharacteristicNominalType
          AngularityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "AngularityCharacteristicNominal";
          }
        ;

y_AngularityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_BonusStats_StatsLinearType_0
          y_ReferenceLengthStats_StatsLinearType_0
          {$$ = new AngularityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
          }
        ;

y_AngularityCharacteristicStats_AngularityCharacteristicStatsEvalType :
          AngularityCharacteristicStatsSTART
          y_AngularityCharacteristicStatsEvalType
          AngularityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "AngularityCharacteristicStats";
          }
        ;

y_AnnotationHiddenIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | AnnotationHiddenIdsSTART y_ArrayReferenceFullType
          AnnotationHiddenIdsEND
          {$$ = $2;}
        ;

y_AnnotationViewId_ElementReferenceType :
          AnnotationViewIdSTART y_ElementReferenceType AnnotationViewIdEND
          {$$ = $2;}
        ;

y_AnnotationViewSetType :
          y_LiztAttributePair ENDITEM
          y_LiztAnnotationView_AnnotationViewType_1_u
          {$$ = new AnnotationViewSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AnnotationViewSetType attributes");
             }
           delete $1;
          }
        ;

y_AnnotationViewSet_AnnotationViewSetType_0 :
          /* empty */
          {$$ = 0;}
        | AnnotationViewSetSTART y_AnnotationViewSetType
          AnnotationViewSetEND
          {$$ = $2;}
        ;

y_AnnotationViewType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Normal_UnitVectorType y_Direction_UnitVectorType
          {$$ = new AnnotationViewType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AnnotationViewType attributes");
             }
           delete $1;
          }
        ;

y_AnnotationView_AnnotationViewType :
          AnnotationViewSTART y_AnnotationViewType AnnotationViewEND
          {$$ = $2;
           $$->printElement = "AnnotationView";
          }
        ;

y_AnnotationVisibleIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | AnnotationVisibleIdsSTART y_ArrayReferenceFullType
          AnnotationVisibleIdsEND
          {$$ = $2;}
        ;

y_ApertureSize_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ApertureSizeSTART y_LinearValueType ApertureSizeEND
          {$$ = $2;}
        ;

y_Applicability_RoughnessApplicabilityEnumType_0 :
          /* empty */
          {$$ = 0;}
        | ApplicabilitySTART ENDITEM {yyReadData = 1;}
          y_RoughnessApplicabilityEnumType ApplicabilityEND
          {$$ = $4;}
        ;

y_Applicability_substituteType :
          y_May_QIFMayType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MustNot_QIFMustNotType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Must_QIFMustType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ApplicationName_XmlToken :
          ApplicationNameSTART ENDITEM {yyReadData = 1;} y_XmlToken
          ApplicationNameEND
          {$$ = $4;}
        ;

y_ApplicationSource_ApplicationType_0 :
          /* empty */
          {$$ = 0;}
        | ApplicationSourceSTART y_ApplicationType ApplicationSourceEND
          {$$ = $2;}
        ;

y_ApplicationTool_SoftwareType_0 :
          /* empty */
          {$$ = 0;}
        | ApplicationToolSTART y_SoftwareType ApplicationToolEND
          {$$ = $2;}
        ;

y_ApplicationType :
          ENDITEM y_Name_XmlString y_Organization_XmlString_0
          y_AddonName_XmlString_0 y_AddonOrganization_XmlString_0
          {$$ = new ApplicationType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_Application_ApplicationType_0 :
          /* empty */
          {$$ = 0;}
        | ApplicationSTART y_ApplicationType ApplicationEND
          {$$ = $2;}
        ;

y_AppliedFrequency_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | AppliedFrequencySTART y_UserDefinedUnitValueType
          AppliedFrequencyEND
          {$$ = $2;}
        ;

y_AppraiserVariation_StatsMeasuredDecimalType :
          AppraiserVariationSTART y_StatsMeasuredDecimalType
          AppraiserVariationEND
          {$$ = $2;
           $$->printElement = "AppraiserVariation";
          }
        ;

y_ArcCircular12CoreType :
          y_LiztAttributePair ENDITEM y_Radius_XmlDouble
          y_Center_Point2dSimpleType y_DirBeg_UnitVector2dSimpleType
          {$$ = new ArcCircular12CoreType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcCircular12CoreType attributes");
             }
           delete $1;
          }
        ;

y_ArcCircular12Core_ArcCircular12CoreType :
          ArcCircular12CoreSTART y_ArcCircular12CoreType
          ArcCircular12CoreEND
          {$$ = $2;
           $$->printElement = "ArcCircular12Core";
          }
        ;

y_ArcCircular12Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ArcCircular12Core_ArcCircular12CoreType
          {$$ = new ArcCircular12Type($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcCircular12Type attributes");
             }
           delete $1;
          }
        ;

y_ArcCircular12_ArcCircular12Type :
          ArcCircular12START y_ArcCircular12Type ArcCircular12END
          {$$ = $2;
           $$->printElement = "ArcCircular12";
          }
        ;

y_ArcCircular13CoreType :
          y_LiztAttributePair ENDITEM y_Radius_XmlDouble
          y_Center_PointSimpleType y_DirBeg_UnitVectorSimpleType
          y_Normal_UnitVectorSimpleType
          {$$ = new ArcCircular13CoreType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcCircular13CoreType attributes");
             }
           delete $1;
          }
        ;

y_ArcCircular13Core_ArcCircular13CoreType :
          ArcCircular13CoreSTART y_ArcCircular13CoreType
          ArcCircular13CoreEND
          {$$ = $2;
           $$->printElement = "ArcCircular13Core";
          }
        ;

y_ArcCircular13Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ArcCircular13Core_ArcCircular13CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new ArcCircular13Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcCircular13Type attributes");
             }
           delete $1;
          }
        ;

y_ArcCircular13_ArcCircular13Type :
          ArcCircular13START y_ArcCircular13Type ArcCircular13END
          {$$ = $2;
           $$->printElement = "ArcCircular13";
          }
        ;

y_ArcConic12CoreType :
          y_LiztAttributePair ENDITEM y_A_XmlDouble y_B_XmlDouble
          y_Center_Point2dSimpleType y_DirBeg_UnitVector2dSimpleType
          {$$ = new ArcConic12CoreType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcConic12CoreType attributes");
             }
           delete $1;
          }
        ;

y_ArcConic12Core_ArcConic12CoreType :
          ArcConic12CoreSTART y_ArcConic12CoreType ArcConic12CoreEND
          {$$ = $2;
           $$->printElement = "ArcConic12Core";
          }
        ;

y_ArcConic12Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ArcConic12Core_ArcConic12CoreType
          {$$ = new ArcConic12Type($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcConic12Type attributes");
             }
           delete $1;
          }
        ;

y_ArcConic12_ArcConic12Type :
          ArcConic12START y_ArcConic12Type ArcConic12END
          {$$ = $2;
           $$->printElement = "ArcConic12";
          }
        ;

y_ArcConic13CoreType :
          y_LiztAttributePair ENDITEM y_A_XmlDouble y_B_XmlDouble
          y_Center_PointSimpleType y_DirBeg_UnitVectorSimpleType
          y_Normal_UnitVectorSimpleType
          {$$ = new ArcConic13CoreType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcConic13CoreType attributes");
             }
           delete $1;
          }
        ;

y_ArcConic13Core_ArcConic13CoreType :
          ArcConic13CoreSTART y_ArcConic13CoreType ArcConic13CoreEND
          {$$ = $2;
           $$->printElement = "ArcConic13Core";
          }
        ;

y_ArcConic13Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ArcConic13Core_ArcConic13CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new ArcConic13Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArcConic13Type attributes");
             }
           delete $1;
          }
        ;

y_ArcConic13_ArcConic13Type :
          ArcConic13START y_ArcConic13Type ArcConic13END
          {$$ = $2;
           $$->printElement = "ArcConic13";
          }
        ;

y_ArcRadius_LinearValueType :
          ArcRadiusSTART y_LinearValueType ArcRadiusEND
          {$$ = $2;}
        ;

y_Area2dType :
          ENDITEM y_Area2dTypeChoicePair
          {$$ = new Area2dType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Area2dTypeChoicePair :
          y_Loops_Loops2dType
          {$$ = new Area2dTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Area2dTypeType = Area2dTypeChoicePair::LoopsE;
           $$->Area2dTypeValue.Loops = $1;
          }
        | y_Triangulation_Triangulation2dType
          {$$ = new Area2dTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Area2dTypeType = Area2dTypeChoicePair::TriangulationE;
           $$->Area2dTypeValue.Triangulation = $1;
          }
        ;

y_AreaAbsoluteLinearity_MeasuredAreaValueType :
          AreaAbsoluteLinearitySTART y_MeasuredAreaValueType
          AreaAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_AreaCharacteris_1047_AreaCharacteris_1047_Type :
          y_AreaCharacteris_1047_Type
          {$$ = $1;}
        ;

y_AreaCharacteris_1047_Type :
          y_AreaCharacteris_1047_TypeChoicePair
          {$$ = new AreaCharacteris_1047_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AreaCharacteris_1047_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new AreaCharacteris_1047_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AreaCharacteris_1047_TypeType = AreaCharacteris_1047_TypeChoicePair::NonToleranceE;
           $$->AreaCharacteris_1047_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_AreaToleranceType
          {$$ = new AreaCharacteris_1047_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AreaCharacteris_1047_TypeType = AreaCharacteris_1047_TypeChoicePair::ToleranceE;
           $$->AreaCharacteris_1047_TypeValue.Tolerance = $1;
          }
        ;

y_AreaCriterion_CriterionAreaType_0 :
          /* empty */
          {$$ = 0;}
        | AreaCriterionSTART y_CriterionAreaType AreaCriterionEND
          {$$ = $2;
           $$->printElement = "AreaCriterion";
          }
        ;

y_AreaEnum_CriticalityAreaEnumType :
          AreaEnumSTART ENDITEM {yyReadData = 1;} y_CriticalityAreaEnumType
          AreaEnumEND
          {$$ = $4;}
        ;

y_AreaEnum_ProductDataQualityAreaEnumType :
          AreaEnumSTART ENDITEM {yyReadData = 1;}
          y_ProductDataQualityAreaEnumType AreaEnumEND
          {$$ = $4;}
        ;

y_AreaLimit_AreaValueType_0 :
          /* empty */
          {$$ = 0;}
        | AreaLimitSTART y_AreaValueType AreaLimitEND
          {$$ = $2;}
        ;

y_AreaMeasurement_MeasuredAreaValueType_0 :
          /* empty */
          {$$ = 0;}
        | AreaMeasurementSTART y_MeasuredAreaValueType AreaMeasurementEND
          {$$ = $2;}
        ;

y_AreaStatsSummaries_SummariesStatisticsAreaType_0 :
          /* empty */
          {$$ = 0;}
        | AreaStatsSummariesSTART y_SummariesStatisticsAreaType
          AreaStatsSummariesEND
          {$$ = $2;}
        ;

y_AreaStatsSummary_SummaryStatisticsAreaType :
          AreaStatsSummarySTART y_SummaryStatisticsAreaType
          AreaStatsSummaryEND
          {$$ = $2;
           $$->printElement = "AreaStatsSummary";
          }
        ;

y_AreaToleranceTy_1011_AreaToleranceTy_1011_Type :
          y_AreaToleranceTy_1011_Type
          {$$ = $1;}
        ;

y_AreaToleranceTy_1011_Type :
          y_AreaToleranceTy_1011_TypeChoicePair
          {$$ = new AreaToleranceTy_1011_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AreaToleranceTy_1011_TypeChoicePair :
          y_AreaToleranceTy_1031_AreaToleranceTy_1031_Type
          {$$ = new AreaToleranceTy_1011_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AreaToleranceTy_1011_TypeType = AreaToleranceTy_1011_TypeChoicePair::AreaToleranceTy_1031E;
           $$->AreaToleranceTy_1011_TypeValue.AreaToleranceTy_1031 = $1;
          }
        | y_MinValue_AreaValueType
          {$$ = new AreaToleranceTy_1011_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AreaToleranceTy_1011_TypeType = AreaToleranceTy_1011_TypeChoicePair::MinValueE;
           $$->AreaToleranceTy_1011_TypeValue.MinValue = $1;
          }
        ;

y_AreaToleranceTy_1031_AreaToleranceTy_1031_Type :
          y_AreaToleranceTy_1031_Type
          {$$ = $1;}
        ;

y_AreaToleranceTy_1031_Type :
          y_MaxValue_AreaValueType y_MinValue_AreaValueType_0
          {$$ = new AreaToleranceTy_1031_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_AreaToleranceType :
          ENDITEM y_AreaToleranceTy_1011_AreaToleranceTy_1011_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new AreaToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_AreaUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new AreaUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_AreaUnit_AreaUnitType :
          AreaUnitSTART y_AreaUnitType AreaUnitEND
          {$$ = $2;}
        ;

y_AreaUnit_AreaUnitType_0 :
          /* empty */
          {$$ = 0;}
        | AreaUnitSTART y_AreaUnitType AreaUnitEND
          {$$ = $2;}
        ;

y_AreaValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new AreaValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new AreaValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AreaValueType attributes");
             }
           delete $1;
          }
        ;

y_Area_Area2dType :
          AreaSTART y_Area2dType AreaEND
          {$$ = $2;}
        ;

y_Area_SectionAreaType :
          AreaSTART y_SectionAreaType AreaEND
          {$$ = $2;}
        ;

y_Area_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | AreaSTART ENDITEM {yyReadData = 1;} y_XmlDouble AreaEND
          {$$ = $4;}
        ;

y_Areas2dType :
          y_LiztAttributePair ENDITEM y_LiztArea_Area2dType_1_u
          {$$ = new Areas2dType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Areas2dType attributes");
             }
           delete $1;
          }
        ;

y_Areas_Areas2dType_0 :
          /* empty */
          {$$ = 0;}
        | AreasSTART y_Areas2dType AreasEND
          {$$ = $2;}
        ;

y_Areas_SectionAreasType_0 :
          /* empty */
          {$$ = 0;}
        | AreasSTART y_SectionAreasType AreasEND
          {$$ = $2;}
        ;

y_ArithmeticCharacteristicParameterType :
          ENDITEM y_Parameter_XmlToken
          y_CharacteristicTypeEnum_CharacteristicTypeEnumType_0
          {$$ = new ArithmeticCharacteristicParameterType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ArithmeticCharacteristicParameter_ArithmeticCharacteristicParameterType :
          ArithmeticCharacteristicParameterSTART
          y_ArithmeticCharacteristicParameterType
          ArithmeticCharacteristicParameterEND
          {$$ = $2;
           $$->printElement = "ArithmeticCharacteristicParameter";
          }
        ;

y_ArithmeticComparisonEnumType :
          DATASTRING
          {$$ = new ArithmeticComparisonEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ArithmeticComparisonEnumType value");
          }
        ;

y_ArithmeticConstantType :
          y_LiztAttributePair
          {$$ = new ArithmeticConstantType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArithmeticConstantType attributes");
             }
           delete $1;
          }
        ;

y_ArithmeticConstant_ArithmeticConstantType :
          ArithmeticConstantSTART y_ArithmeticConstantType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "ArithmeticConstant";
          }
        ;

y_ArithmeticDMEParameterType :
          ENDITEM y_Parameter_XmlToken
          y_DMEClassNameEnum_DMEClassNameEnumType
          {$$ = new ArithmeticDMEParameterType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ArithmeticDMEParameter_ArithmeticDMEParameterType :
          ArithmeticDMEParameterSTART y_ArithmeticDMEParameterType
          ArithmeticDMEParameterEND
          {$$ = $2;
           $$->printElement = "ArithmeticDMEParameter";
          }
        ;

y_ArithmeticEqualType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_2_Check
          {$$ = new ArithmeticEqualType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ArithmeticEqual_ArithmeticEqualType :
          ArithmeticEqualSTART y_ArithmeticEqualType ArithmeticEqualEND
          {$$ = $2;
           $$->printElement = "ArithmeticEqual";
          }
        ;

y_ArithmeticExpression_substituteType :
          y_ArithmeticCharacteristicParameter_ArithmeticCharacteristicParameterType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArithmeticConstant_ArithmeticConstantType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArithmeticDMEParameter_ArithmeticDMEParameterType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArithmeticFeatureParameter_ArithmeticFeatureParameterType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArithmeticParameterValue_ArithmeticParameterValueType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArithmeticPartParameter_ArithmeticPartParameterType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CharacteristicTolerance_CharacteristicToleranceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DividedBy_DividedByType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureArea_FeatureAreaType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureLength_FeatureLengthType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureSize_FeatureSizeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Max_MaxType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Min_MinType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Minus_MinusType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Negate_NegateType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Plus_PlusType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Times_TimesType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_VariableValue_VariableValueType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ArithmeticFeatureParameterType :
          ENDITEM y_Parameter_XmlToken
          y_FeatureTypeEnum_FeatureTypeEnumType_0
          {$$ = new ArithmeticFeatureParameterType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ArithmeticFeatureParameter_ArithmeticFeatureParameterType :
          ArithmeticFeatureParameterSTART y_ArithmeticFeatureParameterType
          ArithmeticFeatureParameterEND
          {$$ = $2;
           $$->printElement = "ArithmeticFeatureParameter";
          }
        ;

y_ArithmeticParameterValueType :
          ENDITEM y_Parameter_XmlToken y_ObjectId_QIFReferenceFullType
          {$$ = new ArithmeticParameterValueType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ArithmeticParameterValue_ArithmeticParameterValueType :
          ArithmeticParameterValueSTART y_ArithmeticParameterValueType
          ArithmeticParameterValueEND
          {$$ = $2;
           $$->printElement = "ArithmeticParameterValue";
          }
        ;

y_ArithmeticPartParameterType :
          ENDITEM y_Parameter_XmlToken
          {$$ = new ArithmeticPartParameterType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ArithmeticPartParameter_ArithmeticPartParameterType :
          ArithmeticPartParameterSTART y_ArithmeticPartParameterType
          ArithmeticPartParameterEND
          {$$ = $2;
           $$->printElement = "ArithmeticPartParameter";
          }
        ;

y_ArrayBinaryQIFR_1001_ArrayBinaryQIFR_1001_Type :
          y_ArrayBinaryQIFR_1001_Type
          {$$ = $1;}
        ;

y_ArrayBinaryQIFR_1001_Type :
          y_Id_QIFReferenceSimpleType y_XIds_ArrayBinaryType
          {$$ = new ArrayBinaryQIFR_1001_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ArrayBinaryQIFReferenceFullType :
          ENDITEM y_ArrayBinaryQIFReferenceTypeChoicePair
          {$$ = new ArrayBinaryQIFReferenceFullType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM
          y_ArrayBinaryQIFReferenceTypeChoicePair
          {$$ = new ArrayBinaryQIFReferenceFullType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayBinaryQIFReferenceFullType attributes");
             }
           delete $1;
          }
        ;

y_ArrayBinaryQIFReferenceType :
          ENDITEM y_ArrayBinaryQIFReferenceTypeChoicePair
          {$$ = new ArrayBinaryQIFReferenceType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ArrayBinaryQIFReferenceTypeChoicePair :
          y_ArrayBinaryQIFR_1001_ArrayBinaryQIFR_1001_Type
          {$$ = new ArrayBinaryQIFReferenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ArrayBinaryQIFReferenceTypeType = ArrayBinaryQIFReferenceTypeChoicePair::ArrayBinaryQIFR_1001E;
           $$->ArrayBinaryQIFReferenceTypeValue.ArrayBinaryQIFR_1001 = $1;
          }
        | y_Ids_ArrayBinaryType
          {$$ = new ArrayBinaryQIFReferenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ArrayBinaryQIFReferenceTypeType = ArrayBinaryQIFReferenceTypeChoicePair::IdsE;
           $$->ArrayBinaryQIFReferenceTypeValue.Ids = $1;
          }
        ;

y_ArrayBinaryType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new ArrayBinaryType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayBinaryType attributes");
             }
           delete $1;
          }
        ;

y_ArrayDoubleType :
          y_ArrayDoubleType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new ArrayDoubleType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayDoubleType attributes");
             }
           delete $1;
          }
        ;

y_ArrayI2Type :
          y_ArrayI2Type y_XmlInteger
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlInteger
          {$$ = new ArrayI2Type($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayI2Type attributes");
             }
           delete $1;
          }
        ;

y_ArrayI3Type :
          y_ArrayI3Type y_XmlInteger
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlInteger
          {$$ = new ArrayI3Type($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayI3Type attributes");
             }
           delete $1;
          }
        ;

y_ArrayIntType :
          y_ArrayIntType y_XmlInteger
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlInteger
          {$$ = new ArrayIntType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayIntType attributes");
             }
           delete $1;
          }
        ;

y_ArrayNaturalType :
          y_ArrayNaturalType y_NaturalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_NaturalType
          {$$ = new ArrayNaturalType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayNaturalType attributes");
             }
           delete $1;
          }
        ;

y_ArrayNonDestructiveTestingType :
          y_LiztAttributePair ENDITEM
          y_LiztTypeOfTest_NonDestructiveTestingEnumType_1_u
          {$$ = new ArrayNonDestructiveTestingType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayNonDestructiveTestingType attributes");
             }
           delete $1;
          }
        ;

y_ArrayPairReferenceFullType :
          y_LiztAttributePair ENDITEM
          y_LiztFeaturePair_QIFFeaturePairType_1_u
          {$$ = new ArrayPairReferenceFullType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayPairReferenceFullType attributes");
             }
           delete $1;
          }
        ;

y_ArrayPoint2dType :
          y_ArrayPoint2dType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new ArrayPoint2dType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayPoint2dType attributes");
             }
           delete $1;
          }
        ;

y_ArrayPointType :
          y_ArrayPointType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new ArrayPointType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayPointType attributes");
             }
           delete $1;
          }
        ;

y_ArrayQPIdFullReferenceType :
          y_LiztAttributePair ENDITEM y_LiztQPId_QPIdFullReferenceType_1_u
          {$$ = new ArrayQPIdFullReferenceType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayQPIdFullReferenceType attributes");
             }
           delete $1;
          }
        ;

y_ArrayReferenceActiveType :
          y_LiztAttributePair ENDITEM y_LiztId_QIFReferenceActiveType_1_u
          {$$ = new ArrayReferenceActiveType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayReferenceActiveType attributes");
             }
           delete $1;
          }
        ;

y_ArrayReferenceFullType :
          y_LiztAttributePair ENDITEM y_LiztId_QIFReferenceFullType_1_u
          {$$ = new ArrayReferenceFullType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayReferenceFullType attributes");
             }
           delete $1;
          }
        ;

y_ArrayReferenceType :
          y_LiztAttributePair ENDITEM y_LiztId_QIFReferenceType_1_u
          {$$ = new ArrayReferenceType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayReferenceType attributes");
             }
           delete $1;
          }
        ;

y_ArraySubCurve12Type :
          y_LiztAttributePair ENDITEM
          y_LiztSubCurve_Curve12OrientedType_1_u
          {$$ = new ArraySubCurve12Type($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArraySubCurve12Type attributes");
             }
           delete $1;
          }
        ;

y_ArraySubCurve13Type :
          y_LiztAttributePair ENDITEM
          y_LiztSubCurve_Curve13OrientedType_1_u
          {$$ = new ArraySubCurve13Type($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArraySubCurve13Type attributes");
             }
           delete $1;
          }
        ;

y_ArrayTriangleVertexNormalType :
          y_LiztAttributePair ENDITEM
          y_LiztNormalSpecial_TriangleVertexNormalType_1_u
          {$$ = new ArrayTriangleVertexNormalType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayTriangleVertexNormalType attributes");
             }
           delete $1;
          }
        ;

y_ArrayUnitVectorType :
          y_ArrayUnitVectorType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new ArrayUnitVectorType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayUnitVectorType attributes");
             }
           delete $1;
          }
        ;

y_ArrayUnsignedByteType :
          y_ArrayUnsignedByteType y_XmlUnsignedByte
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;}
          y_XmlUnsignedByte
          {$$ = new ArrayUnsignedByteType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ArrayUnsignedByteType attributes");
             }
           delete $1;
          }
        ;

y_ArrowSideContourSymbol_WeldContourSymbolType_0 :
          /* empty */
          {$$ = 0;}
        | ArrowSideContourSymbolSTART y_WeldContourSymbolType
          ArrowSideContourSymbolEND
          {$$ = $2;
           $$->printElement = "ArrowSideContourSymbol";
          }
        ;

y_ArrowSideParameters_WeldGrooveOneSideParametersType_0 :
          /* empty */
          {$$ = 0;}
        | ArrowSideParametersSTART ENDWHOLEITEM
          {$$ = new WeldGrooveOneSideParametersType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ArrowSideParameters";
          }
        | ArrowSideParametersSTART y_WeldGrooveOneSideParametersType
          ArrowSideParametersEND
          {$$ = $2;
           $$->printElement = "ArrowSideParameters";
          }
        ;

y_ArrowSideParameters_WeldOneSideParametersExtendSizeType_0 :
          /* empty */
          {$$ = 0;}
        | ArrowSideParametersSTART ENDWHOLEITEM
          {$$ = new WeldOneSideParametersExtendSizeType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ArrowSideParameters";
          }
        | ArrowSideParametersSTART y_WeldOneSideParametersExtendSizeType
          ArrowSideParametersEND
          {$$ = $2;
           $$->printElement = "ArrowSideParameters";
          }
        ;

y_ArrowSideParameters_WeldOneSideParametersExtendType_0 :
          /* empty */
          {$$ = 0;}
        | ArrowSideParametersSTART ENDWHOLEITEM
          {$$ = new WeldOneSideParametersExtendType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ArrowSideParameters";
          }
        | ArrowSideParametersSTART y_WeldOneSideParametersExtendType
          ArrowSideParametersEND
          {$$ = $2;
           $$->printElement = "ArrowSideParameters";
          }
        ;

y_ArrowSide_WeldFilletOneSideInBothSidesType_0 :
          /* empty */
          {$$ = 0;}
        | ArrowSideSTART ENDWHOLEITEM
          {$$ = new WeldFilletOneSideInBothSidesType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ArrowSide";
          }
        | ArrowSideSTART y_WeldFilletOneSideInBothSidesType ArrowSideEND
          {$$ = $2;
           $$->printElement = "ArrowSide";
          }
        ;

y_AsmPathId_QIFReferenceType :
          AsmPathIdSTART y_QIFReferenceType AsmPathIdEND
          {$$ = $2;}
        ;

y_AsmPathId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | AsmPathIdSTART y_QIFReferenceType AsmPathIdEND
          {$$ = $2;}
        ;

y_AsmPathIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | AsmPathIdsSTART y_ArrayReferenceType AsmPathIdsEND
          {$$ = $2;}
        ;

y_AsmPathType :
          y_LiztAttributePair ENDITEM y_ComponentIds_ArrayReferenceType_0
          {$$ = new AsmPathType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AsmPathType attributes");
             }
           delete $1;
          }
        ;

y_AsmPath_AsmPathType :
          AsmPathSTART y_AsmPathType AsmPathEND
          {$$ = $2;}
        | AsmPathSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new AsmPathType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad AsmPathType attributes");
             }
           delete $2;
          }
        ;

y_AsmPathsType :
          y_LiztAttributePair ENDITEM y_LiztAsmPath_AsmPathType_1_u
          {$$ = new AsmPathsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AsmPathsType attributes");
             }
           delete $1;
          }
        ;

y_AsmPaths_AsmPathsType_0 :
          /* empty */
          {$$ = 0;}
        | AsmPathsSTART y_AsmPathsType AsmPathsEND
          {$$ = $2;}
        ;

y_AssemblySetType :
          y_LiztAttributePair ENDITEM y_LiztAssembly_AssemblyType_1_u
          {$$ = new AssemblySetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AssemblySetType attributes");
             }
           delete $1;
          }
        ;

y_AssemblySet_AssemblySetType_0 :
          /* empty */
          {$$ = 0;}
        | AssemblySetSTART y_AssemblySetType AssemblySetEND
          {$$ = $2;}
        ;

y_AssemblyType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Validation_ValidationPartAssemblyType_0
          y_Header_PartAssemblyHeaderType_0 y_UUID_QPIdType_0
          y_ModelNumber_XmlString_0 y_Version_XmlString_0
          y_SecurityClassification_SecurityClassificationType_0
          y_ExportControlClassification_XmlString_0
          y_FeatureNominalIds_ArrayReferenceType_0
          y_FeatureZoneIds_ArrayReferenceType_0
          y_CharacteristicNominalIds_ArrayReferenceType_0
          y_NoteIds_ArrayReferenceType_0 y_PartNoteIds_ArrayReferenceType_0
          y_DatumDefinitionIds_ArrayReferenceType_0
          y_DatumTargetDefinitionIds_ArrayReferenceType_0
          y_DatumReferenceFrameIds_ArrayReferenceType_0
          y_BodyIds_ArrayReferenceType_0
          y_CoordinateSystemIds_ArrayReferenceType_0
          y_AuxiliaryIds_ArrayReferenceType_0
          y_ViewIds_ArrayReferenceType_0
          y_PointCloudIds_ArrayReferenceType_0
          y_ComponentIds_ArrayReferenceType
          y_DefinitionExternal_DefinitionExternalType_0
          y_FoldersAssembly_FoldersAssemblyType_0
          {$$ = new AssemblyType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AssemblyType attributes");
             }
           delete $1;
          }
        ;

y_Assembly_AssemblyType :
          AssemblySTART y_AssemblyType AssemblyEND
          {$$ = $2;
           $$->printElement = "Assembly";
          }
        ;

y_Assembly_ElementReferenceType :
          AssemblySTART y_ElementReferenceType AssemblyEND
          {$$ = $2;}
        ;

y_AssignableCauseEnumType :
          DATASTRING
          {$$ = new AssignableCauseEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad AssignableCauseEnumType value");
          }
        ;

y_AssignableCauseEnum_AssignableCauseEnumType :
          AssignableCauseEnumSTART ENDITEM {yyReadData = 1;}
          y_AssignableCauseEnumType AssignableCauseEnumEND
          {$$ = $4;}
        ;

y_AssignableCauseIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | AssignableCauseIdsSTART y_ArrayReferenceType
          AssignableCauseIdsEND
          {$$ = $2;}
        ;

y_AssignableCauseType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_AssignableCause_1127_AssignableCause_1127_Type
          y_CorrectiveActionIds_ArrayReferenceType_0
          {$$ = new AssignableCauseType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AssignableCauseType attributes");
             }
           delete $1;
          }
        ;

y_AssignableCause_1127_AssignableCause_1127_Type :
          y_AssignableCause_1127_Type
          {$$ = $1;}
        ;

y_AssignableCause_1127_Type :
          y_AssignableCause_1127_TypeChoicePair
          {$$ = new AssignableCause_1127_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AssignableCause_1127_TypeChoicePair :
          y_AssignableCauseEnum_AssignableCauseEnumType
          {$$ = new AssignableCause_1127_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AssignableCause_1127_TypeType = AssignableCause_1127_TypeChoicePair::AssignableCauseEnumE;
           $$->AssignableCause_1127_TypeValue.AssignableCauseEnum = $1;
          }
        | y_Description_XmlString
          {$$ = new AssignableCause_1127_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->AssignableCause_1127_TypeType = AssignableCause_1127_TypeChoicePair::DescriptionE;
           $$->AssignableCause_1127_TypeValue.Description = $1;
          }
        ;

y_AssignableCause_AssignableCauseType :
          AssignableCauseSTART y_AssignableCauseType AssignableCauseEND
          {$$ = $2;}
        ;

y_AssignableCausesType :
          y_LiztAttributePair ENDITEM
          y_LiztAssignableCause_AssignableCauseType_1_u
          {$$ = new AssignableCausesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AssignableCausesType attributes");
             }
           delete $1;
          }
        ;

y_AssignableCauses_AssignableCausesType :
          AssignableCausesSTART y_AssignableCausesType AssignableCausesEND
          {$$ = $2;}
        ;

y_AssociatedTolerancedFeatureSpecificationElementEnumType :
          DATASTRING
          {$$ = new AssociatedTolerancedFeatureSpecificationElementEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad AssociatedTolerancedFeatureSpecificationElementEnumType value");
          }
        ;

y_AssociatedTolerancedFeatureSpecificationElement_AssociatedTolerancedFeatureSpecificationElementEnumType :
          AssociatedTolerancedFeatureSpecificationElementSTART ENDITEM
          {yyReadData = 1;}
          y_AssociatedTolerancedFeatureSpecificationElementEnumType
          AssociatedTolerancedFeatureSpecificationElementEND
          {$$ = $4;}
        ;

y_AssociatedTraceabilityId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | AssociatedTraceabilityIdSTART y_QIFReferenceType
          AssociatedTraceabilityIdEND
          {$$ = $2;}
        ;

y_Association_ReferenceFeatureAssociationSpecificationElementEnumType :
          AssociationSTART ENDITEM {yyReadData = 1;}
          y_ReferenceFeatureAssociationSpecificationElementEnumType
          AssociationEND
          {$$ = $4;}
        ;

y_AttributeBoolType :
          y_LiztAttributePair
          {$$ = new AttributeBoolType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeBoolType attributes");
             }
           delete $1;
          }
        ;

y_AttributeBool_AttributeBoolType :
          AttributeBoolSTART y_AttributeBoolType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeBool";
          }
        ;

y_AttributeD1Type :
          y_LiztAttributePair
          {$$ = new AttributeD1Type();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeD1Type attributes");
             }
           delete $1;
          }
        ;

y_AttributeD1_AttributeD1Type :
          AttributeD1START y_AttributeD1Type ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeD1";
          }
        ;

y_AttributeD2Type :
          y_LiztAttributePair
          {$$ = new AttributeD2Type();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeD2Type attributes");
             }
           delete $1;
          }
        ;

y_AttributeD2_AttributeD2Type :
          AttributeD2START y_AttributeD2Type ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeD2";
          }
        ;

y_AttributeD3Type :
          y_LiztAttributePair
          {$$ = new AttributeD3Type();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeD3Type attributes");
             }
           delete $1;
          }
        ;

y_AttributeD3_AttributeD3Type :
          AttributeD3START y_AttributeD3Type ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeD3";
          }
        ;

y_AttributeI1Type :
          y_LiztAttributePair
          {$$ = new AttributeI1Type();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeI1Type attributes");
             }
           delete $1;
          }
        ;

y_AttributeI1_AttributeI1Type :
          AttributeI1START y_AttributeI1Type ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeI1";
          }
        ;

y_AttributeI2Type :
          y_LiztAttributePair
          {$$ = new AttributeI2Type();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeI2Type attributes");
             }
           delete $1;
          }
        ;

y_AttributeI2_AttributeI2Type :
          AttributeI2START y_AttributeI2Type ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeI2";
          }
        ;

y_AttributeI3Type :
          y_LiztAttributePair
          {$$ = new AttributeI3Type();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeI3Type attributes");
             }
           delete $1;
          }
        ;

y_AttributeI3_AttributeI3Type :
          AttributeI3START y_AttributeI3Type ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeI3";
          }
        ;

y_AttributeQPIdType :
          y_LiztAttributePair ENDITEM y_Value_QPIdType
          {$$ = new AttributeQPIdType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeQPIdType attributes");
             }
           delete $1;
          }
        ;

y_AttributeQPId_AttributeQPIdType :
          AttributeQPIdSTART y_AttributeQPIdType AttributeQPIdEND
          {$$ = $2;
           $$->printElement = "AttributeQPId";
          }
        ;

y_AttributeStats_StatsPassFailType_0 :
          /* empty */
          {$$ = 0;}
        | AttributeStatsSTART y_StatsPassFailType AttributeStatsEND
          {$$ = $2;
           $$->printElement = "AttributeStats";
          }
        ;

y_AttributeStrType :
          y_LiztAttributePair
          {$$ = new AttributeStrType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeStrType attributes");
             }
           delete $1;
          }
        ;

y_AttributeStr_AttributeStrType :
          AttributeStrSTART y_AttributeStrType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeStr";
          }
        ;

y_AttributeTimeType :
          y_LiztAttributePair
          {$$ = new AttributeTimeType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeTimeType attributes");
             }
           delete $1;
          }
        ;

y_AttributeTime_AttributeTimeType :
          AttributeTimeSTART y_AttributeTimeType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "AttributeTime";
          }
        ;

y_AttributeUserType :
          y_LiztAttributePair ENDITEM y_UserDataBinary_BinaryDataType
          {$$ = new AttributeUserType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributeUserType attributes");
             }
           delete $1;
          }
        ;

y_AttributeUser_AttributeUserType :
          AttributeUserSTART y_AttributeUserType AttributeUserEND
          {$$ = $2;
           $$->printElement = "AttributeUser";
          }
        ;

y_Attribute_substituteType :
          y_AttributeBool_AttributeBoolType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeD1_AttributeD1Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeD2_AttributeD2Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeD3_AttributeD3Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeI1_AttributeI1Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeI2_AttributeI2Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeI3_AttributeI3Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeQPId_AttributeQPIdType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeStr_AttributeStrType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeTime_AttributeTimeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AttributeUser_AttributeUserType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AttributesType :
          y_LiztAttributePair ENDITEM y_LiztAttribute_substituteType_1_u
          {$$ = new AttributesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AttributesType attributes");
             }
           delete $1;
          }
        ;

y_Attributes_AttributesType_0 :
          /* empty */
          {$$ = 0;}
        | AttributesSTART y_AttributesType AttributesEND
          {$$ = $2;}
        ;

y_AuthorType :
          ENDITEM y_Name_XmlString_0 y_Organization_XmlString_0
          {$$ = new AuthorType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Author_AuthorType_0 :
          /* empty */
          {$$ = 0;}
        | AuthorSTART ENDWHOLEITEM
          {$$ = new AuthorType();
           yyUnrefMap[$$] = $$;
          }
        | AuthorSTART y_AuthorType AuthorEND
          {$$ = $2;}
        ;

y_Author_EmployeeType :
          AuthorSTART y_EmployeeType AuthorEND
          {$$ = $2;}
        ;

y_AutocollimatorMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new AutocollimatorMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AutocollimatorMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_AutocollimatorMeasureFeatureMethod_AutocollimatorMeasureFeatureMethodType :
          AutocollimatorMeasureFeatureMethodSTART
          y_AutocollimatorMeasureFeatureMethodType
          AutocollimatorMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "AutocollimatorMeasureFeatureMethod";
          }
        | AutocollimatorMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new AutocollimatorMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "AutocollimatorMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad AutocollimatorMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_AutocollimatorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_LightSource_XmlString_0 y_MeasuringAccuracy_AngularErrorType_0
          y_Magnification_XmlDecimal_0 y_ApertureSize_LinearValueType_0
          y_MinMeasuringDistance_AngularValueType_0
          y_MaxMeasuringDistance_AngularValueType_0
          y_ObjectiveFocalLength_LinearValueType_0
          y_FieldOfView_AngularValueType_0
          {$$ = new AutocollimatorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AutocollimatorType attributes");
             }
           delete $1;
          }
        ;

y_Autocollimator_AutocollimatorType :
          AutocollimatorSTART y_AutocollimatorType AutocollimatorEND
          {$$ = $2;
           $$->printElement = "Autocollimator";
          }
        ;

y_AuxiliaryIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | AuxiliaryIdsSTART y_ArrayReferenceType AuxiliaryIdsEND
          {$$ = $2;}
        ;

y_AuxiliarySetType :
          y_LiztAttributePair ENDITEM y_LiztAuxiliary_substituteType_1_u
          {$$ = new AuxiliarySetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AuxiliarySetType attributes");
             }
           delete $1;
          }
        ;

y_AuxiliarySet_AuxiliarySetType_0 :
          /* empty */
          {$$ = 0;}
        | AuxiliarySetSTART y_AuxiliarySetType AuxiliarySetEND
          {$$ = $2;}
        ;

y_Auxiliary_substituteType :
          y_LineAuxiliary_LineAuxiliaryType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PlaneReference_PlaneReferenceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointAuxiliary_PointAuxiliaryType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AverageDiameter_XmlDecimal :
          AverageDiameterSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          AverageDiameterEND
          {$$ = $4;}
        ;

y_AverageFeatureType :
          ENDITEM y_FeatureMeasurement_substituteType
          y_MeasuredIds_StatsArrayIdType
          {$$ = new AverageFeatureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_AverageFeature_AverageFeatureType :
          AverageFeatureSTART y_AverageFeatureType AverageFeatureEND
          {$$ = $2;}
        ;

y_AverageFeaturesType :
          y_LiztAttributePair ENDITEM
          y_LiztAverageFeature_AverageFeatureType_1_u
          {$$ = new AverageFeaturesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad AverageFeaturesType attributes");
             }
           delete $1;
          }
        ;

y_AverageFeatures_AverageFeaturesType_0 :
          /* empty */
          {$$ = 0;}
        | AverageFeaturesSTART y_AverageFeaturesType AverageFeaturesEND
          {$$ = $2;}
        ;

y_AverageRange_StatsMeasuredDecimalType :
          AverageRangeSTART y_StatsMeasuredDecimalType AverageRangeEND
          {$$ = $2;
           $$->printElement = "AverageRange";
          }
        ;

y_AverageSpotDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | AverageSpotDiameterSTART y_LinearValueType AverageSpotDiameterEND
          {$$ = $2;}
        ;

y_Average_StatsMeasuredDecimalType :
          AverageSTART y_StatsMeasuredDecimalType AverageEND
          {$$ = $2;
           $$->printElement = "Average";
          }
        ;

y_AxesRotationAngle_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | AxesRotationAngleSTART y_AngularValueType AxesRotationAngleEND
          {$$ = $2;}
        ;

y_AxesTravelDistance_XYZLinearSpecificationType_0 :
          /* empty */
          {$$ = 0;}
        | AxesTravelDistanceSTART ENDWHOLEITEM
          {$$ = new XYZLinearSpecificationType();
           yyUnrefMap[$$] = $$;
          }
        | AxesTravelDistanceSTART y_XYZLinearSpecificationType
          AxesTravelDistanceEND
          {$$ = $2;}
        ;

y_AxialDifferentialScaleType :
          ENDITEM y_XScaleFactor_XmlDecimal y_XaxisDirection_UnitVectorType
          y_YScaleFactor_XmlDecimal y_YaxisDirection_UnitVectorType
          y_ZScaleFactor_XmlDecimal y_ZaxisDirection_UnitVectorType
          {$$ = new AxialDifferentialScaleType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_AxialDifferentialScale_AxialDifferentialScaleType :
          AxialDifferentialScaleSTART y_AxialDifferentialScaleType
          AxialDifferentialScaleEND
          {$$ = $2;}
        ;

y_AxialError_LinearValueType :
          AxialErrorSTART y_LinearValueType AxialErrorEND
          {$$ = $2;}
        ;

y_AxisBacklash_XYZLinearSpecificationType_0 :
          /* empty */
          {$$ = 0;}
        | AxisBacklashSTART ENDWHOLEITEM
          {$$ = new XYZLinearSpecificationType();
           yyUnrefMap[$$] = $$;
          }
        | AxisBacklashSTART y_XYZLinearSpecificationType AxisBacklashEND
          {$$ = $2;}
        ;

y_AxisDirection_UnitVectorType :
          AxisDirectionSTART y_UnitVectorType AxisDirectionEND
          {$$ = $2;}
        ;

y_AxisName_XmlToken :
          AxisNameSTART ENDITEM {yyReadData = 1;} y_XmlToken AxisNameEND
          {$$ = $4;}
        ;

y_AxisPoint_MeasuredPointType :
          AxisPointSTART y_MeasuredPointType AxisPointEND
          {$$ = $2;}
        ;

y_AxisPoint_PointType :
          AxisPointSTART y_PointType AxisPointEND
          {$$ = $2;}
        ;

y_AxisRepeatability_XYZLinearSpecificationType_0 :
          /* empty */
          {$$ = 0;}
        | AxisRepeatabilitySTART ENDWHOLEITEM
          {$$ = new XYZLinearSpecificationType();
           yyUnrefMap[$$] = $$;
          }
        | AxisRepeatabilitySTART y_XYZLinearSpecificationType
          AxisRepeatabilityEND
          {$$ = $2;}
        ;

y_AxisType :
          ENDITEM y_AxisPoint_PointType y_Direction_UnitVectorType
          {$$ = new AxisType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_AxisVector_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | AxisVectorSTART y_MeasuredUnitVectorType AxisVectorEND
          {$$ = $2;}
        ;

y_AxisVector_UnitVectorType :
          AxisVectorSTART y_UnitVectorType AxisVectorEND
          {$$ = $2;}
        ;

y_Axis_AxisType :
          AxisSTART y_AxisType AxisEND
          {$$ = $2;}
        ;

y_Axis_MeasuredAxisType_0 :
          /* empty */
          {$$ = 0;}
        | AxisSTART y_MeasuredAxisType AxisEND
          {$$ = $2;}
        ;

y_Axis_UnitVectorType :
          AxisSTART y_UnitVectorType AxisEND
          {$$ = $2;}
        ;

y_Axis_substituteType :
          y_LinearAxis_LinearAxisType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RotaryAxis_RotaryAxisType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_AzimuthAngularAccuracy_AngularErrorType_0 :
          /* empty */
          {$$ = 0;}
        | AzimuthAngularAccuracySTART y_AngularErrorType
          AzimuthAngularAccuracyEND
          {$$ = $2;}
        ;

y_AzimuthalAngleResolution_AngularValueType :
          AzimuthalAngleResolutionSTART y_AngularValueType
          AzimuthalAngleResolutionEND
          {$$ = $2;}
        ;

y_BAxisResolution_LinearOrRotaryAxisType :
          BAxisResolutionSTART y_LinearOrRotaryAxisType BAxisResolutionEND
          {$$ = $2;}
        ;

y_BCombinedResolution_LinearOrRotaryAxisType :
          BCombinedResolutionSTART y_LinearOrRotaryAxisType
          BCombinedResolutionEND
          {$$ = $2;}
        ;

y_B_XmlDouble :
          BSTART ENDITEM {yyReadData = 1;} y_XmlDouble BEND
          {$$ = $4;}
        ;

y_BalloonLocation_CharacteristicBalloonLocationEnumType :
          BalloonLocationSTART ENDITEM {yyReadData = 1;}
          y_CharacteristicBalloonLocationEnumType BalloonLocationEND
          {$$ = $4;}
        ;

y_BalloonStyle_CharacteristicBalloonStyleEnumType :
          BalloonStyleSTART ENDITEM {yyReadData = 1;}
          y_CharacteristicBalloonStyleEnumType BalloonStyleEND
          {$$ = $4;}
        ;

y_Balloon_CharacteristicBalloonType_0 :
          /* empty */
          {$$ = 0;}
        | BalloonSTART y_CharacteristicBalloonType BalloonEND
          {$$ = $2;}
        ;

y_BaseArc_BaseFeatureType :
          BaseArcSTART y_BaseFeatureType BaseArcEND
          {$$ = $2;}
        ;

y_BaseAxisFeature_BaseFeatureType :
          BaseAxisFeatureSTART y_BaseFeatureType BaseAxisFeatureEND
          {$$ = $2;}
        ;

y_BaseCircle_BaseFeatureType :
          BaseCircleSTART y_BaseFeatureType BaseCircleEND
          {$$ = $2;}
        ;

y_BaseCone_BaseFeatureType :
          BaseConeSTART y_BaseFeatureType BaseConeEND
          {$$ = $2;}
        ;

y_BaseConicalSegment_BaseFeatureType :
          BaseConicalSegmentSTART y_BaseFeatureType BaseConicalSegmentEND
          {$$ = $2;}
        ;

y_BaseCoordinateSystemId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | BaseCoordinateSystemIdSTART y_QIFReferenceFullType
          BaseCoordinateSystemIdEND
          {$$ = $2;}
        ;

y_BaseCylinder_BaseFeatureType :
          BaseCylinderSTART y_BaseFeatureType BaseCylinderEND
          {$$ = $2;}
        ;

y_BaseCylindricalSegment_BaseFeatureType :
          BaseCylindricalSegmentSTART y_BaseFeatureType
          BaseCylindricalSegmentEND
          {$$ = $2;}
        ;

y_BaseEdgePoint_BaseFeatureType :
          BaseEdgePointSTART y_BaseFeatureType BaseEdgePointEND
          {$$ = $2;}
        ;

y_BaseEllipse_BaseFeatureType :
          BaseEllipseSTART y_BaseFeatureType BaseEllipseEND
          {$$ = $2;}
        ;

y_BaseEllipticalArc_BaseFeatureType :
          BaseEllipticalArcSTART y_BaseFeatureType BaseEllipticalArcEND
          {$$ = $2;}
        ;

y_BaseElongatedCircle_BaseFeatureType :
          BaseElongatedCircleSTART y_BaseFeatureType BaseElongatedCircleEND
          {$$ = $2;}
        ;

y_BaseElongatedCylinder_BaseFeatureType :
          BaseElongatedCylinderSTART y_BaseFeatureType
          BaseElongatedCylinderEND
          {$$ = $2;}
        ;

y_BaseError_AngularValueType :
          BaseErrorSTART y_AngularValueType BaseErrorEND
          {$$ = $2;}
        ;

y_BaseError_LinearValueType :
          BaseErrorSTART y_LinearValueType BaseErrorEND
          {$$ = $2;}
        ;

y_BaseExtrudedCrossSection_BaseFeatureType :
          BaseExtrudedCrossSectionSTART y_BaseFeatureType
          BaseExtrudedCrossSectionEND
          {$$ = $2;}
        ;

y_BaseFeaturePointListType :
          y_LiztAttributePair ENDITEM
          y_LiztBaseFeaturePointSet_BaseFeaturePointSetType_1_u
          {$$ = new BaseFeaturePointListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad BaseFeaturePointListType attributes");
             }
           delete $1;
          }
        ;

y_BaseFeaturePointList_BaseFeaturePointListType :
          BaseFeaturePointListSTART y_BaseFeaturePointListType
          BaseFeaturePointListEND
          {$$ = $2;}
        ;

y_BaseFeaturePointSetType :
          ENDITEM y_FeatureId_QIFReferenceType y_PointIndex_PointIndexType
          y_ReferencedComponent_ReferencedComponentEnumType
          y_SequenceNumber_NaturalType
          {$$ = new BaseFeaturePointSetType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_BaseFeaturePointSet_BaseFeaturePointSetType :
          BaseFeaturePointSetSTART y_BaseFeaturePointSetType
          BaseFeaturePointSetEND
          {$$ = $2;}
        ;

y_BaseFeatureType :
          ENDITEM y_ReferencedComponent_ReferencedComponentEnumType
          y_FeatureId_QIFReferenceFullType
          {$$ = new BaseFeatureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_BaseFeature_BaseFeatureType :
          BaseFeatureSTART y_BaseFeatureType BaseFeatureEND
          {$$ = $2;}
        ;

y_BaseFeature_SequencedBaseFeatureType :
          BaseFeatureSTART y_SequencedBaseFeatureType BaseFeatureEND
          {$$ = $2;
           $$->printElement = "BaseFeature";
          }
        ;

y_BaseLine_BaseFeatureType :
          BaseLineSTART y_BaseFeatureType BaseLineEND
          {$$ = $2;}
        ;

y_BaseLine_SequencedBaseFeatureType :
          BaseLineSTART y_SequencedBaseFeatureType BaseLineEND
          {$$ = $2;
           $$->printElement = "BaseLine";
          }
        ;

y_BaseLocationFeature_BaseFeatureType :
          BaseLocationFeatureSTART y_BaseFeatureType BaseLocationFeatureEND
          {$$ = $2;}
        ;

y_BaseOppositeAngledLines_BaseFeatureType :
          BaseOppositeAngledLinesSTART y_BaseFeatureType
          BaseOppositeAngledLinesEND
          {$$ = $2;}
        ;

y_BaseOppositeAngledPlanes_BaseFeatureType :
          BaseOppositeAngledPlanesSTART y_BaseFeatureType
          BaseOppositeAngledPlanesEND
          {$$ = $2;}
        ;

y_BaseOppositeParallelLines_BaseFeatureType :
          BaseOppositeParallelLinesSTART y_BaseFeatureType
          BaseOppositeParallelLinesEND
          {$$ = $2;}
        ;

y_BaseOppositeParallelPlanes_BaseFeatureType :
          BaseOppositeParallelPlanesSTART y_BaseFeatureType
          BaseOppositeParallelPlanesEND
          {$$ = $2;}
        ;

y_BaseOtherCurveFeature_BaseFeatureType :
          BaseOtherCurveFeatureSTART y_BaseFeatureType
          BaseOtherCurveFeatureEND
          {$$ = $2;}
        ;

y_BaseOtherShapeFeature_BaseFeatureType :
          BaseOtherShapeFeatureSTART y_BaseFeatureType
          BaseOtherShapeFeatureEND
          {$$ = $2;}
        ;

y_BaseOtherSurfaceFeature_BaseFeatureType :
          BaseOtherSurfaceFeatureSTART y_BaseFeatureType
          BaseOtherSurfaceFeatureEND
          {$$ = $2;}
        ;

y_BasePlane_BaseFeatureType :
          BasePlaneSTART y_BaseFeatureType BasePlaneEND
          {$$ = $2;}
        ;

y_BasePlane_SequencedBaseFeatureType :
          BasePlaneSTART y_SequencedBaseFeatureType BasePlaneEND
          {$$ = $2;
           $$->printElement = "BasePlane";
          }
        ;

y_BasePointDefinedCurve_BaseFeatureType :
          BasePointDefinedCurveSTART y_BaseFeatureType
          BasePointDefinedCurveEND
          {$$ = $2;}
        ;

y_BasePointDefinedSurface_BaseFeatureType :
          BasePointDefinedSurfaceSTART y_BaseFeatureType
          BasePointDefinedSurfaceEND
          {$$ = $2;}
        ;

y_BasePointFeature_BaseFeatureType :
          BasePointFeatureSTART y_BaseFeatureType BasePointFeatureEND
          {$$ = $2;}
        ;

y_BaseSphere_BaseFeatureType :
          BaseSphereSTART y_BaseFeatureType BaseSphereEND
          {$$ = $2;}
        ;

y_BaseSphericalSegment_BaseFeatureType :
          BaseSphericalSegmentSTART y_BaseFeatureType
          BaseSphericalSegmentEND
          {$$ = $2;}
        ;

y_BaseSurfaceOfRevolution_BaseFeatureType :
          BaseSurfaceOfRevolutionSTART y_BaseFeatureType
          BaseSurfaceOfRevolutionEND
          {$$ = $2;}
        ;

y_BaseThreadedFeature_BaseFeatureType :
          BaseThreadedFeatureSTART y_BaseFeatureType BaseThreadedFeatureEND
          {$$ = $2;}
        ;

y_BaseToroidalSegment_BaseFeatureType :
          BaseToroidalSegmentSTART y_BaseFeatureType BaseToroidalSegmentEND
          {$$ = $2;}
        ;

y_BaseTorus_BaseFeatureType :
          BaseTorusSTART y_BaseFeatureType BaseTorusEND
          {$$ = $2;}
        ;

y_BaselineProductNumber_XmlString :
          BaselineProductNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          BaselineProductNumberEND
          {$$ = $4;}
        ;

y_BaselineProductVersion_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | BaselineProductVersionSTART ENDITEM {yyReadData = 1;} y_XmlString
          BaselineProductVersionEND
          {$$ = $4;}
        ;

y_BasicSize_XmlToken :
          BasicSizeSTART ENDITEM {yyReadData = 1;} y_XmlToken BasicSizeEND
          {$$ = $4;}
        ;

y_BeginPoint_Point2dSimpleType :
          BeginPointSTART y_Point2dSimpleType BeginPointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_BestFitAlignmentOperationType :
          y_LiztAttributePair ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0
          y_DegreesOfFreedom_DegreesOfFreedomType
          y_LiztBaseFeature_SequencedBaseFeatureType_1_u
          {$$ = new BestFitAlignmentOperationType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad BestFitAlignmentOperationType attributes");
             }
           delete $1;
          }
        ;

y_BestFit_BestFitAlignmentOperationType :
          BestFitSTART y_BestFitAlignmentOperationType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_CircleBestFitType :
          BestFitSTART y_CircleBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_CircularArcBestFitType :
          BestFitSTART y_CircularArcBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_ConeBestFitType :
          BestFitSTART y_ConeBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_ConicalSegmentBestFitType :
          BestFitSTART y_ConicalSegmentBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_CylinderBestFitType :
          BestFitSTART y_CylinderBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_CylindricalSegmentBestFitType :
          BestFitSTART y_CylindricalSegmentBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_EllipseBestFitType :
          BestFitSTART y_EllipseBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_EllipticalArcBestFitType :
          BestFitSTART y_EllipticalArcBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_ElongatedCircleBestFitType :
          BestFitSTART y_ElongatedCircleBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_ElongatedCylinderBestFitType :
          BestFitSTART y_ElongatedCylinderBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_ExtrudedCrossSectionBestFitType :
          BestFitSTART y_ExtrudedCrossSectionBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_LineBestFitType :
          BestFitSTART y_LineBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_OppositeAngledLinesBestFitType :
          BestFitSTART y_OppositeAngledLinesBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_OppositeAngledPlanesBestFitType :
          BestFitSTART y_OppositeAngledPlanesBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_OppositeParallelLinesBestFitType :
          BestFitSTART y_OppositeParallelLinesBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_OppositeParallelPlanesBestFitType :
          BestFitSTART y_OppositeParallelPlanesBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_PlaneBestFitType :
          BestFitSTART y_PlaneBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_PointDefinedCurveBestFitType :
          BestFitSTART y_PointDefinedCurveBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_PointDefinedSurfaceBestFitType :
          BestFitSTART y_PointDefinedSurfaceBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_SphereBestFitType :
          BestFitSTART y_SphereBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_SphericalSegmentBestFitType :
          BestFitSTART y_SphericalSegmentBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_SurfaceOfRevolutionBestFitType :
          BestFitSTART y_SurfaceOfRevolutionBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_ThreadedFeatureBestFitType :
          BestFitSTART y_ThreadedFeatureBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_ToroidalSegmentBestFitType :
          BestFitSTART y_ToroidalSegmentBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BestFit_TorusBestFitType :
          BestFitSTART y_TorusBestFitType BestFitEND
          {$$ = $2;
           $$->printElement = "BestFit";
          }
        ;

y_BetweenRowDirection_VectorType :
          BetweenRowDirectionSTART y_VectorType BetweenRowDirectionEND
          {$$ = $2;}
        ;

y_BiasStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          {$$ = new BiasStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad BiasStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_BiasStudyPlan_BiasStudyPlanType :
          BiasStudyPlanSTART y_BiasStudyPlanType BiasStudyPlanEND
          {$$ = $2;
           $$->printElement = "BiasStudyPlan";
          }
        ;

y_BiasStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_SampleSize_XmlPositiveInteger
          y_MeasurementDeviceIds_ArrayReferenceType_0
          {$$ = new BiasStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad BiasStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_BiasStudyResults_BiasStudyResultsType :
          BiasStudyResultsSTART y_BiasStudyResultsType BiasStudyResultsEND
          {$$ = $2;
           $$->printElement = "BiasStudyResults";
          }
        ;

y_Bias_StatsMeasuredDecimalType :
          BiasSTART y_StatsMeasuredDecimalType BiasEND
          {$$ = $2;
           $$->printElement = "Bias";
          }
        ;

y_BinaryColors_ArrayBinaryType :
          BinaryColorsSTART y_ArrayBinaryType BinaryColorsEND
          {$$ = $2;}
        ;

y_BinaryCompensated_ArrayBinaryType :
          BinaryCompensatedSTART y_ArrayBinaryType BinaryCompensatedEND
          {$$ = $2;}
        ;

y_BinaryDataType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new BinaryDataType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad BinaryDataType attributes");
             }
           delete $1;
          }
        ;

y_BinaryDeviations_ArrayBinaryType :
          BinaryDeviationsSTART y_ArrayBinaryType BinaryDeviationsEND
          {$$ = $2;}
        ;

y_BinaryMeasurePointNominalIds_ArrayBinaryQIFReferenceFullType :
          BinaryMeasurePointNominalIdsSTART
          y_ArrayBinaryQIFReferenceFullType BinaryMeasurePointNominalIdsEND
          {$$ = $2;
           $$->printElement = "BinaryMeasurePointNominalIds";
          }
        ;

y_BinaryNormals_ArrayBinaryType :
          BinaryNormalsSTART y_ArrayBinaryType BinaryNormalsEND
          {$$ = $2;}
        ;

y_BinaryPointIndices_ArrayBinaryType :
          BinaryPointIndicesSTART y_ArrayBinaryType BinaryPointIndicesEND
          {$$ = $2;}
        ;

y_BinaryPoints_ArrayBinaryType :
          BinaryPointsSTART y_ArrayBinaryType BinaryPointsEND
          {$$ = $2;}
        ;

y_BinaryProbeRadii_ArrayBinaryType :
          BinaryProbeRadiiSTART y_ArrayBinaryType BinaryProbeRadiiEND
          {$$ = $2;}
        ;

y_BinaryQuality_ArrayBinaryType :
          BinaryQualitySTART y_ArrayBinaryType BinaryQualityEND
          {$$ = $2;}
        ;

y_BinarySensorIds_ArrayBinaryQIFReferenceType :
          BinarySensorIdsSTART y_ArrayBinaryQIFReferenceType
          BinarySensorIdsEND
          {$$ = $2;}
        ;

y_BinaryTipIds_ArrayBinaryQIFReferenceType :
          BinaryTipIdsSTART y_ArrayBinaryQIFReferenceType BinaryTipIdsEND
          {$$ = $2;}
        ;

y_BodyId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | BodyIdSTART y_QIFReferenceFullType BodyIdEND
          {$$ = $2;}
        ;

y_BodyIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | BodyIdsSTART y_ArrayReferenceFullType BodyIdsEND
          {$$ = $2;}
        ;

y_BodyIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | BodyIdsSTART y_ArrayReferenceType BodyIdsEND
          {$$ = $2;}
        ;

y_BodySetType :
          y_LiztAttributePair ENDITEM y_LiztBody_BodyType_1_u
          {$$ = new BodySetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad BodySetType attributes");
             }
           delete $1;
          }
        ;

y_BodySet_BodySetType_0 :
          /* empty */
          {$$ = 0;}
        | BodySetSTART y_BodySetType BodySetEND
          {$$ = $2;}
        ;

y_BodyType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Validation_ValidationBodyType_0
          y_Transform_ElementReferenceType_0
          y_ShellIds_ArrayReferenceType_0 y_FaceIds_ArrayReferenceType_0
          y_LoopIds_ArrayReferenceType_0 y_EdgeIds_ArrayReferenceType_0
          y_VertexIds_ArrayReferenceType_0
          {$$ = new BodyType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad BodyType attributes");
             }
           delete $1;
          }
        ;

y_Body_BodyType :
          BodySTART y_BodyType BodyEND
          {$$ = $2;
           $$->printElement = "Body";
          }
        | BodySTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new BodyType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "Body";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad BodyType attributes");
             }
           delete $2;
          }
        ;

y_BonusStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | BonusStatsSTART y_StatsLinearType BonusStatsEND
          {$$ = $2;
           $$->printElement = "BonusStats";
          }
        ;

y_Bonus_LinearValueType :
          BonusSTART y_LinearValueType BonusEND
          {$$ = $2;}
        ;

y_Bonus_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | BonusSTART y_MeasuredLinearValueType BonusEND
          {$$ = $2;}
        ;

y_BooleanEqualType :
          ENDITEM y_LiztBooleanExpression_substituteType_2_2_Check
          {$$ = new BooleanEqualType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_BooleanEqual_BooleanEqualType :
          BooleanEqualSTART y_BooleanEqualType BooleanEqualEND
          {$$ = $2;
           $$->printElement = "BooleanEqual";
          }
        ;

y_BooleanExpression_substituteType :
          y_And_AndType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArithmeticEqual_ArithmeticEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_BooleanEqual_BooleanEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CharacteristicIs_CharacteristicIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConstantIs_ConstantIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureIsDatum_FeatureIsDatumType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureIsInternal_FeatureIsInternalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureTypeIs_FeatureTypeIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GreaterOrEqual_GreaterOrEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GreaterThan_GreaterThanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LessOrEqual_LessOrEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LessThan_LessThanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Not_NotType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Or_OrType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SamplingCategoryIs_SamplingCategoryIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ShapeClassIs_ShapeClassIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TokenEqual_TokenEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_BooleanExpression_substituteType_0 :
          /* empty */
          {$$ = 0;}
        | y_And_AndType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArithmeticEqual_ArithmeticEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_BooleanEqual_BooleanEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CharacteristicIs_CharacteristicIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConstantIs_ConstantIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureIsDatum_FeatureIsDatumType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureIsInternal_FeatureIsInternalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureTypeIs_FeatureTypeIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GreaterOrEqual_GreaterOrEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GreaterThan_GreaterThanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LessOrEqual_LessOrEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LessThan_LessThanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Not_NotType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Or_OrType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SamplingCategoryIs_SamplingCategoryIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ShapeClassIs_ShapeClassIsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TokenEqual_TokenEqualType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_BothSides_WeldFilletBothSidesType :
          BothSidesSTART ENDWHOLEITEM
          {$$ = new WeldFilletBothSidesType();
           yyUnrefMap[$$] = $$;
          }
        | BothSidesSTART y_WeldFilletBothSidesType BothSidesEND
          {$$ = $2;}
        ;

y_BothSides_WeldGrooveBothSidesExtendedType :
          BothSidesSTART ENDWHOLEITEM
          {$$ = new WeldGrooveBothSidesExtendedType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "BothSides";
          }
        | BothSidesSTART y_WeldGrooveBothSidesExtendedType BothSidesEND
          {$$ = $2;
           $$->printElement = "BothSides";
          }
        ;

y_BottomEnumType :
          DATASTRING
          {$$ = new BottomEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad BottomEnumType value");
          }
        ;

y_BottomEnum_BottomEnumType :
          BottomEnumSTART ENDITEM {yyReadData = 1;} y_BottomEnumType
          BottomEnumEND
          {$$ = $4;}
        ;

y_BottomType :
          ENDITEM y_BottomTypeChoicePair
          {$$ = new BottomType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_BottomTypeChoicePair :
          y_BottomEnum_BottomEnumType
          {$$ = new BottomTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->BottomTypeType = BottomTypeChoicePair::BottomEnumE;
           $$->BottomTypeValue.BottomEnum = $1;
          }
        | y_OtherBottom_XmlString
          {$$ = new BottomTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->BottomTypeType = BottomTypeChoicePair::OtherBottomE;
           $$->BottomTypeValue.OtherBottom = $1;
          }
        ;

y_Bottom_BottomType_0 :
          /* empty */
          {$$ = 0;}
        | BottomSTART y_BottomType BottomEND
          {$$ = $2;}
        ;

y_BoundaryZone_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | BoundaryZoneSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          BoundaryZoneEND
          {$$ = $4;}
        ;

y_BoundingBoxAxisAlignedType :
          ENDITEM y_PointMin_PointSimpleType y_PointMax_PointSimpleType
          {$$ = new BoundingBoxAxisAlignedType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_BoundingBoxType :
          ENDITEM y_Length_LinearValueType y_Width_LinearValueType
          y_Height_LinearValueType
          {$$ = new BoundingBoxType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_BoxCoxTransformation_XmlDecimal :
          BoxCoxTransformationSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          BoxCoxTransformationEND
          {$$ = $4;}
        ;

y_Box_BoundingBoxAxisAlignedType_0 :
          /* empty */
          {$$ = 0;}
        | BoxSTART y_BoundingBoxAxisAlignedType BoxEND
          {$$ = $2;}
        ;

y_CADCoordinateSystemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_CoordinateSystemCore_CoordinateSystemCoreType
          {$$ = new CADCoordinateSystemType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CADCoordinateSystemType attributes");
             }
           delete $1;
          }
        ;

y_CADSoftware_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | CADSoftwareSTART y_ArrayReferenceType CADSoftwareEND
          {$$ = $2;}
        ;

y_CAxisResolution_LinearOrRotaryAxisType :
          CAxisResolutionSTART y_LinearOrRotaryAxisType CAxisResolutionEND
          {$$ = $2;}
        ;

y_CCombinedResolution_LinearOrRotaryAxisType :
          CCombinedResolutionSTART y_LinearOrRotaryAxisType
          CCombinedResolutionEND
          {$$ = $2;}
        ;

y_CMMAxisDirections_substituteType_0 :
          /* empty */
          {$$ = 0;}
        | y_CartesianCMMAxisDirections_CartesianCMMAxisDirectionsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CMMDirectionEnumType :
          DATASTRING
          {$$ = new CMMDirectionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CMMDirectionEnumType value");
          }
        ;

y_CMMGeometry_CartesianCMMGeometryType_0 :
          /* empty */
          {$$ = 0;}
        | CMMGeometrySTART y_CartesianCMMGeometryType CMMGeometryEND
          {$$ = $2;}
        ;

y_CMMSpeeds_substituteType_0 :
          /* empty */
          {$$ = 0;}
        | y_CartesianCMMSpeeds_CartesianCMMSpeedsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ParallelLinkCMMSpeeds_ParallelLinkCMMSpeedsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CMMType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          {$$ = new CMMType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CMMType attributes");
             }
           delete $1;
          }
        ;

y_CMM_CMMType :
          CMMSTART y_CMMType CMMEND
          {$$ = $2;
           $$->printElement = "CMM";
          }
        ;

y_CPsBinary_ArrayBinaryType :
          CPsBinarySTART y_ArrayBinaryType CPsBinaryEND
          {$$ = $2;}
        ;

y_CPs_ArrayPoint2dType :
          CPsSTART y_ArrayPoint2dType CPsEND
          {$$ = $2;}
        ;

y_CPs_ArrayPointType :
          CPsSTART y_ArrayPointType CPsEND
          {$$ = $2;}
        ;

y_CabinetDimensions_CartesianWorkingVolumeType_0 :
          /* empty */
          {$$ = 0;}
        | CabinetDimensionsSTART ENDWHOLEITEM
          {$$ = new CartesianWorkingVolumeType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "CabinetDimensions";
          }
        | CabinetDimensionsSTART y_CartesianWorkingVolumeType
          CabinetDimensionsEND
          {$$ = $2;
           $$->printElement = "CabinetDimensions";
          }
        ;

y_CalculateAverageFeatures_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | CalculateAverageFeaturesSTART ENDITEM {yyReadData = 1;}
          y_XmlBoolean CalculateAverageFeaturesEND
          {$$ = $4;}
        ;

y_CalibratedComparatorMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new CalibratedComparatorMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CalibratedComparatorMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_CalibratedComparatorMeasureFeatureMethod_CalibratedComparatorMeasureFeatureMethodType :
          CalibratedComparatorMeasureFeatureMethodSTART
          y_CalibratedComparatorMeasureFeatureMethodType
          CalibratedComparatorMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "CalibratedComparatorMeasureFeatureMethod";
          }
        | CalibratedComparatorMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new CalibratedComparatorMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "CalibratedComparatorMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CalibratedComparatorMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_CalibrationDate_XmlDateTime_0 :
          /* empty */
          {$$ = 0;}
        | CalibrationDateSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          CalibrationDateEND
          {$$ = $4;}
        ;

y_CalibrationMasterType :
          ENDITEM y_SerialNumber_XmlString y_Description_XmlString_0
          {$$ = new CalibrationMasterType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CalibrationMaster_CalibrationMasterType_0 :
          /* empty */
          {$$ = 0;}
        | CalibrationMasterSTART y_CalibrationMasterType
          CalibrationMasterEND
          {$$ = $2;}
        ;

y_CalibrationType :
          ENDITEM y_CalibrationMaster_CalibrationMasterType_0
          y_Temperatures_TemperaturesType_0 y_CalibrationDate_XmlDateTime_0
          y_ExpirationDate_XmlDateTime
          {$$ = new CalibrationType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_Calibration_CalibrationType :
          CalibrationSTART y_CalibrationType CalibrationEND
          {$$ = $2;}
        ;

y_CalibrationsType :
          y_LiztAttributePair ENDITEM y_LiztCalibration_CalibrationType_1_u
          {$$ = new CalibrationsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CalibrationsType attributes");
             }
           delete $1;
          }
        ;

y_Calibrations_CalibrationsType_0 :
          /* empty */
          {$$ = 0;}
        | CalibrationsSTART y_CalibrationsType CalibrationsEND
          {$$ = $2;}
        ;

y_CaliperDialType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_LinearResolution_LinearResolutionType_0
          y_Accuracy_NumericalLengthAccuracyType_0
          y_CanMeasureInnerD_XmlBoolean_0 y_CanMeasureOuterD_XmlBoolean_0
          y_CanMeasureDepth_XmlBoolean_0
          {$$ = new CaliperDialType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CaliperDialType attributes");
             }
           delete $1;
          }
        ;

y_CaliperDial_CaliperDialType :
          CaliperDialSTART y_CaliperDialType CaliperDialEND
          {$$ = $2;
           $$->printElement = "CaliperDial";
          }
        ;

y_CaliperDigitalType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_LinearResolution_LinearResolutionType_0
          y_Accuracy_NumericalLengthAccuracyType_0
          y_CanMeasureInnerD_XmlBoolean_0 y_CanMeasureOuterD_XmlBoolean_0
          y_CanMeasureDepth_XmlBoolean_0
          {$$ = new CaliperDigitalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CaliperDigitalType attributes");
             }
           delete $1;
          }
        ;

y_CaliperDigital_CaliperDigitalType :
          CaliperDigitalSTART y_CaliperDigitalType CaliperDigitalEND
          {$$ = $2;
           $$->printElement = "CaliperDigital";
          }
        ;

y_CaliperType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_LinearResolution_LinearResolutionType_0
          y_Accuracy_NumericalLengthAccuracyType_0
          y_CanMeasureInnerD_XmlBoolean_0 y_CanMeasureOuterD_XmlBoolean_0
          y_CanMeasureDepth_XmlBoolean_0
          {$$ = new CaliperType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CaliperType attributes");
             }
           delete $1;
          }
        ;

y_Caliper_CaliperType :
          CaliperSTART y_CaliperType CaliperEND
          {$$ = $2;
           $$->printElement = "Caliper";
          }
        ;

y_CameraIds_ArrayReferenceActiveType_0 :
          /* empty */
          {$$ = 0;}
        | CameraIdsSTART y_ArrayReferenceActiveType CameraIdsEND
          {$$ = $2;}
        ;

y_CameraSetType :
          y_LiztAttributePair ENDITEM y_LiztCamera_CameraType_1_u
          {$$ = new CameraSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CameraSetType attributes");
             }
           delete $1;
          }
        ;

y_CameraSet_CameraSetType_0 :
          /* empty */
          {$$ = 0;}
        | CameraSetSTART y_CameraSetType CameraSetEND
          {$$ = $2;}
        ;

y_CameraType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ViewPlaneOrigin_PointSimpleType y_Orientation_QuaternionType
          y_Ratio_XmlDouble y_Near_LinearValueType y_Far_LinearValueType
          y_Height_XmlDouble
          {$$ = new CameraType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CameraType attributes");
             }
           delete $1;
          }
        ;

y_Camera_CameraType :
          CameraSTART y_CameraType CameraEND
          {$$ = $2;
           $$->printElement = "Camera";
          }
        ;

y_CanMeasureDepth_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | CanMeasureDepthSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          CanMeasureDepthEND
          {$$ = $4;}
        ;

y_CanMeasureInnerD_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | CanMeasureInnerDSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          CanMeasureInnerDEND
          {$$ = $4;}
        ;

y_CanMeasureOuterD_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | CanMeasureOuterDSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          CanMeasureOuterDEND
          {$$ = $4;}
        ;

y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0 :
          /* empty */
          {$$ = 0;}
        | CapabilityCalculationMethodSTART ENDITEM {yyReadData = 1;}
          y_OneSidedCapabilityCalculationEnumType
          CapabilityCalculationMethodEND
          {$$ = $4;}
        ;

y_CapabilityCalculationMethod_PositionCapabilityCalculationEnumType_0 :
          /* empty */
          {$$ = 0;}
        | CapabilityCalculationMethodSTART ENDITEM {yyReadData = 1;}
          y_PositionCapabilityCalculationEnumType
          CapabilityCalculationMethodEND
          {$$ = $4;}
        ;

y_CapabilityStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger_0
          y_CapabilityStudy_1198_CapabilityStudy_1198_Type
          {$$ = new CapabilityStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CapabilityStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_CapabilityStudyPlan_CapabilityStudyPlanType :
          CapabilityStudyPlanSTART y_CapabilityStudyPlanType
          CapabilityStudyPlanEND
          {$$ = $2;
           $$->printElement = "CapabilityStudyPlan";
          }
        ;

y_CapabilityStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger_0
          {$$ = new CapabilityStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CapabilityStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_CapabilityStudyResults_CapabilityStudyResultsType :
          CapabilityStudyResultsSTART y_CapabilityStudyResultsType
          CapabilityStudyResultsEND
          {$$ = $2;
           $$->printElement = "CapabilityStudyResults";
          }
        ;

y_CapabilityStudy_1198_CapabilityStudy_1198_Type :
          y_CapabilityStudy_1198_Type
          {$$ = $1;}
        ;

y_CapabilityStudy_1198_Type :
          y_CapabilityStudy_1198_TypeChoicePair
          {$$ = new CapabilityStudy_1198_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CapabilityStudy_1198_TypeChoicePair :
          y_CpkThreshold_CriterionDecimalType
          {$$ = new CapabilityStudy_1198_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CapabilityStudy_1198_TypeType = CapabilityStudy_1198_TypeChoicePair::CpkThresholdE;
           $$->CapabilityStudy_1198_TypeValue.CpkThreshold = $1;
          }
        | y_PpkThreshold_CriterionDecimalType
          {$$ = new CapabilityStudy_1198_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CapabilityStudy_1198_TypeType = CapabilityStudy_1198_TypeChoicePair::PpkThresholdE;
           $$->CapabilityStudy_1198_TypeValue.PpkThreshold = $1;
          }
        ;

y_CapacitiveSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinOperatingVoltage_UserDefinedUnitValueType_0
          y_MaxOperatingVoltage_UserDefinedUnitValueType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_TemperatureStability_UserDefinedUnitValueType_0
          y_MinimumTargetDiameter_LinearValueType_0
          y_HousingMaterial_XmlString_0 y_Mounting_XmlString_0
          {$$ = new CapacitiveSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CapacitiveSensorType attributes");
             }
           delete $1;
          }
        ;

y_CapacitiveSensor_CapacitiveSensorType :
          CapacitiveSensorSTART y_CapacitiveSensorType CapacitiveSensorEND
          {$$ = $2;
           $$->printElement = "CapacitiveSensor";
          }
        ;

y_CarriageType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ToolIds_ArrayReferenceType_0
          {$$ = new CarriageType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CarriageType attributes");
             }
           delete $1;
          }
        ;

y_Carriage_CarriageType :
          CarriageSTART y_CarriageType CarriageEND
          {$$ = $2;
           $$->printElement = "Carriage";
          }
        ;

y_CarriagesType :
          y_LiztAttributePair ENDITEM y_LiztCarriage_CarriageType_2_u_Check
          {$$ = new CarriagesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CarriagesType attributes");
             }
           delete $1;
          }
        ;

y_Carriages_CarriagesType :
          CarriagesSTART y_CarriagesType CarriagesEND
          {$$ = $2;}
        ;

y_CartesianCMMAccuraciesType :
          y_LiztAttributePair ENDITEM
          y_LiztCartesianCMMAccuracy_CartesianCMMAccuracyType_1_u
          {$$ = new CartesianCMMAccuraciesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CartesianCMMAccuraciesType attributes");
             }
           delete $1;
          }
        ;

y_CartesianCMMAccuracyTest_substituteType :
          y_CartesianCMMB89Test_CartesianCMMB89TestType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CartesianCMMFPSTest_FPSTestType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CartesianCMMISO10360Test_ISO10360TestType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CartesianCMMPointAccuracyTest_PointAccuracyTestType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CartesianCMMAccuracyType :
          ENDITEM y_EnvironmentalRange_EnvironmentalRangeType
          y_CartesianCMMAccuracyTest_substituteType
          y_AccuracySource_AccuracySourceType
          {$$ = new CartesianCMMAccuracyType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CartesianCMMAccuracy_CartesianCMMAccuracyType :
          CartesianCMMAccuracySTART y_CartesianCMMAccuracyType
          CartesianCMMAccuracyEND
          {$$ = $2;
           $$->printElement = "CartesianCMMAccuracy";
          }
        ;

y_CartesianCMMAxisDirectionsType :
          ENDITEM y_XAxisDirection_CMMDirectionEnumType
          y_YAxisDirection_CMMDirectionEnumType
          y_ZAxisDirection_CMMDirectionEnumType
          {$$ = new CartesianCMMAxisDirectionsType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CartesianCMMAxisDirections_CartesianCMMAxisDirectionsType :
          CartesianCMMAxisDirectionsSTART y_CartesianCMMAxisDirectionsType
          CartesianCMMAxisDirectionsEND
          {$$ = $2;
           $$->printElement = "CartesianCMMAxisDirections";
          }
        ;

y_CartesianCMMB89TestType :
          ENDITEM y_XLinearAccuracy_LinearValueType
          y_YLinearAccuracy_LinearValueType
          y_ZLinearAccuracy_LinearValueType
          y_OffsetVolumetricPerformance_LinearValueType
          y_VolumetricPerformance_LinearValueType
          y_Repeatability_LinearValueType
          {$$ = new CartesianCMMB89TestType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_CartesianCMMB89Test_CartesianCMMB89TestType :
          CartesianCMMB89TestSTART y_CartesianCMMB89TestType
          CartesianCMMB89TestEND
          {$$ = $2;
           $$->printElement = "CartesianCMMB89Test";
          }
        ;

y_CartesianCMMFPSTest_FPSTestType :
          CartesianCMMFPSTestSTART y_FPSTestType CartesianCMMFPSTestEND
          {$$ = $2;
           $$->printElement = "CartesianCMMFPSTest";
          }
        ;

y_CartesianCMMGeometryEnumType :
          DATASTRING
          {$$ = new CartesianCMMGeometryEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CartesianCMMGeometryEnumType value");
          }
        ;

y_CartesianCMMGeometryEnum_CartesianCMMGeometryEnumType :
          CartesianCMMGeometryEnumSTART ENDITEM {yyReadData = 1;}
          y_CartesianCMMGeometryEnumType CartesianCMMGeometryEnumEND
          {$$ = $4;}
        ;

y_CartesianCMMGeometryType :
          ENDITEM y_CartesianCMMGeometryTypeChoicePair
          {$$ = new CartesianCMMGeometryType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CartesianCMMGeometryTypeChoicePair :
          y_CartesianCMMGeometryEnum_CartesianCMMGeometryEnumType
          {$$ = new CartesianCMMGeometryTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CartesianCMMGeometryTypeType = CartesianCMMGeometryTypeChoicePair::CartesianCMMGeometryEnumE;
           $$->CartesianCMMGeometryTypeValue.CartesianCMMGeometryEnum = $1;
          }
        | y_OtherCartesianCMMGeometry_XmlString
          {$$ = new CartesianCMMGeometryTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CartesianCMMGeometryTypeType = CartesianCMMGeometryTypeChoicePair::OtherCartesianCMMGeometryE;
           $$->CartesianCMMGeometryTypeValue.OtherCartesianCMMGeometry = $1;
          }
        ;

y_CartesianCMMISO10360Test_ISO10360TestType :
          CartesianCMMISO10360TestSTART y_ISO10360TestType
          CartesianCMMISO10360TestEND
          {$$ = $2;
           $$->printElement = "CartesianCMMISO10360Test";
          }
        ;

y_CartesianCMMPointAccuracyTest_PointAccuracyTestType :
          CartesianCMMPointAccuracyTestSTART y_PointAccuracyTestType
          CartesianCMMPointAccuracyTestEND
          {$$ = $2;
           $$->printElement = "CartesianCMMPointAccuracyTest";
          }
        ;

y_CartesianCMMSpeedsType :
          ENDITEM y_MaxXTraverseSpeed_SpeedValueType_0
          y_MaxYTraverseSpeed_SpeedValueType_0
          y_MaxZTraverseSpeed_SpeedValueType_0
          y_MaxXProbingSpeed_SpeedValueType_0
          y_MaxYProbingSpeed_SpeedValueType_0
          y_MaxZProbingSpeed_SpeedValueType_0
          {$$ = new CartesianCMMSpeedsType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_CartesianCMMSpeeds_CartesianCMMSpeedsType :
          CartesianCMMSpeedsSTART ENDWHOLEITEM
          {$$ = new CartesianCMMSpeedsType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "CartesianCMMSpeeds";
          }
        | CartesianCMMSpeedsSTART y_CartesianCMMSpeedsType
          CartesianCMMSpeedsEND
          {$$ = $2;
           $$->printElement = "CartesianCMMSpeeds";
          }
        ;

y_CartesianCMMType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_HomeLocation_PointType_0
          y_CMMGeometry_CartesianCMMGeometryType_0
          y_CMMAxisDirections_substituteType_0 y_Scales_substituteType_0
          y_MaxWorkpieceHeight_LinearValueType_0
          y_MaxWorkpieceMass_MassValueType_0
          y_JoystickSpeeds_CartesianCMMSpeedsType_0
          y_CMMSpeeds_substituteType_0 y_RotaryTable_RotaryTableType_0
          y_Accuracies_CartesianCMMAccuraciesType_0
          y_ToolIds_ArrayReferenceType_0 y_SensorIds_ArrayReferenceType_0
          {$$ = new CartesianCMMType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CartesianCMMType attributes");
             }
           delete $1;
          }
        ;

y_CartesianCMM_CartesianCMMType :
          CartesianCMMSTART y_CartesianCMMType CartesianCMMEND
          {$$ = $2;
           $$->printElement = "CartesianCMM";
          }
        ;

y_CartesianMeasurementDeviceScalesType :
          ENDITEM y_XScale_MeasurementDeviceScaleType
          y_YScale_MeasurementDeviceScaleType
          y_ZScale_MeasurementDeviceScaleType
          {$$ = new CartesianMeasurementDeviceScalesType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CartesianMeasurementDeviceScales_CartesianMeasurementDeviceScalesType :
          CartesianMeasurementDeviceScalesSTART
          y_CartesianMeasurementDeviceScalesType
          CartesianMeasurementDeviceScalesEND
          {$$ = $2;
           $$->printElement = "CartesianMeasurementDeviceScales";
          }
        ;

y_CartesianResolu_1239_CartesianResolu_1239_Type :
          y_CartesianResolu_1239_Type
          {$$ = $1;}
        ;

y_CartesianResolu_1239_Type :
          y_CartesianResolu_1239_TypeChoicePair
          {$$ = new CartesianResolu_1239_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CartesianResolu_1239_TypeChoicePair :
          y_CartesianResolu_1244_CartesianResolu_1244_Type
          {$$ = new CartesianResolu_1239_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CartesianResolu_1239_TypeType = CartesianResolu_1239_TypeChoicePair::CartesianResolu_1244E;
           $$->CartesianResolu_1239_TypeValue.CartesianResolu_1244 = $1;
          }
        | y_XYZResolution_XYZResolutionType
          {$$ = new CartesianResolu_1239_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CartesianResolu_1239_TypeType = CartesianResolu_1239_TypeChoicePair::XYZResolutionE;
           $$->CartesianResolu_1239_TypeValue.XYZResolution = $1;
          }
        ;

y_CartesianResolu_1244_CartesianResolu_1244_Type :
          y_CartesianResolu_1244_Type
          {$$ = $1;}
        ;

y_CartesianResolu_1244_Type :
          y_CombinedCartesianResolution_LinearValueType
          y_XYZResolution_XYZResolutionType_0
          {$$ = new CartesianResolu_1244_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CartesianResolutionType :
          ENDITEM y_CartesianResolu_1239_CartesianResolu_1239_Type
          {$$ = new CartesianResolutionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CartesianResolution_CartesianResolutionType :
          CartesianResolutionSTART y_CartesianResolutionType
          CartesianResolutionEND
          {$$ = $2;
           $$->printElement = "CartesianResolution";
          }
        ;

y_CartesianWorkingVolumeType :
          ENDITEM y_XAxisLength_LinearValueType_0
          y_YAxisLength_LinearValueType_0 y_ZAxisLength_LinearValueType_0
          {$$ = new CartesianWorkingVolumeType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CartesianWorkingVolume_CartesianWorkingVolumeType :
          CartesianWorkingVolumeSTART ENDWHOLEITEM
          {$$ = new CartesianWorkingVolumeType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "CartesianWorkingVolume";
          }
        | CartesianWorkingVolumeSTART y_CartesianWorkingVolumeType
          CartesianWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "CartesianWorkingVolume";
          }
        ;

y_Cast_CircleCastType :
          CastSTART y_CircleCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_CircularArcCastType :
          CastSTART y_CircularArcCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_ConeCastType :
          CastSTART y_ConeCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_ConicalSegmentCastType :
          CastSTART y_ConicalSegmentCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_CylinderCastType :
          CastSTART y_CylinderCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_CylindricalSegmentCastType :
          CastSTART y_CylindricalSegmentCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_EdgePointCastType :
          CastSTART y_EdgePointCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_EllipseCastType :
          CastSTART y_EllipseCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_EllipticalArcCastType :
          CastSTART y_EllipticalArcCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_ElongatedCircleCastType :
          CastSTART y_ElongatedCircleCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_ElongatedCylinderCastType :
          CastSTART y_ElongatedCylinderCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_ExtrudedCrossSectionCastType :
          CastSTART y_ExtrudedCrossSectionCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_LineCastType :
          CastSTART y_LineCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_OppositeAngledLinesCastType :
          CastSTART y_OppositeAngledLinesCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_OppositeAngledPlanesCastType :
          CastSTART y_OppositeAngledPlanesCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_OppositeParallelLinesCastType :
          CastSTART y_OppositeParallelLinesCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_OppositeParallelPlanesCastType :
          CastSTART y_OppositeParallelPlanesCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_PlaneCastType :
          CastSTART y_PlaneCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_PointFeatureCastType :
          CastSTART y_PointFeatureCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_SphereCastType :
          CastSTART y_SphereCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_SphericalSegmentCastType :
          CastSTART y_SphericalSegmentCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_SurfaceOfRevolutionCastType :
          CastSTART y_SurfaceOfRevolutionCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_ThreadedFeatureCastType :
          CastSTART y_ThreadedFeatureCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_ToroidalSegmentCastType :
          CastSTART y_ToroidalSegmentCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_Cast_TorusCastType :
          CastSTART y_TorusCastType CastEND
          {$$ = $2;
           $$->printElement = "Cast";
          }
        ;

y_CenterLine_MeasuredPointAndVectorType_0 :
          /* empty */
          {$$ = 0;}
        | CenterLineSTART y_MeasuredPointAndVectorType CenterLineEND
          {$$ = $2;}
        ;

y_CenterLine_PointAndVectorType :
          CenterLineSTART y_PointAndVectorType CenterLineEND
          {$$ = $2;}
        ;

y_CenterOfGravity_PointFeatureCenterOfGravityType :
          CenterOfGravitySTART y_PointFeatureCenterOfGravityType
          CenterOfGravityEND
          {$$ = $2;
           $$->printElement = "CenterOfGravity";
          }
        ;

y_CenterPlane_MeasuredPlaneType_0 :
          /* empty */
          {$$ = 0;}
        | CenterPlaneSTART y_MeasuredPlaneType CenterPlaneEND
          {$$ = $2;}
        ;

y_CenterPlane_PlaneType :
          CenterPlaneSTART y_PlaneType CenterPlaneEND
          {$$ = $2;}
        ;

y_CenterPoint_PointType :
          CenterPointSTART y_PointType CenterPointEND
          {$$ = $2;}
        ;

y_Center_Point2dSimpleType :
          CenterSTART y_Point2dSimpleType CenterEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_Center_PointSimpleType :
          CenterSTART y_PointSimpleType CenterEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_Center_PointType :
          CenterSTART y_PointType CenterEND
          {$$ = $2;}
        ;

y_Centroid_PointSimpleType_0 :
          /* empty */
          {$$ = 0;}
        | CentroidSTART y_PointSimpleType CentroidEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_CharacteristicAspectsListsType :
          ENDITEM y_FormalStandardId_QIFReferenceType
          y_CharacteristicDefinitions_CharacteristicDefinitionsType
          y_DefaultCharacteristicDefinitions_CharacteristicDefinitionsType_0
          y_DefaultToleranceDefinitions_ToleranceDefinitionsType_0
          y_CharacteristicNominals_CharacteristicNominalsType
          y_CharacteristicItems_CharacteristicItemsType_0
          y_CharacteristicGroups_CharacteristicGroupsType_0
          y_SimultaneousRequirementGroups_SimultaneousRequirementGroupsType_0
          {$$ = new CharacteristicAspectsListsType($2, $3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
          }
        ;

y_CharacteristicBalloonLocationEnumType :
          DATASTRING
          {$$ = new CharacteristicBalloonLocationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CharacteristicBalloonLocationEnumType value");
          }
        ;

y_CharacteristicBalloonStyleEnumType :
          DATASTRING
          {$$ = new CharacteristicBalloonStyleEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CharacteristicBalloonStyleEnumType value");
          }
        ;

y_CharacteristicBalloonType :
          ENDITEM y_BalloonLocation_CharacteristicBalloonLocationEnumType
          y_BalloonStyle_CharacteristicBalloonStyleEnumType
          {$$ = new CharacteristicBalloonType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CharacteristicDefinitionId_QIFReferenceType :
          CharacteristicDefinitionIdSTART y_QIFReferenceType
          CharacteristicDefinitionIdEND
          {$$ = $2;}
        ;

y_CharacteristicDefinition_substituteType :
          y_AngleBetweenCharacteristicDefinition_AngleBetweenCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleCharacteristicDefinition_AngleCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleFromCharacteristicDefinition_AngleFromCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularCoordinateCharacteristicDefinition_AngularCoordinateCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularityCharacteristicDefinition_AngularityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ChordCharacteristicDefinition_ChordCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularRunoutCharacteristicDefinition_CircularRunoutCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularityCharacteristicDefinition_CircularityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CoaxialityCharacteristicDefinition_CoaxialityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConcentricityCharacteristicDefinition_ConcentricityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalTaperCharacteristicDefinition_ConicalTaperCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicityCharacteristicDefinition_ConicityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CurveLengthCharacteristicDefinition_CurveLengthCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricityCharacteristicDefinition_CylindricityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DepthCharacteristicDefinition_DepthCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DiameterCharacteristicDefinition_DiameterCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceBetweenCharacteristicDefinition_DistanceBetweenCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceFromCharacteristicDefinition_DistanceFromCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticityCharacteristicDefinition_EllipticityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatTaperCharacteristicDefinition_FlatTaperCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatnessCharacteristicDefinition_FlatnessCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_HeightCharacteristicDefinition_HeightCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LengthCharacteristicDefinition_LengthCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineProfileCharacteristicDefinition_LineProfileCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearCoordinateCharacteristicDefinition_LinearCoordinateCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherFormCharacteristicDefinition_OtherFormCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ParallelismCharacteristicDefinition_ParallelismCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PerpendicularityCharacteristicDefinition_PerpendicularityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointProfileCharacteristicDefinition_PointProfileCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PositionCharacteristicDefinition_PositionCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RadiusCharacteristicDefinition_RadiusCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalDiameterCharacteristicDefinition_SphericalDiameterCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalRadiusCharacteristicDefinition_SphericalRadiusCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericityCharacteristicDefinition_SphericityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SquareCharacteristicDefinition_SquareCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StraightnessCharacteristicDefinition_StraightnessCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileCharacteristicDefinition_SurfaceProfileCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileNonUniformCharacteristicDefinition_SurfaceProfileNonUniformCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceTextureCharacteristicDefinition_SurfaceTextureCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SymmetryCharacteristicDefinition_SymmetryCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThicknessCharacteristicDefinition_ThicknessCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadCharacteristicDefinition_ThreadCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidicityCharacteristicDefinition_ToroidicityCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalRunoutCharacteristicDefinition_TotalRunoutCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAngularCharacteristicDefinition_UserDefinedAngularCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAreaCharacteristicDefinition_UserDefinedAreaCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAttributeCharacteristicDefinition_UserDefinedAttributeCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedForceCharacteristicDefinition_UserDefinedForceCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedLinearCharacteristicDefinition_UserDefinedLinearCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedMassCharacteristicDefinition_UserDefinedMassCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedPressureCharacteristicDefinition_UserDefinedPressureCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedSpeedCharacteristicDefinition_UserDefinedSpeedCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTemperatureCharacteristicDefinition_UserDefinedTemperatureCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTimeCharacteristicDefinition_UserDefinedTimeCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedUnitCharacteristicDefinition_UserDefinedUnitCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldBevelCharacteristicDefinition_WeldBevelCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldCompoundCharacteristicDefinition_WeldCompoundCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldEdgeCharacteristicDefinition_WeldEdgeCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFilletCharacteristicDefinition_WeldFilletCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareBevelCharacteristicDefinition_WeldFlareBevelCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareVCharacteristicDefinition_WeldFlareVCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldJCharacteristicDefinition_WeldJCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldPlugCharacteristicDefinition_WeldPlugCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldScarfCharacteristicDefinition_WeldScarfCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSeamCharacteristicDefinition_WeldSeamCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSlotCharacteristicDefinition_WeldSlotCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSpotCharacteristicDefinition_WeldSpotCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSquareCharacteristicDefinition_WeldSquareCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldStudCharacteristicDefinition_WeldStudCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSurfacingCharacteristicDefinition_WeldSurfacingCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldUCharacteristicDefinition_WeldUCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldVCharacteristicDefinition_WeldVCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WidthCharacteristicDefinition_WidthCharacteristicDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicDefinitionsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicDefinitionsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt CharacteristicDefinitionsCountEND
          {$$ = $4;}
        ;

y_CharacteristicDefinitionsType :
          y_LiztAttributePair ENDITEM
          y_LiztCharacteristicDefinition_substituteType_1_u
          {$$ = new CharacteristicDefinitionsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicDefinitionsType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicDefinitions_CharacteristicDefinitionsType :
          CharacteristicDefinitionsSTART y_CharacteristicDefinitionsType
          CharacteristicDefinitionsEND
          {$$ = $2;}
        ;

y_CharacteristicDesignatorType :
          ENDITEM y_Designator_XmlToken y_UUID_QPIdType_0
          y_Criticality_CriticalityType_0
          y_Balloon_CharacteristicBalloonType_0
          {$$ = new CharacteristicDesignatorType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_CharacteristicDesignator_CharacteristicDesignatorType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicDesignatorSTART y_CharacteristicDesignatorType
          CharacteristicDesignatorEND
          {$$ = $2;}
        ;

y_CharacteristicGroupStatusType :
          ENDITEM y_Status_CharacteristicStatusType
          y_GroupId_QIFReferenceFullType
          {$$ = new CharacteristicGroupStatusType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CharacteristicGroupStatus_CharacteristicGroupStatusType :
          CharacteristicGroupStatusSTART y_CharacteristicGroupStatusType
          CharacteristicGroupStatusEND
          {$$ = $2;}
        ;

y_CharacteristicGroupStatusesType :
          y_LiztAttributePair ENDITEM
          y_LiztCharacteristicGroupStatus_CharacteristicGroupStatusType_1_u
          {$$ = new CharacteristicGroupStatusesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicGroupStatusesType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicGroupStatuses_CharacteristicGroupStatusesType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicGroupStatusesSTART
          y_CharacteristicGroupStatusesType CharacteristicGroupStatusesEND
          {$$ = $2;}
        ;

y_CharacteristicGroupType :
          y_LiztAttributePair ENDITEM
          y_CharacteristicItemIds_ArrayReferenceType
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_TransformId_QIFReferenceType_0 y_Units_OtherUnitsType_0
          y_Scale_ScaleType_0 y_Attributes_AttributesType_0
          {$$ = new CharacteristicGroupType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicGroupType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicGroup_CharacteristicGroupType :
          CharacteristicGroupSTART y_CharacteristicGroupType
          CharacteristicGroupEND
          {$$ = $2;
           $$->printElement = "CharacteristicGroup";
          }
        ;

y_CharacteristicGroup_substituteType :
          y_CharacteristicGroup_CharacteristicGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CharacteristicManufacturingProcessGroup_CharacteristicManufacturingProcessGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicGroupsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicGroupsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt CharacteristicGroupsCountEND
          {$$ = $4;}
        ;

y_CharacteristicGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztCharacteristicGroup_substituteType_1_u
          {$$ = new CharacteristicGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicGroupsType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicGroups_CharacteristicGroupsType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicGroupsSTART y_CharacteristicGroupsType
          CharacteristicGroupsEND
          {$$ = $2;}
        ;

y_CharacteristicIsType :
          y_LiztAttributePair
          {$$ = new CharacteristicIsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicIsType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicIs_CharacteristicIsType :
          CharacteristicIsSTART y_CharacteristicIsType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "CharacteristicIs";
          }
        ;

y_CharacteristicItemId_QIFReferenceType :
          CharacteristicItemIdSTART y_QIFReferenceType
          CharacteristicItemIdEND
          {$$ = $2;}
        ;

y_CharacteristicItemIds_ArrayReferenceType :
          CharacteristicItemIdsSTART y_ArrayReferenceType
          CharacteristicItemIdsEND
          {$$ = $2;}
        ;

y_CharacteristicItem_substituteType :
          y_AngleBetweenCharacteristicItem_AngleBetweenCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleCharacteristicItem_AngleCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleFromCharacteristicItem_AngleFromCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularCoordinateCharacteristicItem_AngularCoordinateCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularityCharacteristicItem_AngularityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ChordCharacteristicItem_ChordCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularRunoutCharacteristicItem_CircularRunoutCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularityCharacteristicItem_CircularityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CoaxialityCharacteristicItem_CoaxialityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConcentricityCharacteristicItem_ConcentricityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalTaperCharacteristicItem_ConicalTaperCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicityCharacteristicItem_ConicityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CurveLengthCharacteristicItem_CurveLengthCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricityCharacteristicItem_CylindricityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DepthCharacteristicItem_DepthCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DiameterCharacteristicItem_DiameterCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceBetweenCharacteristicItem_DistanceBetweenCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceFromCharacteristicItem_DistanceFromCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticityCharacteristicItem_EllipticityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatTaperCharacteristicItem_FlatTaperCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatnessCharacteristicItem_FlatnessCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_HeightCharacteristicItem_HeightCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LengthCharacteristicItem_LengthCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineProfileCharacteristicItem_LineProfileCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearCoordinateCharacteristicItem_LinearCoordinateCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherFormCharacteristicItem_OtherFormCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ParallelismCharacteristicItem_ParallelismCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PerpendicularityCharacteristicItem_PerpendicularityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointProfileCharacteristicItem_PointProfileCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PositionCharacteristicItem_PositionCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RadiusCharacteristicItem_RadiusCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalDiameterCharacteristicItem_SphericalDiameterCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalRadiusCharacteristicItem_SphericalRadiusCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericityCharacteristicItem_SphericityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SquareCharacteristicItem_SquareCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StraightnessCharacteristicItem_StraightnessCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileCharacteristicItem_SurfaceProfileCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileNonUniformCharacteristicItem_SurfaceProfileNonUniformCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceTextureCharacteristicItem_SurfaceTextureCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SymmetryCharacteristicItem_SymmetryCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThicknessCharacteristicItem_ThicknessCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadCharacteristicItem_ThreadCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidicityCharacteristicItem_ToroidicityCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalRunoutCharacteristicItem_TotalRunoutCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAngularCharacteristicItem_UserDefinedAngularCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAreaCharacteristicItem_UserDefinedAreaCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAttributeCharacteristicItem_UserDefinedAttributeCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedForceCharacteristicItem_UserDefinedForceCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedLinearCharacteristicItem_UserDefinedLinearCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedMassCharacteristicItem_UserDefinedMassCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedPressureCharacteristicItem_UserDefinedPressureCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedSpeedCharacteristicItem_UserDefinedSpeedCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTemperatureCharacteristicItem_UserDefinedTemperatureCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTimeCharacteristicItem_UserDefinedTimeCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedUnitCharacteristicItem_UserDefinedUnitCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldBevelCharacteristicItem_WeldBevelCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldCompoundCharacteristicItem_WeldCompoundCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldEdgeCharacteristicItem_WeldEdgeCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFilletCharacteristicItem_WeldFilletCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareBevelCharacteristicItem_WeldFlareBevelCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareVCharacteristicItem_WeldFlareVCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldJCharacteristicItem_WeldJCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldPlugCharacteristicItem_WeldPlugCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldScarfCharacteristicItem_WeldScarfCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSeamCharacteristicItem_WeldSeamCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSlotCharacteristicItem_WeldSlotCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSpotCharacteristicItem_WeldSpotCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSquareCharacteristicItem_WeldSquareCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldStudCharacteristicItem_WeldStudCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSurfacingCharacteristicItem_WeldSurfacingCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldUCharacteristicItem_WeldUCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldVCharacteristicItem_WeldVCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WidthCharacteristicItem_WidthCharacteristicItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicItemsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicItemsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt CharacteristicItemsCountEND
          {$$ = $4;}
        ;

y_CharacteristicItemsType :
          y_LiztAttributePair ENDITEM
          y_LiztCharacteristicItem_substituteType_1_u
          {$$ = new CharacteristicItemsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicItemsType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicItems_CharacteristicItemsType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicItemsSTART y_CharacteristicItemsType
          CharacteristicItemsEND
          {$$ = $2;}
        ;

y_CharacteristicManufacturingProcessGroupType :
          y_LiztAttributePair ENDITEM
          y_CharacteristicItemIds_ArrayReferenceType
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_TransformId_QIFReferenceType_0 y_Units_OtherUnitsType_0
          y_Scale_ScaleType_0 y_Attributes_AttributesType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          {$$ = new CharacteristicManufacturingProcessGroupType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicManufacturingProcessGroupType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicManufacturingProcessGroup_CharacteristicManufacturingProcessGroupType :
          CharacteristicManufacturingProcessGroupSTART
          y_CharacteristicManufacturingProcessGroupType
          CharacteristicManufacturingProcessGroupEND
          {$$ = $2;
           $$->printElement = "CharacteristicManufacturingProcessGroup";
          }
        ;

y_CharacteristicMeasurementIds_ArrayReferenceType :
          CharacteristicMeasurementIdsSTART y_ArrayReferenceType
          CharacteristicMeasurementIdsEND
          {$$ = $2;}
        ;

y_CharacteristicMeasurement_substituteType :
          y_AngleBetweenCharacteristicMeasurement_AngleBetweenCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleCharacteristicMeasurement_AngleCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleFromCharacteristicMeasurement_AngleFromCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularCoordinateCharacteristicMeasurement_AngularCoordinateCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularityCharacteristicMeasurement_AngularityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ChordCharacteristicMeasurement_ChordCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularRunoutCharacteristicMeasurement_CircularRunoutCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularityCharacteristicMeasurement_CircularityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CoaxialityCharacteristicMeasurement_CoaxialityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConcentricityCharacteristicMeasurement_ConcentricityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalTaperCharacteristicMeasurement_ConicalTaperCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicityCharacteristicMeasurement_ConicityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CurveLengthCharacteristicMeasurement_CurveLengthCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricityCharacteristicMeasurement_CylindricityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DepthCharacteristicMeasurement_DepthCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DiameterCharacteristicMeasurement_DiameterCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceBetweenCharacteristicMeasurement_DistanceBetweenCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceFromCharacteristicMeasurement_DistanceFromCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticityCharacteristicMeasurement_EllipticityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatTaperCharacteristicMeasurement_FlatTaperCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatnessCharacteristicMeasurement_FlatnessCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_HeightCharacteristicMeasurement_HeightCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LengthCharacteristicMeasurement_LengthCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineProfileCharacteristicMeasurement_LineProfileCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearCoordinateCharacteristicMeasurement_LinearCoordinateCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherFormCharacteristicMeasurement_OtherFormCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ParallelismCharacteristicMeasurement_ParallelismCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PerpendicularityCharacteristicMeasurement_PerpendicularityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointProfileCharacteristicMeasurement_PointProfileCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PositionCharacteristicMeasurement_PositionCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RadiusCharacteristicMeasurement_RadiusCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalDiameterCharacteristicMeasurement_SphericalDiameterCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalRadiusCharacteristicMeasurement_SphericalRadiusCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericityCharacteristicMeasurement_SphericityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SquareCharacteristicMeasurement_SquareCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StraightnessCharacteristicMeasurement_StraightnessCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileCharacteristicMeasurement_SurfaceProfileCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileNonUniformCharacteristicMeasurement_SurfaceProfileNonUniformCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceTextureCharacteristicMeasurement_SurfaceTextureCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SymmetryCharacteristicMeasurement_SymmetryCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThicknessCharacteristicMeasurement_ThicknessCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadCharacteristicMeasurement_ThreadCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidicityCharacteristicMeasurement_ToroidicityCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalRunoutCharacteristicMeasurement_TotalRunoutCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAngularCharacteristicMeasurement_UserDefinedAngularCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAreaCharacteristicMeasurement_UserDefinedAreaCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAttributeCharacteristicMeasurement_UserDefinedAttributeCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedForceCharacteristicMeasurement_UserDefinedForceCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedLinearCharacteristicMeasurement_UserDefinedLinearCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedMassCharacteristicMeasurement_UserDefinedMassCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedPressureCharacteristicMeasurement_UserDefinedPressureCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedSpeedCharacteristicMeasurement_UserDefinedSpeedCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTemperatureCharacteristicMeasurement_UserDefinedTemperatureCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTimeCharacteristicMeasurement_UserDefinedTimeCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedUnitCharacteristicMeasurement_UserDefinedUnitCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldBevelCharacteristicMeasurement_WeldBevelCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldCompoundCharacteristicMeasurement_WeldCompoundCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldEdgeCharacteristicMeasurement_WeldEdgeCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFilletCharacteristicMeasurement_WeldFilletCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareBevelCharacteristicMeasurement_WeldFlareBevelCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareVCharacteristicMeasurement_WeldFlareVCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldJCharacteristicMeasurement_WeldJCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldPlugCharacteristicMeasurement_WeldPlugCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldScarfCharacteristicMeasurement_WeldScarfCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSeamCharacteristicMeasurement_WeldSeamCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSlotCharacteristicMeasurement_WeldSlotCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSpotCharacteristicMeasurement_WeldSpotCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSquareCharacteristicMeasurement_WeldSquareCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldStudCharacteristicMeasurement_WeldStudCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSurfacingCharacteristicMeasurement_WeldSurfacingCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldUCharacteristicMeasurement_WeldUCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldVCharacteristicMeasurement_WeldVCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WidthCharacteristicMeasurement_WidthCharacteristicMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicMeasurementsType :
          y_LiztAttributePair ENDITEM
          y_LiztCharacteristicMeasurement_substituteType_1_u
          {$$ = new CharacteristicMeasurementsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicMeasurementsType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicMeasurements_CharacteristicMeasurementsType :
          CharacteristicMeasurementsSTART y_CharacteristicMeasurementsType
          CharacteristicMeasurementsEND
          {$$ = $2;}
        ;

y_CharacteristicNominalId_QIFReferenceFullType :
          CharacteristicNominalIdSTART y_QIFReferenceFullType
          CharacteristicNominalIdEND
          {$$ = $2;}
        ;

y_CharacteristicNominalIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicNominalIdsSTART y_ArrayReferenceFullType
          CharacteristicNominalIdsEND
          {$$ = $2;}
        ;

y_CharacteristicNominalIds_ArrayReferenceType :
          CharacteristicNominalIdsSTART y_ArrayReferenceType
          CharacteristicNominalIdsEND
          {$$ = $2;}
        ;

y_CharacteristicNominalIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicNominalIdsSTART y_ArrayReferenceType
          CharacteristicNominalIdsEND
          {$$ = $2;}
        ;

y_CharacteristicNominal_substituteType :
          y_AngleBetweenCharacteristicNominal_AngleBetweenCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleCharacteristicNominal_AngleCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleFromCharacteristicNominal_AngleFromCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularCoordinateCharacteristicNominal_AngularCoordinateCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularityCharacteristicNominal_AngularityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ChordCharacteristicNominal_ChordCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularRunoutCharacteristicNominal_CircularRunoutCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularityCharacteristicNominal_CircularityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CoaxialityCharacteristicNominal_CoaxialityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConcentricityCharacteristicNominal_ConcentricityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalTaperCharacteristicNominal_ConicalTaperCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicityCharacteristicNominal_ConicityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CurveLengthCharacteristicNominal_CurveLengthCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricityCharacteristicNominal_CylindricityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DepthCharacteristicNominal_DepthCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DiameterCharacteristicNominal_DiameterCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceBetweenCharacteristicNominal_DistanceBetweenCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceFromCharacteristicNominal_DistanceFromCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticityCharacteristicNominal_EllipticityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatTaperCharacteristicNominal_FlatTaperCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatnessCharacteristicNominal_FlatnessCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_HeightCharacteristicNominal_HeightCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LengthCharacteristicNominal_LengthCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineProfileCharacteristicNominal_LineProfileCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearCoordinateCharacteristicNominal_LinearCoordinateCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherFormCharacteristicNominal_OtherFormCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ParallelismCharacteristicNominal_ParallelismCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PerpendicularityCharacteristicNominal_PerpendicularityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointProfileCharacteristicNominal_PointProfileCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PositionCharacteristicNominal_PositionCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RadiusCharacteristicNominal_RadiusCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalDiameterCharacteristicNominal_SphericalDiameterCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalRadiusCharacteristicNominal_SphericalRadiusCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericityCharacteristicNominal_SphericityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SquareCharacteristicNominal_SquareCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StraightnessCharacteristicNominal_StraightnessCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileCharacteristicNominal_SurfaceProfileCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileNonUniformCharacteristicNominal_SurfaceProfileNonUniformCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceTextureCharacteristicNominal_SurfaceTextureCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SymmetryCharacteristicNominal_SymmetryCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThicknessCharacteristicNominal_ThicknessCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadCharacteristicNominal_ThreadCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidicityCharacteristicNominal_ToroidicityCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalRunoutCharacteristicNominal_TotalRunoutCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAngularCharacteristicNominal_UserDefinedAngularCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAreaCharacteristicNominal_UserDefinedAreaCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAttributeCharacteristicNominal_UserDefinedAttributeCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedForceCharacteristicNominal_UserDefinedForceCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedLinearCharacteristicNominal_UserDefinedLinearCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedMassCharacteristicNominal_UserDefinedMassCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedPressureCharacteristicNominal_UserDefinedPressureCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedSpeedCharacteristicNominal_UserDefinedSpeedCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTemperatureCharacteristicNominal_UserDefinedTemperatureCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTimeCharacteristicNominal_UserDefinedTimeCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedUnitCharacteristicNominal_UserDefinedUnitCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldBevelCharacteristicNominal_WeldBevelCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldCompoundCharacteristicNominal_WeldCompoundCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldEdgeCharacteristicNominal_WeldEdgeCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFilletCharacteristicNominal_WeldFilletCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareBevelCharacteristicNominal_WeldFlareBevelCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareVCharacteristicNominal_WeldFlareVCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldJCharacteristicNominal_WeldJCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldPlugCharacteristicNominal_WeldPlugCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldScarfCharacteristicNominal_WeldScarfCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSeamCharacteristicNominal_WeldSeamCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSlotCharacteristicNominal_WeldSlotCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSpotCharacteristicNominal_WeldSpotCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSquareCharacteristicNominal_WeldSquareCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldStudCharacteristicNominal_WeldStudCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSurfacingCharacteristicNominal_WeldSurfacingCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldUCharacteristicNominal_WeldUCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldVCharacteristicNominal_WeldVCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WidthCharacteristicNominal_WidthCharacteristicNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicNominalsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicNominalsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt CharacteristicNominalsCountEND
          {$$ = $4;}
        ;

y_CharacteristicNominalsType :
          y_LiztAttributePair ENDITEM
          y_LiztCharacteristicNominal_substituteType_1_u
          {$$ = new CharacteristicNominalsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicNominalsType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicNominals_CharacteristicNominalsType :
          CharacteristicNominalsSTART y_CharacteristicNominalsType
          CharacteristicNominalsEND
          {$$ = $2;}
        ;

y_CharacteristicS_1128_CharacteristicS_1128_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CharacteristicS_1128_Type
          {$$ = $1;}
        ;

y_CharacteristicS_1128_Type :
          y_CharacteristicS_1128_TypeChoicePair
          {$$ = new CharacteristicS_1128_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicS_1128_TypeChoicePair :
          y_AlgorithmId_QIFReferenceType
          {$$ = new CharacteristicS_1128_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1128_TypeType = CharacteristicS_1128_TypeChoicePair::AlgorithmIdE;
           $$->CharacteristicS_1128_TypeValue.AlgorithmId = $1;
          }
        | y_SoftwareId_QIFReferenceType
          {$$ = new CharacteristicS_1128_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1128_TypeType = CharacteristicS_1128_TypeChoicePair::SoftwareIdE;
           $$->CharacteristicS_1128_TypeValue.SoftwareId = $1;
          }
        | y_StandardId_QIFReferenceType
          {$$ = new CharacteristicS_1128_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1128_TypeType = CharacteristicS_1128_TypeChoicePair::StandardIdE;
           $$->CharacteristicS_1128_TypeValue.StandardId = $1;
          }
        ;

y_CharacteristicS_1129_CharacteristicS_1129_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CharacteristicS_1129_Type
          {$$ = $1;}
        ;

y_CharacteristicS_1129_Type :
          y_CharacteristicS_1129_TypeChoicePair
          {$$ = new CharacteristicS_1129_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicS_1129_TypeChoicePair :
          y_CharacteristicS_1151_CharacteristicS_1151_Type
          {$$ = new CharacteristicS_1129_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1129_TypeType = CharacteristicS_1129_TypeChoicePair::CharacteristicS_1151E;
           $$->CharacteristicS_1129_TypeValue.CharacteristicS_1151 = $1;
          }
        | y_CharacteristicS_1152_CharacteristicS_1152_Type
          {$$ = new CharacteristicS_1129_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1129_TypeType = CharacteristicS_1129_TypeChoicePair::CharacteristicS_1152E;
           $$->CharacteristicS_1129_TypeValue.CharacteristicS_1152 = $1;
          }
        ;

y_CharacteristicS_1151_CharacteristicS_1151_Type :
          y_CharacteristicS_1151_Type
          {$$ = $1;}
        ;

y_CharacteristicS_1151_Type :
          y_CharacteristicS_1151_TypeChoicePair
          {$$ = new CharacteristicS_1151_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicS_1151_TypeChoicePair :
          y_MeasuredIds_StatsArrayIdType
          {$$ = new CharacteristicS_1151_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1151_TypeType = CharacteristicS_1151_TypeChoicePair::MeasuredIdsE;
           $$->CharacteristicS_1151_TypeValue.MeasuredIds = $1;
          }
        | y_Subgroups_SubgroupsType
          {$$ = new CharacteristicS_1151_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1151_TypeType = CharacteristicS_1151_TypeChoicePair::SubgroupsE;
           $$->CharacteristicS_1151_TypeValue.Subgroups = $1;
          }
        ;

y_CharacteristicS_1152_CharacteristicS_1152_Type :
          y_CharacteristicS_1152_Type
          {$$ = $1;}
        ;

y_CharacteristicS_1152_Type :
          y_CharacteristicS_1152_TypeChoicePair
          {$$ = new CharacteristicS_1152_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicS_1152_TypeChoicePair :
          y_MeasuredValues_StatsValuesType
          {$$ = new CharacteristicS_1152_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1152_TypeType = CharacteristicS_1152_TypeChoicePair::MeasuredValuesE;
           $$->CharacteristicS_1152_TypeValue.MeasuredValues = $1;
          }
        | y_SubgroupValues_SubgroupValuesType
          {$$ = new CharacteristicS_1152_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicS_1152_TypeType = CharacteristicS_1152_TypeChoicePair::SubgroupValuesE;
           $$->CharacteristicS_1152_TypeValue.SubgroupValues = $1;
          }
        ;

y_CharacteristicStats_substituteType :
          y_AngleBetweenCharacteristicStats_AngleBetweenCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleCharacteristicStats_AngleCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngleFromCharacteristicStats_AngleFromCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularCharacteristicStats_AngularCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularCoordinateCharacteristicStats_AngularCoordinateCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AngularityCharacteristicStats_AngularityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ChordCharacteristicStats_ChordCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularRunoutCharacteristicStats_CircularRunoutCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularityCharacteristicStats_CircularityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CoaxialityCharacteristicStats_CoaxialityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConcentricityCharacteristicStats_ConcentricityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalTaperCharacteristicStats_ConicalTaperCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicityCharacteristicStats_ConicityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CurveLengthCharacteristicStats_CurveLengthCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricityCharacteristicStats_CylindricityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DepthCharacteristicStats_DepthCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DiameterCharacteristicStats_DiameterCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceBetweenCharacteristicStats_DistanceBetweenCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DistanceFromCharacteristicStats_DistanceFromCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticityCharacteristicStats_EllipticityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatTaperCharacteristicStats_FlatTaperCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FlatnessCharacteristicStats_FlatnessCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GeometricCharacteristicStats_GeometricCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_HeightCharacteristicStats_HeightCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LengthCharacteristicStats_LengthCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineProfileCharacteristicStats_LineProfileCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearCharacteristicStats_LinearCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearCoordinateCharacteristicStats_LinearCoordinateCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LocationCharacteristicStats_LocationCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OrientationCharacteristicStats_OrientationCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherFormCharacteristicStats_OtherFormCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ParallelismCharacteristicStats_ParallelismCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PerpendicularityCharacteristicStats_PerpendicularityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointProfileCharacteristicStats_PointProfileCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PositionCharacteristicStats_PositionCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RadiusCharacteristicStats_RadiusCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalDiameterCharacteristicStats_SphericalDiameterCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalRadiusCharacteristicStats_SphericalRadiusCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericityCharacteristicStats_SphericityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SquareCharacteristicStats_SquareCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StraightnessCharacteristicStats_StraightnessCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileCharacteristicStats_SurfaceProfileCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceProfileNonUniformCharacteristicStats_SurfaceProfileNonUniformCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceTextureCharacteristicStats_SurfaceTextureCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SymmetryCharacteristicStats_SymmetryCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThicknessCharacteristicStats_ThicknessCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadCharacteristicStats_ThreadCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidicityCharacteristicStats_ToroidicityCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalRunoutCharacteristicStats_TotalRunoutCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAngularCharacteristicStats_UserDefinedAngularCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAreaCharacteristicStats_UserDefinedAreaCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedAttributeCharacteristicStats_UserDefinedAttributeCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedForceCharacteristicStats_UserDefinedForceCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedLinearCharacteristicStats_UserDefinedLinearCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedMassCharacteristicStats_UserDefinedMassCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedPressureCharacteristicStats_UserDefinedPressureCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedSpeedCharacteristicStats_UserDefinedSpeedCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTemperatureCharacteristicStats_UserDefinedTemperatureCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedTimeCharacteristicStats_UserDefinedTimeCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedUnitCharacteristicStats_UserDefinedUnitCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldBevelCharacteristicStats_WeldBevelCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldCompoundCharacteristicStats_WeldCompoundCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldEdgeCharacteristicStats_WeldEdgeCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFilletCharacteristicStats_WeldFilletCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareBevelCharacteristicStats_WeldFlareBevelCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldFlareVCharacteristicStats_WeldFlareVCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldJCharacteristicStats_WeldJCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldPlugCharacteristicStats_WeldPlugCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldScarfCharacteristicStats_WeldScarfCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSeamCharacteristicStats_WeldSeamCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSlotCharacteristicStats_WeldSlotCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSpotCharacteristicStats_WeldSpotCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSquareCharacteristicStats_WeldSquareCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldStudCharacteristicStats_WeldStudCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldSurfacingCharacteristicStats_WeldSurfacingCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldUCharacteristicStats_WeldUCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WeldVCharacteristicStats_WeldVCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WidthCharacteristicStats_WidthCharacteristicStatsEvalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CharacteristicStatusEnumType :
          DATASTRING
          {$$ = new CharacteristicStatusEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CharacteristicStatusEnumType value");
          }
        ;

y_CharacteristicStatusEnum_CharacteristicStatusEnumType :
          CharacteristicStatusEnumSTART ENDITEM {yyReadData = 1;}
          y_CharacteristicStatusEnumType CharacteristicStatusEnumEND
          {$$ = $4;}
        ;

y_CharacteristicStatusType :
          ENDITEM y_CharacteristicStatusTypeChoicePair
          {$$ = new CharacteristicStatusType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CharacteristicStatusTypeChoicePair :
          y_CharacteristicStatusEnum_CharacteristicStatusEnumType
          {$$ = new CharacteristicStatusTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicStatusTypeType = CharacteristicStatusTypeChoicePair::CharacteristicStatusEnumE;
           $$->CharacteristicStatusTypeValue.CharacteristicStatusEnum = $1;
          }
        | y_OtherCharacteristicStatus_XmlString
          {$$ = new CharacteristicStatusTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CharacteristicStatusTypeType = CharacteristicStatusTypeChoicePair::OtherCharacteristicStatusE;
           $$->CharacteristicStatusTypeValue.OtherCharacteristicStatus = $1;
          }
        ;

y_CharacteristicToleranceType :
          /* empty */
          {$$ = new CharacteristicToleranceType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_CharacteristicTolerance_CharacteristicToleranceType :
          CharacteristicToleranceSTART y_CharacteristicToleranceType
          ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "CharacteristicTolerance";
          }
        ;

y_CharacteristicTypeEnumType :
          DATASTRING
          {$$ = new CharacteristicTypeEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CharacteristicTypeEnumType value");
          }
        ;

y_CharacteristicTypeEnum_CharacteristicTypeEnumType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicTypeEnumSTART ENDITEM {yyReadData = 1;}
          y_CharacteristicTypeEnumType CharacteristicTypeEnumEND
          {$$ = $4;}
        ;

y_CharacteristicsStatsType :
          y_LiztAttributePair ENDITEM
          y_LiztCharacteristicStats_substituteType_1_u
          {$$ = new CharacteristicsStatsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CharacteristicsStatsType attributes");
             }
           delete $1;
          }
        ;

y_CharacteristicsStats_CharacteristicsStatsType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicsStatsSTART y_CharacteristicsStatsType
          CharacteristicsStatsEND
          {$$ = $2;}
        ;

y_Characteristics_CharacteristicAspectsListsType_0 :
          /* empty */
          {$$ = 0;}
        | CharacteristicsSTART y_CharacteristicAspectsListsType
          CharacteristicsEND
          {$$ = $2;}
        ;

y_ChargeCoupledDeviceCameraSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_NumberOfPixels_XmlInt_0
          y_MaxReadoutFrequency_UserDefinedUnitValueType_0
          y_HorizontalFieldOfView_LinearValueType_0
          y_VerticalFieldOfView_LinearValueType_0
          y_MaxReadNoise_UserDefinedUnitValueType_0
          y_MaxFrameRate_PositiveDecimalType_0
          y_PixelSize_LinearValueType_0
          y_SustainedDataRate_UserDefinedUnitValueType_0
          y_DarkCurrent_UserDefinedUnitValueType_0
          y_MaxPixelClockSpeed_UserDefinedUnitValueType_0
          y_Linearity_UserDefinedUnitValueType_0
          y_MaxOutputVoltage_UserDefinedUnitValueType_0
          {$$ = new ChargeCoupledDeviceCameraSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ChargeCoupledDeviceCameraSensorType attributes");
             }
           delete $1;
          }
        ;

y_ChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType :
          ChargeCoupledDeviceCameraSensorSTART
          y_ChargeCoupledDeviceCameraSensorType
          ChargeCoupledDeviceCameraSensorEND
          {$$ = $2;
           $$->printElement = "ChargeCoupledDeviceCameraSensor";
          }
        ;

y_ChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType_0 :
          /* empty */
          {$$ = 0;}
        | ChargeCoupledDeviceCameraSensorSTART
          y_ChargeCoupledDeviceCameraSensorType
          ChargeCoupledDeviceCameraSensorEND
          {$$ = $2;
           $$->printElement = "ChargeCoupledDeviceCameraSensor";
          }
        ;

y_CheckDetails_CircleCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_CircleCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_CircularArcCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_CircularArcCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_ConeCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_ConeCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_ConicalSegmentCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_ConicalSegmentCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_CylinderCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_CylinderCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_CylindricalSegmentCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_CylindricalSegmentCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_EdgePointCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_EdgePointCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_EllipseCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_EllipseCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_EllipticalArcCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_EllipticalArcCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_ElongatedCircleCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_ElongatedCircleCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_ElongatedCylinderCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_ElongatedCylinderCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_ExtrudedCrossSectionCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_ExtrudedCrossSectionCheckedType
          CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_LineCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_LineCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_OppositeAngledLinesCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_OppositeAngledLinesCheckedType
          CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_OppositeAngledPlanesCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_OppositeAngledPlanesCheckedType
          CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_OppositeParallelLinesCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_OppositeParallelLinesCheckedType
          CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_OppositeParallelPlanesCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_OppositeParallelPlanesCheckedType
          CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_OtherCurveCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_OtherCurveCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_OtherShapeCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_OtherShapeCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_OtherSurfaceCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_OtherSurfaceCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_PlaneCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_PlaneCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_PointCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_PointCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_PointDefinedCurveCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_PointDefinedCurveCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_PointDefinedSurfaceCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_PointDefinedSurfaceCheckedType
          CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_SphereCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_SphereCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_SphericalSegmentCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_SphericalSegmentCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_SurfaceOfRevolutionCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_SurfaceOfRevolutionCheckedType
          CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_ThreadedFeatureCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_ThreadedFeatureCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_ToroidalSegmentCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_ToroidalSegmentCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckDetails_TorusCheckedType_0 :
          /* empty */
          {$$ = 0;}
        | CheckDetailsSTART y_TorusCheckedType CheckDetailsEND
          {$$ = $2;}
        ;

y_CheckStatusEnumType :
          DATASTRING
          {$$ = new CheckStatusEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CheckStatusEnumType value");
          }
        ;

y_Checked_CircleCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new CircleCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_CircleCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_CircularArcCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new CircularArcCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_CircularArcCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_ConeCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new ConeCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_ConeCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_ConicalSegmentCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new ConicalSegmentCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_ConicalSegmentCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_CylinderCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new CylinderCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_CylinderCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_CylindricalSegmentCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new CylindricalSegmentCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_CylindricalSegmentCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_EdgePointCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new EdgePointCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_EdgePointCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_EllipseCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new EllipseCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_EllipseCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_EllipticalArcCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new EllipticalArcCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_EllipticalArcCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_ElongatedCircleCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new ElongatedCircleCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_ElongatedCircleCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_ElongatedCylinderCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new ElongatedCylinderCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_ElongatedCylinderCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_ExtrudedCrossSectionCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new ExtrudedCrossSectionCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_ExtrudedCrossSectionCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_LineCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new LineCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_LineCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_OppositeAngledLinesCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new OppositeAngledLinesCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_OppositeAngledLinesCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_OppositeAngledPlanesCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new OppositeAngledPlanesCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_OppositeAngledPlanesCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_OppositeParallelLinesCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new OppositeParallelLinesCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_OppositeParallelLinesCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_OppositeParallelPlanesCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new OppositeParallelPlanesCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_OppositeParallelPlanesCheckedFeatureType
          CheckedEND
          {$$ = $2;}
        ;

y_Checked_OtherCurveCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new OtherCurveCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_OtherCurveCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_OtherShapeCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new OtherShapeCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_OtherShapeCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_OtherSurfaceCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new OtherSurfaceCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_OtherSurfaceCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_PlaneCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new PlaneCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_PlaneCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_PointCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new PointCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_PointCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_PointDefinedCurveCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new PointDefinedCurveCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_PointDefinedCurveCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_PointDefinedSurfaceCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new PointDefinedSurfaceCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_PointDefinedSurfaceCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_SphereCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new SphereCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_SphereCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_SphericalSegmentCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new SphericalSegmentCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_SphericalSegmentCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_SurfaceOfRevolutionCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new SurfaceOfRevolutionCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_SurfaceOfRevolutionCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_ThreadedFeatureCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new ThreadedFeatureCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_ThreadedFeatureCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_ToroidalSegmentCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new ToroidalSegmentCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_ToroidalSegmentCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_Checked_TorusCheckedFeatureType :
          CheckedSTART ENDWHOLEITEM
          {$$ = new TorusCheckedFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | CheckedSTART y_TorusCheckedFeatureType CheckedEND
          {$$ = $2;}
        ;

y_ChecksApproved_XmlBoolean :
          ChecksApprovedSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ChecksApprovedEND
          {$$ = $4;}
        ;

y_ChecksPerformed_XmlBoolean :
          ChecksPerformedSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ChecksPerformedEND
          {$$ = $4;}
        ;

y_ChordCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new ChordCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ChordCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ChordCharacteristicDefinition_ChordCharacteristicDefinitionType :
          ChordCharacteristicDefinitionSTART
          y_ChordCharacteristicDefinitionType
          ChordCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ChordCharacteristicDefinition";
          }
        ;

y_ChordCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ChordCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ChordCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ChordCharacteristicItem_ChordCharacteristicItemType :
          ChordCharacteristicItemSTART y_ChordCharacteristicItemType
          ChordCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ChordCharacteristicItem";
          }
        ;

y_ChordCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new ChordCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ChordCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ChordCharacteristicMeasurement_ChordCharacteristicMeasurementType :
          ChordCharacteristicMeasurementSTART
          y_ChordCharacteristicMeasurementType
          ChordCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ChordCharacteristicMeasurement";
          }
        ;

y_ChordCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new ChordCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ChordCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ChordCharacteristicNominal_ChordCharacteristicNominalType :
          ChordCharacteristicNominalSTART y_ChordCharacteristicNominalType
          ChordCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ChordCharacteristicNominal";
          }
        ;

y_ChordCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new ChordCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_ChordCharacteristicStats_ChordCharacteristicStatsEvalType :
          ChordCharacteristicStatsSTART y_ChordCharacteristicStatsEvalType
          ChordCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ChordCharacteristicStats";
          }
        ;

y_ChosenResourceIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ChosenResourceIdsSTART y_ArrayReferenceType ChosenResourceIdsEND
          {$$ = $2;}
        ;

y_CircleBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check
          {$$ = new CircleBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircleBestFitType attributes");
             }
           delete $1;
          }
        ;

y_CircleCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new CircleCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircleCenter_Point2dSimpleType :
          CircleCenterSTART y_Point2dSimpleType CircleCenterEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_CircleCheckedFeatureType :
          ENDITEM y_CheckDetails_CircleCheckedType_0
          {$$ = new CircleCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircleCheckedType :
          ENDITEM y_CircleCheckedTypeChoicePair
          {$$ = new CircleCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircleCheckedTypeChoicePair :
          y_Constructed_CircleConstructionMethodType
          {$$ = new CircleCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleCheckedTypeType = CircleCheckedTypeChoicePair::ConstructedE;
           $$->CircleCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new CircleCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleCheckedTypeType = CircleCheckedTypeChoicePair::MeasuredE;
           $$->CircleCheckedTypeValue.Measured = $1;
          }
        ;

y_CircleConstructionMethodType :
          ENDITEM y_CircleConstructionMethodTypeChoicePair
          {$$ = new CircleConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircleConstructionMethodTypeChoicePair :
          y_BestFit_CircleBestFitType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::BestFitE;
           $$->CircleConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_CircleCastType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::CastE;
           $$->CircleConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_CircleCopyType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::CopyE;
           $$->CircleConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromCone_CircleFromConeType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::FromConeE;
           $$->CircleConstructionMethodTypeValue.FromCone = $1;
          }
        | y_FromScan_CircleFromScanType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::FromScanE;
           $$->CircleConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_CircleIntersectionType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::IntersectionE;
           $$->CircleConstructionMethodTypeValue.Intersection = $1;
          }
        | y_Projection_CircleProjectionType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::ProjectionE;
           $$->CircleConstructionMethodTypeValue.Projection = $1;
          }
        | y_Recompensated_CircleRecompType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::RecompensatedE;
           $$->CircleConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_TangentThrough_CircleTangentThroughType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::TangentThroughE;
           $$->CircleConstructionMethodTypeValue.TangentThrough = $1;
          }
        | y_Tangent_CircleTangentType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::TangentE;
           $$->CircleConstructionMethodTypeValue.Tangent = $1;
          }
        | y_Transform_CircleTransformType
          {$$ = new CircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleConstructionMethodTypeType = CircleConstructionMethodTypeChoicePair::TransformE;
           $$->CircleConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_CircleCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCircle_BaseFeatureType
          {$$ = new CircleCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircleFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType
          {$$ = new CircleFeatureDefinitionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircleFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CircleFeatureDefinition_CircleFeatureDefinitionType :
          CircleFeatureDefinitionSTART y_CircleFeatureDefinitionType
          CircleFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "CircleFeatureDefinition";
          }
        ;

y_CircleFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_CircleMeasurementDeterminationType
          {$$ = new CircleFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircleFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_CircleFeatureItem_CircleFeatureItemType :
          CircleFeatureItemSTART y_CircleFeatureItemType
          CircleFeatureItemEND
          {$$ = $2;
           $$->printElement = "CircleFeatureItem";
          }
        ;

y_CircleFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0 y_Normal_MeasuredUnitVectorType_0
          y_Diameter_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_Form_MeasuredLinearValueType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          {$$ = new CircleFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircleFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CircleFeatureMeasurement_CircleFeatureMeasurementType :
          CircleFeatureMeasurementSTART y_CircleFeatureMeasurementType
          CircleFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "CircleFeatureMeasurement";
          }
        | CircleFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new CircleFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "CircleFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CircleFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_CircleFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_Location_PointType y_Normal_UnitVectorType y_Sweep_SweepType_0
          y_Constructed_CircleConstructionMethodType_0
          {$$ = new CircleFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircleFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_CircleFeatureNominal_CircleFeatureNominalType :
          CircleFeatureNominalSTART y_CircleFeatureNominalType
          CircleFeatureNominalEND
          {$$ = $2;
           $$->printElement = "CircleFeatureNominal";
          }
        ;

y_CircleFromConeT_1092_CircleFromConeT_1092_Type :
          y_CircleFromConeT_1092_Type
          {$$ = $1;}
        ;

y_CircleFromConeT_1092_Type :
          y_CircleFromConeT_1092_TypeChoicePair
          {$$ = new CircleFromConeT_1092_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CircleFromConeT_1092_TypeChoicePair :
          y_Diameter_LinearValueType
          {$$ = new CircleFromConeT_1092_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleFromConeT_1092_TypeType = CircleFromConeT_1092_TypeChoicePair::DiameterE;
           $$->CircleFromConeT_1092_TypeValue.Diameter = $1;
          }
        | y_Distance_LinearValueType
          {$$ = new CircleFromConeT_1092_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleFromConeT_1092_TypeType = CircleFromConeT_1092_TypeChoicePair::DistanceE;
           $$->CircleFromConeT_1092_TypeValue.Distance = $1;
          }
        ;

y_CircleFromConeType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_CircleFromConeT_1092_CircleFromConeT_1092_Type
          {$$ = new CircleFromConeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircleFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_Depth_LinearValueType
          {$$ = new CircleFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_CircleIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2_Check
          {$$ = new CircleIntersectionType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircleMeasurementDeterminationType :
          ENDITEM y_CircleMeasurementDeterminationTypeChoicePair
          {$$ = new CircleMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircleMeasurementDeterminationTypeChoicePair :
          y_Checked_CircleCheckedFeatureType
          {$$ = new CircleMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleMeasurementDeterminationTypeType = CircleMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->CircleMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new CircleMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircleMeasurementDeterminationTypeType = CircleMeasurementDeterminationTypeChoicePair::SetE;
           $$->CircleMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_CirclePointSamplingStrategyType :
          ENDITEM y_CirclePointSamplingStrategyTypeChoicePair
          {$$ = new CirclePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CirclePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_ClosedCurvePointSamplingStrategyEnumType
          {$$ = new CirclePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CirclePointSamplingStrategyTypeType = CirclePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->CirclePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new CirclePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CirclePointSamplingStrategyTypeType = CirclePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->CirclePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_CircleProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionCircle_BaseFeatureType
          y_ProjectionPlane_BaseFeatureType
          {$$ = new CircleProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CircleRadius_DoublePositiveType :
          CircleRadiusSTART ENDITEM {yyReadData = 1;} y_DoublePositiveType
          CircleRadiusEND
          {$$ = $4;}
        ;

y_CircleRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new CircleRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircleTangentThroughType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_TangentFeature_BaseFeatureType y_PointFeature_BaseFeatureType
          {$$ = new CircleTangentThroughType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CircleTangentType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztTangentFeature_SequencedBaseFeatureType_2_2_Check
          {$$ = new CircleTangentType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircleTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCircle_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new CircleTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CircleType :
          ENDITEM y_CenterPoint_PointType y_Diameter_LinearValueType
          y_Normal_UnitVectorType
          {$$ = new CircleType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Circle_CircleType :
          CircleSTART y_CircleType CircleEND
          {$$ = $2;}
        ;

y_CircularArcBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check
          {$$ = new CircularArcBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularArcBestFitType attributes");
             }
           delete $1;
          }
        ;

y_CircularArcCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new CircularArcCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircularArcCheckedFeatureType :
          ENDITEM y_CheckDetails_CircularArcCheckedType_0
          {$$ = new CircularArcCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircularArcCheckedType :
          ENDITEM y_CircularArcCheckedTypeChoicePair
          {$$ = new CircularArcCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircularArcCheckedTypeChoicePair :
          y_Constructed_CircularArcConstructionMethodType
          {$$ = new CircularArcCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcCheckedTypeType = CircularArcCheckedTypeChoicePair::ConstructedE;
           $$->CircularArcCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new CircularArcCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcCheckedTypeType = CircularArcCheckedTypeChoicePair::MeasuredE;
           $$->CircularArcCheckedTypeValue.Measured = $1;
          }
        ;

y_CircularArcConstructionMethodType :
          ENDITEM y_CircularArcConstructionMethodTypeChoicePair
          {$$ = new CircularArcConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircularArcConstructionMethodTypeChoicePair :
          y_BestFit_CircularArcBestFitType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::BestFitE;
           $$->CircularArcConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_CircularArcCastType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::CastE;
           $$->CircularArcConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_CircularArcCopyType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::CopyE;
           $$->CircularArcConstructionMethodTypeValue.Copy = $1;
          }
        | y_Extract_CircularArcExtractType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::ExtractE;
           $$->CircularArcConstructionMethodTypeValue.Extract = $1;
          }
        | y_FromScan_CircularArcFromScanType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::FromScanE;
           $$->CircularArcConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_CircularArcIntersectionType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::IntersectionE;
           $$->CircularArcConstructionMethodTypeValue.Intersection = $1;
          }
        | y_Projection_CircularArcProjectionType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::ProjectionE;
           $$->CircularArcConstructionMethodTypeValue.Projection = $1;
          }
        | y_Recompensated_CircularArcRecompType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::RecompensatedE;
           $$->CircularArcConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_CircularArcTransformType
          {$$ = new CircularArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcConstructionMethodTypeType = CircularArcConstructionMethodTypeChoicePair::TransformE;
           $$->CircularArcConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_CircularArcCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseArc_BaseFeatureType
          {$$ = new CircularArcCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircularArcExtractType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_CurveFeature_BaseFeatureType
          {$$ = new CircularArcExtractType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircularArcFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Radius_LinearValueType
          {$$ = new CircularArcFeatureDefinitionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularArcFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CircularArcFeatureDefinition_CircularArcFeatureDefinitionType :
          CircularArcFeatureDefinitionSTART
          y_CircularArcFeatureDefinitionType
          CircularArcFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "CircularArcFeatureDefinition";
          }
        ;

y_CircularArcFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_CircularArcMeasurementDeterminationType
          {$$ = new CircularArcFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularArcFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_CircularArcFeatureItem_CircularArcFeatureItemType :
          CircularArcFeatureItemSTART y_CircularArcFeatureItemType
          CircularArcFeatureItemEND
          {$$ = $2;
           $$->printElement = "CircularArcFeatureItem";
          }
        ;

y_CircularArcFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0 y_Normal_MeasuredUnitVectorType_0
          y_Radius_MeasuredLinearValueType_0
          y_RadiusMin_MeasuredLinearValueType_0
          y_RadiusMax_MeasuredLinearValueType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new CircularArcFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularArcFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CircularArcFeatureMeasurement_CircularArcFeatureMeasurementType :
          CircularArcFeatureMeasurementSTART
          y_CircularArcFeatureMeasurementType
          CircularArcFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "CircularArcFeatureMeasurement";
          }
        | CircularArcFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new CircularArcFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "CircularArcFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CircularArcFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_CircularArcFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_Location_PointType y_Sweep_SweepType y_Normal_UnitVectorType
          y_Constructed_CircularArcConstructionMethodType_0
          {$$ = new CircularArcFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularArcFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_CircularArcFeatureNominal_CircularArcFeatureNominalType :
          CircularArcFeatureNominalSTART y_CircularArcFeatureNominalType
          CircularArcFeatureNominalEND
          {$$ = $2;
           $$->printElement = "CircularArcFeatureNominal";
          }
        ;

y_CircularArcFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_Depth_LinearValueType
          {$$ = new CircularArcFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_CircularArcIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2_Check
          {$$ = new CircularArcIntersectionType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircularArcMeasurementDeterminationType :
          ENDITEM y_CircularArcMeasurementDeterminationTypeChoicePair
          {$$ = new CircularArcMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircularArcMeasurementDeterminationTypeChoicePair :
          y_Checked_CircularArcCheckedFeatureType
          {$$ = new CircularArcMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcMeasurementDeterminationTypeType = CircularArcMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->CircularArcMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new CircularArcMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcMeasurementDeterminationTypeType = CircularArcMeasurementDeterminationTypeChoicePair::SetE;
           $$->CircularArcMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_CircularArcPointSamplingStrategyType :
          ENDITEM y_CircularArcPointSamplingStrategyTypeChoicePair
          {$$ = new CircularArcPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircularArcPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType
          {$$ = new CircularArcPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcPointSamplingStrategyTypeType = CircularArcPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->CircularArcPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new CircularArcPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularArcPointSamplingStrategyTypeType = CircularArcPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->CircularArcPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_CircularArcProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionArc_BaseFeatureType y_ProjectionPlane_BaseFeatureType
          {$$ = new CircularArcProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CircularArcRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new CircularArcRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircularArcTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseArc_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new CircularArcTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CircularRunoutCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          {$$ = new CircularRunoutCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularRunoutCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CircularRunoutCharacteristicDefinition_CircularRunoutCharacteristicDefinitionType :
          CircularRunoutCharacteristicDefinitionSTART
          y_CircularRunoutCharacteristicDefinitionType
          CircularRunoutCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "CircularRunoutCharacteristicDefinition";
          }
        ;

y_CircularRunoutCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new CircularRunoutCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularRunoutCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_CircularRunoutCharacteristicItem_CircularRunoutCharacteristicItemType :
          CircularRunoutCharacteristicItemSTART
          y_CircularRunoutCharacteristicItemType
          CircularRunoutCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "CircularRunoutCharacteristicItem";
          }
        ;

y_CircularRunoutCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0 y_DatumsOk_XmlBoolean_0
          {$$ = new CircularRunoutCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularRunoutCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CircularRunoutCharacteristicMeasurement_CircularRunoutCharacteristicMeasurementType :
          CircularRunoutCharacteristicMeasurementSTART
          y_CircularRunoutCharacteristicMeasurementType
          CircularRunoutCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "CircularRunoutCharacteristicMeasurement";
          }
        ;

y_CircularRunoutCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_ZoneDirection_UnitVectorType_0
          y_ProfileCurveId_QIFReferenceFullType_0
          {$$ = new CircularRunoutCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularRunoutCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_CircularRunoutCharacteristicNominal_CircularRunoutCharacteristicNominalType :
          CircularRunoutCharacteristicNominalSTART
          y_CircularRunoutCharacteristicNominalType
          CircularRunoutCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "CircularRunoutCharacteristicNominal";
          }
        ;

y_CircularRunoutCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_DatumsOkStats_StatsPassFailType_0
          {$$ = new CircularRunoutCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
          }
        ;

y_CircularRunoutCharacteristicStats_CircularRunoutCharacteristicStatsEvalType :
          CircularRunoutCharacteristicStatsSTART
          y_CircularRunoutCharacteristicStatsEvalType
          CircularRunoutCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "CircularRunoutCharacteristicStats";
          }
        ;

y_CircularUnitAreaDiameter_LinearValueType :
          CircularUnitAreaDiameterSTART y_LinearValueType
          CircularUnitAreaDiameterEND
          {$$ = $2;}
        ;

y_CircularUnitAreaType :
          ENDITEM y_CircularUnitAreaDiameter_LinearValueType
          {$$ = new CircularUnitAreaType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircularUnitArea_CircularUnitAreaType :
          CircularUnitAreaSTART y_CircularUnitAreaType CircularUnitAreaEND
          {$$ = $2;}
        ;

y_CircularityChar_1048_CircularityChar_1048_Type :
          y_CircularityChar_1048_Type
          {$$ = $1;}
        ;

y_CircularityChar_1048_Type :
          y_CircularityChar_1048_TypeChoicePair
          {$$ = new CircularityChar_1048_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CircularityChar_1048_TypeChoicePair :
          y_CircularityChar_1081_CircularityChar_1081_Type
          {$$ = new CircularityChar_1048_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularityChar_1048_TypeType = CircularityChar_1048_TypeChoicePair::CircularityChar_1081E;
           $$->CircularityChar_1048_TypeValue.CircularityChar_1081 = $1;
          }
        | y_CircularityChar_1082_CircularityChar_1082_Type
          {$$ = new CircularityChar_1048_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularityChar_1048_TypeType = CircularityChar_1048_TypeChoicePair::CircularityChar_1082E;
           $$->CircularityChar_1048_TypeValue.CircularityChar_1082 = $1;
          }
        ;

y_CircularityChar_1049_CircularityChar_1049_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CircularityChar_1049_Type
          {$$ = $1;}
        ;

y_CircularityChar_1049_Type :
          y_ZoneRadii_MeasuredZoneRadiiType y_ZonePlane_MeasuredPlaneType
          {$$ = new CircularityChar_1049_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CircularityChar_1081_CircularityChar_1081_Type :
          y_CircularityChar_1081_Type
          {$$ = $1;}
        ;

y_CircularityChar_1081_Type :
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_CircularityChar_1090_CircularityChar_1090_Type_0
          {$$ = new CircularityChar_1081_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CircularityChar_1082_CircularityChar_1082_Type :
          y_CircularityChar_1082_Type
          {$$ = $1;}
        ;

y_CircularityChar_1082_Type :
          y_CircularityChar_1082_TypeChoicePair
          {$$ = new CircularityChar_1082_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CircularityChar_1082_TypeChoicePair :
          y_ToleranceZonePerUnitAngle_ToleranceZonePerUnitAngleType
          {$$ = new CircularityChar_1082_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularityChar_1082_TypeType = CircularityChar_1082_TypeChoicePair::ToleranceZonePerUnitAngleE;
           $$->CircularityChar_1082_TypeValue.ToleranceZonePerUnitAngle = $1;
          }
        | y_ToleranceZonePerUnitArcLength_ToleranceZonePerUnitLengthType
          {$$ = new CircularityChar_1082_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularityChar_1082_TypeType = CircularityChar_1082_TypeChoicePair::ToleranceZonePerUnitArcLengthE;
           $$->CircularityChar_1082_TypeValue.ToleranceZonePerUnitArcLength = $1;
          }
        ;

y_CircularityChar_1090_CircularityChar_1090_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CircularityChar_1090_Type
          {$$ = $1;}
        ;

y_CircularityChar_1090_Type :
          y_CircularityChar_1090_TypeChoicePair
          {$$ = new CircularityChar_1090_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CircularityChar_1090_TypeChoicePair :
          y_ToleranceZonePerUnitAngle_ToleranceZonePerUnitAngleType
          {$$ = new CircularityChar_1090_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularityChar_1090_TypeType = CircularityChar_1090_TypeChoicePair::ToleranceZonePerUnitAngleE;
           $$->CircularityChar_1090_TypeValue.ToleranceZonePerUnitAngle = $1;
          }
        | y_ToleranceZonePerUnitArcLength_ToleranceZonePerUnitLengthType
          {$$ = new CircularityChar_1090_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CircularityChar_1090_TypeType = CircularityChar_1090_TypeChoicePair::ToleranceZonePerUnitArcLengthE;
           $$->CircularityChar_1090_TypeValue.ToleranceZonePerUnitArcLength = $1;
          }
        ;

y_CircularityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_CircularityChar_1048_CircularityChar_1048_Type
          {$$ = new CircularityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CircularityCharacteristicDefinition_CircularityCharacteristicDefinitionType :
          CircularityCharacteristicDefinitionSTART
          y_CircularityCharacteristicDefinitionType
          CircularityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "CircularityCharacteristicDefinition";
          }
        ;

y_CircularityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new CircularityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_CircularityCharacteristicItem_CircularityCharacteristicItemType :
          CircularityCharacteristicItemSTART
          y_CircularityCharacteristicItemType
          CircularityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "CircularityCharacteristicItem";
          }
        ;

y_CircularityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_MaxCircularity_MeasuredLinearValueType_0
          y_CircularityChar_1049_CircularityChar_1049_Type_0
          {$$ = new CircularityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CircularityCharacteristicMeasurement_CircularityCharacteristicMeasurementType :
          CircularityCharacteristicMeasurementSTART
          y_CircularityCharacteristicMeasurementType
          CircularityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "CircularityCharacteristicMeasurement";
          }
        ;

y_CircularityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_ProfileCurveId_QIFReferenceFullType_0
          {$$ = new CircularityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CircularityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_CircularityCharacteristicNominal_CircularityCharacteristicNominalType :
          CircularityCharacteristicNominalSTART
          y_CircularityCharacteristicNominalType
          CircularityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "CircularityCharacteristicNominal";
          }
        ;

y_CircularityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_MaxCircularityStats_StatsLinearType_0
          {$$ = new CircularityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
          }
        ;

y_CircularityCharacteristicStats_CircularityCharacteristicStatsEvalType :
          CircularityCharacteristicStatsSTART
          y_CircularityCharacteristicStatsEvalType
          CircularityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "CircularityCharacteristicStats";
          }
        ;

y_ClosedCurvePointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new ClosedCurvePointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ClosedCurvePointSamplingStrategyEnumType value");
          }
        ;

y_ClosedShellSetType :
          ENDITEM y_PointSet_PointSetType_0 y_Curve12Set_Curve12SetType_0
          y_Curve13Set_Curve13SetType_0 y_SurfaceSet_SurfaceSetType_0
          y_CurveMeshSet_CurveMeshSetType_0
          y_SurfaceMeshSet_SurfaceMeshSetType_0 y_VertexSet_VertexSetType_0
          y_EdgeSet_EdgeSetType_0 y_LoopSet_LoopSetType_0
          y_FaceSet_FaceSetType_0 y_ShellSet_ShellSetType
          {$$ = new ClosedShellSetType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
          }
        ;

y_ClosedShellSetWorkingVolumeType :
          ENDITEM y_WorkingClosedShellSet_ClosedShellSetType
          {$$ = new ClosedShellSetWorkingVolumeType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ClosedShellSetWorkingVolume_ClosedShellSetWorkingVolumeType :
          ClosedShellSetWorkingVolumeSTART
          y_ClosedShellSetWorkingVolumeType ClosedShellSetWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "ClosedShellSetWorkingVolume";
          }
        ;

y_ClosedSurface_InternalExternalEnumType :
          ClosedSurfaceSTART ENDITEM {yyReadData = 1;}
          y_InternalExternalEnumType ClosedSurfaceEND
          {$$ = $4;}
        ;

y_Cm_StatsMeasuredDecimalType :
          CmSTART y_StatsMeasuredDecimalType CmEND
          {$$ = $2;
           $$->printElement = "Cm";
          }
        ;

y_Cmk_StatsMeasuredDecimalType :
          CmkSTART y_StatsMeasuredDecimalType CmkEND
          {$$ = $2;
           $$->printElement = "Cmk";
          }
        ;

y_CoEdgeMeshType :
          ENDITEM y_EdgeOriented_EdgeOrientedType
          y_CurveMesh_ElementReferenceType_0
          {$$ = new CoEdgeMeshType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CoEdgeMesh_CoEdgeMeshType :
          CoEdgeMeshSTART y_CoEdgeMeshType CoEdgeMeshEND
          {$$ = $2;}
        ;

y_CoEdgeType :
          ENDITEM y_EdgeOriented_EdgeOrientedType
          y_Curve12_ElementReferenceType_0
          {$$ = new CoEdgeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CoEdge_CoEdgeType :
          CoEdgeSTART y_CoEdgeType CoEdgeEND
          {$$ = $2;}
        ;

y_CoEdgesMeshType :
          y_LiztAttributePair ENDITEM y_LiztCoEdgeMesh_CoEdgeMeshType_1_u
          {$$ = new CoEdgesMeshType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoEdgesMeshType attributes");
             }
           delete $1;
          }
        ;

y_CoEdgesMesh_CoEdgesMeshType :
          CoEdgesMeshSTART y_CoEdgesMeshType CoEdgesMeshEND
          {$$ = $2;}
        ;

y_CoEdgesType :
          y_LiztAttributePair ENDITEM y_LiztCoEdge_CoEdgeType_1_u
          {$$ = new CoEdgesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoEdgesType attributes");
             }
           delete $1;
          }
        ;

y_CoEdges_CoEdgesType :
          CoEdgesSTART y_CoEdgesType CoEdgesEND
          {$$ = $2;}
        ;

y_CoaxialityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_ZoneShape_CoaxialityZoneShapeType
          {$$ = new CoaxialityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoaxialityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CoaxialityCharacteristicDefinition_CoaxialityCharacteristicDefinitionType :
          CoaxialityCharacteristicDefinitionSTART
          y_CoaxialityCharacteristicDefinitionType
          CoaxialityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "CoaxialityCharacteristicDefinition";
          }
        ;

y_CoaxialityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new CoaxialityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoaxialityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_CoaxialityCharacteristicItem_CoaxialityCharacteristicItemType :
          CoaxialityCharacteristicItemSTART
          y_CoaxialityCharacteristicItemType
          CoaxialityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "CoaxialityCharacteristicItem";
          }
        ;

y_CoaxialityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_ZoneDataSet_ZoneDataSetType_0 y_DatumsOk_XmlBoolean_0
          {$$ = new CoaxialityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoaxialityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CoaxialityCharacteristicMeasurement_CoaxialityCharacteristicMeasurementType :
          CoaxialityCharacteristicMeasurementSTART
          y_CoaxialityCharacteristicMeasurementType
          CoaxialityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "CoaxialityCharacteristicMeasurement";
          }
        ;

y_CoaxialityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new CoaxialityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoaxialityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_CoaxialityCharacteristicNominal_CoaxialityCharacteristicNominalType :
          CoaxialityCharacteristicNominalSTART
          y_CoaxialityCharacteristicNominalType
          CoaxialityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "CoaxialityCharacteristicNominal";
          }
        ;

y_CoaxialityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          {$$ = new CoaxialityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
          }
        ;

y_CoaxialityCharacteristicStats_CoaxialityCharacteristicStatsEvalType :
          CoaxialityCharacteristicStatsSTART
          y_CoaxialityCharacteristicStatsEvalType
          CoaxialityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "CoaxialityCharacteristicStats";
          }
        ;

y_CoaxialityDiametricalZoneType :
          /* empty */
          {
           $$ = new CoaxialityDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_CoaxialityNonDiametricalZoneType :
          /* empty */
          {
           $$ = new CoaxialityNonDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_CoaxialityZoneShapeType :
          ENDITEM y_CoaxialityZoneShapeTypeChoicePair
          {$$ = new CoaxialityZoneShapeType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CoaxialityZoneShapeTypeChoicePair :
          y_DiametricalZone_CoaxialityDiametricalZoneType
          {$$ = new CoaxialityZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CoaxialityZoneShapeTypeType = CoaxialityZoneShapeTypeChoicePair::DiametricalZoneE;
           $$->CoaxialityZoneShapeTypeValue.DiametricalZone = $1;
          }
        | y_NonDiametricalZone_CoaxialityNonDiametricalZoneType
          {$$ = new CoaxialityZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CoaxialityZoneShapeTypeType = CoaxialityZoneShapeTypeChoicePair::NonDiametricalZoneE;
           $$->CoaxialityZoneShapeTypeValue.NonDiametricalZone = $1;
          }
        ;

y_Coefficients_ArrayPoint2dType :
          CoefficientsSTART y_ArrayPoint2dType CoefficientsEND
          {$$ = $2;}
        ;

y_Coefficients_ArrayPointType :
          CoefficientsSTART y_ArrayPointType CoefficientsEND
          {$$ = $2;}
        ;

y_CollectionPlaneEnum_ModifyingPlaneEnumType :
          CollectionPlaneEnumSTART ENDITEM {yyReadData = 1;}
          y_ModifyingPlaneEnumType CollectionPlaneEnumEND
          {$$ = $4;}
        ;

y_CollectionPlaneType :
          ENDITEM y_CollectionPlaneEnum_ModifyingPlaneEnumType
          y_DatumDefinitionId_QIFReferenceFullType
          {$$ = new CollectionPlaneType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CollectionPlane_CollectionPlaneType_0 :
          /* empty */
          {$$ = 0;}
        | CollectionPlaneSTART y_CollectionPlaneType CollectionPlaneEND
          {$$ = $2;}
        ;

y_ColorType :
          ENDITEM {yyReadDataList = 1;} y_XmlInteger
          {$$ = new ColorType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ColorType y_XmlInteger
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Color_ColorType_0 :
          /* empty */
          {$$ = 0;}
        | ColorSTART y_ColorType ColorEND
          {$$ = $2;
           $2->ColorTypeCheck();
           if ($2->bad)
             return yyerror("bad ColorType value");
          }
        ;

y_Colors_ListIntType :
          ColorsSTART y_ListIntType ColorsEND
          {$$ = $2;}
        ;

y_CombinedAzimuthalResolution_AngularValueType :
          CombinedAzimuthalResolutionSTART y_AngularValueType
          CombinedAzimuthalResolutionEND
          {$$ = $2;}
        ;

y_CombinedCartesianResolution_LinearValueType :
          CombinedCartesianResolutionSTART y_LinearValueType
          CombinedCartesianResolutionEND
          {$$ = $2;}
        ;

y_CombinedPolarResolution_AngularValueType :
          CombinedPolarResolutionSTART y_AngularValueType
          CombinedPolarResolutionEND
          {$$ = $2;}
        ;

y_CombinedRadialResolution_LinearValueType :
          CombinedRadialResolutionSTART y_LinearValueType
          CombinedRadialResolutionEND
          {$$ = $2;}
        ;

y_CombinedSphericalResolutionType :
          ENDITEM y_CombinedRadialResolution_LinearValueType
          y_CombinedAzimuthalResolution_AngularValueType
          y_CombinedPolarResolution_AngularValueType
          {$$ = new CombinedSphericalResolutionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CombinedSphericalResolution_CombinedSphericalResolutionType :
          CombinedSphericalResolutionSTART
          y_CombinedSphericalResolutionType CombinedSphericalResolutionEND
          {$$ = $2;}
        ;

y_CombinedUserDefinedResolutionType :
          ENDITEM y_ACombinedResolution_LinearOrRotaryAxisType
          y_BCombinedResolution_LinearOrRotaryAxisType
          y_CCombinedResolution_LinearOrRotaryAxisType
          {$$ = new CombinedUserDefinedResolutionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CombinedUserDefinedResolution_CombinedUserDefinedResolutionType :
          CombinedUserDefinedResolutionSTART
          y_CombinedUserDefinedResolutionType
          CombinedUserDefinedResolutionEND
          {$$ = $2;}
        ;

y_CommonCoordinateSystemId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | CommonCoordinateSystemIdSTART y_QIFReferenceFullType
          CommonCoordinateSystemIdEND
          {$$ = $2;}
        ;

y_CommonFileSpecEnumType :
          DATASTRING
          {$$ = new CommonFileSpecEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CommonFileSpecEnumType value");
          }
        ;

y_CommonFileSpecEnum_CommonFileSpecEnumType :
          CommonFileSpecEnumSTART ENDITEM {yyReadData = 1;}
          y_CommonFileSpecEnumType CommonFileSpecEnumEND
          {$$ = $4;}
        ;

y_CommonStatsValue_substituteType :
          y_EffectiveNumber_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberSubgroups_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupEffectiveNumbers_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupTotalNumbers_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalNumber_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CommonTolerance_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | CommonToleranceSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          CommonToleranceEND
          {$$ = $4;}
        ;

y_CommonZone_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | CommonZoneSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          CommonZoneEND
          {$$ = $4;}
        ;

y_Comparison_ArithmeticComparisonEnumType :
          ComparisonSTART ENDITEM {yyReadData = 1;}
          y_ArithmeticComparisonEnumType ComparisonEND
          {$$ = $4;}
        ;

y_Compensated_XmlBoolean :
          CompensatedSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          CompensatedEND
          {$$ = $4;}
        ;

y_Compensations_ListBooleanType :
          CompensationsSTART y_ListBooleanType CompensationsEND
          {$$ = $2;}
        ;

y_ComplexTactileProbeSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_LocatedTips_LocatedTipsType
          {$$ = new ComplexTactileProbeSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ComplexTactileProbeSensorType attributes");
             }
           delete $1;
          }
        ;

y_ComplexTactileProbeSensor_ComplexTactileProbeSensorType :
          ComplexTactileProbeSensorSTART y_ComplexTactileProbeSensorType
          ComplexTactileProbeSensorEND
          {$$ = $2;
           $$->printElement = "ComplexTactileProbeSensor";
          }
        ;

y_ComponentIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ComponentIdsSTART y_ArrayReferenceFullType ComponentIdsEND
          {$$ = $2;}
        ;

y_ComponentIds_ArrayReferenceType :
          ComponentIdsSTART y_ArrayReferenceType ComponentIdsEND
          {$$ = $2;}
        ;

y_ComponentIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ComponentIdsSTART y_ArrayReferenceType ComponentIdsEND
          {$$ = $2;}
        ;

y_ComponentSetType :
          y_LiztAttributePair ENDITEM y_LiztComponent_ComponentType_1_u
          {$$ = new ComponentSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ComponentSetType attributes");
             }
           delete $1;
          }
        ;

y_ComponentSet_ComponentSetType_0 :
          /* empty */
          {$$ = 0;}
        | ComponentSetSTART y_ComponentSetType ComponentSetEND
          {$$ = $2;}
        ;

y_ComponentType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Transform_ElementReferenceType_0 y_UUID_QPIdType_0
          y_Traceability_ProductTraceabilityType_0
          y_ComponentType_1237_ComponentType_1237_Type
          {$$ = new ComponentType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ComponentType attributes");
             }
           delete $1;
          }
        ;

y_ComponentType_1237_ComponentType_1237_Type :
          y_ComponentType_1237_Type
          {$$ = $1;}
        ;

y_ComponentType_1237_Type :
          y_ComponentType_1237_TypeChoicePair
          {$$ = new ComponentType_1237_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ComponentType_1237_TypeChoicePair :
          y_Assembly_ElementReferenceType
          {$$ = new ComponentType_1237_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ComponentType_1237_TypeType = ComponentType_1237_TypeChoicePair::AssemblyE;
           $$->ComponentType_1237_TypeValue.Assembly = $1;
          }
        | y_Part_ElementReferenceType
          {$$ = new ComponentType_1237_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ComponentType_1237_TypeType = ComponentType_1237_TypeChoicePair::PartE;
           $$->ComponentType_1237_TypeValue.Part = $1;
          }
        ;

y_Component_ComponentType :
          ComponentSTART y_ComponentType ComponentEND
          {$$ = $2;
           $$->printElement = "Component";
          }
        ;

y_CompositeLevel_CompositeSegmentLowerLevelEnumType_0 :
          /* empty */
          {$$ = 0;}
        | CompositeLevelSTART ENDITEM {yyReadData = 1;}
          y_CompositeSegmentLowerLevelEnumType CompositeLevelEND
          {$$ = $4;}
        ;

y_CompositeSegmentLowerLevelEnumType :
          DATASTRING
          {$$ = new CompositeSegmentLowerLevelEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CompositeSegmentLowerLevelEnumType value");
          }
        ;

y_CompositeSegmentPositionDefinitionType :
          ENDITEM y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_MaterialCondition_MaterialModifierEnumType
          y_ZoneShape_PositionZoneShapeType
          y_MaximumToleranceValue_LinearValueType_0
          y_ProjectedToleranceZone_LinearValueType_0
          {$$ = new CompositeSegmentPositionDefinitionType($2, $3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
          }
        ;

y_CompositeSegmentPositionMeasurementType :
          ENDITEM y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_Status_CharacteristicStatusType
          y_DRFTransformActualId_QIFReferenceType_0
          y_ZoneDataSet_ZoneDataSetType_0
          {$$ = new CompositeSegmentPositionMeasurementType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_CompositeSegmentPositionStatsEvalType :
          ENDITEM y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          {$$ = new CompositeSegmentPositionStatsEvalType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CompositeSegmentProfileDefinitionType :
          ENDITEM y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_OuterDisposition_LinearValueType_0
          {$$ = new CompositeSegmentProfileDefinitionType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_CompositeSegmentProfileMeasurementType :
          ENDITEM y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_Status_CharacteristicStatusType
          y_DRFTransformActualId_QIFReferenceType_0
          y_ZoneDataSet_ZoneDataSetType_0
          {$$ = new CompositeSegmentProfileMeasurementType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_CompositeSegmentProfileStatsEvalType :
          ENDITEM y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          {$$ = new CompositeSegmentProfileStatsEvalType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CompositeSegmentSymmetryDefinitionType :
          ENDITEM y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new CompositeSegmentSymmetryDefinitionType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_CompositeSegmentSymmetryMeasurementType :
          ENDITEM y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_Status_CharacteristicStatusType
          y_DRFTransformActualId_QIFReferenceType_0
          y_ZoneDataSet_ZoneDataSetType_0
          {$$ = new CompositeSegmentSymmetryMeasurementType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_CompositeSegmentSymmetryStatsEvalType :
          ENDITEM y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          {$$ = new CompositeSegmentSymmetryStatsEvalType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CompositeSegmentsPositionStatsEvalType :
          ENDITEM
          y_SecondCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType
          y_ThirdCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType_0
          y_FourthCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType_0
          {$$ = new CompositeSegmentsPositionStatsEvalType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CompositeSegmentsProfileStatsEvalType :
          ENDITEM
          y_SecondCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType
          y_ThirdCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType_0
          y_FourthCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType_0
          {$$ = new CompositeSegmentsProfileStatsEvalType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CompositeSegmentsStats_CompositeSegmentsPositionStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | CompositeSegmentsStatsSTART
          y_CompositeSegmentsPositionStatsEvalType
          CompositeSegmentsStatsEND
          {$$ = $2;}
        ;

y_CompositeSegmentsStats_CompositeSegmentsProfileStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | CompositeSegmentsStatsSTART
          y_CompositeSegmentsProfileStatsEvalType CompositeSegmentsStatsEND
          {$$ = $2;}
        ;

y_CompositeSegmentsStats_CompositeSegmentsSymmetryStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | CompositeSegmentsStatsSTART
          y_CompositeSegmentsSymmetryStatsEvalType
          CompositeSegmentsStatsEND
          {$$ = $2;}
        ;

y_CompositeSegmentsSymmetryStatsEvalType :
          ENDITEM
          y_SecondCompositeSegmentSymmetryStats_CompositeSegmentSymmetryStatsEvalType
          y_ThirdCompositeSegmentSymmetryStats_CompositeSegmentSymmetryStatsEvalType_0
          {$$ = new CompositeSegmentsSymmetryStatsEvalType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CompoundDatumType :
          y_LiztAttributePair ENDITEM
          y_LiztDatum_SequencedDatumType_2_u_Check
          y_ReducedDatum_ReducedDatumEnumType_0
          {$$ = new CompoundDatumType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CompoundDatumType attributes");
             }
           delete $1;
          }
        ;

y_CompoundDatum_CompoundDatumType :
          CompoundDatumSTART y_CompoundDatumType CompoundDatumEND
          {$$ = $2;}
        ;

y_CompressiveYieldStress_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | CompressiveYieldStressSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          CompressiveYieldStressEND
          {$$ = $4;}
        ;

y_ComputedTomographyMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new ComputedTomographyMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ComputedTomographyMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_ComputedTomographyMeasureFeatureMethod_ComputedTomographyMeasureFeatureMethodType :
          ComputedTomographyMeasureFeatureMethodSTART
          y_ComputedTomographyMeasureFeatureMethodType
          ComputedTomographyMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "ComputedTomographyMeasureFeatureMethod";
          }
        | ComputedTomographyMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ComputedTomographyMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ComputedTomographyMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ComputedTomographyMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_ComputedTomographyType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_SourceDescription_XmlString_0
          y_SamplePenetratingMaterial_XmlString_0
          y_SamplePenetratingMaterialLength_LinearValueType_0
          y_FocalSpotSize_LinearValueType_0
          y_MaxWorkpieceMass_MassValueType_0 y_SafetyLevel_XmlString_0
          y_CabinetDimensions_CartesianWorkingVolumeType_0
          y_MaxPower_UserDefinedUnitValueType_0
          y_DetectorBitNumber_XmlDecimal_0
          y_DetectorPixelSize_LinearValueType_0
          y_ActivePixelsNumber_FunctionDiscreteType_0
          y_MaxKV_UserDefinedUnitValueType_0
          y_MinOperatingCurrent_UserDefinedUnitValueType_0
          y_MaxOperatingCurrent_UserDefinedUnitValueType_0
          y_MaxFramePerSecond_UserDefinedUnitValueType_0
          y_RotaryTable_RotaryTableType_0 y_ToolIds_ArrayReferenceType_0
          {$$ = new ComputedTomographyType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           if ($32) yyUnrefMap.erase($32);
           if ($33) yyUnrefMap.erase($33);
           if ($34) yyUnrefMap.erase($34);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ComputedTomographyType attributes");
             }
           delete $1;
          }
        ;

y_ComputedTomography_ComputedTomographyType :
          ComputedTomographySTART y_ComputedTomographyType
          ComputedTomographyEND
          {$$ = $2;
           $$->printElement = "ComputedTomography";
          }
        ;

y_ConcentricityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_ZoneShape_ConcentricityZoneShapeType
          {$$ = new ConcentricityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConcentricityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ConcentricityCharacteristicDefinition_ConcentricityCharacteristicDefinitionType :
          ConcentricityCharacteristicDefinitionSTART
          y_ConcentricityCharacteristicDefinitionType
          ConcentricityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ConcentricityCharacteristicDefinition";
          }
        ;

y_ConcentricityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ConcentricityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConcentricityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ConcentricityCharacteristicItem_ConcentricityCharacteristicItemType :
          ConcentricityCharacteristicItemSTART
          y_ConcentricityCharacteristicItemType
          ConcentricityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ConcentricityCharacteristicItem";
          }
        ;

y_ConcentricityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_ZoneDataSet_ZoneDataSetType_0 y_DatumsOk_XmlBoolean_0
          {$$ = new ConcentricityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConcentricityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ConcentricityCharacteristicMeasurement_ConcentricityCharacteristicMeasurementType :
          ConcentricityCharacteristicMeasurementSTART
          y_ConcentricityCharacteristicMeasurementType
          ConcentricityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ConcentricityCharacteristicMeasurement";
          }
        ;

y_ConcentricityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new ConcentricityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConcentricityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ConcentricityCharacteristicNominal_ConcentricityCharacteristicNominalType :
          ConcentricityCharacteristicNominalSTART
          y_ConcentricityCharacteristicNominalType
          ConcentricityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ConcentricityCharacteristicNominal";
          }
        ;

y_ConcentricityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          {$$ = new ConcentricityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
          }
        ;

y_ConcentricityCharacteristicStats_ConcentricityCharacteristicStatsEvalType :
          ConcentricityCharacteristicStatsSTART
          y_ConcentricityCharacteristicStatsEvalType
          ConcentricityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ConcentricityCharacteristicStats";
          }
        ;

y_ConcentricityDiametricalZoneType :
          /* empty */
          {
           $$ = new ConcentricityDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_ConcentricityNonDiametricalZoneType :
          /* empty */
          {
           $$ = new ConcentricityNonDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_ConcentricitySphericalZoneType :
          /* empty */
          {
           $$ = new ConcentricitySphericalZoneType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_ConcentricityZoneShapeType :
          ENDITEM y_ConcentricityZoneShapeTypeChoicePair
          {$$ = new ConcentricityZoneShapeType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConcentricityZoneShapeTypeChoicePair :
          y_DiametricalZone_ConcentricityDiametricalZoneType
          {$$ = new ConcentricityZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConcentricityZoneShapeTypeType = ConcentricityZoneShapeTypeChoicePair::DiametricalZoneE;
           $$->ConcentricityZoneShapeTypeValue.DiametricalZone = $1;
          }
        | y_NonDiametricalZone_ConcentricityNonDiametricalZoneType
          {$$ = new ConcentricityZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConcentricityZoneShapeTypeType = ConcentricityZoneShapeTypeChoicePair::NonDiametricalZoneE;
           $$->ConcentricityZoneShapeTypeValue.NonDiametricalZone = $1;
          }
        | y_SphericalZone_ConcentricitySphericalZoneType
          {$$ = new ConcentricityZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConcentricityZoneShapeTypeType = ConcentricityZoneShapeTypeChoicePair::SphericalZoneE;
           $$->ConcentricityZoneShapeTypeValue.SphericalZone = $1;
          }
        ;

y_Cone23CoreType :
          ENDITEM y_DiameterBottom_XmlDouble y_DiameterTop_XmlDouble
          y_Length_XmlDouble y_Axis_AxisType y_Sweep_SweepType
          {$$ = new Cone23CoreType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_DiameterBottom_XmlDouble
          y_DiameterTop_XmlDouble y_Length_XmlDouble y_Axis_AxisType
          y_Sweep_SweepType
          {$$ = new Cone23CoreType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Cone23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Cone23Core_Cone23CoreType :
          Cone23CoreSTART y_Cone23CoreType Cone23CoreEND
          {$$ = $2;
           $$->printElement = "Cone23Core";
          }
        ;

y_Cone23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Cone23Core_Cone23CoreType y_Transform_ElementReferenceType_0
          {$$ = new Cone23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Cone23Type attributes");
             }
           delete $1;
          }
        ;

y_Cone23_Cone23Type :
          Cone23START y_Cone23Type Cone23END
          {$$ = $2;
           $$->printElement = "Cone23";
          }
        ;

y_ConeBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new ConeBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConeBestFitType attributes");
             }
           delete $1;
          }
        ;

y_ConeCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new ConeCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ConeCheckedFeatureType :
          ENDITEM y_CheckDetails_ConeCheckedType_0
          {$$ = new ConeCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConeCheckedType :
          ENDITEM y_ConeCheckedTypeChoicePair
          {$$ = new ConeCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConeCheckedTypeChoicePair :
          y_Constructed_ConeConstructionMethodType
          {$$ = new ConeCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeCheckedTypeType = ConeCheckedTypeChoicePair::ConstructedE;
           $$->ConeCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new ConeCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeCheckedTypeType = ConeCheckedTypeChoicePair::MeasuredE;
           $$->ConeCheckedTypeValue.Measured = $1;
          }
        ;

y_ConeConstructionMethodType :
          ENDITEM y_ConeConstructionMethodTypeChoicePair
          {$$ = new ConeConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConeConstructionMethodTypeChoicePair :
          y_BestFit_ConeBestFitType
          {$$ = new ConeConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeConstructionMethodTypeType = ConeConstructionMethodTypeChoicePair::BestFitE;
           $$->ConeConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_ConeCastType
          {$$ = new ConeConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeConstructionMethodTypeType = ConeConstructionMethodTypeChoicePair::CastE;
           $$->ConeConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_ConeCopyType
          {$$ = new ConeConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeConstructionMethodTypeType = ConeConstructionMethodTypeChoicePair::CopyE;
           $$->ConeConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_ConeFromScanType
          {$$ = new ConeConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeConstructionMethodTypeType = ConeConstructionMethodTypeChoicePair::FromScanE;
           $$->ConeConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Recompensated_ConeRecompType
          {$$ = new ConeConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeConstructionMethodTypeType = ConeConstructionMethodTypeChoicePair::RecompensatedE;
           $$->ConeConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_ConeTransformType
          {$$ = new ConeConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeConstructionMethodTypeType = ConeConstructionMethodTypeChoicePair::TransformE;
           $$->ConeConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_ConeCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCone_BaseFeatureType
          {$$ = new ConeCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ConeFeatureDefi_1093_ConeFeatureDefi_1093_Type :
          y_ConeFeatureDefi_1093_Type
          {$$ = $1;}
        ;

y_ConeFeatureDefi_1093_Type :
          y_ConeFeatureDefi_1093_TypeChoicePair
          {$$ = new ConeFeatureDefi_1093_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ConeFeatureDefi_1093_TypeChoicePair :
          y_FullAngle_AngularValueType
          {$$ = new ConeFeatureDefi_1093_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeFeatureDefi_1093_TypeType = ConeFeatureDefi_1093_TypeChoicePair::FullAngleE;
           $$->ConeFeatureDefi_1093_TypeValue.FullAngle = $1;
          }
        | y_HalfAngle_AngularValueType
          {$$ = new ConeFeatureDefi_1093_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeFeatureDefi_1093_TypeType = ConeFeatureDefi_1093_TypeChoicePair::HalfAngleE;
           $$->ConeFeatureDefi_1093_TypeValue.HalfAngle = $1;
          }
        ;

y_ConeFeatureDefi_1094_ConeFeatureDefi_1094_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ConeFeatureDefi_1094_Type
          {$$ = $1;}
        ;

y_ConeFeatureDefi_1094_Type :
          y_LargeEndDistance_LinearValueType
          y_SmallEndDistance_LinearValueType_0
          {$$ = new ConeFeatureDefi_1094_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConeFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType
          y_ConeFeatureDefi_1093_ConeFeatureDefi_1093_Type
          y_ConeFeatureDefi_1094_ConeFeatureDefi_1094_Type_0
          {$$ = new ConeFeatureDefinitionType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConeFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ConeFeatureDefinition_ConeFeatureDefinitionType :
          ConeFeatureDefinitionSTART y_ConeFeatureDefinitionType
          ConeFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "ConeFeatureDefinition";
          }
        ;

y_ConeFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_ConeMeasurementDeterminationType
          {$$ = new ConeFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConeFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_ConeFeatureItem_ConeFeatureItemType :
          ConeFeatureItemSTART y_ConeFeatureItemType ConeFeatureItemEND
          {$$ = $2;
           $$->printElement = "ConeFeatureItem";
          }
        ;

y_ConeFeatureMeas_1095_ConeFeatureMeas_1095_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ConeFeatureMeas_1095_Type
          {$$ = $1;}
        ;

y_ConeFeatureMeas_1095_Type :
          y_ConeFeatureMeas_1095_TypeChoicePair
          {$$ = new ConeFeatureMeas_1095_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ConeFeatureMeas_1095_TypeChoicePair :
          y_FullAngle_MeasuredAngularValueType
          {$$ = new ConeFeatureMeas_1095_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeFeatureMeas_1095_TypeType = ConeFeatureMeas_1095_TypeChoicePair::FullAngleE;
           $$->ConeFeatureMeas_1095_TypeValue.FullAngle = $1;
          }
        | y_HalfAngle_MeasuredAngularValueType
          {$$ = new ConeFeatureMeas_1095_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeFeatureMeas_1095_TypeType = ConeFeatureMeas_1095_TypeChoicePair::HalfAngleE;
           $$->ConeFeatureMeas_1095_TypeValue.HalfAngle = $1;
          }
        ;

y_ConeFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_Diameter_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_ConeFeatureMeas_1095_ConeFeatureMeas_1095_Type_0
          y_SmallEndDistance_MeasuredLinearValueType_0
          y_LargeEndDistance_MeasuredLinearValueType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new ConeFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConeFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ConeFeatureMeasurement_ConeFeatureMeasurementType :
          ConeFeatureMeasurementSTART y_ConeFeatureMeasurementType
          ConeFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "ConeFeatureMeasurement";
          }
        | ConeFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new ConeFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ConeFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ConeFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_ConeFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Axis_AxisType y_Sweep_SweepType_0
          y_Constructed_ConeConstructionMethodType_0
          {$$ = new ConeFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConeFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_ConeFeatureNominal_ConeFeatureNominalType :
          ConeFeatureNominalSTART y_ConeFeatureNominalType
          ConeFeatureNominalEND
          {$$ = $2;
           $$->printElement = "ConeFeatureNominal";
          }
        ;

y_ConeFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          {$$ = new ConeFromScanType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ConeMeasurementDeterminationType :
          ENDITEM y_ConeMeasurementDeterminationTypeChoicePair
          {$$ = new ConeMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConeMeasurementDeterminationTypeChoicePair :
          y_Checked_ConeCheckedFeatureType
          {$$ = new ConeMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeMeasurementDeterminationTypeType = ConeMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->ConeMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new ConeMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConeMeasurementDeterminationTypeType = ConeMeasurementDeterminationTypeChoicePair::SetE;
           $$->ConeMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_ConePointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new ConePointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ConePointSamplingStrategyEnumType value");
          }
        ;

y_ConePointSamplingStrategyType :
          ENDITEM y_ConePointSamplingStrategyTypeChoicePair
          {$$ = new ConePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_ConePointSamplingStrategyEnumType
          {$$ = new ConePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConePointSamplingStrategyTypeType = ConePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->ConePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new ConePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConePointSamplingStrategyTypeType = ConePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->ConePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_ConeRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new ConeRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ConeTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCone_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new ConeTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ConfocalChromaticSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_SpotDiameter_LinearValueType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_MultiPeakMeasurement_XmlInt_0 y_LightSource_XmlString_0
          y_MaxTilt_AngularValueType_0 y_HousingMaterial_XmlString_0
          y_OpticalFiberCableLength_LinearValueType_0
          y_ShockTolerance_UserDefinedUnitValueType_0
          y_VibrationTolerance_UserDefinedUnitValueType_0
          {$$ = new ConfocalChromaticSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConfocalChromaticSensorType attributes");
             }
           delete $1;
          }
        ;

y_ConfocalChromaticSensor_ConfocalChromaticSensorType :
          ConfocalChromaticSensorSTART y_ConfocalChromaticSensorType
          ConfocalChromaticSensorEND
          {$$ = $2;
           $$->printElement = "ConfocalChromaticSensor";
          }
        ;

y_ConicalSegmentBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new ConicalSegmentBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalSegmentBestFitType attributes");
             }
           delete $1;
          }
        ;

y_ConicalSegmentCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new ConicalSegmentCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ConicalSegmentCheckedFeatureType :
          ENDITEM y_CheckDetails_ConicalSegmentCheckedType_0
          {$$ = new ConicalSegmentCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConicalSegmentCheckedType :
          ENDITEM y_ConicalSegmentCheckedTypeChoicePair
          {$$ = new ConicalSegmentCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConicalSegmentCheckedTypeChoicePair :
          y_Constructed_ConicalSegmentConstructionMethodType
          {$$ = new ConicalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentCheckedTypeType = ConicalSegmentCheckedTypeChoicePair::ConstructedE;
           $$->ConicalSegmentCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new ConicalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentCheckedTypeType = ConicalSegmentCheckedTypeChoicePair::MeasuredE;
           $$->ConicalSegmentCheckedTypeValue.Measured = $1;
          }
        ;

y_ConicalSegmentConstructionMethodType :
          ENDITEM y_ConicalSegmentConstructionMethodTypeChoicePair
          {$$ = new ConicalSegmentConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConicalSegmentConstructionMethodTypeChoicePair :
          y_BestFit_ConicalSegmentBestFitType
          {$$ = new ConicalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentConstructionMethodTypeType = ConicalSegmentConstructionMethodTypeChoicePair::BestFitE;
           $$->ConicalSegmentConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_ConicalSegmentCastType
          {$$ = new ConicalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentConstructionMethodTypeType = ConicalSegmentConstructionMethodTypeChoicePair::CastE;
           $$->ConicalSegmentConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_ConicalSegmentCopyType
          {$$ = new ConicalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentConstructionMethodTypeType = ConicalSegmentConstructionMethodTypeChoicePair::CopyE;
           $$->ConicalSegmentConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_ConicalSegmentRecompType
          {$$ = new ConicalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentConstructionMethodTypeType = ConicalSegmentConstructionMethodTypeChoicePair::RecompensatedE;
           $$->ConicalSegmentConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_ConicalSegmentTransformType
          {$$ = new ConicalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentConstructionMethodTypeType = ConicalSegmentConstructionMethodTypeChoicePair::TransformE;
           $$->ConicalSegmentConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_ConicalSegmentCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseConicalSegment_BaseFeatureType
          {$$ = new ConicalSegmentCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ConicalSegmentF_1096_ConicalSegmentF_1096_Type :
          y_ConicalSegmentF_1096_Type
          {$$ = $1;}
        ;

y_ConicalSegmentF_1096_Type :
          y_ConicalSegmentF_1096_TypeChoicePair
          {$$ = new ConicalSegmentF_1096_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ConicalSegmentF_1096_TypeChoicePair :
          y_FullAngle_AngularValueType
          {$$ = new ConicalSegmentF_1096_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentF_1096_TypeType = ConicalSegmentF_1096_TypeChoicePair::FullAngleE;
           $$->ConicalSegmentF_1096_TypeValue.FullAngle = $1;
          }
        | y_HalfAngle_AngularValueType
          {$$ = new ConicalSegmentF_1096_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentF_1096_TypeType = ConicalSegmentF_1096_TypeChoicePair::HalfAngleE;
           $$->ConicalSegmentF_1096_TypeValue.HalfAngle = $1;
          }
        ;

y_ConicalSegmentF_1097_ConicalSegmentF_1097_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ConicalSegmentF_1097_Type
          {$$ = $1;}
        ;

y_ConicalSegmentF_1097_Type :
          y_LargeEndDistance_LinearValueType
          y_SmallEndDistance_LinearValueType_0
          {$$ = new ConicalSegmentF_1097_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConicalSegmentF_1098_ConicalSegmentF_1098_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ConicalSegmentF_1098_Type
          {$$ = $1;}
        ;

y_ConicalSegmentF_1098_Type :
          y_ConicalSegmentF_1098_TypeChoicePair
          {$$ = new ConicalSegmentF_1098_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ConicalSegmentF_1098_TypeChoicePair :
          y_FullAngle_MeasuredAngularValueType
          {$$ = new ConicalSegmentF_1098_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentF_1098_TypeType = ConicalSegmentF_1098_TypeChoicePair::FullAngleE;
           $$->ConicalSegmentF_1098_TypeValue.FullAngle = $1;
          }
        | y_HalfAngle_MeasuredAngularValueType
          {$$ = new ConicalSegmentF_1098_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentF_1098_TypeType = ConicalSegmentF_1098_TypeChoicePair::HalfAngleE;
           $$->ConicalSegmentF_1098_TypeValue.HalfAngle = $1;
          }
        ;

y_ConicalSegmentFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType
          y_ConicalSegmentF_1096_ConicalSegmentF_1096_Type
          y_ConicalSegmentF_1097_ConicalSegmentF_1097_Type_0
          {$$ = new ConicalSegmentFeatureDefinitionType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalSegmentFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ConicalSegmentFeatureDefinition_ConicalSegmentFeatureDefinitionType :
          ConicalSegmentFeatureDefinitionSTART
          y_ConicalSegmentFeatureDefinitionType
          ConicalSegmentFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "ConicalSegmentFeatureDefinition";
          }
        ;

y_ConicalSegmentFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_ConicalSegmentMeasurementDeterminationType
          {$$ = new ConicalSegmentFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalSegmentFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_ConicalSegmentFeatureItem_ConicalSegmentFeatureItemType :
          ConicalSegmentFeatureItemSTART y_ConicalSegmentFeatureItemType
          ConicalSegmentFeatureItemEND
          {$$ = $2;
           $$->printElement = "ConicalSegmentFeatureItem";
          }
        ;

y_ConicalSegmentFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_Diameter_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_ConicalSegmentF_1098_ConicalSegmentF_1098_Type_0
          y_SmallEndDistance_MeasuredLinearValueType_0
          y_LargeEndDistance_MeasuredLinearValueType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new ConicalSegmentFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalSegmentFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ConicalSegmentFeatureMeasurement_ConicalSegmentFeatureMeasurementType :
          ConicalSegmentFeatureMeasurementSTART
          y_ConicalSegmentFeatureMeasurementType
          ConicalSegmentFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "ConicalSegmentFeatureMeasurement";
          }
        | ConicalSegmentFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ConicalSegmentFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ConicalSegmentFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ConicalSegmentFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_ConicalSegmentFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Axis_AxisType y_Sweep_SweepType
          y_Constructed_ConicalSegmentConstructionMethodType_0
          {$$ = new ConicalSegmentFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalSegmentFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_ConicalSegmentFeatureNominal_ConicalSegmentFeatureNominalType :
          ConicalSegmentFeatureNominalSTART
          y_ConicalSegmentFeatureNominalType
          ConicalSegmentFeatureNominalEND
          {$$ = $2;
           $$->printElement = "ConicalSegmentFeatureNominal";
          }
        ;

y_ConicalSegmentMeasurementDeterminationType :
          ENDITEM y_ConicalSegmentMeasurementDeterminationTypeChoicePair
          {$$ = new ConicalSegmentMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConicalSegmentMeasurementDeterminationTypeChoicePair :
          y_Checked_ConicalSegmentCheckedFeatureType
          {$$ = new ConicalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentMeasurementDeterminationTypeType = ConicalSegmentMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->ConicalSegmentMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new ConicalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentMeasurementDeterminationTypeType = ConicalSegmentMeasurementDeterminationTypeChoicePair::SetE;
           $$->ConicalSegmentMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_ConicalSegmentPointSamplingStrategyType :
          ENDITEM y_ConicalSegmentPointSamplingStrategyTypeChoicePair
          {$$ = new ConicalSegmentPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ConicalSegmentPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_ConePointSamplingStrategyEnumType
          {$$ = new ConicalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentPointSamplingStrategyTypeType = ConicalSegmentPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->ConicalSegmentPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new ConicalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ConicalSegmentPointSamplingStrategyTypeType = ConicalSegmentPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->ConicalSegmentPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_ConicalSegmentRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new ConicalSegmentRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ConicalSegmentTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseConicalSegment_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new ConicalSegmentTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ConicalTaperCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new ConicalTaperCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalTaperCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ConicalTaperCharacteristicDefinition_ConicalTaperCharacteristicDefinitionType :
          ConicalTaperCharacteristicDefinitionSTART
          y_ConicalTaperCharacteristicDefinitionType
          ConicalTaperCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ConicalTaperCharacteristicDefinition";
          }
        ;

y_ConicalTaperCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ConicalTaperCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalTaperCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ConicalTaperCharacteristicItem_ConicalTaperCharacteristicItemType :
          ConicalTaperCharacteristicItemSTART
          y_ConicalTaperCharacteristicItemType
          ConicalTaperCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ConicalTaperCharacteristicItem";
          }
        ;

y_ConicalTaperCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_Distance_MeasuredLinearValueType_0
          {$$ = new ConicalTaperCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalTaperCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ConicalTaperCharacteristicMeasurement_ConicalTaperCharacteristicMeasurementType :
          ConicalTaperCharacteristicMeasurementSTART
          y_ConicalTaperCharacteristicMeasurementType
          ConicalTaperCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ConicalTaperCharacteristicMeasurement";
          }
        ;

y_ConicalTaperCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          y_Distance_LinearValueType
          {$$ = new ConicalTaperCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicalTaperCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ConicalTaperCharacteristicNominal_ConicalTaperCharacteristicNominalType :
          ConicalTaperCharacteristicNominalSTART
          y_ConicalTaperCharacteristicNominalType
          ConicalTaperCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ConicalTaperCharacteristicNominal";
          }
        ;

y_ConicalTaperCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new ConicalTaperCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_ConicalTaperCharacteristicStats_ConicalTaperCharacteristicStatsEvalType :
          ConicalTaperCharacteristicStatsSTART
          y_ConicalTaperCharacteristicStatsEvalType
          ConicalTaperCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ConicalTaperCharacteristicStats";
          }
        ;

y_ConicityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          {$$ = new ConicityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ConicityCharacteristicDefinition_ConicityCharacteristicDefinitionType :
          ConicityCharacteristicDefinitionSTART
          y_ConicityCharacteristicDefinitionType
          ConicityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ConicityCharacteristicDefinition";
          }
        ;

y_ConicityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ConicityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ConicityCharacteristicItem_ConicityCharacteristicItemType :
          ConicityCharacteristicItemSTART y_ConicityCharacteristicItemType
          ConicityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ConicityCharacteristicItem";
          }
        ;

y_ConicityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new ConicityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ConicityCharacteristicMeasurement_ConicityCharacteristicMeasurementType :
          ConicityCharacteristicMeasurementSTART
          y_ConicityCharacteristicMeasurementType
          ConicityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ConicityCharacteristicMeasurement";
          }
        ;

y_ConicityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new ConicityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConicityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ConicityCharacteristicNominal_ConicityCharacteristicNominalType :
          ConicityCharacteristicNominalSTART
          y_ConicityCharacteristicNominalType
          ConicityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ConicityCharacteristicNominal";
          }
        ;

y_ConicityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          {$$ = new ConicityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_ConicityCharacteristicStats_ConicityCharacteristicStatsEvalType :
          ConicityCharacteristicStatsSTART
          y_ConicityCharacteristicStatsEvalType
          ConicityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ConicityCharacteristicStats";
          }
        ;

y_ConstantIsType :
          y_LiztAttributePair
          {$$ = new ConstantIsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ConstantIsType attributes");
             }
           delete $1;
          }
        ;

y_ConstantIs_ConstantIsType :
          ConstantIsSTART y_ConstantIsType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "ConstantIs";
          }
        ;

y_ConstrainOrientation_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ConstrainOrientationSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ConstrainOrientationEND
          {$$ = $4;}
        ;

y_ConstrainSubsequent_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ConstrainSubsequentSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ConstrainSubsequentEND
          {$$ = $4;}
        ;

y_Constructed_CircleConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CircleConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_CircleConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CircleConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_CircularArcConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CircularArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CircularArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CircularArcConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_CircularArcConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CircularArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CircularArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CircularArcConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ConeConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ConeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ConeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ConeConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ConeConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ConeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ConeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ConeConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ConicalSegmentConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ConicalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ConicalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ConicalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ConicalSegmentConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ConicalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ConicalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ConicalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_CylinderConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CylinderConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_CylinderConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CylinderConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_CylindricalSegmentConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CylindricalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CylindricalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CylindricalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_CylindricalSegmentConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new CylindricalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new CylindricalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_CylindricalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_EdgePointConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new EdgePointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new EdgePointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_EdgePointConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_EdgePointConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new EdgePointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new EdgePointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_EdgePointConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_EllipseConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new EllipseConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new EllipseConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_EllipseConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_EllipseConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new EllipseConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new EllipseConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_EllipseConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_EllipticalArcConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new EllipticalArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new EllipticalArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_EllipticalArcConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_EllipticalArcConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new EllipticalArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new EllipticalArcConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_EllipticalArcConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ElongatedCircleConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ElongatedCircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ElongatedCircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ElongatedCircleConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ElongatedCircleConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ElongatedCircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ElongatedCircleConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ElongatedCircleConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ElongatedCylinderConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ElongatedCylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ElongatedCylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ElongatedCylinderConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ElongatedCylinderConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ElongatedCylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ElongatedCylinderConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ElongatedCylinderConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ExtrudedCrossSectionConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ExtrudedCrossSectionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ExtrudedCrossSectionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ExtrudedCrossSectionConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ExtrudedCrossSectionConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ExtrudedCrossSectionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ExtrudedCrossSectionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ExtrudedCrossSectionConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_LineConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new LineConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new LineConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_LineConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_LineConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new LineConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new LineConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_LineConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeAngledLinesConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeAngledLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeAngledLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeAngledLinesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeAngledLinesConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeAngledLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeAngledLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeAngledLinesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeAngledPlanesConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeAngledPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeAngledPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeAngledPlanesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeAngledPlanesConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeAngledPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeAngledPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeAngledPlanesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeParallelLinesConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeParallelLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeParallelLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeParallelLinesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeParallelLinesConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeParallelLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeParallelLinesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeParallelLinesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeParallelPlanesConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeParallelPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeParallelPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeParallelPlanesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OppositeParallelPlanesConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OppositeParallelPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OppositeParallelPlanesConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OppositeParallelPlanesConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OtherCurveConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OtherCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OtherCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OtherCurveConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OtherCurveConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OtherCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OtherCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OtherCurveConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OtherShapeConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OtherShapeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OtherShapeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OtherShapeConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OtherShapeConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OtherShapeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OtherShapeConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OtherShapeConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_OtherSurfaceConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new OtherSurfaceConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new OtherSurfaceConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_OtherSurfaceConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PlaneConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PlaneConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PlaneConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PlaneConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PlaneConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PlaneConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PlaneConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PlaneConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PointConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PointConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PointConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PointConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PointConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PointDefinedCurveConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PointDefinedCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PointDefinedCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PointDefinedCurveConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PointDefinedCurveConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PointDefinedCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PointDefinedCurveConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PointDefinedCurveConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PointDefinedSurfaceConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PointDefinedSurfaceConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PointDefinedSurfaceConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PointDefinedSurfaceConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_PointDefinedSurfaceConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new PointDefinedSurfaceConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new PointDefinedSurfaceConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_PointDefinedSurfaceConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_SphereConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new SphereConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new SphereConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_SphereConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_SphereConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new SphereConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new SphereConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_SphereConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_SphericalSegmentConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new SphericalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new SphericalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_SphericalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_SphericalSegmentConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new SphericalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new SphericalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_SphericalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_SurfaceOfRevolutionConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new SurfaceOfRevolutionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new SurfaceOfRevolutionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_SurfaceOfRevolutionConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_SurfaceOfRevolutionConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new SurfaceOfRevolutionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new SurfaceOfRevolutionConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_SurfaceOfRevolutionConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ThreadedFeatureConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ThreadedFeatureConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ThreadedFeatureConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ThreadedFeatureConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ThreadedFeatureConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ThreadedFeatureConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ThreadedFeatureConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ThreadedFeatureConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ToroidalSegmentConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ToroidalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ToroidalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ToroidalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_ToroidalSegmentConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new ToroidalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new ToroidalSegmentConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_ToroidalSegmentConstructionMethodType
          ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_TorusConstructionMethodType :
          ConstructedSTART ENDITEM ConstructedEND
          {$$ = new TorusConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new TorusConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_TorusConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_Constructed_TorusConstructionMethodType_0 :
          /* empty */
          {$$ = 0;}
        | ConstructedSTART ENDITEM ConstructedEND
          {$$ = new TorusConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART ENDWHOLEITEM
          {$$ = new TorusConstructionMethodType();
           yyUnrefMap[$$] = $$;
          }
        | ConstructedSTART y_TorusConstructionMethodType ConstructedEND
          {$$ = $2;}
        ;

y_ContactingFeature_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ContactingFeatureSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ContactingFeatureEND
          {$$ = $4;}
        ;

y_ContourIlluminationLightSource_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ContourIlluminationLightSourceSTART ENDITEM {yyReadData = 1;}
          y_XmlString ContourIlluminationLightSourceEND
          {$$ = $4;}
        ;

y_ContourSymbol_WeldContourSymbolEnumType :
          ContourSymbolSTART ENDITEM {yyReadData = 1;}
          y_WeldContourSymbolEnumType ContourSymbolEND
          {$$ = $4;}
        ;

y_ControlIssueDetailsListType :
          y_LiztAttributePair ENDITEM
          y_LiztControlIssueDetails_ControlIssueDetailsType_1_u
          {$$ = new ControlIssueDetailsListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ControlIssueDetailsListType attributes");
             }
           delete $1;
          }
        ;

y_ControlIssueDetailsList_ControlIssueDetailsListType :
          ControlIssueDetailsListSTART y_ControlIssueDetailsListType
          ControlIssueDetailsListEND
          {$$ = $2;}
        ;

y_ControlIssueDetailsType :
          ENDITEM y_ControlIssue_ControlIssueType
          y_ControlMethodId_QIFReferenceType_0
          y_StudyIssueId_QIFReferenceType_0
          {$$ = new ControlIssueDetailsType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ControlIssueDetails_ControlIssueDetailsType :
          ControlIssueDetailsSTART y_ControlIssueDetailsType
          ControlIssueDetailsEND
          {$$ = $2;}
        ;

y_ControlIssueEnumType :
          DATASTRING
          {$$ = new ControlIssueEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ControlIssueEnumType value");
          }
        ;

y_ControlIssueEnum_ControlIssueEnumType :
          ControlIssueEnumSTART ENDITEM {yyReadData = 1;}
          y_ControlIssueEnumType ControlIssueEnumEND
          {$$ = $4;}
        ;

y_ControlIssueType :
          ENDITEM y_ControlIssueTypeChoicePair
          {$$ = new ControlIssueType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ControlIssueTypeChoicePair :
          y_ControlIssueEnum_ControlIssueEnumType
          {$$ = new ControlIssueTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlIssueTypeType = ControlIssueTypeChoicePair::ControlIssueEnumE;
           $$->ControlIssueTypeValue.ControlIssueEnum = $1;
          }
        | y_OtherControlIssue_XmlString
          {$$ = new ControlIssueTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlIssueTypeType = ControlIssueTypeChoicePair::OtherControlIssueE;
           $$->ControlIssueTypeValue.OtherControlIssue = $1;
          }
        ;

y_ControlIssue_ControlIssueType :
          ControlIssueSTART y_ControlIssueType ControlIssueEND
          {$$ = $2;}
        ;

y_ControlMethodId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ControlMethodIdSTART y_QIFReferenceType ControlMethodIdEND
          {$$ = $2;}
        ;

y_ControlMethodTy_1199_ControlMethodTy_1199_Type :
          y_ControlMethodTy_1199_Type
          {$$ = $1;}
        ;

y_ControlMethodTy_1199_Type :
          y_ControlMethodTy_1199_TypeChoicePair
          {$$ = new ControlMethodTy_1199_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ControlMethodTy_1199_TypeChoicePair :
          y_CpThreshold_CriterionDecimalType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::CpThresholdE;
           $$->ControlMethodTy_1199_TypeValue.CpThreshold = $1;
          }
        | y_CpkThreshold_CriterionDecimalType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::CpkThresholdE;
           $$->ControlMethodTy_1199_TypeValue.CpkThreshold = $1;
          }
        | y_NumOutOfControlRng_CriterionIntegerType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::NumOutOfControlRngE;
           $$->ControlMethodTy_1199_TypeValue.NumOutOfControlRng = $1;
          }
        | y_NumOutOfControl_CriterionIntegerType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::NumOutOfControlE;
           $$->ControlMethodTy_1199_TypeValue.NumOutOfControl = $1;
          }
        | y_NumOutOfTolerance_CriterionIntegerType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::NumOutOfToleranceE;
           $$->ControlMethodTy_1199_TypeValue.NumOutOfTolerance = $1;
          }
        | y_OneThirdGrouping_CriterionOutOfType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::OneThirdGroupingE;
           $$->ControlMethodTy_1199_TypeValue.OneThirdGrouping = $1;
          }
        | y_Oscillation_CriterionOutOfType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::OscillationE;
           $$->ControlMethodTy_1199_TypeValue.Oscillation = $1;
          }
        | y_PpThreshold_CriterionDecimalType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::PpThresholdE;
           $$->ControlMethodTy_1199_TypeValue.PpThreshold = $1;
          }
        | y_PpkThreshold_CriterionDecimalType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::PpkThresholdE;
           $$->ControlMethodTy_1199_TypeValue.PpkThreshold = $1;
          }
        | y_SkewGrouping_CriterionIntegerType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::SkewGroupingE;
           $$->ControlMethodTy_1199_TypeValue.SkewGrouping = $1;
          }
        | y_Stratification_CriterionOutOfType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::StratificationE;
           $$->ControlMethodTy_1199_TypeValue.Stratification = $1;
          }
        | y_TrendGrouping_CriterionIntegerType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::TrendGroupingE;
           $$->ControlMethodTy_1199_TypeValue.TrendGrouping = $1;
          }
        | y_TwoThirdsGrouping_CriterionOutOfType
          {$$ = new ControlMethodTy_1199_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ControlMethodTy_1199_TypeType = ControlMethodTy_1199_TypeChoicePair::TwoThirdsGroupingE;
           $$->ControlMethodTy_1199_TypeValue.TwoThirdsGrouping = $1;
          }
        ;

y_ControlMethodType :
          y_LiztAttributePair ENDITEM
          y_AssignableCauseIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_ControlMethodTy_1199_ControlMethodTy_1199_Type
          {$$ = new ControlMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ControlMethodType attributes");
             }
           delete $1;
          }
        ;

y_ControlMethod_ControlMethodType :
          ControlMethodSTART y_ControlMethodType ControlMethodEND
          {$$ = $2;}
        ;

y_ControlMethodsType :
          y_LiztAttributePair ENDITEM
          y_LiztControlMethod_ControlMethodType_1_u
          {$$ = new ControlMethodsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ControlMethodsType attributes");
             }
           delete $1;
          }
        ;

y_ControlMethods_ControlMethodsType :
          ControlMethodsSTART y_ControlMethodsType ControlMethodsEND
          {$$ = $2;}
        ;

y_ControlledRadius_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ControlledRadiusSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ControlledRadiusEND
          {$$ = $4;}
        ;

y_CoordinateEnumType :
          DATASTRING
          {$$ = new CoordinateEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CoordinateEnumType value");
          }
        ;

y_CoordinateEnum_CoordinateEnumType :
          CoordinateEnumSTART ENDITEM {yyReadData = 1;}
          y_CoordinateEnumType CoordinateEnumEND
          {$$ = $4;}
        ;

y_CoordinateMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_NumberOfMeasurementPoints_XmlPositiveInteger_0
          {$$ = new CoordinateMeasureFeatureMethodType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoordinateMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_CoordinateMeasureFeatureMethod_CoordinateMeasureFeatureMethodType :
          CoordinateMeasureFeatureMethodSTART
          y_CoordinateMeasureFeatureMethodType
          CoordinateMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "CoordinateMeasureFeatureMethod";
          }
        | CoordinateMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new CoordinateMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "CoordinateMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CoordinateMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_CoordinateMethod_PositionCoordinateMethodType_0 :
          /* empty */
          {$$ = 0;}
        | CoordinateMethodSTART y_PositionCoordinateMethodType
          CoordinateMethodEND
          {$$ = $2;}
        ;

y_CoordinateSystemActualTransformAssociationType :
          ENDITEM y_ActualTransformId_QIFReferenceType
          y_CoordinateSystemId_QIFReferenceFullType
          {$$ = new CoordinateSystemActualTransformAssociationType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType :
          CoordinateSystemActualTransformAssociationSTART
          y_CoordinateSystemActualTransformAssociationType
          CoordinateSystemActualTransformAssociationEND
          {$$ = $2;}
        ;

y_CoordinateSystemActualTransformAssociationsType :
          y_LiztAttributePair ENDITEM
          y_LiztCoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType_1_u
          {$$ = new CoordinateSystemActualTransformAssociationsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoordinateSystemActualTransformAssociationsType attributes");
             }
           delete $1;
          }
        ;

y_CoordinateSystemActualTransformAssociations_CoordinateSystemActualTransformAssociationsType_0 :
          /* empty */
          {$$ = 0;}
        | CoordinateSystemActualTransformAssociationsSTART
          y_CoordinateSystemActualTransformAssociationsType
          CoordinateSystemActualTransformAssociationsEND
          {$$ = $2;}
        ;

y_CoordinateSystemCoreType :
          ENDITEM y_Rotation_TransformRotationType_0
          y_Origin_PointSimpleType_0
          {$$ = new CoordinateSystemCoreType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CoordinateSystemCore_CoordinateSystemCoreType :
          CoordinateSystemCoreSTART ENDWHOLEITEM
          {$$ = new CoordinateSystemCoreType();
           yyUnrefMap[$$] = $$;
          }
        | CoordinateSystemCoreSTART y_CoordinateSystemCoreType
          CoordinateSystemCoreEND
          {$$ = $2;}
        ;

y_CoordinateSystemDefinitions_CoordinateSystemListType :
          CoordinateSystemDefinitionsSTART y_CoordinateSystemListType
          CoordinateSystemDefinitionsEND
          {$$ = $2;}
        ;

y_CoordinateSystemId_QIFReferenceFullType :
          CoordinateSystemIdSTART y_QIFReferenceFullType
          CoordinateSystemIdEND
          {$$ = $2;}
        ;

y_CoordinateSystemId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | CoordinateSystemIdSTART y_QIFReferenceFullType
          CoordinateSystemIdEND
          {$$ = $2;}
        ;

y_CoordinateSystemIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | CoordinateSystemIdsSTART y_ArrayReferenceType
          CoordinateSystemIdsEND
          {$$ = $2;}
        ;

y_CoordinateSystemListType :
          y_LiztAttributePair ENDITEM
          y_LiztCoordinateSystem_CoordinateSystemType_1_u
          {$$ = new CoordinateSystemListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoordinateSystemListType attributes");
             }
           delete $1;
          }
        ;

y_CoordinateSystemSetType :
          y_LiztAttributePair ENDITEM
          y_LiztCoordinateSystem_CADCoordinateSystemType_1_u
          {$$ = new CoordinateSystemSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoordinateSystemSetType attributes");
             }
           delete $1;
          }
        ;

y_CoordinateSystemSet_CoordinateSystemSetType_0 :
          /* empty */
          {$$ = 0;}
        | CoordinateSystemSetSTART y_CoordinateSystemSetType
          CoordinateSystemSetEND
          {$$ = $2;}
        ;

y_CoordinateSystemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_NominalTransform_TransformMatrixType_0
          y_InternalCADCoordinateSystemId_QIFReferenceFullType_0
          y_ExternalCADCoordinateSystemId_QIFReferenceFullType_0
          y_AlignmentOperations_AlignmentOperationsType_0
          y_SequenceNumber_NaturalType_0
          {$$ = new CoordinateSystemType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CoordinateSystemType attributes");
             }
           delete $1;
          }
        ;

y_CoordinateSystem_CADCoordinateSystemType :
          CoordinateSystemSTART y_CADCoordinateSystemType
          CoordinateSystemEND
          {$$ = $2;
           $$->printElement = "CoordinateSystem";
          }
        ;

y_CoordinateSystem_CoordinateSystemType :
          CoordinateSystemSTART y_CoordinateSystemType CoordinateSystemEND
          {$$ = $2;}
        | CoordinateSystemSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new CoordinateSystemType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CoordinateSystemType attributes");
             }
           delete $2;
          }
        ;

y_CoordinateSystemsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | CoordinateSystemsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt CoordinateSystemsCountEND
          {$$ = $4;}
        ;

y_CoordinateSystemsType :
          ENDITEM y_CoordinateSystemDefinitions_CoordinateSystemListType
          y_CommonCoordinateSystemId_QIFReferenceFullType_0
          y_LiztMachineCoordinateSystem_MachineCoordinateSystemType_0_u
          {$$ = new CoordinateSystemsType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CoordinateSystems_CoordinateSystemsType_0 :
          /* empty */
          {$$ = 0;}
        | CoordinateSystemsSTART y_CoordinateSystemsType
          CoordinateSystemsEND
          {$$ = $2;}
        ;

y_Copy_CircleCopyType :
          CopySTART y_CircleCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_CircularArcCopyType :
          CopySTART y_CircularArcCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_ConeCopyType :
          CopySTART y_ConeCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_ConicalSegmentCopyType :
          CopySTART y_ConicalSegmentCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_CylinderCopyType :
          CopySTART y_CylinderCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_CylindricalSegmentCopyType :
          CopySTART y_CylindricalSegmentCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_EdgePointCopyType :
          CopySTART y_EdgePointCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_EllipseCopyType :
          CopySTART y_EllipseCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_EllipticalArcCopyType :
          CopySTART y_EllipticalArcCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_ElongatedCircleCopyType :
          CopySTART y_ElongatedCircleCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_ElongatedCylinderCopyType :
          CopySTART y_ElongatedCylinderCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_ExtrudedCrossSectionCopyType :
          CopySTART y_ExtrudedCrossSectionCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_LineCopyType :
          CopySTART y_LineCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_OppositeAngledLinesCopyType :
          CopySTART y_OppositeAngledLinesCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_OppositeAngledPlanesCopyType :
          CopySTART y_OppositeAngledPlanesCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_OppositeParallelLinesCopyType :
          CopySTART y_OppositeParallelLinesCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_OppositeParallelPlanesCopyType :
          CopySTART y_OppositeParallelPlanesCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_OtherCurveFeatureCopyType :
          CopySTART y_OtherCurveFeatureCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_OtherShapeFeatureCopyType :
          CopySTART y_OtherShapeFeatureCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_OtherSurfaceFeatureCopyType :
          CopySTART y_OtherSurfaceFeatureCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_PlaneCopyType :
          CopySTART y_PlaneCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_PointDefinedCurveCopyType :
          CopySTART y_PointDefinedCurveCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_PointDefinedSurfaceCopyType :
          CopySTART y_PointDefinedSurfaceCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_PointFeatureCopyType :
          CopySTART y_PointFeatureCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_SphereCopyType :
          CopySTART y_SphereCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_SphericalSegmentCopyType :
          CopySTART y_SphericalSegmentCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_SurfaceOfRevolutionCopyType :
          CopySTART y_SurfaceOfRevolutionCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_ThreadedFeatureCopyType :
          CopySTART y_ThreadedFeatureCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_ToroidalSegmentCopyType :
          CopySTART y_ToroidalSegmentCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_Copy_TorusCopyType :
          CopySTART y_TorusCopyType CopyEND
          {$$ = $2;
           $$->printElement = "Copy";
          }
        ;

y_CornerPoint_PointType :
          CornerPointSTART y_PointType CornerPointEND
          {$$ = $2;}
        ;

y_CorrectiveActio_1130_CorrectiveActio_1130_Type :
          y_CorrectiveActio_1130_Type
          {$$ = $1;}
        ;

y_CorrectiveActio_1130_Type :
          y_CorrectiveActio_1130_TypeChoicePair
          {$$ = new CorrectiveActio_1130_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CorrectiveActio_1130_TypeChoicePair :
          y_ActionToTakeEnum_ActionToTakeEnumType
          {$$ = new CorrectiveActio_1130_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CorrectiveActio_1130_TypeType = CorrectiveActio_1130_TypeChoicePair::ActionToTakeEnumE;
           $$->CorrectiveActio_1130_TypeValue.ActionToTakeEnum = $1;
          }
        | y_ActionToTake_XmlString
          {$$ = new CorrectiveActio_1130_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CorrectiveActio_1130_TypeType = CorrectiveActio_1130_TypeChoicePair::ActionToTakeE;
           $$->CorrectiveActio_1130_TypeValue.ActionToTake = $1;
          }
        ;

y_CorrectiveActionIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | CorrectiveActionIdsSTART y_ArrayReferenceType
          CorrectiveActionIdsEND
          {$$ = $2;}
        ;

y_CorrectiveActionPlanId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | CorrectiveActionPlanIdSTART y_QIFReferenceType
          CorrectiveActionPlanIdEND
          {$$ = $2;}
        ;

y_CorrectiveActionPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_AssignableCauses_AssignableCausesType
          y_CorrectiveActions_CorrectiveActionsType
          {$$ = new CorrectiveActionPlanType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CorrectiveActionPlanType attributes");
             }
           delete $1;
          }
        ;

y_CorrectiveActionPlan_CorrectiveActionPlanType :
          CorrectiveActionPlanSTART y_CorrectiveActionPlanType
          CorrectiveActionPlanEND
          {$$ = $2;}
        ;

y_CorrectiveActionPlansCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | CorrectiveActionPlansCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt CorrectiveActionPlansCountEND
          {$$ = $4;}
        ;

y_CorrectiveActionPlansType :
          y_LiztAttributePair ENDITEM
          y_LiztCorrectiveActionPlan_CorrectiveActionPlanType_1_u
          {$$ = new CorrectiveActionPlansType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CorrectiveActionPlansType attributes");
             }
           delete $1;
          }
        ;

y_CorrectiveActionPlans_CorrectiveActionPlansType_0 :
          /* empty */
          {$$ = 0;}
        | CorrectiveActionPlansSTART y_CorrectiveActionPlansType
          CorrectiveActionPlansEND
          {$$ = $2;}
        ;

y_CorrectiveActionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_CorrectiveActio_1130_CorrectiveActio_1130_Type
          {$$ = new CorrectiveActionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CorrectiveActionType attributes");
             }
           delete $1;
          }
        ;

y_CorrectiveAction_CorrectiveActionType :
          CorrectiveActionSTART y_CorrectiveActionType CorrectiveActionEND
          {$$ = $2;}
        ;

y_CorrectiveActionsType :
          y_LiztAttributePair ENDITEM
          y_LiztCorrectiveAction_CorrectiveActionType_1_u
          {$$ = new CorrectiveActionsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CorrectiveActionsType attributes");
             }
           delete $1;
          }
        ;

y_CorrectiveActions_CorrectiveActionsType :
          CorrectiveActionsSTART y_CorrectiveActionsType
          CorrectiveActionsEND
          {$$ = $2;}
        ;

y_Count_XmlNonNegativeInteger :
          CountSTART ENDITEM {yyReadData = 1;} y_XmlNonNegativeInteger
          CountEND
          {$$ = $4;}
        ;

y_Country_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | CountrySTART ENDITEM {yyReadData = 1;} y_XmlToken CountryEND
          {$$ = $4;}
        ;

y_CpThreshold_CriterionDecimalType :
          CpThresholdSTART y_CriterionDecimalType CpThresholdEND
          {$$ = $2;}
        ;

y_Cp_StatsMeasuredDecimalType :
          CpSTART y_StatsMeasuredDecimalType CpEND
          {$$ = $2;
           $$->printElement = "Cp";
          }
        ;

y_CpkThreshold_CriterionDecimalType :
          CpkThresholdSTART y_CriterionDecimalType CpkThresholdEND
          {$$ = $2;}
        ;

y_Cpk_StatsMeasuredDecimalType :
          CpkSTART y_StatsMeasuredDecimalType CpkEND
          {$$ = $2;
           $$->printElement = "Cpk";
          }
        ;

y_Cpm_StatsMeasuredDecimalType :
          CpmSTART y_StatsMeasuredDecimalType CpmEND
          {$$ = $2;
           $$->printElement = "Cpm";
          }
        ;

y_CrestDiameterToleranceClass_ThreadClassType_0 :
          /* empty */
          {$$ = 0;}
        | CrestDiameterToleranceClassSTART y_ThreadClassType
          CrestDiameterToleranceClassEND
          {$$ = $2;}
        ;

y_CriteriaByUnitType :
          y_LiztAttributePair ENDITEM
          y_LinearCriterion_CriterionLinearType_0
          y_AngularCriterion_CriterionAngularType_0
          y_AreaCriterion_CriterionAreaType_0
          y_ForceCriterion_CriterionForceType_0
          y_MassCriterion_CriterionMassType_0
          y_PressureCriterion_CriterionPressureType_0
          y_SpeedCriterion_CriterionSpeedType_0
          y_TemperatureCriterion_CriterionTemperatureType_0
          y_TimeCriterion_CriterionTimeType_0
          y_LiztUserDefinedUnitCriterion_CriterionUserDefinedUnitType_0_u
          {$$ = new CriteriaByUnitType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriteriaByUnitType attributes");
             }
           delete $1;
          }
        ;

y_CriterionAngularType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionAngularType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionAngularType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionAngularType attributes");
             }
           delete $1;
          }
        ;

y_CriterionAreaType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionAreaType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionAreaType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionAreaType attributes");
             }
           delete $1;
          }
        ;

y_CriterionDecima_1131_CriterionDecima_1131_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CriterionDecima_1131_Type
          {$$ = $1;}
        ;

y_CriterionDecima_1131_Type :
          y_NumberAllowedExceptions_LimitingNumberType
          y_ExtremeLimit_XmlDecimal_0
          {$$ = new CriterionDecima_1131_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CriterionDecimalType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionDecimalType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CriterionForceType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionForceType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionForceType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionForceType attributes");
             }
           delete $1;
          }
        ;

y_CriterionIntege_1132_CriterionIntege_1132_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CriterionIntege_1132_Type
          {$$ = $1;}
        ;

y_CriterionIntege_1132_Type :
          y_NumberAllowedExceptions_LimitingNumberType
          y_ExtremeLimit_XmlPositiveInteger_0
          {$$ = new CriterionIntege_1132_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CriterionIntegerType :
          ENDITEM y_Limit_XmlPositiveInteger
          y_CriterionIntege_1132_CriterionIntege_1132_Type_0
          {$$ = new CriterionIntegerType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CriterionLinearType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionLinearType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionLinearType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionLinearType attributes");
             }
           delete $1;
          }
        ;

y_CriterionMassType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionMassType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionMassType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionMassType attributes");
             }
           delete $1;
          }
        ;

y_CriterionOutOfType :
          ENDITEM y_Numerator_XmlPositiveInteger
          y_Denominator_XmlPositiveInteger
          y_NumberAllowedExceptions_LimitingNumberType_0
          {$$ = new CriterionOutOfType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CriterionPressureType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionPressureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionPressureType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionPressureType attributes");
             }
           delete $1;
          }
        ;

y_CriterionSpeedType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionSpeedType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionSpeedType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionSpeedType attributes");
             }
           delete $1;
          }
        ;

y_CriterionTemperatureType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionTemperatureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionTemperatureType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionTemperatureType attributes");
             }
           delete $1;
          }
        ;

y_CriterionTimeType :
          ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionTimeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionTimeType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionTimeType attributes");
             }
           delete $1;
          }
        ;

y_CriterionUserDefinedUnitType :
          y_LiztAttributePair ENDITEM y_Limit_XmlDecimal
          y_CriterionDecima_1131_CriterionDecima_1131_Type_0
          {$$ = new CriterionUserDefinedUnitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CriterionUserDefinedUnitType attributes");
             }
           delete $1;
          }
        ;

y_CriticalityAreaEnumType :
          DATASTRING
          {$$ = new CriticalityAreaEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CriticalityAreaEnumType value");
          }
        ;

y_CriticalityLevelEnumType :
          DATASTRING
          {$$ = new CriticalityLevelEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad CriticalityLevelEnumType value");
          }
        ;

y_CriticalityType :
          ENDITEM y_CriticalityType_1050_CriticalityType_1050_Type
          y_CriticalityType_1051_CriticalityType_1051_Type_0
          {$$ = new CriticalityType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CriticalityType_1050_CriticalityType_1050_Type :
          y_CriticalityType_1050_Type
          {$$ = $1;}
        ;

y_CriticalityType_1050_Type :
          y_CriticalityType_1050_TypeChoicePair
          {$$ = new CriticalityType_1050_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CriticalityType_1050_TypeChoicePair :
          y_LevelEnum_CriticalityLevelEnumType
          {$$ = new CriticalityType_1050_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CriticalityType_1050_TypeType = CriticalityType_1050_TypeChoicePair::LevelEnumE;
           $$->CriticalityType_1050_TypeValue.LevelEnum = $1;
          }
        | y_OtherLevel_XmlString
          {$$ = new CriticalityType_1050_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CriticalityType_1050_TypeType = CriticalityType_1050_TypeChoicePair::OtherLevelE;
           $$->CriticalityType_1050_TypeValue.OtherLevel = $1;
          }
        ;

y_CriticalityType_1051_CriticalityType_1051_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CriticalityType_1051_Type
          {$$ = $1;}
        ;

y_CriticalityType_1051_Type :
          y_CriticalityType_1051_TypeChoicePair
          {$$ = new CriticalityType_1051_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CriticalityType_1051_TypeChoicePair :
          y_AreaEnum_CriticalityAreaEnumType
          {$$ = new CriticalityType_1051_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CriticalityType_1051_TypeType = CriticalityType_1051_TypeChoicePair::AreaEnumE;
           $$->CriticalityType_1051_TypeValue.AreaEnum = $1;
          }
        | y_OtherArea_XmlString
          {$$ = new CriticalityType_1051_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CriticalityType_1051_TypeType = CriticalityType_1051_TypeChoicePair::OtherAreaE;
           $$->CriticalityType_1051_TypeValue.OtherArea = $1;
          }
        ;

y_Criticality_CriticalityType_0 :
          /* empty */
          {$$ = 0;}
        | CriticalitySTART y_CriticalityType CriticalityEND
          {$$ = $2;}
        ;

y_CrossSectionReferenceFeatureId_ArrayReferenceFullType :
          CrossSectionReferenceFeatureIdSTART y_ArrayReferenceFullType
          CrossSectionReferenceFeatureIdEND
          {$$ = $2;}
        ;

y_Curve12Core_substituteType :
          y_Aggregate12Core_Aggregate12CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcCircular12Core_ArcCircular12CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcConic12Core_ArcConic12CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Nurbs12Core_Nurbs12CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Polyline12Core_Polyline12CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Segment12Core_Segment12CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Spline12Core_Spline12CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Curve12OrientedType :
          ENDITEM y_Curve12Core_substituteType
          {$$ = new Curve12OrientedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM y_Curve12Core_substituteType
          {$$ = new Curve12OrientedType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Curve12OrientedType attributes");
             }
           delete $1;
          }
        ;

y_Curve12SetType :
          y_LiztAttributePair ENDITEM y_LiztCurve12_substituteType_1_u
          {$$ = new Curve12SetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Curve12SetType attributes");
             }
           delete $1;
          }
        ;

y_Curve12Set_Curve12SetType_0 :
          /* empty */
          {$$ = 0;}
        | Curve12SetSTART y_Curve12SetType Curve12SetEND
          {$$ = $2;}
        ;

y_Curve12_ElementReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | Curve12START y_ElementReferenceType Curve12END
          {$$ = $2;}
        ;

y_Curve12_substituteType :
          y_Aggregate12_Aggregate12Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcCircular12_ArcCircular12Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcConic12_ArcConic12Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Nurbs12_Nurbs12Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Polyline12_Polyline12Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Segment12_Segment12Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Spline12_Spline12Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Curve13CoreType :
          ENDITEM y_Curve13Core_substituteType
          {$$ = new Curve13CoreType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Curve13Core_substituteType :
          y_Aggregate13Core_Aggregate13CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcCircular13Core_ArcCircular13CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcConic13Core_ArcConic13CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Nurbs13Core_Nurbs13CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Polyline13Core_Polyline13CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Segment13Core_Segment13CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Spline13Core_Spline13CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Curve13OrientedType :
          ENDITEM y_Curve13Core_substituteType
          {$$ = new Curve13OrientedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM y_Curve13Core_substituteType
          {$$ = new Curve13OrientedType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Curve13OrientedType attributes");
             }
           delete $1;
          }
        ;

y_Curve13SetType :
          y_LiztAttributePair ENDITEM y_LiztCurve13_substituteType_1_u
          {$$ = new Curve13SetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Curve13SetType attributes");
             }
           delete $1;
          }
        ;

y_Curve13Set_Curve13SetType_0 :
          /* empty */
          {$$ = 0;}
        | Curve13SetSTART y_Curve13SetType Curve13SetEND
          {$$ = $2;}
        ;

y_Curve13_substituteType :
          y_Aggregate13_Aggregate13Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcCircular13_ArcCircular13Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ArcConic13_ArcConic13Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Nurbs13_Nurbs13Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Polyline13_Polyline13Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Segment13_Segment13Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Spline13_Spline13Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CurveFeatureNominalId_QIFReferenceFullType :
          CurveFeatureNominalIdSTART y_QIFReferenceFullType
          CurveFeatureNominalIdEND
          {$$ = $2;}
        ;

y_CurveFeature_BaseFeatureType :
          CurveFeatureSTART y_BaseFeatureType CurveFeatureEND
          {$$ = $2;}
        ;

y_CurveIds_ArrayReferenceFullType :
          CurveIdsSTART y_ArrayReferenceFullType CurveIdsEND
          {$$ = $2;}
        ;

y_CurveLengthCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new CurveLengthCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CurveLengthCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CurveLengthCharacteristicDefinition_CurveLengthCharacteristicDefinitionType :
          CurveLengthCharacteristicDefinitionSTART
          y_CurveLengthCharacteristicDefinitionType
          CurveLengthCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "CurveLengthCharacteristicDefinition";
          }
        ;

y_CurveLengthCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new CurveLengthCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CurveLengthCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_CurveLengthCharacteristicItem_CurveLengthCharacteristicItemType :
          CurveLengthCharacteristicItemSTART
          y_CurveLengthCharacteristicItemType
          CurveLengthCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "CurveLengthCharacteristicItem";
          }
        ;

y_CurveLengthCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new CurveLengthCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CurveLengthCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CurveLengthCharacteristicMeasurement_CurveLengthCharacteristicMeasurementType :
          CurveLengthCharacteristicMeasurementSTART
          y_CurveLengthCharacteristicMeasurementType
          CurveLengthCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "CurveLengthCharacteristicMeasurement";
          }
        ;

y_CurveLengthCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new CurveLengthCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CurveLengthCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_CurveLengthCharacteristicNominal_CurveLengthCharacteristicNominalType :
          CurveLengthCharacteristicNominalSTART
          y_CurveLengthCharacteristicNominalType
          CurveLengthCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "CurveLengthCharacteristicNominal";
          }
        ;

y_CurveLengthCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new CurveLengthCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_CurveLengthCharacteristicStats_CurveLengthCharacteristicStatsEvalType :
          CurveLengthCharacteristicStatsSTART
          y_CurveLengthCharacteristicStatsEvalType
          CurveLengthCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "CurveLengthCharacteristicStats";
          }
        ;

y_CurveMeshSetType :
          y_LiztAttributePair ENDITEM
          y_LiztPathTriangulation_PathTriangulationType_1_u
          {$$ = new CurveMeshSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CurveMeshSetType attributes");
             }
           delete $1;
          }
        ;

y_CurveMeshSet_CurveMeshSetType_0 :
          /* empty */
          {$$ = 0;}
        | CurveMeshSetSTART y_CurveMeshSetType CurveMeshSetEND
          {$$ = $2;}
        ;

y_CurveMesh_ElementReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | CurveMeshSTART y_ElementReferenceType CurveMeshEND
          {$$ = $2;}
        ;

y_CurvePoints_PolyLineType :
          CurvePointsSTART y_PolyLineType CurvePointsEND
          {$$ = $2;}
        ;

y_Curve_Curve13CoreType :
          CurveSTART y_Curve13CoreType CurveEND
          {$$ = $2;}
        ;

y_Curve_ElementReferenceType :
          CurveSTART y_ElementReferenceType CurveEND
          {$$ = $2;}
        ;

y_CustomerNumber_XmlToken :
          CustomerNumberSTART ENDITEM {yyReadData = 1;} y_XmlToken
          CustomerNumberEND
          {$$ = $4;}
        ;

y_CustomerOrganizationType :
          ENDITEM y_Name_XmlToken y_Address_PhysicalAddressType_0
          y_Attributes_AttributesType_0 y_CustomerNumber_XmlToken
          {$$ = new CustomerOrganizationType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_CustomerOrganization_CustomerOrganizationType_0 :
          /* empty */
          {$$ = 0;}
        | CustomerOrganizationSTART y_CustomerOrganizationType
          CustomerOrganizationEND
          {$$ = $2;
           $$->printElement = "CustomerOrganization";
          }
        ;

y_Cutoff_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | CutoffSTART y_LinearValueType CutoffEND
          {$$ = $2;}
        ;

y_Cylinder23CoreType :
          ENDITEM y_Diameter_XmlDouble y_Length_XmlDouble y_Axis_AxisType
          y_Sweep_SweepType
          {$$ = new Cylinder23CoreType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        | y_LiztAttributePair ENDITEM y_Diameter_XmlDouble
          y_Length_XmlDouble y_Axis_AxisType y_Sweep_SweepType
          {$$ = new Cylinder23CoreType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Cylinder23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Cylinder23Core_Cylinder23CoreType :
          Cylinder23CoreSTART y_Cylinder23CoreType Cylinder23CoreEND
          {$$ = $2;
           $$->printElement = "Cylinder23Core";
          }
        ;

y_Cylinder23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Cylinder23Core_Cylinder23CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Cylinder23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Cylinder23Type attributes");
             }
           delete $1;
          }
        ;

y_Cylinder23_Cylinder23Type :
          Cylinder23START y_Cylinder23Type Cylinder23END
          {$$ = $2;
           $$->printElement = "Cylinder23";
          }
        ;

y_CylinderBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new CylinderBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylinderBestFitType attributes");
             }
           delete $1;
          }
        ;

y_CylinderCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new CylinderCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CylinderCenterToCylinderCenterAccuracy_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | CylinderCenterToCylinderCenterAccuracySTART y_LinearValueType
          CylinderCenterToCylinderCenterAccuracyEND
          {$$ = $2;}
        ;

y_CylinderCheckedFeatureType :
          ENDITEM y_CheckDetails_CylinderCheckedType_0
          {$$ = new CylinderCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylinderCheckedType :
          ENDITEM y_CylinderCheckedTypeChoicePair
          {$$ = new CylinderCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylinderCheckedTypeChoicePair :
          y_Constructed_CylinderConstructionMethodType
          {$$ = new CylinderCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderCheckedTypeType = CylinderCheckedTypeChoicePair::ConstructedE;
           $$->CylinderCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new CylinderCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderCheckedTypeType = CylinderCheckedTypeChoicePair::MeasuredE;
           $$->CylinderCheckedTypeValue.Measured = $1;
          }
        ;

y_CylinderConstructionMethodType :
          ENDITEM y_CylinderConstructionMethodTypeChoicePair
          {$$ = new CylinderConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylinderConstructionMethodTypeChoicePair :
          y_BestFit_CylinderBestFitType
          {$$ = new CylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderConstructionMethodTypeType = CylinderConstructionMethodTypeChoicePair::BestFitE;
           $$->CylinderConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_CylinderCastType
          {$$ = new CylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderConstructionMethodTypeType = CylinderConstructionMethodTypeChoicePair::CastE;
           $$->CylinderConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_CylinderCopyType
          {$$ = new CylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderConstructionMethodTypeType = CylinderConstructionMethodTypeChoicePair::CopyE;
           $$->CylinderConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_CylinderFromScanType
          {$$ = new CylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderConstructionMethodTypeType = CylinderConstructionMethodTypeChoicePair::FromScanE;
           $$->CylinderConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Recompensated_CylinderRecompType
          {$$ = new CylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderConstructionMethodTypeType = CylinderConstructionMethodTypeChoicePair::RecompensatedE;
           $$->CylinderConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_CylinderTransformType
          {$$ = new CylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderConstructionMethodTypeType = CylinderConstructionMethodTypeChoicePair::TransformE;
           $$->CylinderConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_CylinderCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCylinder_BaseFeatureType
          {$$ = new CylinderCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CylinderFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType y_Length_LinearValueType_0
          y_Bottom_BottomType_0
          {$$ = new CylinderFeatureDefinitionType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylinderFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CylinderFeatureDefinition_CylinderFeatureDefinitionType :
          CylinderFeatureDefinitionSTART y_CylinderFeatureDefinitionType
          CylinderFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "CylinderFeatureDefinition";
          }
        ;

y_CylinderFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_CylinderMeasurementDeterminationType
          {$$ = new CylinderFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylinderFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_CylinderFeatureItem_CylinderFeatureItemType :
          CylinderFeatureItemSTART y_CylinderFeatureItemType
          CylinderFeatureItemEND
          {$$ = $2;
           $$->printElement = "CylinderFeatureItem";
          }
        ;

y_CylinderFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_Diameter_MeasuredLinearValueType_0
          y_Length_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new CylinderFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylinderFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CylinderFeatureMeasurement_CylinderFeatureMeasurementType :
          CylinderFeatureMeasurementSTART y_CylinderFeatureMeasurementType
          CylinderFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "CylinderFeatureMeasurement";
          }
        | CylinderFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new CylinderFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "CylinderFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CylinderFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_CylinderFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Axis_AxisType y_Sweep_SweepType_0
          y_Constructed_CylinderConstructionMethodType_0
          {$$ = new CylinderFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylinderFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_CylinderFeatureNominal_CylinderFeatureNominalType :
          CylinderFeatureNominalSTART y_CylinderFeatureNominalType
          CylinderFeatureNominalEND
          {$$ = $2;
           $$->printElement = "CylinderFeatureNominal";
          }
        ;

y_CylinderFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          {$$ = new CylinderFromScanType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CylinderMeasurementDeterminationType :
          ENDITEM y_CylinderMeasurementDeterminationTypeChoicePair
          {$$ = new CylinderMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylinderMeasurementDeterminationTypeChoicePair :
          y_Checked_CylinderCheckedFeatureType
          {$$ = new CylinderMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderMeasurementDeterminationTypeType = CylinderMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->CylinderMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new CylinderMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderMeasurementDeterminationTypeType = CylinderMeasurementDeterminationTypeChoicePair::SetE;
           $$->CylinderMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_CylinderPointSamplingStrategyType :
          ENDITEM y_CylinderPointSamplingStrategyTypeChoicePair
          {$$ = new CylinderPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylinderPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_SurfaceOfRevolutionPointSamplingStrategyEnumType
          {$$ = new CylinderPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderPointSamplingStrategyTypeType = CylinderPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->CylinderPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new CylinderPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylinderPointSamplingStrategyTypeType = CylinderPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->CylinderPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_CylinderRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new CylinderRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CylinderTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCylinder_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new CylinderTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CylinderType :
          ENDITEM y_CenterPoint_PointType y_Diameter_LinearValueType
          y_Axis_UnitVectorType y_Length_LinearValueType
          {$$ = new CylinderType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_Cylinder_CylinderType :
          CylinderSTART y_CylinderType CylinderEND
          {$$ = $2;}
        ;

y_CylindricalSegmentBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new CylindricalSegmentBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricalSegmentBestFitType attributes");
             }
           delete $1;
          }
        ;

y_CylindricalSegmentCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new CylindricalSegmentCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CylindricalSegmentCheckedFeatureType :
          ENDITEM y_CheckDetails_CylindricalSegmentCheckedType_0
          {$$ = new CylindricalSegmentCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylindricalSegmentCheckedType :
          ENDITEM y_CylindricalSegmentCheckedTypeChoicePair
          {$$ = new CylindricalSegmentCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylindricalSegmentCheckedTypeChoicePair :
          y_Constructed_CylindricalSegmentConstructionMethodType
          {$$ = new CylindricalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentCheckedTypeType = CylindricalSegmentCheckedTypeChoicePair::ConstructedE;
           $$->CylindricalSegmentCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new CylindricalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentCheckedTypeType = CylindricalSegmentCheckedTypeChoicePair::MeasuredE;
           $$->CylindricalSegmentCheckedTypeValue.Measured = $1;
          }
        ;

y_CylindricalSegmentConstructionMethodType :
          ENDITEM y_CylindricalSegmentConstructionMethodTypeChoicePair
          {$$ = new CylindricalSegmentConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylindricalSegmentConstructionMethodTypeChoicePair :
          y_BestFit_CylindricalSegmentBestFitType
          {$$ = new CylindricalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentConstructionMethodTypeType = CylindricalSegmentConstructionMethodTypeChoicePair::BestFitE;
           $$->CylindricalSegmentConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_CylindricalSegmentCastType
          {$$ = new CylindricalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentConstructionMethodTypeType = CylindricalSegmentConstructionMethodTypeChoicePair::CastE;
           $$->CylindricalSegmentConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_CylindricalSegmentCopyType
          {$$ = new CylindricalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentConstructionMethodTypeType = CylindricalSegmentConstructionMethodTypeChoicePair::CopyE;
           $$->CylindricalSegmentConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_CylindricalSegmentRecompType
          {$$ = new CylindricalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentConstructionMethodTypeType = CylindricalSegmentConstructionMethodTypeChoicePair::RecompensatedE;
           $$->CylindricalSegmentConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_CylindricalSegmentTransformType
          {$$ = new CylindricalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentConstructionMethodTypeType = CylindricalSegmentConstructionMethodTypeChoicePair::TransformE;
           $$->CylindricalSegmentConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_CylindricalSegmentCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCylindricalSegment_BaseFeatureType
          {$$ = new CylindricalSegmentCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CylindricalSegmentFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType y_Length_LinearValueType_0
          y_Bottom_BottomType_0
          {$$ = new CylindricalSegmentFeatureDefinitionType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricalSegmentFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CylindricalSegmentFeatureDefinition_CylindricalSegmentFeatureDefinitionType :
          CylindricalSegmentFeatureDefinitionSTART
          y_CylindricalSegmentFeatureDefinitionType
          CylindricalSegmentFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "CylindricalSegmentFeatureDefinition";
          }
        ;

y_CylindricalSegmentFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_CylindricalSegmentMeasurementDeterminationType
          {$$ = new CylindricalSegmentFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricalSegmentFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_CylindricalSegmentFeatureItem_CylindricalSegmentFeatureItemType :
          CylindricalSegmentFeatureItemSTART
          y_CylindricalSegmentFeatureItemType
          CylindricalSegmentFeatureItemEND
          {$$ = $2;
           $$->printElement = "CylindricalSegmentFeatureItem";
          }
        ;

y_CylindricalSegmentFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_Diameter_MeasuredLinearValueType_0
          y_Length_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new CylindricalSegmentFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricalSegmentFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CylindricalSegmentFeatureMeasurement_CylindricalSegmentFeatureMeasurementType :
          CylindricalSegmentFeatureMeasurementSTART
          y_CylindricalSegmentFeatureMeasurementType
          CylindricalSegmentFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "CylindricalSegmentFeatureMeasurement";
          }
        | CylindricalSegmentFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new CylindricalSegmentFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "CylindricalSegmentFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CylindricalSegmentFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_CylindricalSegmentFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Axis_AxisType y_Sweep_SweepType
          y_Constructed_CylindricalSegmentConstructionMethodType_0
          {$$ = new CylindricalSegmentFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricalSegmentFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_CylindricalSegmentFeatureNominal_CylindricalSegmentFeatureNominalType :
          CylindricalSegmentFeatureNominalSTART
          y_CylindricalSegmentFeatureNominalType
          CylindricalSegmentFeatureNominalEND
          {$$ = $2;
           $$->printElement = "CylindricalSegmentFeatureNominal";
          }
        ;

y_CylindricalSegmentMeasurementDeterminationType :
          ENDITEM
          y_CylindricalSegmentMeasurementDeterminationTypeChoicePair
          {$$ = new CylindricalSegmentMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylindricalSegmentMeasurementDeterminationTypeChoicePair :
          y_Checked_CylindricalSegmentCheckedFeatureType
          {$$ = new CylindricalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentMeasurementDeterminationTypeType = CylindricalSegmentMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->CylindricalSegmentMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new CylindricalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentMeasurementDeterminationTypeType = CylindricalSegmentMeasurementDeterminationTypeChoicePair::SetE;
           $$->CylindricalSegmentMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_CylindricalSegmentPointSamplingStrategyType :
          ENDITEM y_CylindricalSegmentPointSamplingStrategyTypeChoicePair
          {$$ = new CylindricalSegmentPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylindricalSegmentPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_SurfaceOfRevolutionPointSamplingStrategyEnumType
          {$$ = new CylindricalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentPointSamplingStrategyTypeType = CylindricalSegmentPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->CylindricalSegmentPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new CylindricalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricalSegmentPointSamplingStrategyTypeType = CylindricalSegmentPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->CylindricalSegmentPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_CylindricalSegmentRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new CylindricalSegmentRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CylindricalSegmentTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCylindricalSegment_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new CylindricalSegmentTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_CylindricalWorkingVolumeType :
          ENDITEM y_RadialAxisLength_LinearValueType
          y_MinAzimuthalAxisAngle_AngularValueType
          y_MaxAzimuthalAxisAngle_AngularValueType
          y_ZAxisLength_LinearValueType
          {$$ = new CylindricalWorkingVolumeType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_CylindricalWorkingVolume_CylindricalWorkingVolumeType :
          CylindricalWorkingVolumeSTART y_CylindricalWorkingVolumeType
          CylindricalWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "CylindricalWorkingVolume";
          }
        ;

y_CylindricityCha_1052_CylindricityCha_1052_Type :
          y_CylindricityCha_1052_Type
          {$$ = $1;}
        ;

y_CylindricityCha_1052_Type :
          y_CylindricityCha_1052_TypeChoicePair
          {$$ = new CylindricityCha_1052_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CylindricityCha_1052_TypeChoicePair :
          y_CylindricityCha_1083_CylindricityCha_1083_Type
          {$$ = new CylindricityCha_1052_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1052_TypeType = CylindricityCha_1052_TypeChoicePair::CylindricityCha_1083E;
           $$->CylindricityCha_1052_TypeValue.CylindricityCha_1083 = $1;
          }
        | y_CylindricityCha_1084_CylindricityCha_1084_Type
          {$$ = new CylindricityCha_1052_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1052_TypeType = CylindricityCha_1052_TypeChoicePair::CylindricityCha_1084E;
           $$->CylindricityCha_1052_TypeValue.CylindricityCha_1084 = $1;
          }
        ;

y_CylindricityCha_1053_CylindricityCha_1053_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CylindricityCha_1053_Type
          {$$ = $1;}
        ;

y_CylindricityCha_1053_Type :
          y_ZoneRadii_MeasuredZoneRadiiType y_ZoneAxis_MeasuredZoneAxisType
          {$$ = new CylindricityCha_1053_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_CylindricityCha_1083_CylindricityCha_1083_Type :
          y_CylindricityCha_1083_Type
          {$$ = $1;}
        ;

y_CylindricityCha_1083_Type :
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_CylindricityCha_1091_CylindricityCha_1091_Type_0
          {$$ = new CylindricityCha_1083_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_CylindricityCha_1084_CylindricityCha_1084_Type :
          y_CylindricityCha_1084_Type
          {$$ = $1;}
        ;

y_CylindricityCha_1084_Type :
          y_CylindricityCha_1084_TypeChoicePair
          {$$ = new CylindricityCha_1084_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CylindricityCha_1084_TypeChoicePair :
          y_ToleranceZonePerUnitAngle_ToleranceZonePerUnitAngleType
          {$$ = new CylindricityCha_1084_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1084_TypeType = CylindricityCha_1084_TypeChoicePair::ToleranceZonePerUnitAngleE;
           $$->CylindricityCha_1084_TypeValue.ToleranceZonePerUnitAngle = $1;
          }
        | y_ToleranceZonePerUnitArcLength_ToleranceZonePerUnitLengthType
          {$$ = new CylindricityCha_1084_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1084_TypeType = CylindricityCha_1084_TypeChoicePair::ToleranceZonePerUnitArcLengthE;
           $$->CylindricityCha_1084_TypeValue.ToleranceZonePerUnitArcLength = $1;
          }
        | y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType
          {$$ = new CylindricityCha_1084_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1084_TypeType = CylindricityCha_1084_TypeChoicePair::ToleranceZonePerUnitAreaE;
           $$->CylindricityCha_1084_TypeValue.ToleranceZonePerUnitArea = $1;
          }
        | y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType
          {$$ = new CylindricityCha_1084_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1084_TypeType = CylindricityCha_1084_TypeChoicePair::ToleranceZonePerUnitLengthE;
           $$->CylindricityCha_1084_TypeValue.ToleranceZonePerUnitLength = $1;
          }
        | y_ToleranceZonePerUnitPolarArea_ToleranceZonePerUnitPolarAreaType
          {$$ = new CylindricityCha_1084_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1084_TypeType = CylindricityCha_1084_TypeChoicePair::ToleranceZonePerUnitPolarAreaE;
           $$->CylindricityCha_1084_TypeValue.ToleranceZonePerUnitPolarArea = $1;
          }
        ;

y_CylindricityCha_1091_CylindricityCha_1091_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_CylindricityCha_1091_Type
          {$$ = $1;}
        ;

y_CylindricityCha_1091_Type :
          y_CylindricityCha_1091_TypeChoicePair
          {$$ = new CylindricityCha_1091_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_CylindricityCha_1091_TypeChoicePair :
          y_ToleranceZonePerUnitAngle_ToleranceZonePerUnitAngleType
          {$$ = new CylindricityCha_1091_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1091_TypeType = CylindricityCha_1091_TypeChoicePair::ToleranceZonePerUnitAngleE;
           $$->CylindricityCha_1091_TypeValue.ToleranceZonePerUnitAngle = $1;
          }
        | y_ToleranceZonePerUnitArcLength_ToleranceZonePerUnitLengthType
          {$$ = new CylindricityCha_1091_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1091_TypeType = CylindricityCha_1091_TypeChoicePair::ToleranceZonePerUnitArcLengthE;
           $$->CylindricityCha_1091_TypeValue.ToleranceZonePerUnitArcLength = $1;
          }
        | y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType
          {$$ = new CylindricityCha_1091_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1091_TypeType = CylindricityCha_1091_TypeChoicePair::ToleranceZonePerUnitAreaE;
           $$->CylindricityCha_1091_TypeValue.ToleranceZonePerUnitArea = $1;
          }
        | y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType
          {$$ = new CylindricityCha_1091_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1091_TypeType = CylindricityCha_1091_TypeChoicePair::ToleranceZonePerUnitLengthE;
           $$->CylindricityCha_1091_TypeValue.ToleranceZonePerUnitLength = $1;
          }
        | y_ToleranceZonePerUnitPolarArea_ToleranceZonePerUnitPolarAreaType
          {$$ = new CylindricityCha_1091_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->CylindricityCha_1091_TypeType = CylindricityCha_1091_TypeChoicePair::ToleranceZonePerUnitPolarAreaE;
           $$->CylindricityCha_1091_TypeValue.ToleranceZonePerUnitPolarArea = $1;
          }
        ;

y_CylindricityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_CylindricityCha_1052_CylindricityCha_1052_Type
          {$$ = new CylindricityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_CylindricityCharacteristicDefinition_CylindricityCharacteristicDefinitionType :
          CylindricityCharacteristicDefinitionSTART
          y_CylindricityCharacteristicDefinitionType
          CylindricityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "CylindricityCharacteristicDefinition";
          }
        ;

y_CylindricityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new CylindricityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_CylindricityCharacteristicItem_CylindricityCharacteristicItemType :
          CylindricityCharacteristicItemSTART
          y_CylindricityCharacteristicItemType
          CylindricityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "CylindricityCharacteristicItem";
          }
        ;

y_CylindricityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_MaxCylindricity_MeasuredLinearValueType_0
          y_CylindricityCha_1053_CylindricityCha_1053_Type_0
          {$$ = new CylindricityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_CylindricityCharacteristicMeasurement_CylindricityCharacteristicMeasurementType :
          CylindricityCharacteristicMeasurementSTART
          y_CylindricityCharacteristicMeasurementType
          CylindricityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "CylindricityCharacteristicMeasurement";
          }
        ;

y_CylindricityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new CylindricityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad CylindricityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_CylindricityCharacteristicNominal_CylindricityCharacteristicNominalType :
          CylindricityCharacteristicNominalSTART
          y_CylindricityCharacteristicNominalType
          CylindricityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "CylindricityCharacteristicNominal";
          }
        ;

y_CylindricityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_MaxCylindricityStats_StatsLinearType_0
          {$$ = new CylindricityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
          }
        ;

y_CylindricityCharacteristicStats_CylindricityCharacteristicStatsEvalType :
          CylindricityCharacteristicStatsSTART
          y_CylindricityCharacteristicStatsEvalType
          CylindricityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "CylindricityCharacteristicStats";
          }
        ;

y_D4Type :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new D4Type($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_D4Type y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_DMEClassNameEnumType :
          DATASTRING
          {$$ = new DMEClassNameEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DMEClassNameEnumType value");
          }
        ;

y_DMEClassNameEnum_DMEClassNameEnumType :
          DMEClassNameEnumSTART ENDITEM {yyReadData = 1;}
          y_DMEClassNameEnumType DMEClassNameEnumEND
          {$$ = $4;}
        ;

y_DMEClassName_DMEClassNameEnumType :
          DMEClassNameSTART ENDITEM {yyReadData = 1;}
          y_DMEClassNameEnumType DMEClassNameEND
          {$$ = $4;}
        ;

y_DMEDecisionClassType :
          ENDITEM y_Applicability_substituteType
          y_DMEClassName_DMEClassNameEnumType
          y_ParameterConstraints_DMEParameterConstraintSetType_0
          {$$ = new DMEDecisionClassType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_DMEDecisionClass_DMEDecisionClassType :
          DMEDecisionClassSTART y_DMEDecisionClassType DMEDecisionClassEND
          {$$ = $2;
           $$->printElement = "DMEDecisionClass";
          }
        ;

y_DMEDecisionIdType :
          ENDITEM y_Applicability_substituteType y_DMEId_QIFReferenceType
          {$$ = new DMEDecisionIdType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_DMEDecisionId_DMEDecisionIdType :
          DMEDecisionIdSTART y_DMEDecisionIdType DMEDecisionIdEND
          {$$ = $2;
           $$->printElement = "DMEDecisionId";
          }
        ;

y_DMEDecisionMakeModelType :
          ENDITEM y_Applicability_substituteType y_Manufacturer_XmlString
          y_ModelNumber_XmlString y_SerialNumber_XmlString_0
          {$$ = new DMEDecisionMakeModelType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_DMEDecisionMakeModel_DMEDecisionMakeModelType :
          DMEDecisionMakeModelSTART y_DMEDecisionMakeModelType
          DMEDecisionMakeModelEND
          {$$ = $2;
           $$->printElement = "DMEDecisionMakeModel";
          }
        ;

y_DMEDecisionRule_IfThenDMERuleType :
          DMEDecisionRuleSTART y_IfThenDMERuleType DMEDecisionRuleEND
          {$$ = $2;
           $$->printElement = "DMEDecisionRule";
          }
        ;

y_DMEDecision_substituteType :
          y_DMEDecisionClass_DMEDecisionClassType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DMEDecisionId_DMEDecisionIdType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DMEDecisionMakeModel_DMEDecisionMakeModelType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_DMEId_QIFReferenceType :
          DMEIdSTART y_QIFReferenceType DMEIdEND
          {$$ = $2;}
        ;

y_DMEParameterConstraintSetType :
          y_LiztAttributePair ENDITEM
          y_LiztDMEParameterConstraint_DMEParameterConstraintType_1_u
          {$$ = new DMEParameterConstraintSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DMEParameterConstraintSetType attributes");
             }
           delete $1;
          }
        ;

y_DMEParameterConstraintType :
          ENDITEM y_ParameterName_XmlToken
          y_Comparison_ArithmeticComparisonEnumType
          y_ArithmeticExpression_substituteType
          {$$ = new DMEParameterConstraintType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_DMEParameterConstraint_DMEParameterConstraintType :
          DMEParameterConstraintSTART y_DMEParameterConstraintType
          DMEParameterConstraintEND
          {$$ = $2;}
        ;

y_DMESelectionRulesCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | DMESelectionRulesCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt DMESelectionRulesCountEND
          {$$ = $4;}
        ;

y_DMESelectionRulesType :
          y_LiztAttributePair ENDITEM
          y_LiztDMEDecisionRule_IfThenDMERuleType_1_u
          {$$ = new DMESelectionRulesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DMESelectionRulesType attributes");
             }
           delete $1;
          }
        ;

y_DMESelectionRules_DMESelectionRulesType_0 :
          /* empty */
          {$$ = 0;}
        | DMESelectionRulesSTART y_DMESelectionRulesType
          DMESelectionRulesEND
          {$$ = $2;}
        ;

y_DMESoftware_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | DMESoftwareSTART y_ArrayReferenceType DMESoftwareEND
          {$$ = $2;}
        ;

y_DMEThenType :
          y_LiztAttributePair ENDITEM y_LiztDMEDecision_substituteType_1_u
          {$$ = new DMEThenType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DMEThenType attributes");
             }
           delete $1;
          }
        ;

y_DMEThen_DMEThenType :
          DMEThenSTART y_DMEThenType DMEThenEND
          {$$ = $2;}
        ;

y_DRFTransformActualId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | DRFTransformActualIdSTART y_QIFReferenceType
          DRFTransformActualIdEND
          {$$ = $2;}
        ;

y_DVRTSensor_DifferentialVariableReluctanceTransducerSensorType :
          DVRTSensorSTART
          y_DifferentialVariableReluctanceTransducerSensorType
          DVRTSensorEND
          {$$ = $2;
           $$->printElement = "DVRTSensor";
          }
        ;

y_DarkCurrent_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | DarkCurrentSTART y_UserDefinedUnitValueType DarkCurrentEND
          {$$ = $2;}
        ;

y_Data_XmlString :
          DataSTART ENDITEM {yyReadData = 1;} y_XmlString DataEND
          {$$ = $4;}
        ;

y_DateAndTime_XmlDateTime :
          DateAndTimeSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          DateAndTimeEND
          {$$ = $4;}
        ;

y_DatumDefinitionId_QIFReferenceFullType :
          DatumDefinitionIdSTART y_QIFReferenceFullType
          DatumDefinitionIdEND
          {$$ = $2;}
        ;

y_DatumDefinitionIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | DatumDefinitionIdsSTART y_ArrayReferenceFullType
          DatumDefinitionIdsEND
          {$$ = $2;}
        ;

y_DatumDefinitionIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | DatumDefinitionIdsSTART y_ArrayReferenceType
          DatumDefinitionIdsEND
          {$$ = $2;}
        ;

y_DatumDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_DatumLabel_XmlNMTOKEN y_DatumTargetIds_ArrayReferenceFullType_0
          y_FeatureNominalIds_ArrayReferenceFullType_0
          {$$ = new DatumDefinitionType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DatumDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_DatumDefinition_DatumDefinitionType :
          DatumDefinitionSTART y_DatumDefinitionType DatumDefinitionEND
          {$$ = $2;}
        ;

y_DatumDefinitionsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | DatumDefinitionsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt DatumDefinitionsCountEND
          {$$ = $4;}
        ;

y_DatumDefinitionsType :
          y_LiztAttributePair ENDITEM
          y_LiztDatumDefinition_DatumDefinitionType_1_u
          {$$ = new DatumDefinitionsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DatumDefinitionsType attributes");
             }
           delete $1;
          }
        ;

y_DatumDefinitions_DatumDefinitionsType_0 :
          /* empty */
          {$$ = 0;}
        | DatumDefinitionsSTART y_DatumDefinitionsType DatumDefinitionsEND
          {$$ = $2;}
        ;

y_DatumFeatureSimulatorModifierType :
          ENDITEM y_DatumFeatureSimulatorModifierTypeChoicePair
          {$$ = new DatumFeatureSimulatorModifierType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_DatumFeatureSimulatorModifierTypeChoicePair :
          y_BasicSize_XmlToken
          {$$ = new DatumFeatureSimulatorModifierTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DatumFeatureSimulatorModifierTypeType = DatumFeatureSimulatorModifierTypeChoicePair::BasicSizeE;
           $$->DatumFeatureSimulatorModifierTypeValue.BasicSize = $1;
          }
        | y_DiametricalSize_LinearValueType
          {$$ = new DatumFeatureSimulatorModifierTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DatumFeatureSimulatorModifierTypeType = DatumFeatureSimulatorModifierTypeChoicePair::DiametricalSizeE;
           $$->DatumFeatureSimulatorModifierTypeValue.DiametricalSize = $1;
          }
        | y_LinearSize_LinearValueType
          {$$ = new DatumFeatureSimulatorModifierTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DatumFeatureSimulatorModifierTypeType = DatumFeatureSimulatorModifierTypeChoicePair::LinearSizeE;
           $$->DatumFeatureSimulatorModifierTypeValue.LinearSize = $1;
          }
        ;

y_DatumFeatureSimulatorModifier_DatumFeatureSimulatorModifierType_0 :
          /* empty */
          {$$ = 0;}
        | DatumFeatureSimulatorModifierSTART
          y_DatumFeatureSimulatorModifierType
          DatumFeatureSimulatorModifierEND
          {$$ = $2;}
        ;

y_DatumFixed_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | DatumFixedSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          DatumFixedEND
          {$$ = $4;}
        ;

y_DatumLabel_XmlNMTOKEN :
          DatumLabelSTART ENDITEM {yyReadData = 1;} y_XmlNMTOKEN
          DatumLabelEND
          {$$ = $4;}
        ;

y_DatumPrecedenceAlignmentOperationType :
          ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0
          y_DatumReferenceFrameId_QIFReferenceFullType
          y_PrimaryAxis_UnitVectorType y_SecondaryAxis_UnitVectorType_0
          {$$ = new DatumPrecedenceAlignmentOperationType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_DatumPrecedence_DatumPrecedenceAlignmentOperationType :
          DatumPrecedenceSTART y_DatumPrecedenceAlignmentOperationType
          DatumPrecedenceEND
          {$$ = $2;
           $$->printElement = "DatumPrecedence";
          }
        ;

y_DatumReferenceFrameId_QIFReferenceFullType :
          DatumReferenceFrameIdSTART y_QIFReferenceFullType
          DatumReferenceFrameIdEND
          {$$ = $2;}
        ;

y_DatumReferenceFrameId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | DatumReferenceFrameIdSTART y_QIFReferenceFullType
          DatumReferenceFrameIdEND
          {$$ = $2;}
        ;

y_DatumReferenceFrameIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | DatumReferenceFrameIdsSTART y_ArrayReferenceFullType
          DatumReferenceFrameIdsEND
          {$$ = $2;}
        ;

y_DatumReferenceFrameIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | DatumReferenceFrameIdsSTART y_ArrayReferenceType
          DatumReferenceFrameIdsEND
          {$$ = $2;}
        ;

y_DatumReferenceFrameType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Datums_DatumsType_0 y_Name_XmlToken_0 y_Description_XmlString_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new DatumReferenceFrameType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DatumReferenceFrameType attributes");
             }
           delete $1;
          }
        ;

y_DatumReferenceFrame_DatumReferenceFrameType :
          DatumReferenceFrameSTART y_DatumReferenceFrameType
          DatumReferenceFrameEND
          {$$ = $2;}
        | DatumReferenceFrameSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new DatumReferenceFrameType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad DatumReferenceFrameType attributes");
             }
           delete $2;
          }
        ;

y_DatumReferenceFramesCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | DatumReferenceFramesCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt DatumReferenceFramesCountEND
          {$$ = $4;}
        ;

y_DatumReferenceFramesType :
          y_LiztAttributePair ENDITEM
          y_LiztDatumReferenceFrame_DatumReferenceFrameType_1_u
          {$$ = new DatumReferenceFramesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DatumReferenceFramesType attributes");
             }
           delete $1;
          }
        ;

y_DatumReferenceFrames_DatumReferenceFramesType_0 :
          /* empty */
          {$$ = 0;}
        | DatumReferenceFramesSTART y_DatumReferenceFramesType
          DatumReferenceFramesEND
          {$$ = $2;}
        ;

y_DatumTargetDefinitionIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | DatumTargetDefinitionIdsSTART y_ArrayReferenceFullType
          DatumTargetDefinitionIdsEND
          {$$ = $2;}
        ;

y_DatumTargetDefinitionIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | DatumTargetDefinitionIdsSTART y_ArrayReferenceType
          DatumTargetDefinitionIdsEND
          {$$ = $2;}
        ;

y_DatumTargetDefinitionsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | DatumTargetDefinitionsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt DatumTargetDefinitionsCountEND
          {$$ = $4;}
        ;

y_DatumTargetDefinitionsType :
          y_LiztAttributePair ENDITEM y_LiztDatumTarget_DatumTargetType_1_u
          {$$ = new DatumTargetDefinitionsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DatumTargetDefinitionsType attributes");
             }
           delete $1;
          }
        ;

y_DatumTargetDefinitions_DatumTargetDefinitionsType_0 :
          /* empty */
          {$$ = 0;}
        | DatumTargetDefinitionsSTART y_DatumTargetDefinitionsType
          DatumTargetDefinitionsEND
          {$$ = $2;}
        ;

y_DatumTargetIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | DatumTargetIdsSTART y_ArrayReferenceFullType DatumTargetIdsEND
          {$$ = $2;}
        ;

y_DatumTargetLabel_XmlToken :
          DatumTargetLabelSTART ENDITEM {yyReadData = 1;} y_XmlToken
          DatumTargetLabelEND
          {$$ = $4;}
        ;

y_DatumTargetTranslationDirection_UnitVectorType :
          DatumTargetTranslationDirectionSTART y_UnitVectorType
          DatumTargetTranslationDirectionEND
          {$$ = $2;}
        ;

y_DatumTargetType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_DatumTargetLabel_XmlToken
          y_FeatureNominalId_QIFReferenceFullType_0
          y_TargetZoneId_QIFReferenceFullType_0
          y_MovableDatumTarget_MovableDatumTargetDirectionType_0
          {$$ = new DatumTargetType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DatumTargetType attributes");
             }
           delete $1;
          }
        ;

y_DatumTarget_DatumTargetType :
          DatumTargetSTART y_DatumTargetType DatumTargetEND
          {$$ = $2;}
        ;

y_DatumTranslationAllowed_XmlBoolean :
          DatumTranslationAllowedSTART ENDITEM {yyReadData = 1;}
          y_XmlBoolean DatumTranslationAllowedEND
          {$$ = $4;}
        ;

y_DatumTranslationType :
          ENDITEM y_DatumTranslationAllowed_XmlBoolean
          {$$ = new DatumTranslationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_DatumTranslation_DatumTranslationType_0 :
          /* empty */
          {$$ = 0;}
        | DatumTranslationSTART y_DatumTranslationType DatumTranslationEND
          {$$ = $2;}
        ;

y_DatumType :
          ENDITEM y_DatumDefinitionId_QIFReferenceFullType
          y_MaterialModifier_MaterialModifierEnumType
          y_SizeCharacteristicDefinitionId_QIFReferenceType_0
          y_ReferencedComponent_ReferencedComponentEnumType
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_DatumFeatureSimulatorModifier_DatumFeatureSimulatorModifierType_0
          y_DatumTranslation_DatumTranslationType_0
          y_DegreesOfFreedom_DegreesOfFreedomType_0
          y_ProjectedDatum_LinearValueType_0
          y_DiameterModifier_DiameterModifierEnumType_0
          y_SectionModifier_SectionModifierEnumType_0
          y_ContactingFeature_XmlBoolean_0 y_DistanceVariable_XmlBoolean_0
          y_DatumFixed_XmlBoolean_0 y_ReducedDatum_ReducedDatumEnumType_0
          y_ConstrainOrientation_XmlBoolean_0
          y_ConstrainSubsequent_XmlBoolean_0 y_Attributes_AttributesType_0
          {$$ = new DatumType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
          }
        ;

y_DatumWithPreced_1012_DatumWithPreced_1012_Type :
          y_DatumWithPreced_1012_Type
          {$$ = $1;}
        ;

y_DatumWithPreced_1012_Type :
          y_DatumWithPreced_1012_TypeChoicePair
          {$$ = new DatumWithPreced_1012_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_DatumWithPreced_1012_TypeChoicePair :
          y_CompoundDatum_CompoundDatumType
          {$$ = new DatumWithPreced_1012_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DatumWithPreced_1012_TypeType = DatumWithPreced_1012_TypeChoicePair::CompoundDatumE;
           $$->DatumWithPreced_1012_TypeValue.CompoundDatum = $1;
          }
        | y_MeasuredDatumFeature_MeasuredDatumFeatureType
          {$$ = new DatumWithPreced_1012_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DatumWithPreced_1012_TypeType = DatumWithPreced_1012_TypeChoicePair::MeasuredDatumFeatureE;
           $$->DatumWithPreced_1012_TypeValue.MeasuredDatumFeature = $1;
          }
        | y_NominalDatumFeature_NominalDatumFeatureType
          {$$ = new DatumWithPreced_1012_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DatumWithPreced_1012_TypeType = DatumWithPreced_1012_TypeChoicePair::NominalDatumFeatureE;
           $$->DatumWithPreced_1012_TypeValue.NominalDatumFeature = $1;
          }
        | y_SimpleDatum_DatumType
          {$$ = new DatumWithPreced_1012_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DatumWithPreced_1012_TypeType = DatumWithPreced_1012_TypeChoicePair::SimpleDatumE;
           $$->DatumWithPreced_1012_TypeValue.SimpleDatum = $1;
          }
        ;

y_DatumWithPrecedenceType :
          ENDITEM y_DatumWithPreced_1012_DatumWithPreced_1012_Type
          y_Precedence_PrecedenceType
          {$$ = new DatumWithPrecedenceType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Datum_DatumWithPrecedenceType :
          DatumSTART y_DatumWithPrecedenceType DatumEND
          {$$ = $2;}
        ;

y_Datum_SequencedDatumType :
          DatumSTART y_SequencedDatumType DatumEND
          {$$ = $2;}
        ;

y_DatumsOkStats_StatsPassFailType_0 :
          /* empty */
          {$$ = 0;}
        | DatumsOkStatsSTART y_StatsPassFailType DatumsOkStatsEND
          {$$ = $2;
           $$->printElement = "DatumsOkStats";
          }
        ;

y_DatumsOk_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | DatumsOkSTART ENDITEM {yyReadData = 1;} y_XmlBoolean DatumsOkEND
          {$$ = $4;}
        ;

y_DatumsType :
          y_LiztAttributePair ENDITEM
          y_LiztDatum_DatumWithPrecedenceType_1_5_Check
          {$$ = new DatumsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DatumsType attributes");
             }
           delete $1;
          }
        ;

y_Datums_DatumsType_0 :
          /* empty */
          {$$ = 0;}
        | DatumsSTART y_DatumsType DatumsEND
          {$$ = $2;}
        ;

y_Declaration_XmlString :
          DeclarationSTART ENDITEM {yyReadData = 1;} y_XmlString
          DeclarationEND
          {$$ = $4;}
        ;

y_DefaultCharacteristicDefinitionsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | DefaultCharacteristicDefinitionsCountSTART ENDITEM {yyReadData =
          1;} y_XmlUnsignedInt DefaultCharacteristicDefinitionsCountEND
          {$$ = $4;}
        ;

y_DefaultCharacteristicDefinitions_CharacteristicDefinitionsType_0 :
          /* empty */
          {$$ = 0;}
        | DefaultCharacteristicDefinitionsSTART
          y_CharacteristicDefinitionsType
          DefaultCharacteristicDefinitionsEND
          {$$ = $2;}
        ;

y_DefaultToleranceDefinitionsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | DefaultToleranceDefinitionsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt DefaultToleranceDefinitionsCountEND
          {$$ = $4;}
        ;

y_DefaultToleranceDefinitions_ToleranceDefinitionsType_0 :
          /* empty */
          {$$ = 0;}
        | DefaultToleranceDefinitionsSTART y_ToleranceDefinitionsType
          DefaultToleranceDefinitionsEND
          {$$ = $2;}
        ;

y_DefinedAsLimit_XmlBoolean :
          DefinedAsLimitSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          DefinedAsLimitEND
          {$$ = $4;}
        ;

y_DefiningPointMeasurementType :
          y_LiztAttributePair ENDITEM y_Point_MeasuredPointType
          y_Normal_MeasuredUnitVectorType_0 y_SequenceNumber_NaturalType
          {$$ = new DefiningPointMeasurementType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DefiningPointMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_DefiningPointNominalType :
          y_LiztAttributePair ENDITEM y_Point_PointType
          y_Normal_UnitVectorType_0 y_SequenceNumber_NaturalType
          {$$ = new DefiningPointNominalType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DefiningPointNominalType attributes");
             }
           delete $1;
          }
        ;

y_DefiningPoint_DefiningPointMeasurementType :
          DefiningPointSTART y_DefiningPointMeasurementType
          DefiningPointEND
          {$$ = $2;
           $$->printElement = "DefiningPoint";
          }
        ;

y_DefiningPoint_DefiningPointNominalType :
          DefiningPointSTART y_DefiningPointNominalType DefiningPointEND
          {$$ = $2;
           $$->printElement = "DefiningPoint";
          }
        ;

y_DefiningPointsMeasurementType :
          y_LiztAttributePair ENDITEM
          y_LiztDefiningPoint_DefiningPointMeasurementType_1_u
          {$$ = new DefiningPointsMeasurementType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DefiningPointsMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_DefiningPointsNominalType :
          y_LiztAttributePair ENDITEM
          y_LiztDefiningPoint_DefiningPointNominalType_1_u
          {$$ = new DefiningPointsNominalType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DefiningPointsNominalType attributes");
             }
           delete $1;
          }
        ;

y_DefiningPoints_DefiningPointsMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | DefiningPointsSTART y_DefiningPointsMeasurementType
          DefiningPointsEND
          {$$ = $2;}
        ;

y_DefiningPoints_DefiningPointsNominalType :
          DefiningPointsSTART y_DefiningPointsNominalType DefiningPointsEND
          {$$ = $2;}
        ;

y_DefinitionExternalType :
          y_LiztAttributePair ENDITEM
          y_LiztDefinitionExternalTypeChoicePair
          {$$ = new DefinitionExternalType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DefinitionExternalType attributes");
             }
           delete $1;
          }
        ;

y_DefinitionExternalTypeChoicePair :
          y_DigitalDrawing_DigitalDrawingType
          {$$ = new DefinitionExternalTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DefinitionExternalTypeType = DefinitionExternalTypeChoicePair::DigitalDrawingE;
           $$->DefinitionExternalTypeValue.DigitalDrawing = $1;
          }
        | y_DigitalModel_DigitalModelType
          {$$ = new DefinitionExternalTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DefinitionExternalTypeType = DefinitionExternalTypeChoicePair::DigitalModelE;
           $$->DefinitionExternalTypeValue.DigitalModel = $1;
          }
        | y_PhysicalModel_PhysicalModelType
          {$$ = new DefinitionExternalTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DefinitionExternalTypeType = DefinitionExternalTypeChoicePair::PhysicalModelE;
           $$->DefinitionExternalTypeValue.PhysicalModel = $1;
          }
        | y_PrintedDrawing_PrintedDrawingType
          {$$ = new DefinitionExternalTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DefinitionExternalTypeType = DefinitionExternalTypeChoicePair::PrintedDrawingE;
           $$->DefinitionExternalTypeValue.PrintedDrawing = $1;
          }
        ;

y_DefinitionExternal_DefinitionExternalType_0 :
          /* empty */
          {$$ = 0;}
        | DefinitionExternalSTART y_DefinitionExternalType
          DefinitionExternalEND
          {$$ = $2;}
        ;

y_DefinitionId_QIFReferenceFullType :
          DefinitionIdSTART y_QIFReferenceFullType DefinitionIdEND
          {$$ = $2;}
        ;

y_DegreeOfFreedomEnumType :
          DATASTRING
          {$$ = new DegreeOfFreedomEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DegreeOfFreedomEnumType value");
          }
        ;

y_DegreeOfFreedom_DegreeOfFreedomEnumType :
          DegreeOfFreedomSTART ENDITEM {yyReadData = 1;}
          y_DegreeOfFreedomEnumType DegreeOfFreedomEND
          {$$ = $4;}
        ;

y_DegreesOfFreedo_1013_DegreesOfFreedo_1013_Type :
          y_DegreesOfFreedo_1013_Type
          {$$ = $1;}
        ;

y_DegreesOfFreedo_1013_Type :
          y_DegreesOfFreedo_1013_TypeChoicePair
          {$$ = new DegreesOfFreedo_1013_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_DegreesOfFreedo_1013_TypeChoicePair :
          y_LiztDegreeOfFreedom_DegreeOfFreedomEnumType_1_6_Check
          {$$ = new DegreesOfFreedo_1013_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DegreesOfFreedo_1013_TypeType = DegreesOfFreedo_1013_TypeChoicePair::DegreeOfFreedomE;
           $$->DegreesOfFreedo_1013_TypeValue.DegreeOfFreedom = $1;
          }
        | y_LiztISODegreeOfFreedom_ISODegreeOfFreedomEnumType_1_6_Check
          {$$ = new DegreesOfFreedo_1013_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DegreesOfFreedo_1013_TypeType = DegreesOfFreedo_1013_TypeChoicePair::ISODegreeOfFreedomE;
           $$->DegreesOfFreedo_1013_TypeValue.ISODegreeOfFreedom = $1;
          }
        ;

y_DegreesOfFreedomType :
          y_LiztAttributePair ENDITEM
          y_DegreesOfFreedo_1013_DegreesOfFreedo_1013_Type
          {$$ = new DegreesOfFreedomType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DegreesOfFreedomType attributes");
             }
           delete $1;
          }
        ;

y_DegreesOfFreedom_DegreesOfFreedomType :
          DegreesOfFreedomSTART y_DegreesOfFreedomType DegreesOfFreedomEND
          {$$ = $2;}
        ;

y_DegreesOfFreedom_DegreesOfFreedomType_0 :
          /* empty */
          {$$ = 0;}
        | DegreesOfFreedomSTART y_DegreesOfFreedomType DegreesOfFreedomEND
          {$$ = $2;}
        ;

y_Denominator_NaturalType :
          DenominatorSTART ENDITEM {yyReadData = 1;} y_NaturalType
          DenominatorEND
          {$$ = $4;}
        ;

y_Denominator_XmlPositiveInteger :
          DenominatorSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          DenominatorEND
          {$$ = $4;}
        ;

y_Department_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | DepartmentSTART ENDITEM {yyReadData = 1;} y_XmlString
          DepartmentEND
          {$$ = $4;}
        ;

y_DepthCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new DepthCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DepthCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_DepthCharacteristicDefinition_DepthCharacteristicDefinitionType :
          DepthCharacteristicDefinitionSTART
          y_DepthCharacteristicDefinitionType
          DepthCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "DepthCharacteristicDefinition";
          }
        ;

y_DepthCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new DepthCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DepthCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_DepthCharacteristicItem_DepthCharacteristicItemType :
          DepthCharacteristicItemSTART y_DepthCharacteristicItemType
          DepthCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "DepthCharacteristicItem";
          }
        ;

y_DepthCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new DepthCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DepthCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_DepthCharacteristicMeasurement_DepthCharacteristicMeasurementType :
          DepthCharacteristicMeasurementSTART
          y_DepthCharacteristicMeasurementType
          DepthCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "DepthCharacteristicMeasurement";
          }
        ;

y_DepthCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new DepthCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DepthCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_DepthCharacteristicNominal_DepthCharacteristicNominalType :
          DepthCharacteristicNominalSTART y_DepthCharacteristicNominalType
          DepthCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "DepthCharacteristicNominal";
          }
        ;

y_DepthCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new DepthCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_DepthCharacteristicStats_DepthCharacteristicStatsEvalType :
          DepthCharacteristicStatsSTART y_DepthCharacteristicStatsEvalType
          DepthCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "DepthCharacteristicStats";
          }
        ;

y_DepthMax_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DepthMaxSTART y_MeasuredLinearValueType DepthMaxEND
          {$$ = $2;}
        ;

y_DepthMin_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DepthMinSTART y_MeasuredLinearValueType DepthMinEND
          {$$ = $2;}
        ;

y_DepthVector_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | DepthVectorSTART y_MeasuredUnitVectorType DepthVectorEND
          {$$ = $2;}
        ;

y_DepthVector_UnitVectorType :
          DepthVectorSTART y_UnitVectorType DepthVectorEND
          {$$ = $2;}
        ;

y_DepthVector_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | DepthVectorSTART y_UnitVectorType DepthVectorEND
          {$$ = $2;}
        ;

y_Depth_FractionType_0 :
          /* empty */
          {$$ = 0;}
        | DepthSTART y_FractionType DepthEND
          {$$ = $2;}
        ;

y_Depth_LinearValueType :
          DepthSTART y_LinearValueType DepthEND
          {$$ = $2;}
        ;

y_Depth_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DepthSTART y_LinearValueType DepthEND
          {$$ = $2;}
        ;

y_Depth_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DepthSTART y_MeasuredLinearValueType DepthEND
          {$$ = $2;}
        ;

y_Description_AddressDescriptionType_0 :
          /* empty */
          {$$ = 0;}
        | DescriptionSTART y_AddressDescriptionType DescriptionEND
          {$$ = $2;}
        ;

y_Description_XmlString :
          DescriptionSTART ENDITEM {yyReadData = 1;} y_XmlString
          DescriptionEND
          {$$ = $4;}
        ;

y_Description_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | DescriptionSTART ENDITEM {yyReadData = 1;} y_XmlString
          DescriptionEND
          {$$ = $4;}
        ;

y_Designator_XmlToken :
          DesignatorSTART ENDITEM {yyReadData = 1;} y_XmlToken
          DesignatorEND
          {$$ = $4;}
        ;

y_DetachableCapacitiveSensor_CapacitiveSensorType :
          DetachableCapacitiveSensorSTART y_CapacitiveSensorType
          DetachableCapacitiveSensorEND
          {$$ = $2;
           $$->printElement = "DetachableCapacitiveSensor";
          }
        ;

y_DetachableLVDTSensor_LinearVariableDifferentialTransformerSensorType :
          DetachableLVDTSensorSTART
          y_LinearVariableDifferentialTransformerSensorType
          DetachableLVDTSensorEND
          {$$ = $2;
           $$->printElement = "DetachableLVDTSensor";
          }
        ;

y_DetachableSensor_substituteType :
          y_ComplexTactileProbeSensor_ComplexTactileProbeSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DetachableCapacitiveSensor_CapacitiveSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_DetachableLVDTSensor_LinearVariableDifferentialTransformerSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SimpleTactileProbeSensor_SimpleTactileProbeSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_DetachableSensorsType :
          y_LiztAttributePair ENDITEM
          y_LiztDetachableSensor_substituteType_1_u
          {$$ = new DetachableSensorsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DetachableSensorsType attributes");
             }
           delete $1;
          }
        ;

y_DetachableSensors_DetachableSensorsType_0 :
          /* empty */
          {$$ = 0;}
        | DetachableSensorsSTART y_DetachableSensorsType
          DetachableSensorsEND
          {$$ = $2;}
        ;

y_DetectorBitNumber_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | DetectorBitNumberSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          DetectorBitNumberEND
          {$$ = $4;}
        ;

y_DetectorPixelSize_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DetectorPixelSizeSTART y_LinearValueType DetectorPixelSizeEND
          {$$ = $2;}
        ;

y_DeterminationMode_CircleMeasurementDeterminationType :
          DeterminationModeSTART y_CircleMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_CircularArcMeasurementDeterminationType :
          DeterminationModeSTART y_CircularArcMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_ConeMeasurementDeterminationType :
          DeterminationModeSTART y_ConeMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_ConicalSegmentMeasurementDeterminationType :
          DeterminationModeSTART
          y_ConicalSegmentMeasurementDeterminationType DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_CylinderMeasurementDeterminationType :
          DeterminationModeSTART y_CylinderMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_CylindricalSegmentMeasurementDeterminationType :
          DeterminationModeSTART
          y_CylindricalSegmentMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_EdgePointMeasurementDeterminationType :
          DeterminationModeSTART y_EdgePointMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_EllipseMeasurementDeterminationType :
          DeterminationModeSTART y_EllipseMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_EllipticalArcMeasurementDeterminationType :
          DeterminationModeSTART
          y_EllipticalArcMeasurementDeterminationType DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_ElongatedCircleMeasurementDeterminationType :
          DeterminationModeSTART
          y_ElongatedCircleMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_ElongatedCylinderMeasurementDeterminationType :
          DeterminationModeSTART
          y_ElongatedCylinderMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_ExtrudedCrossSectionMeasurementDeterminationType :
          DeterminationModeSTART
          y_ExtrudedCrossSectionMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_LineMeasurementDeterminationType :
          DeterminationModeSTART y_LineMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_OppositeAngledLinesMeasurementDeterminationType :
          DeterminationModeSTART
          y_OppositeAngledLinesMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_OppositeAngledPlanesMeasurementDeterminationType :
          DeterminationModeSTART
          y_OppositeAngledPlanesMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_OppositeParallelLinesMeasurementDeterminationType :
          DeterminationModeSTART
          y_OppositeParallelLinesMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_OppositeParallelPlanesMeasurementDeterminationType :
          DeterminationModeSTART
          y_OppositeParallelPlanesMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_OtherCurveMeasurementDeterminationType :
          DeterminationModeSTART y_OtherCurveMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_OtherShapeMeasurementDeterminationType :
          DeterminationModeSTART y_OtherShapeMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_OtherSurfaceMeasurementDeterminationType :
          DeterminationModeSTART y_OtherSurfaceMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_PlaneMeasurementDeterminationType :
          DeterminationModeSTART y_PlaneMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_PointDefinedCurveMeasurementDeterminationType :
          DeterminationModeSTART
          y_PointDefinedCurveMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_PointDefinedSurfaceMeasurementDeterminationType :
          DeterminationModeSTART
          y_PointDefinedSurfaceMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_PointMeasurementDeterminationType :
          DeterminationModeSTART y_PointMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_SphereMeasurementDeterminationType :
          DeterminationModeSTART y_SphereMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_SphericalSegmentMeasurementDeterminationType :
          DeterminationModeSTART
          y_SphericalSegmentMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_SurfaceOfRevolutionMeasurementDeterminationType :
          DeterminationModeSTART
          y_SurfaceOfRevolutionMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_ThreadedFeatureMeasurementDeterminationType :
          DeterminationModeSTART
          y_ThreadedFeatureMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_ToroidalSegmentMeasurementDeterminationType :
          DeterminationModeSTART
          y_ToroidalSegmentMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationMode_TorusMeasurementDeterminationType :
          DeterminationModeSTART y_TorusMeasurementDeterminationType
          DeterminationModeEND
          {$$ = $2;}
        ;

y_DeterminationModifier_DimensionDeterminationEnumType_0 :
          /* empty */
          {$$ = 0;}
        | DeterminationModifierSTART ENDITEM {yyReadData = 1;}
          y_DimensionDeterminationEnumType DeterminationModifierEND
          {$$ = $4;}
        ;

y_DeviationStats_StatsLinearType :
          DeviationStatsSTART y_StatsLinearType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolAngularType :
          DeviationStatsSTART y_StatsWithTolAngularType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolAreaType :
          DeviationStatsSTART y_StatsWithTolAreaType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolForceType :
          DeviationStatsSTART y_StatsWithTolForceType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolLinearType :
          DeviationStatsSTART y_StatsWithTolLinearType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolMassType :
          DeviationStatsSTART y_StatsWithTolMassType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolPressureType :
          DeviationStatsSTART y_StatsWithTolPressureType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolSpeedType :
          DeviationStatsSTART y_StatsWithTolSpeedType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolTemperatureType :
          DeviationStatsSTART y_StatsWithTolTemperatureType
          DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolTimeType :
          DeviationStatsSTART y_StatsWithTolTimeType DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_DeviationStats_StatsWithTolUserDefinedUnitType :
          DeviationStatsSTART y_StatsWithTolUserDefinedUnitType
          DeviationStatsEND
          {$$ = $2;
           $$->printElement = "DeviationStats";
          }
        ;

y_Deviation_LinearValueType :
          DeviationSTART y_LinearValueType DeviationEND
          {$$ = $2;}
        ;

y_DeviationsFromCalibration_TwentyLinearValuesType :
          DeviationsFromCalibrationSTART y_TwentyLinearValuesType
          DeviationsFromCalibrationEND
          {$$ = $2;}
        ;

y_Deviations_ListDoubleType :
          DeviationsSTART y_ListDoubleType DeviationsEND
          {$$ = $2;}
        ;

y_DiameterBottom_XmlDouble :
          DiameterBottomSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          DiameterBottomEND
          {$$ = $4;}
        ;

y_DiameterCharact_1054_DiameterCharact_1054_Type :
          y_DiameterCharact_1054_Type
          {$$ = $1;}
        ;

y_DiameterCharact_1054_Type :
          y_DiameterCharact_1054_TypeChoicePair
          {$$ = new DiameterCharact_1054_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_DiameterCharact_1054_TypeChoicePair :
          y_LimitsAndFitsSpecification_LimitsAndFitsSpecificationType
          {$$ = new DiameterCharact_1054_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DiameterCharact_1054_TypeType = DiameterCharact_1054_TypeChoicePair::LimitsAndFitsSpecificationE;
           $$->DiameterCharact_1054_TypeValue.LimitsAndFitsSpecification = $1;
          }
        | y_NonTolerance_NonToleranceEnumType
          {$$ = new DiameterCharact_1054_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DiameterCharact_1054_TypeType = DiameterCharact_1054_TypeChoicePair::NonToleranceE;
           $$->DiameterCharact_1054_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_LinearToleranceType
          {$$ = new DiameterCharact_1054_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DiameterCharact_1054_TypeType = DiameterCharact_1054_TypeChoicePair::ToleranceE;
           $$->DiameterCharact_1054_TypeValue.Tolerance = $1;
          }
        ;

y_DiameterCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_DiameterCharact_1054_DiameterCharact_1054_Type
          {$$ = new DiameterCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DiameterCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_DiameterCharacteristicDefinition_DiameterCharacteristicDefinitionType :
          DiameterCharacteristicDefinitionSTART
          y_DiameterCharacteristicDefinitionType
          DiameterCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "DiameterCharacteristicDefinition";
          }
        ;

y_DiameterCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new DiameterCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DiameterCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_DiameterCharacteristicItem_DiameterCharacteristicItemType :
          DiameterCharacteristicItemSTART y_DiameterCharacteristicItemType
          DiameterCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "DiameterCharacteristicItem";
          }
        ;

y_DiameterCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new DiameterCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DiameterCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_DiameterCharacteristicMeasurement_DiameterCharacteristicMeasurementType :
          DiameterCharacteristicMeasurementSTART
          y_DiameterCharacteristicMeasurementType
          DiameterCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "DiameterCharacteristicMeasurement";
          }
        ;

y_DiameterCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new DiameterCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DiameterCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_DiameterCharacteristicNominal_DiameterCharacteristicNominalType :
          DiameterCharacteristicNominalSTART
          y_DiameterCharacteristicNominalType
          DiameterCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "DiameterCharacteristicNominal";
          }
        ;

y_DiameterCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new DiameterCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_DiameterCharacteristicStats_DiameterCharacteristicStatsEvalType :
          DiameterCharacteristicStatsSTART
          y_DiameterCharacteristicStatsEvalType
          DiameterCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "DiameterCharacteristicStats";
          }
        ;

y_DiameterMajor_XmlDouble :
          DiameterMajorSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          DiameterMajorEND
          {$$ = $4;}
        ;

y_DiameterMax_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DiameterMaxSTART y_MeasuredLinearValueType DiameterMaxEND
          {$$ = $2;}
        ;

y_DiameterMin_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DiameterMinSTART y_MeasuredLinearValueType DiameterMinEND
          {$$ = $2;}
        ;

y_DiameterMinor_XmlDouble :
          DiameterMinorSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          DiameterMinorEND
          {$$ = $4;}
        ;

y_DiameterModifierEnumType :
          DATASTRING
          {$$ = new DiameterModifierEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DiameterModifierEnumType value");
          }
        ;

y_DiameterModifier_DiameterModifierEnumType_0 :
          /* empty */
          {$$ = 0;}
        | DiameterModifierSTART ENDITEM {yyReadData = 1;}
          y_DiameterModifierEnumType DiameterModifierEND
          {$$ = $4;}
        ;

y_DiameterTop_XmlDouble :
          DiameterTopSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          DiameterTopEND
          {$$ = $4;}
        ;

y_Diameter_LinearValueType :
          DiameterSTART y_LinearValueType DiameterEND
          {$$ = $2;}
        ;

y_Diameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DiameterSTART y_LinearValueType DiameterEND
          {$$ = $2;}
        ;

y_Diameter_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DiameterSTART y_MeasuredLinearValueType DiameterEND
          {$$ = $2;}
        ;

y_Diameter_XmlDouble :
          DiameterSTART ENDITEM {yyReadData = 1;} y_XmlDouble DiameterEND
          {$$ = $4;}
        ;

y_DiametricalSize_LinearValueType :
          DiametricalSizeSTART y_LinearValueType DiametricalSizeEND
          {$$ = $2;}
        ;

y_DiametricalZone_CoaxialityDiametricalZoneType :
          DiametricalZoneSTART y_CoaxialityDiametricalZoneType ENDWHOLEITEM
          {$$ = $2;}
        ;

y_DiametricalZone_ConcentricityDiametricalZoneType :
          DiametricalZoneSTART y_ConcentricityDiametricalZoneType
          ENDWHOLEITEM
          {$$ = $2;}
        ;

y_DiametricalZone_OrientationDiametricalZoneType :
          DiametricalZoneSTART ENDWHOLEITEM
          {$$ = new OrientationDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        | DiametricalZoneSTART y_OrientationDiametricalZoneType
          DiametricalZoneEND
          {$$ = $2;}
        ;

y_DiametricalZone_PositionDiametricalZoneType :
          DiametricalZoneSTART ENDWHOLEITEM
          {$$ = new PositionDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        | DiametricalZoneSTART y_PositionDiametricalZoneType
          DiametricalZoneEND
          {$$ = $2;}
        ;

y_DiametricalZone_StraightnessDiametricalZoneType :
          DiametricalZoneSTART y_StraightnessDiametricalZoneType
          ENDWHOLEITEM
          {$$ = $2;}
        ;

y_Difference_StatsMeasuredDecimalType :
          DifferenceSTART y_StatsMeasuredDecimalType DifferenceEND
          {$$ = $2;
           $$->printElement = "Difference";
          }
        ;

y_DifferentialVariableReluctanceTransducerSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_Hysteresis_LinearValueType_0
          y_FrequencyResponse_UserDefinedUnitValueType_0
          y_TemperatureStability_UserDefinedUnitValueType_0
          y_HousingMaterial_XmlString_0
          {$$ = new DifferentialVariableReluctanceTransducerSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DifferentialVariableReluctanceTransducerSensorType attributes");
             }
           delete $1;
          }
        ;

y_DigitalDrawingType :
          y_LiztAttributePair ENDITEM y_Name_XmlString y_File_FileType
          y_Application_ApplicationType_0 y_Author_AuthorType_0
          y_ApplicationSource_ApplicationType_0 y_Description_XmlString_0
          y_Entities_EntitiesExternalType_0
          {$$ = new DigitalDrawingType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DigitalDrawingType attributes");
             }
           delete $1;
          }
        ;

y_DigitalDrawing_DigitalDrawingType :
          DigitalDrawingSTART y_DigitalDrawingType DigitalDrawingEND
          {$$ = $2;}
        ;

y_DigitalModelFormatEnumType :
          DATASTRING
          {$$ = new DigitalModelFormatEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DigitalModelFormatEnumType value");
          }
        ;

y_DigitalModelFormatEnum_DigitalModelFormatEnumType :
          DigitalModelFormatEnumSTART ENDITEM {yyReadData = 1;}
          y_DigitalModelFormatEnumType DigitalModelFormatEnumEND
          {$$ = $4;}
        ;

y_DigitalModelFormatType :
          ENDITEM y_DigitalModelFormatTypeChoicePair
          {$$ = new DigitalModelFormatType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_DigitalModelFormatTypeChoicePair :
          y_DigitalModelFormatEnum_DigitalModelFormatEnumType
          {$$ = new DigitalModelFormatTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DigitalModelFormatTypeType = DigitalModelFormatTypeChoicePair::DigitalModelFormatEnumE;
           $$->DigitalModelFormatTypeValue.DigitalModelFormatEnum = $1;
          }
        | y_OtherDigitalModelFormat_XmlString
          {$$ = new DigitalModelFormatTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DigitalModelFormatTypeType = DigitalModelFormatTypeChoicePair::OtherDigitalModelFormatE;
           $$->DigitalModelFormatTypeValue.OtherDigitalModelFormat = $1;
          }
        ;

y_DigitalModelType :
          y_LiztAttributePair ENDITEM y_Name_XmlString y_File_FileType
          y_Application_ApplicationType_0 y_Author_AuthorType_0
          y_ApplicationSource_ApplicationType_0 y_Description_XmlString_0
          y_Units_OtherUnitsType_0 y_GDT_GDTEnumType_0
          y_Topology_TopologyEnumType_0 y_Entities_EntitiesExternalType_0
          {$$ = new DigitalModelType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DigitalModelType attributes");
             }
           delete $1;
          }
        ;

y_DigitalModel_DigitalModelType :
          DigitalModelSTART y_DigitalModelType DigitalModelEND
          {$$ = $2;}
        ;

y_DimensionCountEnumType :
          DATASTRING
          {$$ = new DimensionCountEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DimensionCountEnumType value");
          }
        ;

y_DimensionDeterminationEnumType :
          DATASTRING
          {$$ = new DimensionDeterminationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DimensionDeterminationEnumType value");
          }
        ;

y_DimensionModifierEnumType :
          DATASTRING
          {$$ = new DimensionModifierEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DimensionModifierEnumType value");
          }
        ;

y_DimensionModifiersType :
          ENDITEM y_DeterminationModifier_DimensionDeterminationEnumType_0
          y_SignificanceModifier_SignificantDimensionEnumType_0
          y_SectionModifier_SectionModifierEnumType_0
          {$$ = new DimensionModifiersType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_DimensionModifiers_DimensionModifiersType_0 :
          /* empty */
          {$$ = 0;}
        | DimensionModifiersSTART ENDWHOLEITEM
          {$$ = new DimensionModifiersType();
           yyUnrefMap[$$] = $$;
          }
        | DimensionModifiersSTART y_DimensionModifiersType
          DimensionModifiersEND
          {$$ = $2;}
        ;

y_DimensionType_DimensionModifierEnumType_0 :
          /* empty */
          {$$ = 0;}
        | DimensionTypeSTART ENDITEM {yyReadData = 1;}
          y_DimensionModifierEnumType DimensionTypeEND
          {$$ = $4;}
        ;

y_DimensionalCharacteristicIds_ArrayReferenceFullType :
          DimensionalCharacteristicIdsSTART y_ArrayReferenceFullType
          DimensionalCharacteristicIdsEND
          {$$ = $2;}
        ;

y_DimensionalCharacteristicValueLimits_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | DimensionalCharacteristicValueLimitsSTART ENDITEM {yyReadData =
          1;} y_XmlBoolean DimensionalCharacteristicValueLimitsEND
          {$$ = $4;}
        ;

y_DimensionalCharacteristicValueTarget_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | DimensionalCharacteristicValueTargetSTART ENDITEM {yyReadData =
          1;} y_XmlBoolean DimensionalCharacteristicValueTargetEND
          {$$ = $4;}
        ;

y_Dimensionality_DimensionCountEnumType_0 :
          /* empty */
          {$$ = 0;}
        | DimensionalitySTART ENDITEM {yyReadData = 1;}
          y_DimensionCountEnumType DimensionalityEND
          {$$ = $4;}
        ;

y_DirBeg_UnitVector2dSimpleType :
          DirBegSTART y_UnitVector2dSimpleType DirBegEND
          {$$ = $2;
           $2->UnitVector2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad UnitVector2dSimpleType value");
          }
        ;

y_DirBeg_UnitVectorSimpleType :
          DirBegSTART y_UnitVectorSimpleType DirBegEND
          {$$ = $2;
           $2->UnitVectorSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad UnitVectorSimpleType value");
          }
        ;

y_DirBeg_UnitVectorType :
          DirBegSTART y_UnitVectorType DirBegEND
          {$$ = $2;}
        ;

y_DirMeridianPrime_UnitVectorType :
          DirMeridianPrimeSTART y_UnitVectorType DirMeridianPrimeEND
          {$$ = $2;}
        ;

y_DirNorthPole_UnitVectorType :
          DirNorthPoleSTART y_UnitVectorType DirNorthPoleEND
          {$$ = $2;}
        ;

y_DirU_VectorSimpleType :
          DirUSTART y_VectorSimpleType DirUEND
          {$$ = $2;
           $2->VectorSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad VectorSimpleType value");
          }
        ;

y_DirV_VectorSimpleType :
          DirVSTART y_VectorSimpleType DirVEND
          {$$ = $2;
           $2->VectorSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad VectorSimpleType value");
          }
        ;

y_DirectionCurveId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | DirectionCurveIdSTART y_QIFReferenceFullType DirectionCurveIdEND
          {$$ = $2;}
        ;

y_DirectionFeatureEnum_ModifyingPlaneEnumType :
          DirectionFeatureEnumSTART ENDITEM {yyReadData = 1;}
          y_ModifyingPlaneEnumType DirectionFeatureEnumEND
          {$$ = $4;}
        ;

y_DirectionFeatureType :
          ENDITEM y_DirectionFeatureEnum_ModifyingPlaneEnumType
          y_DatumDefinitionId_QIFReferenceFullType
          {$$ = new DirectionFeatureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_DirectionFeature_DirectionFeatureType_0 :
          /* empty */
          {$$ = 0;}
        | DirectionFeatureSTART y_DirectionFeatureType DirectionFeatureEND
          {$$ = $2;}
        ;

y_DirectionOfLay_RoughnessLayEnumType_0 :
          /* empty */
          {$$ = 0;}
        | DirectionOfLaySTART ENDITEM {yyReadData = 1;}
          y_RoughnessLayEnumType DirectionOfLayEND
          {$$ = $4;}
        ;

y_Direction_AngularCoordinateDirectionEnumType :
          DirectionSTART ENDITEM {yyReadData = 1;}
          y_AngularCoordinateDirectionEnumType DirectionEND
          {$$ = $4;}
        ;

y_Direction_LinearCoordinateDirectionEnumType :
          DirectionSTART ENDITEM {yyReadData = 1;}
          y_LinearCoordinateDirectionEnumType DirectionEND
          {$$ = $4;}
        ;

y_Direction_MeasuredUnitVectorType :
          DirectionSTART y_MeasuredUnitVectorType DirectionEND
          {$$ = $2;}
        ;

y_Direction_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | DirectionSTART y_MeasuredUnitVectorType DirectionEND
          {$$ = $2;}
        ;

y_Direction_UnitVectorType :
          DirectionSTART y_UnitVectorType DirectionEND
          {$$ = $2;}
        ;

y_Direction_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | DirectionSTART y_UnitVectorType DirectionEND
          {$$ = $2;}
        ;

y_DirectionalOffs_1014_DirectionalOffs_1014_Type :
          y_DirectionalOffs_1014_Type
          {$$ = $1;}
        ;

y_DirectionalOffs_1014_Type :
          y_DirectionalOffs_1014_TypeChoicePair
          {$$ = new DirectionalOffs_1014_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_DirectionalOffs_1014_TypeChoicePair :
          y_FeatureDirection_BaseFeatureType
          {$$ = new DirectionalOffs_1014_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DirectionalOffs_1014_TypeType = DirectionalOffs_1014_TypeChoicePair::FeatureDirectionE;
           $$->DirectionalOffs_1014_TypeValue.FeatureDirection = $1;
          }
        | y_NominalDirection_UnitVectorType
          {$$ = new DirectionalOffs_1014_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DirectionalOffs_1014_TypeType = DirectionalOffs_1014_TypeChoicePair::NominalDirectionE;
           $$->DirectionalOffs_1014_TypeValue.NominalDirection = $1;
          }
        ;

y_DirectionalOffsetType :
          ENDITEM y_Offset_LinearValueType
          y_DirectionalOffs_1014_DirectionalOffs_1014_Type
          {$$ = new DirectionalOffsetType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_DirectionalOffset_DirectionalOffsetType :
          DirectionalOffsetSTART y_DirectionalOffsetType
          DirectionalOffsetEND
          {$$ = $2;}
        ;

y_DirectionsBinary_ArrayBinaryType :
          DirectionsBinarySTART y_ArrayBinaryType DirectionsBinaryEND
          {$$ = $2;}
        ;

y_Directions_ArrayUnitVectorType :
          DirectionsSTART y_ArrayUnitVectorType DirectionsEND
          {$$ = $2;}
        ;

y_DisplayStyleFormEnumType :
          DATASTRING
          {$$ = new DisplayStyleFormEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DisplayStyleFormEnumType value");
          }
        ;

y_DisplayStyleGroupType :
          ENDITEM y_Mode_DisplayStyleModeType
          y_ComponentIds_ArrayReferenceFullType_0
          y_BodyIds_ArrayReferenceFullType_0
          {$$ = new DisplayStyleGroupType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_DisplayStyleGroup_DisplayStyleGroupType :
          DisplayStyleGroupSTART y_DisplayStyleGroupType
          DisplayStyleGroupEND
          {$$ = $2;}
        ;

y_DisplayStyleGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztDisplayStyleGroup_DisplayStyleGroupType_1_u
          {$$ = new DisplayStyleGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DisplayStyleGroupsType attributes");
             }
           delete $1;
          }
        ;

y_DisplayStyleGroups_DisplayStyleGroupsType_0 :
          /* empty */
          {$$ = 0;}
        | DisplayStyleGroupsSTART y_DisplayStyleGroupsType
          DisplayStyleGroupsEND
          {$$ = $2;}
        ;

y_DisplayStyleId_QIFReferenceActiveType_0 :
          /* empty */
          {$$ = 0;}
        | DisplayStyleIdSTART y_QIFReferenceActiveType DisplayStyleIdEND
          {$$ = $2;}
        ;

y_DisplayStyleModeType :
          ENDITEM y_Form_DisplayStyleFormEnumType y_Color_ColorType_0
          y_Transparency_TransparencyType_0
          {$$ = new DisplayStyleModeType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_DisplayStyleSetType :
          y_LiztAttributePair ENDITEM
          y_LiztDisplayStyle_DisplayStyleType_1_u
          {$$ = new DisplayStyleSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DisplayStyleSetType attributes");
             }
           delete $1;
          }
        ;

y_DisplayStyleSet_DisplayStyleSetType_0 :
          /* empty */
          {$$ = 0;}
        | DisplayStyleSetSTART y_DisplayStyleSetType DisplayStyleSetEND
          {$$ = $2;}
        ;

y_DisplayStyleType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Mode_DisplayStyleModeType
          y_DisplayStyleGroups_DisplayStyleGroupsType_0
          {$$ = new DisplayStyleType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DisplayStyleType attributes");
             }
           delete $1;
          }
        ;

y_DisplayStyle_DisplayStyleType :
          DisplayStyleSTART y_DisplayStyleType DisplayStyleEND
          {$$ = $2;
           $$->printElement = "DisplayStyle";
          }
        ;

y_DistanceAccuracy_LinearErrorType_0 :
          /* empty */
          {$$ = 0;}
        | DistanceAccuracySTART y_LinearErrorType DistanceAccuracyEND
          {$$ = $2;}
        ;

y_DistanceBetweenAnalysisModeEnumType :
          DATASTRING
          {$$ = new DistanceBetweenAnalysisModeEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DistanceBetweenAnalysisModeEnumType value");
          }
        ;

y_DistanceBetweenCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new DistanceBetweenCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceBetweenCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_DistanceBetweenCharacteristicDefinition_DistanceBetweenCharacteristicDefinitionType :
          DistanceBetweenCharacteristicDefinitionSTART
          y_DistanceBetweenCharacteristicDefinitionType
          DistanceBetweenCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "DistanceBetweenCharacteristicDefinition";
          }
        ;

y_DistanceBetweenCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new DistanceBetweenCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceBetweenCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_DistanceBetweenCharacteristicItem_DistanceBetweenCharacteristicItemType :
          DistanceBetweenCharacteristicItemSTART
          y_DistanceBetweenCharacteristicItemType
          DistanceBetweenCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "DistanceBetweenCharacteristicItem";
          }
        ;

y_DistanceBetweenCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_AnalysisVector_MeasuredUnitVectorType_0
          {$$ = new DistanceBetweenCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceBetweenCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_DistanceBetweenCharacteristicMeasurement_DistanceBetweenCharacteristicMeasurementType :
          DistanceBetweenCharacteristicMeasurementSTART
          y_DistanceBetweenCharacteristicMeasurementType
          DistanceBetweenCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "DistanceBetweenCharacteristicMeasurement";
          }
        ;

y_DistanceBetweenCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          y_FeatureNominalPairs_ArrayPairReferenceFullType_0
          y_AnalysisVector_UnitVectorType_0
          y_AnalysisMode_DistanceBetweenAnalysisModeEnumType
          y_MeasurementDirective_MeasurementDirectiveType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new DistanceBetweenCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceBetweenCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_DistanceBetweenCharacteristicNominal_DistanceBetweenCharacteristicNominalType :
          DistanceBetweenCharacteristicNominalSTART
          y_DistanceBetweenCharacteristicNominalType
          DistanceBetweenCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "DistanceBetweenCharacteristicNominal";
          }
        ;

y_DistanceBetweenCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new DistanceBetweenCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_DistanceBetweenCharacteristicStats_DistanceBetweenCharacteristicStatsEvalType :
          DistanceBetweenCharacteristicStatsSTART
          y_DistanceBetweenCharacteristicStatsEvalType
          DistanceBetweenCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "DistanceBetweenCharacteristicStats";
          }
        ;

y_DistanceFromCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new DistanceFromCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceFromCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_DistanceFromCharacteristicDefinition_DistanceFromCharacteristicDefinitionType :
          DistanceFromCharacteristicDefinitionSTART
          y_DistanceFromCharacteristicDefinitionType
          DistanceFromCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "DistanceFromCharacteristicDefinition";
          }
        ;

y_DistanceFromCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new DistanceFromCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceFromCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_DistanceFromCharacteristicItem_DistanceFromCharacteristicItemType :
          DistanceFromCharacteristicItemSTART
          y_DistanceFromCharacteristicItemType
          DistanceFromCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "DistanceFromCharacteristicItem";
          }
        ;

y_DistanceFromCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_AnalysisVector_MeasuredUnitVectorType_0
          {$$ = new DistanceFromCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceFromCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_DistanceFromCharacteristicMeasurement_DistanceFromCharacteristicMeasurementType :
          DistanceFromCharacteristicMeasurementSTART
          y_DistanceFromCharacteristicMeasurementType
          DistanceFromCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "DistanceFromCharacteristicMeasurement";
          }
        ;

y_DistanceFromCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          y_OriginReference_OriginReferenceType_0
          y_AnalysisVector_UnitVectorType_0
          y_AnalysisMode_DistanceBetweenAnalysisModeEnumType
          y_MeasurementDirective_MeasurementDirectiveType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new DistanceFromCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DistanceFromCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_DistanceFromCharacteristicNominal_DistanceFromCharacteristicNominalType :
          DistanceFromCharacteristicNominalSTART
          y_DistanceFromCharacteristicNominalType
          DistanceFromCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "DistanceFromCharacteristicNominal";
          }
        ;

y_DistanceFromCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new DistanceFromCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_DistanceFromCharacteristicStats_DistanceFromCharacteristicStatsEvalType :
          DistanceFromCharacteristicStatsSTART
          y_DistanceFromCharacteristicStatsEvalType
          DistanceFromCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "DistanceFromCharacteristicStats";
          }
        ;

y_DistanceVariable_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | DistanceVariableSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          DistanceVariableEND
          {$$ = $4;}
        ;

y_Distance_LinearValueType :
          DistanceSTART y_LinearValueType DistanceEND
          {$$ = $2;}
        ;

y_Distance_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | DistanceSTART y_MeasuredLinearValueType DistanceEND
          {$$ = $2;}
        ;

y_Distance_XmlDouble :
          DistanceSTART ENDITEM {yyReadData = 1;} y_XmlDouble DistanceEND
          {$$ = $4;}
        ;

y_DistributionTransformationEnumType :
          DATASTRING
          {$$ = new DistributionTransformationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DistributionTransformationEnumType value");
          }
        ;

y_DistributionTransformationEnum_DistributionTransformationEnumType :
          DistributionTransformationEnumSTART ENDITEM {yyReadData = 1;}
          y_DistributionTransformationEnumType
          DistributionTransformationEnumEND
          {$$ = $4;}
        ;

y_DistributionTransformationType :
          ENDITEM y_DistributionTransformationTypeChoicePair
          {$$ = new DistributionTransformationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_DistributionTransformationTypeChoicePair :
          y_BoxCoxTransformation_XmlDecimal
          {$$ = new DistributionTransformationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DistributionTransformationTypeType = DistributionTransformationTypeChoicePair::BoxCoxTransformationE;
           $$->DistributionTransformationTypeValue.BoxCoxTransformation = $1;
          }
        | y_DistributionTransformationEnum_DistributionTransformationEnumType
          {$$ = new DistributionTransformationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DistributionTransformationTypeType = DistributionTransformationTypeChoicePair::DistributionTransformationEnumE;
           $$->DistributionTransformationTypeValue.DistributionTransformationEnum = $1;
          }
        | y_OtherDistributionTransformation_XmlString
          {$$ = new DistributionTransformationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->DistributionTransformationTypeType = DistributionTransformationTypeChoicePair::OtherDistributionTransformationE;
           $$->DistributionTransformationTypeValue.OtherDistributionTransformation = $1;
          }
        ;

y_DistributionTransformation_DistributionTransformationType_0 :
          /* empty */
          {$$ = 0;}
        | DistributionTransformationSTART y_DistributionTransformationType
          DistributionTransformationEND
          {$$ = $2;}
        ;

y_DividedByType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_2_Check
          {$$ = new DividedByType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_DividedBy_DividedByType :
          DividedBySTART y_DividedByType DividedByEND
          {$$ = $2;
           $$->printElement = "DividedBy";
          }
        ;

y_DocumentFileInstructionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ExternalFile_ExternalFileReferenceType
          {$$ = new DocumentFileInstructionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DocumentFileInstructionType attributes");
             }
           delete $1;
          }
        ;

y_DocumentFileInstruction_DocumentFileInstructionType :
          DocumentFileInstructionSTART y_DocumentFileInstructionType
          DocumentFileInstructionEND
          {$$ = $2;
           $$->printElement = "DocumentFileInstruction";
          }
        ;

y_DocumentQPId_QPIdReferenceType :
          DocumentQPIdSTART ENDITEM {yyReadData = 1;} y_QPIdReferenceType
          DocumentQPIdEND
          {$$ = $4;}
        ;

y_DomainAngle_AngleRangeType :
          DomainAngleSTART y_AngleRangeType DomainAngleEND
          {$$ = $2;}
        ;

y_DomainLatitude_AngleRangeType :
          DomainLatitudeSTART y_AngleRangeType DomainLatitudeEND
          {$$ = $2;}
        ;

y_DomainLinearUnit_XmlToken :
          DomainLinearUnitSTART ENDITEM {yyReadData = 1;} y_XmlToken
          DomainLinearUnitEND
          {$$ = $4;}
        ;

y_DomainLongitude_AngleRangeType :
          DomainLongitudeSTART y_AngleRangeType DomainLongitudeEND
          {$$ = $2;}
        ;

y_DomainValues_ListDoubleType :
          DomainValuesSTART y_ListDoubleType DomainValuesEND
          {$$ = $2;}
        ;

y_DoublePositiveType :
          DATASTRING
          {$$ = new DoublePositiveType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DoublePositiveType value");
          }
        ;

y_DraftAngle_AngularValueType :
          DraftAngleSTART y_AngularValueType DraftAngleEND
          {$$ = $2;}
        ;

y_DraftAngle_MeasuredAngularValueType :
          DraftAngleSTART y_MeasuredAngularValueType DraftAngleEND
          {$$ = $2;}
        ;

y_DraftVector_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | DraftVectorSTART y_UnitVectorType DraftVectorEND
          {$$ = $2;}
        ;

y_DrawWireSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_MaxWireExtensionForce_ForceValueType_0
          y_MinWireRetractionForce_ForceValueType_0
          y_MaxWireAcceleration_XmlString_0
          {$$ = new DrawWireSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad DrawWireSensorType attributes");
             }
           delete $1;
          }
        ;

y_DrawWireSensor_DrawWireSensorType :
          DrawWireSensorSTART y_DrawWireSensorType DrawWireSensorEND
          {$$ = $2;
           $$->printElement = "DrawWireSensor";
          }
        ;

y_DrawingId_QIFReferenceFullType :
          DrawingIdSTART y_QIFReferenceFullType DrawingIdEND
          {$$ = $2;}
        ;

y_DrawingNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | DrawingNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          DrawingNumberEND
          {$$ = $4;}
        ;

y_DrawingZone_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | DrawingZoneSTART ENDITEM {yyReadData = 1;} y_XmlString
          DrawingZoneEND
          {$$ = $4;}
        ;

y_DualNestingIndexFilterSymbolEnumType :
          DATASTRING
          {$$ = new DualNestingIndexFilterSymbolEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad DualNestingIndexFilterSymbolEnumType value");
          }
        ;

y_DualNestingIndexFilterType :
          ENDITEM y_Symbol_DualNestingIndexFilterSymbolEnumType
          y_FirstNestingIndex_LinearValueType_0
          y_SecondNestingIndex_LinearValueType_0
          y_SecondDirectionFirstNestingIndex_LinearValueType_0
          y_SecondDirectionSecondNestingIndex_LinearValueType_0
          {$$ = new DualNestingIndexFilterType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_DualNestingIndexFilter_DualNestingIndexFilterType :
          DualNestingIndexFilterSTART y_DualNestingIndexFilterType
          DualNestingIndexFilterEND
          {$$ = $2;}
        ;

y_EachElement_XmlBoolean :
          EachElementSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          EachElementEND
          {$$ = $4;}
        ;

y_EachRadialElement_XmlBoolean :
          EachRadialElementSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          EachRadialElementEND
          {$$ = $4;}
        ;

y_EarlierVersion_VersionReferenceType :
          EarlierVersionSTART ENDWHOLEITEM
          {$$ = new VersionReferenceType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "EarlierVersion";
          }
        | EarlierVersionSTART y_VersionReferenceType EarlierVersionEND
          {$$ = $2;
           $$->printElement = "EarlierVersion";
          }
        ;

y_EddyCurrentSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MaxPressureFront_PressureValueType_0
          y_MaxPressureSide_PressureValueType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_TemperatureStability_UserDefinedUnitValueType_0
          y_OffsetDistance_LinearValueType_0
          y_FrequencyResponse_UserDefinedUnitValueType_0
          y_MinPowerSupplyVoltage_UserDefinedUnitValueType_0
          y_MaxPowerSupplyVoltage_UserDefinedUnitValueType_0
          y_HousingMaterial_XmlString_0
          y_MeasurementObjectMaterial_XmlString_0
          {$$ = new EddyCurrentSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EddyCurrentSensorType attributes");
             }
           delete $1;
          }
        ;

y_EddyCurrentSensor_EddyCurrentSensorType :
          EddyCurrentSensorSTART y_EddyCurrentSensorType
          EddyCurrentSensorEND
          {$$ = $2;
           $$->printElement = "EddyCurrentSensor";
          }
        ;

y_EdgeIds_ArrayReferenceFullType :
          EdgeIdsSTART y_ArrayReferenceFullType EdgeIdsEND
          {$$ = $2;}
        ;

y_EdgeIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | EdgeIdsSTART y_ArrayReferenceType EdgeIdsEND
          {$$ = $2;}
        ;

y_EdgeOrientedType :
          ENDITEM y_Id_QIFReferenceType
          {$$ = new EdgeOrientedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM y_Id_QIFReferenceType
          {$$ = new EdgeOrientedType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EdgeOrientedType attributes");
             }
           delete $1;
          }
        ;

y_EdgeOriented_EdgeOrientedType :
          EdgeOrientedSTART y_EdgeOrientedType EdgeOrientedEND
          {$$ = $2;
           $$->printElement = "EdgeOriented";
          }
        ;

y_EdgePointCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new EdgePointCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EdgePointCheckedFeatureType :
          ENDITEM y_CheckDetails_EdgePointCheckedType_0
          {$$ = new EdgePointCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EdgePointCheckedType :
          ENDITEM y_EdgePointCheckedTypeChoicePair
          {$$ = new EdgePointCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EdgePointCheckedTypeChoicePair :
          y_Constructed_EdgePointConstructionMethodType
          {$$ = new EdgePointCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointCheckedTypeType = EdgePointCheckedTypeChoicePair::ConstructedE;
           $$->EdgePointCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new EdgePointCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointCheckedTypeType = EdgePointCheckedTypeChoicePair::MeasuredE;
           $$->EdgePointCheckedTypeValue.Measured = $1;
          }
        ;

y_EdgePointConstructionMethodType :
          ENDITEM y_EdgePointConstructionMethodTypeChoicePair
          {$$ = new EdgePointConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EdgePointConstructionMethodTypeChoicePair :
          y_Cast_EdgePointCastType
          {$$ = new EdgePointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointConstructionMethodTypeType = EdgePointConstructionMethodTypeChoicePair::CastE;
           $$->EdgePointConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_EdgePointCopyType
          {$$ = new EdgePointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointConstructionMethodTypeType = EdgePointConstructionMethodTypeChoicePair::CopyE;
           $$->EdgePointConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_EdgePointFromScanType
          {$$ = new EdgePointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointConstructionMethodTypeType = EdgePointConstructionMethodTypeChoicePair::FromScanE;
           $$->EdgePointConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Transform_EdgePointTransformType
          {$$ = new EdgePointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointConstructionMethodTypeType = EdgePointConstructionMethodTypeChoicePair::TransformE;
           $$->EdgePointConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_EdgePointCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseEdgePoint_BaseFeatureType
          {$$ = new EdgePointCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EdgePointFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          {$$ = new EdgePointFeatureDefinitionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EdgePointFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_EdgePointFeatureDefinition_EdgePointFeatureDefinitionType :
          EdgePointFeatureDefinitionSTART y_EdgePointFeatureDefinitionType
          EdgePointFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "EdgePointFeatureDefinition";
          }
        ;

y_EdgePointFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_EdgePointMeasurementDeterminationType
          {$$ = new EdgePointFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EdgePointFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_EdgePointFeatureItem_EdgePointFeatureItemType :
          EdgePointFeatureItemSTART y_EdgePointFeatureItemType
          EdgePointFeatureItemEND
          {$$ = $2;
           $$->printElement = "EdgePointFeatureItem";
          }
        ;

y_EdgePointFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0 y_Normal_MeasuredUnitVectorType_0
          y_AdjacentNormal_MeasuredUnitVectorType_0
          {$$ = new EdgePointFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EdgePointFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_EdgePointFeatureMeasurement_EdgePointFeatureMeasurementType :
          EdgePointFeatureMeasurementSTART
          y_EdgePointFeatureMeasurementType EdgePointFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "EdgePointFeatureMeasurement";
          }
        | EdgePointFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new EdgePointFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "EdgePointFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad EdgePointFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_EdgePointFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_PointFeatureNom_1124_PointFeatureNom_1124_Type_0
          y_Location_PointType y_Normal_UnitVectorType
          y_AdjacentNormal_UnitVectorType_0
          y_Constructed_EdgePointConstructionMethodType_0
          {$$ = new EdgePointFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EdgePointFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_EdgePointFeatureNominal_EdgePointFeatureNominalType :
          EdgePointFeatureNominalSTART y_EdgePointFeatureNominalType
          EdgePointFeatureNominalEND
          {$$ = $2;
           $$->printElement = "EdgePointFeatureNominal";
          }
        ;

y_EdgePointFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_PatchRadius_LinearValueType y_Distance_LinearValueType
          y_Depth_LinearValueType y_RetrievalMethod_RetrievalMethodEnumType
          {$$ = new EdgePointFromScanType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_EdgePointMeasurementDeterminationType :
          ENDITEM y_EdgePointMeasurementDeterminationTypeChoicePair
          {$$ = new EdgePointMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EdgePointMeasurementDeterminationTypeChoicePair :
          y_Checked_EdgePointCheckedFeatureType
          {$$ = new EdgePointMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointMeasurementDeterminationTypeType = EdgePointMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->EdgePointMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new EdgePointMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EdgePointMeasurementDeterminationTypeType = EdgePointMeasurementDeterminationTypeChoicePair::SetE;
           $$->EdgePointMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_EdgePointTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseEdgePoint_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new EdgePointTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EdgePoints_ValidationPointsType_0 :
          /* empty */
          {$$ = 0;}
        | EdgePointsSTART y_ValidationPointsType EdgePointsEND
          {$$ = $2;}
        ;

y_EdgeSetType :
          y_LiztAttributePair ENDITEM y_LiztEdge_EdgeType_1_u
          {$$ = new EdgeSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EdgeSetType attributes");
             }
           delete $1;
          }
        ;

y_EdgeSet_EdgeSetType_0 :
          /* empty */
          {$$ = 0;}
        | EdgeSetSTART y_EdgeSetType EdgeSetEND
          {$$ = $2;}
        ;

y_EdgeType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Validation_ValidationEdgeType_0 y_Curve_ElementReferenceType
          y_VertexBeg_ElementReferenceType y_VertexEnd_ElementReferenceType
          {$$ = new EdgeType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EdgeType attributes");
             }
           delete $1;
          }
        ;

y_Edge_EdgeOrientedType :
          EdgeSTART y_EdgeOrientedType EdgeEND
          {$$ = $2;
           $$->printElement = "Edge";
          }
        ;

y_Edge_EdgeType :
          EdgeSTART y_EdgeType EdgeEND
          {$$ = $2;
           $$->printElement = "Edge";
          }
        ;

y_EdgesBinary_ArrayBinaryType :
          EdgesBinarySTART y_ArrayBinaryType EdgesBinaryEND
          {$$ = $2;}
        ;

y_Edges_ArrayI2Type :
          EdgesSTART y_ArrayI2Type EdgesEND
          {$$ = $2;}
        ;

y_Edges_SectionEdgesType :
          EdgesSTART y_SectionEdgesType EdgesEND
          {$$ = $2;}
        ;

y_EffectiveCartesianWorkingVolumeType :
          ENDITEM y_MinPoint_PointType y_MaxPoint_PointType
          {$$ = new EffectiveCartesianWorkingVolumeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EffectiveCartesianWorkingVolume_EffectiveCartesianWorkingVolumeType :
          EffectiveCartesianWorkingVolumeSTART
          y_EffectiveCartesianWorkingVolumeType
          EffectiveCartesianWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "EffectiveCartesianWorkingVolume";
          }
        ;

y_EffectiveClosedShellSetWorkingVolumeType :
          ENDITEM y_WorkingClosedShellSet_ClosedShellSetType
          {$$ = new EffectiveClosedShellSetWorkingVolumeType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EffectiveClosedShellSetWorkingVolume_EffectiveClosedShellSetWorkingVolumeType :
          EffectiveClosedShellSetWorkingVolumeSTART
          y_EffectiveClosedShellSetWorkingVolumeType
          EffectiveClosedShellSetWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "EffectiveClosedShellSetWorkingVolume";
          }
        ;

y_EffectiveCylindricalWorkingVolumeType :
          ENDITEM y_MinRadius_LinearValueType y_MaxRadius_LinearValueType
          y_MinAzimuthalAxisAngle_AngularValueType
          y_MaxAzimuthalAxisAngle_AngularValueType
          y_MinZAxis_LinearValueType y_MaxZAxis_LinearValueType
          {$$ = new EffectiveCylindricalWorkingVolumeType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_EffectiveCylindricalWorkingVolume_EffectiveCylindricalWorkingVolumeType :
          EffectiveCylindricalWorkingVolumeSTART
          y_EffectiveCylindricalWorkingVolumeType
          EffectiveCylindricalWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "EffectiveCylindricalWorkingVolume";
          }
        ;

y_EffectiveDiameterOfObjective_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | EffectiveDiameterOfObjectiveSTART y_LinearValueType
          EffectiveDiameterOfObjectiveEND
          {$$ = $2;}
        ;

y_EffectiveDiameterPerformanceTestType :
          ENDITEM y_AverageDiameter_XmlDecimal
          y_StandardDeviation_XmlDecimal
          {$$ = new EffectiveDiameterPerformanceTestType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EffectiveDiameterPerformanceTest_EffectiveDiameterPerformanceTestType_0 :
          /* empty */
          {$$ = 0;}
        | EffectiveDiameterPerformanceTestSTART
          y_EffectiveDiameterPerformanceTestType
          EffectiveDiameterPerformanceTestEND
          {$$ = $2;}
        ;

y_EffectiveNumber_StatsNonNegativeIntegerType :
          EffectiveNumberSTART y_StatsNonNegativeIntegerType
          EffectiveNumberEND
          {$$ = $2;
           $$->printElement = "EffectiveNumber";
          }
        ;

y_EffectiveScreenDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | EffectiveScreenDiameterSTART y_LinearValueType
          EffectiveScreenDiameterEND
          {$$ = $2;}
        ;

y_EffectiveSphericalWorkingVolumeType :
          ENDITEM y_MinRadialAxis_LinearValueType
          y_MaxRadialAxis_LinearValueType
          y_MinAzimuthalAxisAngle_AngularValueType
          y_MaxAzimuthalAxisAngle_AngularValueType
          y_MinPolarAxis_AngularValueType y_MaxPolarAxis_AngularValueType
          {$$ = new EffectiveSphericalWorkingVolumeType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_EffectiveSphericalWorkingVolume_EffectiveSphericalWorkingVolumeType :
          EffectiveSphericalWorkingVolumeSTART
          y_EffectiveSphericalWorkingVolumeType
          EffectiveSphericalWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "EffectiveSphericalWorkingVolume";
          }
        ;

y_EffectiveUserDefinedWorkingVolumeType :
          ENDITEM y_UserDefinedWorkingVolumeId_QIFReferenceType
          y_MinFirstAxis_MeasuredDecimalType
          y_MaxFirstAxis_MeasuredDecimalType
          y_MinSecondAxis_MeasuredDecimalType
          y_MaxSecondAxis_MeasuredDecimalType
          y_MinThirdAxis_MeasuredDecimalType
          y_MaxThirdAxis_MeasuredDecimalType
          {$$ = new EffectiveUserDefinedWorkingVolumeType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_EffectiveUserDefinedWorkingVolume_EffectiveUserDefinedWorkingVolumeType :
          EffectiveUserDefinedWorkingVolumeSTART
          y_EffectiveUserDefinedWorkingVolumeType
          EffectiveUserDefinedWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "EffectiveUserDefinedWorkingVolume";
          }
        ;

y_EffectiveWorkingVolume_substituteType_0 :
          /* empty */
          {$$ = 0;}
        | y_EffectiveCartesianWorkingVolume_EffectiveCartesianWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EffectiveClosedShellSetWorkingVolume_EffectiveClosedShellSetWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EffectiveCylindricalWorkingVolume_EffectiveCylindricalWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EffectiveSphericalWorkingVolume_EffectiveSphericalWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EffectiveUserDefinedWorkingVolume_EffectiveUserDefinedWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ElectronicDescription_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ElectronicDescriptionSTART ENDITEM {yyReadData = 1;} y_XmlString
          ElectronicDescriptionEND
          {$$ = $4;}
        ;

y_ElectronicMailAddress_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | ElectronicMailAddressSTART ENDITEM {yyReadData = 1;} y_XmlToken
          ElectronicMailAddressEND
          {$$ = $4;}
        ;

y_ElementIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ElementIdsSTART y_ArrayReferenceFullType ElementIdsEND
          {$$ = $2;}
        ;

y_ElementReferenceFullType :
          ENDITEM y_Id_QIFReferenceFullType
          {$$ = new ElementReferenceFullType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElementReferenceType :
          ENDITEM y_Id_QIFReferenceType
          {$$ = new ElementReferenceType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElevationAngularAccuracy_AngularErrorType_0 :
          /* empty */
          {$$ = 0;}
        | ElevationAngularAccuracySTART y_AngularErrorType
          ElevationAngularAccuracyEND
          {$$ = $2;}
        ;

y_EllipseBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_5_u_Check
          {$$ = new EllipseBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipseBestFitType attributes");
             }
           delete $1;
          }
        ;

y_EllipseCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new EllipseCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EllipseCheckedFeatureType :
          ENDITEM y_CheckDetails_EllipseCheckedType_0
          {$$ = new EllipseCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipseCheckedType :
          ENDITEM y_EllipseCheckedTypeChoicePair
          {$$ = new EllipseCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipseCheckedTypeChoicePair :
          y_Constructed_EllipseConstructionMethodType
          {$$ = new EllipseCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseCheckedTypeType = EllipseCheckedTypeChoicePair::ConstructedE;
           $$->EllipseCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new EllipseCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseCheckedTypeType = EllipseCheckedTypeChoicePair::MeasuredE;
           $$->EllipseCheckedTypeValue.Measured = $1;
          }
        ;

y_EllipseConstructionMethodType :
          ENDITEM y_EllipseConstructionMethodTypeChoicePair
          {$$ = new EllipseConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipseConstructionMethodTypeChoicePair :
          y_BestFit_EllipseBestFitType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::BestFitE;
           $$->EllipseConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_EllipseCastType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::CastE;
           $$->EllipseConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_EllipseCopyType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::CopyE;
           $$->EllipseConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_EllipseFromScanType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::FromScanE;
           $$->EllipseConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_EllipseIntersectionType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::IntersectionE;
           $$->EllipseConstructionMethodTypeValue.Intersection = $1;
          }
        | y_Projection_EllipseProjectionType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::ProjectionE;
           $$->EllipseConstructionMethodTypeValue.Projection = $1;
          }
        | y_Recompensated_EllipseRecompType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::RecompensatedE;
           $$->EllipseConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_EllipseTransformType
          {$$ = new EllipseConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseConstructionMethodTypeType = EllipseConstructionMethodTypeChoicePair::TransformE;
           $$->EllipseConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_EllipseCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseEllipse_BaseFeatureType
          {$$ = new EllipseCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EllipseFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_MajorDiameter_LinearValueType y_MinorDiameter_LinearValueType
          {$$ = new EllipseFeatureDefinitionType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipseFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_EllipseFeatureDefinition_EllipseFeatureDefinitionType :
          EllipseFeatureDefinitionSTART y_EllipseFeatureDefinitionType
          EllipseFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "EllipseFeatureDefinition";
          }
        ;

y_EllipseFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_EllipseMeasurementDeterminationType
          {$$ = new EllipseFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipseFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_EllipseFeatureItem_EllipseFeatureItemType :
          EllipseFeatureItemSTART y_EllipseFeatureItemType
          EllipseFeatureItemEND
          {$$ = $2;
           $$->printElement = "EllipseFeatureItem";
          }
        ;

y_EllipseFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_Normal_MeasuredUnitVectorType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_MajorDiameter_MeasuredLinearValueType_0
          y_MinorDiameter_MeasuredLinearValueType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new EllipseFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipseFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_EllipseFeatureMeasurement_EllipseFeatureMeasurementType :
          EllipseFeatureMeasurementSTART y_EllipseFeatureMeasurementType
          EllipseFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "EllipseFeatureMeasurement";
          }
        | EllipseFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new EllipseFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "EllipseFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad EllipseFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_EllipseFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0 y_Axis_AxisType
          y_Normal_UnitVectorType y_Sweep_SweepType_0
          y_Constructed_EllipseConstructionMethodType_0
          {$$ = new EllipseFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipseFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_EllipseFeatureNominal_EllipseFeatureNominalType :
          EllipseFeatureNominalSTART y_EllipseFeatureNominalType
          EllipseFeatureNominalEND
          {$$ = $2;
           $$->printElement = "EllipseFeatureNominal";
          }
        ;

y_EllipseFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_Depth_LinearValueType
          {$$ = new EllipseFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_EllipseIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_IntersectionPlane_BaseFeatureType
          y_IntersectionFeature_BaseFeatureType
          {$$ = new EllipseIntersectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EllipseMeasurementDeterminationType :
          ENDITEM y_EllipseMeasurementDeterminationTypeChoicePair
          {$$ = new EllipseMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipseMeasurementDeterminationTypeChoicePair :
          y_Checked_EllipseCheckedFeatureType
          {$$ = new EllipseMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseMeasurementDeterminationTypeType = EllipseMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->EllipseMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new EllipseMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipseMeasurementDeterminationTypeType = EllipseMeasurementDeterminationTypeChoicePair::SetE;
           $$->EllipseMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_EllipsePointSamplingStrategyType :
          ENDITEM y_EllipsePointSamplingStrategyTypeChoicePair
          {$$ = new EllipsePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipsePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_ClosedCurvePointSamplingStrategyEnumType
          {$$ = new EllipsePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipsePointSamplingStrategyTypeType = EllipsePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->EllipsePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new EllipsePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipsePointSamplingStrategyTypeType = EllipsePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->EllipsePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_EllipseProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionFeature_BaseFeatureType
          y_ProjectionPlane_BaseFeatureType
          {$$ = new EllipseProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EllipseRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new EllipseRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EllipseTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseEllipse_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new EllipseTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EllipticalArcBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_5_u_Check
          {$$ = new EllipticalArcBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticalArcBestFitType attributes");
             }
           delete $1;
          }
        ;

y_EllipticalArcCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new EllipticalArcCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EllipticalArcCheckedFeatureType :
          ENDITEM y_CheckDetails_EllipticalArcCheckedType_0
          {$$ = new EllipticalArcCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipticalArcCheckedType :
          ENDITEM y_EllipticalArcCheckedTypeChoicePair
          {$$ = new EllipticalArcCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipticalArcCheckedTypeChoicePair :
          y_Constructed_EllipticalArcConstructionMethodType
          {$$ = new EllipticalArcCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcCheckedTypeType = EllipticalArcCheckedTypeChoicePair::ConstructedE;
           $$->EllipticalArcCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new EllipticalArcCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcCheckedTypeType = EllipticalArcCheckedTypeChoicePair::MeasuredE;
           $$->EllipticalArcCheckedTypeValue.Measured = $1;
          }
        ;

y_EllipticalArcConstructionMethodType :
          ENDITEM y_EllipticalArcConstructionMethodTypeChoicePair
          {$$ = new EllipticalArcConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipticalArcConstructionMethodTypeChoicePair :
          y_BestFit_EllipticalArcBestFitType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::BestFitE;
           $$->EllipticalArcConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_EllipticalArcCastType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::CastE;
           $$->EllipticalArcConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_EllipticalArcCopyType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::CopyE;
           $$->EllipticalArcConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_EllipticalArcFromScanType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::FromScanE;
           $$->EllipticalArcConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_EllipticalArcIntersectionType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::IntersectionE;
           $$->EllipticalArcConstructionMethodTypeValue.Intersection = $1;
          }
        | y_Projection_EllipticalArcProjectionType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::ProjectionE;
           $$->EllipticalArcConstructionMethodTypeValue.Projection = $1;
          }
        | y_Recompensated_EllipticalArcRecompType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::RecompensatedE;
           $$->EllipticalArcConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_EllipticalArcTransformType
          {$$ = new EllipticalArcConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcConstructionMethodTypeType = EllipticalArcConstructionMethodTypeChoicePair::TransformE;
           $$->EllipticalArcConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_EllipticalArcCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseEllipticalArc_BaseFeatureType
          {$$ = new EllipticalArcCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EllipticalArcFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_MajorDiameter_LinearValueType y_MinorDiameter_LinearValueType
          {$$ = new EllipticalArcFeatureDefinitionType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticalArcFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_EllipticalArcFeatureDefinition_EllipticalArcFeatureDefinitionType :
          EllipticalArcFeatureDefinitionSTART
          y_EllipticalArcFeatureDefinitionType
          EllipticalArcFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "EllipticalArcFeatureDefinition";
          }
        ;

y_EllipticalArcFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_EllipticalArcMeasurementDeterminationType
          {$$ = new EllipticalArcFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticalArcFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_EllipticalArcFeatureItem_EllipticalArcFeatureItemType :
          EllipticalArcFeatureItemSTART y_EllipticalArcFeatureItemType
          EllipticalArcFeatureItemEND
          {$$ = $2;
           $$->printElement = "EllipticalArcFeatureItem";
          }
        ;

y_EllipticalArcFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_Normal_MeasuredUnitVectorType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_MajorDiameter_MeasuredLinearValueType_0
          y_MinorDiameter_MeasuredLinearValueType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new EllipticalArcFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticalArcFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_EllipticalArcFeatureMeasurement_EllipticalArcFeatureMeasurementType :
          EllipticalArcFeatureMeasurementSTART
          y_EllipticalArcFeatureMeasurementType
          EllipticalArcFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "EllipticalArcFeatureMeasurement";
          }
        | EllipticalArcFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new EllipticalArcFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "EllipticalArcFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad EllipticalArcFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_EllipticalArcFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0 y_Axis_AxisType
          y_Normal_UnitVectorType y_Sweep_SweepType
          y_Constructed_EllipticalArcConstructionMethodType_0
          {$$ = new EllipticalArcFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticalArcFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_EllipticalArcFeatureNominal_EllipticalArcFeatureNominalType :
          EllipticalArcFeatureNominalSTART
          y_EllipticalArcFeatureNominalType EllipticalArcFeatureNominalEND
          {$$ = $2;
           $$->printElement = "EllipticalArcFeatureNominal";
          }
        ;

y_EllipticalArcFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_Depth_LinearValueType
          {$$ = new EllipticalArcFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_EllipticalArcIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_IntersectionPlane_BaseFeatureType
          y_IntersectionFeature_BaseFeatureType
          {$$ = new EllipticalArcIntersectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EllipticalArcMeasurementDeterminationType :
          ENDITEM y_EllipticalArcMeasurementDeterminationTypeChoicePair
          {$$ = new EllipticalArcMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipticalArcMeasurementDeterminationTypeChoicePair :
          y_Checked_EllipticalArcCheckedFeatureType
          {$$ = new EllipticalArcMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcMeasurementDeterminationTypeType = EllipticalArcMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->EllipticalArcMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new EllipticalArcMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcMeasurementDeterminationTypeType = EllipticalArcMeasurementDeterminationTypeChoicePair::SetE;
           $$->EllipticalArcMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_EllipticalArcPointSamplingStrategyType :
          ENDITEM y_EllipticalArcPointSamplingStrategyTypeChoicePair
          {$$ = new EllipticalArcPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_EllipticalArcPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType
          {$$ = new EllipticalArcPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcPointSamplingStrategyTypeType = EllipticalArcPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->EllipticalArcPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new EllipticalArcPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->EllipticalArcPointSamplingStrategyTypeType = EllipticalArcPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->EllipticalArcPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_EllipticalArcProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionFeature_BaseFeatureType
          y_ProjectionPlane_BaseFeatureType
          {$$ = new EllipticalArcProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EllipticalArcRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new EllipticalArcRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EllipticalArcTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseEllipticalArc_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new EllipticalArcTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EllipticityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          {$$ = new EllipticityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_EllipticityCharacteristicDefinition_EllipticityCharacteristicDefinitionType :
          EllipticityCharacteristicDefinitionSTART
          y_EllipticityCharacteristicDefinitionType
          EllipticityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "EllipticityCharacteristicDefinition";
          }
        ;

y_EllipticityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new EllipticityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_EllipticityCharacteristicItem_EllipticityCharacteristicItemType :
          EllipticityCharacteristicItemSTART
          y_EllipticityCharacteristicItemType
          EllipticityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "EllipticityCharacteristicItem";
          }
        ;

y_EllipticityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new EllipticityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_EllipticityCharacteristicMeasurement_EllipticityCharacteristicMeasurementType :
          EllipticityCharacteristicMeasurementSTART
          y_EllipticityCharacteristicMeasurementType
          EllipticityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "EllipticityCharacteristicMeasurement";
          }
        ;

y_EllipticityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new EllipticityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EllipticityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_EllipticityCharacteristicNominal_EllipticityCharacteristicNominalType :
          EllipticityCharacteristicNominalSTART
          y_EllipticityCharacteristicNominalType
          EllipticityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "EllipticityCharacteristicNominal";
          }
        ;

y_EllipticityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          {$$ = new EllipticityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_EllipticityCharacteristicStats_EllipticityCharacteristicStatsEvalType :
          EllipticityCharacteristicStatsSTART
          y_EllipticityCharacteristicStatsEvalType
          EllipticityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "EllipticityCharacteristicStats";
          }
        ;

y_ElongatedCircleBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new ElongatedCircleBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCircleBestFitType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCircleCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new ElongatedCircleCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ElongatedCircleCheckedFeatureType :
          ENDITEM y_CheckDetails_ElongatedCircleCheckedType_0
          {$$ = new ElongatedCircleCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCircleCheckedType :
          ENDITEM y_ElongatedCircleCheckedTypeChoicePair
          {$$ = new ElongatedCircleCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCircleCheckedTypeChoicePair :
          y_Constructed_ElongatedCircleConstructionMethodType
          {$$ = new ElongatedCircleCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleCheckedTypeType = ElongatedCircleCheckedTypeChoicePair::ConstructedE;
           $$->ElongatedCircleCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new ElongatedCircleCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleCheckedTypeType = ElongatedCircleCheckedTypeChoicePair::MeasuredE;
           $$->ElongatedCircleCheckedTypeValue.Measured = $1;
          }
        ;

y_ElongatedCircleConstructionMethodType :
          ENDITEM y_ElongatedCircleConstructionMethodTypeChoicePair
          {$$ = new ElongatedCircleConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCircleConstructionMethodTypeChoicePair :
          y_BestFit_ElongatedCircleBestFitType
          {$$ = new ElongatedCircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleConstructionMethodTypeType = ElongatedCircleConstructionMethodTypeChoicePair::BestFitE;
           $$->ElongatedCircleConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_ElongatedCircleCastType
          {$$ = new ElongatedCircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleConstructionMethodTypeType = ElongatedCircleConstructionMethodTypeChoicePair::CastE;
           $$->ElongatedCircleConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_ElongatedCircleCopyType
          {$$ = new ElongatedCircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleConstructionMethodTypeType = ElongatedCircleConstructionMethodTypeChoicePair::CopyE;
           $$->ElongatedCircleConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_ElongatedCircleRecompType
          {$$ = new ElongatedCircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleConstructionMethodTypeType = ElongatedCircleConstructionMethodTypeChoicePair::RecompensatedE;
           $$->ElongatedCircleConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_ElongatedCircleTransformType
          {$$ = new ElongatedCircleConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleConstructionMethodTypeType = ElongatedCircleConstructionMethodTypeChoicePair::TransformE;
           $$->ElongatedCircleConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_ElongatedCircleCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseElongatedCircle_BaseFeatureType
          {$$ = new ElongatedCircleCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ElongatedCircleFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType y_Length_LinearValueType
          {$$ = new ElongatedCircleFeatureDefinitionType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCircleFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCircleFeatureDefinition_ElongatedCircleFeatureDefinitionType :
          ElongatedCircleFeatureDefinitionSTART
          y_ElongatedCircleFeatureDefinitionType
          ElongatedCircleFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "ElongatedCircleFeatureDefinition";
          }
        ;

y_ElongatedCircleFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_ElongatedCircleMeasurementDeterminationType
          {$$ = new ElongatedCircleFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCircleFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCircleFeatureItem_ElongatedCircleFeatureItemType :
          ElongatedCircleFeatureItemSTART y_ElongatedCircleFeatureItemType
          ElongatedCircleFeatureItemEND
          {$$ = $2;
           $$->printElement = "ElongatedCircleFeatureItem";
          }
        ;

y_ElongatedCircleFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Diameter_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_CenterLine_MeasuredPointAndVectorType_0
          y_Normal_MeasuredUnitVectorType_0
          y_Length_MeasuredLinearValueType_0
          y_LengthMax_MeasuredLinearValueType_0
          y_LengthMin_MeasuredLinearValueType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new ElongatedCircleFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCircleFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCircleFeatureMeasurement_ElongatedCircleFeatureMeasurementType :
          ElongatedCircleFeatureMeasurementSTART
          y_ElongatedCircleFeatureMeasurementType
          ElongatedCircleFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "ElongatedCircleFeatureMeasurement";
          }
        | ElongatedCircleFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ElongatedCircleFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ElongatedCircleFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ElongatedCircleFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_ElongatedCircleFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_CenterLine_PointAndVectorType y_Normal_UnitVectorType
          y_Constructed_ElongatedCircleConstructionMethodType_0
          {$$ = new ElongatedCircleFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCircleFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCircleFeatureNominal_ElongatedCircleFeatureNominalType :
          ElongatedCircleFeatureNominalSTART
          y_ElongatedCircleFeatureNominalType
          ElongatedCircleFeatureNominalEND
          {$$ = $2;
           $$->printElement = "ElongatedCircleFeatureNominal";
          }
        ;

y_ElongatedCircleMeasurementDeterminationType :
          ENDITEM y_ElongatedCircleMeasurementDeterminationTypeChoicePair
          {$$ = new ElongatedCircleMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCircleMeasurementDeterminationTypeChoicePair :
          y_Checked_ElongatedCircleCheckedFeatureType
          {$$ = new ElongatedCircleMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleMeasurementDeterminationTypeType = ElongatedCircleMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->ElongatedCircleMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new ElongatedCircleMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCircleMeasurementDeterminationTypeType = ElongatedCircleMeasurementDeterminationTypeChoicePair::SetE;
           $$->ElongatedCircleMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_ElongatedCirclePointSamplingStrategyType :
          ENDITEM y_ElongatedCirclePointSamplingStrategyTypeChoicePair
          {$$ = new ElongatedCirclePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCirclePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType
          {$$ = new ElongatedCirclePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCirclePointSamplingStrategyTypeType = ElongatedCirclePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->ElongatedCirclePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new ElongatedCirclePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCirclePointSamplingStrategyTypeType = ElongatedCirclePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->ElongatedCirclePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_ElongatedCircleRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new ElongatedCircleRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ElongatedCircleTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseElongatedCircle_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new ElongatedCircleTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ElongatedCylinderBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_9_u_Check
          {$$ = new ElongatedCylinderBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCylinderBestFitType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCylinderCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new ElongatedCylinderCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ElongatedCylinderCheckedFeatureType :
          ENDITEM y_CheckDetails_ElongatedCylinderCheckedType_0
          {$$ = new ElongatedCylinderCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCylinderCheckedType :
          ENDITEM y_ElongatedCylinderCheckedTypeChoicePair
          {$$ = new ElongatedCylinderCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCylinderCheckedTypeChoicePair :
          y_Constructed_ElongatedCylinderConstructionMethodType
          {$$ = new ElongatedCylinderCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderCheckedTypeType = ElongatedCylinderCheckedTypeChoicePair::ConstructedE;
           $$->ElongatedCylinderCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new ElongatedCylinderCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderCheckedTypeType = ElongatedCylinderCheckedTypeChoicePair::MeasuredE;
           $$->ElongatedCylinderCheckedTypeValue.Measured = $1;
          }
        ;

y_ElongatedCylinderConstructionMethodType :
          ENDITEM y_ElongatedCylinderConstructionMethodTypeChoicePair
          {$$ = new ElongatedCylinderConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCylinderConstructionMethodTypeChoicePair :
          y_BestFit_ElongatedCylinderBestFitType
          {$$ = new ElongatedCylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderConstructionMethodTypeType = ElongatedCylinderConstructionMethodTypeChoicePair::BestFitE;
           $$->ElongatedCylinderConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_ElongatedCylinderCastType
          {$$ = new ElongatedCylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderConstructionMethodTypeType = ElongatedCylinderConstructionMethodTypeChoicePair::CastE;
           $$->ElongatedCylinderConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_ElongatedCylinderCopyType
          {$$ = new ElongatedCylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderConstructionMethodTypeType = ElongatedCylinderConstructionMethodTypeChoicePair::CopyE;
           $$->ElongatedCylinderConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_ElongatedCylinderRecompType
          {$$ = new ElongatedCylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderConstructionMethodTypeType = ElongatedCylinderConstructionMethodTypeChoicePair::RecompensatedE;
           $$->ElongatedCylinderConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_ElongatedCylinderTransformType
          {$$ = new ElongatedCylinderConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderConstructionMethodTypeType = ElongatedCylinderConstructionMethodTypeChoicePair::TransformE;
           $$->ElongatedCylinderConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_ElongatedCylinderCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseElongatedCylinder_BaseFeatureType
          {$$ = new ElongatedCylinderCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ElongatedCylinderFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType y_Length_LinearValueType
          y_Depth_LinearValueType_0
          {$$ = new ElongatedCylinderFeatureDefinitionType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCylinderFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCylinderFeatureDefinition_ElongatedCylinderFeatureDefinitionType :
          ElongatedCylinderFeatureDefinitionSTART
          y_ElongatedCylinderFeatureDefinitionType
          ElongatedCylinderFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "ElongatedCylinderFeatureDefinition";
          }
        ;

y_ElongatedCylinderFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_ElongatedCylinderMeasurementDeterminationType
          {$$ = new ElongatedCylinderFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCylinderFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCylinderFeatureItem_ElongatedCylinderFeatureItemType :
          ElongatedCylinderFeatureItemSTART
          y_ElongatedCylinderFeatureItemType
          ElongatedCylinderFeatureItemEND
          {$$ = $2;
           $$->printElement = "ElongatedCylinderFeatureItem";
          }
        ;

y_ElongatedCylinderFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Diameter_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_CenterPlane_MeasuredPlaneType_0
          y_Length_MeasuredLinearValueType_0
          y_LengthMax_MeasuredLinearValueType_0
          y_LengthMin_MeasuredLinearValueType_0
          y_Depth_MeasuredLinearValueType_0
          y_DepthMax_MeasuredLinearValueType_0
          y_DepthMin_MeasuredLinearValueType_0
          y_DepthVector_MeasuredUnitVectorType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new ElongatedCylinderFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCylinderFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCylinderFeatureMeasurement_ElongatedCylinderFeatureMeasurementType :
          ElongatedCylinderFeatureMeasurementSTART
          y_ElongatedCylinderFeatureMeasurementType
          ElongatedCylinderFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "ElongatedCylinderFeatureMeasurement";
          }
        | ElongatedCylinderFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ElongatedCylinderFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ElongatedCylinderFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ElongatedCylinderFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_ElongatedCylinderFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_CenterPlane_PlaneType y_DepthVector_UnitVectorType
          y_Constructed_ElongatedCylinderConstructionMethodType_0
          {$$ = new ElongatedCylinderFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElongatedCylinderFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_ElongatedCylinderFeatureNominal_ElongatedCylinderFeatureNominalType :
          ElongatedCylinderFeatureNominalSTART
          y_ElongatedCylinderFeatureNominalType
          ElongatedCylinderFeatureNominalEND
          {$$ = $2;
           $$->printElement = "ElongatedCylinderFeatureNominal";
          }
        ;

y_ElongatedCylinderMeasurementDeterminationType :
          ENDITEM y_ElongatedCylinderMeasurementDeterminationTypeChoicePair
          {$$ = new ElongatedCylinderMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCylinderMeasurementDeterminationTypeChoicePair :
          y_Checked_ElongatedCylinderCheckedFeatureType
          {$$ = new ElongatedCylinderMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderMeasurementDeterminationTypeType = ElongatedCylinderMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->ElongatedCylinderMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new ElongatedCylinderMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderMeasurementDeterminationTypeType = ElongatedCylinderMeasurementDeterminationTypeChoicePair::SetE;
           $$->ElongatedCylinderMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_ElongatedCylinderPointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new ElongatedCylinderPointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ElongatedCylinderPointSamplingStrategyEnumType value");
          }
        ;

y_ElongatedCylinderPointSamplingStrategyType :
          ENDITEM y_ElongatedCylinderPointSamplingStrategyTypeChoicePair
          {$$ = new ElongatedCylinderPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElongatedCylinderPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_ElongatedCylinderPointSamplingStrategyEnumType
          {$$ = new ElongatedCylinderPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderPointSamplingStrategyTypeType = ElongatedCylinderPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->ElongatedCylinderPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new ElongatedCylinderPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ElongatedCylinderPointSamplingStrategyTypeType = ElongatedCylinderPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->ElongatedCylinderPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_ElongatedCylinderRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new ElongatedCylinderRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ElongatedCylinderTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseElongatedCylinder_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new ElongatedCylinderTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ElongatedZone_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ElongatedZoneSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ElongatedZoneEND
          {$$ = $4;}
        ;

y_ElseDoType :
          ENDITEM y_PlanElement_substituteType
          {$$ = new ElseDoType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ElseDo_ElseDoType_0 :
          /* empty */
          {$$ = 0;}
        | ElseDoSTART y_ElseDoType ElseDoEND
          {$$ = $2;}
        ;

y_ElseIf_TestAndPlanElementType :
          ElseIfSTART y_TestAndPlanElementType ElseIfEND
          {$$ = $2;}
        ;

y_ElseRuleType :
          ENDITEM y_UUID_QPIdType_0 y_ThenPoints_ThenPointsType
          {$$ = new ElseRuleType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_ThenPoints_ThenPointsType
          {$$ = new ElseRuleType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ElseRuleType attributes");
             }
           delete $1;
          }
        ;

y_Else_ElseRuleType_0 :
          /* empty */
          {$$ = 0;}
        | ElseSTART y_ElseRuleType ElseEND
          {$$ = $2;
           $$->printElement = "Else";
          }
        ;

y_EmployeeId_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | EmployeeIdSTART ENDITEM {yyReadData = 1;} y_XmlToken
          EmployeeIdEND
          {$$ = $4;}
        ;

y_EmployeeType :
          ENDITEM y_Name_XmlToken y_EmployeeId_XmlToken_0
          y_Shift_XmlToken_0
          {$$ = new EmployeeType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Employee_EmployeeType :
          EmployeeSTART y_EmployeeType EmployeeEND
          {$$ = $2;}
        ;

y_EndPoint_Point2dSimpleType :
          EndPointSTART y_Point2dSimpleType EndPointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_EndPoint_PointSimpleType :
          EndPointSTART y_PointSimpleType EndPointEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_EndRadius1_EndRadiusType_0 :
          /* empty */
          {$$ = 0;}
        | EndRadius1START y_EndRadiusType EndRadius1END
          {$$ = $2;}
        ;

y_EndRadius1_MeasuredEndRadiusType_0 :
          /* empty */
          {$$ = 0;}
        | EndRadius1START y_MeasuredEndRadiusType EndRadius1END
          {$$ = $2;}
        ;

y_EndRadius2_EndRadiusType_0 :
          /* empty */
          {$$ = 0;}
        | EndRadius2START y_EndRadiusType EndRadius2END
          {$$ = $2;}
        ;

y_EndRadius2_MeasuredEndRadiusType_0 :
          /* empty */
          {$$ = 0;}
        | EndRadius2START y_MeasuredEndRadiusType EndRadius2END
          {$$ = $2;}
        ;

y_EndRadiusType :
          ENDITEM y_EndRadius_LinearValueType y_Expanded_XmlBoolean_0
          {$$ = new EndRadiusType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_EndRadius_LinearValueType :
          EndRadiusSTART y_LinearValueType EndRadiusEND
          {$$ = $2;}
        ;

y_EndRadius_MeasuredLinearValueType :
          EndRadiusSTART y_MeasuredLinearValueType EndRadiusEND
          {$$ = $2;}
        ;

y_EndType_SlotEndType :
          EndTypeSTART y_SlotEndType EndTypeEND
          {$$ = $2;}
        ;

y_EntitiesExternalType :
          y_LiztAttributePair ENDITEM y_LiztEntity_EntityExternalType_1_u
          {$$ = new EntitiesExternalType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EntitiesExternalType attributes");
             }
           delete $1;
          }
        ;

y_Entities_EntitiesExternalType_0 :
          /* empty */
          {$$ = 0;}
        | EntitiesSTART y_EntitiesExternalType EntitiesEND
          {$$ = $2;}
        ;

y_EntityExternalIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | EntityExternalIdsSTART y_ArrayReferenceFullType
          EntityExternalIdsEND
          {$$ = $2;}
        ;

y_EntityExternalType :
          y_LiztAttributePair ENDITEM y_EntityId_XmlToken y_Name_XmlToken_0
          y_Description_XmlString_0
          {$$ = new EntityExternalType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EntityExternalType attributes");
             }
           delete $1;
          }
        ;

y_EntityId_XmlToken :
          EntityIdSTART ENDITEM {yyReadData = 1;} y_XmlToken EntityIdEND
          {$$ = $4;}
        ;

y_EntityInternalIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | EntityInternalIdsSTART y_ArrayReferenceFullType
          EntityInternalIdsEND
          {$$ = $2;}
        ;

y_Entity_EntityExternalType :
          EntitySTART y_EntityExternalType EntityEND
          {$$ = $2;}
        ;

y_EnvelopeRequirement_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | EnvelopeRequirementSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          EnvelopeRequirementEND
          {$$ = $4;}
        ;

y_EnvironmentType :
          ENDITEM y_Attributes_AttributesType_0
          y_ObjectTemperature_MeasuredTemperatureValueType_0
          y_AmbientTemperature_MeasuredTemperatureValueType_0
          y_RelativeHumidity_MeasuredDecimalType_0
          y_DateAndTime_XmlDateTime y_TimeDescription_TimeDescriptionType_0
          {$$ = new EnvironmentType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_Environment_EnvironmentType :
          EnvironmentSTART y_EnvironmentType EnvironmentEND
          {$$ = $2;}
        ;

y_EnvironmentalRangeType :
          ENDITEM y_Name_XmlNMTOKEN_0 y_Description_XmlString_0
          y_MaxAmbientTemperature_TemperatureValueType_0
          y_MinAmbientTemperature_TemperatureValueType_0
          y_MaxAmbientAirPressure_PressureValueType_0
          y_MinAmbientAirPressure_PressureValueType_0
          y_MaxAmbientRelativeHumidity_SpecifiedDecimalType_0
          y_MinAmbientRelativeHumidity_SpecifiedDecimalType_0
          y_MaxVibration_UserDefinedUnitValueType_0
          y_Attributes_AttributesType_0
          {$$ = new EnvironmentalRangeType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_EnvironmentalRange_EnvironmentalRangeType :
          EnvironmentalRangeSTART ENDWHOLEITEM
          {$$ = new EnvironmentalRangeType();
           yyUnrefMap[$$] = $$;
          }
        | EnvironmentalRangeSTART y_EnvironmentalRangeType
          EnvironmentalRangeEND
          {$$ = $2;}
        ;

y_EnvironmentalRange_EnvironmentalRangeType_0 :
          /* empty */
          {$$ = 0;}
        | EnvironmentalRangeSTART ENDWHOLEITEM
          {$$ = new EnvironmentalRangeType();
           yyUnrefMap[$$] = $$;
          }
        | EnvironmentalRangeSTART y_EnvironmentalRangeType
          EnvironmentalRangeEND
          {$$ = $2;}
        ;

y_EnvironmentsType :
          y_LiztAttributePair ENDITEM y_LiztEnvironment_EnvironmentType_1_u
          {$$ = new EnvironmentsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EnvironmentsType attributes");
             }
           delete $1;
          }
        ;

y_EqualLegLength_WeldFilletEqualLegLengthType :
          EqualLegLengthSTART ENDWHOLEITEM
          {$$ = new WeldFilletEqualLegLengthType();
           yyUnrefMap[$$] = $$;
          }
        | EqualLegLengthSTART y_WeldFilletEqualLegLengthType
          EqualLegLengthEND
          {$$ = $2;}
        ;

y_EquipmentVariation_StatsMeasuredDecimalType :
          EquipmentVariationSTART y_StatsMeasuredDecimalType
          EquipmentVariationEND
          {$$ = $2;
           $$->printElement = "EquipmentVariation";
          }
        ;

y_ErrorRate_XmlDecimal :
          ErrorRateSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          ErrorRateEND
          {$$ = $4;}
        ;

y_Error_XmlString :
          ErrorSTART ENDITEM {yyReadData = 1;} y_XmlString ErrorEND
          {$$ = $4;}
        ;

y_ErrorsType :
          y_LiztAttributePair ENDITEM y_LiztError_XmlString_1_u
          {$$ = new ErrorsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ErrorsType attributes");
             }
           delete $1;
          }
        ;

y_Errors_ErrorsType_0 :
          /* empty */
          {$$ = 0;}
        | ErrorsSTART y_ErrorsType ErrorsEND
          {$$ = $2;}
        ;

y_EstablishDatumMeasurandType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_DatumDefinitionId_QIFReferenceFullType
          y_DatumReferenceFrameId_QIFReferenceFullType
          {$$ = new EstablishDatumMeasurandType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EstablishDatumMeasurandType attributes");
             }
           delete $1;
          }
        ;

y_EstablishDatumMeasurand_EstablishDatumMeasurandType :
          EstablishDatumMeasurandSTART y_EstablishDatumMeasurandType
          EstablishDatumMeasurandEND
          {$$ = $2;
           $$->printElement = "EstablishDatumMeasurand";
          }
        ;

y_EstimatedStandardDeviation_StatsMeasuredDecimalType :
          EstimatedStandardDeviationSTART y_StatsMeasuredDecimalType
          EstimatedStandardDeviationEND
          {$$ = $2;
           $$->printElement = "EstimatedStandardDeviation";
          }
        ;

y_EvaluateCharacteristicMeasurandType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicItemId_QIFReferenceType
          {$$ = new EvaluateCharacteristicMeasurandType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad EvaluateCharacteristicMeasurandType attributes");
             }
           delete $1;
          }
        ;

y_EvaluateCharacteristicMeasurand_EvaluateCharacteristicMeasurandType :
          EvaluateCharacteristicMeasurandSTART
          y_EvaluateCharacteristicMeasurandType
          EvaluateCharacteristicMeasurandEND
          {$$ = $2;
           $$->printElement = "EvaluateCharacteristicMeasurand";
          }
        ;

y_EvaluateSpecifiedCharacteristicsActionType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_PreferredActionMethodId_QIFReferenceType_0
          y_AlternativeActionMethodIds_ArrayReferenceType_0
          y_PreferredResourceIds_ArrayReferenceType_0
          y_CharacteristicItemIds_ArrayReferenceType
          {$$ = new EvaluateSpecifiedCharacteristicsActionType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_EvaluateSpecifiedCharacteristics_EvaluateSpecifiedCharacteristicsActionType :
          EvaluateSpecifiedCharacteristicsSTART
          y_EvaluateSpecifiedCharacteristicsActionType
          EvaluateSpecifiedCharacteristicsEND
          {$$ = $2;
           $$->printElement = "EvaluateSpecifiedCharacteristics";
          }
        ;

y_ExcitationAmplitude_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | ExcitationAmplitudeSTART y_UserDefinedUnitValueType
          ExcitationAmplitudeEND
          {$$ = $2;}
        ;

y_ExcitationFrequency_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | ExcitationFrequencySTART y_UserDefinedUnitValueType
          ExcitationFrequencyEND
          {$$ = $2;}
        ;

y_ExclusionEnumType :
          DATASTRING
          {$$ = new ExclusionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ExclusionEnumType value");
          }
        ;

y_ExclusionIdType :
          ENDITEM y_Id_QIFReferenceType y_Reason_ExclusionReasonType
          {$$ = new ExclusionIdType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ExclusionIndexType :
          ENDITEM y_Index_XmlPositiveInteger y_Reason_ExclusionReasonType
          {$$ = new ExclusionIndexType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ExclusionReasonEnum_ExclusionEnumType :
          ExclusionReasonEnumSTART ENDITEM {yyReadData = 1;}
          y_ExclusionEnumType ExclusionReasonEnumEND
          {$$ = $4;}
        ;

y_ExclusionReasonType :
          ENDITEM y_ExclusionReasonTypeChoicePair
          {$$ = new ExclusionReasonType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ExclusionReasonTypeChoicePair :
          y_ExclusionReasonEnum_ExclusionEnumType
          {$$ = new ExclusionReasonTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExclusionReasonTypeType = ExclusionReasonTypeChoicePair::ExclusionReasonEnumE;
           $$->ExclusionReasonTypeValue.ExclusionReasonEnum = $1;
          }
        | y_OtherExclusionReason_XmlString
          {$$ = new ExclusionReasonTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExclusionReasonTypeType = ExclusionReasonTypeChoicePair::OtherExclusionReasonE;
           $$->ExclusionReasonTypeValue.OtherExclusionReason = $1;
          }
        ;

y_Exclusion_ExclusionIdType :
          ExclusionSTART y_ExclusionIdType ExclusionEND
          {$$ = $2;}
        ;

y_Exclusion_ExclusionIndexType :
          ExclusionSTART y_ExclusionIndexType ExclusionEND
          {$$ = $2;}
        ;

y_ExclusionsIdType :
          y_LiztAttributePair ENDITEM y_LiztExclusion_ExclusionIdType_1_u
          {$$ = new ExclusionsIdType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExclusionsIdType attributes");
             }
           delete $1;
          }
        ;

y_ExclusionsIndexType :
          y_LiztAttributePair ENDITEM
          y_LiztExclusion_ExclusionIndexType_1_u
          {$$ = new ExclusionsIndexType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExclusionsIndexType attributes");
             }
           delete $1;
          }
        ;

y_Exclusions_ExclusionsIdType_0 :
          /* empty */
          {$$ = 0;}
        | ExclusionsSTART y_ExclusionsIdType ExclusionsEND
          {$$ = $2;}
        ;

y_Exclusions_ExclusionsIndexType_0 :
          /* empty */
          {$$ = 0;}
        | ExclusionsSTART y_ExclusionsIndexType ExclusionsEND
          {$$ = $2;}
        ;

y_Expanded_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ExpandedSTART ENDITEM {yyReadData = 1;} y_XmlBoolean ExpandedEND
          {$$ = $4;}
        ;

y_ExpirationDate_XmlDateTime :
          ExpirationDateSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          ExpirationDateEND
          {$$ = $4;}
        ;

y_ExplodedViewId_QIFReferenceActiveType_0 :
          /* empty */
          {$$ = 0;}
        | ExplodedViewIdSTART y_QIFReferenceActiveType ExplodedViewIdEND
          {$$ = $2;}
        ;

y_ExplodedViewMov_1230_ExplodedViewMov_1230_Type :
          y_ExplodedViewMov_1230_Type
          {$$ = $1;}
        ;

y_ExplodedViewMov_1230_Type :
          y_ExplodedViewMov_1230_TypeChoicePair
          {$$ = new ExplodedViewMov_1230_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ExplodedViewMov_1230_TypeChoicePair :
          y_Rotate_ExplodedViewRotateType
          {$$ = new ExplodedViewMov_1230_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExplodedViewMov_1230_TypeType = ExplodedViewMov_1230_TypeChoicePair::RotateE;
           $$->ExplodedViewMov_1230_TypeValue.Rotate = $1;
          }
        | y_Translate_ExplodedViewTranslateType
          {$$ = new ExplodedViewMov_1230_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExplodedViewMov_1230_TypeType = ExplodedViewMov_1230_TypeChoicePair::TranslateE;
           $$->ExplodedViewMov_1230_TypeValue.Translate = $1;
          }
        ;

y_ExplodedViewMoveGroupType :
          ENDITEM y_ExplodedViewMov_1230_ExplodedViewMov_1230_Type
          y_ComponentIds_ArrayReferenceFullType_0
          y_BodyIds_ArrayReferenceFullType_0
          {$$ = new ExplodedViewMoveGroupType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ExplodedViewMoveGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztMoveGroup_ExplodedViewMoveGroupType_1_u
          {$$ = new ExplodedViewMoveGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExplodedViewMoveGroupsType attributes");
             }
           delete $1;
          }
        ;

y_ExplodedViewRotateType :
          ENDITEM y_Axis_AxisType y_Angle_AngularValueType
          {$$ = new ExplodedViewRotateType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ExplodedViewSetType :
          y_LiztAttributePair ENDITEM
          y_LiztExplodedView_ExplodedViewType_1_u
          {$$ = new ExplodedViewSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExplodedViewSetType attributes");
             }
           delete $1;
          }
        ;

y_ExplodedViewSet_ExplodedViewSetType_0 :
          /* empty */
          {$$ = 0;}
        | ExplodedViewSetSTART y_ExplodedViewSetType ExplodedViewSetEND
          {$$ = $2;}
        ;

y_ExplodedViewTranslateType :
          ENDITEM y_Direction_UnitVectorType y_Value_LinearValueType
          {$$ = new ExplodedViewTranslateType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ExplodedViewType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_MoveGroups_ExplodedViewMoveGroupsType
          {$$ = new ExplodedViewType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExplodedViewType attributes");
             }
           delete $1;
          }
        ;

y_ExplodedView_ExplodedViewType :
          ExplodedViewSTART y_ExplodedViewType ExplodedViewEND
          {$$ = $2;
           $$->printElement = "ExplodedView";
          }
        ;

y_ExportControlClassification_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ExportControlClassificationSTART ENDITEM {yyReadData = 1;}
          y_XmlString ExportControlClassificationEND
          {$$ = $4;}
        ;

y_ExtentEnumType :
          DATASTRING
          {$$ = new ExtentEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ExtentEnumType value");
          }
        ;

y_ExtentEnum_ExtentEnumType :
          ExtentEnumSTART ENDITEM {yyReadData = 1;} y_ExtentEnumType
          ExtentEnumEND
          {$$ = $4;}
        ;

y_ExtentType :
          ENDITEM y_ExtentTypeChoicePair
          {$$ = new ExtentType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ExtentTypeChoicePair :
          y_ExtentEnum_ExtentEnumType
          {$$ = new ExtentTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtentTypeType = ExtentTypeChoicePair::ExtentEnumE;
           $$->ExtentTypeValue.ExtentEnum = $1;
          }
        | y_OtherExtent_XmlString
          {$$ = new ExtentTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtentTypeType = ExtentTypeChoicePair::OtherExtentE;
           $$->ExtentTypeValue.OtherExtent = $1;
          }
        ;

y_Extent_ExtentType_0 :
          /* empty */
          {$$ = 0;}
        | ExtentSTART y_ExtentType ExtentEND
          {$$ = $2;}
        ;

y_ExternalCADCoordinateSystemId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ExternalCADCoordinateSystemIdSTART y_QIFReferenceFullType
          ExternalCADCoordinateSystemIdEND
          {$$ = $2;}
        ;

y_ExternalFileReferenceType :
          ENDITEM y_URI_XmlAnyURI y_FileSpec_FileSpecType
          y_Description_XmlString
          {$$ = new ExternalFileReferenceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ExternalFileReference_ExternalFileReferenceType :
          ExternalFileReferenceSTART y_ExternalFileReferenceType
          ExternalFileReferenceEND
          {$$ = $2;}
        ;

y_ExternalFileReferencesType :
          y_LiztAttributePair ENDITEM
          y_LiztExternalFileReference_ExternalFileReferenceType_1_u
          {$$ = new ExternalFileReferencesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExternalFileReferencesType attributes");
             }
           delete $1;
          }
        ;

y_ExternalFileReferences_ExternalFileReferencesType_0 :
          /* empty */
          {$$ = 0;}
        | ExternalFileReferencesSTART y_ExternalFileReferencesType
          ExternalFileReferencesEND
          {$$ = $2;}
        ;

y_ExternalFile_ExternalFileReferenceType :
          ExternalFileSTART y_ExternalFileReferenceType ExternalFileEND
          {$$ = $2;}
        ;

y_ExternalQIFDocumentReferenceType :
          y_LiztAttributePair ENDITEM y_QPId_QPIdReferenceType
          y_URI_XmlAnyURI_0 y_Description_XmlString_0
          {$$ = new ExternalQIFDocumentReferenceType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExternalQIFDocumentReferenceType attributes");
             }
           delete $1;
          }
        ;

y_ExternalQIFDocument_ExternalQIFDocumentReferenceType :
          ExternalQIFDocumentSTART y_ExternalQIFDocumentReferenceType
          ExternalQIFDocumentEND
          {$$ = $2;}
        ;

y_ExternalQIFReferencesCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ExternalQIFReferencesCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ExternalQIFReferencesCountEND
          {$$ = $4;}
        ;

y_ExternalQIFReferencesType :
          y_LiztAttributePair ENDITEM
          y_LiztExternalQIFDocument_ExternalQIFDocumentReferenceType_1_u
          {$$ = new ExternalQIFReferencesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExternalQIFReferencesType attributes");
             }
           delete $1;
          }
        ;

y_ExternalQIFReferences_ExternalQIFReferencesType_0 :
          /* empty */
          {$$ = 0;}
        | ExternalQIFReferencesSTART y_ExternalQIFReferencesType
          ExternalQIFReferencesEND
          {$$ = $2;}
        ;

y_ExternalReferenceMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_ExternalFileReferences_ExternalFileReferencesType_0
          {$$ = new ExternalReferenceMeasureFeatureMethodType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExternalReferenceMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_ExternalReferenceMeasureFeatureMethod_ExternalReferenceMeasureFeatureMethodType :
          ExternalReferenceMeasureFeatureMethodSTART
          y_ExternalReferenceMeasureFeatureMethodType
          ExternalReferenceMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "ExternalReferenceMeasureFeatureMethod";
          }
        | ExternalReferenceMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ExternalReferenceMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ExternalReferenceMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ExternalReferenceMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_Extract_CircularArcExtractType :
          ExtractSTART y_CircularArcExtractType ExtractEND
          {$$ = $2;
           $$->printElement = "Extract";
          }
        ;

y_Extract_LineExtractType :
          ExtractSTART y_LineExtractType ExtractEND
          {$$ = $2;
           $$->printElement = "Extract";
          }
        ;

y_Extract_PlaneExtractType :
          ExtractSTART y_PlaneExtractType ExtractEND
          {$$ = $2;
           $$->printElement = "Extract";
          }
        ;

y_Extract_PointDefinedCurveExtractType :
          ExtractSTART y_PointDefinedCurveExtractType ExtractEND
          {$$ = $2;
           $$->printElement = "Extract";
          }
        ;

y_Extract_PointDefinedSurfaceExtractType :
          ExtractSTART y_PointDefinedSurfaceExtractType ExtractEND
          {$$ = $2;
           $$->printElement = "Extract";
          }
        ;

y_ExtremeLimit_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | ExtremeLimitSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          ExtremeLimitEND
          {$$ = $4;}
        ;

y_ExtremeLimit_XmlPositiveInteger_0 :
          /* empty */
          {$$ = 0;}
        | ExtremeLimitSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          ExtremeLimitEND
          {$$ = $4;}
        ;

y_Extreme_PointFeatureExtremeType :
          ExtremeSTART y_PointFeatureExtremeType ExtremeEND
          {$$ = $2;
           $$->printElement = "Extreme";
          }
        ;

y_Extrude23CoreType :
          ENDITEM y_TerminationPoint_PointSimpleType
          y_Curve_Curve13CoreType
          {$$ = new Extrude23CoreType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_TerminationPoint_PointSimpleType
          y_Curve_Curve13CoreType
          {$$ = new Extrude23CoreType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Extrude23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Extrude23Core_Extrude23CoreType :
          Extrude23CoreSTART y_Extrude23CoreType Extrude23CoreEND
          {$$ = $2;
           $$->printElement = "Extrude23Core";
          }
        ;

y_Extrude23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Extrude23Core_Extrude23CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Extrude23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Extrude23Type attributes");
             }
           delete $1;
          }
        ;

y_Extrude23_Extrude23Type :
          Extrude23START y_Extrude23Type Extrude23END
          {$$ = $2;
           $$->printElement = "Extrude23";
          }
        ;

y_ExtrudedCrossSectionBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new ExtrudedCrossSectionBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExtrudedCrossSectionBestFitType attributes");
             }
           delete $1;
          }
        ;

y_ExtrudedCrossSectionCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new ExtrudedCrossSectionCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ExtrudedCrossSectionCheckedFeatureType :
          ENDITEM y_CheckDetails_ExtrudedCrossSectionCheckedType_0
          {$$ = new ExtrudedCrossSectionCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ExtrudedCrossSectionCheckedType :
          ENDITEM y_ExtrudedCrossSectionCheckedTypeChoicePair
          {$$ = new ExtrudedCrossSectionCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ExtrudedCrossSectionCheckedTypeChoicePair :
          y_Constructed_ExtrudedCrossSectionConstructionMethodType
          {$$ = new ExtrudedCrossSectionCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionCheckedTypeType = ExtrudedCrossSectionCheckedTypeChoicePair::ConstructedE;
           $$->ExtrudedCrossSectionCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new ExtrudedCrossSectionCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionCheckedTypeType = ExtrudedCrossSectionCheckedTypeChoicePair::MeasuredE;
           $$->ExtrudedCrossSectionCheckedTypeValue.Measured = $1;
          }
        ;

y_ExtrudedCrossSectionConstructionMethodType :
          ENDITEM y_ExtrudedCrossSectionConstructionMethodTypeChoicePair
          {$$ = new ExtrudedCrossSectionConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ExtrudedCrossSectionConstructionMethodTypeChoicePair :
          y_BestFit_ExtrudedCrossSectionBestFitType
          {$$ = new ExtrudedCrossSectionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionConstructionMethodTypeType = ExtrudedCrossSectionConstructionMethodTypeChoicePair::BestFitE;
           $$->ExtrudedCrossSectionConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_ExtrudedCrossSectionCastType
          {$$ = new ExtrudedCrossSectionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionConstructionMethodTypeType = ExtrudedCrossSectionConstructionMethodTypeChoicePair::CastE;
           $$->ExtrudedCrossSectionConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_ExtrudedCrossSectionCopyType
          {$$ = new ExtrudedCrossSectionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionConstructionMethodTypeType = ExtrudedCrossSectionConstructionMethodTypeChoicePair::CopyE;
           $$->ExtrudedCrossSectionConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_ExtrudedCrossSectionRecompType
          {$$ = new ExtrudedCrossSectionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionConstructionMethodTypeType = ExtrudedCrossSectionConstructionMethodTypeChoicePair::RecompensatedE;
           $$->ExtrudedCrossSectionConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_ExtrudedCrossSectionTransformType
          {$$ = new ExtrudedCrossSectionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionConstructionMethodTypeType = ExtrudedCrossSectionConstructionMethodTypeChoicePair::TransformE;
           $$->ExtrudedCrossSectionConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_ExtrudedCrossSectionCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseExtrudedCrossSection_BaseFeatureType
          {$$ = new ExtrudedCrossSectionCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ExtrudedCrossSectionFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Length_LinearValueType
          {$$ = new ExtrudedCrossSectionFeatureDefinitionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExtrudedCrossSectionFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ExtrudedCrossSectionFeatureDefinition_ExtrudedCrossSectionFeatureDefinitionType :
          ExtrudedCrossSectionFeatureDefinitionSTART
          y_ExtrudedCrossSectionFeatureDefinitionType
          ExtrudedCrossSectionFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "ExtrudedCrossSectionFeatureDefinition";
          }
        ;

y_ExtrudedCrossSectionFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_ExtrudedCrossSectionMeasurementDeterminationType
          {$$ = new ExtrudedCrossSectionFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExtrudedCrossSectionFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_ExtrudedCrossSectionFeatureItem_ExtrudedCrossSectionFeatureItemType :
          ExtrudedCrossSectionFeatureItemSTART
          y_ExtrudedCrossSectionFeatureItemType
          ExtrudedCrossSectionFeatureItemEND
          {$$ = $2;
           $$->printElement = "ExtrudedCrossSectionFeatureItem";
          }
        ;

y_ExtrudedCrossSectionFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Direction_MeasuredUnitVectorType_0
          y_Length_MeasuredLinearValueType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new ExtrudedCrossSectionFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExtrudedCrossSectionFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ExtrudedCrossSectionFeatureMeasurement_ExtrudedCrossSectionFeatureMeasurementType :
          ExtrudedCrossSectionFeatureMeasurementSTART
          y_ExtrudedCrossSectionFeatureMeasurementType
          ExtrudedCrossSectionFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "ExtrudedCrossSectionFeatureMeasurement";
          }
        | ExtrudedCrossSectionFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ExtrudedCrossSectionFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ExtrudedCrossSectionFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ExtrudedCrossSectionFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_ExtrudedCrossSectionFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Direction_UnitVectorType
          y_CrossSectionReferenceFeatureId_ArrayReferenceFullType
          y_Constructed_ExtrudedCrossSectionConstructionMethodType_0
          {$$ = new ExtrudedCrossSectionFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ExtrudedCrossSectionFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_ExtrudedCrossSectionFeatureNominal_ExtrudedCrossSectionFeatureNominalType :
          ExtrudedCrossSectionFeatureNominalSTART
          y_ExtrudedCrossSectionFeatureNominalType
          ExtrudedCrossSectionFeatureNominalEND
          {$$ = $2;
           $$->printElement = "ExtrudedCrossSectionFeatureNominal";
          }
        ;

y_ExtrudedCrossSectionMeasurementDeterminationType :
          ENDITEM
          y_ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair
          {$$ = new ExtrudedCrossSectionMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair :
          y_Checked_ExtrudedCrossSectionCheckedFeatureType
          {$$ = new ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionMeasurementDeterminationTypeType = ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->ExtrudedCrossSectionMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionMeasurementDeterminationTypeType = ExtrudedCrossSectionMeasurementDeterminationTypeChoicePair::SetE;
           $$->ExtrudedCrossSectionMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_ExtrudedCrossSectionPointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new ExtrudedCrossSectionPointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ExtrudedCrossSectionPointSamplingStrategyEnumType value");
          }
        ;

y_ExtrudedCrossSectionPointSamplingStrategyType :
          ENDITEM y_ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair
          {$$ = new ExtrudedCrossSectionPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_ExtrudedCrossSectionPointSamplingStrategyEnumType
          {$$ = new ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionPointSamplingStrategyTypeType = ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->ExtrudedCrossSectionPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ExtrudedCrossSectionPointSamplingStrategyTypeType = ExtrudedCrossSectionPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->ExtrudedCrossSectionPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_ExtrudedCrossSectionRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new ExtrudedCrossSectionRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ExtrudedCrossSectionTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseExtrudedCrossSection_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new ExtrudedCrossSectionTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_EyePieceMagnification_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | EyePieceMagnificationSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          EyePieceMagnificationEND
          {$$ = $4;}
        ;

y_FPSTestType :
          ENDITEM y_XLinearity_LengthFunctionDiscreteType
          y_YLinearity_LengthFunctionDiscreteType
          y_ZLinearity_LengthFunctionDiscreteType
          y_XAxisRoll_AngleFunctionDiscreteType
          y_XAxisPitch_AngleFunctionDiscreteType
          y_XAxisYaw_AngleFunctionDiscreteType
          y_YAxisRoll_AngleFunctionDiscreteType
          y_YAxisPitch_AngleFunctionDiscreteType
          y_YAxisYaw_AngleFunctionDiscreteType
          y_ZAxisRoll_AngleFunctionDiscreteType
          y_ZAxisPitch_AngleFunctionDiscreteType
          y_ZAxisYaw_AngleFunctionDiscreteType
          y_XAxisStraightnessY_LengthFunctionDiscreteType
          y_XAxisStraightnessZ_LengthFunctionDiscreteType
          y_YAxisStraightnessX_LengthFunctionDiscreteType
          y_YAxisStraightnessZ_LengthFunctionDiscreteType
          y_ZAxisStraightnessX_LengthFunctionDiscreteType
          y_ZAxisStraightnessY_LengthFunctionDiscreteType
          y_XYSquareness_XmlDouble y_XZSquareness_XmlDouble
          y_YZSquareness_XmlDouble
          {$$ = new FPSTestType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
          }
        ;

y_FaceBase_substituteType :
          y_FaceMesh_FaceMeshType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Face_FaceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FaceIds_ArrayReferenceFullType :
          FaceIdsSTART y_ArrayReferenceFullType FaceIdsEND
          {$$ = $2;}
        ;

y_FaceIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FaceIdsSTART y_ArrayReferenceType FaceIdsEND
          {$$ = $2;}
        ;

y_FaceMeshType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Validation_ValidationFaceType_0 y_Mesh_ElementReferenceType
          y_LoopIds_ArrayReferenceType_0
          y_FaceMeshType_1223_FaceMeshType_1223_Type_0
          y_FaceMeshType_1224_FaceMeshType_1224_Type_0
          y_FaceMeshType_1225_FaceMeshType_1225_Type_0
          {$$ = new FaceMeshType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FaceMeshType attributes");
             }
           delete $1;
          }
        ;

y_FaceMeshType_1223_FaceMeshType_1223_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_FaceMeshType_1223_Type
          {$$ = $1;}
        ;

y_FaceMeshType_1223_Type :
          y_FaceMeshType_1223_TypeChoicePair
          {$$ = new FaceMeshType_1223_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FaceMeshType_1223_TypeChoicePair :
          y_TrianglesBinary_ArrayBinaryType
          {$$ = new FaceMeshType_1223_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1223_TypeType = FaceMeshType_1223_TypeChoicePair::TrianglesBinaryE;
           $$->FaceMeshType_1223_TypeValue.TrianglesBinary = $1;
          }
        | y_Triangles_ArrayIntType
          {$$ = new FaceMeshType_1223_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1223_TypeType = FaceMeshType_1223_TypeChoicePair::TrianglesE;
           $$->FaceMeshType_1223_TypeValue.Triangles = $1;
          }
        ;

y_FaceMeshType_1224_FaceMeshType_1224_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_FaceMeshType_1224_Type
          {$$ = $1;}
        ;

y_FaceMeshType_1224_Type :
          y_FaceMeshType_1224_TypeChoicePair
          {$$ = new FaceMeshType_1224_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FaceMeshType_1224_TypeChoicePair :
          y_TrianglesHiddenBinary_ArrayBinaryType
          {$$ = new FaceMeshType_1224_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1224_TypeType = FaceMeshType_1224_TypeChoicePair::TrianglesHiddenBinaryE;
           $$->FaceMeshType_1224_TypeValue.TrianglesHiddenBinary = $1;
          }
        | y_TrianglesHidden_ArrayIntType
          {$$ = new FaceMeshType_1224_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1224_TypeType = FaceMeshType_1224_TypeChoicePair::TrianglesHiddenE;
           $$->FaceMeshType_1224_TypeValue.TrianglesHidden = $1;
          }
        | y_TrianglesVisibleBinary_ArrayBinaryType
          {$$ = new FaceMeshType_1224_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1224_TypeType = FaceMeshType_1224_TypeChoicePair::TrianglesVisibleBinaryE;
           $$->FaceMeshType_1224_TypeValue.TrianglesVisibleBinary = $1;
          }
        | y_TrianglesVisible_ArrayIntType
          {$$ = new FaceMeshType_1224_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1224_TypeType = FaceMeshType_1224_TypeChoicePair::TrianglesVisibleE;
           $$->FaceMeshType_1224_TypeValue.TrianglesVisible = $1;
          }
        ;

y_FaceMeshType_1225_FaceMeshType_1225_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_FaceMeshType_1225_Type
          {$$ = $1;}
        ;

y_FaceMeshType_1225_Type :
          y_FaceMeshType_1225_TypeChoicePair
          {$$ = new FaceMeshType_1225_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FaceMeshType_1225_TypeChoicePair :
          y_TrianglesColorBinary_ArrayBinaryType
          {$$ = new FaceMeshType_1225_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1225_TypeType = FaceMeshType_1225_TypeChoicePair::TrianglesColorBinaryE;
           $$->FaceMeshType_1225_TypeValue.TrianglesColorBinary = $1;
          }
        | y_TrianglesColor_ArrayUnsignedByteType
          {$$ = new FaceMeshType_1225_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FaceMeshType_1225_TypeType = FaceMeshType_1225_TypeChoicePair::TrianglesColorE;
           $$->FaceMeshType_1225_TypeValue.TrianglesColor = $1;
          }
        ;

y_FaceMesh_FaceMeshType :
          FaceMeshSTART y_FaceMeshType FaceMeshEND
          {$$ = $2;
           $$->printElement = "FaceMesh";
          }
        ;

y_FacePoints_ValidationPointsType_0 :
          /* empty */
          {$$ = 0;}
        | FacePointsSTART y_ValidationPointsType FacePointsEND
          {$$ = $2;}
        ;

y_FaceSetType :
          y_LiztAttributePair ENDITEM y_LiztFaceBase_substituteType_1_u
          {$$ = new FaceSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FaceSetType attributes");
             }
           delete $1;
          }
        ;

y_FaceSet_FaceSetType_0 :
          /* empty */
          {$$ = 0;}
        | FaceSetSTART y_FaceSetType FaceSetEND
          {$$ = $2;}
        ;

y_FaceType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Validation_ValidationFaceType_0 y_Surface_ElementReferenceType
          y_LoopIds_ArrayReferenceType_0
          {$$ = new FaceType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FaceType attributes");
             }
           delete $1;
          }
        ;

y_Face_FaceType :
          FaceSTART y_FaceType FaceEND
          {$$ = $2;
           $$->printElement = "Face";
          }
        ;

y_FacsimileNumber_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | FacsimileNumberSTART ENDITEM {yyReadData = 1;} y_XmlToken
          FacsimileNumberEND
          {$$ = $4;}
        ;

y_Factor_PositiveDecimalType :
          FactorSTART ENDITEM {yyReadData = 1;} y_PositiveDecimalType
          FactorEND
          {$$ = $4;}
        ;

y_FailValues_StringValuesType_0 :
          /* empty */
          {$$ = 0;}
        | FailValuesSTART y_StringValuesType FailValuesEND
          {$$ = $2;}
        ;

y_FailurePercentage_StatsMeasuredDecimalType :
          FailurePercentageSTART y_StatsMeasuredDecimalType
          FailurePercentageEND
          {$$ = $2;
           $$->printElement = "FailurePercentage";
          }
        ;

y_Far_LinearValueType :
          FarSTART y_LinearValueType FarEND
          {$$ = $2;}
        ;

y_FeatureAreaType :
          /* empty */
          {$$ = new FeatureAreaType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_FeatureArea_FeatureAreaType :
          FeatureAreaSTART y_FeatureAreaType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "FeatureArea";
          }
        ;

y_FeatureAspectsListsType :
          ENDITEM y_FeatureDefinitions_FeatureDefinitionsType_0
          y_FeatureNominals_FeatureNominalsType_0
          y_FeatureItems_FeatureItemsType_0
          y_NominalPointSets_NominalPointSetListType_0
          {$$ = new FeatureAspectsListsType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_FeatureDefinitionId_QIFReferenceType :
          FeatureDefinitionIdSTART y_QIFReferenceType
          FeatureDefinitionIdEND
          {$$ = $2;}
        ;

y_FeatureDefinition_substituteType :
          y_CircleFeatureDefinition_CircleFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularArcFeatureDefinition_CircularArcFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConeFeatureDefinition_ConeFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalSegmentFeatureDefinition_ConicalSegmentFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylinderFeatureDefinition_CylinderFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricalSegmentFeatureDefinition_CylindricalSegmentFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EdgePointFeatureDefinition_EdgePointFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipseFeatureDefinition_EllipseFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticalArcFeatureDefinition_EllipticalArcFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCircleFeatureDefinition_ElongatedCircleFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCylinderFeatureDefinition_ElongatedCylinderFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ExtrudedCrossSectionFeatureDefinition_ExtrudedCrossSectionFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GroupFeatureDefinition_GroupFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineFeatureDefinition_LineFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MarkingFeatureDefinition_MarkingFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledLinesFeatureDefinition_OppositeAngledLinesFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledPlanesFeatureDefinition_OppositeAngledPlanesFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelLinesFeatureDefinition_OppositeParallelLinesFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelPlanesFeatureDefinition_OppositeParallelPlanesFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherCurveFeatureDefinition_OtherCurveFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherNonShapeFeatureDefinition_OtherNonShapeFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherShapeFeatureDefinition_OtherShapeFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherSurfaceFeatureDefinition_OtherSurfaceFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureCircleDefinition_PatternFeatureCircleDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureCircularArcDefinition_PatternFeatureCircularArcDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureLinearDefinition_PatternFeatureLinearDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureParallelogramDefinition_PatternFeatureParallelogramDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PlaneFeatureDefinition_PlaneFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedCurveFeatureDefinition_PointDefinedCurveFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedSurfaceFeatureDefinition_PointDefinedSurfaceFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointFeatureDefinition_PointFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphereFeatureDefinition_SphereFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalSegmentFeatureDefinition_SphericalSegmentFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceOfRevolutionFeatureDefinition_SurfaceOfRevolutionFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadedFeatureDefinition_ThreadedFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidalSegmentFeatureDefinition_ToroidalSegmentFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TorusFeatureDefinition_TorusFeatureDefinitionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureDefinitionsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | FeatureDefinitionsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt FeatureDefinitionsCountEND
          {$$ = $4;}
        ;

y_FeatureDefinitionsType :
          y_LiztAttributePair ENDITEM
          y_LiztFeatureDefinition_substituteType_1_u
          {$$ = new FeatureDefinitionsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureDefinitionsType attributes");
             }
           delete $1;
          }
        ;

y_FeatureDefinitions_FeatureDefinitionsType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureDefinitionsSTART y_FeatureDefinitionsType
          FeatureDefinitionsEND
          {$$ = $2;}
        ;

y_FeatureDirection_BaseFeatureType :
          FeatureDirectionSTART y_BaseFeatureType FeatureDirectionEND
          {$$ = $2;}
        ;

y_FeatureDirection_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureDirectionSTART y_UnitVectorType FeatureDirectionEND
          {$$ = $2;}
        ;

y_FeatureId_QIFReferenceFullType :
          FeatureIdSTART y_QIFReferenceFullType FeatureIdEND
          {$$ = $2;}
        ;

y_FeatureId_QIFReferenceType :
          FeatureIdSTART y_QIFReferenceType FeatureIdEND
          {$$ = $2;}
        ;

y_FeatureIsDatumType :
          /* empty */
          {$$ = new FeatureIsDatumType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_FeatureIsDatum_FeatureIsDatumType :
          FeatureIsDatumSTART y_FeatureIsDatumType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "FeatureIsDatum";
          }
        ;

y_FeatureIsInternalType :
          /* empty */
          {$$ = new FeatureIsInternalType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_FeatureIsInternal_FeatureIsInternalType :
          FeatureIsInternalSTART y_FeatureIsInternalType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "FeatureIsInternal";
          }
        ;

y_FeatureItemId_QIFReferenceType :
          FeatureItemIdSTART y_QIFReferenceType FeatureItemIdEND
          {$$ = $2;}
        ;

y_FeatureItemId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureItemIdSTART y_QIFReferenceType FeatureItemIdEND
          {$$ = $2;}
        ;

y_FeatureItemIds_ArrayReferenceType :
          FeatureItemIdsSTART y_ArrayReferenceType FeatureItemIdsEND
          {$$ = $2;}
        ;

y_FeatureItemIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureItemIdsSTART y_ArrayReferenceType FeatureItemIdsEND
          {$$ = $2;}
        ;

y_FeatureItem_substituteType :
          y_CircleFeatureItem_CircleFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularArcFeatureItem_CircularArcFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConeFeatureItem_ConeFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalSegmentFeatureItem_ConicalSegmentFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylinderFeatureItem_CylinderFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricalSegmentFeatureItem_CylindricalSegmentFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EdgePointFeatureItem_EdgePointFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipseFeatureItem_EllipseFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticalArcFeatureItem_EllipticalArcFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCircleFeatureItem_ElongatedCircleFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCylinderFeatureItem_ElongatedCylinderFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ExtrudedCrossSectionFeatureItem_ExtrudedCrossSectionFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GroupFeatureItem_GroupFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineFeatureItem_LineFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MarkingFeatureItem_MarkingFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledLinesFeatureItem_OppositeAngledLinesFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledPlanesFeatureItem_OppositeAngledPlanesFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelLinesFeatureItem_OppositeParallelLinesFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelPlanesFeatureItem_OppositeParallelPlanesFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherCurveFeatureItem_OtherCurveFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherNonShapeFeatureItem_OtherNonShapeFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherShapeFeatureItem_OtherShapeFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherSurfaceFeatureItem_OtherSurfaceFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureCircleItem_PatternFeatureCircleItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureCircularArcItem_PatternFeatureCircularArcItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureLinearItem_PatternFeatureLinearItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureParallelogramItem_PatternFeatureParallelogramItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PlaneFeatureItem_PlaneFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedCurveFeatureItem_PointDefinedCurveFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedSurfaceFeatureItem_PointDefinedSurfaceFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointFeatureItem_PointFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphereFeatureItem_SphereFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalSegmentFeatureItem_SphericalSegmentFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceOfRevolutionFeatureItem_SurfaceOfRevolutionFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadedFeatureItem_ThreadedFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidalSegmentFeatureItem_ToroidalSegmentFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TorusFeatureItem_TorusFeatureItemType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureItemsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | FeatureItemsCountSTART ENDITEM {yyReadData = 1;} y_XmlUnsignedInt
          FeatureItemsCountEND
          {$$ = $4;}
        ;

y_FeatureItemsType :
          y_LiztAttributePair ENDITEM y_LiztFeatureItem_substituteType_1_u
          {$$ = new FeatureItemsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureItemsType attributes");
             }
           delete $1;
          }
        ;

y_FeatureItems_FeatureItemsType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureItemsSTART y_FeatureItemsType FeatureItemsEND
          {$$ = $2;}
        ;

y_FeatureLengthType :
          /* empty */
          {$$ = new FeatureLengthType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_FeatureLength_FeatureLengthType :
          FeatureLengthSTART y_FeatureLengthType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "FeatureLength";
          }
        ;

y_FeatureMeasurementIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureMeasurementIdsSTART y_ArrayReferenceType
          FeatureMeasurementIdsEND
          {$$ = $2;}
        ;

y_FeatureMeasurement_substituteType :
          y_CircleFeatureMeasurement_CircleFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularArcFeatureMeasurement_CircularArcFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConeFeatureMeasurement_ConeFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalSegmentFeatureMeasurement_ConicalSegmentFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylinderFeatureMeasurement_CylinderFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricalSegmentFeatureMeasurement_CylindricalSegmentFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EdgePointFeatureMeasurement_EdgePointFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipseFeatureMeasurement_EllipseFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticalArcFeatureMeasurement_EllipticalArcFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCircleFeatureMeasurement_ElongatedCircleFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCylinderFeatureMeasurement_ElongatedCylinderFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ExtrudedCrossSectionFeatureMeasurement_ExtrudedCrossSectionFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GroupFeatureMeasurement_GroupFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineFeatureMeasurement_LineFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MarkingFeatureMeasurement_MarkingFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledLinesFeatureMeasurement_OppositeAngledLinesFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledPlanesFeatureMeasurement_OppositeAngledPlanesFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelLinesFeatureMeasurement_OppositeParallelLinesFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelPlanesFeatureMeasurement_OppositeParallelPlanesFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherCurveFeatureMeasurement_OtherCurveFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherNonShapeFeatureMeasurement_OtherNonShapeFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherShapeFeatureMeasurement_OtherShapeFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherSurfaceFeatureMeasurement_OtherSurfaceFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PlaneFeatureMeasurement_PlaneFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedCurveFeatureMeasurement_PointDefinedCurveFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedSurfaceFeatureMeasurement_PointDefinedSurfaceFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointFeatureMeasurement_PointFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphereFeatureMeasurement_SphereFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalSegmentFeatureMeasurement_SphericalSegmentFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceOfRevolutionFeatureMeasurement_SurfaceOfRevolutionFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadedFeatureMeasurement_ThreadedFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidalSegmentFeatureMeasurement_ToroidalSegmentFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TorusFeatureMeasurement_TorusFeatureMeasurementType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureMeasurementsType :
          y_LiztAttributePair ENDITEM
          y_LiztFeatureMeasurement_substituteType_1_u
          {$$ = new FeatureMeasurementsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureMeasurementsType attributes");
             }
           delete $1;
          }
        ;

y_FeatureName_XmlToken :
          FeatureNameSTART ENDITEM {yyReadData = 1;} y_XmlToken
          FeatureNameEND
          {$$ = $4;}
        ;

y_FeatureName_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | FeatureNameSTART ENDITEM {yyReadData = 1;} y_XmlToken
          FeatureNameEND
          {$$ = $4;}
        ;

y_FeatureNominalId_QIFReferenceFullType :
          FeatureNominalIdSTART y_QIFReferenceFullType FeatureNominalIdEND
          {$$ = $2;}
        ;

y_FeatureNominalId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureNominalIdSTART y_QIFReferenceFullType FeatureNominalIdEND
          {$$ = $2;}
        ;

y_FeatureNominalIds_ArrayReferenceFullType :
          FeatureNominalIdsSTART y_ArrayReferenceFullType
          FeatureNominalIdsEND
          {$$ = $2;}
        ;

y_FeatureNominalIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureNominalIdsSTART y_ArrayReferenceFullType
          FeatureNominalIdsEND
          {$$ = $2;}
        ;

y_FeatureNominalIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureNominalIdsSTART y_ArrayReferenceType FeatureNominalIdsEND
          {$$ = $2;}
        ;

y_FeatureNominalPairs_ArrayPairReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureNominalPairsSTART y_ArrayPairReferenceFullType
          FeatureNominalPairsEND
          {$$ = $2;}
        ;

y_FeatureNominal_substituteType :
          y_CircleFeatureNominal_CircleFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CircularArcFeatureNominal_CircularArcFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConeFeatureNominal_ConeFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ConicalSegmentFeatureNominal_ConicalSegmentFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylinderFeatureNominal_CylinderFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricalSegmentFeatureNominal_CylindricalSegmentFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EdgePointFeatureNominal_EdgePointFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipseFeatureNominal_EllipseFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EllipticalArcFeatureNominal_EllipticalArcFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCircleFeatureNominal_ElongatedCircleFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ElongatedCylinderFeatureNominal_ElongatedCylinderFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ExtrudedCrossSectionFeatureNominal_ExtrudedCrossSectionFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GroupFeatureNominal_GroupFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LineFeatureNominal_LineFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MarkingFeatureNominal_MarkingFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledLinesFeatureNominal_OppositeAngledLinesFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeAngledPlanesFeatureNominal_OppositeAngledPlanesFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelLinesFeatureNominal_OppositeParallelLinesFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OppositeParallelPlanesFeatureNominal_OppositeParallelPlanesFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherCurveFeatureNominal_OtherCurveFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherNonShapeFeatureNominal_OtherNonShapeFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherShapeFeatureNominal_OtherShapeFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OtherSurfaceFeatureNominal_OtherSurfaceFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureCircleNominal_PatternFeatureCircleNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureCircularArcNominal_PatternFeatureCircularArcNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureLinearNominal_PatternFeatureLinearNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PatternFeatureParallelogramNominal_PatternFeatureParallelogramNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PlaneFeatureNominal_PlaneFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedCurveFeatureNominal_PointDefinedCurveFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointDefinedSurfaceFeatureNominal_PointDefinedSurfaceFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PointFeatureNominal_PointFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphereFeatureNominal_SphereFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalSegmentFeatureNominal_SphericalSegmentFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SurfaceOfRevolutionFeatureNominal_SurfaceOfRevolutionFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ThreadedFeatureNominal_ThreadedFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToroidalSegmentFeatureNominal_ToroidalSegmentFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TorusFeatureNominal_TorusFeatureNominalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureNominalsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | FeatureNominalsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt FeatureNominalsCountEND
          {$$ = $4;}
        ;

y_FeatureNominalsType :
          y_LiztAttributePair ENDITEM
          y_LiztFeatureNominal_substituteType_1_u
          {$$ = new FeatureNominalsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureNominalsType attributes");
             }
           delete $1;
          }
        ;

y_FeatureNominals_FeatureNominalsType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureNominalsSTART y_FeatureNominalsType FeatureNominalsEND
          {$$ = $2;}
        ;

y_FeaturePair_QIFFeaturePairType :
          FeaturePairSTART y_QIFFeaturePairType FeaturePairEND
          {$$ = $2;}
        ;

y_FeatureRulesCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | FeatureRulesCountSTART ENDITEM {yyReadData = 1;} y_XmlUnsignedInt
          FeatureRulesCountEND
          {$$ = $4;}
        ;

y_FeatureRulesType :
          ENDITEM y_IfThenElseFeatureRules_IfThenElseFeatureRulesType_0
          y_MaxFeatureRules_MaxFeatureRulesType_0
          {$$ = new FeatureRulesType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_FeatureRules_FeatureRulesType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureRulesSTART ENDWHOLEITEM
          {$$ = new FeatureRulesType();
           yyUnrefMap[$$] = $$;
          }
        | FeatureRulesSTART y_FeatureRulesType FeatureRulesEND
          {$$ = $2;}
        ;

y_FeatureSizeType :
          /* empty */
          {$$ = new FeatureSizeType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_FeatureSize_FeatureSizeType :
          FeatureSizeSTART y_FeatureSizeType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "FeatureSize";
          }
        ;

y_FeatureSpeed_TimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureSpeedSTART y_TimeValueType FeatureSpeedEND
          {$$ = $2;}
        ;

y_FeatureTypeEnumType :
          DATASTRING
          {$$ = new FeatureTypeEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad FeatureTypeEnumType value");
          }
        ;

y_FeatureTypeEnum_FeatureTypeEnumType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureTypeEnumSTART ENDITEM {yyReadData = 1;}
          y_FeatureTypeEnumType FeatureTypeEnumEND
          {$$ = $4;}
        ;

y_FeatureTypeIsType :
          y_LiztAttributePair
          {$$ = new FeatureTypeIsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureTypeIsType attributes");
             }
           delete $1;
          }
        ;

y_FeatureTypeIs_FeatureTypeIsType :
          FeatureTypeIsSTART y_FeatureTypeIsType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "FeatureTypeIs";
          }
        ;

y_FeatureZoneAreaBetweenType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0
          y_FeatureZoneArea_1100_FeatureZoneArea_1100_Type
          y_FeatureZoneArea_1101_FeatureZoneArea_1101_Type
          y_StartDirection_UnitVectorType_0 y_PlaneNormal_UnitVectorType_0
          {$$ = new FeatureZoneAreaBetweenType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneAreaBetweenType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneAreaBetween_FeatureZoneAreaBetweenType :
          FeatureZoneAreaBetweenSTART y_FeatureZoneAreaBetweenType
          FeatureZoneAreaBetweenEND
          {$$ = $2;
           $$->printElement = "FeatureZoneAreaBetween";
          }
        ;

y_FeatureZoneAreaCircularType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0
          y_Circle_CircleType
          {$$ = new FeatureZoneAreaCircularType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneAreaCircularType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneAreaCircular_FeatureZoneAreaCircularType :
          FeatureZoneAreaCircularSTART y_FeatureZoneAreaCircularType
          FeatureZoneAreaCircularEND
          {$$ = $2;
           $$->printElement = "FeatureZoneAreaCircular";
          }
        ;

y_FeatureZoneAreaCylindricalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0
          y_Cylinder_CylinderType
          {$$ = new FeatureZoneAreaCylindricalType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneAreaCylindricalType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneAreaCylindrical_FeatureZoneAreaCylindricalType :
          FeatureZoneAreaCylindricalSTART y_FeatureZoneAreaCylindricalType
          FeatureZoneAreaCylindricalEND
          {$$ = $2;
           $$->printElement = "FeatureZoneAreaCylindrical";
          }
        ;

y_FeatureZoneAreaIrregularType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0
          {$$ = new FeatureZoneAreaIrregularType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneAreaIrregularType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneAreaIrregular_FeatureZoneAreaIrregularType :
          FeatureZoneAreaIrregularSTART y_FeatureZoneAreaIrregularType
          FeatureZoneAreaIrregularEND
          {$$ = $2;
           $$->printElement = "FeatureZoneAreaIrregular";
          }
        | FeatureZoneAreaIrregularSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new FeatureZoneAreaIrregularType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "FeatureZoneAreaIrregular";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad FeatureZoneAreaIrregularType attributes");
             }
           delete $2;
          }
        ;

y_FeatureZoneAreaRectangularType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0
          y_Rectangle_RectangleType
          {$$ = new FeatureZoneAreaRectangularType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneAreaRectangularType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneAreaRectangular_FeatureZoneAreaRectangularType :
          FeatureZoneAreaRectangularSTART y_FeatureZoneAreaRectangularType
          FeatureZoneAreaRectangularEND
          {$$ = $2;
           $$->printElement = "FeatureZoneAreaRectangular";
          }
        ;

y_FeatureZoneAreaSphericalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0
          y_Sphere_SphereType
          {$$ = new FeatureZoneAreaSphericalType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneAreaSphericalType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneAreaSpherical_FeatureZoneAreaSphericalType :
          FeatureZoneAreaSphericalSTART y_FeatureZoneAreaSphericalType
          FeatureZoneAreaSphericalEND
          {$$ = $2;
           $$->printElement = "FeatureZoneAreaSpherical";
          }
        ;

y_FeatureZoneArea_1099_FeatureZoneArea_1099_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_FeatureZoneArea_1099_Type
          {$$ = $1;}
        ;

y_FeatureZoneArea_1099_Type :
          y_FeatureZoneArea_1099_TypeChoicePair
          {$$ = new FeatureZoneArea_1099_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureZoneArea_1099_TypeChoicePair :
          y_EdgeIds_ArrayReferenceFullType
          {$$ = new FeatureZoneArea_1099_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneArea_1099_TypeType = FeatureZoneArea_1099_TypeChoicePair::EdgeIdsE;
           $$->FeatureZoneArea_1099_TypeValue.EdgeIds = $1;
          }
        | y_FaceIds_ArrayReferenceFullType
          {$$ = new FeatureZoneArea_1099_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneArea_1099_TypeType = FeatureZoneArea_1099_TypeChoicePair::FaceIdsE;
           $$->FeatureZoneArea_1099_TypeValue.FaceIds = $1;
          }
        ;

y_FeatureZoneArea_1100_FeatureZoneArea_1100_Type :
          y_FeatureZoneArea_1100_Type
          {$$ = $1;}
        ;

y_FeatureZoneArea_1100_Type :
          y_FeatureZoneArea_1100_TypeChoicePair
          {$$ = new FeatureZoneArea_1100_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureZoneArea_1100_TypeChoicePair :
          y_FromCurveZoneId_QIFReferenceFullType
          {$$ = new FeatureZoneArea_1100_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneArea_1100_TypeType = FeatureZoneArea_1100_TypeChoicePair::FromCurveZoneIdE;
           $$->FeatureZoneArea_1100_TypeValue.FromCurveZoneId = $1;
          }
        | y_FromPointZoneId_QIFReferenceFullType
          {$$ = new FeatureZoneArea_1100_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneArea_1100_TypeType = FeatureZoneArea_1100_TypeChoicePair::FromPointZoneIdE;
           $$->FeatureZoneArea_1100_TypeValue.FromPointZoneId = $1;
          }
        ;

y_FeatureZoneArea_1101_FeatureZoneArea_1101_Type :
          y_FeatureZoneArea_1101_Type
          {$$ = $1;}
        ;

y_FeatureZoneArea_1101_Type :
          y_FeatureZoneArea_1101_TypeChoicePair
          {$$ = new FeatureZoneArea_1101_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureZoneArea_1101_TypeChoicePair :
          y_ToCurveZoneId_QIFReferenceFullType
          {$$ = new FeatureZoneArea_1101_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneArea_1101_TypeType = FeatureZoneArea_1101_TypeChoicePair::ToCurveZoneIdE;
           $$->FeatureZoneArea_1101_TypeValue.ToCurveZoneId = $1;
          }
        | y_ToPointZoneId_QIFReferenceFullType
          {$$ = new FeatureZoneArea_1101_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneArea_1101_TypeType = FeatureZoneArea_1101_TypeChoicePair::ToPointZoneIdE;
           $$->FeatureZoneArea_1101_TypeValue.ToPointZoneId = $1;
          }
        ;

y_FeatureZoneCurv_1102_FeatureZoneCurv_1102_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_FeatureZoneCurv_1102_Type
          {$$ = $1;}
        ;

y_FeatureZoneCurv_1102_Type :
          y_FeatureZoneCurv_1102_TypeChoicePair
          {$$ = new FeatureZoneCurv_1102_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureZoneCurv_1102_TypeChoicePair :
          y_CurveIds_ArrayReferenceFullType
          {$$ = new FeatureZoneCurv_1102_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneCurv_1102_TypeType = FeatureZoneCurv_1102_TypeChoicePair::CurveIdsE;
           $$->FeatureZoneCurv_1102_TypeValue.CurveIds = $1;
          }
        | y_EdgeIds_ArrayReferenceFullType
          {$$ = new FeatureZoneCurv_1102_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZoneCurv_1102_TypeType = FeatureZoneCurv_1102_TypeChoicePair::EdgeIdsE;
           $$->FeatureZoneCurv_1102_TypeValue.EdgeIds = $1;
          }
        ;

y_FeatureZoneCurveCircularType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneCurv_1102_FeatureZoneCurv_1102_Type_0
          y_Circle_CircleType
          {$$ = new FeatureZoneCurveCircularType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneCurveCircularType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneCurveCircular_FeatureZoneCurveCircularType :
          FeatureZoneCurveCircularSTART y_FeatureZoneCurveCircularType
          FeatureZoneCurveCircularEND
          {$$ = $2;
           $$->printElement = "FeatureZoneCurveCircular";
          }
        ;

y_FeatureZoneCurveIrregularType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneCurv_1102_FeatureZoneCurv_1102_Type_0
          y_CurvePoints_PolyLineType
          {$$ = new FeatureZoneCurveIrregularType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneCurveIrregularType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneCurveIrregular_FeatureZoneCurveIrregularType :
          FeatureZoneCurveIrregularSTART y_FeatureZoneCurveIrregularType
          FeatureZoneCurveIrregularEND
          {$$ = $2;
           $$->printElement = "FeatureZoneCurveIrregular";
          }
        ;

y_FeatureZoneCurveLineType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZoneCurv_1102_FeatureZoneCurv_1102_Type_0
          y_Line_LineSegmentType
          {$$ = new FeatureZoneCurveLineType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneCurveLineType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZoneCurveLine_FeatureZoneCurveLineType :
          FeatureZoneCurveLineSTART y_FeatureZoneCurveLineType
          FeatureZoneCurveLineEND
          {$$ = $2;
           $$->printElement = "FeatureZoneCurveLine";
          }
        ;

y_FeatureZoneIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureZoneIdsSTART y_ArrayReferenceFullType FeatureZoneIdsEND
          {$$ = $2;}
        ;

y_FeatureZoneIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureZoneIdsSTART y_ArrayReferenceType FeatureZoneIdsEND
          {$$ = $2;}
        ;

y_FeatureZoneListType :
          y_LiztAttributePair ENDITEM y_LiztFeatureZone_substituteType_1_u
          {$$ = new FeatureZoneListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZoneListType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZonePoin_1103_FeatureZonePoin_1103_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_FeatureZonePoin_1103_Type
          {$$ = $1;}
        ;

y_FeatureZonePoin_1103_Type :
          y_FeatureZonePoin_1103_TypeChoicePair
          {$$ = new FeatureZonePoin_1103_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureZonePoin_1103_TypeChoicePair :
          y_PointId_QIFReferenceFullType
          {$$ = new FeatureZonePoin_1103_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZonePoin_1103_TypeType = FeatureZonePoin_1103_TypeChoicePair::PointIdE;
           $$->FeatureZonePoin_1103_TypeValue.PointId = $1;
          }
        | y_VertexId_QIFReferenceFullType
          {$$ = new FeatureZonePoin_1103_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FeatureZonePoin_1103_TypeType = FeatureZonePoin_1103_TypeChoicePair::VertexIdE;
           $$->FeatureZonePoin_1103_TypeValue.VertexId = $1;
          }
        ;

y_FeatureZonePointType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Label_XmlToken_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_FeatureZonePoin_1103_FeatureZonePoin_1103_Type_0
          y_Point_PointType
          {$$ = new FeatureZonePointType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FeatureZonePointType attributes");
             }
           delete $1;
          }
        ;

y_FeatureZonePoint_FeatureZonePointType :
          FeatureZonePointSTART y_FeatureZonePointType FeatureZonePointEND
          {$$ = $2;
           $$->printElement = "FeatureZonePoint";
          }
        ;

y_FeatureZone_substituteType :
          y_FeatureZoneAreaBetween_FeatureZoneAreaBetweenType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneAreaCircular_FeatureZoneAreaCircularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneAreaCylindrical_FeatureZoneAreaCylindricalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneAreaIrregular_FeatureZoneAreaIrregularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneAreaRectangular_FeatureZoneAreaRectangularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneAreaSpherical_FeatureZoneAreaSphericalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneCurveCircular_FeatureZoneCurveCircularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneCurveIrregular_FeatureZoneCurveIrregularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZoneCurveLine_FeatureZoneCurveLineType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FeatureZonePoint_FeatureZonePointType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FeatureZones_FeatureZoneListType_0 :
          /* empty */
          {$$ = 0;}
        | FeatureZonesSTART y_FeatureZoneListType FeatureZonesEND
          {$$ = $2;}
        ;

y_Features_FeatureAspectsListsType_0 :
          /* empty */
          {$$ = 0;}
        | FeaturesSTART ENDWHOLEITEM
          {$$ = new FeatureAspectsListsType();
           yyUnrefMap[$$] = $$;
          }
        | FeaturesSTART y_FeatureAspectsListsType FeaturesEND
          {$$ = $2;}
        ;

y_FieldOfViewDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | FieldOfViewDiameterSTART y_LinearValueType FieldOfViewDiameterEND
          {$$ = $2;}
        ;

y_FieldOfView_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | FieldOfViewSTART y_AngularValueType FieldOfViewEND
          {$$ = $2;}
        ;

y_Field_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | FieldSTART ENDITEM {yyReadData = 1;} y_XmlBoolean FieldEND
          {$$ = $4;}
        ;

y_FileInternalType :
          ENDITEM y_Name_XmlString y_Version_VersionType_0
          {$$ = new FileInternalType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_FileSpecType :
          ENDITEM y_FileSpecTypeChoicePair
          {$$ = new FileSpecType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_FileSpecTypeChoicePair :
          y_CommonFileSpecEnum_CommonFileSpecEnumType
          {$$ = new FileSpecTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FileSpecTypeType = FileSpecTypeChoicePair::CommonFileSpecEnumE;
           $$->FileSpecTypeValue.CommonFileSpecEnum = $1;
          }
        | y_OtherFileSpec_XmlString
          {$$ = new FileSpecTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FileSpecTypeType = FileSpecTypeChoicePair::OtherFileSpecE;
           $$->FileSpecTypeValue.OtherFileSpec = $1;
          }
        ;

y_FileSpec_FileSpecType :
          FileSpecSTART y_FileSpecType FileSpecEND
          {$$ = $2;}
        ;

y_FileType :
          ENDITEM y_Name_XmlToken y_Version_XmlToken_0
          y_Format_DigitalModelFormatType_0
          {$$ = new FileType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_FileUnitsType :
          ENDITEM y_PrimaryUnits_PrimaryUnitsType
          y_OtherUnits_OtherUnitsType_0
          y_UserDefinedUnits_UserDefinedUnitsType_0
          {$$ = new FileUnitsType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_FileUnits_FileUnitsType_0 :
          /* empty */
          {$$ = 0;}
        | FileUnitsSTART y_FileUnitsType FileUnitsEND
          {$$ = $2;}
        ;

y_File_FileInternalType_0 :
          /* empty */
          {$$ = 0;}
        | FileSTART y_FileInternalType FileEND
          {$$ = $2;}
        ;

y_File_FileType :
          FileSTART y_FileType FileEND
          {$$ = $2;}
        ;

y_FilterType :
          ENDITEM y_FilterTypeChoicePair
          {$$ = new FilterType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_FilterTypeChoicePair :
          y_DualNestingIndexFilter_DualNestingIndexFilterType
          {$$ = new FilterTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FilterTypeType = FilterTypeChoicePair::DualNestingIndexFilterE;
           $$->FilterTypeValue.DualNestingIndexFilter = $1;
          }
        | y_SingleNestingIndexFilter_SingleNestingIndexFilterType
          {$$ = new FilterTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FilterTypeType = FilterTypeChoicePair::SingleNestingIndexFilterE;
           $$->FilterTypeValue.SingleNestingIndexFilter = $1;
          }
        ;

y_Filter_FilterType_0 :
          /* empty */
          {$$ = 0;}
        | FilterSTART y_FilterType FilterEND
          {$$ = $2;}
        ;

y_FinishingDesignator_WeldFinishingDesignatorEnumType_0 :
          /* empty */
          {$$ = 0;}
        | FinishingDesignatorSTART ENDITEM {yyReadData = 1;}
          y_WeldFinishingDesignatorEnumType FinishingDesignatorEND
          {$$ = $4;}
        ;

y_Finishing_WeldFinishingType_0 :
          /* empty */
          {$$ = 0;}
        | FinishingSTART y_WeldFinishingType FinishingEND
          {$$ = $2;}
        ;

y_FirstArticleStu_1200_FirstArticleStu_1200_Type :
          y_FirstArticleStu_1200_Type
          {$$ = $1;}
        ;

y_FirstArticleStu_1200_Type :
          y_FirstArticleStu_1200_TypeChoicePair
          {$$ = new FirstArticleStu_1200_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FirstArticleStu_1200_TypeChoicePair :
          y_AbsoluteMaximums_AbsoluteLimitsByUnitType
          {$$ = new FirstArticleStu_1200_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FirstArticleStu_1200_TypeType = FirstArticleStu_1200_TypeChoicePair::AbsoluteMaximumsE;
           $$->FirstArticleStu_1200_TypeValue.AbsoluteMaximums = $1;
          }
        | y_RelativeMaximum_XmlDecimal
          {$$ = new FirstArticleStu_1200_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FirstArticleStu_1200_TypeType = FirstArticleStu_1200_TypeChoicePair::RelativeMaximumE;
           $$->FirstArticleStu_1200_TypeValue.RelativeMaximum = $1;
          }
        ;

y_FirstArticleStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_InSpecRatio_XmlDecimal
          y_FirstArticleStu_1200_FirstArticleStu_1200_Type
          {$$ = new FirstArticleStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FirstArticleStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_FirstArticleStudyPlan_FirstArticleStudyPlanType :
          FirstArticleStudyPlanSTART y_FirstArticleStudyPlanType
          FirstArticleStudyPlanEND
          {$$ = $2;
           $$->printElement = "FirstArticleStudyPlan";
          }
        ;

y_FirstArticleStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_InSpecRatio_XmlDecimal_0
          y_AbsoluteMaximums_AbsoluteMeasurementsByUnitType_0
          y_RelativeMaximum_MeasuredDecimalType_0
          {$$ = new FirstArticleStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FirstArticleStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_FirstArticleStudyResults_FirstArticleStudyResultsType :
          FirstArticleStudyResultsSTART y_FirstArticleStudyResultsType
          FirstArticleStudyResultsEND
          {$$ = $2;
           $$->printElement = "FirstArticleStudyResults";
          }
        ;

y_FirstAxis_UserDefinedAxisType :
          FirstAxisSTART y_UserDefinedAxisType FirstAxisEND
          {$$ = $2;
           $$->printElement = "FirstAxis";
          }
        ;

y_FirstFeatureLocation_QIFReferenceType :
          FirstFeatureLocationSTART y_QIFReferenceType
          FirstFeatureLocationEND
          {$$ = $2;}
        ;

y_FirstFeatureZone_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | FirstFeatureZoneSTART y_QIFReferenceFullType FirstFeatureZoneEND
          {$$ = $2;}
        ;

y_FirstFeature_QIFReferenceFullType :
          FirstFeatureSTART y_QIFReferenceFullType FirstFeatureEND
          {$$ = $2;}
        ;

y_FirstLegLength_FractionType :
          FirstLegLengthSTART y_FractionType FirstLegLengthEND
          {$$ = $2;}
        ;

y_FirstLineOrigin_Point2dSimpleType :
          FirstLineOriginSTART y_Point2dSimpleType FirstLineOriginEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_FirstNestingIndex_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | FirstNestingIndexSTART y_LinearValueType FirstNestingIndexEND
          {$$ = $2;}
        ;

y_FixtureId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FixtureIdSTART y_QIFReferenceType FixtureIdEND
          {$$ = $2;}
        ;

y_FixtureType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          {$$ = new FixtureType($3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FixtureType attributes");
             }
           delete $1;
          }
        ;

y_Fixture_FixtureType :
          FixtureSTART y_FixtureType FixtureEND
          {$$ = $2;
           $$->printElement = "Fixture";
          }
        ;

y_FixturesType :
          y_LiztAttributePair ENDITEM y_LiztFixture_FixtureType_1_u
          {$$ = new FixturesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FixturesType attributes");
             }
           delete $1;
          }
        ;

y_Fixtures_FixturesType_0 :
          /* empty */
          {$$ = 0;}
        | FixturesSTART y_FixturesType FixturesEND
          {$$ = $2;}
        ;

y_FlatTaperCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new FlatTaperCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatTaperCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_FlatTaperCharacteristicDefinition_FlatTaperCharacteristicDefinitionType :
          FlatTaperCharacteristicDefinitionSTART
          y_FlatTaperCharacteristicDefinitionType
          FlatTaperCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "FlatTaperCharacteristicDefinition";
          }
        ;

y_FlatTaperCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new FlatTaperCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatTaperCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_FlatTaperCharacteristicItem_FlatTaperCharacteristicItemType :
          FlatTaperCharacteristicItemSTART
          y_FlatTaperCharacteristicItemType FlatTaperCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "FlatTaperCharacteristicItem";
          }
        ;

y_FlatTaperCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_Distance_MeasuredLinearValueType_0
          {$$ = new FlatTaperCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatTaperCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_FlatTaperCharacteristicMeasurement_FlatTaperCharacteristicMeasurementType :
          FlatTaperCharacteristicMeasurementSTART
          y_FlatTaperCharacteristicMeasurementType
          FlatTaperCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "FlatTaperCharacteristicMeasurement";
          }
        ;

y_FlatTaperCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          y_Distance_LinearValueType
          {$$ = new FlatTaperCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatTaperCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_FlatTaperCharacteristicNominal_FlatTaperCharacteristicNominalType :
          FlatTaperCharacteristicNominalSTART
          y_FlatTaperCharacteristicNominalType
          FlatTaperCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "FlatTaperCharacteristicNominal";
          }
        ;

y_FlatTaperCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new FlatTaperCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_FlatTaperCharacteristicStats_FlatTaperCharacteristicStatsEvalType :
          FlatTaperCharacteristicStatsSTART
          y_FlatTaperCharacteristicStatsEvalType
          FlatTaperCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "FlatTaperCharacteristicStats";
          }
        ;

y_FlatnessCharact_1055_FlatnessCharact_1055_Type :
          y_FlatnessCharact_1055_Type
          {$$ = $1;}
        ;

y_FlatnessCharact_1055_Type :
          y_FlatnessCharact_1055_TypeChoicePair
          {$$ = new FlatnessCharact_1055_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FlatnessCharact_1055_TypeChoicePair :
          y_FlatnessCharact_1085_FlatnessCharact_1085_Type
          {$$ = new FlatnessCharact_1055_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FlatnessCharact_1055_TypeType = FlatnessCharact_1055_TypeChoicePair::FlatnessCharact_1085E;
           $$->FlatnessCharact_1055_TypeValue.FlatnessCharact_1085 = $1;
          }
        | y_FlatnessCharact_1086_FlatnessCharact_1086_Type
          {$$ = new FlatnessCharact_1055_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->FlatnessCharact_1055_TypeType = FlatnessCharact_1055_TypeChoicePair::FlatnessCharact_1086E;
           $$->FlatnessCharact_1055_TypeValue.FlatnessCharact_1086 = $1;
          }
        ;

y_FlatnessCharact_1085_FlatnessCharact_1085_Type :
          y_FlatnessCharact_1085_Type
          {$$ = $1;}
        ;

y_FlatnessCharact_1085_Type :
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType_0
          {$$ = new FlatnessCharact_1085_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_FlatnessCharact_1086_FlatnessCharact_1086_Type :
          y_FlatnessCharact_1086_Type
          {$$ = $1;}
        ;

y_FlatnessCharact_1086_Type :
          y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType
          {$$ = new FlatnessCharact_1086_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FlatnessCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_FlatnessCharact_1055_FlatnessCharact_1055_Type
          y_MaterialCondition_MaterialModifierEnumType_0
          y_SizeCharacteristicDefinitionId_QIFReferenceType_0
          y_MaximumToleranceValue_LinearValueType_0
          y_NotConvex_XmlBoolean_0
          {$$ = new FlatnessCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatnessCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_FlatnessCharacteristicDefinition_FlatnessCharacteristicDefinitionType :
          FlatnessCharacteristicDefinitionSTART
          y_FlatnessCharacteristicDefinitionType
          FlatnessCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "FlatnessCharacteristicDefinition";
          }
        ;

y_FlatnessCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new FlatnessCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatnessCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_FlatnessCharacteristicItem_FlatnessCharacteristicItemType :
          FlatnessCharacteristicItemSTART y_FlatnessCharacteristicItemType
          FlatnessCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "FlatnessCharacteristicItem";
          }
        ;

y_FlatnessCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_Bonus_MeasuredLinearValueType_0
          y_MaxFlatness_MeasuredLinearValueType_0
          y_ZonePlane_MeasuredPlaneType_0
          {$$ = new FlatnessCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatnessCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_FlatnessCharacteristicMeasurement_FlatnessCharacteristicMeasurementType :
          FlatnessCharacteristicMeasurementSTART
          y_FlatnessCharacteristicMeasurementType
          FlatnessCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "FlatnessCharacteristicMeasurement";
          }
        ;

y_FlatnessCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new FlatnessCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FlatnessCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_FlatnessCharacteristicNominal_FlatnessCharacteristicNominalType :
          FlatnessCharacteristicNominalSTART
          y_FlatnessCharacteristicNominalType
          FlatnessCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "FlatnessCharacteristicNominal";
          }
        ;

y_FlatnessCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_BonusStats_StatsLinearType_0
          y_MaxFlatnessStats_StatsLinearType_0
          {$$ = new FlatnessCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
          }
        ;

y_FlatnessCharacteristicStats_FlatnessCharacteristicStatsEvalType :
          FlatnessCharacteristicStatsSTART
          y_FlatnessCharacteristicStatsEvalType
          FlatnessCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "FlatnessCharacteristicStats";
          }
        ;

y_FocalSpotSize_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | FocalSpotSizeSTART y_LinearValueType FocalSpotSizeEND
          {$$ = $2;}
        ;

y_FolderAssemblyType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FolderIds_ArrayReferenceType_0
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_CharacteristicNominalIds_ArrayReferenceFullType_0
          y_NoteIds_ArrayReferenceFullType_0
          y_PartNoteIds_ArrayReferenceFullType_0
          y_DatumDefinitionIds_ArrayReferenceFullType_0
          y_DatumTargetDefinitionIds_ArrayReferenceFullType_0
          y_DatumReferenceFrameIds_ArrayReferenceFullType_0
          y_BodyIds_ArrayReferenceType_0
          y_CoordinateSystemIds_ArrayReferenceType_0
          y_AuxiliaryIds_ArrayReferenceType_0
          y_ViewIds_ArrayReferenceType_0
          y_PointCloudIds_ArrayReferenceType_0
          y_ComponentIds_ArrayReferenceType
          {$$ = new FolderAssemblyType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FolderAssemblyType attributes");
             }
           delete $1;
          }
        ;

y_FolderAssembly_FolderAssemblyType :
          FolderAssemblySTART y_FolderAssemblyType FolderAssemblyEND
          {$$ = $2;
           $$->printElement = "FolderAssembly";
          }
        ;

y_FolderIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | FolderIdsSTART y_ArrayReferenceType FolderIdsEND
          {$$ = $2;}
        ;

y_FolderPartType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FolderIds_ArrayReferenceType_0
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_CharacteristicNominalIds_ArrayReferenceFullType_0
          y_NoteIds_ArrayReferenceFullType_0
          y_PartNoteIds_ArrayReferenceFullType_0
          y_DatumDefinitionIds_ArrayReferenceFullType_0
          y_DatumTargetDefinitionIds_ArrayReferenceFullType_0
          y_DatumReferenceFrameIds_ArrayReferenceFullType_0
          y_BodyIds_ArrayReferenceType_0
          y_CoordinateSystemIds_ArrayReferenceType_0
          y_AuxiliaryIds_ArrayReferenceType_0
          y_ViewIds_ArrayReferenceType_0
          y_PointCloudIds_ArrayReferenceType_0
          {$$ = new FolderPartType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FolderPartType attributes");
             }
           delete $1;
          }
        ;

y_FolderPart_FolderPartType :
          FolderPartSTART y_FolderPartType FolderPartEND
          {$$ = $2;
           $$->printElement = "FolderPart";
          }
        | FolderPartSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new FolderPartType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "FolderPart";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad FolderPartType attributes");
             }
           delete $2;
          }
        ;

y_FoldersAssemblyType :
          y_LiztAttributePair ENDITEM
          y_LiztFolderAssembly_FolderAssemblyType_1_u
          {$$ = new FoldersAssemblyType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FoldersAssemblyType attributes");
             }
           delete $1;
          }
        ;

y_FoldersAssembly_FoldersAssemblyType_0 :
          /* empty */
          {$$ = 0;}
        | FoldersAssemblySTART y_FoldersAssemblyType FoldersAssemblyEND
          {$$ = $2;}
        ;

y_FoldersPartType :
          y_LiztAttributePair ENDITEM y_LiztFolderPart_FolderPartType_1_u
          {$$ = new FoldersPartType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FoldersPartType attributes");
             }
           delete $1;
          }
        ;

y_FoldersPart_FoldersPartType_0 :
          /* empty */
          {$$ = 0;}
        | FoldersPartSTART y_FoldersPartType FoldersPartEND
          {$$ = $2;}
        ;

y_FontType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlString y_Size_NaturalType
          y_Alignment_AlignmentEnumType_0
          {$$ = new FontType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FontType attributes");
             }
           delete $1;
          }
        ;

y_Font_FontType :
          FontSTART y_FontType FontEND
          {$$ = $2;}
        ;

y_FontsType :
          y_LiztAttributePair ENDITEM y_LiztFont_FontType_1_u
          {$$ = new FontsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FontsType attributes");
             }
           delete $1;
          }
        ;

y_Fonts_FontsType :
          FontsSTART y_FontsType FontsEND
          {$$ = $2;}
        ;

y_ForceAbsoluteLinearity_MeasuredForceValueType :
          ForceAbsoluteLinearitySTART y_MeasuredForceValueType
          ForceAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_ForceCharacteri_1056_ForceCharacteri_1056_Type :
          y_ForceCharacteri_1056_Type
          {$$ = $1;}
        ;

y_ForceCharacteri_1056_Type :
          y_ForceCharacteri_1056_TypeChoicePair
          {$$ = new ForceCharacteri_1056_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ForceCharacteri_1056_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new ForceCharacteri_1056_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ForceCharacteri_1056_TypeType = ForceCharacteri_1056_TypeChoicePair::NonToleranceE;
           $$->ForceCharacteri_1056_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_ForceToleranceType
          {$$ = new ForceCharacteri_1056_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ForceCharacteri_1056_TypeType = ForceCharacteri_1056_TypeChoicePair::ToleranceE;
           $$->ForceCharacteri_1056_TypeValue.Tolerance = $1;
          }
        ;

y_ForceCriterion_CriterionForceType_0 :
          /* empty */
          {$$ = 0;}
        | ForceCriterionSTART y_CriterionForceType ForceCriterionEND
          {$$ = $2;
           $$->printElement = "ForceCriterion";
          }
        ;

y_ForceLimit_ForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | ForceLimitSTART y_ForceValueType ForceLimitEND
          {$$ = $2;}
        ;

y_ForceMeasurement_MeasuredForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | ForceMeasurementSTART y_MeasuredForceValueType
          ForceMeasurementEND
          {$$ = $2;}
        ;

y_ForceStatsSummaries_SummariesStatisticsForceType_0 :
          /* empty */
          {$$ = 0;}
        | ForceStatsSummariesSTART y_SummariesStatisticsForceType
          ForceStatsSummariesEND
          {$$ = $2;}
        ;

y_ForceStatsSummary_SummaryStatisticsForceType :
          ForceStatsSummarySTART y_SummaryStatisticsForceType
          ForceStatsSummaryEND
          {$$ = $2;
           $$->printElement = "ForceStatsSummary";
          }
        ;

y_ForceToleranceT_1015_ForceToleranceT_1015_Type :
          y_ForceToleranceT_1015_Type
          {$$ = $1;}
        ;

y_ForceToleranceT_1015_Type :
          y_ForceToleranceT_1015_TypeChoicePair
          {$$ = new ForceToleranceT_1015_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ForceToleranceT_1015_TypeChoicePair :
          y_ForceToleranceT_1032_ForceToleranceT_1032_Type
          {$$ = new ForceToleranceT_1015_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ForceToleranceT_1015_TypeType = ForceToleranceT_1015_TypeChoicePair::ForceToleranceT_1032E;
           $$->ForceToleranceT_1015_TypeValue.ForceToleranceT_1032 = $1;
          }
        | y_MinValue_ForceValueType
          {$$ = new ForceToleranceT_1015_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ForceToleranceT_1015_TypeType = ForceToleranceT_1015_TypeChoicePair::MinValueE;
           $$->ForceToleranceT_1015_TypeValue.MinValue = $1;
          }
        ;

y_ForceToleranceT_1032_ForceToleranceT_1032_Type :
          y_ForceToleranceT_1032_Type
          {$$ = $1;}
        ;

y_ForceToleranceT_1032_Type :
          y_MaxValue_ForceValueType y_MinValue_ForceValueType_0
          {$$ = new ForceToleranceT_1032_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ForceToleranceType :
          ENDITEM y_ForceToleranceT_1015_ForceToleranceT_1015_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new ForceToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ForceUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new ForceUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ForceUnit_ForceUnitType :
          ForceUnitSTART y_ForceUnitType ForceUnitEND
          {$$ = $2;}
        ;

y_ForceUnit_ForceUnitType_0 :
          /* empty */
          {$$ = 0;}
        | ForceUnitSTART y_ForceUnitType ForceUnitEND
          {$$ = $2;}
        ;

y_ForceValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new ForceValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new ForceValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ForceValueType attributes");
             }
           delete $1;
          }
        ;

y_FormVariance_XmlToken :
          FormVarianceSTART ENDITEM {yyReadData = 1;} y_XmlToken
          FormVarianceEND
          {$$ = $4;}
        ;

y_Form_DisplayStyleFormEnumType :
          FormSTART ENDITEM {yyReadData = 1;} y_DisplayStyleFormEnumType
          FormEND
          {$$ = $4;}
        ;

y_Form_HatchStyleFormEnumType :
          FormSTART ENDITEM {yyReadData = 1;} y_HatchStyleFormEnumType
          FormEND
          {$$ = $4;}
        ;

y_Form_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | FormSTART y_MeasuredLinearValueType FormEND
          {$$ = $2;}
        ;

y_Form_SimplifiedRepresentationFormEnumType :
          FormSTART ENDITEM {yyReadData = 1;}
          y_SimplifiedRepresentationFormEnumType FormEND
          {$$ = $4;}
        ;

y_FormalStandardId_QIFReferenceType :
          FormalStandardIdSTART y_QIFReferenceType FormalStandardIdEND
          {$$ = $2;}
        ;

y_Format_DigitalModelFormatType_0 :
          /* empty */
          {$$ = 0;}
        | FormatSTART y_DigitalModelFormatType FormatEND
          {$$ = $2;}
        ;

y_FourthCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | FourthCompositeSegmentPositionDefinitionSTART
          y_CompositeSegmentPositionDefinitionType
          FourthCompositeSegmentPositionDefinitionEND
          {$$ = $2;
           $$->printElement = "FourthCompositeSegmentPositionDefinition";
          }
        ;

y_FourthCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | FourthCompositeSegmentPositionMeasurementSTART
          y_CompositeSegmentPositionMeasurementType
          FourthCompositeSegmentPositionMeasurementEND
          {$$ = $2;
           $$->printElement = "FourthCompositeSegmentPositionMeasurement";
          }
        ;

y_FourthCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | FourthCompositeSegmentPositionStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentPositionStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "FourthCompositeSegmentPositionStats";
          }
        | FourthCompositeSegmentPositionStatsSTART
          y_CompositeSegmentPositionStatsEvalType
          FourthCompositeSegmentPositionStatsEND
          {$$ = $2;
           $$->printElement = "FourthCompositeSegmentPositionStats";
          }
        ;

y_FourthCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | FourthCompositeSegmentProfileDefinitionSTART
          y_CompositeSegmentProfileDefinitionType
          FourthCompositeSegmentProfileDefinitionEND
          {$$ = $2;
           $$->printElement = "FourthCompositeSegmentProfileDefinition";
          }
        ;

y_FourthCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | FourthCompositeSegmentProfileMeasurementSTART
          y_CompositeSegmentProfileMeasurementType
          FourthCompositeSegmentProfileMeasurementEND
          {$$ = $2;
           $$->printElement = "FourthCompositeSegmentProfileMeasurement";
          }
        ;

y_FourthCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | FourthCompositeSegmentProfileStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentProfileStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "FourthCompositeSegmentProfileStats";
          }
        | FourthCompositeSegmentProfileStatsSTART
          y_CompositeSegmentProfileStatsEvalType
          FourthCompositeSegmentProfileStatsEND
          {$$ = $2;
           $$->printElement = "FourthCompositeSegmentProfileStats";
          }
        ;

y_FractionType :
          ENDITEM y_Numerator_NaturalType y_Denominator_NaturalType
          {$$ = new FractionType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Fraction_XmlDecimal :
          FractionSTART ENDITEM {yyReadData = 1;} y_XmlDecimal FractionEND
          {$$ = $4;}
        ;

y_FrameCircularType :
          ENDITEM y_XY_Point2dSimpleType y_Radius_XmlDouble
          {$$ = new FrameCircularType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_XY_Point2dSimpleType
          y_Radius_XmlDouble
          {$$ = new FrameCircularType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FrameCircularType attributes");
             }
           delete $1;
          }
        ;

y_FrameCircular_FrameCircularType :
          FrameCircularSTART y_FrameCircularType FrameCircularEND
          {$$ = $2;
           $$->printElement = "FrameCircular";
          }
        ;

y_FrameFlagType :
          ENDITEM y_XY_Point2dSimpleType y_Width_XmlDouble
          y_Height_XmlDouble
          {$$ = new FrameFlagType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_XY_Point2dSimpleType
          y_Width_XmlDouble y_Height_XmlDouble
          {$$ = new FrameFlagType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FrameFlagType attributes");
             }
           delete $1;
          }
        ;

y_FrameFlag_FrameFlagType :
          FrameFlagSTART y_FrameFlagType FrameFlagEND
          {$$ = $2;
           $$->printElement = "FrameFlag";
          }
        ;

y_FrameHexagonalType :
          ENDITEM y_LiztPoint_Point2dSimpleType_6_6_Check
          {$$ = new FrameHexagonalType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_FrameHexagonal_FrameHexagonalType :
          FrameHexagonalSTART y_FrameHexagonalType FrameHexagonalEND
          {$$ = $2;
           $$->printElement = "FrameHexagonal";
          }
        ;

y_FrameIrregularFormType :
          ENDITEM y_Points_ArrayPoint2dType
          {$$ = new FrameIrregularFormType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_FrameIrregularForm_FrameIrregularFormType :
          FrameIrregularFormSTART y_FrameIrregularFormType
          FrameIrregularFormEND
          {$$ = $2;
           $$->printElement = "FrameIrregularForm";
          }
        ;

y_FrameOctagonalType :
          ENDITEM y_LiztPoint_Point2dSimpleType_8_8_Check
          {$$ = new FrameOctagonalType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_FrameOctagonal_FrameOctagonalType :
          FrameOctagonalSTART y_FrameOctagonalType FrameOctagonalEND
          {$$ = $2;
           $$->printElement = "FrameOctagonal";
          }
        ;

y_FramePentagonalType :
          ENDITEM y_LiztPoint_Point2dSimpleType_5_5_Check
          {$$ = new FramePentagonalType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_FramePentagonal_FramePentagonalType :
          FramePentagonalSTART y_FramePentagonalType FramePentagonalEND
          {$$ = $2;
           $$->printElement = "FramePentagonal";
          }
        ;

y_FrameRectangularType :
          ENDITEM y_XY_Point2dSimpleType y_Width_XmlDouble
          y_Height_XmlDouble
          {$$ = new FrameRectangularType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_FrameRectangular_FrameRectangularType :
          FrameRectangularSTART y_FrameRectangularType FrameRectangularEND
          {$$ = $2;
           $$->printElement = "FrameRectangular";
          }
        ;

y_FrameTriangleType :
          ENDITEM y_LiztPoint_Point2dSimpleType_3_3_Check
          {$$ = new FrameTriangleType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_FrameTriangle_FrameTriangleType :
          FrameTriangleSTART y_FrameTriangleType FrameTriangleEND
          {$$ = $2;
           $$->printElement = "FrameTriangle";
          }
        ;

y_FrameWeldSymbolTailType :
          ENDITEM y_UpperPoint_Point2dSimpleType
          y_LowerPoint_Point2dSimpleType
          {$$ = new FrameWeldSymbolTailType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_FrameWeldSymbolType :
          ENDITEM y_ReferenceLineBeginPoint_Point2dSimpleType
          y_ReferenceLineEndPoint_Point2dSimpleType
          y_Tail_FrameWeldSymbolTailType_0
          y_MainSymbol_WeldMainSymbolType_0
          y_SupplementarySymbol_WeldSupplementarySymbolType_0
          y_ArrowSideContourSymbol_WeldContourSymbolType_0
          y_OtherSideContourSymbol_WeldContourSymbolType_0
          {$$ = new FrameWeldSymbolType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_FrameWeldSymbol_FrameWeldSymbolType :
          FrameWeldSymbolSTART y_FrameWeldSymbolType FrameWeldSymbolEND
          {$$ = $2;
           $$->printElement = "FrameWeldSymbol";
          }
        ;

y_Frame_substituteType :
          y_FrameCircular_FrameCircularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FrameFlag_FrameFlagType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FrameHexagonal_FrameHexagonalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FrameIrregularForm_FrameIrregularFormType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FrameOctagonal_FrameOctagonalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FramePentagonal_FramePentagonalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FrameRectangular_FrameRectangularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FrameTriangle_FrameTriangleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FrameWeldSymbol_FrameWeldSymbolType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_FramesType :
          y_LiztAttributePair ENDITEM y_LiztFrame_substituteType_1_u
          {$$ = new FramesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FramesType attributes");
             }
           delete $1;
          }
        ;

y_Frames_FramesType_0 :
          /* empty */
          {$$ = 0;}
        | FramesSTART y_FramesType FramesEND
          {$$ = $2;}
        ;

y_FreeState_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | FreeStateSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          FreeStateEND
          {$$ = $4;}
        ;

y_FrequencyResponse_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | FrequencyResponseSTART y_UserDefinedUnitValueType
          FrequencyResponseEND
          {$$ = $2;}
        ;

y_FromCone_CircleFromConeType :
          FromConeSTART y_CircleFromConeType FromConeEND
          {$$ = $2;
           $$->printElement = "FromCone";
          }
        ;

y_FromCone_PointFeatureFromConeType :
          FromConeSTART y_PointFeatureFromConeType FromConeEND
          {$$ = $2;
           $$->printElement = "FromCone";
          }
        ;

y_FromCurveZoneId_QIFReferenceFullType :
          FromCurveZoneIdSTART y_QIFReferenceFullType FromCurveZoneIdEND
          {$$ = $2;}
        ;

y_FromCylinder_ThreadedFeatureFromCylinderType :
          FromCylinderSTART y_ThreadedFeatureFromCylinderType
          FromCylinderEND
          {$$ = $2;
           $$->printElement = "FromCylinder";
          }
        ;

y_FromPointZoneId_QIFReferenceFullType :
          FromPointZoneIdSTART y_QIFReferenceFullType FromPointZoneIdEND
          {$$ = $2;}
        ;

y_FromScan_CircleFromScanType :
          FromScanSTART y_CircleFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_CircularArcFromScanType :
          FromScanSTART y_CircularArcFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_ConeFromScanType :
          FromScanSTART y_ConeFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_CylinderFromScanType :
          FromScanSTART y_CylinderFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_EdgePointFromScanType :
          FromScanSTART y_EdgePointFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_EllipseFromScanType :
          FromScanSTART y_EllipseFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_EllipticalArcFromScanType :
          FromScanSTART y_EllipticalArcFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_LineFromScanType :
          FromScanSTART y_LineFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_OppositeAngledLinesFromScanType :
          FromScanSTART y_OppositeAngledLinesFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_OppositeAngledPlanesFromScanType :
          FromScanSTART y_OppositeAngledPlanesFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_OppositeParallelLinesFromScanType :
          FromScanSTART y_OppositeParallelLinesFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_OppositeParallelPlanesFromScanType :
          FromScanSTART y_OppositeParallelPlanesFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_PointDefinedCurveFromScanType :
          FromScanSTART y_PointDefinedCurveFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_PointFeatureFromScanType :
          FromScanSTART y_PointFeatureFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_SphereFromScanType :
          FromScanSTART y_SphereFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FromScan_TorusFromScanType :
          FromScanSTART y_TorusFromScanType FromScanEND
          {$$ = $2;
           $$->printElement = "FromScan";
          }
        ;

y_FullAngle_AngularValueType :
          FullAngleSTART y_AngularValueType FullAngleEND
          {$$ = $2;}
        ;

y_FullAngle_MeasuredAngularValueType :
          FullAngleSTART y_MeasuredAngularValueType FullAngleEND
          {$$ = $2;}
        ;

y_FunctionDiscreteType :
          y_LiztAttributePair ENDITEM y_DomainValues_ListDoubleType
          y_RangeValues_ListDoubleType
          {$$ = new FunctionDiscreteType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad FunctionDiscreteType attributes");
             }
           delete $1;
          }
        ;

y_FunctionalSizeStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | FunctionalSizeStatsSTART y_StatsLinearType FunctionalSizeStatsEND
          {$$ = $2;
           $$->printElement = "FunctionalSizeStats";
          }
        ;

y_FunctionalSize_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | FunctionalSizeSTART y_MeasuredLinearValueType FunctionalSizeEND
          {$$ = $2;}
        ;

y_GDTEnumType :
          DATASTRING
          {$$ = new GDTEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad GDTEnumType value");
          }
        ;

y_GDT_GDTEnumType_0 :
          /* empty */
          {$$ = 0;}
        | GDTSTART ENDITEM {yyReadData = 1;} y_GDTEnumType GDTEND
          {$$ = $4;}
        ;

y_GageDeviceType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          {$$ = new GageDeviceType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GageDeviceType attributes");
             }
           delete $1;
          }
        ;

y_GageDevice_GageDeviceType :
          GageDeviceSTART y_GageDeviceType GageDeviceEND
          {$$ = $2;
           $$->printElement = "GageDevice";
          }
        ;

y_GageMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new GageMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GageMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_GageMeasureFeatureMethod_GageMeasureFeatureMethodType :
          GageMeasureFeatureMethodSTART y_GageMeasureFeatureMethodType
          GageMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "GageMeasureFeatureMethod";
          }
        | GageMeasureFeatureMethodSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new GageMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "GageMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad GageMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_GageRandRStudyEnumType :
          DATASTRING
          {$$ = new GageRandRStudyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad GageRandRStudyEnumType value");
          }
        ;

y_GageRandRStudyP_1201_GageRandRStudyP_1201_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_GageRandRStudyP_1201_Type
          {$$ = $1;}
        ;

y_GageRandRStudyP_1201_Type :
          y_GageRandRStudyP_1201_TypeChoicePair
          {$$ = new GageRandRStudyP_1201_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_GageRandRStudyP_1201_TypeChoicePair :
          y_MaximumAbsoluteAppraiserVariation_CriteriaByUnitType
          {$$ = new GageRandRStudyP_1201_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GageRandRStudyP_1201_TypeType = GageRandRStudyP_1201_TypeChoicePair::MaximumAbsoluteAppraiserVariationE;
           $$->GageRandRStudyP_1201_TypeValue.MaximumAbsoluteAppraiserVariation = $1;
          }
        | y_MaximumRelativeAppraiserVariation_CriterionDecimalType
          {$$ = new GageRandRStudyP_1201_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GageRandRStudyP_1201_TypeType = GageRandRStudyP_1201_TypeChoicePair::MaximumRelativeAppraiserVariationE;
           $$->GageRandRStudyP_1201_TypeValue.MaximumRelativeAppraiserVariation = $1;
          }
        ;

y_GageRandRStudyP_1202_GageRandRStudyP_1202_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_GageRandRStudyP_1202_Type
          {$$ = $1;}
        ;

y_GageRandRStudyP_1202_Type :
          y_GageRandRStudyP_1202_TypeChoicePair
          {$$ = new GageRandRStudyP_1202_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_GageRandRStudyP_1202_TypeChoicePair :
          y_MaximumAbsoluteEquipmentVariation_CriteriaByUnitType
          {$$ = new GageRandRStudyP_1202_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GageRandRStudyP_1202_TypeType = GageRandRStudyP_1202_TypeChoicePair::MaximumAbsoluteEquipmentVariationE;
           $$->GageRandRStudyP_1202_TypeValue.MaximumAbsoluteEquipmentVariation = $1;
          }
        | y_MaximumRelativeEquipmentVariation_CriterionDecimalType
          {$$ = new GageRandRStudyP_1202_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GageRandRStudyP_1202_TypeType = GageRandRStudyP_1202_TypeChoicePair::MaximumRelativeEquipmentVariationE;
           $$->GageRandRStudyP_1202_TypeValue.MaximumRelativeEquipmentVariation = $1;
          }
        ;

y_GageRandRStudyP_1203_GageRandRStudyP_1203_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_GageRandRStudyP_1203_Type
          {$$ = $1;}
        ;

y_GageRandRStudyP_1203_Type :
          y_GageRandRStudyP_1203_TypeChoicePair
          {$$ = new GageRandRStudyP_1203_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_GageRandRStudyP_1203_TypeChoicePair :
          y_MaximumAbsoluteTotalRandR_CriteriaByUnitType
          {$$ = new GageRandRStudyP_1203_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GageRandRStudyP_1203_TypeType = GageRandRStudyP_1203_TypeChoicePair::MaximumAbsoluteTotalRandRE;
           $$->GageRandRStudyP_1203_TypeValue.MaximumAbsoluteTotalRandR = $1;
          }
        | y_MaximumRelativeTotalRandR_CriterionDecimalType
          {$$ = new GageRandRStudyP_1203_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GageRandRStudyP_1203_TypeType = GageRandRStudyP_1203_TypeChoicePair::MaximumRelativeTotalRandRE;
           $$->GageRandRStudyP_1203_TypeValue.MaximumRelativeTotalRandR = $1;
          }
        ;

y_GageRandRStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_RandRStudyType_GageRandRStudyEnumType
          y_NumberOfAppraisers_XmlPositiveInteger
          y_NumberOfParts_XmlPositiveInteger
          y_NumberOfTrials_XmlPositiveInteger
          y_GageRandRStudyP_1201_GageRandRStudyP_1201_Type_0
          y_GageRandRStudyP_1202_GageRandRStudyP_1202_Type_0
          y_GageRandRStudyP_1203_GageRandRStudyP_1203_Type_0
          {$$ = new GageRandRStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GageRandRStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_GageRandRStudyPlan_GageRandRStudyPlanType :
          GageRandRStudyPlanSTART y_GageRandRStudyPlanType
          GageRandRStudyPlanEND
          {$$ = $2;
           $$->printElement = "GageRandRStudyPlan";
          }
        ;

y_GageRandRStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_NumberOfAppraisers_XmlPositiveInteger
          y_NumberOfParts_XmlPositiveInteger
          y_NumberOfTrials_XmlPositiveInteger
          {$$ = new GageRandRStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GageRandRStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_GageRandRStudyResults_GageRandRStudyResultsType :
          GageRandRStudyResultsSTART y_GageRandRStudyResultsType
          GageRandRStudyResultsEND
          {$$ = $2;
           $$->printElement = "GageRandRStudyResults";
          }
        ;

y_GageRandR_StatsMeasuredDecimalType :
          GageRandRSTART y_StatsMeasuredDecimalType GageRandREND
          {$$ = $2;
           $$->printElement = "GageRandR";
          }
        ;

y_Generatrix_Curve13CoreType :
          GeneratrixSTART y_Curve13CoreType GeneratrixEND
          {$$ = $2;}
        ;

y_GeometricCharac_1057_GeometricCharac_1057_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_GeometricCharac_1057_Type
          {$$ = $1;}
        ;

y_GeometricCharac_1057_Type :
          y_GeometricCharac_1057_TypeChoicePair
          {$$ = new GeometricCharac_1057_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_GeometricCharac_1057_TypeChoicePair :
          y_AssociatedTolerancedFeatureSpecificationElement_AssociatedTolerancedFeatureSpecificationElementEnumType
          {$$ = new GeometricCharac_1057_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GeometricCharac_1057_TypeType = GeometricCharac_1057_TypeChoicePair::AssociatedTolerancedFeatureSpecificationElementE;
           $$->GeometricCharac_1057_TypeValue.AssociatedTolerancedFeatureSpecificationElement = $1;
          }
        | y_ReferenceFeatureAssociationSpecificationElement_ReferenceFeatureAssociationSpecificationElementType
          {$$ = new GeometricCharac_1057_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GeometricCharac_1057_TypeType = GeometricCharac_1057_TypeChoicePair::ReferenceFeatureAssociationSpecificationElementE;
           $$->GeometricCharac_1057_TypeValue.ReferenceFeatureAssociationSpecificationElement = $1;
          }
        ;

y_GeometricCharacteristicIds_ArrayReferenceFullType :
          GeometricCharacteristicIdsSTART y_ArrayReferenceFullType
          GeometricCharacteristicIdsEND
          {$$ = $2;}
        ;

y_GeometricCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          {$$ = new GeometricCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
          }
        ;

y_GeometricCharacteristicStats_GeometricCharacteristicStatsEvalType :
          GeometricCharacteristicStatsSTART
          y_GeometricCharacteristicStatsEvalType
          GeometricCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "GeometricCharacteristicStats";
          }
        ;

y_GeometricCharacteristicValue_XmlBoolean :
          GeometricCharacteristicValueSTART ENDITEM {yyReadData = 1;}
          y_XmlBoolean GeometricCharacteristicValueEND
          {$$ = $4;}
        ;

y_GeometricCharacteristicValue_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | GeometricCharacteristicValueSTART ENDITEM {yyReadData = 1;}
          y_XmlBoolean GeometricCharacteristicValueEND
          {$$ = $4;}
        ;

y_GeometrySetType :
          ENDITEM y_PointSet_PointSetType_0 y_Curve12Set_Curve12SetType_0
          y_Curve13Set_Curve13SetType_0 y_SurfaceSet_SurfaceSetType_0
          y_CurveMeshSet_CurveMeshSetType_0
          y_SurfaceMeshSet_SurfaceMeshSetType_0
          {$$ = new GeometrySetType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_GeometrySet_GeometrySetType_0 :
          /* empty */
          {$$ = 0;}
        | GeometrySetSTART ENDWHOLEITEM
          {$$ = new GeometrySetType();
           yyUnrefMap[$$] = $$;
          }
        | GeometrySetSTART y_GeometrySetType GeometrySetEND
          {$$ = $2;}
        ;

y_GoodnessOfFitThreshold_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | GoodnessOfFitThresholdSTART ENDITEM {yyReadData = 1;}
          y_XmlDecimal GoodnessOfFitThresholdEND
          {$$ = $4;}
        ;

y_GoodnessOfFit_MeasuredDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | GoodnessOfFitSTART y_MeasuredDecimalType GoodnessOfFitEND
          {$$ = $2;}
        ;

y_GoodnessOfFit_StatsMeasuredDecimalType :
          GoodnessOfFitSTART y_StatsMeasuredDecimalType GoodnessOfFitEND
          {$$ = $2;
           $$->printElement = "GoodnessOfFit";
          }
        ;

y_Grade_XmlToken :
          GradeSTART ENDITEM {yyReadData = 1;} y_XmlToken GradeEND
          {$$ = $4;}
        ;

y_GraphicsType :
          ENDITEM y_Polylines_Polylines2dType_0 y_Areas_Areas2dType_0
          {$$ = new GraphicsType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Graphics_GraphicsType_0 :
          /* empty */
          {$$ = 0;}
        | GraphicsSTART ENDWHOLEITEM
          {$$ = new GraphicsType();
           yyUnrefMap[$$] = $$;
          }
        | GraphicsSTART y_GraphicsType GraphicsEND
          {$$ = $2;}
        ;

y_GreaterOrEqualType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_2_Check
          {$$ = new GreaterOrEqualType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_GreaterOrEqual_GreaterOrEqualType :
          GreaterOrEqualSTART y_GreaterOrEqualType GreaterOrEqualEND
          {$$ = $2;
           $$->printElement = "GreaterOrEqual";
          }
        ;

y_GreaterThanType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_2_Check
          {$$ = new GreaterThanType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_GreaterThan_GreaterThanType :
          GreaterThanSTART y_GreaterThanType GreaterThanEND
          {$$ = $2;
           $$->printElement = "GreaterThan";
          }
        ;

y_Groove_FractionType_0 :
          /* empty */
          {$$ = 0;}
        | GrooveSTART y_FractionType GrooveEND
          {$$ = $2;}
        ;

y_GroupFeatureDef_1104_GroupFeatureDef_1104_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_GroupFeatureDef_1104_Type
          {$$ = $1;}
        ;

y_GroupFeatureDef_1104_Type :
          y_GroupFeatureDef_1104_TypeChoicePair
          {$$ = new GroupFeatureDef_1104_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_GroupFeatureDef_1104_TypeChoicePair :
          y_IsCounterboredHole_XmlBoolean
          {$$ = new GroupFeatureDef_1104_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GroupFeatureDef_1104_TypeType = GroupFeatureDef_1104_TypeChoicePair::IsCounterboredHoleE;
           $$->GroupFeatureDef_1104_TypeValue.IsCounterboredHole = $1;
          }
        | y_IsCountersunkHole_XmlBoolean
          {$$ = new GroupFeatureDef_1104_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GroupFeatureDef_1104_TypeType = GroupFeatureDef_1104_TypeChoicePair::IsCountersunkHoleE;
           $$->GroupFeatureDef_1104_TypeValue.IsCountersunkHole = $1;
          }
        | y_IsSpotface_XmlBoolean
          {$$ = new GroupFeatureDef_1104_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->GroupFeatureDef_1104_TypeType = GroupFeatureDef_1104_TypeChoicePair::IsSpotfaceE;
           $$->GroupFeatureDef_1104_TypeValue.IsSpotface = $1;
          }
        ;

y_GroupFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_IsProfileGroup_XmlBoolean_0 y_IsRunoutGroup_XmlBoolean_0
          y_GroupFeatureDef_1104_GroupFeatureDef_1104_Type_0
          {$$ = new GroupFeatureDefinitionType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GroupFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_GroupFeatureDefinition_GroupFeatureDefinitionType :
          GroupFeatureDefinitionSTART y_GroupFeatureDefinitionType
          GroupFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "GroupFeatureDefinition";
          }
        | GroupFeatureDefinitionSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new GroupFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "GroupFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad GroupFeatureDefinitionType attributes");
             }
           delete $2;
          }
        ;

y_GroupFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new GroupFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GroupFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_GroupFeatureItem_GroupFeatureItemType :
          GroupFeatureItemSTART y_GroupFeatureItemType GroupFeatureItemEND
          {$$ = $2;
           $$->printElement = "GroupFeatureItem";
          }
        ;

y_GroupFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          {$$ = new GroupFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GroupFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_GroupFeatureMeasurement_GroupFeatureMeasurementType :
          GroupFeatureMeasurementSTART y_GroupFeatureMeasurementType
          GroupFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "GroupFeatureMeasurement";
          }
        | GroupFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new GroupFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "GroupFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad GroupFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_GroupFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureNominalIds_ArrayReferenceFullType
          {$$ = new GroupFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad GroupFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_GroupFeatureNominal_GroupFeatureNominalType :
          GroupFeatureNominalSTART y_GroupFeatureNominalType
          GroupFeatureNominalEND
          {$$ = $2;
           $$->printElement = "GroupFeatureNominal";
          }
        ;

y_GroupID_I2Type_0 :
          /* empty */
          {$$ = 0;}
        | GroupIDSTART y_I2Type GroupIDEND
          {$$ = $2;
           $2->I2TypeCheck();
           if ($2->bad)
             return yyerror("bad I2Type value");
          }
        ;

y_GroupId_QIFReferenceFullType :
          GroupIdSTART y_QIFReferenceFullType GroupIdEND
          {$$ = $2;}
        ;

y_HalfAngle_AngularValueType :
          HalfAngleSTART y_AngularValueType HalfAngleEND
          {$$ = $2;}
        ;

y_HalfAngle_MeasuredAngularValueType :
          HalfAngleSTART y_MeasuredAngularValueType HalfAngleEND
          {$$ = $2;}
        ;

y_HaltActionType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_PreferredActionMethodId_QIFReferenceType_0
          y_AlternativeActionMethodIds_ArrayReferenceType_0
          y_PreferredResourceIds_ArrayReferenceType_0
          {$$ = new HaltActionType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_Halt_HaltActionType :
          HaltSTART ENDWHOLEITEM
          {$$ = new HaltActionType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "Halt";
          }
        | HaltSTART y_HaltActionType HaltEND
          {$$ = $2;
           $$->printElement = "Halt";
          }
        ;

y_HatchPatternType :
          ENDITEM y_LineStyle_LineStyleType_0
          y_FirstLineOrigin_Point2dSimpleType
          y_SecondLineOrigin_Point2dSimpleType y_Angle_AngularValueType
          y_Color_ColorType_0
          {$$ = new HatchPatternType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_HatchPatternsType :
          y_LiztAttributePair ENDITEM y_LiztPattern_HatchPatternType_1_u
          {$$ = new HatchPatternsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad HatchPatternsType attributes");
             }
           delete $1;
          }
        ;

y_HatchStyleFormEnumType :
          DATASTRING
          {$$ = new HatchStyleFormEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad HatchStyleFormEnumType value");
          }
        ;

y_HatchStyleId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | HatchStyleIdSTART y_QIFReferenceType HatchStyleIdEND
          {$$ = $2;}
        ;

y_HatchStyleSetType :
          y_LiztAttributePair ENDITEM y_LiztHatchStyle_HatchStyleType_1_u
          {$$ = new HatchStyleSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad HatchStyleSetType attributes");
             }
           delete $1;
          }
        ;

y_HatchStyleSet_HatchStyleSetType_0 :
          /* empty */
          {$$ = 0;}
        | HatchStyleSetSTART y_HatchStyleSetType HatchStyleSetEND
          {$$ = $2;}
        ;

y_HatchStyleType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Form_HatchStyleFormEnumType y_Color_ColorType_0
          y_Patterns_HatchPatternsType_0
          {$$ = new HatchStyleType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad HatchStyleType attributes");
             }
           delete $1;
          }
        ;

y_HatchStyle_HatchStyleType :
          HatchStyleSTART y_HatchStyleType HatchStyleEND
          {$$ = $2;
           $$->printElement = "HatchStyle";
          }
        ;

y_HeadForm2_LeaderHeadFormEnumType :
          HeadForm2START ENDITEM {yyReadData = 1;} y_LeaderHeadFormEnumType
          HeadForm2END
          {$$ = $4;}
        ;

y_HeadForm_LeaderHeadFormType :
          HeadFormSTART y_LeaderHeadFormType HeadFormEND
          {$$ = $2;}
        ;

y_HeadHeight_XmlDouble :
          HeadHeightSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          HeadHeightEND
          {$$ = $4;}
        ;

y_HeadMass_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | HeadMassSTART y_MassValueType HeadMassEND
          {$$ = $2;}
        ;

y_HeadSize_CartesianWorkingVolumeType_0 :
          /* empty */
          {$$ = 0;}
        | HeadSizeSTART ENDWHOLEITEM
          {$$ = new CartesianWorkingVolumeType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "HeadSize";
          }
        | HeadSizeSTART y_CartesianWorkingVolumeType HeadSizeEND
          {$$ = $2;
           $$->printElement = "HeadSize";
          }
        ;

y_Header_PartAssemblyHeaderType_0 :
          /* empty */
          {$$ = 0;}
        | HeaderSTART ENDWHOLEITEM
          {$$ = new PartAssemblyHeaderType();
           yyUnrefMap[$$] = $$;
          }
        | HeaderSTART y_PartAssemblyHeaderType HeaderEND
          {$$ = $2;}
        ;

y_Header_ProductHeaderType_0 :
          /* empty */
          {$$ = 0;}
        | HeaderSTART ENDWHOLEITEM
          {$$ = new ProductHeaderType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "Header";
          }
        | HeaderSTART y_ProductHeaderType HeaderEND
          {$$ = $2;
           $$->printElement = "Header";
          }
        ;

y_Header_QIFDocumentHeaderType_0 :
          /* empty */
          {$$ = 0;}
        | HeaderSTART ENDWHOLEITEM
          {$$ = new QIFDocumentHeaderType();
           yyUnrefMap[$$] = $$;
          }
        | HeaderSTART y_QIFDocumentHeaderType HeaderEND
          {$$ = $2;}
        ;

y_HeightCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new HeightCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad HeightCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_HeightCharacteristicDefinition_HeightCharacteristicDefinitionType :
          HeightCharacteristicDefinitionSTART
          y_HeightCharacteristicDefinitionType
          HeightCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "HeightCharacteristicDefinition";
          }
        ;

y_HeightCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new HeightCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad HeightCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_HeightCharacteristicItem_HeightCharacteristicItemType :
          HeightCharacteristicItemSTART y_HeightCharacteristicItemType
          HeightCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "HeightCharacteristicItem";
          }
        ;

y_HeightCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new HeightCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad HeightCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_HeightCharacteristicMeasurement_HeightCharacteristicMeasurementType :
          HeightCharacteristicMeasurementSTART
          y_HeightCharacteristicMeasurementType
          HeightCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "HeightCharacteristicMeasurement";
          }
        ;

y_HeightCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new HeightCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad HeightCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_HeightCharacteristicNominal_HeightCharacteristicNominalType :
          HeightCharacteristicNominalSTART
          y_HeightCharacteristicNominalType HeightCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "HeightCharacteristicNominal";
          }
        ;

y_HeightCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new HeightCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_HeightCharacteristicStats_HeightCharacteristicStatsEvalType :
          HeightCharacteristicStatsSTART
          y_HeightCharacteristicStatsEvalType HeightCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "HeightCharacteristicStats";
          }
        ;

y_Height_LinearValueType :
          HeightSTART y_LinearValueType HeightEND
          {$$ = $2;}
        ;

y_Height_XmlDouble :
          HeightSTART ENDITEM {yyReadData = 1;} y_XmlDouble HeightEND
          {$$ = $4;}
        ;

y_HomeLocation_PointType_0 :
          /* empty */
          {$$ = 0;}
        | HomeLocationSTART y_PointType HomeLocationEND
          {$$ = $2;}
        ;

y_HorizontalFieldOfView_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | HorizontalFieldOfViewSTART y_LinearValueType
          HorizontalFieldOfViewEND
          {$$ = $2;}
        ;

y_HousingMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | HousingMaterialSTART ENDITEM {yyReadData = 1;} y_XmlString
          HousingMaterialEND
          {$$ = $4;}
        ;

y_Hysteresis_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | HysteresisSTART y_LinearValueType HysteresisEND
          {$$ = $2;}
        ;

y_I2Type :
          ENDITEM {yyReadDataList = 1;} y_XmlInteger
          {$$ = new I2Type($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_I2Type y_XmlInteger
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ISBN_XmlNMTOKEN_0 :
          /* empty */
          {$$ = 0;}
        | ISBNSTART ENDITEM {yyReadData = 1;} y_XmlNMTOKEN ISBNEND
          {$$ = $4;}
        ;

y_ISO10360TestTyp_1240_ISO10360TestTyp_1240_Type :
          y_ISO10360TestTyp_1240_Type
          {$$ = $1;}
        ;

y_ISO10360TestTyp_1240_Type :
          y_ISO10360TestTyp_1240_TypeChoicePair
          {$$ = new ISO10360TestTyp_1240_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ISO10360TestTyp_1240_TypeChoicePair :
          y_LesserError_LesserErrorType
          {$$ = new ISO10360TestTyp_1240_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ISO10360TestTyp_1240_TypeType = ISO10360TestTyp_1240_TypeChoicePair::LesserErrorE;
           $$->ISO10360TestTyp_1240_TypeValue.LesserError = $1;
          }
        | y_LinearError_LinearErrorType
          {$$ = new ISO10360TestTyp_1240_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ISO10360TestTyp_1240_TypeType = ISO10360TestTyp_1240_TypeChoicePair::LinearErrorE;
           $$->ISO10360TestTyp_1240_TypeValue.LinearError = $1;
          }
        | y_MaxErrorConstant_LinearValueType
          {$$ = new ISO10360TestTyp_1240_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ISO10360TestTyp_1240_TypeType = ISO10360TestTyp_1240_TypeChoicePair::MaxErrorConstantE;
           $$->ISO10360TestTyp_1240_TypeValue.MaxErrorConstant = $1;
          }
        ;

y_ISO10360TestType :
          ENDITEM y_ISO10360TestTyp_1240_ISO10360TestTyp_1240_Type
          {$$ = new ISO10360TestType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ISODegreeOfFreedomEnumType :
          DATASTRING
          {$$ = new ISODegreeOfFreedomEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ISODegreeOfFreedomEnumType value");
          }
        ;

y_ISODegreeOfFreedom_ISODegreeOfFreedomEnumType :
          ISODegreeOfFreedomSTART ENDITEM {yyReadData = 1;}
          y_ISODegreeOfFreedomEnumType ISODegreeOfFreedomEND
          {$$ = $4;}
        ;

y_Id_QIFReferenceActiveType :
          IdSTART y_QIFReferenceActiveType IdEND
          {$$ = $2;}
        ;

y_Id_QIFReferenceFullType :
          IdSTART y_QIFReferenceFullType IdEND
          {$$ = $2;}
        ;

y_Id_QIFReferenceSimpleType :
          IdSTART ENDITEM {yyReadData = 1;} y_QIFReferenceSimpleType IdEND
          {$$ = $4;}
        ;

y_Id_QIFReferenceType :
          IdSTART y_QIFReferenceType IdEND
          {$$ = $2;}
        ;

y_Id_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | IdSTART y_QIFReferenceType IdEND
          {$$ = $2;}
        ;

y_Ids_ArrayBinaryType :
          IdsSTART y_ArrayBinaryType IdsEND
          {$$ = $2;}
        ;

y_Ids_ArrayReferenceType :
          IdsSTART y_ArrayReferenceType IdsEND
          {$$ = $2;}
        ;

y_Ids_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | IdsSTART y_ArrayReferenceType IdsEND
          {$$ = $2;}
        ;

y_Ids_ListQIFReferenceSimpleType :
          IdsSTART y_ListQIFReferenceSimpleType IdsEND
          {$$ = $2;}
        ;

y_IfActionGroupType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
          y_If_TestAndPlanElementType
          y_LiztElseIf_TestAndPlanElementType_0_u y_ElseDo_ElseDoType_0
          {$$ = new IfActionGroupType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_IfActionGroup_IfActionGroupType :
          IfActionGroupSTART y_IfActionGroupType IfActionGroupEND
          {$$ = $2;
           $$->printElement = "IfActionGroup";
          }
        ;

y_IfThenCircleRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CirclePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCircleRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CirclePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCircleRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenCircleRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenCircleRule_IfThenCircleRuleType :
          IfThenCircleRuleSTART ENDWHOLEITEM
          {$$ = new IfThenCircleRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenCircleRule";
          }
        | IfThenCircleRuleSTART y_IfThenCircleRuleType IfThenCircleRuleEND
          {$$ = $2;
           $$->printElement = "IfThenCircleRule";
          }
        | IfThenCircleRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenCircleRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenCircleRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenCircleRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenCircularArcRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CircularArcPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCircularArcRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CircularArcPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCircularArcRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenCircularArcRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenCircularArcRule_IfThenCircularArcRuleType :
          IfThenCircularArcRuleSTART ENDWHOLEITEM
          {$$ = new IfThenCircularArcRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenCircularArcRule";
          }
        | IfThenCircularArcRuleSTART y_IfThenCircularArcRuleType
          IfThenCircularArcRuleEND
          {$$ = $2;
           $$->printElement = "IfThenCircularArcRule";
          }
        | IfThenCircularArcRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenCircularArcRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenCircularArcRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenCircularArcRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenConeRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ConePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenConeRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ConePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenConeRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenConeRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenConeRule_IfThenConeRuleType :
          IfThenConeRuleSTART ENDWHOLEITEM
          {$$ = new IfThenConeRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenConeRule";
          }
        | IfThenConeRuleSTART y_IfThenConeRuleType IfThenConeRuleEND
          {$$ = $2;
           $$->printElement = "IfThenConeRule";
          }
        | IfThenConeRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenConeRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenConeRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenConeRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenConicalSegmentRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ConicalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenConicalSegmentRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ConicalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenConicalSegmentRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenConicalSegmentRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenConicalSegmentRule_IfThenConicalSegmentRuleType :
          IfThenConicalSegmentRuleSTART ENDWHOLEITEM
          {$$ = new IfThenConicalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenConicalSegmentRule";
          }
        | IfThenConicalSegmentRuleSTART y_IfThenConicalSegmentRuleType
          IfThenConicalSegmentRuleEND
          {$$ = $2;
           $$->printElement = "IfThenConicalSegmentRule";
          }
        | IfThenConicalSegmentRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenConicalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenConicalSegmentRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenConicalSegmentRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenCurveRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          {$$ = new IfThenCurveRuleType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          {$$ = new IfThenCurveRuleType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenCurveRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenCurveRule_IfThenCurveRuleType :
          IfThenCurveRuleSTART ENDWHOLEITEM
          {$$ = new IfThenCurveRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenCurveRule";
          }
        | IfThenCurveRuleSTART y_IfThenCurveRuleType IfThenCurveRuleEND
          {$$ = $2;
           $$->printElement = "IfThenCurveRule";
          }
        | IfThenCurveRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenCurveRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenCurveRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenCurveRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenCylinderRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CylinderPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCylinderRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CylinderPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCylinderRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenCylinderRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenCylinderRule_IfThenCylinderRuleType :
          IfThenCylinderRuleSTART ENDWHOLEITEM
          {$$ = new IfThenCylinderRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenCylinderRule";
          }
        | IfThenCylinderRuleSTART y_IfThenCylinderRuleType
          IfThenCylinderRuleEND
          {$$ = $2;
           $$->printElement = "IfThenCylinderRule";
          }
        | IfThenCylinderRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenCylinderRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenCylinderRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenCylinderRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenCylindricalSegmentRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CylindricalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCylindricalSegmentRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_CylindricalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenCylindricalSegmentRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenCylindricalSegmentRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenCylindricalSegmentRule_IfThenCylindricalSegmentRuleType :
          IfThenCylindricalSegmentRuleSTART ENDWHOLEITEM
          {$$ = new IfThenCylindricalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenCylindricalSegmentRule";
          }
        | IfThenCylindricalSegmentRuleSTART
          y_IfThenCylindricalSegmentRuleType
          IfThenCylindricalSegmentRuleEND
          {$$ = $2;
           $$->printElement = "IfThenCylindricalSegmentRule";
          }
        | IfThenCylindricalSegmentRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenCylindricalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenCylindricalSegmentRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenCylindricalSegmentRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenDMERuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_DMEThen_DMEThenType
          {$$ = new IfThenDMERuleType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0 y_DMEThen_DMEThenType
          {$$ = new IfThenDMERuleType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenDMERuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenEllipseRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_EllipsePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenEllipseRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_EllipsePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenEllipseRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenEllipseRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenEllipseRule_IfThenEllipseRuleType :
          IfThenEllipseRuleSTART ENDWHOLEITEM
          {$$ = new IfThenEllipseRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenEllipseRule";
          }
        | IfThenEllipseRuleSTART y_IfThenEllipseRuleType
          IfThenEllipseRuleEND
          {$$ = $2;
           $$->printElement = "IfThenEllipseRule";
          }
        | IfThenEllipseRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenEllipseRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenEllipseRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenEllipseRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenEllipticalArcRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_EllipticalArcPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenEllipticalArcRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_EllipticalArcPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenEllipticalArcRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenEllipticalArcRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenEllipticalArcRule_IfThenEllipticalArcRuleType :
          IfThenEllipticalArcRuleSTART ENDWHOLEITEM
          {$$ = new IfThenEllipticalArcRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenEllipticalArcRule";
          }
        | IfThenEllipticalArcRuleSTART y_IfThenEllipticalArcRuleType
          IfThenEllipticalArcRuleEND
          {$$ = $2;
           $$->printElement = "IfThenEllipticalArcRule";
          }
        | IfThenEllipticalArcRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenEllipticalArcRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenEllipticalArcRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenEllipticalArcRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenElongatedCircleRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ElongatedCirclePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenElongatedCircleRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ElongatedCirclePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenElongatedCircleRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenElongatedCircleRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenElongatedCircleRule_IfThenElongatedCircleRuleType :
          IfThenElongatedCircleRuleSTART ENDWHOLEITEM
          {$$ = new IfThenElongatedCircleRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenElongatedCircleRule";
          }
        | IfThenElongatedCircleRuleSTART y_IfThenElongatedCircleRuleType
          IfThenElongatedCircleRuleEND
          {$$ = $2;
           $$->printElement = "IfThenElongatedCircleRule";
          }
        | IfThenElongatedCircleRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenElongatedCircleRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenElongatedCircleRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenElongatedCircleRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenElongatedCylinderRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ElongatedCylinderPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenElongatedCylinderRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ElongatedCylinderPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenElongatedCylinderRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenElongatedCylinderRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenElongatedCylinderRule_IfThenElongatedCylinderRuleType :
          IfThenElongatedCylinderRuleSTART ENDWHOLEITEM
          {$$ = new IfThenElongatedCylinderRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenElongatedCylinderRule";
          }
        | IfThenElongatedCylinderRuleSTART
          y_IfThenElongatedCylinderRuleType IfThenElongatedCylinderRuleEND
          {$$ = $2;
           $$->printElement = "IfThenElongatedCylinderRule";
          }
        | IfThenElongatedCylinderRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenElongatedCylinderRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenElongatedCylinderRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenElongatedCylinderRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenElseFeatureRulesType :
          y_LiztAttributePair ENDITEM
          y_LiztIfThenFeatureRule_substituteType_1_u y_Else_ElseRuleType_0
          {$$ = new IfThenElseFeatureRulesType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenElseFeatureRulesType attributes");
             }
           delete $1;
          }
        ;

y_IfThenElseFeatureRules_IfThenElseFeatureRulesType_0 :
          /* empty */
          {$$ = 0;}
        | IfThenElseFeatureRulesSTART y_IfThenElseFeatureRulesType
          IfThenElseFeatureRulesEND
          {$$ = $2;}
        ;

y_IfThenExtrudedCrossSectionRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ExtrudedCrossSectionPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenExtrudedCrossSectionRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ExtrudedCrossSectionPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenExtrudedCrossSectionRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenExtrudedCrossSectionRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenExtrudedCrossSectionRule_IfThenExtrudedCrossSectionRuleType :
          IfThenExtrudedCrossSectionRuleSTART ENDWHOLEITEM
          {$$ = new IfThenExtrudedCrossSectionRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenExtrudedCrossSectionRule";
          }
        | IfThenExtrudedCrossSectionRuleSTART
          y_IfThenExtrudedCrossSectionRuleType
          IfThenExtrudedCrossSectionRuleEND
          {$$ = $2;
           $$->printElement = "IfThenExtrudedCrossSectionRule";
          }
        | IfThenExtrudedCrossSectionRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenExtrudedCrossSectionRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenExtrudedCrossSectionRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenExtrudedCrossSectionRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenFeatureRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          {$$ = new IfThenFeatureRuleType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          {$$ = new IfThenFeatureRuleType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenFeatureRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenFeatureRule_IfThenFeatureRuleType :
          IfThenFeatureRuleSTART y_IfThenFeatureRuleType
          IfThenFeatureRuleEND
          {$$ = $2;
           $$->printElement = "IfThenFeatureRule";
          }
        ;

y_IfThenFeatureRule_substituteType :
          y_IfThenCircleRule_IfThenCircleRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenCircularArcRule_IfThenCircularArcRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenConeRule_IfThenConeRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenConicalSegmentRule_IfThenConicalSegmentRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenCurveRule_IfThenCurveRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenCylinderRule_IfThenCylinderRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenCylindricalSegmentRule_IfThenCylindricalSegmentRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenEllipseRule_IfThenEllipseRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenEllipticalArcRule_IfThenEllipticalArcRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenElongatedCircleRule_IfThenElongatedCircleRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenElongatedCylinderRule_IfThenElongatedCylinderRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenExtrudedCrossSectionRule_IfThenExtrudedCrossSectionRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenFeatureRule_IfThenFeatureRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenLineRule_IfThenLineRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenOppositeAngledLinesRule_IfThenOppositeAngledLinesRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenOppositeAngledPlanesRule_IfThenOppositeAngledPlanesRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenOppositeParallelLinesRule_IfThenOppositeParallelLinesRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenOppositeParallelPlanesRule_IfThenOppositeParallelPlanesRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenPlaneRule_IfThenPlaneRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenPointDefinedCurveRule_IfThenPointDefinedCurveRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenPointDefinedSurfaceRule_IfThenPointDefinedSurfaceRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenPointRule_IfThenPointRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenSphereRule_IfThenSphereRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenSphericalSegmentRule_IfThenSphericalSegmentRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenSurfaceOfRevolutionRule_IfThenSurfaceOfRevolutionRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenSurfaceRule_IfThenSurfaceRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenToroidalSegmentRule_IfThenToroidalSegmentRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfThenTorusRule_IfThenTorusRuleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_IfThenLineRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_LinePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenLineRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_LinePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenLineRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenLineRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenLineRule_IfThenLineRuleType :
          IfThenLineRuleSTART ENDWHOLEITEM
          {$$ = new IfThenLineRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenLineRule";
          }
        | IfThenLineRuleSTART y_IfThenLineRuleType IfThenLineRuleEND
          {$$ = $2;
           $$->printElement = "IfThenLineRule";
          }
        | IfThenLineRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenLineRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenLineRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenLineRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenOppositeAngledLinesRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeAngledLinesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeAngledLinesRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeAngledLinesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeAngledLinesRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenOppositeAngledLinesRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenOppositeAngledLinesRule_IfThenOppositeAngledLinesRuleType :
          IfThenOppositeAngledLinesRuleSTART ENDWHOLEITEM
          {$$ = new IfThenOppositeAngledLinesRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenOppositeAngledLinesRule";
          }
        | IfThenOppositeAngledLinesRuleSTART
          y_IfThenOppositeAngledLinesRuleType
          IfThenOppositeAngledLinesRuleEND
          {$$ = $2;
           $$->printElement = "IfThenOppositeAngledLinesRule";
          }
        | IfThenOppositeAngledLinesRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenOppositeAngledLinesRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenOppositeAngledLinesRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenOppositeAngledLinesRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenOppositeAngledPlanesRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeAngledPlanesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeAngledPlanesRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeAngledPlanesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeAngledPlanesRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenOppositeAngledPlanesRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenOppositeAngledPlanesRule_IfThenOppositeAngledPlanesRuleType :
          IfThenOppositeAngledPlanesRuleSTART ENDWHOLEITEM
          {$$ = new IfThenOppositeAngledPlanesRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenOppositeAngledPlanesRule";
          }
        | IfThenOppositeAngledPlanesRuleSTART
          y_IfThenOppositeAngledPlanesRuleType
          IfThenOppositeAngledPlanesRuleEND
          {$$ = $2;
           $$->printElement = "IfThenOppositeAngledPlanesRule";
          }
        | IfThenOppositeAngledPlanesRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenOppositeAngledPlanesRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenOppositeAngledPlanesRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenOppositeAngledPlanesRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenOppositeParallelLinesRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeParallelLinesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeParallelLinesRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeParallelLinesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeParallelLinesRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenOppositeParallelLinesRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenOppositeParallelLinesRule_IfThenOppositeParallelLinesRuleType :
          IfThenOppositeParallelLinesRuleSTART ENDWHOLEITEM
          {$$ = new IfThenOppositeParallelLinesRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenOppositeParallelLinesRule";
          }
        | IfThenOppositeParallelLinesRuleSTART
          y_IfThenOppositeParallelLinesRuleType
          IfThenOppositeParallelLinesRuleEND
          {$$ = $2;
           $$->printElement = "IfThenOppositeParallelLinesRule";
          }
        | IfThenOppositeParallelLinesRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenOppositeParallelLinesRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenOppositeParallelLinesRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenOppositeParallelLinesRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenOppositeParallelPlanesRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeParallelPlanesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeParallelPlanesRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_OppositeParallelPlanesPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenOppositeParallelPlanesRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenOppositeParallelPlanesRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenOppositeParallelPlanesRule_IfThenOppositeParallelPlanesRuleType :
          IfThenOppositeParallelPlanesRuleSTART ENDWHOLEITEM
          {$$ = new IfThenOppositeParallelPlanesRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenOppositeParallelPlanesRule";
          }
        | IfThenOppositeParallelPlanesRuleSTART
          y_IfThenOppositeParallelPlanesRuleType
          IfThenOppositeParallelPlanesRuleEND
          {$$ = $2;
           $$->printElement = "IfThenOppositeParallelPlanesRule";
          }
        | IfThenOppositeParallelPlanesRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenOppositeParallelPlanesRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenOppositeParallelPlanesRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenOppositeParallelPlanesRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenPlaneRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PlanePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenPlaneRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PlanePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenPlaneRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenPlaneRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenPlaneRule_IfThenPlaneRuleType :
          IfThenPlaneRuleSTART ENDWHOLEITEM
          {$$ = new IfThenPlaneRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenPlaneRule";
          }
        | IfThenPlaneRuleSTART y_IfThenPlaneRuleType IfThenPlaneRuleEND
          {$$ = $2;
           $$->printElement = "IfThenPlaneRule";
          }
        | IfThenPlaneRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenPlaneRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenPlaneRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenPlaneRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenPointDefinedCurveRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PointDefinedCurvePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenPointDefinedCurveRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PointDefinedCurvePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenPointDefinedCurveRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenPointDefinedCurveRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenPointDefinedCurveRule_IfThenPointDefinedCurveRuleType :
          IfThenPointDefinedCurveRuleSTART ENDWHOLEITEM
          {$$ = new IfThenPointDefinedCurveRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenPointDefinedCurveRule";
          }
        | IfThenPointDefinedCurveRuleSTART
          y_IfThenPointDefinedCurveRuleType IfThenPointDefinedCurveRuleEND
          {$$ = $2;
           $$->printElement = "IfThenPointDefinedCurveRule";
          }
        | IfThenPointDefinedCurveRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenPointDefinedCurveRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenPointDefinedCurveRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenPointDefinedCurveRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenPointDefinedSurfaceRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PointDefinedSurfacePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenPointDefinedSurfaceRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PointDefinedSurfacePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenPointDefinedSurfaceRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenPointDefinedSurfaceRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenPointDefinedSurfaceRule_IfThenPointDefinedSurfaceRuleType :
          IfThenPointDefinedSurfaceRuleSTART ENDWHOLEITEM
          {$$ = new IfThenPointDefinedSurfaceRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenPointDefinedSurfaceRule";
          }
        | IfThenPointDefinedSurfaceRuleSTART
          y_IfThenPointDefinedSurfaceRuleType
          IfThenPointDefinedSurfaceRuleEND
          {$$ = $2;
           $$->printElement = "IfThenPointDefinedSurfaceRule";
          }
        | IfThenPointDefinedSurfaceRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenPointDefinedSurfaceRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenPointDefinedSurfaceRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenPointDefinedSurfaceRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenPointRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PointPointSamplingStrategyType_0
          {$$ = new IfThenPointRuleType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_PointPointSamplingStrategyType_0
          {$$ = new IfThenPointRuleType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenPointRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenPointRule_IfThenPointRuleType :
          IfThenPointRuleSTART ENDWHOLEITEM
          {$$ = new IfThenPointRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenPointRule";
          }
        | IfThenPointRuleSTART y_IfThenPointRuleType IfThenPointRuleEND
          {$$ = $2;
           $$->printElement = "IfThenPointRule";
          }
        | IfThenPointRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenPointRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenPointRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenPointRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenSphereRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_SpherePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenSphereRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_SpherePointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenSphereRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenSphereRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenSphereRule_IfThenSphereRuleType :
          IfThenSphereRuleSTART ENDWHOLEITEM
          {$$ = new IfThenSphereRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenSphereRule";
          }
        | IfThenSphereRuleSTART y_IfThenSphereRuleType IfThenSphereRuleEND
          {$$ = $2;
           $$->printElement = "IfThenSphereRule";
          }
        | IfThenSphereRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenSphereRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenSphereRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenSphereRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenSphericalSegmentRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_SphericalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenSphericalSegmentRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_SphericalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenSphericalSegmentRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenSphericalSegmentRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenSphericalSegmentRule_IfThenSphericalSegmentRuleType :
          IfThenSphericalSegmentRuleSTART ENDWHOLEITEM
          {$$ = new IfThenSphericalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenSphericalSegmentRule";
          }
        | IfThenSphericalSegmentRuleSTART y_IfThenSphericalSegmentRuleType
          IfThenSphericalSegmentRuleEND
          {$$ = $2;
           $$->printElement = "IfThenSphericalSegmentRule";
          }
        | IfThenSphericalSegmentRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenSphericalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenSphericalSegmentRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenSphericalSegmentRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenSurfaceOfRevolutionRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_SurfaceOfRevolutionPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenSurfaceOfRevolutionRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_SurfaceOfRevolutionPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenSurfaceOfRevolutionRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenSurfaceOfRevolutionRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenSurfaceOfRevolutionRule_IfThenSurfaceOfRevolutionRuleType :
          IfThenSurfaceOfRevolutionRuleSTART ENDWHOLEITEM
          {$$ = new IfThenSurfaceOfRevolutionRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenSurfaceOfRevolutionRule";
          }
        | IfThenSurfaceOfRevolutionRuleSTART
          y_IfThenSurfaceOfRevolutionRuleType
          IfThenSurfaceOfRevolutionRuleEND
          {$$ = $2;
           $$->printElement = "IfThenSurfaceOfRevolutionRule";
          }
        | IfThenSurfaceOfRevolutionRuleSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new IfThenSurfaceOfRevolutionRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenSurfaceOfRevolutionRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenSurfaceOfRevolutionRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenSurfaceRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          {$$ = new IfThenSurfaceRuleType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          {$$ = new IfThenSurfaceRuleType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenSurfaceRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenSurfaceRule_IfThenSurfaceRuleType :
          IfThenSurfaceRuleSTART ENDWHOLEITEM
          {$$ = new IfThenSurfaceRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenSurfaceRule";
          }
        | IfThenSurfaceRuleSTART y_IfThenSurfaceRuleType
          IfThenSurfaceRuleEND
          {$$ = $2;
           $$->printElement = "IfThenSurfaceRule";
          }
        | IfThenSurfaceRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenSurfaceRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenSurfaceRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenSurfaceRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenToroidalSegmentRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ToroidalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenToroidalSegmentRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_ToroidalSegmentPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenToroidalSegmentRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenToroidalSegmentRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenToroidalSegmentRule_IfThenToroidalSegmentRuleType :
          IfThenToroidalSegmentRuleSTART ENDWHOLEITEM
          {$$ = new IfThenToroidalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenToroidalSegmentRule";
          }
        | IfThenToroidalSegmentRuleSTART y_IfThenToroidalSegmentRuleType
          IfThenToroidalSegmentRuleEND
          {$$ = $2;
           $$->printElement = "IfThenToroidalSegmentRule";
          }
        | IfThenToroidalSegmentRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenToroidalSegmentRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenToroidalSegmentRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenToroidalSegmentRuleType attributes");
             }
           delete $2;
          }
        ;

y_IfThenTorusRuleType :
          ENDITEM y_UUID_QPIdType_0 y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_TorusPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenTorusRuleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_UUID_QPIdType_0
          y_BooleanExpression_substituteType_0
          y_ThenPoints_ThenPointsType_0
          y_ThenPointStrategy_TorusPointSamplingStrategyType_0
          y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new IfThenTorusRuleType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad IfThenTorusRuleType attributes");
             }
           delete $1;
          }
        ;

y_IfThenTorusRule_IfThenTorusRuleType :
          IfThenTorusRuleSTART ENDWHOLEITEM
          {$$ = new IfThenTorusRuleType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "IfThenTorusRule";
          }
        | IfThenTorusRuleSTART y_IfThenTorusRuleType IfThenTorusRuleEND
          {$$ = $2;
           $$->printElement = "IfThenTorusRule";
          }
        | IfThenTorusRuleSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new IfThenTorusRuleType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "IfThenTorusRule";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad IfThenTorusRuleType attributes");
             }
           delete $2;
          }
        ;

y_If_TestAndPlanElementType :
          IfSTART y_TestAndPlanElementType IfEND
          {$$ = $2;}
        ;

y_IlluminationUnit_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | IlluminationUnitSTART ENDITEM {yyReadData = 1;} y_XmlString
          IlluminationUnitEND
          {$$ = $4;}
        ;

y_ImageInstructionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ExternalFile_ExternalFileReferenceType
          {$$ = new ImageInstructionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ImageInstructionType attributes");
             }
           delete $1;
          }
        ;

y_ImageInstruction_ImageInstructionType :
          ImageInstructionSTART y_ImageInstructionType ImageInstructionEND
          {$$ = $2;
           $$->printElement = "ImageInstruction";
          }
        ;

y_InSpecRatio_XmlDecimal :
          InSpecRatioSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          InSpecRatioEND
          {$$ = $4;}
        ;

y_InSpecRatio_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | InSpecRatioSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          InSpecRatioEND
          {$$ = $4;}
        ;

y_IncrementalArc_AngularValueType :
          IncrementalArcSTART y_AngularValueType IncrementalArcEND
          {$$ = $2;}
        ;

y_IncrementalDistance_LinearValueType :
          IncrementalDistanceSTART y_LinearValueType IncrementalDistanceEND
          {$$ = $2;}
        ;

y_IncrementalRowDistance_LinearValueType :
          IncrementalRowDistanceSTART y_LinearValueType
          IncrementalRowDistanceEND
          {$$ = $2;}
        ;

y_Independency_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | IndependencySTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          IndependencyEND
          {$$ = $4;}
        ;

y_Index_XmlPositiveInteger :
          IndexSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          IndexEND
          {$$ = $4;}
        ;

y_InspectingOrganization_OrganizationType_0 :
          /* empty */
          {$$ = 0;}
        | InspectingOrganizationSTART y_OrganizationType
          InspectingOrganizationEND
          {$$ = $2;}
        ;

y_InspectionEnd_XmlDateTime_0 :
          /* empty */
          {$$ = 0;}
        | InspectionEndSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          InspectionEndEND
          {$$ = $4;}
        ;

y_InspectionModeEnumType :
          DATASTRING
          {$$ = new InspectionModeEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad InspectionModeEnumType value");
          }
        ;

y_InspectionMode_InspectionModeEnumType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionModeSTART ENDITEM {yyReadData = 1;}
          y_InspectionModeEnumType InspectionModeEND
          {$$ = $4;}
        ;

y_InspectionOperator_EmployeeType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionOperatorSTART y_EmployeeType InspectionOperatorEND
          {$$ = $2;}
        ;

y_InspectionProgramExecutionSoftware_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionProgramExecutionSoftwareSTART y_ArrayReferenceType
          InspectionProgramExecutionSoftwareEND
          {$$ = $2;}
        ;

y_InspectionProgramGenerationSoftware_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionProgramGenerationSoftwareSTART y_ArrayReferenceType
          InspectionProgramGenerationSoftwareEND
          {$$ = $2;}
        ;

y_InspectionProgramType :
          ENDITEM y_File_FileType y_Description_XmlString_0
          y_FormalStandardId_QIFReferenceType y_Author_EmployeeType
          {$$ = new InspectionProgramType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_InspectionProgram_InspectionProgramType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionProgramSTART y_InspectionProgramType
          InspectionProgramEND
          {$$ = $2;}
        ;

y_InspectionScopeEnumType :
          DATASTRING
          {$$ = new InspectionScopeEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad InspectionScopeEnumType value");
          }
        ;

y_InspectionScope_InspectionScopeEnumType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionScopeSTART ENDITEM {yyReadData = 1;}
          y_InspectionScopeEnumType InspectionScopeEND
          {$$ = $4;}
        ;

y_InspectionSoftwareItemsType :
          ENDITEM
          y_InspectionProgramGenerationSoftware_ArrayReferenceType_0
          y_InspectionProgramExecutionSoftware_ArrayReferenceType_0
          y_AnalysisSoftware_ArrayReferenceType_0
          y_CADSoftware_ArrayReferenceType_0
          y_DMESoftware_ArrayReferenceType_0
          {$$ = new InspectionSoftwareItemsType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_InspectionSoftwareItems_InspectionSoftwareItemsType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionSoftwareItemsSTART ENDWHOLEITEM
          {$$ = new InspectionSoftwareItemsType();
           yyUnrefMap[$$] = $$;
          }
        | InspectionSoftwareItemsSTART y_InspectionSoftwareItemsType
          InspectionSoftwareItemsEND
          {$$ = $2;}
        ;

y_InspectionStart_XmlDateTime_0 :
          /* empty */
          {$$ = 0;}
        | InspectionStartSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          InspectionStartEND
          {$$ = $4;}
        ;

y_InspectionStatusEnumType :
          DATASTRING
          {$$ = new InspectionStatusEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad InspectionStatusEnumType value");
          }
        ;

y_InspectionStatusEnum_InspectionStatusEnumType :
          InspectionStatusEnumSTART ENDITEM {yyReadData = 1;}
          y_InspectionStatusEnumType InspectionStatusEnumEND
          {$$ = $4;}
        ;

y_InspectionStatusType :
          ENDITEM y_InspectionStatusTypeChoicePair
          {$$ = new InspectionStatusType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_InspectionStatusTypeChoicePair :
          y_InspectionStatusEnum_InspectionStatusEnumType
          {$$ = new InspectionStatusTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->InspectionStatusTypeType = InspectionStatusTypeChoicePair::InspectionStatusEnumE;
           $$->InspectionStatusTypeValue.InspectionStatusEnum = $1;
          }
        | y_OtherInspectionStatus_XmlString
          {$$ = new InspectionStatusTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->InspectionStatusTypeType = InspectionStatusTypeChoicePair::OtherInspectionStatusE;
           $$->InspectionStatusTypeValue.OtherInspectionStatus = $1;
          }
        ;

y_InspectionStatus_InspectionStatusType :
          InspectionStatusSTART y_InspectionStatusType InspectionStatusEND
          {$$ = $2;}
        ;

y_InspectionTrace_1042_InspectionTrace_1042_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_InspectionTrace_1042_Type
          {$$ = $1;}
        ;

y_InspectionTrace_1042_Type :
          y_InspectionTrace_1042_TypeChoicePair
          {$$ = new InspectionTrace_1042_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_InspectionTrace_1042_TypeChoicePair :
          y_ReferencedQIFPlanInstance_QPIdFullReferenceType
          {$$ = new InspectionTrace_1042_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->InspectionTrace_1042_TypeType = InspectionTrace_1042_TypeChoicePair::ReferencedQIFPlanInstanceE;
           $$->InspectionTrace_1042_TypeValue.ReferencedQIFPlanInstance = $1;
          }
        | y_ReferencedQIFPlan_XmlNMTOKEN
          {$$ = new InspectionTrace_1042_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->InspectionTrace_1042_TypeType = InspectionTrace_1042_TypeChoicePair::ReferencedQIFPlanE;
           $$->InspectionTrace_1042_TypeValue.ReferencedQIFPlan = $1;
          }
        ;

y_InspectionTraceabilityType :
          ENDITEM y_InspectingOrganization_OrganizationType_0
          y_CustomerOrganization_CustomerOrganizationType_0
          y_SupplierCode_XmlString_0 y_PurchaseOrderNumber_XmlString_0
          y_OrderNumber_XmlString_0 y_ReportNumber_XmlString_0
          y_InspectionScope_InspectionScopeEnumType_0
          y_InspectionMode_InspectionModeEnumType_0
          y_PartialInspection_PartialInspectionType_0
          y_NotableEvents_NotableEventsType_0
          y_NotedEvents_NotedEventsType_0 y_InspectionStart_XmlDateTime_0
          y_InspectionEnd_XmlDateTime_0
          y_InspectionSoftwareItems_InspectionSoftwareItemsType_0
          y_InspectionProgram_InspectionProgramType_0
          y_InspectionOperator_EmployeeType_0
          y_ReportPreparer_EmployeeType_0
          y_ReportPreparationDate_XmlDateTime_0 y_ReportType_XmlToken_0
          y_SecurityClassification_SecurityClassificationType_0
          y_PlantLocation_LocationType_0
          y_InspectionTrace_1042_InspectionTrace_1042_Type_0
          y_Errors_ErrorsType_0 y_Attributes_AttributesType_0
          {$$ = new InspectionTraceabilityType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
          }
        ;

y_InspectionTraceability_InspectionTraceabilityType_0 :
          /* empty */
          {$$ = 0;}
        | InspectionTraceabilitySTART ENDWHOLEITEM
          {$$ = new InspectionTraceabilityType();
           yyUnrefMap[$$] = $$;
          }
        | InspectionTraceabilitySTART y_InspectionTraceabilityType
          InspectionTraceabilityEND
          {$$ = $2;}
        ;

y_Instance_ValidationPartAssemblyInstanceType :
          InstanceSTART y_ValidationPartAssemblyInstanceType InstanceEND
          {$$ = $2;}
        ;

y_Instances_ValidationPartAssemblyInstancesType_0 :
          /* empty */
          {$$ = 0;}
        | InstancesSTART y_ValidationPartAssemblyInstancesType InstancesEND
          {$$ = $2;}
        ;

y_Interaction_StatsMeasuredDecimalType :
          InteractionSTART y_StatsMeasuredDecimalType InteractionEND
          {$$ = $2;
           $$->printElement = "Interaction";
          }
        ;

y_InternalCADCoordinateSystemId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | InternalCADCoordinateSystemIdSTART y_QIFReferenceFullType
          InternalCADCoordinateSystemIdEND
          {$$ = $2;}
        ;

y_InternalExternalEnumType :
          DATASTRING
          {$$ = new InternalExternalEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad InternalExternalEnumType value");
          }
        ;

y_InternalExternal_InternalExternalEnumType :
          InternalExternalSTART ENDITEM {yyReadData = 1;}
          y_InternalExternalEnumType InternalExternalEND
          {$$ = $4;}
        ;

y_InternalExternal_InternalExternalEnumType_0 :
          /* empty */
          {$$ = 0;}
        | InternalExternalSTART ENDITEM {yyReadData = 1;}
          y_InternalExternalEnumType InternalExternalEND
          {$$ = $4;}
        ;

y_InternalLocation_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | InternalLocationSTART ENDITEM {yyReadData = 1;} y_XmlToken
          InternalLocationEND
          {$$ = $4;}
        ;

y_IntersectionFeature_BaseFeatureType :
          IntersectionFeatureSTART y_BaseFeatureType IntersectionFeatureEND
          {$$ = $2;}
        ;

y_IntersectionFeature_SequencedBaseFeatureType :
          IntersectionFeatureSTART y_SequencedBaseFeatureType
          IntersectionFeatureEND
          {$$ = $2;
           $$->printElement = "IntersectionFeature";
          }
        ;

y_IntersectionPlaneEnumType :
          DATASTRING
          {$$ = new IntersectionPlaneEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad IntersectionPlaneEnumType value");
          }
        ;

y_IntersectionPlaneEnum_IntersectionPlaneEnumType :
          IntersectionPlaneEnumSTART ENDITEM {yyReadData = 1;}
          y_IntersectionPlaneEnumType IntersectionPlaneEnumEND
          {$$ = $4;}
        ;

y_IntersectionPlaneType :
          ENDITEM y_IntersectionPlaneEnum_IntersectionPlaneEnumType
          y_DatumDefinitionId_QIFReferenceFullType
          {$$ = new IntersectionPlaneType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_IntersectionPlane_BaseFeatureType :
          IntersectionPlaneSTART y_BaseFeatureType IntersectionPlaneEND
          {$$ = $2;}
        ;

y_IntersectionPlane_IntersectionPlaneType_0 :
          /* empty */
          {$$ = 0;}
        | IntersectionPlaneSTART y_IntersectionPlaneType
          IntersectionPlaneEND
          {$$ = $2;}
        ;

y_Intersection_CircleIntersectionType :
          IntersectionSTART y_CircleIntersectionType IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_Intersection_CircularArcIntersectionType :
          IntersectionSTART y_CircularArcIntersectionType IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_Intersection_EllipseIntersectionType :
          IntersectionSTART y_EllipseIntersectionType IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_Intersection_EllipticalArcIntersectionType :
          IntersectionSTART y_EllipticalArcIntersectionType IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_Intersection_LineIntersectionType :
          IntersectionSTART y_LineIntersectionType IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_Intersection_OppositeAngledLinesIntersectionType :
          IntersectionSTART y_OppositeAngledLinesIntersectionType
          IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_Intersection_OppositeParallelLinesIntersectionType :
          IntersectionSTART y_OppositeParallelLinesIntersectionType
          IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_Intersection_PointFeatureIntersectionType :
          IntersectionSTART y_PointFeatureIntersectionType IntersectionEND
          {$$ = $2;
           $$->printElement = "Intersection";
          }
        ;

y_IsCounterboredHole_XmlBoolean :
          IsCounterboredHoleSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          IsCounterboredHoleEND
          {$$ = $4;}
        ;

y_IsCountersunkHole_XmlBoolean :
          IsCountersunkHoleSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          IsCountersunkHoleEND
          {$$ = $4;}
        ;

y_IsProfileGroup_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | IsProfileGroupSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          IsProfileGroupEND
          {$$ = $4;}
        ;

y_IsRunoutGroup_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | IsRunoutGroupSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          IsRunoutGroupEND
          {$$ = $4;}
        ;

y_IsSpotface_XmlBoolean :
          IsSpotfaceSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          IsSpotfaceEND
          {$$ = $4;}
        ;

y_ItemQPId_QPIdReferenceType :
          ItemQPIdSTART ENDITEM {yyReadData = 1;} y_QPIdReferenceType
          ItemQPIdEND
          {$$ = $4;}
        ;

y_Job_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | JobSTART ENDITEM {yyReadData = 1;} y_XmlString JobEND
          {$$ = $4;}
        ;

y_JoystickSpeeds_CartesianCMMSpeedsType_0 :
          /* empty */
          {$$ = 0;}
        | JoystickSpeedsSTART ENDWHOLEITEM
          {$$ = new CartesianCMMSpeedsType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "JoystickSpeeds";
          }
        | JoystickSpeedsSTART y_CartesianCMMSpeedsType JoystickSpeedsEND
          {$$ = $2;
           $$->printElement = "JoystickSpeeds";
          }
        ;

y_KnotsU_ArrayDoubleType :
          KnotsUSTART y_ArrayDoubleType KnotsUEND
          {$$ = $2;}
        ;

y_KnotsV_ArrayDoubleType :
          KnotsVSTART y_ArrayDoubleType KnotsVEND
          {$$ = $2;}
        ;

y_Knots_ArrayDoubleType :
          KnotsSTART y_ArrayDoubleType KnotsEND
          {$$ = $2;}
        ;

y_Kurtosis_StatsMeasuredDecimalType :
          KurtosisSTART y_StatsMeasuredDecimalType KurtosisEND
          {$$ = $2;
           $$->printElement = "Kurtosis";
          }
        ;

y_LVDTSensor_LinearVariableDifferentialTransformerSensorType :
          LVDTSensorSTART y_LinearVariableDifferentialTransformerSensorType
          LVDTSensorEND
          {$$ = $2;
           $$->printElement = "LVDTSensor";
          }
        ;

y_Label_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | LabelSTART ENDITEM {yyReadData = 1;} y_XmlToken LabelEND
          {$$ = $4;}
        ;

y_LargeEndDistance_LinearValueType :
          LargeEndDistanceSTART y_LinearValueType LargeEndDistanceEND
          {$$ = $2;}
        ;

y_LargeEndDistance_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LargeEndDistanceSTART y_MeasuredLinearValueType
          LargeEndDistanceEND
          {$$ = $2;}
        ;

y_LaserClass_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | LaserClassSTART ENDITEM {yyReadData = 1;} y_XmlString
          LaserClassEND
          {$$ = $4;}
        ;

y_LaserEffectiveLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LaserEffectiveLengthSTART y_LinearValueType
          LaserEffectiveLengthEND
          {$$ = $2;}
        ;

y_LaserPowerSupply_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | LaserPowerSupplySTART y_UserDefinedUnitValueType
          LaserPowerSupplyEND
          {$$ = $2;}
        ;

y_LaserPower_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | LaserPowerSTART y_UserDefinedUnitValueType LaserPowerEND
          {$$ = $2;}
        ;

y_LaserRadarMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new LaserRadarMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LaserRadarMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_LaserRadarMeasureFeatureMethod_LaserRadarMeasureFeatureMethodType :
          LaserRadarMeasureFeatureMethodSTART
          y_LaserRadarMeasureFeatureMethodType
          LaserRadarMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "LaserRadarMeasureFeatureMethod";
          }
        | LaserRadarMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new LaserRadarMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "LaserRadarMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad LaserRadarMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_LaserRadarType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_MeasurementLaser_LaserType_0 y_PointingLaser_LaserType_0
          y_MaxPointsRate_UserDefinedUnitValueType_0
          y_MaxMeasurementRange_LinearValueType_0
          y_MinMeasurementRange_LinearValueType_0
          y_ScanningSpeed_UserDefinedUnitValueType_0
          y_DistanceAccuracy_LinearErrorType_0
          y_AzimuthAngularAccuracy_AngularErrorType_0
          y_ElevationAngularAccuracy_AngularErrorType_0
          y_RangeForVolumetricUncertainty_LinearValueType_0
          y_VolumetricUncertainty_LinearValueType_0
          y_MaxEnvironmentalAltitude_LinearValueType_0
          y_MinEnvironmentalAltitude_LinearValueType_0
          y_SurfacePointsSpeed_TimeValueType_0
          y_ToolingBallSpeed_TimeValueType_0 y_FeatureSpeed_TimeValueType_0
          {$$ = new LaserRadarType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           if ($32) yyUnrefMap.erase($32);
           if ($33) yyUnrefMap.erase($33);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LaserRadarType attributes");
             }
           delete $1;
          }
        ;

y_LaserRadar_LaserRadarType :
          LaserRadarSTART y_LaserRadarType LaserRadarEND
          {$$ = $2;
           $$->printElement = "LaserRadar";
          }
        ;

y_LaserSafetyClass_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | LaserSafetyClassSTART ENDITEM {yyReadData = 1;} y_XmlString
          LaserSafetyClassEND
          {$$ = $4;}
        ;

y_LaserSource_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | LaserSourceSTART ENDITEM {yyReadData = 1;} y_XmlString
          LaserSourceEND
          {$$ = $4;}
        ;

y_LaserSpotSize_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LaserSpotSizeSTART y_LinearValueType LaserSpotSizeEND
          {$$ = $2;}
        ;

y_LaserTrackerMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new LaserTrackerMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LaserTrackerMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_LaserTrackerMeasureFeatureMethod_LaserTrackerMeasureFeatureMethodType :
          LaserTrackerMeasureFeatureMethodSTART
          y_LaserTrackerMeasureFeatureMethodType
          LaserTrackerMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "LaserTrackerMeasureFeatureMethod";
          }
        | LaserTrackerMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new LaserTrackerMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "LaserTrackerMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad LaserTrackerMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        ;

y_LaserTrackerType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_MaximumAngularVelocity_UserDefinedUnitValueType_0
          y_DistanceAccuracy_LinearErrorType_0
          y_AngularAccuracy_AngularErrorType_0
          y_SamplingRate_UserDefinedUnitValueType_0
          y_TargetMirror_TargetMirrorEnumType_0 y_HeadMass_MassValueType_0
          y_HeadSize_CartesianWorkingVolumeType_0
          y_MaximumWorkingAmplitude_LinearValueType_0 y_Laser_LaserType_0
          y_Repeatability_LinearValueType_0
          {$$ = new LaserTrackerType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LaserTrackerType attributes");
             }
           delete $1;
          }
        ;

y_LaserTracker_LaserTrackerType :
          LaserTrackerSTART y_LaserTrackerType LaserTrackerEND
          {$$ = $2;
           $$->printElement = "LaserTracker";
          }
        ;

y_LaserTriangulationSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_AverageSpotDiameter_LinearValueType_0
          y_LaserSafetyClass_XmlString_0
          y_MaxMeasurementFrequency_UserDefinedUnitValueType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_HousingMaterial_XmlString_0
          y_PermissibleAmbientLight_UserDefinedUnitValueType_0
          y_ShockTolerance_UserDefinedUnitValueType_0
          y_VibrationTolerance_UserDefinedUnitValueType_0
          y_OutputPower_UserDefinedUnitValueType_0 y_Laser_LaserType_0
          {$$ = new LaserTriangulationSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LaserTriangulationSensorType attributes");
             }
           delete $1;
          }
        ;

y_LaserTriangulationSensor_LaserTriangulationSensorType :
          LaserTriangulationSensorSTART y_LaserTriangulationSensorType
          LaserTriangulationSensorEND
          {$$ = $2;
           $$->printElement = "LaserTriangulationSensor";
          }
        ;

y_LaserType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_LaserSource_XmlString_0
          y_LaserWaveLength_LinearValueType_0
          y_LaserPower_UserDefinedUnitValueType_0
          y_LaserSafetyClass_XmlString_0
          y_LaserEffectiveLength_LinearValueType_0
          y_LaserSpotSize_LinearValueType_0
          y_LaserPowerSupply_UserDefinedUnitValueType_0
          {$$ = new LaserType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LaserType attributes");
             }
           delete $1;
          }
        ;

y_LaserWaveLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LaserWaveLengthSTART y_LinearValueType LaserWaveLengthEND
          {$$ = $2;}
        ;

y_Laser_LaserType_0 :
          /* empty */
          {$$ = 0;}
        | LaserSTART y_LaserType LaserEND
          {$$ = $2;
           $$->printElement = "Laser";
          }
        ;

y_LateralTrackingSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | LateralTrackingSpeedSTART y_SpeedValueType
          LateralTrackingSpeedEND
          {$$ = $2;}
        ;

y_LatitudeLongitudeSweepFull_OrientedLatitudeLongitudeSweepType_0 :
          /* empty */
          {$$ = 0;}
        | LatitudeLongitudeSweepFullSTART
          y_OrientedLatitudeLongitudeSweepType
          LatitudeLongitudeSweepFullEND
          {$$ = $2;
           $$->printElement = "LatitudeLongitudeSweepFull";
          }
        ;

y_LatitudeLongitudeSweepMeasurementRange_OrientedLatitudeLongitudeSweepType_0 :
          /* empty */
          {$$ = 0;}
        | LatitudeLongitudeSweepMeasurementRangeSTART
          y_OrientedLatitudeLongitudeSweepType
          LatitudeLongitudeSweepMeasurementRangeEND
          {$$ = $2;
           $$->printElement = "LatitudeLongitudeSweepMeasurementRange";
          }
        ;

y_LatitudeLongitudeSweepType :
          ENDITEM y_DirMeridianPrime_UnitVectorType
          y_DomainLatitude_AngleRangeType y_DomainLongitude_AngleRangeType
          {$$ = new LatitudeLongitudeSweepType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType :
          LatitudeLongitudeSweepSTART y_LatitudeLongitudeSweepType
          LatitudeLongitudeSweepEND
          {$$ = $2;}
        ;

y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType_0 :
          /* empty */
          {$$ = 0;}
        | LatitudeLongitudeSweepSTART y_LatitudeLongitudeSweepType
          LatitudeLongitudeSweepEND
          {$$ = $2;}
        ;

y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType :
          LatitudeLongitudeSweepSTART y_OrientedLatitudeLongitudeSweepType
          LatitudeLongitudeSweepEND
          {$$ = $2;
           $$->printElement = "LatitudeLongitudeSweep";
          }
        ;

y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType_0 :
          /* empty */
          {$$ = 0;}
        | LatitudeLongitudeSweepSTART y_OrientedLatitudeLongitudeSweepType
          LatitudeLongitudeSweepEND
          {$$ = $2;
           $$->printElement = "LatitudeLongitudeSweep";
          }
        ;

y_LayerSetType :
          y_LiztAttributePair ENDITEM y_LiztLayer_LayerType_1_u
          {$$ = new LayerSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LayerSetType attributes");
             }
           delete $1;
          }
        ;

y_LayerSet_LayerSetType_0 :
          /* empty */
          {$$ = 0;}
        | LayerSetSTART y_LayerSetType LayerSetEND
          {$$ = $2;}
        ;

y_LayerType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ElementIds_ArrayReferenceFullType_0
          {$$ = new LayerType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LayerType attributes");
             }
           delete $1;
          }
        ;

y_Layer_LayerType :
          LayerSTART y_LayerType LayerEND
          {$$ = $2;
           $$->printElement = "Layer";
          }
        | LayerSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new LayerType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "Layer";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad LayerType attributes");
             }
           delete $2;
          }
        ;

y_LeaderCircularType :
          ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType y_HeadForm_LeaderHeadFormType
          y_HeadHeight_XmlDouble y_Center_Point2dSimpleType
          {$$ = new LeaderCircularType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_LeaderCircular_LeaderCircularType :
          LeaderCircularSTART y_LeaderCircularType LeaderCircularEND
          {$$ = $2;
           $$->printElement = "LeaderCircular";
          }
        ;

y_LeaderDoubleHeadCircularType :
          ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType y_HeadForm_LeaderHeadFormType
          y_HeadHeight_XmlDouble y_HeadForm2_LeaderHeadFormEnumType
          y_PointConnection_Point2dSimpleType y_Center_Point2dSimpleType
          {$$ = new LeaderDoubleHeadCircularType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_LeaderDoubleHeadCircular_LeaderDoubleHeadCircularType :
          LeaderDoubleHeadCircularSTART y_LeaderDoubleHeadCircularType
          LeaderDoubleHeadCircularEND
          {$$ = $2;
           $$->printElement = "LeaderDoubleHeadCircular";
          }
        ;

y_LeaderDoubleHeadExtendType :
          ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType y_HeadForm_LeaderHeadFormType
          y_HeadHeight_XmlDouble y_HeadForm2_LeaderHeadFormEnumType
          y_PointConnection_Point2dSimpleType
          y_PointExtension_Point2dSimpleType
          {$$ = new LeaderDoubleHeadExtendType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_LeaderDoubleHeadExtend_LeaderDoubleHeadExtendType :
          LeaderDoubleHeadExtendSTART y_LeaderDoubleHeadExtendType
          LeaderDoubleHeadExtendEND
          {$$ = $2;
           $$->printElement = "LeaderDoubleHeadExtend";
          }
        ;

y_LeaderDoubleHeadType :
          ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType y_HeadForm_LeaderHeadFormType
          y_HeadHeight_XmlDouble y_HeadForm2_LeaderHeadFormEnumType
          y_PointConnection_Point2dSimpleType
          {$$ = new LeaderDoubleHeadType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_LeaderDoubleHead_LeaderDoubleHeadType :
          LeaderDoubleHeadSTART y_LeaderDoubleHeadType LeaderDoubleHeadEND
          {$$ = $2;
           $$->printElement = "LeaderDoubleHead";
          }
        ;

y_LeaderExtendType :
          ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType y_HeadForm_LeaderHeadFormType
          y_HeadHeight_XmlDouble y_PointExtension_Point2dSimpleType
          y_Modifier_LeaderModifierEnumType_0
          {$$ = new LeaderExtendType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_LeaderExtend_LeaderExtendType :
          LeaderExtendSTART y_LeaderExtendType LeaderExtendEND
          {$$ = $2;
           $$->printElement = "LeaderExtend";
          }
        ;

y_LeaderHeadFormEnumType :
          DATASTRING
          {$$ = new LeaderHeadFormEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LeaderHeadFormEnumType value");
          }
        ;

y_LeaderHeadFormType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new LeaderHeadFormType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new LeaderHeadFormType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LeaderHeadFormType attributes");
             }
           delete $1;
          }
        ;

y_LeaderModifierEnumType :
          DATASTRING
          {$$ = new LeaderModifierEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LeaderModifierEnumType value");
          }
        ;

y_LeaderType :
          ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType y_HeadForm_LeaderHeadFormType
          y_HeadHeight_XmlDouble
          {$$ = new LeaderType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_Leader_LeaderType :
          LeaderSTART y_LeaderType LeaderEND
          {$$ = $2;
           $$->printElement = "Leader";
          }
        ;

y_Leader_substituteType :
          y_LeaderCircular_LeaderCircularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LeaderDoubleHeadCircular_LeaderDoubleHeadCircularType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LeaderDoubleHeadExtend_LeaderDoubleHeadExtendType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LeaderDoubleHead_LeaderDoubleHeadType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LeaderExtend_LeaderExtendType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Leader_LeaderType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LeftHanded_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | LeftHandedSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          LeftHandedEND
          {$$ = $4;}
        ;

y_LengthCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new LengthCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LengthCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_LengthCharacteristicDefinition_LengthCharacteristicDefinitionType :
          LengthCharacteristicDefinitionSTART
          y_LengthCharacteristicDefinitionType
          LengthCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "LengthCharacteristicDefinition";
          }
        ;

y_LengthCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new LengthCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LengthCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_LengthCharacteristicItem_LengthCharacteristicItemType :
          LengthCharacteristicItemSTART y_LengthCharacteristicItemType
          LengthCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "LengthCharacteristicItem";
          }
        ;

y_LengthCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new LengthCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LengthCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_LengthCharacteristicMeasurement_LengthCharacteristicMeasurementType :
          LengthCharacteristicMeasurementSTART
          y_LengthCharacteristicMeasurementType
          LengthCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "LengthCharacteristicMeasurement";
          }
        ;

y_LengthCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new LengthCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LengthCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_LengthCharacteristicNominal_LengthCharacteristicNominalType :
          LengthCharacteristicNominalSTART
          y_LengthCharacteristicNominalType LengthCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "LengthCharacteristicNominal";
          }
        ;

y_LengthCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new LengthCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_LengthCharacteristicStats_LengthCharacteristicStatsEvalType :
          LengthCharacteristicStatsSTART
          y_LengthCharacteristicStatsEvalType LengthCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "LengthCharacteristicStats";
          }
        ;

y_LengthDirection_UnitVectorType :
          LengthDirectionSTART y_UnitVectorType LengthDirectionEND
          {$$ = $2;}
        ;

y_LengthFunctionDiscreteType :
          y_LiztAttributePair ENDITEM y_DomainValues_ListDoubleType
          y_RangeValues_ListDoubleType y_DomainLinearUnit_XmlToken
          y_RangeLinearUnit_XmlToken
          {$$ = new LengthFunctionDiscreteType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LengthFunctionDiscreteType attributes");
             }
           delete $1;
          }
        ;

y_LengthMax_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LengthMaxSTART y_MeasuredLinearValueType LengthMaxEND
          {$$ = $2;}
        ;

y_LengthMin_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LengthMinSTART y_MeasuredLinearValueType LengthMinEND
          {$$ = $2;}
        ;

y_LengthOfEachWeld_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LengthOfEachWeldSTART y_LinearValueType LengthOfEachWeldEND
          {$$ = $2;}
        ;

y_LengthVector_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | LengthVectorSTART y_MeasuredUnitVectorType LengthVectorEND
          {$$ = $2;}
        ;

y_LengthVector_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | LengthVectorSTART y_UnitVectorType LengthVectorEND
          {$$ = $2;}
        ;

y_Length_LinearValueType :
          LengthSTART y_LinearValueType LengthEND
          {$$ = $2;}
        ;

y_Length_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LengthSTART y_LinearValueType LengthEND
          {$$ = $2;}
        ;

y_Length_MeasuredLinearValueType :
          LengthSTART y_MeasuredLinearValueType LengthEND
          {$$ = $2;}
        ;

y_Length_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LengthSTART y_MeasuredLinearValueType LengthEND
          {$$ = $2;}
        ;

y_Length_XmlDouble :
          LengthSTART ENDITEM {yyReadData = 1;} y_XmlDouble LengthEND
          {$$ = $4;}
        ;

y_Length_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | LengthSTART ENDITEM {yyReadData = 1;} y_XmlDouble LengthEND
          {$$ = $4;}
        ;

y_LessOrEqualType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_2_Check
          {$$ = new LessOrEqualType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LessOrEqual_LessOrEqualType :
          LessOrEqualSTART y_LessOrEqualType LessOrEqualEND
          {$$ = $2;
           $$->printElement = "LessOrEqual";
          }
        ;

y_LessThanType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_2_Check
          {$$ = new LessThanType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LessThan_LessThanType :
          LessThanSTART y_LessThanType LessThanEND
          {$$ = $2;
           $$->printElement = "LessThan";
          }
        ;

y_LesserErrorType :
          ENDITEM y_MaxErrorConstant_LinearValueType
          y_LinearError_LinearErrorType
          {$$ = new LesserErrorType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LesserError_LesserErrorType :
          LesserErrorSTART y_LesserErrorType LesserErrorEND
          {$$ = $2;}
        ;

y_LevelEnum_CriticalityLevelEnumType :
          LevelEnumSTART ENDITEM {yyReadData = 1;}
          y_CriticalityLevelEnumType LevelEnumEND
          {$$ = $4;}
        ;

y_LightPenCMMChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType_0 :
          /* empty */
          {$$ = 0;}
        | LightPenCMMChargeCoupledDeviceCameraSensorSTART
          y_ChargeCoupledDeviceCameraSensorType
          LightPenCMMChargeCoupledDeviceCameraSensorEND
          {$$ = $2;
           $$->printElement = "LightPenCMMChargeCoupledDeviceCameraSensor";
          }
        ;

y_LightPenCMMType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_LightPenCMMChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType_0
          y_LightSource_XmlString_0
          y_NominalVolumetricAccuracy_LinearValueType_0
          y_ActualVolumetricAccuracy_LinearValueType_0
          y_NominalSinglePointAccuracy_LinearValueType_0
          y_ActualSinglePointAccuracy_LinearValueType_0
          y_ScanningSpeed_UserDefinedUnitValueType_0
          y_LaserClass_XmlString_0
          {$$ = new LightPenCMMType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LightPenCMMType attributes");
             }
           delete $1;
          }
        ;

y_LightPenCMM_LightPenCMMType :
          LightPenCMMSTART y_LightPenCMMType LightPenCMMEND
          {$$ = $2;
           $$->printElement = "LightPenCMM";
          }
        ;

y_LightSource_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | LightSourceSTART ENDITEM {yyReadData = 1;} y_XmlString
          LightSourceEND
          {$$ = $4;}
        ;

y_Limit_XmlDecimal :
          LimitSTART ENDITEM {yyReadData = 1;} y_XmlDecimal LimitEND
          {$$ = $4;}
        ;

y_Limit_XmlPositiveInteger :
          LimitSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          LimitEND
          {$$ = $4;}
        ;

y_LimitingNumberT_1133_LimitingNumberT_1133_Type :
          y_LimitingNumberT_1133_Type
          {$$ = $1;}
        ;

y_LimitingNumberT_1133_Type :
          y_LimitingNumberT_1133_TypeChoicePair
          {$$ = new LimitingNumberT_1133_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LimitingNumberT_1133_TypeChoicePair :
          y_Count_XmlNonNegativeInteger
          {$$ = new LimitingNumberT_1133_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LimitingNumberT_1133_TypeType = LimitingNumberT_1133_TypeChoicePair::CountE;
           $$->LimitingNumberT_1133_TypeValue.Count = $1;
          }
        | y_Fraction_XmlDecimal
          {$$ = new LimitingNumberT_1133_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LimitingNumberT_1133_TypeType = LimitingNumberT_1133_TypeChoicePair::FractionE;
           $$->LimitingNumberT_1133_TypeValue.Fraction = $1;
          }
        ;

y_LimitingNumberType :
          ENDITEM y_LimitingNumberT_1133_LimitingNumberT_1133_Type
          {$$ = new LimitingNumberType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LimitsAndFitsSpecificationType :
          y_LiztAttributePair ENDITEM y_FormVariance_XmlToken
          y_Grade_XmlToken
          {$$ = new LimitsAndFitsSpecificationType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LimitsAndFitsSpecificationType attributes");
             }
           delete $1;
          }
        ;

y_LimitsAndFitsSpecification_LimitsAndFitsSpecificationType :
          LimitsAndFitsSpecificationSTART y_LimitsAndFitsSpecificationType
          LimitsAndFitsSpecificationEND
          {$$ = $2;}
        ;

y_LineAuxiliaryType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_StartPoint_PointSimpleType y_EndPoint_PointSimpleType
          y_LineStyle_LineStyleType_0
          {$$ = new LineAuxiliaryType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineAuxiliaryType attributes");
             }
           delete $1;
          }
        ;

y_LineAuxiliary_LineAuxiliaryType :
          LineAuxiliarySTART y_LineAuxiliaryType LineAuxiliaryEND
          {$$ = $2;
           $$->printElement = "LineAuxiliary";
          }
        ;

y_LineBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_2_u_Check
          {$$ = new LineBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineBestFitType attributes");
             }
           delete $1;
          }
        ;

y_LineCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new LineCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LineCheckedFeatureType :
          ENDITEM y_CheckDetails_LineCheckedType_0
          {$$ = new LineCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LineCheckedType :
          ENDITEM y_LineCheckedTypeChoicePair
          {$$ = new LineCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LineCheckedTypeChoicePair :
          y_Constructed_LineConstructionMethodType
          {$$ = new LineCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineCheckedTypeType = LineCheckedTypeChoicePair::ConstructedE;
           $$->LineCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new LineCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineCheckedTypeType = LineCheckedTypeChoicePair::MeasuredE;
           $$->LineCheckedTypeValue.Measured = $1;
          }
        ;

y_LineConstructionMethodType :
          ENDITEM y_LineConstructionMethodTypeChoicePair
          {$$ = new LineConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LineConstructionMethodTypeChoicePair :
          y_BestFit_LineBestFitType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::BestFitE;
           $$->LineConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_LineCastType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::CastE;
           $$->LineConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_LineCopyType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::CopyE;
           $$->LineConstructionMethodTypeValue.Copy = $1;
          }
        | y_Extract_LineExtractType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::ExtractE;
           $$->LineConstructionMethodTypeValue.Extract = $1;
          }
        | y_FromScan_LineFromScanType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::FromScanE;
           $$->LineConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_LineIntersectionType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::IntersectionE;
           $$->LineConstructionMethodTypeValue.Intersection = $1;
          }
        | y_Midline_LineMidlineType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::MidlineE;
           $$->LineConstructionMethodTypeValue.Midline = $1;
          }
        | y_Parallel_LineParallelType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::ParallelE;
           $$->LineConstructionMethodTypeValue.Parallel = $1;
          }
        | y_Perpendicular_LinePerpendicularType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::PerpendicularE;
           $$->LineConstructionMethodTypeValue.Perpendicular = $1;
          }
        | y_Projection_LineProjectionType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::ProjectionE;
           $$->LineConstructionMethodTypeValue.Projection = $1;
          }
        | y_Recompensated_LineRecompType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::RecompensatedE;
           $$->LineConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_TangentThrough_LineTangentThroughType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::TangentThroughE;
           $$->LineConstructionMethodTypeValue.TangentThrough = $1;
          }
        | y_Transform_LineTransformType
          {$$ = new LineConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineConstructionMethodTypeType = LineConstructionMethodTypeChoicePair::TransformE;
           $$->LineConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_LineCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseLine_BaseFeatureType
          {$$ = new LineCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LineDirection_UnitVectorType :
          LineDirectionSTART y_UnitVectorType LineDirectionEND
          {$$ = $2;}
        ;

y_LineExtractType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_CurveFeature_BaseFeatureType
          {$$ = new LineExtractType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LineFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          {$$ = new LineFeatureDefinitionType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_LineFeatureDefinition_LineFeatureDefinitionType :
          LineFeatureDefinitionSTART y_LineFeatureDefinitionType
          LineFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "LineFeatureDefinition";
          }
        | LineFeatureDefinitionSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new LineFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "LineFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad LineFeatureDefinitionType attributes");
             }
           delete $2;
          }
        ;

y_LineFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_LineMeasurementDeterminationType
          {$$ = new LineFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_LineFeatureItem_LineFeatureItemType :
          LineFeatureItemSTART y_LineFeatureItemType LineFeatureItemEND
          {$$ = $2;
           $$->printElement = "LineFeatureItem";
          }
        ;

y_LineFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0
          y_Direction_MeasuredUnitVectorType_0
          y_Length_MeasuredLinearValueType_0
          y_Normal_MeasuredUnitVectorType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new LineFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_LineFeatureMeasurement_LineFeatureMeasurementType :
          LineFeatureMeasurementSTART y_LineFeatureMeasurementType
          LineFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "LineFeatureMeasurement";
          }
        | LineFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new LineFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "LineFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad LineFeatureMeasurementType attributes");
             }
           delete $2;
          }
        ;

y_LineFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_Location_PointType y_Direction_UnitVectorType
          y_Length_LinearValueType_0 y_Normal_UnitVectorType_0
          y_Constructed_LineConstructionMethodType_0
          {$$ = new LineFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_LineFeatureNominal_LineFeatureNominalType :
          LineFeatureNominalSTART y_LineFeatureNominalType
          LineFeatureNominalEND
          {$$ = $2;
           $$->printElement = "LineFeatureNominal";
          }
        ;

y_LineFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          {$$ = new LineFromScanType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LineIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2_Check
          {$$ = new LineIntersectionType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LineMeasurementDeterminationType :
          ENDITEM y_LineMeasurementDeterminationTypeChoicePair
          {$$ = new LineMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LineMeasurementDeterminationTypeChoicePair :
          y_Checked_LineCheckedFeatureType
          {$$ = new LineMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineMeasurementDeterminationTypeType = LineMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->LineMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new LineMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LineMeasurementDeterminationTypeType = LineMeasurementDeterminationTypeChoicePair::SetE;
           $$->LineMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_LineMidlineType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseLine_SequencedBaseFeatureType_2_2_Check
          {$$ = new LineMidlineType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LineParallelType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ParallelFeature_BaseFeatureType y_PointFeature_BaseFeatureType
          {$$ = new LineParallelType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LinePerpendicularType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_PerpendicularFeature_BaseFeatureType
          y_PointFeature_BaseFeatureType
          {$$ = new LinePerpendicularType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LinePointSamplingStrategyType :
          ENDITEM y_LinePointSamplingStrategyTypeChoicePair
          {$$ = new LinePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType
          {$$ = new LinePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinePointSamplingStrategyTypeType = LinePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->LinePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new LinePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinePointSamplingStrategyTypeType = LinePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->LinePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_LineProfileCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_ProfileCharacte_1067_ProfileCharacte_1067_Type_0
          y_OffsetZone_XmlBoolean_0 y_VariableAngle_XmlBoolean_0
          y_SecondCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_ThirdCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_FourthCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_OrientationOnly_XmlBoolean_0 y_Extent_ExtentType_0
          {$$ = new LineProfileCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineProfileCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_LineProfileCharacteristicDefinition_LineProfileCharacteristicDefinitionType :
          LineProfileCharacteristicDefinitionSTART
          y_LineProfileCharacteristicDefinitionType
          LineProfileCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "LineProfileCharacteristicDefinition";
          }
        ;

y_LineProfileCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new LineProfileCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineProfileCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_LineProfileCharacteristicItem_LineProfileCharacteristicItemType :
          LineProfileCharacteristicItemSTART
          y_LineProfileCharacteristicItemType
          LineProfileCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "LineProfileCharacteristicItem";
          }
        ;

y_LineProfileCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_WorstPositiveDeviation_LinearValueType_0
          y_WorstNegativeDeviation_LinearValueType_0
          y_PointDeviations_PointDeviationsType_0 y_DatumsOk_XmlBoolean_0
          y_DRFTransformActualId_QIFReferenceType_0
          y_SecondCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_ThirdCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_FourthCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          {$$ = new LineProfileCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineProfileCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_LineProfileCharacteristicMeasurement_LineProfileCharacteristicMeasurementType :
          LineProfileCharacteristicMeasurementSTART
          y_LineProfileCharacteristicMeasurementType
          LineProfileCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "LineProfileCharacteristicMeasurement";
          }
        ;

y_LineProfileCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0 y_Vector_UnitVectorType
          y_ProfileCurveId_QIFReferenceFullType_0
          {$$ = new LineProfileCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineProfileCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_LineProfileCharacteristicNominal_LineProfileCharacteristicNominalType :
          LineProfileCharacteristicNominalSTART
          y_LineProfileCharacteristicNominalType
          LineProfileCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "LineProfileCharacteristicNominal";
          }
        ;

y_LineProfileCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_WorstPositiveDeviationStats_StatsLinearType_0
          y_WorstNegativeDeviationStats_StatsLinearType_0
          y_PointDeviationsStats_PointDeviationsStatsEvalType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_CompositeSegmentsStats_CompositeSegmentsProfileStatsEvalType_0
          {$$ = new LineProfileCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
          }
        ;

y_LineProfileCharacteristicStats_LineProfileCharacteristicStatsEvalType :
          LineProfileCharacteristicStatsSTART
          y_LineProfileCharacteristicStatsEvalType
          LineProfileCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "LineProfileCharacteristicStats";
          }
        ;

y_LineProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionPlane_BaseFeatureType
          y_ProjectionLine_BaseFeatureType
          {$$ = new LineProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LineRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new LineRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LineSegment2dType :
          ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType
          {$$ = new LineSegment2dType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LineSegmentType :
          ENDITEM y_StartPoint_PointSimpleType y_EndPoint_PointSimpleType
          {$$ = new LineSegmentType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_StartPoint_PointSimpleType
          y_EndPoint_PointSimpleType
          {$$ = new LineSegmentType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineSegmentType attributes");
             }
           delete $1;
          }
        ;

y_LineStyleType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new LineStyleType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new LineStyleType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LineStyleType attributes");
             }
           delete $1;
          }
        ;

y_LineStyle_LineStyleType_0 :
          /* empty */
          {$$ = 0;}
        | LineStyleSTART y_LineStyleType LineStyleEND
          {$$ = $2;}
        ;

y_LineTangentThroughType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_TangentFeature_BaseFeatureType y_PointFeature_BaseFeatureType
          {$$ = new LineTangentThroughType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LineTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseLine_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new LineTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Line_LineSegmentType :
          LineSTART y_LineSegmentType LineEND
          {$$ = $2;}
        ;

y_LinearAbsoluteLinearity_MeasuredLinearValueType :
          LinearAbsoluteLinearitySTART y_MeasuredLinearValueType
          LinearAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_LinearAxisType :
          ENDITEM y_MinLinearAxis_LinearValueType
          y_MaxLinearAxis_LinearValueType
          {$$ = new LinearAxisType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LinearAxis_LinearAxisType :
          LinearAxisSTART y_LinearAxisType LinearAxisEND
          {$$ = $2;
           $$->printElement = "LinearAxis";
          }
        ;

y_LinearCharacter_1058_LinearCharacter_1058_Type :
          y_LinearCharacter_1058_Type
          {$$ = $1;}
        ;

y_LinearCharacter_1058_Type :
          y_LinearCharacter_1058_TypeChoicePair
          {$$ = new LinearCharacter_1058_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LinearCharacter_1058_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new LinearCharacter_1058_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1058_TypeType = LinearCharacter_1058_TypeChoicePair::NonToleranceE;
           $$->LinearCharacter_1058_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_LinearToleranceType
          {$$ = new LinearCharacter_1058_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1058_TypeType = LinearCharacter_1058_TypeChoicePair::ToleranceE;
           $$->LinearCharacter_1058_TypeValue.Tolerance = $1;
          }
        ;

y_LinearCharacter_1134_LinearCharacter_1134_Type :
          y_LinearCharacter_1134_Type
          {$$ = $1;}
        ;

y_LinearCharacter_1134_Type :
          y_LinearCharacter_1134_TypeChoicePair
          {$$ = new LinearCharacter_1134_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LinearCharacter_1134_TypeChoicePair :
          y_LinearCharacter_1153_LinearCharacter_1153_Type
          {$$ = new LinearCharacter_1134_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1134_TypeType = LinearCharacter_1134_TypeChoicePair::LinearCharacter_1153E;
           $$->LinearCharacter_1134_TypeValue.LinearCharacter_1153 = $1;
          }
        | y_LinearCharacter_1154_LinearCharacter_1154_Type
          {$$ = new LinearCharacter_1134_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1134_TypeType = LinearCharacter_1134_TypeChoicePair::LinearCharacter_1154E;
           $$->LinearCharacter_1134_TypeValue.LinearCharacter_1154 = $1;
          }
        | y_LinearCharacter_1155_LinearCharacter_1155_Type
          {$$ = new LinearCharacter_1134_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1134_TypeType = LinearCharacter_1134_TypeChoicePair::LinearCharacter_1155E;
           $$->LinearCharacter_1134_TypeValue.LinearCharacter_1155 = $1;
          }
        | y_LinearCharacter_1156_LinearCharacter_1156_Type
          {$$ = new LinearCharacter_1134_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1134_TypeType = LinearCharacter_1134_TypeChoicePair::LinearCharacter_1156E;
           $$->LinearCharacter_1134_TypeValue.LinearCharacter_1156 = $1;
          }
        | y_MinDeviationStats_StatsLinearType
          {$$ = new LinearCharacter_1134_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1134_TypeType = LinearCharacter_1134_TypeChoicePair::MinDeviationStatsE;
           $$->LinearCharacter_1134_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsLinearType
          {$$ = new LinearCharacter_1134_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCharacter_1134_TypeType = LinearCharacter_1134_TypeChoicePair::MinValueStatsE;
           $$->LinearCharacter_1134_TypeValue.MinValueStats = $1;
          }
        ;

y_LinearCharacter_1153_LinearCharacter_1153_Type :
          y_LinearCharacter_1153_Type
          {$$ = $1;}
        ;

y_LinearCharacter_1153_Type :
          y_ValueStats_StatsWithTolLinearType
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          {$$ = new LinearCharacter_1153_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LinearCharacter_1154_LinearCharacter_1154_Type :
          y_LinearCharacter_1154_Type
          {$$ = $1;}
        ;

y_LinearCharacter_1154_Type :
          y_MaxValueStats_StatsLinearType y_MinValueStats_StatsLinearType_0
          {$$ = new LinearCharacter_1154_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinearCharacter_1155_LinearCharacter_1155_Type :
          y_LinearCharacter_1155_Type
          {$$ = $1;}
        ;

y_LinearCharacter_1155_Type :
          y_DeviationStats_StatsWithTolLinearType
          y_MaxDeviationStats_StatsLinearType_0
          y_MinDeviationStats_StatsLinearType_0
          {$$ = new LinearCharacter_1155_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LinearCharacter_1156_LinearCharacter_1156_Type :
          y_LinearCharacter_1156_Type
          {$$ = $1;}
        ;

y_LinearCharacter_1156_Type :
          y_MaxDeviationStats_StatsLinearType
          y_MinDeviationStats_StatsLinearType_0
          {$$ = new LinearCharacter_1156_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinearCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new LinearCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_LinearCharacteristicStats_LinearCharacteristicStatsEvalType :
          LinearCharacteristicStatsSTART
          y_LinearCharacteristicStatsEvalType LinearCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "LinearCharacteristicStats";
          }
        ;

y_LinearCoordinat_1059_LinearCoordinat_1059_Type :
          y_LinearCoordinat_1059_Type
          {$$ = $1;}
        ;

y_LinearCoordinat_1059_Type :
          y_LinearCoordinat_1059_TypeChoicePair
          {$$ = new LinearCoordinat_1059_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LinearCoordinat_1059_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new LinearCoordinat_1059_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCoordinat_1059_TypeType = LinearCoordinat_1059_TypeChoicePair::NonToleranceE;
           $$->LinearCoordinat_1059_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_LinearToleranceType
          {$$ = new LinearCoordinat_1059_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearCoordinat_1059_TypeType = LinearCoordinat_1059_TypeChoicePair::ToleranceE;
           $$->LinearCoordinat_1059_TypeValue.Tolerance = $1;
          }
        ;

y_LinearCoordinateCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCoordinat_1059_LinearCoordinat_1059_Type
          {$$ = new LinearCoordinateCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearCoordinateCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_LinearCoordinateCharacteristicDefinition_LinearCoordinateCharacteristicDefinitionType :
          LinearCoordinateCharacteristicDefinitionSTART
          y_LinearCoordinateCharacteristicDefinitionType
          LinearCoordinateCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "LinearCoordinateCharacteristicDefinition";
          }
        ;

y_LinearCoordinateCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new LinearCoordinateCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearCoordinateCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_LinearCoordinateCharacteristicItem_LinearCoordinateCharacteristicItemType :
          LinearCoordinateCharacteristicItemSTART
          y_LinearCoordinateCharacteristicItemType
          LinearCoordinateCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "LinearCoordinateCharacteristicItem";
          }
        ;

y_LinearCoordinateCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_TypeOfCoordinates_TypeOfCoordinatesType
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new LinearCoordinateCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearCoordinateCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_LinearCoordinateCharacteristicMeasurement_LinearCoordinateCharacteristicMeasurementType :
          LinearCoordinateCharacteristicMeasurementSTART
          y_LinearCoordinateCharacteristicMeasurementType
          LinearCoordinateCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "LinearCoordinateCharacteristicMeasurement";
          }
        ;

y_LinearCoordinateCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_Direction_LinearCoordinateDirectionEnumType
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new LinearCoordinateCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearCoordinateCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_LinearCoordinateCharacteristicNominal_LinearCoordinateCharacteristicNominalType :
          LinearCoordinateCharacteristicNominalSTART
          y_LinearCoordinateCharacteristicNominalType
          LinearCoordinateCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "LinearCoordinateCharacteristicNominal";
          }
        ;

y_LinearCoordinateCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new LinearCoordinateCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_LinearCoordinateCharacteristicStats_LinearCoordinateCharacteristicStatsEvalType :
          LinearCoordinateCharacteristicStatsSTART
          y_LinearCoordinateCharacteristicStatsEvalType
          LinearCoordinateCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "LinearCoordinateCharacteristicStats";
          }
        ;

y_LinearCoordinateDirectionEnumType :
          DATASTRING
          {$$ = new LinearCoordinateDirectionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LinearCoordinateDirectionEnumType value");
          }
        ;

y_LinearCriterion_CriterionLinearType_0 :
          /* empty */
          {$$ = 0;}
        | LinearCriterionSTART y_CriterionLinearType LinearCriterionEND
          {$$ = $2;
           $$->printElement = "LinearCriterion";
          }
        ;

y_LinearDualValueType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new LinearDualValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearDualValueType attributes");
             }
           delete $1;
          }
        ;

y_LinearErrorType :
          ENDITEM y_BaseError_LinearValueType y_ErrorRate_XmlDecimal
          {$$ = new LinearErrorType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LinearError_LinearErrorType :
          LinearErrorSTART y_LinearErrorType LinearErrorEND
          {$$ = $2;}
        ;

y_LinearLimit_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LinearLimitSTART y_LinearValueType LinearLimitEND
          {$$ = $2;}
        ;

y_LinearMeasurement_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | LinearMeasurementSTART y_MeasuredLinearValueType
          LinearMeasurementEND
          {$$ = $2;}
        ;

y_LinearOrRotaryAxisType :
          ENDITEM y_Axis_substituteType
          {$$ = new LinearOrRotaryAxisType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinearResolutionType :
          ENDITEM y_LinearValue_LinearValueType
          {$$ = new LinearResolutionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinearResolution_LinearResolutionType :
          LinearResolutionSTART y_LinearResolutionType LinearResolutionEND
          {$$ = $2;
           $$->printElement = "LinearResolution";
          }
        ;

y_LinearResolution_LinearResolutionType_0 :
          /* empty */
          {$$ = 0;}
        | LinearResolutionSTART y_LinearResolutionType LinearResolutionEND
          {$$ = $2;
           $$->printElement = "LinearResolution";
          }
        ;

y_LinearSize_LinearValueType :
          LinearSizeSTART y_LinearValueType LinearSizeEND
          {$$ = $2;}
        ;

y_LinearStatsSummaries_SummariesStatisticsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | LinearStatsSummariesSTART y_SummariesStatisticsLinearType
          LinearStatsSummariesEND
          {$$ = $2;}
        ;

y_LinearStatsSummary_SummaryStatisticsLinearType :
          LinearStatsSummarySTART y_SummaryStatisticsLinearType
          LinearStatsSummaryEND
          {$$ = $2;
           $$->printElement = "LinearStatsSummary";
          }
        ;

y_LinearToleranceDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LinearTolerance_1016_LinearTolerance_1016_Type
          {$$ = new LinearToleranceDefinitionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearToleranceDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_LinearToleranceType :
          ENDITEM y_LinearTolerance_1017_LinearTolerance_1017_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new LinearToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LinearTolerance_1016_LinearTolerance_1016_Type :
          y_LinearTolerance_1016_Type
          {$$ = $1;}
        ;

y_LinearTolerance_1016_Type :
          y_LinearTolerance_1016_TypeChoicePair
          {$$ = new LinearTolerance_1016_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LinearTolerance_1016_TypeChoicePair :
          y_LinearTolerance_1033_LinearTolerance_1033_Type
          {$$ = new LinearTolerance_1016_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearTolerance_1016_TypeType = LinearTolerance_1016_TypeChoicePair::LinearTolerance_1033E;
           $$->LinearTolerance_1016_TypeValue.LinearTolerance_1033 = $1;
          }
        | y_MinValue_LinearValueType
          {$$ = new LinearTolerance_1016_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearTolerance_1016_TypeType = LinearTolerance_1016_TypeChoicePair::MinValueE;
           $$->LinearTolerance_1016_TypeValue.MinValue = $1;
          }
        ;

y_LinearTolerance_1017_LinearTolerance_1017_Type :
          y_LinearTolerance_1017_Type
          {$$ = $1;}
        ;

y_LinearTolerance_1017_Type :
          y_LinearTolerance_1017_TypeChoicePair
          {$$ = new LinearTolerance_1017_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LinearTolerance_1017_TypeChoicePair :
          y_DefinitionId_QIFReferenceFullType
          {$$ = new LinearTolerance_1017_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearTolerance_1017_TypeType = LinearTolerance_1017_TypeChoicePair::DefinitionIdE;
           $$->LinearTolerance_1017_TypeValue.DefinitionId = $1;
          }
        | y_LinearTolerance_1034_LinearTolerance_1034_Type
          {$$ = new LinearTolerance_1017_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearTolerance_1017_TypeType = LinearTolerance_1017_TypeChoicePair::LinearTolerance_1034E;
           $$->LinearTolerance_1017_TypeValue.LinearTolerance_1034 = $1;
          }
        | y_LinearTolerance_1035_LinearTolerance_1035_Type
          {$$ = new LinearTolerance_1017_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearTolerance_1017_TypeType = LinearTolerance_1017_TypeChoicePair::LinearTolerance_1035E;
           $$->LinearTolerance_1017_TypeValue.LinearTolerance_1035 = $1;
          }
        ;

y_LinearTolerance_1033_LinearTolerance_1033_Type :
          y_LinearTolerance_1033_Type
          {$$ = $1;}
        ;

y_LinearTolerance_1033_Type :
          y_MaxValue_LinearValueType y_MinValue_LinearValueType_0
          {$$ = new LinearTolerance_1033_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinearTolerance_1034_LinearTolerance_1034_Type :
          y_LinearTolerance_1034_Type
          {$$ = $1;}
        ;

y_LinearTolerance_1034_Type :
          y_MaxValue_LinearValueType y_MaxDualValue_LinearDualValueType_0
          y_LinearTolerance_1041_LinearTolerance_1041_Type_0
          {$$ = new LinearTolerance_1034_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LinearTolerance_1035_LinearTolerance_1035_Type :
          y_LinearTolerance_1035_Type
          {$$ = $1;}
        ;

y_LinearTolerance_1035_Type :
          y_MinValue_LinearValueType y_MinDualValue_LinearDualValueType_0
          {$$ = new LinearTolerance_1035_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinearTolerance_1041_LinearTolerance_1041_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_LinearTolerance_1041_Type
          {$$ = $1;}
        ;

y_LinearTolerance_1041_Type :
          y_MinValue_LinearValueType y_MinDualValue_LinearDualValueType_0
          {$$ = new LinearTolerance_1041_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LinearTolerance_LinearToleranceDefinitionType :
          LinearToleranceSTART y_LinearToleranceDefinitionType
          LinearToleranceEND
          {$$ = $2;}
        ;

y_LinearUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new LinearUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_LinearUnit_LinearUnitType :
          LinearUnitSTART y_LinearUnitType LinearUnitEND
          {$$ = $2;}
        ;

y_LinearUnit_LinearUnitType_0 :
          /* empty */
          {$$ = 0;}
        | LinearUnitSTART y_LinearUnitType LinearUnitEND
          {$$ = $2;}
        ;

y_LinearValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new LinearValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new LinearValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearValueType attributes");
             }
           delete $1;
          }
        ;

y_LinearValue_LinearValueType :
          LinearValueSTART y_LinearValueType LinearValueEND
          {$$ = $2;}
        ;

y_LinearVariableDifferentialTransformerEnumType :
          DATASTRING
          {$$ = new LinearVariableDifferentialTransformerEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LinearVariableDifferentialTransformerEnumType value");
          }
        ;

y_LinearVariableDifferentialTransformerSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_TypeOfLinearVariableDifferentialTransformer_LinearVariableDifferentialTransformerEnumType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_TemperatureStability_UserDefinedUnitValueType_0
          y_ExcitationFrequency_UserDefinedUnitValueType_0
          y_ExcitationAmplitude_UserDefinedUnitValueType_0
          y_Diameter_LinearValueType_0
          y_ShockTolerance_UserDefinedUnitValueType_0
          y_VibrationTolerance_UserDefinedUnitValueType_0
          y_HousingMaterial_XmlString_0 y_ElectronicDescription_XmlString_0
          {$$ = new LinearVariableDifferentialTransformerSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearVariableDifferentialTransformerSensorType attributes");
             }
           delete $1;
          }
        ;

y_LinearityError_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | LinearityErrorSTART ENDITEM {yyReadData = 1;} y_XmlString
          LinearityErrorEND
          {$$ = $4;}
        ;

y_LinearityStudyP_1204_LinearityStudyP_1204_Type :
          y_LinearityStudyP_1204_Type
          {$$ = $1;}
        ;

y_LinearityStudyP_1204_Type :
          y_LinearityStudyP_1204_TypeChoicePair
          {$$ = new LinearityStudyP_1204_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LinearityStudyP_1204_TypeChoicePair :
          y_AbsoluteMinimums_AbsoluteLimitsByUnitType
          {$$ = new LinearityStudyP_1204_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyP_1204_TypeType = LinearityStudyP_1204_TypeChoicePair::AbsoluteMinimumsE;
           $$->LinearityStudyP_1204_TypeValue.AbsoluteMinimums = $1;
          }
        | y_RelativeLinearityMinimum_XmlDecimal
          {$$ = new LinearityStudyP_1204_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyP_1204_TypeType = LinearityStudyP_1204_TypeChoicePair::RelativeLinearityMinimumE;
           $$->LinearityStudyP_1204_TypeValue.RelativeLinearityMinimum = $1;
          }
        ;

y_LinearityStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_GoodnessOfFitThreshold_XmlDecimal_0
          y_LinearityStudyP_1204_LinearityStudyP_1204_Type
          {$$ = new LinearityStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearityStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_LinearityStudyPlan_LinearityStudyPlanType :
          LinearityStudyPlanSTART y_LinearityStudyPlanType
          LinearityStudyPlanEND
          {$$ = $2;
           $$->printElement = "LinearityStudyPlan";
          }
        ;

y_LinearityStudyR_1205_LinearityStudyR_1205_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_LinearityStudyR_1205_Type
          {$$ = $1;}
        ;

y_LinearityStudyR_1205_Type :
          y_LinearityStudyR_1205_TypeChoicePair
          {$$ = new LinearityStudyR_1205_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LinearityStudyR_1205_TypeChoicePair :
          y_AngularAbsoluteLinearity_MeasuredAngularValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::AngularAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.AngularAbsoluteLinearity = $1;
          }
        | y_AreaAbsoluteLinearity_MeasuredAreaValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::AreaAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.AreaAbsoluteLinearity = $1;
          }
        | y_ForceAbsoluteLinearity_MeasuredForceValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::ForceAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.ForceAbsoluteLinearity = $1;
          }
        | y_LinearAbsoluteLinearity_MeasuredLinearValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::LinearAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.LinearAbsoluteLinearity = $1;
          }
        | y_MassAbsoluteLinearity_MeasuredMassValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::MassAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.MassAbsoluteLinearity = $1;
          }
        | y_PressureAbsoluteLinearity_MeasuredPressureValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::PressureAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.PressureAbsoluteLinearity = $1;
          }
        | y_SpeedAbsoluteLinearity_MeasuredSpeedValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::SpeedAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.SpeedAbsoluteLinearity = $1;
          }
        | y_TemperatureAbsoluteLinearity_MeasuredTemperatureValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::TemperatureAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.TemperatureAbsoluteLinearity = $1;
          }
        | y_TimeAbsoluteLinearity_MeasuredTimeValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::TimeAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.TimeAbsoluteLinearity = $1;
          }
        | y_UserDefinedUnitAbsoluteLinearity_MeasuredUserDefinedUnitValueType
          {$$ = new LinearityStudyR_1205_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LinearityStudyR_1205_TypeType = LinearityStudyR_1205_TypeChoicePair::UserDefinedUnitAbsoluteLinearityE;
           $$->LinearityStudyR_1205_TypeValue.UserDefinedUnitAbsoluteLinearity = $1;
          }
        ;

y_LinearityStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_SampleSize_XmlPositiveInteger
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_GoodnessOfFit_MeasuredDecimalType_0
          y_LinearityStudyR_1205_LinearityStudyR_1205_Type_0
          y_RelativeLinearity_MeasuredDecimalType_0
          {$$ = new LinearityStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LinearityStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_LinearityStudyResults_LinearityStudyResultsType :
          LinearityStudyResultsSTART y_LinearityStudyResultsType
          LinearityStudyResultsEND
          {$$ = $2;
           $$->printElement = "LinearityStudyResults";
          }
        ;

y_Linearity_StatsMeasuredDecimalType :
          LinearitySTART y_StatsMeasuredDecimalType LinearityEND
          {$$ = $2;
           $$->printElement = "Linearity";
          }
        ;

y_Linearity_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | LinearitySTART y_UserDefinedUnitValueType LinearityEND
          {$$ = $2;}
        ;

y_LinksStiffness_StiffnessType_0 :
          /* empty */
          {$$ = 0;}
        | LinksStiffnessSTART ENDWHOLEITEM
          {$$ = new StiffnessType();
           yyUnrefMap[$$] = $$;
          }
        | LinksStiffnessSTART y_StiffnessType LinksStiffnessEND
          {$$ = $2;}
        ;

y_ListAccumulatedStatsValuesListType :
          ENDITEM {yyReadDataList = 1;} y_StatsValuesEnumType
          {$$ = new ListAccumulatedStatsValuesListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListAccumulatedStatsValuesListType y_StatsValuesEnumType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListAccumulatedStatsValuesType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Stats_ListAccumulatedStatsValuesListType
          {$$ = new ListAccumulatedStatsValuesType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ListBooleanType :
          ENDITEM {yyReadDataList = 1;} y_XmlBoolean
          {$$ = new ListBooleanType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListBooleanType y_XmlBoolean
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListDateTimeType :
          ENDITEM {yyReadDataList = 1;} y_XmlDateTime
          {$$ = new ListDateTimeType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListDateTimeType y_XmlDateTime
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListDoubleType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new ListDoubleType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListDoubleType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListIntType :
          ENDITEM {yyReadDataList = 1;} y_XmlInteger
          {$$ = new ListIntType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListIntType y_XmlInteger
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListQIFReferenc_1002_ListQIFReferenc_1002_Type :
          y_ListQIFReferenc_1002_Type
          {$$ = $1;}
        ;

y_ListQIFReferenc_1002_Type :
          y_Id_QIFReferenceSimpleType y_XIds_ListQIFReferenceSimpleType
          {$$ = new ListQIFReferenc_1002_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListQIFReferenceFullType :
          y_LiztAttributePair ENDITEM y_ListQIFReferenceTypeChoicePair
          {$$ = new ListQIFReferenceFullType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ListQIFReferenceFullType attributes");
             }
           delete $1;
          }
        ;

y_ListQIFReferenceSimpleType :
          ENDITEM {yyReadDataList = 1;} y_QIFReferenceSimpleType
          {$$ = new ListQIFReferenceSimpleType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListQIFReferenceSimpleType y_QIFReferenceSimpleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListQIFReferenceType :
          y_LiztAttributePair ENDITEM y_ListQIFReferenceTypeChoicePair
          {$$ = new ListQIFReferenceType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ListQIFReferenceType attributes");
             }
           delete $1;
          }
        ;

y_ListQIFReferenceTypeChoicePair :
          y_Ids_ListQIFReferenceSimpleType
          {$$ = new ListQIFReferenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ListQIFReferenceTypeType = ListQIFReferenceTypeChoicePair::IdsE;
           $$->ListQIFReferenceTypeValue.Ids = $1;
          }
        | y_ListQIFReferenc_1002_ListQIFReferenc_1002_Type
          {$$ = new ListQIFReferenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ListQIFReferenceTypeType = ListQIFReferenceTypeChoicePair::ListQIFReferenc_1002E;
           $$->ListQIFReferenceTypeValue.ListQIFReferenc_1002 = $1;
          }
        ;

y_ListSubgroupStatsValuesListType :
          ENDITEM {yyReadDataList = 1;} y_SubgroupStatsValuesEnumType
          {$$ = new ListSubgroupStatsValuesListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListSubgroupStatsValuesListType y_SubgroupStatsValuesEnumType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListSubgroupStatsValuesType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Stats_ListSubgroupStatsValuesListType
          {$$ = new ListSubgroupStatsValuesType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ListSummaryStatsValuesListType :
          ENDITEM {yyReadDataList = 1;} y_StatsValuesEnumType
          {$$ = new ListSummaryStatsValuesListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListSummaryStatsValuesListType y_StatsValuesEnumType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ListSummaryStatsValuesType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Stats_ListSummaryStatsValuesListType
          {$$ = new ListSummaryStatsValuesType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ListTokenType :
          ENDITEM {yyReadDataList = 1;} y_XmlNMTOKEN
          {$$ = new ListTokenType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_ListTokenType y_XmlNMTOKEN
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAACMMAccuracy_AACMMAccuracyType_1_u :
          y_AACMMAccuracy_AACMMAccuracyType
          {$$ = new AACMMAccuracyTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAACMMAccuracy_AACMMAccuracyType_1_u
          y_AACMMAccuracy_AACMMAccuracyType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztActionMethod_substituteType_1_u :
          y_ActionMethod_substituteType
          {$$ = new ActionMethodBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztActionMethod_substituteType_1_u
          y_ActionMethod_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztActualComponentSet_ActualComponentSetType_1_u :
          y_ActualComponentSet_ActualComponentSetType
          {$$ = new ActualComponentSetTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztActualComponentSet_ActualComponentSetType_1_u
          y_ActualComponentSet_ActualComponentSetType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztActualComponent_ActualComponentType_1_u :
          y_ActualComponent_ActualComponentType
          {$$ = new ActualComponentTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztActualComponent_ActualComponentType_1_u
          y_ActualComponent_ActualComponentType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAlgorithm_AlgorithmType_1_u :
          y_Algorithm_AlgorithmType
          {$$ = new AlgorithmTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAlgorithm_AlgorithmType_1_u y_Algorithm_AlgorithmType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAlignmentOperation_substituteType_1_u :
          y_AlignmentOperation_substituteType
          {$$ = new AlignmentOperationBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAlignmentOperation_substituteType_1_u
          y_AlignmentOperation_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAngularStatsSummary_SummaryStatisticsAngularType_1_u :
          y_AngularStatsSummary_SummaryStatisticsAngularType
          {$$ = new SummaryStatisticsAngularTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAngularStatsSummary_SummaryStatisticsAngularType_1_u
          y_AngularStatsSummary_SummaryStatisticsAngularType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAngularUnit_AngularUnitType_0_u :
          /* empty */
          {$$ = new AngularUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztAngularUnit_AngularUnitType_0_u
          y_AngularUnit_AngularUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAnnotationView_AnnotationViewType_1_u :
          y_AnnotationView_AnnotationViewType
          {$$ = new AnnotationViewTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAnnotationView_AnnotationViewType_1_u
          y_AnnotationView_AnnotationViewType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAreaStatsSummary_SummaryStatisticsAreaType_1_u :
          y_AreaStatsSummary_SummaryStatisticsAreaType
          {$$ = new SummaryStatisticsAreaTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAreaStatsSummary_SummaryStatisticsAreaType_1_u
          y_AreaStatsSummary_SummaryStatisticsAreaType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAreaUnit_AreaUnitType_0_u :
          /* empty */
          {$$ = new AreaUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztAreaUnit_AreaUnitType_0_u y_AreaUnit_AreaUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztArea_Area2dType_1_u :
          y_Area_Area2dType
          {$$ = new Area2dTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztArea_Area2dType_1_u y_Area_Area2dType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztArea_SectionAreaType_1_u :
          y_Area_SectionAreaType
          {$$ = new SectionAreaTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztArea_SectionAreaType_1_u y_Area_SectionAreaType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztArithmeticExpression_substituteType_2_2 :
          y_ArithmeticExpression_substituteType
          {$$ = new ArithmeticExpressionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztArithmeticExpression_substituteType_2_2
          y_ArithmeticExpression_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztArithmeticExpression_substituteType_2_2_Check :
          y_LiztArithmeticExpression_substituteType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 ArithmeticExpressions");
           if ($1->size() < 2)
             return yyerror("must be at least 2 ArithmeticExpressions");
          }
        ;

y_LiztArithmeticExpression_substituteType_2_u :
          y_ArithmeticExpression_substituteType
          {$$ = new ArithmeticExpressionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztArithmeticExpression_substituteType_2_u
          y_ArithmeticExpression_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztArithmeticExpression_substituteType_2_u_Check :
          y_LiztArithmeticExpression_substituteType_2_u
          {$$ = $1;
           if ($1->size() < 2)
             return yyerror("must be at least 2 ArithmeticExpressions");
          }
        ;

y_LiztAsmPath_AsmPathType_1_u :
          y_AsmPath_AsmPathType
          {$$ = new AsmPathTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAsmPath_AsmPathType_1_u y_AsmPath_AsmPathType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAssembly_AssemblyType_1_u :
          y_Assembly_AssemblyType
          {$$ = new AssemblyTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAssembly_AssemblyType_1_u y_Assembly_AssemblyType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAssignableCause_AssignableCauseType_1_u :
          y_AssignableCause_AssignableCauseType
          {$$ = new AssignableCauseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAssignableCause_AssignableCauseType_1_u
          y_AssignableCause_AssignableCauseType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAttribute_substituteType_1_u :
          y_Attribute_substituteType
          {$$ = new AttributeBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAttribute_substituteType_1_u y_Attribute_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAuxiliary_substituteType_1_u :
          y_Auxiliary_substituteType
          {$$ = new AuxiliaryBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAuxiliary_substituteType_1_u y_Auxiliary_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztAverageFeature_AverageFeatureType_1_u :
          y_AverageFeature_AverageFeatureType
          {$$ = new AverageFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztAverageFeature_AverageFeatureType_1_u
          y_AverageFeature_AverageFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeaturePointSet_BaseFeaturePointSetType_1_u :
          y_BaseFeaturePointSet_BaseFeaturePointSetType
          {$$ = new BaseFeaturePointSetTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeaturePointSet_BaseFeaturePointSetType_1_u
          y_BaseFeaturePointSet_BaseFeaturePointSetType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_BaseFeatureType_3_u :
          y_BaseFeature_BaseFeatureType
          {$$ = new BaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_BaseFeatureType_3_u
          y_BaseFeature_BaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_BaseFeatureType_3_u_Check :
          y_LiztBaseFeature_BaseFeatureType_3_u
          {$$ = $1;
           if ($1->size() < 3)
             return yyerror("must be at least 3 BaseFeatures");
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_1_u :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_1_u
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_2_2 :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_2_2
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_2_2_Check :
          y_LiztBaseFeature_SequencedBaseFeatureType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 BaseFeatures");
           if ($1->size() < 2)
             return yyerror("must be at least 2 BaseFeatures");
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_2_u :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_2_u
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_2_u_Check :
          y_LiztBaseFeature_SequencedBaseFeatureType_2_u
          {$$ = $1;
           if ($1->size() < 2)
             return yyerror("must be at least 2 BaseFeatures");
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_3_u :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_3_u
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check :
          y_LiztBaseFeature_SequencedBaseFeatureType_3_u
          {$$ = $1;
           if ($1->size() < 3)
             return yyerror("must be at least 3 BaseFeatures");
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_4_u :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_4_u
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_4_u_Check :
          y_LiztBaseFeature_SequencedBaseFeatureType_4_u
          {$$ = $1;
           if ($1->size() < 4)
             return yyerror("must be at least 4 BaseFeatures");
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_5_u :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_5_u
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_5_u_Check :
          y_LiztBaseFeature_SequencedBaseFeatureType_5_u
          {$$ = $1;
           if ($1->size() < 5)
             return yyerror("must be at least 5 BaseFeatures");
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_6_u :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_6_u
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check :
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u
          {$$ = $1;
           if ($1->size() < 6)
             return yyerror("must be at least 6 BaseFeatures");
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_9_u :
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseFeature_SequencedBaseFeatureType_9_u
          y_BaseFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseFeature_SequencedBaseFeatureType_9_u_Check :
          y_LiztBaseFeature_SequencedBaseFeatureType_9_u
          {$$ = $1;
           if ($1->size() < 9)
             return yyerror("must be at least 9 BaseFeatures");
          }
        ;

y_LiztBaseLine_SequencedBaseFeatureType_2_2 :
          y_BaseLine_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBaseLine_SequencedBaseFeatureType_2_2
          y_BaseLine_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBaseLine_SequencedBaseFeatureType_2_2_Check :
          y_LiztBaseLine_SequencedBaseFeatureType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 BaseLines");
           if ($1->size() < 2)
             return yyerror("must be at least 2 BaseLines");
          }
        ;

y_LiztBasePlane_SequencedBaseFeatureType_2_2 :
          y_BasePlane_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBasePlane_SequencedBaseFeatureType_2_2
          y_BasePlane_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBasePlane_SequencedBaseFeatureType_2_2_Check :
          y_LiztBasePlane_SequencedBaseFeatureType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 BasePlanes");
           if ($1->size() < 2)
             return yyerror("must be at least 2 BasePlanes");
          }
        ;

y_LiztBody_BodyType_1_u :
          y_Body_BodyType
          {$$ = new BodyTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBody_BodyType_1_u y_Body_BodyType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBooleanExpression_substituteType_2_2 :
          y_BooleanExpression_substituteType
          {$$ = new BooleanExpressionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBooleanExpression_substituteType_2_2
          y_BooleanExpression_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBooleanExpression_substituteType_2_2_Check :
          y_LiztBooleanExpression_substituteType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 BooleanExpressions");
           if ($1->size() < 2)
             return yyerror("must be at least 2 BooleanExpressions");
          }
        ;

y_LiztBooleanExpression_substituteType_2_u :
          y_BooleanExpression_substituteType
          {$$ = new BooleanExpressionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztBooleanExpression_substituteType_2_u
          y_BooleanExpression_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztBooleanExpression_substituteType_2_u_Check :
          y_LiztBooleanExpression_substituteType_2_u
          {$$ = $1;
           if ($1->size() < 2)
             return yyerror("must be at least 2 BooleanExpressions");
          }
        ;

y_LiztCalibration_CalibrationType_1_u :
          y_Calibration_CalibrationType
          {$$ = new CalibrationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCalibration_CalibrationType_1_u
          y_Calibration_CalibrationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCamera_CameraType_1_u :
          y_Camera_CameraType
          {$$ = new CameraTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCamera_CameraType_1_u y_Camera_CameraType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCarriage_CarriageType_2_u :
          y_Carriage_CarriageType
          {$$ = new CarriageTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCarriage_CarriageType_2_u y_Carriage_CarriageType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCarriage_CarriageType_2_u_Check :
          y_LiztCarriage_CarriageType_2_u
          {$$ = $1;
           if ($1->size() < 2)
             return yyerror("must be at least 2 Carriages");
          }
        ;

y_LiztCartesianCMMAccuracy_CartesianCMMAccuracyType_1_u :
          y_CartesianCMMAccuracy_CartesianCMMAccuracyType
          {$$ = new CartesianCMMAccuracyTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCartesianCMMAccuracy_CartesianCMMAccuracyType_1_u
          y_CartesianCMMAccuracy_CartesianCMMAccuracyType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCharacteristicDefinition_substituteType_1_u :
          y_CharacteristicDefinition_substituteType
          {$$ = new CharacteristicDefinitionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCharacteristicDefinition_substituteType_1_u
          y_CharacteristicDefinition_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCharacteristicGroupStatus_CharacteristicGroupStatusType_1_u :
          y_CharacteristicGroupStatus_CharacteristicGroupStatusType
          {$$ = new CharacteristicGroupStatusTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCharacteristicGroupStatus_CharacteristicGroupStatusType_1_u
          y_CharacteristicGroupStatus_CharacteristicGroupStatusType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCharacteristicGroup_substituteType_1_u :
          y_CharacteristicGroup_substituteType
          {$$ = new CharacteristicGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCharacteristicGroup_substituteType_1_u
          y_CharacteristicGroup_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCharacteristicItem_substituteType_1_u :
          y_CharacteristicItem_substituteType
          {$$ = new CharacteristicItemBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCharacteristicItem_substituteType_1_u
          y_CharacteristicItem_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCharacteristicMeasurement_substituteType_1_u :
          y_CharacteristicMeasurement_substituteType
          {$$ = new CharacteristicMeasurementBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCharacteristicMeasurement_substituteType_1_u
          y_CharacteristicMeasurement_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCharacteristicNominal_substituteType_1_u :
          y_CharacteristicNominal_substituteType
          {$$ = new CharacteristicNominalBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCharacteristicNominal_substituteType_1_u
          y_CharacteristicNominal_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCharacteristicStats_substituteType_1_u :
          y_CharacteristicStats_substituteType
          {$$ = new CharacteristicStatsEvalBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCharacteristicStats_substituteType_1_u
          y_CharacteristicStats_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCoEdgeMesh_CoEdgeMeshType_1_u :
          y_CoEdgeMesh_CoEdgeMeshType
          {$$ = new CoEdgeMeshTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCoEdgeMesh_CoEdgeMeshType_1_u y_CoEdgeMesh_CoEdgeMeshType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCoEdge_CoEdgeType_1_u :
          y_CoEdge_CoEdgeType
          {$$ = new CoEdgeTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCoEdge_CoEdgeType_1_u y_CoEdge_CoEdgeType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCommonStatsValue_substituteType_1_u :
          y_CommonStatsValue_substituteType
          {$$ = new StatsWithReferenceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCommonStatsValue_substituteType_1_u
          y_CommonStatsValue_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztComponent_ComponentType_1_u :
          y_Component_ComponentType
          {$$ = new ComponentTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztComponent_ComponentType_1_u y_Component_ComponentType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztControlIssueDetailsList_ControlIssueDetailsListType_1_u :
          y_ControlIssueDetailsList_ControlIssueDetailsListType
          {$$ = new ControlIssueDetailsListTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztControlIssueDetailsList_ControlIssueDetailsListType_1_u
          y_ControlIssueDetailsList_ControlIssueDetailsListType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztControlIssueDetails_ControlIssueDetailsType_1_u :
          y_ControlIssueDetails_ControlIssueDetailsType
          {$$ = new ControlIssueDetailsTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztControlIssueDetails_ControlIssueDetailsType_1_u
          y_ControlIssueDetails_ControlIssueDetailsType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztControlMethod_ControlMethodType_1_u :
          y_ControlMethod_ControlMethodType
          {$$ = new ControlMethodTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztControlMethod_ControlMethodType_1_u
          y_ControlMethod_ControlMethodType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType_1_u :
          y_CoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType
          {$$ = new CoordinateSystemActualTransformAssociationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType_1_u
          y_CoordinateSystemActualTransformAssociation_CoordinateSystemActualTransformAssociationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCoordinateSystem_CADCoordinateSystemType_1_u :
          y_CoordinateSystem_CADCoordinateSystemType
          {$$ = new CADCoordinateSystemTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCoordinateSystem_CADCoordinateSystemType_1_u
          y_CoordinateSystem_CADCoordinateSystemType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCoordinateSystem_CoordinateSystemType_1_u :
          y_CoordinateSystem_CoordinateSystemType
          {$$ = new CoordinateSystemTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCoordinateSystem_CoordinateSystemType_1_u
          y_CoordinateSystem_CoordinateSystemType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCorrectiveActionPlan_CorrectiveActionPlanType_1_u :
          y_CorrectiveActionPlan_CorrectiveActionPlanType
          {$$ = new CorrectiveActionPlanTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCorrectiveActionPlan_CorrectiveActionPlanType_1_u
          y_CorrectiveActionPlan_CorrectiveActionPlanType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCorrectiveAction_CorrectiveActionType_1_u :
          y_CorrectiveAction_CorrectiveActionType
          {$$ = new CorrectiveActionTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCorrectiveAction_CorrectiveActionType_1_u
          y_CorrectiveAction_CorrectiveActionType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCurve12_substituteType_1_u :
          y_Curve12_substituteType
          {$$ = new Curve12BaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCurve12_substituteType_1_u y_Curve12_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCurve13_substituteType_1_u :
          y_Curve13_substituteType
          {$$ = new Curve13BaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCurve13_substituteType_1_u y_Curve13_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCurve_Curve13CoreType_2_2 :
          y_Curve_Curve13CoreType
          {$$ = new Curve13CoreTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztCurve_Curve13CoreType_2_2 y_Curve_Curve13CoreType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztCurve_Curve13CoreType_2_2_Check :
          y_LiztCurve_Curve13CoreType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 Curves");
           if ($1->size() < 2)
             return yyerror("must be at least 2 Curves");
          }
        ;

y_LiztDMEDecisionRule_IfThenDMERuleType_1_u :
          y_DMEDecisionRule_IfThenDMERuleType
          {$$ = new IfThenDMERuleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDMEDecisionRule_IfThenDMERuleType_1_u
          y_DMEDecisionRule_IfThenDMERuleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDMEDecision_substituteType_1_u :
          y_DMEDecision_substituteType
          {$$ = new DMEDecisionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDMEDecision_substituteType_1_u y_DMEDecision_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDMEParameterConstraint_DMEParameterConstraintType_1_u :
          y_DMEParameterConstraint_DMEParameterConstraintType
          {$$ = new DMEParameterConstraintTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDMEParameterConstraint_DMEParameterConstraintType_1_u
          y_DMEParameterConstraint_DMEParameterConstraintType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDatumDefinition_DatumDefinitionType_1_u :
          y_DatumDefinition_DatumDefinitionType
          {$$ = new DatumDefinitionTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDatumDefinition_DatumDefinitionType_1_u
          y_DatumDefinition_DatumDefinitionType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDatumReferenceFrame_DatumReferenceFrameType_1_u :
          y_DatumReferenceFrame_DatumReferenceFrameType
          {$$ = new DatumReferenceFrameTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDatumReferenceFrame_DatumReferenceFrameType_1_u
          y_DatumReferenceFrame_DatumReferenceFrameType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDatumTarget_DatumTargetType_1_u :
          y_DatumTarget_DatumTargetType
          {$$ = new DatumTargetTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDatumTarget_DatumTargetType_1_u
          y_DatumTarget_DatumTargetType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDatum_DatumWithPrecedenceType_1_5 :
          y_Datum_DatumWithPrecedenceType
          {$$ = new DatumWithPrecedenceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDatum_DatumWithPrecedenceType_1_5
          y_Datum_DatumWithPrecedenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDatum_DatumWithPrecedenceType_1_5_Check :
          y_LiztDatum_DatumWithPrecedenceType_1_5
          {$$ = $1;
           if ($1->size() > 5)
             return yyerror("must not be more than 5 Datums");
          }
        ;

y_LiztDatum_SequencedDatumType_2_u :
          y_Datum_SequencedDatumType
          {$$ = new SequencedDatumTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDatum_SequencedDatumType_2_u y_Datum_SequencedDatumType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDatum_SequencedDatumType_2_u_Check :
          y_LiztDatum_SequencedDatumType_2_u
          {$$ = $1;
           if ($1->size() < 2)
             return yyerror("must be at least 2 Datums");
          }
        ;

y_LiztDefiningPoint_DefiningPointMeasurementType_1_u :
          y_DefiningPoint_DefiningPointMeasurementType
          {$$ = new DefiningPointMeasurementTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDefiningPoint_DefiningPointMeasurementType_1_u
          y_DefiningPoint_DefiningPointMeasurementType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDefiningPoint_DefiningPointNominalType_1_u :
          y_DefiningPoint_DefiningPointNominalType
          {$$ = new DefiningPointNominalTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDefiningPoint_DefiningPointNominalType_1_u
          y_DefiningPoint_DefiningPointNominalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDefinitionExternalTypeChoicePair :
          y_DefinitionExternalTypeChoicePair
          {$$ = new DefinitionExternalTypeChoicePairLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDefinitionExternalTypeChoicePair
          y_DefinitionExternalTypeChoicePair
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDegreeOfFreedom_DegreeOfFreedomEnumType_1_6 :
          y_DegreeOfFreedom_DegreeOfFreedomEnumType
          {$$ = new DegreeOfFreedomEnumTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDegreeOfFreedom_DegreeOfFreedomEnumType_1_6
          y_DegreeOfFreedom_DegreeOfFreedomEnumType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDegreeOfFreedom_DegreeOfFreedomEnumType_1_6_Check :
          y_LiztDegreeOfFreedom_DegreeOfFreedomEnumType_1_6
          {$$ = $1;
           if ($1->size() > 6)
             return yyerror("must not be more than 6 DegreeOfFreedoms");
          }
        ;

y_LiztDetachableSensor_substituteType_1_u :
          y_DetachableSensor_substituteType
          {$$ = new DetachableSensorBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDetachableSensor_substituteType_1_u
          y_DetachableSensor_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDisplayStyleGroup_DisplayStyleGroupType_1_u :
          y_DisplayStyleGroup_DisplayStyleGroupType
          {$$ = new DisplayStyleGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDisplayStyleGroup_DisplayStyleGroupType_1_u
          y_DisplayStyleGroup_DisplayStyleGroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDisplayStyle_DisplayStyleType_1_u :
          y_DisplayStyle_DisplayStyleType
          {$$ = new DisplayStyleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztDisplayStyle_DisplayStyleType_1_u
          y_DisplayStyle_DisplayStyleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztDocumentQPId_QPIdReferenceType_0_u :
          /* empty */
          {$$ = new QPIdReferenceTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztDocumentQPId_QPIdReferenceType_0_u
          y_DocumentQPId_QPIdReferenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztEarlierVersion_VersionReferenceType_1_u :
          y_EarlierVersion_VersionReferenceType
          {$$ = new VersionReferenceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztEarlierVersion_VersionReferenceType_1_u
          y_EarlierVersion_VersionReferenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztEdge_EdgeOrientedType_1_u :
          y_Edge_EdgeOrientedType
          {$$ = new EdgeOrientedTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztEdge_EdgeOrientedType_1_u y_Edge_EdgeOrientedType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztEdge_EdgeType_1_u :
          y_Edge_EdgeType
          {$$ = new EdgeTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztEdge_EdgeType_1_u y_Edge_EdgeType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztElseIf_TestAndPlanElementType_0_u :
          /* empty */
          {$$ = new TestAndPlanElementTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztElseIf_TestAndPlanElementType_0_u
          y_ElseIf_TestAndPlanElementType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztEmployee_EmployeeType_1_u :
          y_Employee_EmployeeType
          {$$ = new EmployeeTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztEmployee_EmployeeType_1_u y_Employee_EmployeeType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztEntity_EntityExternalType_1_u :
          y_Entity_EntityExternalType
          {$$ = new EntityExternalTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztEntity_EntityExternalType_1_u y_Entity_EntityExternalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztEnvironment_EnvironmentType_1_u :
          y_Environment_EnvironmentType
          {$$ = new EnvironmentTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztEnvironment_EnvironmentType_1_u
          y_Environment_EnvironmentType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztError_XmlString_1_u :
          y_Error_XmlString
          {$$ = new XmlStringLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztError_XmlString_1_u y_Error_XmlString
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztExclusion_ExclusionIdType_1_u :
          y_Exclusion_ExclusionIdType
          {$$ = new ExclusionIdTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztExclusion_ExclusionIdType_1_u y_Exclusion_ExclusionIdType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztExclusion_ExclusionIndexType_1_u :
          y_Exclusion_ExclusionIndexType
          {$$ = new ExclusionIndexTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztExclusion_ExclusionIndexType_1_u
          y_Exclusion_ExclusionIndexType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztExplodedView_ExplodedViewType_1_u :
          y_ExplodedView_ExplodedViewType
          {$$ = new ExplodedViewTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztExplodedView_ExplodedViewType_1_u
          y_ExplodedView_ExplodedViewType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztExternalFileReference_ExternalFileReferenceType_1_u :
          y_ExternalFileReference_ExternalFileReferenceType
          {$$ = new ExternalFileReferenceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztExternalFileReference_ExternalFileReferenceType_1_u
          y_ExternalFileReference_ExternalFileReferenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztExternalQIFDocument_ExternalQIFDocumentReferenceType_1_u :
          y_ExternalQIFDocument_ExternalQIFDocumentReferenceType
          {$$ = new ExternalQIFDocumentReferenceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztExternalQIFDocument_ExternalQIFDocumentReferenceType_1_u
          y_ExternalQIFDocument_ExternalQIFDocumentReferenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFaceBase_substituteType_1_u :
          y_FaceBase_substituteType
          {$$ = new FaceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFaceBase_substituteType_1_u y_FaceBase_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFeatureDefinition_substituteType_1_u :
          y_FeatureDefinition_substituteType
          {$$ = new FeatureDefinitionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFeatureDefinition_substituteType_1_u
          y_FeatureDefinition_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFeatureItem_substituteType_1_u :
          y_FeatureItem_substituteType
          {$$ = new FeatureItemBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFeatureItem_substituteType_1_u y_FeatureItem_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFeatureMeasurement_substituteType_1_u :
          y_FeatureMeasurement_substituteType
          {$$ = new FeatureMeasurementBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFeatureMeasurement_substituteType_1_u
          y_FeatureMeasurement_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFeatureNominal_substituteType_1_u :
          y_FeatureNominal_substituteType
          {$$ = new FeatureNominalBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFeatureNominal_substituteType_1_u
          y_FeatureNominal_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFeaturePair_QIFFeaturePairType_1_u :
          y_FeaturePair_QIFFeaturePairType
          {$$ = new QIFFeaturePairTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFeaturePair_QIFFeaturePairType_1_u
          y_FeaturePair_QIFFeaturePairType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFeatureZone_substituteType_1_u :
          y_FeatureZone_substituteType
          {$$ = new FeatureZoneBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFeatureZone_substituteType_1_u y_FeatureZone_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFixture_FixtureType_1_u :
          y_Fixture_FixtureType
          {$$ = new FixtureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFixture_FixtureType_1_u y_Fixture_FixtureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFolderAssembly_FolderAssemblyType_1_u :
          y_FolderAssembly_FolderAssemblyType
          {$$ = new FolderAssemblyTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFolderAssembly_FolderAssemblyType_1_u
          y_FolderAssembly_FolderAssemblyType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFolderPart_FolderPartType_1_u :
          y_FolderPart_FolderPartType
          {$$ = new FolderPartTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFolderPart_FolderPartType_1_u y_FolderPart_FolderPartType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFont_FontType_1_u :
          y_Font_FontType
          {$$ = new FontTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFont_FontType_1_u y_Font_FontType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztForceStatsSummary_SummaryStatisticsForceType_1_u :
          y_ForceStatsSummary_SummaryStatisticsForceType
          {$$ = new SummaryStatisticsForceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztForceStatsSummary_SummaryStatisticsForceType_1_u
          y_ForceStatsSummary_SummaryStatisticsForceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztForceUnit_ForceUnitType_0_u :
          /* empty */
          {$$ = new ForceUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztForceUnit_ForceUnitType_0_u y_ForceUnit_ForceUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztFrame_substituteType_1_u :
          y_Frame_substituteType
          {$$ = new FrameBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztFrame_substituteType_1_u y_Frame_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztHatchStyle_HatchStyleType_1_u :
          y_HatchStyle_HatchStyleType
          {$$ = new HatchStyleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztHatchStyle_HatchStyleType_1_u y_HatchStyle_HatchStyleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztISODegreeOfFreedom_ISODegreeOfFreedomEnumType_1_6 :
          y_ISODegreeOfFreedom_ISODegreeOfFreedomEnumType
          {$$ = new ISODegreeOfFreedomEnumTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztISODegreeOfFreedom_ISODegreeOfFreedomEnumType_1_6
          y_ISODegreeOfFreedom_ISODegreeOfFreedomEnumType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztISODegreeOfFreedom_ISODegreeOfFreedomEnumType_1_6_Check :
          y_LiztISODegreeOfFreedom_ISODegreeOfFreedomEnumType_1_6
          {$$ = $1;
           if ($1->size() > 6)
             return yyerror("must not be more than 6 ISODegreeOfFreedoms");
          }
        ;

y_LiztId_QIFReferenceActiveType_1_u :
          y_Id_QIFReferenceActiveType
          {$$ = new QIFReferenceActiveTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztId_QIFReferenceActiveType_1_u y_Id_QIFReferenceActiveType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztId_QIFReferenceFullType_1_u :
          y_Id_QIFReferenceFullType
          {$$ = new QIFReferenceFullTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztId_QIFReferenceFullType_1_u y_Id_QIFReferenceFullType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztId_QIFReferenceType_1_u :
          y_Id_QIFReferenceType
          {$$ = new QIFReferenceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztId_QIFReferenceType_1_u y_Id_QIFReferenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztIfThenFeatureRule_substituteType_1_u :
          y_IfThenFeatureRule_substituteType
          {$$ = new IfThenFeatureRuleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztIfThenFeatureRule_substituteType_1_u
          y_IfThenFeatureRule_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztInstance_ValidationPartAssemblyInstanceType_1_u :
          y_Instance_ValidationPartAssemblyInstanceType
          {$$ = new ValidationPartAssemblyInstanceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztInstance_ValidationPartAssemblyInstanceType_1_u
          y_Instance_ValidationPartAssemblyInstanceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2 :
          y_IntersectionFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2
          y_IntersectionFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2_Check :
          y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 IntersectionFeatures");
           if ($1->size() < 2)
             return yyerror("must be at least 2 IntersectionFeatures");
          }
        ;

y_LiztLayer_LayerType_1_u :
          y_Layer_LayerType
          {$$ = new LayerTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztLayer_LayerType_1_u y_Layer_LayerType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztLeader_substituteType_0_u :
          /* empty */
          {$$ = new LeaderTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztLeader_substituteType_0_u y_Leader_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztLinearStatsSummary_SummaryStatisticsLinearType_1_u :
          y_LinearStatsSummary_SummaryStatisticsLinearType
          {$$ = new SummaryStatisticsLinearTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztLinearStatsSummary_SummaryStatisticsLinearType_1_u
          y_LinearStatsSummary_SummaryStatisticsLinearType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztLinearUnit_LinearUnitType_0_u :
          /* empty */
          {$$ = new LinearUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztLinearUnit_LinearUnitType_0_u y_LinearUnit_LinearUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztLinearValue_LinearValueType_20_20 :
          y_LinearValue_LinearValueType
          {$$ = new LinearValueTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LiztLinearValue_LinearValueType_20_20
          y_LinearValue_LinearValueType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztLinearValue_LinearValueType_20_20_Check :
          y_LiztLinearValue_LinearValueType_20_20
          {$$ = $1;
           if ($1->size() > 20)
             return yyerror("must not be more than 20 LinearValues");
           if ($1->size() < 20)
             return yyerror("must be at least 20 LinearValues");
          }
        ;

y_LiztLocatedTip_LocatedTipType_1_u :
          y_LiztLocatedTip_LocatedTipType_1_u y_LocatedTip_LocatedTipType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LocatedTip_LocatedTipType
          {$$ = new LocatedTipTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztLogicalOperatio_1231_TypeChoicePair :
          y_LiztLogicalOperatio_1231_TypeChoicePair
          y_LogicalOperatio_1231_TypeChoicePair
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LogicalOperatio_1231_TypeChoicePair
          {$$ = new LogicalOperatio_1231_TypeChoicePairLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztLogicalOperation_LogicalOperationType_1_u :
          y_LiztLogicalOperation_LogicalOperationType_1_u
          y_LogicalOperation_LogicalOperationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LogicalOperation_LogicalOperationType
          {$$ = new LogicalOperationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztLoopBase_substituteType_1_u :
          y_LiztLoopBase_substituteType_1_u y_LoopBase_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LoopBase_substituteType
          {$$ = new LoopBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztLoop_Polyline2dType_1_u :
          y_LiztLoop_Polyline2dType_1_u y_Loop_Polyline2dType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Loop_Polyline2dType
          {$$ = new Polyline2dTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztLoop_SectionPathType_1_u :
          y_LiztLoop_SectionPathType_1_u y_Loop_SectionPathType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Loop_SectionPathType
          {$$ = new SectionPathTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMachineCoordinateSystem_MachineCoordinateSystemType_0_u :
          /* empty */
          {$$ = new MachineCoordinateSystemTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztMachineCoordinateSystem_MachineCoordinateSystemType_0_u
          y_MachineCoordinateSystem_MachineCoordinateSystemType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztManufacturingProcessTraceability_ManufacturingProcessTraceabilityType_1_u :
          y_LiztManufacturingProcessTraceability_ManufacturingProcessTraceabilityType_1_u
          y_ManufacturingProcessTraceability_ManufacturingProcessTraceabilityType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_ManufacturingProcessTraceability_ManufacturingProcessTraceabilityType
          {$$ = new ManufacturingProcessTraceabilityTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMassStatsSummary_SummaryStatisticsMassType_1_u :
          y_LiztMassStatsSummary_SummaryStatisticsMassType_1_u
          y_MassStatsSummary_SummaryStatisticsMassType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MassStatsSummary_SummaryStatisticsMassType
          {$$ = new SummaryStatisticsMassTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMassUnit_MassUnitType_0_u :
          /* empty */
          {$$ = new MassUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztMassUnit_MassUnitType_0_u y_MassUnit_MassUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztMaterial_MaterialType_1_u :
          y_LiztMaterial_MaterialType_1_u y_Material_MaterialType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Material_MaterialType
          {$$ = new MaterialTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMeasurand_substituteType_1_u :
          y_LiztMeasurand_substituteType_1_u y_Measurand_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Measurand_substituteType
          {$$ = new MeasurandBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMeasurePoint_MeasurePointNominalType_1_u :
          y_LiztMeasurePoint_MeasurePointNominalType_1_u
          y_MeasurePoint_MeasurePointNominalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MeasurePoint_MeasurePointNominalType
          {$$ = new MeasurePointNominalTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMeasuredPointSet_MeasuredPointSetType_1_u :
          y_LiztMeasuredPointSet_MeasuredPointSetType_1_u
          y_MeasuredPointSet_MeasuredPointSetType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MeasuredPointSet_MeasuredPointSetType
          {$$ = new MeasuredPointSetTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMeasurementDevice_substituteType_1_u :
          y_LiztMeasurementDevice_substituteType_1_u
          y_MeasurementDevice_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MeasurementDevice_substituteType
          {$$ = new MeasurementDeviceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMeasurementResults_MeasurementResultsType_1_u :
          y_LiztMeasurementResults_MeasurementResultsType_1_u
          y_MeasurementResults_MeasurementResultsType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MeasurementResults_MeasurementResultsType
          {$$ = new MeasurementResultsTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMeasurementRoom_MeasurementRoomType_1_u :
          y_LiztMeasurementRoom_MeasurementRoomType_1_u
          y_MeasurementRoom_MeasurementRoomType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MeasurementRoom_MeasurementRoomType
          {$$ = new MeasurementRoomTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMeshTriangle_MeshTriangleType_1_u :
          y_LiztMeshTriangle_MeshTriangleType_1_u
          y_MeshTriangle_MeshTriangleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MeshTriangle_MeshTriangleType
          {$$ = new MeshTriangleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztMoveGroup_ExplodedViewMoveGroupType_1_u :
          y_LiztMoveGroup_ExplodedViewMoveGroupType_1_u
          y_MoveGroup_ExplodedViewMoveGroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_MoveGroup_ExplodedViewMoveGroupType
          {$$ = new ExplodedViewMoveGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNominalPointSet_PointSetNominalType_1_u :
          y_LiztNominalPointSet_PointSetNominalType_1_u
          y_NominalPointSet_PointSetNominalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NominalPointSet_PointSetNominalType
          {$$ = new PointSetNominalTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNormalSpecial_TriangleVertexNormalType_1_u :
          y_LiztNormalSpecial_TriangleVertexNormalType_1_u
          y_NormalSpecial_TriangleVertexNormalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NormalSpecial_TriangleVertexNormalType
          {$$ = new TriangleVertexNormalTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNotableEvent_NotableEventType_1_u :
          y_LiztNotableEvent_NotableEventType_1_u
          y_NotableEvent_NotableEventType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NotableEvent_NotableEventType
          {$$ = new NotableEventTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNoteFlag_NoteFlagType_1_u :
          y_LiztNoteFlag_NoteFlagType_1_u y_NoteFlag_NoteFlagType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NoteFlag_NoteFlagType
          {$$ = new NoteFlagTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNote_NoteType_1_u :
          y_LiztNote_NoteType_1_u y_Note_NoteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Note_NoteType
          {$$ = new NoteTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNotedEvent_NotedEventType_1_u :
          y_LiztNotedEvent_NotedEventType_1_u y_NotedEvent_NotedEventType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NotedEvent_NotedEventType
          {$$ = new NotedEventTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNumberedPlanElement_NumberedPlanElementType_1_u :
          y_LiztNumberedPlanElement_NumberedPlanElementType_1_u
          y_NumberedPlanElement_NumberedPlanElementType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NumberedPlanElement_NumberedPlanElementType
          {$$ = new NumberedPlanElementTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNumericCharacteristicStatsValue_substituteType_1_u :
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          y_NumericCharacteristicStatsValue_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NumericCharacteristicStatsValue_substituteType
          {$$ = new StatsWithReferenceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u :
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          y_NumericCharacteristicWithTolStatsValue_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_NumericCharacteristicWithTolStatsValue_substituteType
          {$$ = new StatsWithReferenceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztOrigin_MeasurementOriginOffsetType_1_3 :
          y_LiztOrigin_MeasurementOriginOffsetType_1_3
          y_Origin_MeasurementOriginOffsetType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Origin_MeasurementOriginOffsetType
          {$$ = new MeasurementOriginOffsetTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztOrigin_MeasurementOriginOffsetType_1_3_Check :
          y_LiztOrigin_MeasurementOriginOffsetType_1_3
          {$$ = $1;
           if ($1->size() > 3)
             return yyerror("must not be more than 3 Origins");
          }
        ;

y_LiztPMIDisplay_PMIDisplayType_1_u :
          y_LiztPMIDisplay_PMIDisplayType_1_u y_PMIDisplay_PMIDisplayType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PMIDisplay_PMIDisplayType
          {$$ = new PMIDisplayTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztParameter_ProcessParameterType_1_u :
          y_LiztParameter_ProcessParameterType_1_u
          y_Parameter_ProcessParameterType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Parameter_ProcessParameterType
          {$$ = new ProcessParameterTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPartNote_PartNoteType_1_u :
          y_LiztPartNote_PartNoteType_1_u y_PartNote_PartNoteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PartNote_PartNoteType
          {$$ = new PartNoteTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPart_PartType_1_u :
          y_LiztPart_PartType_1_u y_Part_PartType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Part_PartType
          {$$ = new PartTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPassFailStatsValue_substituteType_1_u :
          y_LiztPassFailStatsValue_substituteType_1_u
          y_PassFailStatsValue_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PassFailStatsValue_substituteType
          {$$ = new StatsWithReferenceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPathTriangulation_PathTriangulationType_1_u :
          y_LiztPathTriangulation_PathTriangulationType_1_u
          y_PathTriangulation_PathTriangulationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PathTriangulation_PathTriangulationType
          {$$ = new PathTriangulationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPath_SectionPathType_1_u :
          y_LiztPath_SectionPathType_1_u y_Path_SectionPathType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Path_SectionPathType
          {$$ = new SectionPathTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPattern_HatchPatternType_1_u :
          y_LiztPattern_HatchPatternType_1_u y_Pattern_HatchPatternType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Pattern_HatchPatternType
          {$$ = new HatchPatternTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPlanElement_substituteType_1_u :
          y_LiztPlanElement_substituteType_1_u y_PlanElement_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PlanElement_substituteType
          {$$ = new PlanElementBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPointCloud_PointCloudType_1_u :
          y_LiztPointCloud_PointCloudType_1_u y_PointCloud_PointCloudType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PointCloud_PointCloudType
          {$$ = new PointCloudTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPointDeviationStats_PointDeviationStatsEvalType_1_u :
          y_LiztPointDeviationStats_PointDeviationStatsEvalType_1_u
          y_PointDeviationStats_PointDeviationStatsEvalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PointDeviationStats_PointDeviationStatsEvalType
          {$$ = new PointDeviationStatsEvalTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPointDeviation_PointDeviationType_1_u :
          y_LiztPointDeviation_PointDeviationType_1_u
          y_PointDeviation_PointDeviationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PointDeviation_PointDeviationType
          {$$ = new PointDeviationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPointSetId_substituteType_1_u :
          y_LiztPointSetId_substituteType_1_u y_PointSetId_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PointSetId_substituteType
          {$$ = new PointSetReferenceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPoint_Point2dSimpleType_3_3 :
          y_LiztPoint_Point2dSimpleType_3_3 y_Point_Point2dSimpleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Point_Point2dSimpleType
          {$$ = new Point2dSimpleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPoint_Point2dSimpleType_3_3_Check :
          y_LiztPoint_Point2dSimpleType_3_3
          {$$ = $1;
           if ($1->size() > 3)
             return yyerror("must not be more than 3 Points");
           if ($1->size() < 3)
             return yyerror("must be at least 3 Points");
          }
        ;

y_LiztPoint_Point2dSimpleType_5_5 :
          y_LiztPoint_Point2dSimpleType_5_5 y_Point_Point2dSimpleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Point_Point2dSimpleType
          {$$ = new Point2dSimpleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPoint_Point2dSimpleType_5_5_Check :
          y_LiztPoint_Point2dSimpleType_5_5
          {$$ = $1;
           if ($1->size() > 5)
             return yyerror("must not be more than 5 Points");
           if ($1->size() < 5)
             return yyerror("must be at least 5 Points");
          }
        ;

y_LiztPoint_Point2dSimpleType_6_6 :
          y_LiztPoint_Point2dSimpleType_6_6 y_Point_Point2dSimpleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Point_Point2dSimpleType
          {$$ = new Point2dSimpleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPoint_Point2dSimpleType_6_6_Check :
          y_LiztPoint_Point2dSimpleType_6_6
          {$$ = $1;
           if ($1->size() > 6)
             return yyerror("must not be more than 6 Points");
           if ($1->size() < 6)
             return yyerror("must be at least 6 Points");
          }
        ;

y_LiztPoint_Point2dSimpleType_8_8 :
          y_LiztPoint_Point2dSimpleType_8_8 y_Point_Point2dSimpleType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Point_Point2dSimpleType
          {$$ = new Point2dSimpleTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPoint_Point2dSimpleType_8_8_Check :
          y_LiztPoint_Point2dSimpleType_8_8
          {$$ = $1;
           if ($1->size() > 8)
             return yyerror("must not be more than 8 Points");
           if ($1->size() < 8)
             return yyerror("must be at least 8 Points");
          }
        ;

y_LiztPoint_PointEntityType_1_u :
          y_LiztPoint_PointEntityType_1_u y_Point_PointEntityType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Point_PointEntityType
          {$$ = new PointEntityTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPolyline_Polyline2dType_1_u :
          y_LiztPolyline_Polyline2dType_1_u y_Polyline_Polyline2dType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Polyline_Polyline2dType
          {$$ = new Polyline2dTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPredecessor_XmlPositiveInteger_1_u :
          y_LiztPredecessor_XmlPositiveInteger_1_u
          y_Predecessor_XmlPositiveInteger
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Predecessor_XmlPositiveInteger
          {$$ = new XmlPositiveIntegerLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPressureStatsSummary_SummaryStatisticsPressureType_1_u :
          y_LiztPressureStatsSummary_SummaryStatisticsPressureType_1_u
          y_PressureStatsSummary_SummaryStatisticsPressureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_PressureStatsSummary_SummaryStatisticsPressureType
          {$$ = new SummaryStatisticsPressureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztPressureUnit_PressureUnitType_0_u :
          /* empty */
          {$$ = new PressureUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztPressureUnit_PressureUnitType_0_u
          y_PressureUnit_PressureUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztProductDataQualityCheck_ProductDataQualityCheckType_1_u :
          y_LiztProductDataQualityCheck_ProductDataQualityCheckType_1_u
          y_ProductDataQualityCheck_ProductDataQualityCheckType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_ProductDataQualityCheck_ProductDataQualityCheckType
          {$$ = new ProductDataQualityCheckTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztQPId_QPIdFullReferenceType_1_u :
          y_LiztQPId_QPIdFullReferenceType_1_u y_QPId_QPIdFullReferenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_QPId_QPIdFullReferenceType
          {$$ = new QPIdFullReferenceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztQualification_QualificationType_1_u :
          y_LiztQualification_QualificationType_1_u
          y_Qualification_QualificationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Qualification_QualificationType
          {$$ = new QualificationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztResultsQPIds_ArrayQPIdFullReferenceType_1_u :
          y_LiztResultsQPIds_ArrayQPIdFullReferenceType_1_u
          y_ResultsQPIds_ArrayQPIdFullReferenceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_ResultsQPIds_ArrayQPIdFullReferenceType
          {$$ = new ArrayQPIdFullReferenceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSavedView_SavedViewType_1_u :
          y_LiztSavedView_SavedViewType_1_u y_SavedView_SavedViewType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SavedView_SavedViewType
          {$$ = new SavedViewTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSectionGroup_SectionGroupType_1_u :
          y_LiztSectionGroup_SectionGroupType_1_u
          y_SectionGroup_SectionGroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SectionGroup_SectionGroupType
          {$$ = new SectionGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSectionPlane_ZoneSectionPlaneType_1_u :
          y_LiztSectionPlane_ZoneSectionPlaneType_1_u
          y_SectionPlane_ZoneSectionPlaneType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SectionPlane_ZoneSectionPlaneType
          {$$ = new ZoneSectionPlaneTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztShell_ShellType_1_u :
          y_LiztShell_ShellType_1_u y_Shell_ShellType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Shell_ShellType
          {$$ = new ShellTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSimplifiedRepresentationGroup_SimplifiedRepresentationGroupType_1_u :
          y_LiztSimplifiedRepresentationGroup_SimplifiedRepresentationGroupType_1_u
          y_SimplifiedRepresentationGroup_SimplifiedRepresentationGroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SimplifiedRepresentationGroup_SimplifiedRepresentationGroupType
          {$$ = new SimplifiedRepresentationGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSimplifiedRepresentation_SimplifiedRepresentationType_1_u :
          y_LiztSimplifiedRepresentation_SimplifiedRepresentationType_1_u
          y_SimplifiedRepresentation_SimplifiedRepresentationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SimplifiedRepresentation_SimplifiedRepresentationType
          {$$ = new SimplifiedRepresentationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSimultaneousRequirementGroup_SimultaneousRequirementGroupType_1_u :
          y_LiztSimultaneousRequirementGroup_SimultaneousRequirementGroupType_1_u
          y_SimultaneousRequirementGroup_SimultaneousRequirementGroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SimultaneousRequirementGroup_SimultaneousRequirementGroupType
          {$$ = new SimultaneousRequirementGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSoftware_SoftwareType_1_u :
          y_LiztSoftware_SoftwareType_1_u y_Software_SoftwareType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Software_SoftwareType
          {$$ = new SoftwareTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSpeedStatsSummary_SummaryStatisticsSpeedType_1_u :
          y_LiztSpeedStatsSummary_SummaryStatisticsSpeedType_1_u
          y_SpeedStatsSummary_SummaryStatisticsSpeedType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SpeedStatsSummary_SummaryStatisticsSpeedType
          {$$ = new SummaryStatisticsSpeedTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSpeedUnit_SpeedUnitType_0_u :
          /* empty */
          {$$ = new SpeedUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztSpeedUnit_SpeedUnitType_0_u y_SpeedUnit_SpeedUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztStandard_StandardType_1_u :
          y_LiztStandard_StandardType_1_u y_Standard_StandardType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Standard_StandardType
          {$$ = new StandardTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztStatisticalStudyPlan_substituteType_1_u :
          y_LiztStatisticalStudyPlan_substituteType_1_u
          y_StatisticalStudyPlan_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_StatisticalStudyPlan_substituteType
          {$$ = new StatisticalStudyPlanBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztStatisticalStudyResults_substituteType_1_u :
          y_LiztStatisticalStudyResults_substituteType_1_u
          y_StatisticalStudyResults_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_StatisticalStudyResults_substituteType
          {$$ = new StatisticalStudyResultsBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztStatsSummary_SummaryStatisticsType_1_u :
          y_LiztStatsSummary_SummaryStatisticsType_1_u
          y_StatsSummary_SummaryStatisticsType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_StatsSummary_SummaryStatisticsType
          {$$ = new SummaryStatisticsTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztStatsValuesPerChar_ListAccumulatedStatsValuesType_0_u :
          /* empty */
          {$$ = new ListAccumulatedStatsValuesTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztStatsValuesPerChar_ListAccumulatedStatsValuesType_0_u
          y_StatsValuesPerChar_ListAccumulatedStatsValuesType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztStatsValuesPerSubgroup_ListSubgroupStatsValuesType_0_u :
          /* empty */
          {$$ = new ListSubgroupStatsValuesTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztStatsValuesPerSubgroup_ListSubgroupStatsValuesType_0_u
          y_StatsValuesPerSubgroup_ListSubgroupStatsValuesType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u :
          /* empty */
          {$$ = new SummaryStatsValuesListTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_StatsValuesSummarys_SummaryStatsValuesListType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztStepWithPredecessors_StepWithPredecessorsType_1_u :
          y_LiztStepWithPredecessors_StepWithPredecessorsType_1_u
          y_StepWithPredecessors_StepWithPredecessorsType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_StepWithPredecessors_StepWithPredecessorsType
          {$$ = new StepWithPredecessorsTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztStringValue_XmlString_1_u :
          y_LiztStringValue_XmlString_1_u y_StringValue_XmlString
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_StringValue_XmlString
          {$$ = new XmlStringLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztStudyIssue_StudyIssueType_1_u :
          y_LiztStudyIssue_StudyIssueType_1_u y_StudyIssue_StudyIssueType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_StudyIssue_StudyIssueType
          {$$ = new StudyIssueTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSubCurve_Curve12OrientedType_1_u :
          y_LiztSubCurve_Curve12OrientedType_1_u
          y_SubCurve_Curve12OrientedType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SubCurve_Curve12OrientedType
          {$$ = new Curve12OrientedTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSubCurve_Curve13OrientedType_1_u :
          y_LiztSubCurve_Curve13OrientedType_1_u
          y_SubCurve_Curve13OrientedType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SubCurve_Curve13OrientedType
          {$$ = new Curve13OrientedTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSubgroupDecimal_SubgroupDecimalType_1_u :
          y_LiztSubgroupDecimal_SubgroupDecimalType_1_u
          y_SubgroupDecimal_SubgroupDecimalType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SubgroupDecimal_SubgroupDecimalType
          {$$ = new SubgroupDecimalTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSubgroupInteger_SubgroupIntegerType_1_u :
          y_LiztSubgroupInteger_SubgroupIntegerType_1_u
          y_SubgroupInteger_SubgroupIntegerType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SubgroupInteger_SubgroupIntegerType
          {$$ = new SubgroupIntegerTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSubgroup_StatsValuesType_1_u :
          y_LiztSubgroup_StatsValuesType_1_u y_Subgroup_StatsValuesType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Subgroup_StatsValuesType
          {$$ = new StatsValuesTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSubgroup_SubgroupType_1_u :
          y_LiztSubgroup_SubgroupType_1_u y_Subgroup_SubgroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Subgroup_SubgroupType
          {$$ = new SubgroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSummaryStatsValue_substituteType_1_u :
          y_LiztSummaryStatsValue_substituteType_1_u
          y_SummaryStatsValue_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SummaryStatsValue_substituteType
          {$$ = new StatsWithReferenceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSummaryStatsValues_SummaryStatsValuesType_1_u :
          y_LiztSummaryStatsValues_SummaryStatsValuesType_1_u
          y_SummaryStatsValues_SummaryStatsValuesType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_SummaryStatsValues_SummaryStatsValuesType
          {$$ = new SummaryStatsValuesTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztSurface_substituteType_1_u :
          y_LiztSurface_substituteType_1_u y_Surface_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Surface_substituteType
          {$$ = new SurfaceBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTangentFeature_SequencedBaseFeatureType_2_2 :
          y_LiztTangentFeature_SequencedBaseFeatureType_2_2
          y_TangentFeature_SequencedBaseFeatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_TangentFeature_SequencedBaseFeatureType
          {$$ = new SequencedBaseFeatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTangentFeature_SequencedBaseFeatureType_2_2_Check :
          y_LiztTangentFeature_SequencedBaseFeatureType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 TangentFeatures");
           if ($1->size() < 2)
             return yyerror("must be at least 2 TangentFeatures");
          }
        ;

y_LiztTemperatureStatsSummary_SummaryStatisticsTemperatureType_1_u :
          y_LiztTemperatureStatsSummary_SummaryStatisticsTemperatureType_1_u
          y_TemperatureStatsSummary_SummaryStatisticsTemperatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_TemperatureStatsSummary_SummaryStatisticsTemperatureType
          {$$ = new SummaryStatisticsTemperatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTemperatureUnit_TemperatureUnitType_0_u :
          /* empty */
          {$$ = new TemperatureUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztTemperatureUnit_TemperatureUnitType_0_u
          y_TemperatureUnit_TemperatureUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztTemperature_TemperatureType_1_u :
          y_LiztTemperature_TemperatureType_1_u
          y_Temperature_TemperatureType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Temperature_TemperatureType
          {$$ = new TemperatureTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztText_TextType_1_u :
          y_LiztText_TextType_1_u y_Text_TextType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Text_TextType
          {$$ = new TextTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztThreadSpecification_ThreadSpecificationType_1_u :
          y_LiztThreadSpecification_ThreadSpecificationType_1_u
          y_ThreadSpecification_ThreadSpecificationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_ThreadSpecification_ThreadSpecificationType
          {$$ = new ThreadSpecificationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTimeStatsSummary_SummaryStatisticsTimeType_1_u :
          y_LiztTimeStatsSummary_SummaryStatisticsTimeType_1_u
          y_TimeStatsSummary_SummaryStatisticsTimeType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_TimeStatsSummary_SummaryStatisticsTimeType
          {$$ = new SummaryStatisticsTimeTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTimeUnit_TimeUnitType_0_u :
          /* empty */
          {$$ = new TimeUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztTimeUnit_TimeUnitType_0_u y_TimeUnit_TimeUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztTokenExpression_substituteType_2_2 :
          y_LiztTokenExpression_substituteType_2_2
          y_TokenExpression_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_TokenExpression_substituteType
          {$$ = new TokenExpressionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTokenExpression_substituteType_2_2_Check :
          y_LiztTokenExpression_substituteType_2_2
          {$$ = $1;
           if ($1->size() > 2)
             return yyerror("must not be more than 2 TokenExpressions");
           if ($1->size() < 2)
             return yyerror("must be at least 2 TokenExpressions");
          }
        ;

y_LiztToleranceDefinitionsTypeChoicePair :
          y_LiztToleranceDefinitionsTypeChoicePair
          y_ToleranceDefinitionsTypeChoicePair
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_ToleranceDefinitionsTypeChoicePair
          {$$ = new ToleranceDefinitionsTypeChoicePairLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTool_substituteType_1_u :
          y_LiztTool_substituteType_1_u y_Tool_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Tool_substituteType
          {$$ = new ToolBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType_1_u :
          y_LiztTrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType_1_u
          y_TrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_TrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType
          {$$ = new TrailingZeroDimensionalCharacteristicDisplayGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType_1_u :
          y_LiztTrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType_1_u
          y_TrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_TrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType
          {$$ = new TrailingZeroGeometricCharacteristicDisplayGroupTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTransform_TransformInstanceType_1_u :
          y_LiztTransform_TransformInstanceType_1_u
          y_Transform_TransformInstanceType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Transform_TransformInstanceType
          {$$ = new TransformInstanceTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztTypeOfTest_NonDestructiveTestingEnumType_1_u :
          y_LiztTypeOfTest_NonDestructiveTestingEnumType_1_u
          y_TypeOfTest_NonDestructiveTestingEnumType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_TypeOfTest_NonDestructiveTestingEnumType
          {$$ = new NonDestructiveTestingEnumTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztUserDefinedUnitCriterion_CriterionUserDefinedUnitType_0_u :
          /* empty */
          {$$ = new CriterionUserDefinedUnitTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztUserDefinedUnitCriterion_CriterionUserDefinedUnitType_0_u
          y_UserDefinedUnitCriterion_CriterionUserDefinedUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztUserDefinedUnitLimit_UserDefinedUnitValueType_0_u :
          /* empty */
          {$$ = new UserDefinedUnitValueTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztUserDefinedUnitLimit_UserDefinedUnitValueType_0_u
          y_UserDefinedUnitLimit_UserDefinedUnitValueType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztUserDefinedUnitMeasurement_MeasuredUserDefinedUnitValueType_0_u :
          /* empty */
          {$$ = new MeasuredUserDefinedUnitValueTypeLisd;
           yyUnrefMap[$$] = $$;
          }
        | y_LiztUserDefinedUnitMeasurement_MeasuredUserDefinedUnitValueType_0_u
          y_UserDefinedUnitMeasurement_MeasuredUserDefinedUnitValueType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LiztUserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType_1_u :
          y_LiztUserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType_1_u
          y_UserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_UserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType
          {$$ = new SummaryStatisticsUserDefinedUnitTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztUserDefinedUnit_UserDefinedUnitType_1_u :
          y_LiztUserDefinedUnit_UserDefinedUnitType_1_u
          y_UserDefinedUnit_UserDefinedUnitType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_UserDefinedUnit_UserDefinedUnitType
          {$$ = new UserDefinedUnitTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztVariable_VariableDeclarationType_1_u :
          y_LiztVariable_VariableDeclarationType_1_u
          y_Variable_VariableDeclarationType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Variable_VariableDeclarationType
          {$$ = new VariableDeclarationTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztVertex_VertexType_1_u :
          y_LiztVertex_VertexType_1_u y_Vertex_VertexType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_Vertex_VertexType
          {$$ = new VertexTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztWorkInstruction_substituteType_1_u :
          y_LiztWorkInstruction_substituteType_1_u
          y_WorkInstruction_substituteType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_WorkInstruction_substituteType
          {$$ = new WorkInstructionBaseTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztZoneData_ZoneDataType_1_u :
          y_LiztZoneData_ZoneDataType_1_u y_ZoneData_ZoneDataType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_ZoneData_ZoneDataType
          {$$ = new ZoneDataTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LiztZoneSection_ZoneSectionType_1_u :
          y_LiztZoneSection_ZoneSectionType_1_u
          y_ZoneSection_ZoneSectionType
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        | y_ZoneSection_ZoneSectionType
          {$$ = new ZoneSectionTypeLisd($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LocalVariablesType :
          y_LiztAttributePair ENDITEM
          y_LiztVariable_VariableDeclarationType_1_u
          {$$ = new LocalVariablesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LocalVariablesType attributes");
             }
           delete $1;
          }
        ;

y_LocalVariables_LocalVariablesType_0 :
          /* empty */
          {$$ = 0;}
        | LocalVariablesSTART y_LocalVariablesType LocalVariablesEND
          {$$ = $2;}
        ;

y_LocatedTipType :
          ENDITEM y_ProbeTip_ProbeTipType y_TipEndLocation_PointType
          {$$ = new LocatedTipType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LocatedTip_LocatedTipType :
          LocatedTipSTART y_LocatedTipType LocatedTipEND
          {$$ = $2;}
        ;

y_LocatedTipsType :
          y_LiztAttributePair ENDITEM y_LiztLocatedTip_LocatedTipType_1_u
          {$$ = new LocatedTipsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LocatedTipsType attributes");
             }
           delete $1;
          }
        ;

y_LocatedTips_LocatedTipsType :
          LocatedTipsSTART y_LocatedTipsType LocatedTipsEND
          {$$ = $2;}
        ;

y_LocationCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_DatumsOkStats_StatsPassFailType_0
          {$$ = new LocationCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_LocationCharacteristicStats_LocationCharacteristicStatsEvalType :
          LocationCharacteristicStatsSTART
          y_LocationCharacteristicStatsEvalType
          LocationCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "LocationCharacteristicStats";
          }
        ;

y_LocationDescription_XmlString :
          LocationDescriptionSTART ENDITEM {yyReadData = 1;} y_XmlString
          LocationDescriptionEND
          {$$ = $4;}
        ;

y_LocationId_QIFReferenceType :
          LocationIdSTART y_QIFReferenceType LocationIdEND
          {$$ = $2;}
        ;

y_LocationOnCMM_PointType :
          LocationOnCMMSTART y_PointType LocationOnCMMEND
          {$$ = $2;}
        ;

y_LocationOnDrawi_1060_LocationOnDrawi_1060_Type :
          y_LocationOnDrawi_1060_Type
          {$$ = $1;}
        ;

y_LocationOnDrawi_1060_Type :
          y_DrawingId_QIFReferenceFullType y_SheetNumber_XmlString_0
          y_DrawingZone_XmlString_0
          {$$ = new LocationOnDrawi_1060_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_LocationOnDrawi_1061_LocationOnDrawi_1061_Type :
          y_LocationOnDrawi_1061_Type
          {$$ = $1;}
        ;

y_LocationOnDrawi_1061_Type :
          y_ModelId_QIFReferenceFullType y_View_XmlString
          {$$ = new LocationOnDrawi_1061_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LocationOnDrawi_1062_LocationOnDrawi_1062_Type :
          y_LocationOnDrawi_1062_Type
          {$$ = $1;}
        ;

y_LocationOnDrawi_1062_Type :
          y_ViewId_QIFReferenceFullType
          {$$ = new LocationOnDrawi_1062_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LocationOnDrawingType :
          ENDITEM y_LocationOnDrawingTypeChoicePair
          {$$ = new LocationOnDrawingType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_LocationOnDrawingTypeChoicePair :
          y_LocationOnDrawi_1060_LocationOnDrawi_1060_Type
          {$$ = new LocationOnDrawingTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LocationOnDrawingTypeType = LocationOnDrawingTypeChoicePair::LocationOnDrawi_1060E;
           $$->LocationOnDrawingTypeValue.LocationOnDrawi_1060 = $1;
          }
        | y_LocationOnDrawi_1061_LocationOnDrawi_1061_Type
          {$$ = new LocationOnDrawingTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LocationOnDrawingTypeType = LocationOnDrawingTypeChoicePair::LocationOnDrawi_1061E;
           $$->LocationOnDrawingTypeValue.LocationOnDrawi_1061 = $1;
          }
        | y_LocationOnDrawi_1062_LocationOnDrawi_1062_Type
          {$$ = new LocationOnDrawingTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LocationOnDrawingTypeType = LocationOnDrawingTypeChoicePair::LocationOnDrawi_1062E;
           $$->LocationOnDrawingTypeValue.LocationOnDrawi_1062 = $1;
          }
        ;

y_LocationOnDrawing_LocationOnDrawingType_0 :
          /* empty */
          {$$ = 0;}
        | LocationOnDrawingSTART y_LocationOnDrawingType
          LocationOnDrawingEND
          {$$ = $2;}
        ;

y_LocationSignificanceAllEnumType :
          DATASTRING
          {$$ = new LocationSignificanceAllEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LocationSignificanceAllEnumType value");
          }
        ;

y_LocationSignificanceOneSidesEnumType :
          DATASTRING
          {$$ = new LocationSignificanceOneSidesEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LocationSignificanceOneSidesEnumType value");
          }
        ;

y_LocationSignificanceSpotSeamEnumType :
          DATASTRING
          {$$ = new LocationSignificanceSpotSeamEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LocationSignificanceSpotSeamEnumType value");
          }
        ;

y_LocationSignificance_LocationSignificanceAllEnumType :
          LocationSignificanceSTART ENDITEM {yyReadData = 1;}
          y_LocationSignificanceAllEnumType LocationSignificanceEND
          {$$ = $4;}
        ;

y_LocationSignificance_LocationSignificanceOneSidesEnumType :
          LocationSignificanceSTART ENDITEM {yyReadData = 1;}
          y_LocationSignificanceOneSidesEnumType LocationSignificanceEND
          {$$ = $4;}
        ;

y_LocationSignificance_LocationSignificanceSpotSeamEnumType :
          LocationSignificanceSTART ENDITEM {yyReadData = 1;}
          y_LocationSignificanceSpotSeamEnumType LocationSignificanceEND
          {$$ = $4;}
        ;

y_LocationType :
          y_LiztAttributePair ENDITEM y_LocationDescription_XmlString
          y_Address_PhysicalAddressType_0
          {$$ = new LocationType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LocationType attributes");
             }
           delete $1;
          }
        ;

y_Location_LocationType :
          LocationSTART y_LocationType LocationEND
          {$$ = $2;}
        ;

y_Location_MeasuredPointType_0 :
          /* empty */
          {$$ = 0;}
        | LocationSTART y_MeasuredPointType LocationEND
          {$$ = $2;}
        ;

y_Location_PointSimpleType :
          LocationSTART y_PointSimpleType LocationEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_Location_PointType :
          LocationSTART y_PointType LocationEND
          {$$ = $2;}
        ;

y_Location_RectangleType :
          LocationSTART y_RectangleType LocationEND
          {$$ = $2;}
        ;

y_Location_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | LocationSTART ENDITEM {yyReadData = 1;} y_XmlString LocationEND
          {$$ = $4;}
        ;

y_LogicalOperatio_1231_LogicalOperatio_1231_Type :
          y_LogicalOperatio_1231_Type
          {$$ = $1;}
        ;

y_LogicalOperatio_1231_Type :
          y_LiztLogicalOperatio_1231_TypeChoicePair
          {$$ = new LogicalOperatio_1231_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($1->size() > 2)
             return yyerror("must not be more than 2 choices");
           if ($1->size() < 2)
             return yyerror("must be at least 2 choices");
          }
        ;

y_LogicalOperatio_1231_TypeChoicePair :
          y_LogicalOperationResult_XmlUnsignedInt
          {$$ = new LogicalOperatio_1231_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LogicalOperatio_1231_TypeType = LogicalOperatio_1231_TypeChoicePair::LogicalOperationResultE;
           $$->LogicalOperatio_1231_TypeValue.LogicalOperationResult = $1;
          }
        | y_SectionPlane_XmlUnsignedInt
          {$$ = new LogicalOperatio_1231_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->LogicalOperatio_1231_TypeType = LogicalOperatio_1231_TypeChoicePair::SectionPlaneE;
           $$->LogicalOperatio_1231_TypeValue.SectionPlane = $1;
          }
        ;

y_LogicalOperationEnumType :
          DATASTRING
          {$$ = new LogicalOperationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad LogicalOperationEnumType value");
          }
        ;

y_LogicalOperationResult_XmlUnsignedInt :
          LogicalOperationResultSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt LogicalOperationResultEND
          {$$ = $4;}
        ;

y_LogicalOperationType :
          y_LiztAttributePair ENDITEM y_Action_LogicalOperationEnumType
          y_LogicalOperatio_1231_LogicalOperatio_1231_Type
          {$$ = new LogicalOperationType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LogicalOperationType attributes");
             }
           delete $1;
          }
        ;

y_LogicalOperation_LogicalOperationType :
          LogicalOperationSTART y_LogicalOperationType LogicalOperationEND
          {$$ = $2;}
        ;

y_LogicalOperationsType :
          y_LiztAttributePair ENDITEM
          y_LiztLogicalOperation_LogicalOperationType_1_u
          {$$ = new LogicalOperationsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LogicalOperationsType attributes");
             }
           delete $1;
          }
        ;

y_LogicalOperations_LogicalOperationsType_0 :
          /* empty */
          {$$ = 0;}
        | LogicalOperationsSTART y_LogicalOperationsType
          LogicalOperationsEND
          {$$ = $2;}
        ;

y_LongitudinalTrackingSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | LongitudinalTrackingSpeedSTART y_SpeedValueType
          LongitudinalTrackingSpeedEND
          {$$ = $2;}
        ;

y_LoopBase_substituteType :
          y_LoopMesh_LoopMeshType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Loop_LoopType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_LoopIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | LoopIdsSTART y_ArrayReferenceType LoopIdsEND
          {$$ = $2;}
        ;

y_LoopMeshType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_CoEdgesMesh_CoEdgesMeshType
          {$$ = new LoopMeshType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LoopMeshType attributes");
             }
           delete $1;
          }
        ;

y_LoopMesh_LoopMeshType :
          LoopMeshSTART y_LoopMeshType LoopMeshEND
          {$$ = $2;
           $$->printElement = "LoopMesh";
          }
        ;

y_LoopSetType :
          y_LiztAttributePair ENDITEM y_LiztLoopBase_substituteType_1_u
          {$$ = new LoopSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LoopSetType attributes");
             }
           delete $1;
          }
        ;

y_LoopSet_LoopSetType_0 :
          /* empty */
          {$$ = 0;}
        | LoopSetSTART y_LoopSetType LoopSetEND
          {$$ = $2;}
        ;

y_LoopType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_CoEdges_CoEdgesType
          {$$ = new LoopType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad LoopType attributes");
             }
           delete $1;
          }
        ;

y_Loop_LoopType :
          LoopSTART y_LoopType LoopEND
          {$$ = $2;
           $$->printElement = "Loop";
          }
        ;

y_Loop_Polyline2dType :
          LoopSTART y_Polyline2dType LoopEND
          {$$ = $2;}
        ;

y_Loop_SectionPathType :
          LoopSTART y_SectionPathType LoopEND
          {$$ = $2;}
        ;

y_Loops2dType :
          y_LiztAttributePair ENDITEM y_LiztLoop_Polyline2dType_1_u
          {$$ = new Loops2dType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Loops2dType attributes");
             }
           delete $1;
          }
        ;

y_Loops_Loops2dType :
          LoopsSTART y_Loops2dType LoopsEND
          {$$ = $2;}
        ;

y_Loops_SectionLoopsType :
          LoopsSTART y_SectionLoopsType LoopsEND
          {$$ = $2;}
        ;

y_LotNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | LotNumberSTART ENDITEM {yyReadData = 1;} y_XmlString LotNumberEND
          {$$ = $4;}
        ;

y_LowerConfidenceLimit_StatsMeasuredDecimalType :
          LowerConfidenceLimitSTART y_StatsMeasuredDecimalType
          LowerConfidenceLimitEND
          {$$ = $2;
           $$->printElement = "LowerConfidenceLimit";
          }
        ;

y_LowerControlLimitRange_StatsMeasuredDecimalType :
          LowerControlLimitRangeSTART y_StatsMeasuredDecimalType
          LowerControlLimitRangeEND
          {$$ = $2;
           $$->printElement = "LowerControlLimitRange";
          }
        ;

y_LowerControlLimit_StatsMeasuredDecimalType :
          LowerControlLimitSTART y_StatsMeasuredDecimalType
          LowerControlLimitEND
          {$$ = $2;
           $$->printElement = "LowerControlLimit";
          }
        ;

y_LowerPoint_Point2dSimpleType :
          LowerPointSTART y_Point2dSimpleType LowerPointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_MachineCoordinateSystemOperationType :
          ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0
          {$$ = new MachineCoordinateSystemOperationType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MachineCoordinateSystemType :
          ENDITEM y_CoordinateSystemId_QIFReferenceFullType
          y_MeasurementDeviceId_QIFReferenceType_0
          {$$ = new MachineCoordinateSystemType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MachineCoordinateSystem_MachineCoordinateSystemType :
          MachineCoordinateSystemSTART y_MachineCoordinateSystemType
          MachineCoordinateSystemEND
          {$$ = $2;}
        ;

y_MachineIdentifier_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | MachineIdentifierSTART ENDITEM {yyReadData = 1;} y_XmlString
          MachineIdentifierEND
          {$$ = $4;}
        ;

y_MachineManufacturerName_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | MachineManufacturerNameSTART ENDITEM {yyReadData = 1;}
          y_XmlString MachineManufacturerNameEND
          {$$ = $4;}
        ;

y_Machine_MachineCoordinateSystemOperationType :
          MachineSTART y_MachineCoordinateSystemOperationType MachineEND
          {$$ = $2;
           $$->printElement = "Machine";
          }
        ;

y_Magnetic_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | MagneticSTART ENDITEM {yyReadData = 1;} y_XmlBoolean MagneticEND
          {$$ = $4;}
        ;

y_MagnetoInductiveSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_FrequencyResponse_UserDefinedUnitValueType_0
          y_OffsetDistance_LinearValueType_0
          y_MaxPressure_PressureValueType_0
          y_ShockTolerance_UserDefinedUnitValueType_0
          y_VibrationTolerance_UserDefinedUnitValueType_0
          y_HousingMaterial_XmlString_0
          y_MaxCurrentConsumption_UserDefinedUnitValueType_0
          y_MinPowerSupplyVoltage_UserDefinedUnitValueType_0
          y_MaxPowerSupplyVoltage_UserDefinedUnitValueType_0
          {$$ = new MagnetoInductiveSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MagnetoInductiveSensorType attributes");
             }
           delete $1;
          }
        ;

y_MagnetoInductiveSensor_MagnetoInductiveSensorType :
          MagnetoInductiveSensorSTART y_MagnetoInductiveSensorType
          MagnetoInductiveSensorEND
          {$$ = $2;
           $$->printElement = "MagnetoInductiveSensor";
          }
        ;

y_Magnification_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | MagnificationSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          MagnificationEND
          {$$ = $4;}
        ;

y_MainSymbol_WeldMainSymbolType_0 :
          /* empty */
          {$$ = 0;}
        | MainSymbolSTART y_WeldMainSymbolType MainSymbolEND
          {$$ = $2;
           $$->printElement = "MainSymbol";
          }
        ;

y_MajorDiameter_LinearValueType :
          MajorDiameterSTART y_LinearValueType MajorDiameterEND
          {$$ = $2;}
        ;

y_MajorDiameter_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MajorDiameterSTART y_MeasuredLinearValueType MajorDiameterEND
          {$$ = $2;}
        ;

y_ManualMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new ManualMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ManualMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_ManualMeasureFeatureMethod_ManualMeasureFeatureMethodType :
          ManualMeasureFeatureMethodSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new ManualMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ManualMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ManualMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        | ManualMeasureFeatureMethodSTART y_ManualMeasureFeatureMethodType
          ManualMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "ManualMeasureFeatureMethod";
          }
        ;

y_ManualMeasurementDeviceType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          {$$ = new ManualMeasurementDeviceType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ManualMeasurementDeviceType attributes");
             }
           delete $1;
          }
        ;

y_ManualMeasurementDevice_ManualMeasurementDeviceType :
          ManualMeasurementDeviceSTART y_ManualMeasurementDeviceType
          ManualMeasurementDeviceEND
          {$$ = $2;
           $$->printElement = "ManualMeasurementDevice";
          }
        ;

y_Manufacturer_XmlString :
          ManufacturerSTART ENDITEM {yyReadData = 1;} y_XmlString
          ManufacturerEND
          {$$ = $4;}
        ;

y_Manufacturer_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ManufacturerSTART ENDITEM {yyReadData = 1;} y_XmlString
          ManufacturerEND
          {$$ = $4;}
        ;

y_ManufacturingMethodEnumType :
          DATASTRING
          {$$ = new ManufacturingMethodEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ManufacturingMethodEnumType value");
          }
        ;

y_ManufacturingMethodEnum_ManufacturingMethodEnumType :
          ManufacturingMethodEnumSTART ENDITEM {yyReadData = 1;}
          y_ManufacturingMethodEnumType ManufacturingMethodEnumEND
          {$$ = $4;}
        ;

y_ManufacturingMethodType :
          ENDITEM y_ManufacturingMethodTypeChoicePair
          {$$ = new ManufacturingMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ManufacturingMethodTypeChoicePair :
          y_ManufacturingMethodEnum_ManufacturingMethodEnumType
          {$$ = new ManufacturingMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ManufacturingMethodTypeType = ManufacturingMethodTypeChoicePair::ManufacturingMethodEnumE;
           $$->ManufacturingMethodTypeValue.ManufacturingMethodEnum = $1;
          }
        | y_OtherManufacturingMethod_XmlString
          {$$ = new ManufacturingMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ManufacturingMethodTypeType = ManufacturingMethodTypeChoicePair::OtherManufacturingMethodE;
           $$->ManufacturingMethodTypeValue.OtherManufacturingMethod = $1;
          }
        ;

y_ManufacturingProcessId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ManufacturingProcessIdSTART y_QIFReferenceFullType
          ManufacturingProcessIdEND
          {$$ = $2;}
        ;

y_ManufacturingProcessId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ManufacturingProcessIdSTART y_QIFReferenceType
          ManufacturingProcessIdEND
          {$$ = $2;}
        ;

y_ManufacturingProcessTraceabilitiesCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ManufacturingProcessTraceabilitiesCountSTART ENDITEM {yyReadData
          = 1;} y_XmlUnsignedInt ManufacturingProcessTraceabilitiesCountEND
          {$$ = $4;}
        ;

y_ManufacturingProcessTraceabilitiesType :
          y_LiztAttributePair ENDITEM
          y_LiztManufacturingProcessTraceability_ManufacturingProcessTraceabilityType_1_u
          {$$ = new ManufacturingProcessTraceabilitiesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ManufacturingProcessTraceabilitiesType attributes");
             }
           delete $1;
          }
        ;

y_ManufacturingProcessTraceabilities_ManufacturingProcessTraceabilitiesType_0 :
          /* empty */
          {$$ = 0;}
        | ManufacturingProcessTraceabilitiesSTART
          y_ManufacturingProcessTraceabilitiesType
          ManufacturingProcessTraceabilitiesEND
          {$$ = $2;}
        ;

y_ManufacturingProcessTraceabilityType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Job_XmlString_0
          y_Revision_XmlString_0 y_PreviousOperationId_QIFReferenceType_0
          y_Path_XmlString_0 y_MachineManufacturerName_XmlString_0
          y_MachineIdentifier_XmlString_0 y_OperatorIdentifier_XmlString_0
          y_Shift_XmlString_0 y_Department_XmlString_0
          y_ResponsibilityIdentifier_XmlString_0 y_PlantSector_XmlString_0
          y_ProcessParameters_ProcessParametersType_0
          y_AssociatedTraceabilityId_QIFReferenceType_0
          {$$ = new ManufacturingProcessTraceabilityType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ManufacturingProcessTraceabilityType attributes");
             }
           delete $1;
          }
        ;

y_ManufacturingProcessTraceability_ManufacturingProcessTraceabilityType :
          ManufacturingProcessTraceabilitySTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ManufacturingProcessTraceabilityType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ManufacturingProcessTraceabilityType attributes");
             }
           delete $2;
          }
        | ManufacturingProcessTraceabilitySTART
          y_ManufacturingProcessTraceabilityType
          ManufacturingProcessTraceabilityEND
          {$$ = $2;}
        ;

y_MarkingFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Text_XmlString y_MarkingMethod_MarkingMethodType
          {$$ = new MarkingFeatureDefinitionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MarkingFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_MarkingFeatureDefinition_MarkingFeatureDefinitionType :
          MarkingFeatureDefinitionSTART y_MarkingFeatureDefinitionType
          MarkingFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "MarkingFeatureDefinition";
          }
        ;

y_MarkingFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new MarkingFeatureItemType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MarkingFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_MarkingFeatureItem_MarkingFeatureItemType :
          MarkingFeatureItemSTART y_MarkingFeatureItemType
          MarkingFeatureItemEND
          {$$ = $2;
           $$->printElement = "MarkingFeatureItem";
          }
        ;

y_MarkingFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0 y_Text_XmlString
          y_Location_RectangleType
          {$$ = new MarkingFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MarkingFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_MarkingFeatureMeasurement_MarkingFeatureMeasurementType :
          MarkingFeatureMeasurementSTART y_MarkingFeatureMeasurementType
          MarkingFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "MarkingFeatureMeasurement";
          }
        ;

y_MarkingFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_Location_RectangleType
          {$$ = new MarkingFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MarkingFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_MarkingFeatureNominal_MarkingFeatureNominalType :
          MarkingFeatureNominalSTART y_MarkingFeatureNominalType
          MarkingFeatureNominalEND
          {$$ = $2;
           $$->printElement = "MarkingFeatureNominal";
          }
        ;

y_MarkingMethodEnumType :
          DATASTRING
          {$$ = new MarkingMethodEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad MarkingMethodEnumType value");
          }
        ;

y_MarkingMethodEnum_MarkingMethodEnumType :
          MarkingMethodEnumSTART ENDITEM {yyReadData = 1;}
          y_MarkingMethodEnumType MarkingMethodEnumEND
          {$$ = $4;}
        ;

y_MarkingMethodType :
          ENDITEM y_MarkingMethodTypeChoicePair
          {$$ = new MarkingMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MarkingMethodTypeChoicePair :
          y_MarkingMethodEnum_MarkingMethodEnumType
          {$$ = new MarkingMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MarkingMethodTypeType = MarkingMethodTypeChoicePair::MarkingMethodEnumE;
           $$->MarkingMethodTypeValue.MarkingMethodEnum = $1;
          }
        | y_OtherMarkingMethod_XmlString
          {$$ = new MarkingMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MarkingMethodTypeType = MarkingMethodTypeChoicePair::OtherMarkingMethodE;
           $$->MarkingMethodTypeValue.OtherMarkingMethod = $1;
          }
        ;

y_MarkingMethod_MarkingMethodType :
          MarkingMethodSTART y_MarkingMethodType MarkingMethodEND
          {$$ = $2;}
        ;

y_MassAbsoluteLinearity_MeasuredMassValueType :
          MassAbsoluteLinearitySTART y_MeasuredMassValueType
          MassAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_MassCharacteris_1063_MassCharacteris_1063_Type :
          y_MassCharacteris_1063_Type
          {$$ = $1;}
        ;

y_MassCharacteris_1063_Type :
          y_MassCharacteris_1063_TypeChoicePair
          {$$ = new MassCharacteris_1063_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MassCharacteris_1063_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new MassCharacteris_1063_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MassCharacteris_1063_TypeType = MassCharacteris_1063_TypeChoicePair::NonToleranceE;
           $$->MassCharacteris_1063_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_MassToleranceType
          {$$ = new MassCharacteris_1063_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MassCharacteris_1063_TypeType = MassCharacteris_1063_TypeChoicePair::ToleranceE;
           $$->MassCharacteris_1063_TypeValue.Tolerance = $1;
          }
        ;

y_MassCriterion_CriterionMassType_0 :
          /* empty */
          {$$ = 0;}
        | MassCriterionSTART y_CriterionMassType MassCriterionEND
          {$$ = $2;
           $$->printElement = "MassCriterion";
          }
        ;

y_MassDensity_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | MassDensitySTART ENDITEM {yyReadData = 1;} y_XmlDouble
          MassDensityEND
          {$$ = $4;}
        ;

y_MassLimit_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MassLimitSTART y_MassValueType MassLimitEND
          {$$ = $2;}
        ;

y_MassMeasurement_MeasuredMassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MassMeasurementSTART y_MeasuredMassValueType MassMeasurementEND
          {$$ = $2;}
        ;

y_MassPropertyTolerance_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | MassPropertyToleranceSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          MassPropertyToleranceEND
          {$$ = $4;}
        ;

y_MassStatsSummaries_SummariesStatisticsMassType_0 :
          /* empty */
          {$$ = 0;}
        | MassStatsSummariesSTART y_SummariesStatisticsMassType
          MassStatsSummariesEND
          {$$ = $2;}
        ;

y_MassStatsSummary_SummaryStatisticsMassType :
          MassStatsSummarySTART y_SummaryStatisticsMassType
          MassStatsSummaryEND
          {$$ = $2;
           $$->printElement = "MassStatsSummary";
          }
        ;

y_MassToleranceTy_1018_MassToleranceTy_1018_Type :
          y_MassToleranceTy_1018_Type
          {$$ = $1;}
        ;

y_MassToleranceTy_1018_Type :
          y_MassToleranceTy_1018_TypeChoicePair
          {$$ = new MassToleranceTy_1018_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MassToleranceTy_1018_TypeChoicePair :
          y_MassToleranceTy_1036_MassToleranceTy_1036_Type
          {$$ = new MassToleranceTy_1018_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MassToleranceTy_1018_TypeType = MassToleranceTy_1018_TypeChoicePair::MassToleranceTy_1036E;
           $$->MassToleranceTy_1018_TypeValue.MassToleranceTy_1036 = $1;
          }
        | y_MinValue_MassValueType
          {$$ = new MassToleranceTy_1018_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MassToleranceTy_1018_TypeType = MassToleranceTy_1018_TypeChoicePair::MinValueE;
           $$->MassToleranceTy_1018_TypeValue.MinValue = $1;
          }
        ;

y_MassToleranceTy_1036_MassToleranceTy_1036_Type :
          y_MassToleranceTy_1036_Type
          {$$ = $1;}
        ;

y_MassToleranceTy_1036_Type :
          y_MaxValue_MassValueType y_MinValue_MassValueType_0
          {$$ = new MassToleranceTy_1036_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MassToleranceType :
          ENDITEM y_MassToleranceTy_1018_MassToleranceTy_1018_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new MassToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_MassUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new MassUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_MassUnit_MassUnitType :
          MassUnitSTART y_MassUnitType MassUnitEND
          {$$ = $2;}
        ;

y_MassUnit_MassUnitType_0 :
          /* empty */
          {$$ = 0;}
        | MassUnitSTART y_MassUnitType MassUnitEND
          {$$ = $2;}
        ;

y_MassValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MassValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MassValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MassValueType attributes");
             }
           delete $1;
          }
        ;

y_Mass_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MassSTART y_MassValueType MassEND
          {$$ = $2;}
        ;

y_MaterialClassEnumType :
          DATASTRING
          {$$ = new MaterialClassEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad MaterialClassEnumType value");
          }
        ;

y_MaterialClassEnum_MaterialClassEnumType :
          MaterialClassEnumSTART ENDITEM {yyReadData = 1;}
          y_MaterialClassEnumType MaterialClassEnumEND
          {$$ = $4;}
        ;

y_MaterialCondition_MaterialModifierEnumType :
          MaterialConditionSTART ENDITEM {yyReadData = 1;}
          y_MaterialModifierEnumType MaterialConditionEND
          {$$ = $4;}
        ;

y_MaterialCondition_MaterialModifierEnumType_0 :
          /* empty */
          {$$ = 0;}
        | MaterialConditionSTART ENDITEM {yyReadData = 1;}
          y_MaterialModifierEnumType MaterialConditionEND
          {$$ = $4;}
        ;

y_MaterialLibrary_MaterialsType_0 :
          /* empty */
          {$$ = 0;}
        | MaterialLibrarySTART y_MaterialsType MaterialLibraryEND
          {$$ = $2;}
        ;

y_MaterialModifierEnumType :
          DATASTRING
          {$$ = new MaterialModifierEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad MaterialModifierEnumType value");
          }
        ;

y_MaterialModifier_MaterialModifierEnumType :
          MaterialModifierSTART ENDITEM {yyReadData = 1;}
          y_MaterialModifierEnumType MaterialModifierEND
          {$$ = $4;}
        ;

y_MaterialType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_MaterialType_1019_MaterialType_1019_Type_0
          y_Description_XmlString_0 y_MassDensity_XmlDouble_0
          y_PoissonsRatio_XmlDouble_0 y_YoungsModulus_XmlDouble_0
          y_UltimateTensileStress_XmlDouble_0
          y_CompressiveYieldStress_XmlDouble_0
          y_TensileYieldStress_XmlDouble_0 y_ThermalExpansion_XmlDouble_0
          y_SpecificHeatCapacity_XmlDouble_0
          y_ThermalConductivity_XmlDouble_0
          {$$ = new MaterialType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MaterialType attributes");
             }
           delete $1;
          }
        ;

y_MaterialType_1019_MaterialType_1019_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MaterialType_1019_Type
          {$$ = $1;}
        ;

y_MaterialType_1019_Type :
          y_MaterialType_1019_TypeChoicePair
          {$$ = new MaterialType_1019_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MaterialType_1019_TypeChoicePair :
          y_MaterialClassEnum_MaterialClassEnumType
          {$$ = new MaterialType_1019_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MaterialType_1019_TypeType = MaterialType_1019_TypeChoicePair::MaterialClassEnumE;
           $$->MaterialType_1019_TypeValue.MaterialClassEnum = $1;
          }
        | y_OtherMaterialClass_XmlString
          {$$ = new MaterialType_1019_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MaterialType_1019_TypeType = MaterialType_1019_TypeChoicePair::OtherMaterialClassE;
           $$->MaterialType_1019_TypeValue.OtherMaterialClass = $1;
          }
        ;

y_Material_MaterialType :
          MaterialSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new MaterialType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad MaterialType attributes");
             }
           delete $2;
          }
        | MaterialSTART y_MaterialType MaterialEND
          {$$ = $2;}
        ;

y_Material_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | MaterialSTART ENDITEM {yyReadData = 1;} y_XmlString MaterialEND
          {$$ = $4;}
        ;

y_MaterialsType :
          y_LiztAttributePair ENDITEM y_LiztMaterial_MaterialType_1_u
          {$$ = new MaterialsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MaterialsType attributes");
             }
           delete $1;
          }
        ;

y_MaxAmbientAirPressure_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxAmbientAirPressureSTART y_PressureValueType
          MaxAmbientAirPressureEND
          {$$ = $2;}
        ;

y_MaxAmbientRelativeHumidity_SpecifiedDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | MaxAmbientRelativeHumiditySTART y_SpecifiedDecimalType
          MaxAmbientRelativeHumidityEND
          {$$ = $2;}
        ;

y_MaxAmbientTemperature_TemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxAmbientTemperatureSTART y_TemperatureValueType
          MaxAmbientTemperatureEND
          {$$ = $2;}
        ;

y_MaxAzimuthalAxisAngle_AngularValueType :
          MaxAzimuthalAxisAngleSTART y_AngularValueType
          MaxAzimuthalAxisAngleEND
          {$$ = $2;}
        ;

y_MaxCircularityStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MaxCircularityStatsSTART y_StatsLinearType MaxCircularityStatsEND
          {$$ = $2;
           $$->printElement = "MaxCircularityStats";
          }
        ;

y_MaxCircularity_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxCircularitySTART y_MeasuredLinearValueType MaxCircularityEND
          {$$ = $2;}
        ;

y_MaxCurrentConsumption_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxCurrentConsumptionSTART y_UserDefinedUnitValueType
          MaxCurrentConsumptionEND
          {$$ = $2;}
        ;

y_MaxCylindricityStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MaxCylindricityStatsSTART y_StatsLinearType
          MaxCylindricityStatsEND
          {$$ = $2;
           $$->printElement = "MaxCylindricityStats";
          }
        ;

y_MaxCylindricity_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxCylindricitySTART y_MeasuredLinearValueType MaxCylindricityEND
          {$$ = $2;}
        ;

y_MaxDeviationFromAverageFar_LinearValueType :
          MaxDeviationFromAverageFarSTART y_LinearValueType
          MaxDeviationFromAverageFarEND
          {$$ = $2;}
        ;

y_MaxDeviationFromAverageMiddle_LinearValueType :
          MaxDeviationFromAverageMiddleSTART y_LinearValueType
          MaxDeviationFromAverageMiddleEND
          {$$ = $2;}
        ;

y_MaxDeviationFromAverageNear_LinearValueType :
          MaxDeviationFromAverageNearSTART y_LinearValueType
          MaxDeviationFromAverageNearEND
          {$$ = $2;}
        ;

y_MaxDeviationStats_StatsAngularType :
          MaxDeviationStatsSTART y_StatsAngularType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsAngularType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsAngularType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsAreaType :
          MaxDeviationStatsSTART y_StatsAreaType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsAreaType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsAreaType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsForceType :
          MaxDeviationStatsSTART y_StatsForceType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsForceType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsForceType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsLinearType :
          MaxDeviationStatsSTART y_StatsLinearType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsLinearType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsMassType :
          MaxDeviationStatsSTART y_StatsMassType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsMassType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsMassType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsPressureType :
          MaxDeviationStatsSTART y_StatsPressureType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsPressureType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsPressureType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsSpeedType :
          MaxDeviationStatsSTART y_StatsSpeedType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsSpeedType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsSpeedType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsTemperatureType :
          MaxDeviationStatsSTART y_StatsTemperatureType
          MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsTemperatureType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsTemperatureType
          MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsTimeType :
          MaxDeviationStatsSTART y_StatsTimeType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsTimeType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsTimeType MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsUserDefinedUnitType :
          MaxDeviationStatsSTART y_StatsUserDefinedUnitType
          MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDeviationStats_StatsUserDefinedUnitType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDeviationStatsSTART y_StatsUserDefinedUnitType
          MaxDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MaxDeviationStats";
          }
        ;

y_MaxDualValue_LinearDualValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxDualValueSTART y_LinearDualValueType MaxDualValueEND
          {$$ = $2;}
        ;

y_MaxEnvironmentalAltitude_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxEnvironmentalAltitudeSTART y_LinearValueType
          MaxEnvironmentalAltitudeEND
          {$$ = $2;}
        ;

y_MaxErrorConstant_LinearValueType :
          MaxErrorConstantSTART y_LinearValueType MaxErrorConstantEND
          {$$ = $2;}
        ;

y_MaxFeatureRulesType :
          y_LiztAttributePair ENDITEM
          y_LiztIfThenFeatureRule_substituteType_1_u y_Else_ElseRuleType_0
          {$$ = new MaxFeatureRulesType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MaxFeatureRulesType attributes");
             }
           delete $1;
          }
        ;

y_MaxFeatureRules_MaxFeatureRulesType_0 :
          /* empty */
          {$$ = 0;}
        | MaxFeatureRulesSTART y_MaxFeatureRulesType MaxFeatureRulesEND
          {$$ = $2;}
        ;

y_MaxFirstAxis_MeasuredDecimalType :
          MaxFirstAxisSTART y_MeasuredDecimalType MaxFirstAxisEND
          {$$ = $2;}
        ;

y_MaxFlatnessStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MaxFlatnessStatsSTART y_StatsLinearType MaxFlatnessStatsEND
          {$$ = $2;
           $$->printElement = "MaxFlatnessStats";
          }
        ;

y_MaxFlatness_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxFlatnessSTART y_MeasuredLinearValueType MaxFlatnessEND
          {$$ = $2;}
        ;

y_MaxFocusDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxFocusDistanceSTART y_LinearValueType MaxFocusDistanceEND
          {$$ = $2;}
        ;

y_MaxFramePerSecond_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxFramePerSecondSTART y_UserDefinedUnitValueType
          MaxFramePerSecondEND
          {$$ = $2;}
        ;

y_MaxFrameRate_PositiveDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | MaxFrameRateSTART ENDITEM {yyReadData = 1;} y_PositiveDecimalType
          MaxFrameRateEND
          {$$ = $4;}
        ;

y_MaxHoldingForce_ForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxHoldingForceSTART y_ForceValueType MaxHoldingForceEND
          {$$ = $2;}
        ;

y_MaxKV_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxKVSTART y_UserDefinedUnitValueType MaxKVEND
          {$$ = $2;}
        ;

y_MaxLinearAxis_LinearValueType :
          MaxLinearAxisSTART y_LinearValueType MaxLinearAxisEND
          {$$ = $2;}
        ;

y_MaxLoad_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxLoadSTART y_MassValueType MaxLoadEND
          {$$ = $2;}
        ;

y_MaxMeasurementFrequency_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxMeasurementFrequencySTART y_UserDefinedUnitValueType
          MaxMeasurementFrequencyEND
          {$$ = $2;}
        ;

y_MaxMeasurementRange_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxMeasurementRangeSTART y_LinearValueType MaxMeasurementRangeEND
          {$$ = $2;}
        ;

y_MaxMeasuringDistance_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxMeasuringDistanceSTART y_AngularValueType
          MaxMeasuringDistanceEND
          {$$ = $2;}
        ;

y_MaxMeasuringDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxMeasuringDistanceSTART y_LinearValueType
          MaxMeasuringDistanceEND
          {$$ = $2;}
        ;

y_MaxOperatingCurrent_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxOperatingCurrentSTART y_UserDefinedUnitValueType
          MaxOperatingCurrentEND
          {$$ = $2;}
        ;

y_MaxOperatingVoltage_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxOperatingVoltageSTART y_UserDefinedUnitValueType
          MaxOperatingVoltageEND
          {$$ = $2;}
        ;

y_MaxOutputVoltage_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxOutputVoltageSTART y_UserDefinedUnitValueType
          MaxOutputVoltageEND
          {$$ = $2;}
        ;

y_MaxPermissibleProbingError_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPermissibleProbingErrorSTART y_LinearValueType
          MaxPermissibleProbingErrorEND
          {$$ = $2;}
        ;

y_MaxPixelClockSpeed_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPixelClockSpeedSTART y_UserDefinedUnitValueType
          MaxPixelClockSpeedEND
          {$$ = $2;}
        ;

y_MaxPoint_PointType :
          MaxPointSTART y_PointType MaxPointEND
          {$$ = $2;}
        ;

y_MaxPointsRate_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPointsRateSTART y_UserDefinedUnitValueType MaxPointsRateEND
          {$$ = $2;}
        ;

y_MaxPolarAxisAngle_AngularValueType :
          MaxPolarAxisAngleSTART y_AngularValueType MaxPolarAxisAngleEND
          {$$ = $2;}
        ;

y_MaxPolarAxis_AngularValueType :
          MaxPolarAxisSTART y_AngularValueType MaxPolarAxisEND
          {$$ = $2;}
        ;

y_MaxPowerSupplyVoltage_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPowerSupplyVoltageSTART y_UserDefinedUnitValueType
          MaxPowerSupplyVoltageEND
          {$$ = $2;}
        ;

y_MaxPower_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPowerSTART y_UserDefinedUnitValueType MaxPowerEND
          {$$ = $2;}
        ;

y_MaxPressureFront_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPressureFrontSTART y_PressureValueType MaxPressureFrontEND
          {$$ = $2;}
        ;

y_MaxPressureSide_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPressureSideSTART y_PressureValueType MaxPressureSideEND
          {$$ = $2;}
        ;

y_MaxPressure_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxPressureSTART y_PressureValueType MaxPressureEND
          {$$ = $2;}
        ;

y_MaxRadialAxis_LinearValueType :
          MaxRadialAxisSTART y_LinearValueType MaxRadialAxisEND
          {$$ = $2;}
        ;

y_MaxRadius_LinearValueType :
          MaxRadiusSTART y_LinearValueType MaxRadiusEND
          {$$ = $2;}
        ;

y_MaxRadius_MeasuredLinearValueType :
          MaxRadiusSTART y_MeasuredLinearValueType MaxRadiusEND
          {$$ = $2;}
        ;

y_MaxReadNoise_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxReadNoiseSTART y_UserDefinedUnitValueType MaxReadNoiseEND
          {$$ = $2;}
        ;

y_MaxReadoutFrequency_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxReadoutFrequencySTART y_UserDefinedUnitValueType
          MaxReadoutFrequencyEND
          {$$ = $2;}
        ;

y_MaxResponseTime_TimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxResponseTimeSTART y_TimeValueType MaxResponseTimeEND
          {$$ = $2;}
        ;

y_MaxRotaryAxis_AngularValueType :
          MaxRotaryAxisSTART y_AngularValueType MaxRotaryAxisEND
          {$$ = $2;}
        ;

y_MaxSecondAxis_MeasuredDecimalType :
          MaxSecondAxisSTART y_MeasuredDecimalType MaxSecondAxisEND
          {$$ = $2;}
        ;

y_MaxStraightnessStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MaxStraightnessStatsSTART y_StatsLinearType
          MaxStraightnessStatsEND
          {$$ = $2;
           $$->printElement = "MaxStraightnessStats";
          }
        ;

y_MaxStraightness_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxStraightnessSTART y_MeasuredLinearValueType MaxStraightnessEND
          {$$ = $2;}
        ;

y_MaxThirdAxis_MeasuredDecimalType :
          MaxThirdAxisSTART y_MeasuredDecimalType MaxThirdAxisEND
          {$$ = $2;}
        ;

y_MaxTiltCompensation_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxTiltCompensationSTART y_AngularValueType
          MaxTiltCompensationEND
          {$$ = $2;}
        ;

y_MaxTilt_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxTiltSTART y_AngularValueType MaxTiltEND
          {$$ = $2;}
        ;

y_MaxType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_u_Check
          {$$ = new MaxType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MaxValueStats_StatsAngularType :
          MaxValueStatsSTART y_StatsAngularType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsAngularType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsAngularType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsAreaType :
          MaxValueStatsSTART y_StatsAreaType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsAreaType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsAreaType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsForceType :
          MaxValueStatsSTART y_StatsForceType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsForceType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsForceType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsLinearType :
          MaxValueStatsSTART y_StatsLinearType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsLinearType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsMassType :
          MaxValueStatsSTART y_StatsMassType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsMassType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsMassType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsPressureType :
          MaxValueStatsSTART y_StatsPressureType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsPressureType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsPressureType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsSpeedType :
          MaxValueStatsSTART y_StatsSpeedType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsSpeedType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsSpeedType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsTemperatureType :
          MaxValueStatsSTART y_StatsTemperatureType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsTemperatureType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsTemperatureType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsTimeType :
          MaxValueStatsSTART y_StatsTimeType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsTimeType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsTimeType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsUserDefinedUnitType :
          MaxValueStatsSTART y_StatsUserDefinedUnitType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValueStats_StatsUserDefinedUnitType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueStatsSTART y_StatsUserDefinedUnitType MaxValueStatsEND
          {$$ = $2;
           $$->printElement = "MaxValueStats";
          }
        ;

y_MaxValue_AngularValueType :
          MaxValueSTART y_AngularValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_AreaValueType :
          MaxValueSTART y_AreaValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_ForceValueType :
          MaxValueSTART y_ForceValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_LinearValueType :
          MaxValueSTART y_LinearValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MassValueType :
          MaxValueSTART y_MassValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredAngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredAngularValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredAreaValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredAreaValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredForceValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredLinearValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredMassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredMassValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredPressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredPressureValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredSpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredSpeedValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredTemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredTemperatureValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredTimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredTimeValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_MeasuredUserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxValueSTART y_MeasuredUserDefinedUnitValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_PressureValueType :
          MaxValueSTART y_PressureValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_SpeedValueType :
          MaxValueSTART y_SpeedValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_TemperatureValueType :
          MaxValueSTART y_TemperatureValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_TimeValueType :
          MaxValueSTART y_TimeValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxValue_UserDefinedUnitValueType :
          MaxValueSTART y_UserDefinedUnitValueType MaxValueEND
          {$$ = $2;}
        ;

y_MaxVibration_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxVibrationSTART y_UserDefinedUnitValueType MaxVibrationEND
          {$$ = $2;}
        ;

y_MaxWireAcceleration_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | MaxWireAccelerationSTART ENDITEM {yyReadData = 1;} y_XmlString
          MaxWireAccelerationEND
          {$$ = $4;}
        ;

y_MaxWireExtensionForce_ForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxWireExtensionForceSTART y_ForceValueType
          MaxWireExtensionForceEND
          {$$ = $2;}
        ;

y_MaxWorkpieceHeight_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxWorkpieceHeightSTART y_LinearValueType MaxWorkpieceHeightEND
          {$$ = $2;}
        ;

y_MaxWorkpieceMass_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxWorkpieceMassSTART y_MassValueType MaxWorkpieceMassEND
          {$$ = $2;}
        ;

y_MaxWorkpieceWeight_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxWorkpieceWeightSTART y_MassValueType MaxWorkpieceWeightEND
          {$$ = $2;}
        ;

y_MaxXProbingSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxXProbingSpeedSTART y_SpeedValueType MaxXProbingSpeedEND
          {$$ = $2;}
        ;

y_MaxXRotation_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxXRotationSTART y_UserDefinedUnitValueType MaxXRotationEND
          {$$ = $2;}
        ;

y_MaxXTraverseSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxXTraverseSpeedSTART y_SpeedValueType MaxXTraverseSpeedEND
          {$$ = $2;}
        ;

y_MaxYProbingSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxYProbingSpeedSTART y_SpeedValueType MaxYProbingSpeedEND
          {$$ = $2;}
        ;

y_MaxYRotation_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxYRotationSTART y_UserDefinedUnitValueType MaxYRotationEND
          {$$ = $2;}
        ;

y_MaxYTraverseSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxYTraverseSpeedSTART y_SpeedValueType MaxYTraverseSpeedEND
          {$$ = $2;}
        ;

y_MaxZAxis_LinearValueType :
          MaxZAxisSTART y_LinearValueType MaxZAxisEND
          {$$ = $2;}
        ;

y_MaxZProbingSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxZProbingSpeedSTART y_SpeedValueType MaxZProbingSpeedEND
          {$$ = $2;}
        ;

y_MaxZRotation_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxZRotationSTART y_UserDefinedUnitValueType MaxZRotationEND
          {$$ = $2;}
        ;

y_MaxZTraverseSpeed_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaxZTraverseSpeedSTART y_SpeedValueType MaxZTraverseSpeedEND
          {$$ = $2;}
        ;

y_Max_MaxType :
          MaxSTART y_MaxType MaxEND
          {$$ = $2;
           $$->printElement = "Max";
          }
        ;

y_MaximumAbsoluteAppraiserVariation_CriteriaByUnitType :
          MaximumAbsoluteAppraiserVariationSTART y_CriteriaByUnitType
          MaximumAbsoluteAppraiserVariationEND
          {$$ = $2;}
        | MaximumAbsoluteAppraiserVariationSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new CriteriaByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CriteriaByUnitType attributes");
             }
           delete $2;
          }
        ;

y_MaximumAbsoluteEquipmentVariation_CriteriaByUnitType :
          MaximumAbsoluteEquipmentVariationSTART y_CriteriaByUnitType
          MaximumAbsoluteEquipmentVariationEND
          {$$ = $2;}
        | MaximumAbsoluteEquipmentVariationSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new CriteriaByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CriteriaByUnitType attributes");
             }
           delete $2;
          }
        ;

y_MaximumAbsoluteTotalRandR_CriteriaByUnitType :
          MaximumAbsoluteTotalRandRSTART y_CriteriaByUnitType
          MaximumAbsoluteTotalRandREND
          {$$ = $2;}
        | MaximumAbsoluteTotalRandRSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new CriteriaByUnitType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad CriteriaByUnitType attributes");
             }
           delete $2;
          }
        ;

y_MaximumAngularVelocity_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaximumAngularVelocitySTART y_UserDefinedUnitValueType
          MaximumAngularVelocityEND
          {$$ = $2;}
        ;

y_MaximumRelativeAppraiserVariation_CriterionDecimalType :
          MaximumRelativeAppraiserVariationSTART y_CriterionDecimalType
          MaximumRelativeAppraiserVariationEND
          {$$ = $2;}
        ;

y_MaximumRelativeEquipmentVariation_CriterionDecimalType :
          MaximumRelativeEquipmentVariationSTART y_CriterionDecimalType
          MaximumRelativeEquipmentVariationEND
          {$$ = $2;}
        ;

y_MaximumRelativeTotalRandR_CriterionDecimalType :
          MaximumRelativeTotalRandRSTART y_CriterionDecimalType
          MaximumRelativeTotalRandREND
          {$$ = $2;}
        ;

y_MaximumToleranceValue_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaximumToleranceValueSTART y_LinearValueType
          MaximumToleranceValueEND
          {$$ = $2;}
        ;

y_MaximumWorkingAmplitude_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MaximumWorkingAmplitudeSTART y_LinearValueType
          MaximumWorkingAmplitudeEND
          {$$ = $2;}
        ;

y_Maximum_StatsMeasuredDecimalWithReferenceType :
          MaximumSTART y_StatsMeasuredDecimalWithReferenceType MaximumEND
          {$$ = $2;
           $$->printElement = "Maximum";
          }
        ;

y_May_QIFMayType :
          MaySTART y_QIFMayType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "May";
          }
        ;

y_MeasurandIds_ArrayReferenceType :
          MeasurandIdsSTART y_ArrayReferenceType MeasurandIdsEND
          {$$ = $2;}
        ;

y_Measurand_substituteType :
          y_EstablishDatumMeasurand_EstablishDatumMeasurandType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EvaluateCharacteristicMeasurand_EvaluateCharacteristicMeasurandType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasurandsType :
          y_LiztAttributePair ENDITEM y_LiztMeasurand_substituteType_1_u
          {$$ = new MeasurandsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurandsType attributes");
             }
           delete $1;
          }
        ;

y_Measurands_MeasurandsType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurandsSTART y_MeasurandsType MeasurandsEND
          {$$ = $2;}
        ;

y_MeasureActionGroupFunctionEnumType :
          DATASTRING
          {$$ = new MeasureActionGroupFunctionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad MeasureActionGroupFunctionEnumType value");
          }
        ;

y_MeasureActionGroupFunctionEnum_MeasureActionGroupFunctionEnumType :
          MeasureActionGroupFunctionEnumSTART ENDITEM {yyReadData = 1;}
          y_MeasureActionGroupFunctionEnumType
          MeasureActionGroupFunctionEnumEND
          {$$ = $4;}
        ;

y_MeasureActionGroupFunctionType :
          ENDITEM y_MeasureActionGroupFunctionTypeChoicePair
          {$$ = new MeasureActionGroupFunctionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MeasureActionGroupFunctionTypeChoicePair :
          y_MeasureActionGroupFunctionEnum_MeasureActionGroupFunctionEnumType
          {$$ = new MeasureActionGroupFunctionTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasureActionGroupFunctionTypeType = MeasureActionGroupFunctionTypeChoicePair::MeasureActionGroupFunctionEnumE;
           $$->MeasureActionGroupFunctionTypeValue.MeasureActionGroupFunctionEnum = $1;
          }
        | y_OtherMeasureActionGroupFunction_XmlString
          {$$ = new MeasureActionGroupFunctionTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasureActionGroupFunctionTypeType = MeasureActionGroupFunctionTypeChoicePair::OtherMeasureActionGroupFunctionE;
           $$->MeasureActionGroupFunctionTypeValue.OtherMeasureActionGroupFunction = $1;
          }
        ;

y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0 :
          /* empty */
          {$$ = 0;}
        | MeasureActionGroupFunctionSTART y_MeasureActionGroupFunctionType
          MeasureActionGroupFunctionEND
          {$$ = $2;}
        ;

y_MeasureEvaluateAllActionType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_PreferredActionMethodId_QIFReferenceType_0
          y_AlternativeActionMethodIds_ArrayReferenceType_0
          y_PreferredResourceIds_ArrayReferenceType_0
          {$$ = new MeasureEvaluateAllActionType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_MeasureEvaluateAll_MeasureEvaluateAllActionType :
          MeasureEvaluateAllSTART ENDWHOLEITEM
          {$$ = new MeasureEvaluateAllActionType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "MeasureEvaluateAll";
          }
        | MeasureEvaluateAllSTART y_MeasureEvaluateAllActionType
          MeasureEvaluateAllEND
          {$$ = $2;
           $$->printElement = "MeasureEvaluateAll";
          }
        ;

y_MeasureEvaluateSpecifiedActionType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_PreferredActionMethodId_QIFReferenceType_0
          y_AlternativeActionMethodIds_ArrayReferenceType_0
          y_PreferredResourceIds_ArrayReferenceType_0
          y_CharacteristicItemIds_ArrayReferenceType
          {$$ = new MeasureEvaluateSpecifiedActionType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_MeasureEvaluateSpecified_MeasureEvaluateSpecifiedActionType :
          MeasureEvaluateSpecifiedSTART
          y_MeasureEvaluateSpecifiedActionType MeasureEvaluateSpecifiedEND
          {$$ = $2;
           $$->printElement = "MeasureEvaluateSpecified";
          }
        ;

y_MeasurePointId_PointSetReferenceSingleType :
          MeasurePointIdSTART y_PointSetReferenceSingleType
          MeasurePointIdEND
          {$$ = $2;}
        ;

y_MeasurePointNominalIds_ListQIFReferenceFullType :
          MeasurePointNominalIdsSTART y_ListQIFReferenceFullType
          MeasurePointNominalIdsEND
          {$$ = $2;
           $$->printElement = "MeasurePointNominalIds";
          }
        ;

y_MeasurePointNominalType :
          y_LiztAttributePair ENDITEM y_Point_PointType
          y_Normal_UnitVectorType_0
          y_MeasurementDeviceId_QIFReferenceType_0
          y_SensorId_QIFReferenceType_0 y_TipId_QIFReferenceType_0
          {$$ = new MeasurePointNominalType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurePointNominalType attributes");
             }
           delete $1;
          }
        ;

y_MeasurePoint_MeasurePointNominalType :
          MeasurePointSTART y_MeasurePointNominalType MeasurePointEND
          {$$ = $2;
           $$->printElement = "MeasurePoint";
          }
        ;

y_MeasureSpecifiedFeaturesActionType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_PreferredActionMethodId_QIFReferenceType_0
          y_AlternativeActionMethodIds_ArrayReferenceType_0
          y_PreferredResourceIds_ArrayReferenceType_0
          y_FeatureItemIds_ArrayReferenceType
          {$$ = new MeasureSpecifiedFeaturesActionType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_MeasureSpecifiedFeatures_MeasureSpecifiedFeaturesActionType :
          MeasureSpecifiedFeaturesSTART
          y_MeasureSpecifiedFeaturesActionType MeasureSpecifiedFeaturesEND
          {$$ = $2;
           $$->printElement = "MeasureSpecifiedFeatures";
          }
        ;

y_MeasureSpecifiedMeasurandsActionType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_PreferredActionMethodId_QIFReferenceType_0
          y_AlternativeActionMethodIds_ArrayReferenceType_0
          y_PreferredResourceIds_ArrayReferenceType_0
          y_MeasurandIds_ArrayReferenceType
          {$$ = new MeasureSpecifiedMeasurandsActionType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_MeasureSpecifiedMeasurands_MeasureSpecifiedMeasurandsActionType :
          MeasureSpecifiedMeasurandsSTART
          y_MeasureSpecifiedMeasurandsActionType
          MeasureSpecifiedMeasurandsEND
          {$$ = $2;
           $$->printElement = "MeasureSpecifiedMeasurands";
          }
        ;

y_MeasuredAngularValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredAngularValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredAngularValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredAngularValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredAreaValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredAreaValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredAreaValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredAreaValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredAxisType :
          ENDITEM y_AxisPoint_MeasuredPointType
          y_Direction_MeasuredUnitVectorType
          {$$ = new MeasuredAxisType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MeasuredCharacteristicsType :
          ENDITEM
          y_CharacteristicMeasurements_CharacteristicMeasurementsType
          y_CharacteristicGroupStatuses_CharacteristicGroupStatusesType_0
          {$$ = new MeasuredCharacteristicsType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MeasuredCharacteristics_MeasuredCharacteristicsType_0 :
          /* empty */
          {$$ = 0;}
        | MeasuredCharacteristicsSTART y_MeasuredCharacteristicsType
          MeasuredCharacteristicsEND
          {$$ = $2;}
        ;

y_MeasuredDatumFeatureType :
          ENDITEM y_FeatureNominalId_QIFReferenceFullType
          y_MaterialModifier_MaterialModifierEnumType
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          {$$ = new MeasuredDatumFeatureType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_MeasuredDatumFeature_MeasuredDatumFeatureType :
          MeasuredDatumFeatureSTART y_MeasuredDatumFeatureType
          MeasuredDatumFeatureEND
          {$$ = $2;
           $$->printElement = "MeasuredDatumFeature";
          }
        ;

y_MeasuredDecimalType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredDecimalType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredDecimalType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredDecimalType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredEndRadiusType :
          ENDITEM y_EndRadius_MeasuredLinearValueType
          y_Expanded_XmlBoolean_0
          {$$ = new MeasuredEndRadiusType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MeasuredFeatureType :
          ENDITEM y_PointList_PointListType_0
          {$$ = new MeasuredFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MeasuredFeatures_FeatureMeasurementsType_0 :
          /* empty */
          {$$ = 0;}
        | MeasuredFeaturesSTART y_FeatureMeasurementsType
          MeasuredFeaturesEND
          {$$ = $2;}
        ;

y_MeasuredForceValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredForceValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredForceValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredForceValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredIds_StatsArrayIdType :
          MeasuredIdsSTART y_StatsArrayIdType MeasuredIdsEND
          {$$ = $2;}
        ;

y_MeasuredLinearValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredLinearValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredLinearValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredLinearValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredMassValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredMassValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredMassValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredMassValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredPlaneType :
          ENDITEM y_Point_MeasuredPointType y_Normal_MeasuredUnitVectorType
          {$$ = new MeasuredPlaneType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MeasuredPointAndVectorType :
          ENDITEM y_StartPoint_MeasuredPointType
          y_Vector_MeasuredUnitVectorType
          {$$ = new MeasuredPointAndVectorType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MeasuredPointIds_StatsArrayIdType :
          MeasuredPointIdsSTART y_StatsArrayIdType MeasuredPointIdsEND
          {$$ = $2;}
        ;

y_MeasuredPointSe_1105_MeasuredPointSe_1105_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1105_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1105_Type :
          y_MeasuredPointSe_1105_TypeChoicePair
          {$$ = new MeasuredPointSe_1105_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1105_TypeChoicePair :
          y_CoordinateSystemId_QIFReferenceFullType
          {$$ = new MeasuredPointSe_1105_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1105_TypeType = MeasuredPointSe_1105_TypeChoicePair::CoordinateSystemIdE;
           $$->MeasuredPointSe_1105_TypeValue.CoordinateSystemId = $1;
          }
        | y_TranformId_QIFReferenceType
          {$$ = new MeasuredPointSe_1105_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1105_TypeType = MeasuredPointSe_1105_TypeChoicePair::TranformIdE;
           $$->MeasuredPointSe_1105_TypeValue.TranformId = $1;
          }
        ;

y_MeasuredPointSe_1106_MeasuredPointSe_1106_Type :
          y_MeasuredPointSe_1106_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1106_Type :
          y_MeasuredPointSe_1106_TypeChoicePair
          {$$ = new MeasuredPointSe_1106_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1106_TypeChoicePair :
          y_BinaryPoints_ArrayBinaryType
          {$$ = new MeasuredPointSe_1106_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1106_TypeType = MeasuredPointSe_1106_TypeChoicePair::BinaryPointsE;
           $$->MeasuredPointSe_1106_TypeValue.BinaryPoints = $1;
          }
        | y_Points_ListDoubleType
          {$$ = new MeasuredPointSe_1106_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1106_TypeType = MeasuredPointSe_1106_TypeChoicePair::PointsE;
           $$->MeasuredPointSe_1106_TypeValue.Points = $1;
          }
        ;

y_MeasuredPointSe_1107_MeasuredPointSe_1107_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1107_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1107_Type :
          y_MeasuredPointSe_1107_TypeChoicePair
          {$$ = new MeasuredPointSe_1107_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1107_TypeChoicePair :
          y_BinaryNormals_ArrayBinaryType
          {$$ = new MeasuredPointSe_1107_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1107_TypeType = MeasuredPointSe_1107_TypeChoicePair::BinaryNormalsE;
           $$->MeasuredPointSe_1107_TypeValue.BinaryNormals = $1;
          }
        | y_Normals_ListDoubleType
          {$$ = new MeasuredPointSe_1107_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1107_TypeType = MeasuredPointSe_1107_TypeChoicePair::NormalsE;
           $$->MeasuredPointSe_1107_TypeValue.Normals = $1;
          }
        ;

y_MeasuredPointSe_1108_MeasuredPointSe_1108_Type :
          y_MeasuredPointSe_1108_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1108_Type :
          y_MeasuredPointSe_1108_TypeChoicePair
          {$$ = new MeasuredPointSe_1108_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1108_TypeChoicePair :
          y_BinaryCompensated_ArrayBinaryType
          {$$ = new MeasuredPointSe_1108_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1108_TypeType = MeasuredPointSe_1108_TypeChoicePair::BinaryCompensatedE;
           $$->MeasuredPointSe_1108_TypeValue.BinaryCompensated = $1;
          }
        | y_Compensated_XmlBoolean
          {$$ = new MeasuredPointSe_1108_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1108_TypeType = MeasuredPointSe_1108_TypeChoicePair::CompensatedE;
           $$->MeasuredPointSe_1108_TypeValue.Compensated = $1;
          }
        | y_Compensations_ListBooleanType
          {$$ = new MeasuredPointSe_1108_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1108_TypeType = MeasuredPointSe_1108_TypeChoicePair::CompensationsE;
           $$->MeasuredPointSe_1108_TypeValue.Compensations = $1;
          }
        ;

y_MeasuredPointSe_1109_MeasuredPointSe_1109_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1109_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1109_Type :
          y_MeasuredPointSe_1109_TypeChoicePair
          {$$ = new MeasuredPointSe_1109_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1109_TypeChoicePair :
          y_BinaryProbeRadii_ArrayBinaryType
          {$$ = new MeasuredPointSe_1109_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1109_TypeType = MeasuredPointSe_1109_TypeChoicePair::BinaryProbeRadiiE;
           $$->MeasuredPointSe_1109_TypeValue.BinaryProbeRadii = $1;
          }
        | y_ProbeRadii_ListDoubleType
          {$$ = new MeasuredPointSe_1109_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1109_TypeType = MeasuredPointSe_1109_TypeChoicePair::ProbeRadiiE;
           $$->MeasuredPointSe_1109_TypeValue.ProbeRadii = $1;
          }
        | y_ProbeRadius_XmlDecimal
          {$$ = new MeasuredPointSe_1109_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1109_TypeType = MeasuredPointSe_1109_TypeChoicePair::ProbeRadiusE;
           $$->MeasuredPointSe_1109_TypeValue.ProbeRadius = $1;
          }
        ;

y_MeasuredPointSe_1110_MeasuredPointSe_1110_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1110_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1110_Type :
          y_MeasuredPointSe_1110_TypeChoicePair
          {$$ = new MeasuredPointSe_1110_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1110_TypeChoicePair :
          y_BinarySensorIds_ArrayBinaryQIFReferenceType
          {$$ = new MeasuredPointSe_1110_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1110_TypeType = MeasuredPointSe_1110_TypeChoicePair::BinarySensorIdsE;
           $$->MeasuredPointSe_1110_TypeValue.BinarySensorIds = $1;
          }
        | y_SensorId_QIFReferenceType
          {$$ = new MeasuredPointSe_1110_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1110_TypeType = MeasuredPointSe_1110_TypeChoicePair::SensorIdE;
           $$->MeasuredPointSe_1110_TypeValue.SensorId = $1;
          }
        | y_SensorIds_ListQIFReferenceType
          {$$ = new MeasuredPointSe_1110_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1110_TypeType = MeasuredPointSe_1110_TypeChoicePair::SensorIdsE;
           $$->MeasuredPointSe_1110_TypeValue.SensorIds = $1;
          }
        ;

y_MeasuredPointSe_1111_MeasuredPointSe_1111_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1111_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1111_Type :
          y_MeasuredPointSe_1111_TypeChoicePair
          {$$ = new MeasuredPointSe_1111_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1111_TypeChoicePair :
          y_BinaryTipIds_ArrayBinaryQIFReferenceType
          {$$ = new MeasuredPointSe_1111_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1111_TypeType = MeasuredPointSe_1111_TypeChoicePair::BinaryTipIdsE;
           $$->MeasuredPointSe_1111_TypeValue.BinaryTipIds = $1;
          }
        | y_TipId_QIFReferenceType
          {$$ = new MeasuredPointSe_1111_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1111_TypeType = MeasuredPointSe_1111_TypeChoicePair::TipIdE;
           $$->MeasuredPointSe_1111_TypeValue.TipId = $1;
          }
        | y_TipIds_ListQIFReferenceType
          {$$ = new MeasuredPointSe_1111_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1111_TypeType = MeasuredPointSe_1111_TypeChoicePair::TipIdsE;
           $$->MeasuredPointSe_1111_TypeValue.TipIds = $1;
          }
        ;

y_MeasuredPointSe_1112_MeasuredPointSe_1112_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1112_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1112_Type :
          y_MeasuredPointSe_1112_TypeChoicePair
          {$$ = new MeasuredPointSe_1112_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1112_TypeChoicePair :
          y_BinaryMeasurePointNominalIds_ArrayBinaryQIFReferenceFullType
          {$$ = new MeasuredPointSe_1112_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1112_TypeType = MeasuredPointSe_1112_TypeChoicePair::BinaryMeasurePointNominalIdsE;
           $$->MeasuredPointSe_1112_TypeValue.BinaryMeasurePointNominalIds = $1;
          }
        | y_MeasurePointNominalIds_ListQIFReferenceFullType
          {$$ = new MeasuredPointSe_1112_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1112_TypeType = MeasuredPointSe_1112_TypeChoicePair::MeasurePointNominalIdsE;
           $$->MeasuredPointSe_1112_TypeValue.MeasurePointNominalIds = $1;
          }
        ;

y_MeasuredPointSe_1113_MeasuredPointSe_1113_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1113_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1113_Type :
          y_MeasuredPointSe_1113_TypeChoicePair
          {$$ = new MeasuredPointSe_1113_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1113_TypeChoicePair :
          y_TimeStamp_XmlDateTime
          {$$ = new MeasuredPointSe_1113_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1113_TypeType = MeasuredPointSe_1113_TypeChoicePair::TimeStampE;
           $$->MeasuredPointSe_1113_TypeValue.TimeStamp = $1;
          }
        | y_TimeStamps_ListDateTimeType
          {$$ = new MeasuredPointSe_1113_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1113_TypeType = MeasuredPointSe_1113_TypeChoicePair::TimeStampsE;
           $$->MeasuredPointSe_1113_TypeValue.TimeStamps = $1;
          }
        ;

y_MeasuredPointSe_1114_MeasuredPointSe_1114_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1114_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1114_Type :
          y_MeasuredPointSe_1114_TypeChoicePair
          {$$ = new MeasuredPointSe_1114_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1114_TypeChoicePair :
          y_BinaryQuality_ArrayBinaryType
          {$$ = new MeasuredPointSe_1114_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1114_TypeType = MeasuredPointSe_1114_TypeChoicePair::BinaryQualityE;
           $$->MeasuredPointSe_1114_TypeValue.BinaryQuality = $1;
          }
        | y_Quality_ListDoubleType
          {$$ = new MeasuredPointSe_1114_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1114_TypeType = MeasuredPointSe_1114_TypeChoicePair::QualityE;
           $$->MeasuredPointSe_1114_TypeValue.Quality = $1;
          }
        ;

y_MeasuredPointSe_1115_MeasuredPointSe_1115_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1115_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1115_Type :
          y_MeasuredPointSe_1115_TypeChoicePair
          {$$ = new MeasuredPointSe_1115_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1115_TypeChoicePair :
          y_BinaryDeviations_ArrayBinaryType
          {$$ = new MeasuredPointSe_1115_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1115_TypeType = MeasuredPointSe_1115_TypeChoicePair::BinaryDeviationsE;
           $$->MeasuredPointSe_1115_TypeValue.BinaryDeviations = $1;
          }
        | y_Deviations_ListDoubleType
          {$$ = new MeasuredPointSe_1115_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1115_TypeType = MeasuredPointSe_1115_TypeChoicePair::DeviationsE;
           $$->MeasuredPointSe_1115_TypeValue.Deviations = $1;
          }
        ;

y_MeasuredPointSe_1116_MeasuredPointSe_1116_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1116_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1116_Type :
          y_MeasuredPointSe_1116_TypeChoicePair
          {$$ = new MeasuredPointSe_1116_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1116_TypeChoicePair :
          y_BinaryColors_ArrayBinaryType
          {$$ = new MeasuredPointSe_1116_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1116_TypeType = MeasuredPointSe_1116_TypeChoicePair::BinaryColorsE;
           $$->MeasuredPointSe_1116_TypeValue.BinaryColors = $1;
          }
        | y_Colors_ListIntType
          {$$ = new MeasuredPointSe_1116_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1116_TypeType = MeasuredPointSe_1116_TypeChoicePair::ColorsE;
           $$->MeasuredPointSe_1116_TypeValue.Colors = $1;
          }
        ;

y_MeasuredPointSe_1117_MeasuredPointSe_1117_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasuredPointSe_1117_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1117_Type :
          y_NumberOfFacets_NaturalType
          y_MeasuredPointSe_1125_MeasuredPointSe_1125_Type
          {$$ = new MeasuredPointSe_1117_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MeasuredPointSe_1125_MeasuredPointSe_1125_Type :
          y_MeasuredPointSe_1125_Type
          {$$ = $1;}
        ;

y_MeasuredPointSe_1125_Type :
          y_MeasuredPointSe_1125_TypeChoicePair
          {$$ = new MeasuredPointSe_1125_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasuredPointSe_1125_TypeChoicePair :
          y_BinaryPointIndices_ArrayBinaryType
          {$$ = new MeasuredPointSe_1125_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1125_TypeType = MeasuredPointSe_1125_TypeChoicePair::BinaryPointIndicesE;
           $$->MeasuredPointSe_1125_TypeValue.BinaryPointIndices = $1;
          }
        | y_PointIndices_ArrayI3Type
          {$$ = new MeasuredPointSe_1125_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasuredPointSe_1125_TypeType = MeasuredPointSe_1125_TypeChoicePair::PointIndicesE;
           $$->MeasuredPointSe_1125_TypeValue.PointIndices = $1;
          }
        ;

y_MeasuredPointSetType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Units_OtherUnitsType_0
          y_MeasuredPointSe_1105_MeasuredPointSe_1105_Type_0
          y_MeasuredPointSe_1106_MeasuredPointSe_1106_Type
          y_MeasuredPointSe_1107_MeasuredPointSe_1107_Type_0
          y_MeasuredPointSe_1108_MeasuredPointSe_1108_Type
          y_MeasuredPointSe_1109_MeasuredPointSe_1109_Type_0
          y_MeasurementDeviceId_QIFReferenceType_0
          y_MeasuredPointSe_1110_MeasuredPointSe_1110_Type_0
          y_MeasuredPointSe_1111_MeasuredPointSe_1111_Type_0
          y_MeasuredPointSe_1112_MeasuredPointSe_1112_Type_0
          y_MeasuredPointSe_1113_MeasuredPointSe_1113_Type_0
          y_MeasuredPointSe_1114_MeasuredPointSe_1114_Type_0
          y_MeasuredPointSe_1115_MeasuredPointSe_1115_Type_0
          y_MeasuredPointSe_1116_MeasuredPointSe_1116_Type_0
          y_MeasuredPointSe_1117_MeasuredPointSe_1117_Type_0
          {$$ = new MeasuredPointSetType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredPointSetType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredPointSet_MeasuredPointSetType :
          MeasuredPointSetSTART y_MeasuredPointSetType MeasuredPointSetEND
          {$$ = $2;}
        ;

y_MeasuredPointSetsType :
          y_LiztAttributePair ENDITEM
          y_LiztMeasuredPointSet_MeasuredPointSetType_1_u
          {$$ = new MeasuredPointSetsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredPointSetsType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredPointSets_MeasuredPointSetsType_0 :
          /* empty */
          {$$ = 0;}
        | MeasuredPointSetsSTART y_MeasuredPointSetsType
          MeasuredPointSetsEND
          {$$ = $2;}
        ;

y_MeasuredPointType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new MeasuredPointType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new MeasuredPointType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredPointType attributes");
             }
           delete $1;
          }
        | y_MeasuredPointType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MeasuredPressureValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredPressureValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredPressureValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredPressureValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredSpeedValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredSpeedValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredSpeedValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredSpeedValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredTemperatureValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredTemperatureValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredTemperatureValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredTemperatureValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredTimeValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredTimeValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredTimeValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredTimeValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredUnitVectorType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new MeasuredUnitVectorType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new MeasuredUnitVectorType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredUnitVectorType attributes");
             }
           delete $1;
          }
        | y_MeasuredUnitVectorType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MeasuredUserDefinedUnitValueType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new MeasuredUserDefinedUnitValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasuredUserDefinedUnitValueType attributes");
             }
           delete $1;
          }
        ;

y_MeasuredValues_StatsValuesType :
          MeasuredValuesSTART y_StatsValuesType MeasuredValuesEND
          {$$ = $2;}
        ;

y_MeasuredZoneAxisType :
          ENDITEM y_AxisPoint_MeasuredPointType
          y_Direction_MeasuredUnitVectorType
          y_Length_MeasuredLinearValueType
          {$$ = new MeasuredZoneAxisType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_MeasuredZoneRadiiType :
          ENDITEM y_MinRadius_MeasuredLinearValueType
          y_MaxRadius_MeasuredLinearValueType
          {$$ = new MeasuredZoneRadiiType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Measured_MeasuredFeatureType :
          MeasuredSTART ENDWHOLEITEM
          {$$ = new MeasuredFeatureType();
           yyUnrefMap[$$] = $$;
          }
        | MeasuredSTART y_MeasuredFeatureType MeasuredEND
          {$$ = $2;}
        ;

y_MeasurementDeviceId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementDeviceIdSTART y_QIFReferenceType
          MeasurementDeviceIdEND
          {$$ = $2;}
        ;

y_MeasurementDeviceIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementDeviceIdsSTART y_ArrayReferenceFullType
          MeasurementDeviceIdsEND
          {$$ = $2;}
        ;

y_MeasurementDeviceIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementDeviceIdsSTART y_ArrayReferenceType
          MeasurementDeviceIdsEND
          {$$ = $2;}
        ;

y_MeasurementDeviceScaleType :
          ENDITEM y_ScaleMaterial_XmlString_0
          y_ScaleCoefficientOfExpansion_XmlDecimal_0
          y_ScaleCoefficientOfExpansionUncertainty_XmlDecimal_0
          y_TypeOfScale_TypeOfScaleType_0
          y_ScaleResolution_LinearValueType_0
          y_ScaleReference_ScaleReferenceEnumType_0
          {$$ = new MeasurementDeviceScaleType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_MeasurementDeviceType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          {$$ = new MeasurementDeviceType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurementDeviceType attributes");
             }
           delete $1;
          }
        ;

y_MeasurementDevice_MeasurementDeviceType :
          MeasurementDeviceSTART y_MeasurementDeviceType
          MeasurementDeviceEND
          {$$ = $2;
           $$->printElement = "MeasurementDevice";
          }
        ;

y_MeasurementDevice_substituteType :
          y_AACMM_AACMMType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Autocollimator_AutocollimatorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CMM_CMMType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CaliperDial_CaliperDialType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CaliperDigital_CaliperDigitalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Caliper_CaliperType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CartesianCMM_CartesianCMMType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ComputedTomography_ComputedTomographyType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GageDevice_GageDeviceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LaserRadar_LaserRadarType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LaserTracker_LaserTrackerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LightPenCMM_LightPenCMMType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ManualMeasurementDevice_ManualMeasurementDeviceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MeasurementDevice_MeasurementDeviceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MicrometerAnalog_MicrometerAnalogType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MicrometerDigital_MicrometerDigitalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Micrometer_MicrometerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Microscope_MicroscopeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MultipleCarriageCartesianCMM_MultipleCarriageCartesianCMMType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OpticalComparator_OpticalComparatorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ParallelLinkCMM_ParallelLinkCMMType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SineBar_SineBarType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Theodolite_TheodoliteType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UniversalLengthMeasuring_UniversalLengthMeasuringType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasurementDevicesType :
          y_LiztAttributePair ENDITEM
          y_LiztMeasurementDevice_substituteType_1_u
          {$$ = new MeasurementDevicesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurementDevicesType attributes");
             }
           delete $1;
          }
        ;

y_MeasurementDevices_MeasurementDevicesType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementDevicesSTART y_MeasurementDevicesType
          MeasurementDevicesEND
          {$$ = $2;}
        ;

y_MeasurementDirectiveEnumType :
          DATASTRING
          {$$ = new MeasurementDirectiveEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad MeasurementDirectiveEnumType value");
          }
        ;

y_MeasurementDirectiveEnum_MeasurementDirectiveEnumType :
          MeasurementDirectiveEnumSTART ENDITEM {yyReadData = 1;}
          y_MeasurementDirectiveEnumType MeasurementDirectiveEnumEND
          {$$ = $4;}
        ;

y_MeasurementDirectiveType :
          ENDITEM y_MeasurementDirectiveTypeChoicePair
          {$$ = new MeasurementDirectiveType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MeasurementDirectiveTypeChoicePair :
          y_MeasurementDirectiveEnum_MeasurementDirectiveEnumType
          {$$ = new MeasurementDirectiveTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasurementDirectiveTypeType = MeasurementDirectiveTypeChoicePair::MeasurementDirectiveEnumE;
           $$->MeasurementDirectiveTypeValue.MeasurementDirectiveEnum = $1;
          }
        | y_OtherMeasurementDirective_XmlString
          {$$ = new MeasurementDirectiveTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasurementDirectiveTypeType = MeasurementDirectiveTypeChoicePair::OtherMeasurementDirectiveE;
           $$->MeasurementDirectiveTypeValue.OtherMeasurementDirective = $1;
          }
        ;

y_MeasurementDirective_MeasurementDirectiveType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementDirectiveSTART y_MeasurementDirectiveType
          MeasurementDirectiveEND
          {$$ = $2;}
        ;

y_MeasurementFieldSize_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementFieldSizeSTART y_LinearValueType
          MeasurementFieldSizeEND
          {$$ = $2;}
        ;

y_MeasurementLaser_LaserType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementLaserSTART y_LaserType MeasurementLaserEND
          {$$ = $2;
           $$->printElement = "MeasurementLaser";
          }
        ;

y_MeasurementObjectMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementObjectMaterialSTART ENDITEM {yyReadData = 1;}
          y_XmlString MeasurementObjectMaterialEND
          {$$ = $4;}
        ;

y_MeasurementOffsetAlignmentOperationType :
          y_LiztAttributePair ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0
          y_LiztOrigin_MeasurementOriginOffsetType_1_3_Check
          {$$ = new MeasurementOffsetAlignmentOperationType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurementOffsetAlignmentOperationType attributes");
             }
           delete $1;
          }
        ;

y_MeasurementOffset_MeasurementOffsetAlignmentOperationType :
          MeasurementOffsetSTART y_MeasurementOffsetAlignmentOperationType
          MeasurementOffsetEND
          {$$ = $2;
           $$->printElement = "MeasurementOffset";
          }
        ;

y_MeasurementOriginOffsetType :
          ENDITEM y_OriginEntity_AlignmentFeatureType
          y_OriginDirection_UnitVectorType
          {$$ = new MeasurementOriginOffsetType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_MeasurementRate_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementRateSTART y_UserDefinedUnitValueType
          MeasurementRateEND
          {$$ = $2;}
        ;

y_MeasurementReso_1241_MeasurementReso_1241_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeasurementReso_1241_Type
          {$$ = $1;}
        ;

y_MeasurementReso_1241_Type :
          y_MeasurementReso_1241_TypeChoicePair
          {$$ = new MeasurementReso_1241_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeasurementReso_1241_TypeChoicePair :
          y_LocationId_QIFReferenceType
          {$$ = new MeasurementReso_1241_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasurementReso_1241_TypeType = MeasurementReso_1241_TypeChoicePair::LocationIdE;
           $$->MeasurementReso_1241_TypeValue.LocationId = $1;
          }
        | y_Location_LocationType
          {$$ = new MeasurementReso_1241_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeasurementReso_1241_TypeType = MeasurementReso_1241_TypeChoicePair::LocationE;
           $$->MeasurementReso_1241_TypeValue.Location = $1;
          }
        ;

y_MeasurementResourcesCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementResourcesCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt MeasurementResourcesCountEND
          {$$ = $4;}
        ;

y_MeasurementResourcesType :
          ENDITEM y_Version_VersionType_0 y_Fixtures_FixturesType_0
          y_MeasurementRooms_MeasurementRoomsType_0
          y_MeasurementDevices_MeasurementDevicesType_0
          y_DetachableSensors_DetachableSensorsType_0 y_Tools_ToolsType_0
          {$$ = new MeasurementResourcesType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_MeasurementResources_MeasurementResourcesType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementResourcesSTART ENDWHOLEITEM
          {$$ = new MeasurementResourcesType();
           yyUnrefMap[$$] = $$;
          }
        | MeasurementResourcesSTART y_MeasurementResourcesType
          MeasurementResourcesEND
          {$$ = $2;}
        ;

y_MeasurementResultsSetType :
          y_LiztAttributePair ENDITEM
          y_LiztMeasurementResults_MeasurementResultsType_1_u
          {$$ = new MeasurementResultsSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurementResultsSetType attributes");
             }
           delete $1;
          }
        ;

y_MeasurementResultsSet_MeasurementResultsSetType :
          MeasurementResultsSetSTART y_MeasurementResultsSetType
          MeasurementResultsSetEND
          {$$ = $2;}
        ;

y_MeasurementResultsType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_ThisResultsInstanceQPId_QPIdType_0
          y_ExternalFileReferences_ExternalFileReferencesType_0
          y_MeasuredFeatures_FeatureMeasurementsType_0
          y_MeasuredPointSets_MeasuredPointSetsType_0
          y_MeasuredCharacteristics_MeasuredCharacteristicsType_0
          y_ActualTransforms_TransformListType_0
          y_CoordinateSystemActualTransformAssociations_CoordinateSystemActualTransformAssociationsType_0
          y_InspectionStatus_InspectionStatusType
          y_ActualComponentIds_ArrayReferenceType_0
          {$$ = new MeasurementResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurementResultsType attributes");
             }
           delete $1;
          }
        ;

y_MeasurementResults_MeasurementResultsType :
          MeasurementResultsSTART y_MeasurementResultsType
          MeasurementResultsEND
          {$$ = $2;}
        ;

y_MeasurementRoomType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_TemperatureRangeMin_TemperatureType
          y_TemperatureRangeMax_TemperatureType
          y_TemperatureControlMin_TemperatureType
          y_TemperatureControlMax_TemperatureType
          y_RelativeHumidityRangeMin_FractionType
          y_RelativeHumidityRangeMax_FractionType
          y_RelativeHumidityControlMin_FractionType
          y_RelativeHumidityControlMax_FractionType
          {$$ = new MeasurementRoomType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurementRoomType attributes");
             }
           delete $1;
          }
        ;

y_MeasurementRoom_MeasurementRoomType :
          MeasurementRoomSTART y_MeasurementRoomType MeasurementRoomEND
          {$$ = $2;
           $$->printElement = "MeasurementRoom";
          }
        ;

y_MeasurementRoomsType :
          y_LiztAttributePair ENDITEM
          y_LiztMeasurementRoom_MeasurementRoomType_1_u
          {$$ = new MeasurementRoomsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeasurementRoomsType attributes");
             }
           delete $1;
          }
        ;

y_MeasurementRooms_MeasurementRoomsType_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementRoomsSTART y_MeasurementRoomsType MeasurementRoomsEND
          {$$ = $2;}
        ;

y_MeasurementsPlanPresent_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementsPlanPresentSTART ENDITEM {yyReadData = 1;}
          y_XmlBoolean MeasurementsPlanPresentEND
          {$$ = $4;}
        ;

y_MeasurementsResultsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | MeasurementsResultsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt MeasurementsResultsCountEND
          {$$ = $4;}
        ;

y_MeasuringAccuracy_AngularErrorType_0 :
          /* empty */
          {$$ = 0;}
        | MeasuringAccuracySTART y_AngularErrorType MeasuringAccuracyEND
          {$$ = $2;}
        ;

y_MeasuringForce_ForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | MeasuringForceSTART y_ForceValueType MeasuringForceEND
          {$$ = $2;}
        ;

y_MedianFeature_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | MedianFeatureSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          MedianFeatureEND
          {$$ = $4;}
        ;

y_MeshTriangleCor_1213_MeshTriangleCor_1213_Type :
          y_MeshTriangleCor_1213_Type
          {$$ = $1;}
        ;

y_MeshTriangleCor_1213_Type :
          y_MeshTriangleCor_1213_TypeChoicePair
          {$$ = new MeshTriangleCor_1213_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeshTriangleCor_1213_TypeChoicePair :
          y_TrianglesBinary_ArrayBinaryType
          {$$ = new MeshTriangleCor_1213_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1213_TypeType = MeshTriangleCor_1213_TypeChoicePair::TrianglesBinaryE;
           $$->MeshTriangleCor_1213_TypeValue.TrianglesBinary = $1;
          }
        | y_Triangles_ArrayI3Type
          {$$ = new MeshTriangleCor_1213_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1213_TypeType = MeshTriangleCor_1213_TypeChoicePair::TrianglesE;
           $$->MeshTriangleCor_1213_TypeValue.Triangles = $1;
          }
        ;

y_MeshTriangleCor_1214_MeshTriangleCor_1214_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeshTriangleCor_1214_Type
          {$$ = $1;}
        ;

y_MeshTriangleCor_1214_Type :
          y_MeshTriangleCor_1214_TypeChoicePair
          {$$ = new MeshTriangleCor_1214_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeshTriangleCor_1214_TypeChoicePair :
          y_NeighboursBinary_ArrayBinaryType
          {$$ = new MeshTriangleCor_1214_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1214_TypeType = MeshTriangleCor_1214_TypeChoicePair::NeighboursBinaryE;
           $$->MeshTriangleCor_1214_TypeValue.NeighboursBinary = $1;
          }
        | y_Neighbours_ArrayI3Type
          {$$ = new MeshTriangleCor_1214_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1214_TypeType = MeshTriangleCor_1214_TypeChoicePair::NeighboursE;
           $$->MeshTriangleCor_1214_TypeValue.Neighbours = $1;
          }
        ;

y_MeshTriangleCor_1215_MeshTriangleCor_1215_Type :
          y_MeshTriangleCor_1215_Type
          {$$ = $1;}
        ;

y_MeshTriangleCor_1215_Type :
          y_MeshTriangleCor_1215_TypeChoicePair
          {$$ = new MeshTriangleCor_1215_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeshTriangleCor_1215_TypeChoicePair :
          y_VerticesBinary_ArrayBinaryType
          {$$ = new MeshTriangleCor_1215_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1215_TypeType = MeshTriangleCor_1215_TypeChoicePair::VerticesBinaryE;
           $$->MeshTriangleCor_1215_TypeValue.VerticesBinary = $1;
          }
        | y_Vertices_ArrayPointType
          {$$ = new MeshTriangleCor_1215_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1215_TypeType = MeshTriangleCor_1215_TypeChoicePair::VerticesE;
           $$->MeshTriangleCor_1215_TypeValue.Vertices = $1;
          }
        ;

y_MeshTriangleCor_1216_MeshTriangleCor_1216_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeshTriangleCor_1216_Type
          {$$ = $1;}
        ;

y_MeshTriangleCor_1216_Type :
          y_MeshTriangleCor_1216_TypeChoicePair
          {$$ = new MeshTriangleCor_1216_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeshTriangleCor_1216_TypeChoicePair :
          y_NormalsBinary_ArrayBinaryType
          {$$ = new MeshTriangleCor_1216_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1216_TypeType = MeshTriangleCor_1216_TypeChoicePair::NormalsBinaryE;
           $$->MeshTriangleCor_1216_TypeValue.NormalsBinary = $1;
          }
        | y_Normals_ArrayUnitVectorType
          {$$ = new MeshTriangleCor_1216_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleCor_1216_TypeType = MeshTriangleCor_1216_TypeChoicePair::NormalsE;
           $$->MeshTriangleCor_1216_TypeValue.Normals = $1;
          }
        ;

y_MeshTriangleCoreType :
          ENDITEM y_MeshTriangleCor_1213_MeshTriangleCor_1213_Type
          y_MeshTriangleCor_1214_MeshTriangleCor_1214_Type_0
          y_MeshTriangleCor_1215_MeshTriangleCor_1215_Type
          y_MeshTriangleCor_1216_MeshTriangleCor_1216_Type_0
          {$$ = new MeshTriangleCoreType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_MeshTriangleCore_MeshTriangleCoreType :
          MeshTriangleCoreSTART y_MeshTriangleCoreType MeshTriangleCoreEND
          {$$ = $2;}
        ;

y_MeshTriangleTyp_1217_MeshTriangleTyp_1217_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_MeshTriangleTyp_1217_Type
          {$$ = $1;}
        ;

y_MeshTriangleTyp_1217_Type :
          y_MeshTriangleTyp_1217_TypeChoicePair
          {$$ = new MeshTriangleTyp_1217_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_MeshTriangleTyp_1217_TypeChoicePair :
          y_NormalsSpecialBinary_ArrayBinaryType
          {$$ = new MeshTriangleTyp_1217_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleTyp_1217_TypeType = MeshTriangleTyp_1217_TypeChoicePair::NormalsSpecialBinaryE;
           $$->MeshTriangleTyp_1217_TypeValue.NormalsSpecialBinary = $1;
          }
        | y_NormalsSpecial_ArrayTriangleVertexNormalType
          {$$ = new MeshTriangleTyp_1217_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->MeshTriangleTyp_1217_TypeType = MeshTriangleTyp_1217_TypeChoicePair::NormalsSpecialE;
           $$->MeshTriangleTyp_1217_TypeValue.NormalsSpecial = $1;
          }
        ;

y_MeshTriangleType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_MeshTriangleCore_MeshTriangleCoreType
          y_MeshTriangleTyp_1217_MeshTriangleTyp_1217_Type_0
          {$$ = new MeshTriangleType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MeshTriangleType attributes");
             }
           delete $1;
          }
        ;

y_MeshTriangle_ElementReferenceType :
          MeshTriangleSTART y_ElementReferenceType MeshTriangleEND
          {$$ = $2;}
        ;

y_MeshTriangle_MeshTriangleType :
          MeshTriangleSTART y_MeshTriangleType MeshTriangleEND
          {$$ = $2;
           $$->printElement = "MeshTriangle";
          }
        ;

y_Mesh_ElementReferenceType :
          MeshSTART y_ElementReferenceType MeshEND
          {$$ = $2;}
        ;

y_Method_PositionCoordinateMethodEnumType :
          MethodSTART ENDITEM {yyReadData = 1;}
          y_PositionCoordinateMethodEnumType MethodEND
          {$$ = $4;}
        ;

y_MicrometerAnalogType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_LinearResolution_LinearResolutionType_0
          y_Accuracy_NumericalLengthAccuracyType_0
          y_MeasuringForce_ForceValueType_0
          y_InternalExternal_InternalExternalEnumType_0
          {$$ = new MicrometerAnalogType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MicrometerAnalogType attributes");
             }
           delete $1;
          }
        ;

y_MicrometerAnalog_MicrometerAnalogType :
          MicrometerAnalogSTART y_MicrometerAnalogType MicrometerAnalogEND
          {$$ = $2;
           $$->printElement = "MicrometerAnalog";
          }
        ;

y_MicrometerDigitalType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_LinearResolution_LinearResolutionType_0
          y_Accuracy_NumericalLengthAccuracyType_0
          y_MeasuringForce_ForceValueType_0
          y_InternalExternal_InternalExternalEnumType_0
          {$$ = new MicrometerDigitalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MicrometerDigitalType attributes");
             }
           delete $1;
          }
        ;

y_MicrometerDigital_MicrometerDigitalType :
          MicrometerDigitalSTART y_MicrometerDigitalType
          MicrometerDigitalEND
          {$$ = $2;
           $$->printElement = "MicrometerDigital";
          }
        ;

y_MicrometerType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_LinearResolution_LinearResolutionType_0
          y_Accuracy_NumericalLengthAccuracyType_0
          y_MeasuringForce_ForceValueType_0
          y_InternalExternal_InternalExternalEnumType_0
          {$$ = new MicrometerType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MicrometerType attributes");
             }
           delete $1;
          }
        ;

y_Micrometer_MicrometerType :
          MicrometerSTART y_MicrometerType MicrometerEND
          {$$ = $2;
           $$->printElement = "Micrometer";
          }
        ;

y_MicroscopeMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new MicroscopeMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MicroscopeMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_MicroscopeMeasureFeatureMethod_MicroscopeMeasureFeatureMethodType :
          MicroscopeMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new MicroscopeMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "MicroscopeMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad MicroscopeMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        | MicroscopeMeasureFeatureMethodSTART
          y_MicroscopeMeasureFeatureMethodType
          MicroscopeMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "MicroscopeMeasureFeatureMethod";
          }
        ;

y_MicroscopeType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_IlluminationUnit_XmlString_0 y_TotalMagnification_XmlDecimal_0
          y_EyePieceMagnification_XmlDecimal_0
          y_ObjectiveMagnification_XmlDecimal_0
          y_MaxWorkpieceHeight_LinearValueType_0
          y_MaxWorkpieceWeight_MassValueType_0 y_Accuracy_LinearErrorType_0
          y_StageSwivelingAngle_AngularValueType_0
          y_ToolIds_ArrayReferenceType_0
          {$$ = new MicroscopeType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MicroscopeType attributes");
             }
           delete $1;
          }
        ;

y_Microscope_MicroscopeType :
          MicroscopeSTART y_MicroscopeType MicroscopeEND
          {$$ = $2;
           $$->printElement = "Microscope";
          }
        ;

y_MidPoint_PointFeatureMidPointType :
          MidPointSTART y_PointFeatureMidPointType MidPointEND
          {$$ = $2;
           $$->printElement = "MidPoint";
          }
        ;

y_Midline_LineMidlineType :
          MidlineSTART y_LineMidlineType MidlineEND
          {$$ = $2;
           $$->printElement = "Midline";
          }
        ;

y_Midplane_PlaneMidplaneType :
          MidplaneSTART y_PlaneMidplaneType MidplaneEND
          {$$ = $2;
           $$->printElement = "Midplane";
          }
        ;

y_MinAmbientAirPressure_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinAmbientAirPressureSTART y_PressureValueType
          MinAmbientAirPressureEND
          {$$ = $2;}
        ;

y_MinAmbientRelativeHumidity_SpecifiedDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | MinAmbientRelativeHumiditySTART y_SpecifiedDecimalType
          MinAmbientRelativeHumidityEND
          {$$ = $2;}
        ;

y_MinAmbientTemperature_TemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinAmbientTemperatureSTART y_TemperatureValueType
          MinAmbientTemperatureEND
          {$$ = $2;}
        ;

y_MinAzimuthalAxisAngle_AngularValueType :
          MinAzimuthalAxisAngleSTART y_AngularValueType
          MinAzimuthalAxisAngleEND
          {$$ = $2;}
        ;

y_MinDeviationStats_StatsAngularType :
          MinDeviationStatsSTART y_StatsAngularType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsAngularType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsAngularType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsAreaType :
          MinDeviationStatsSTART y_StatsAreaType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsAreaType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsAreaType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsForceType :
          MinDeviationStatsSTART y_StatsForceType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsForceType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsForceType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsLinearType :
          MinDeviationStatsSTART y_StatsLinearType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsLinearType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsMassType :
          MinDeviationStatsSTART y_StatsMassType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsMassType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsMassType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsPressureType :
          MinDeviationStatsSTART y_StatsPressureType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsPressureType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsPressureType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsSpeedType :
          MinDeviationStatsSTART y_StatsSpeedType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsSpeedType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsSpeedType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsTemperatureType :
          MinDeviationStatsSTART y_StatsTemperatureType
          MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsTemperatureType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsTemperatureType
          MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsTimeType :
          MinDeviationStatsSTART y_StatsTimeType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsTimeType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsTimeType MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsUserDefinedUnitType :
          MinDeviationStatsSTART y_StatsUserDefinedUnitType
          MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDeviationStats_StatsUserDefinedUnitType_0 :
          /* empty */
          {$$ = 0;}
        | MinDeviationStatsSTART y_StatsUserDefinedUnitType
          MinDeviationStatsEND
          {$$ = $2;
           $$->printElement = "MinDeviationStats";
          }
        ;

y_MinDualValue_LinearDualValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinDualValueSTART y_LinearDualValueType MinDualValueEND
          {$$ = $2;}
        ;

y_MinEnvironmentalAltitude_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinEnvironmentalAltitudeSTART y_LinearValueType
          MinEnvironmentalAltitudeEND
          {$$ = $2;}
        ;

y_MinFirstAxis_MeasuredDecimalType :
          MinFirstAxisSTART y_MeasuredDecimalType MinFirstAxisEND
          {$$ = $2;}
        ;

y_MinFocusDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinFocusDistanceSTART y_LinearValueType MinFocusDistanceEND
          {$$ = $2;}
        ;

y_MinLinearAxis_LinearValueType :
          MinLinearAxisSTART y_LinearValueType MinLinearAxisEND
          {$$ = $2;}
        ;

y_MinMeasurementRange_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinMeasurementRangeSTART y_LinearValueType MinMeasurementRangeEND
          {$$ = $2;}
        ;

y_MinMeasuringDistance_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinMeasuringDistanceSTART y_AngularValueType
          MinMeasuringDistanceEND
          {$$ = $2;}
        ;

y_MinMeasuringDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinMeasuringDistanceSTART y_LinearValueType
          MinMeasuringDistanceEND
          {$$ = $2;}
        ;

y_MinOperatingCurrent_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinOperatingCurrentSTART y_UserDefinedUnitValueType
          MinOperatingCurrentEND
          {$$ = $2;}
        ;

y_MinOperatingVoltage_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinOperatingVoltageSTART y_UserDefinedUnitValueType
          MinOperatingVoltageEND
          {$$ = $2;}
        ;

y_MinPointDensity_PositiveDecimalType :
          MinPointDensitySTART ENDITEM {yyReadData = 1;}
          y_PositiveDecimalType MinPointDensityEND
          {$$ = $4;}
        ;

y_MinPoint_PointType :
          MinPointSTART y_PointType MinPointEND
          {$$ = $2;}
        ;

y_MinPoints_XmlUnsignedInt :
          MinPointsSTART ENDITEM {yyReadData = 1;} y_XmlUnsignedInt
          MinPointsEND
          {$$ = $4;}
        ;

y_MinPolarAxisAngle_AngularValueType :
          MinPolarAxisAngleSTART y_AngularValueType MinPolarAxisAngleEND
          {$$ = $2;}
        ;

y_MinPolarAxis_AngularValueType :
          MinPolarAxisSTART y_AngularValueType MinPolarAxisEND
          {$$ = $2;}
        ;

y_MinPowerSupplyVoltage_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinPowerSupplyVoltageSTART y_UserDefinedUnitValueType
          MinPowerSupplyVoltageEND
          {$$ = $2;}
        ;

y_MinRadialAxis_LinearValueType :
          MinRadialAxisSTART y_LinearValueType MinRadialAxisEND
          {$$ = $2;}
        ;

y_MinRadius_LinearValueType :
          MinRadiusSTART y_LinearValueType MinRadiusEND
          {$$ = $2;}
        ;

y_MinRadius_MeasuredLinearValueType :
          MinRadiusSTART y_MeasuredLinearValueType MinRadiusEND
          {$$ = $2;}
        ;

y_MinRotaryAxis_AngularValueType :
          MinRotaryAxisSTART y_AngularValueType MinRotaryAxisEND
          {$$ = $2;}
        ;

y_MinSecondAxis_MeasuredDecimalType :
          MinSecondAxisSTART y_MeasuredDecimalType MinSecondAxisEND
          {$$ = $2;}
        ;

y_MinThirdAxis_MeasuredDecimalType :
          MinThirdAxisSTART y_MeasuredDecimalType MinThirdAxisEND
          {$$ = $2;}
        ;

y_MinType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_u_Check
          {$$ = new MinType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MinValueStats_StatsAngularType :
          MinValueStatsSTART y_StatsAngularType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsAngularType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsAngularType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsAreaType :
          MinValueStatsSTART y_StatsAreaType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsAreaType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsAreaType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsForceType :
          MinValueStatsSTART y_StatsForceType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsForceType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsForceType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsLinearType :
          MinValueStatsSTART y_StatsLinearType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsLinearType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsMassType :
          MinValueStatsSTART y_StatsMassType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsMassType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsMassType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsPressureType :
          MinValueStatsSTART y_StatsPressureType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsPressureType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsPressureType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsSpeedType :
          MinValueStatsSTART y_StatsSpeedType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsSpeedType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsSpeedType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsTemperatureType :
          MinValueStatsSTART y_StatsTemperatureType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsTemperatureType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsTemperatureType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsTimeType :
          MinValueStatsSTART y_StatsTimeType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsTimeType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsTimeType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsUserDefinedUnitType :
          MinValueStatsSTART y_StatsUserDefinedUnitType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValueStats_StatsUserDefinedUnitType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueStatsSTART y_StatsUserDefinedUnitType MinValueStatsEND
          {$$ = $2;
           $$->printElement = "MinValueStats";
          }
        ;

y_MinValue_AngularValueType :
          MinValueSTART y_AngularValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_AngularValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_AreaValueType :
          MinValueSTART y_AreaValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_AreaValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_AreaValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_ForceValueType :
          MinValueSTART y_ForceValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_ForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_ForceValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_LinearValueType :
          MinValueSTART y_LinearValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_LinearValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MassValueType :
          MinValueSTART y_MassValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MassValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredAngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredAngularValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredAreaValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredAreaValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredForceValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredLinearValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredMassValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredMassValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredPressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredPressureValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredSpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredSpeedValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredTemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredTemperatureValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredTimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredTimeValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_MeasuredUserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_MeasuredUserDefinedUnitValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_PressureValueType :
          MinValueSTART y_PressureValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_PressureValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_SpeedValueType :
          MinValueSTART y_SpeedValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_SpeedValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_TemperatureValueType :
          MinValueSTART y_TemperatureValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_TemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_TemperatureValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_TimeValueType :
          MinValueSTART y_TimeValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_TimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_TimeValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_UserDefinedUnitValueType :
          MinValueSTART y_UserDefinedUnitValueType MinValueEND
          {$$ = $2;}
        ;

y_MinValue_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinValueSTART y_UserDefinedUnitValueType MinValueEND
          {$$ = $2;}
        ;

y_MinWireRetractionForce_ForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinWireRetractionForceSTART y_ForceValueType
          MinWireRetractionForceEND
          {$$ = $2;}
        ;

y_MinZAxis_LinearValueType :
          MinZAxisSTART y_LinearValueType MinZAxisEND
          {$$ = $2;}
        ;

y_Min_MinType :
          MinSTART y_MinType MinEND
          {$$ = $2;
           $$->printElement = "Min";
          }
        ;

y_MinimumBoundingBox_BoundingBoxType_0 :
          /* empty */
          {$$ = 0;}
        | MinimumBoundingBoxSTART y_BoundingBoxType MinimumBoundingBoxEND
          {$$ = $2;}
        ;

y_MinimumMaterialRemoval_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | MinimumMaterialRemovalSTART ENDITEM {yyReadData = 1;} y_XmlToken
          MinimumMaterialRemovalEND
          {$$ = $4;}
        ;

y_MinimumTargetDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinimumTargetDiameterSTART y_LinearValueType
          MinimumTargetDiameterEND
          {$$ = $2;}
        ;

y_MinimumTolerance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinimumToleranceSTART y_LinearValueType MinimumToleranceEND
          {$$ = $2;}
        ;

y_Minimum_StatsMeasuredDecimalWithReferenceType :
          MinimumSTART y_StatsMeasuredDecimalWithReferenceType MinimumEND
          {$$ = $2;
           $$->printElement = "Minimum";
          }
        ;

y_Minimum_XmlBoolean :
          MinimumSTART ENDITEM {yyReadData = 1;} y_XmlBoolean MinimumEND
          {$$ = $4;}
        ;

y_MinorDiameter_LinearValueType :
          MinorDiameterSTART y_LinearValueType MinorDiameterEND
          {$$ = $2;}
        ;

y_MinorDiameter_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | MinorDiameterSTART y_MeasuredLinearValueType MinorDiameterEND
          {$$ = $2;}
        ;

y_MinusType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_2_Check
          {$$ = new MinusType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Minus_MinusType :
          MinusSTART y_MinusType MinusEND
          {$$ = $2;
           $$->printElement = "Minus";
          }
        ;

y_Mode_DisplayStyleModeType :
          ModeSTART y_DisplayStyleModeType ModeEND
          {$$ = $2;}
        ;

y_ModelId_QIFReferenceFullType :
          ModelIdSTART y_QIFReferenceFullType ModelIdEND
          {$$ = $2;}
        ;

y_ModelNumber_XmlString :
          ModelNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          ModelNumberEND
          {$$ = $4;}
        ;

y_ModelNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ModelNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          ModelNumberEND
          {$$ = $4;}
        ;

y_ModelTolerance_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | ModelToleranceSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          ModelToleranceEND
          {$$ = $4;}
        ;

y_ModifiedThread_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ModifiedThreadSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ModifiedThreadEND
          {$$ = $4;}
        ;

y_Modifier_LeaderModifierEnumType_0 :
          /* empty */
          {$$ = 0;}
        | ModifierSTART ENDITEM {yyReadData = 1;} y_LeaderModifierEnumType
          ModifierEND
          {$$ = $4;}
        ;

y_ModifyingPlaneEnumType :
          DATASTRING
          {$$ = new ModifyingPlaneEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ModifyingPlaneEnumType value");
          }
        ;

y_MotorType_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | MotorTypeSTART ENDITEM {yyReadData = 1;} y_XmlString MotorTypeEND
          {$$ = $4;}
        ;

y_Mounting_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | MountingSTART ENDITEM {yyReadData = 1;} y_XmlString MountingEND
          {$$ = $4;}
        ;

y_MovableDatumTargetDirectionType :
          ENDITEM y_DatumTargetTranslationDirection_UnitVectorType
          {$$ = new MovableDatumTargetDirectionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_MovableDatumTarget_MovableDatumTargetDirectionType_0 :
          /* empty */
          {$$ = 0;}
        | MovableDatumTargetSTART y_MovableDatumTargetDirectionType
          MovableDatumTargetEND
          {$$ = $2;}
        ;

y_MoveGroup_ExplodedViewMoveGroupType :
          MoveGroupSTART y_ExplodedViewMoveGroupType MoveGroupEND
          {$$ = $2;}
        ;

y_MoveGroups_ExplodedViewMoveGroupsType :
          MoveGroupsSTART y_ExplodedViewMoveGroupsType MoveGroupsEND
          {$$ = $2;}
        ;

y_MovePointAxis_PointFeatureMovePointAxisType :
          MovePointAxisSTART y_PointFeatureMovePointAxisType
          MovePointAxisEND
          {$$ = $2;
           $$->printElement = "MovePointAxis";
          }
        ;

y_MovePointVector_PointFeatureMovePointVectorType :
          MovePointVectorSTART y_PointFeatureMovePointVectorType
          MovePointVectorEND
          {$$ = $2;
           $$->printElement = "MovePointVector";
          }
        ;

y_MovePoint_PointFeatureMovePointType :
          MovePointSTART y_PointFeatureMovePointType MovePointEND
          {$$ = $2;
           $$->printElement = "MovePoint";
          }
        ;

y_MultiLeadSpecification_MultiLeadThreadSpecificationType :
          MultiLeadSpecificationSTART y_MultiLeadThreadSpecificationType
          MultiLeadSpecificationEND
          {$$ = $2;
           $$->printElement = "MultiLeadSpecification";
          }
        ;

y_MultiLeadThreadSpecificationType :
          y_LiztAttributePair ENDITEM y_Diameter_LinearValueType
          y_ThreadSeries_ThreadSeriesType
          y_ThreadToleranceClass_ThreadClassType
          y_CrestDiameterToleranceClass_ThreadClassType_0
          y_LeftHanded_XmlBoolean_0 y_ModifiedThread_XmlBoolean_0
          y_ThreadLengthEngagement_LinearValueType_0
          y_Attributes_AttributesType_0 y_ThreadPitch_LinearValueType
          y_ThreadLeadDistance_LinearValueType
          y_ThreadLeadStarts_NaturalType
          {$$ = new MultiLeadThreadSpecificationType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MultiLeadThreadSpecificationType attributes");
             }
           delete $1;
          }
        ;

y_MultiPeakMeasurement_XmlInt_0 :
          /* empty */
          {$$ = 0;}
        | MultiPeakMeasurementSTART ENDITEM {yyReadData = 1;} y_XmlInt
          MultiPeakMeasurementEND
          {$$ = $4;}
        ;

y_MultipleCarriageCartesianCMMType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_HomeLocation_PointType_0
          y_CMMGeometry_CartesianCMMGeometryType_0
          y_CMMAxisDirections_substituteType_0 y_Scales_substituteType_0
          y_MaxWorkpieceHeight_LinearValueType_0
          y_MaxWorkpieceMass_MassValueType_0
          y_JoystickSpeeds_CartesianCMMSpeedsType_0
          y_CMMSpeeds_substituteType_0 y_RotaryTable_RotaryTableType_0
          y_Accuracies_CartesianCMMAccuraciesType_0
          y_ToolIds_ArrayReferenceType_0 y_SensorIds_ArrayReferenceType_0
          y_Carriages_CarriagesType
          {$$ = new MultipleCarriageCartesianCMMType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad MultipleCarriageCartesianCMMType attributes");
             }
           delete $1;
          }
        ;

y_MultipleCarriageCartesianCMM_MultipleCarriageCartesianCMMType :
          MultipleCarriageCartesianCMMSTART
          y_MultipleCarriageCartesianCMMType
          MultipleCarriageCartesianCMMEND
          {$$ = $2;
           $$->printElement = "MultipleCarriageCartesianCMM";
          }
        ;

y_MustNot_QIFMustNotType :
          MustNotSTART y_QIFMustNotType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "MustNot";
          }
        ;

y_Must_QIFMustType :
          MustSTART y_QIFMustType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "Must";
          }
        ;

y_Name_XmlID :
          NameSTART ENDITEM {yyReadData = 1;} y_XmlID NameEND
          {$$ = $4;}
        ;

y_Name_XmlNMTOKEN_0 :
          /* empty */
          {$$ = 0;}
        | NameSTART ENDITEM {yyReadData = 1;} y_XmlNMTOKEN NameEND
          {$$ = $4;}
        ;

y_Name_XmlString :
          NameSTART ENDITEM {yyReadData = 1;} y_XmlString NameEND
          {$$ = $4;}
        ;

y_Name_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | NameSTART ENDITEM {yyReadData = 1;} y_XmlString NameEND
          {$$ = $4;}
        ;

y_Name_XmlToken :
          NameSTART ENDITEM {yyReadData = 1;} y_XmlToken NameEND
          {$$ = $4;}
        ;

y_Name_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | NameSTART ENDITEM {yyReadData = 1;} y_XmlToken NameEND
          {$$ = $4;}
        ;

y_NaturalType :
          DATASTRING
          {$$ = new NaturalType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad NaturalType value");
          }
        ;

y_Near_LinearValueType :
          NearSTART y_LinearValueType NearEND
          {$$ = $2;}
        ;

y_NegateType :
          ENDITEM y_ArithmeticExpression_substituteType
          {$$ = new NegateType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Negate_NegateType :
          NegateSTART y_NegateType NegateEND
          {$$ = $2;
           $$->printElement = "Negate";
          }
        ;

y_NeighboursBinary_ArrayBinaryType :
          NeighboursBinarySTART y_ArrayBinaryType NeighboursBinaryEND
          {$$ = $2;}
        ;

y_Neighbours_ArrayI3Type :
          NeighboursSTART y_ArrayI3Type NeighboursEND
          {$$ = $2;}
        ;

y_NestingIndex_LinearValueType :
          NestingIndexSTART y_LinearValueType NestingIndexEND
          {$$ = $2;}
        ;

y_NominalBallCenterToBallCenterLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | NominalBallCenterToBallCenterLengthSTART y_LinearValueType
          NominalBallCenterToBallCenterLengthEND
          {$$ = $2;}
        ;

y_NominalDatumFeatureType :
          ENDITEM y_FeatureNominalId_QIFReferenceFullType
          {$$ = new NominalDatumFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_NominalDatumFeature_NominalDatumFeatureType :
          NominalDatumFeatureSTART y_NominalDatumFeatureType
          NominalDatumFeatureEND
          {$$ = $2;
           $$->printElement = "NominalDatumFeature";
          }
        ;

y_NominalDirection_UnitVectorType :
          NominalDirectionSTART y_UnitVectorType NominalDirectionEND
          {$$ = $2;}
        ;

y_NominalOffsetAlignmentOperationType :
          ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0 y_Offset_VectorType
          {$$ = new NominalOffsetAlignmentOperationType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_NominalOffset_NominalOffsetAlignmentOperationType :
          NominalOffsetSTART y_NominalOffsetAlignmentOperationType
          NominalOffsetEND
          {$$ = $2;
           $$->printElement = "NominalOffset";
          }
        ;

y_NominalPointSetListType :
          y_LiztAttributePair ENDITEM
          y_LiztNominalPointSet_PointSetNominalType_1_u
          {$$ = new NominalPointSetListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NominalPointSetListType attributes");
             }
           delete $1;
          }
        ;

y_NominalPointSet_PointSetNominalType :
          NominalPointSetSTART y_PointSetNominalType NominalPointSetEND
          {$$ = $2;}
        ;

y_NominalPointSets_NominalPointSetListType_0 :
          /* empty */
          {$$ = 0;}
        | NominalPointSetsSTART y_NominalPointSetListType
          NominalPointSetsEND
          {$$ = $2;}
        ;

y_NominalRotationAlignmentOperationType :
          ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0 y_RotationAxis_UnitVectorType
          y_Angle_AngularValueType
          {$$ = new NominalRotationAlignmentOperationType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_NominalRotation_NominalRotationAlignmentOperationType :
          NominalRotationSTART y_NominalRotationAlignmentOperationType
          NominalRotationEND
          {$$ = $2;
           $$->printElement = "NominalRotation";
          }
        ;

y_NominalSinglePointAccuracy_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | NominalSinglePointAccuracySTART y_LinearValueType
          NominalSinglePointAccuracyEND
          {$$ = $2;}
        ;

y_NominalTransform_TransformMatrixType_0 :
          /* empty */
          {$$ = 0;}
        | NominalTransformSTART ENDWHOLEITEM
          {$$ = new TransformMatrixType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "NominalTransform";
          }
        | NominalTransformSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new TransformMatrixType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "NominalTransform";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad TransformMatrixType attributes");
             }
           delete $2;
          }
        | NominalTransformSTART y_TransformMatrixType NominalTransformEND
          {$$ = $2;
           $$->printElement = "NominalTransform";
          }
        ;

y_NominalVolumetricAccuracy_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | NominalVolumetricAccuracySTART y_LinearValueType
          NominalVolumetricAccuracyEND
          {$$ = $2;}
        ;

y_NominalsCalculated_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | NominalsCalculatedSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          NominalsCalculatedEND
          {$$ = $4;}
        ;

y_NonConformanceDesignator_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | NonConformanceDesignatorSTART ENDITEM {yyReadData = 1;}
          y_XmlToken NonConformanceDesignatorEND
          {$$ = $4;}
        ;

y_NonDestructiveTestingEnumType :
          DATASTRING
          {$$ = new NonDestructiveTestingEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad NonDestructiveTestingEnumType value");
          }
        ;

y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0 :
          /* empty */
          {$$ = 0;}
        | NonDestructiveTestingSTART y_ArrayNonDestructiveTestingType
          NonDestructiveTestingEND
          {$$ = $2;}
        ;

y_NonDiametricalZone_CoaxialityNonDiametricalZoneType :
          NonDiametricalZoneSTART y_CoaxialityNonDiametricalZoneType
          ENDWHOLEITEM
          {$$ = $2;}
        ;

y_NonDiametricalZone_ConcentricityNonDiametricalZoneType :
          NonDiametricalZoneSTART y_ConcentricityNonDiametricalZoneType
          ENDWHOLEITEM
          {$$ = $2;}
        ;

y_NonDiametricalZone_PositionNonDiametricalZoneType :
          NonDiametricalZoneSTART ENDWHOLEITEM
          {$$ = new PositionNonDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        | NonDiametricalZoneSTART y_PositionNonDiametricalZoneType
          NonDiametricalZoneEND
          {$$ = $2;}
        ;

y_NonDiametricalZone_StraightnessNonDiametricalZoneType :
          NonDiametricalZoneSTART ENDWHOLEITEM
          {$$ = new StraightnessNonDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        | NonDiametricalZoneSTART y_StraightnessNonDiametricalZoneType
          NonDiametricalZoneEND
          {$$ = $2;}
        ;

y_NonToleranceEnumType :
          DATASTRING
          {$$ = new NonToleranceEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad NonToleranceEnumType value");
          }
        ;

y_NonTolerance_NonToleranceEnumType :
          NonToleranceSTART ENDITEM {yyReadData = 1;}
          y_NonToleranceEnumType NonToleranceEND
          {$$ = $4;}
        ;

y_NormalSpecial_TriangleVertexNormalType :
          NormalSpecialSTART y_TriangleVertexNormalType NormalSpecialEND
          {$$ = $2;}
        ;

y_Normal_MeasuredUnitVectorType :
          NormalSTART y_MeasuredUnitVectorType NormalEND
          {$$ = $2;}
        ;

y_Normal_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | NormalSTART y_MeasuredUnitVectorType NormalEND
          {$$ = $2;}
        ;

y_Normal_UnitVectorSimpleType :
          NormalSTART y_UnitVectorSimpleType NormalEND
          {$$ = $2;
           $2->UnitVectorSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad UnitVectorSimpleType value");
          }
        ;

y_Normal_UnitVectorType :
          NormalSTART y_UnitVectorType NormalEND
          {$$ = $2;}
        ;

y_Normal_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | NormalSTART y_UnitVectorType NormalEND
          {$$ = $2;}
        ;

y_Normality_StatsMeasuredDecimalType :
          NormalitySTART y_StatsMeasuredDecimalType NormalityEND
          {$$ = $2;
           $$->printElement = "Normality";
          }
        ;

y_NormalsBinary_ArrayBinaryType :
          NormalsBinarySTART y_ArrayBinaryType NormalsBinaryEND
          {$$ = $2;}
        ;

y_NormalsSpecialBinary_ArrayBinaryType :
          NormalsSpecialBinarySTART y_ArrayBinaryType
          NormalsSpecialBinaryEND
          {$$ = $2;}
        ;

y_NormalsSpecial_ArrayTriangleVertexNormalType :
          NormalsSpecialSTART y_ArrayTriangleVertexNormalType
          NormalsSpecialEND
          {$$ = $2;}
        ;

y_Normals_ArrayUnitVectorType :
          NormalsSTART y_ArrayUnitVectorType NormalsEND
          {$$ = $2;}
        ;

y_Normals_ListDoubleType :
          NormalsSTART y_ListDoubleType NormalsEND
          {$$ = $2;}
        ;

y_NotConvex_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | NotConvexSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          NotConvexEND
          {$$ = $4;}
        ;

y_NotType :
          ENDITEM y_BooleanExpression_substituteType
          {$$ = new NotType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Not_NotType :
          NotSTART y_NotType NotEND
          {$$ = $2;
           $$->printElement = "Not";
          }
        ;

y_NotableEventId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | NotableEventIdSTART y_QIFReferenceType NotableEventIdEND
          {$$ = $2;}
        ;

y_NotableEventIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | NotableEventIdsSTART y_ArrayReferenceType NotableEventIdsEND
          {$$ = $2;}
        ;

y_NotableEventType :
          y_LiztAttributePair ENDITEM y_Description_XmlString
          y_Active_XmlBoolean
          {$$ = new NotableEventType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NotableEventType attributes");
             }
           delete $1;
          }
        ;

y_NotableEvent_NotableEventType :
          NotableEventSTART y_NotableEventType NotableEventEND
          {$$ = $2;
           $$->printElement = "NotableEvent";
          }
        ;

y_NotableEventsType :
          y_LiztAttributePair ENDITEM
          y_LiztNotableEvent_NotableEventType_1_u
          {$$ = new NotableEventsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NotableEventsType attributes");
             }
           delete $1;
          }
        ;

y_NotableEvents_NotableEventsType_0 :
          /* empty */
          {$$ = 0;}
        | NotableEventsSTART y_NotableEventsType NotableEventsEND
          {$$ = $2;}
        ;

y_NoteFlagSetType :
          y_LiztAttributePair ENDITEM y_LiztNoteFlag_NoteFlagType_1_u
          {$$ = new NoteFlagSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NoteFlagSetType attributes");
             }
           delete $1;
          }
        ;

y_NoteFlagSet_NoteFlagSetType_0 :
          /* empty */
          {$$ = 0;}
        | NoteFlagSetSTART y_NoteFlagSetType NoteFlagSetEND
          {$$ = $2;}
        ;

y_NoteFlagType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Text_XmlString
          y_TextHidden_XmlString_0 y_URI_XmlAnyURI_0
          {$$ = new NoteFlagType($3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NoteFlagType attributes");
             }
           delete $1;
          }
        ;

y_NoteFlag_NoteFlagType :
          NoteFlagSTART y_NoteFlagType NoteFlagEND
          {$$ = $2;
           $$->printElement = "NoteFlag";
          }
        ;

y_NoteIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | NoteIdsSTART y_ArrayReferenceFullType NoteIdsEND
          {$$ = $2;}
        ;

y_NoteIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | NoteIdsSTART y_ArrayReferenceType NoteIdsEND
          {$$ = $2;}
        ;

y_NoteSetType :
          y_LiztAttributePair ENDITEM y_LiztNote_NoteType_1_u
          {$$ = new NoteSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NoteSetType attributes");
             }
           delete $1;
          }
        ;

y_NoteSet_NoteSetType_0 :
          /* empty */
          {$$ = 0;}
        | NoteSetSTART y_NoteSetType NoteSetEND
          {$$ = $2;}
        ;

y_NoteType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Text_XmlString
          {$$ = new NoteType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NoteType attributes");
             }
           delete $1;
          }
        ;

y_Note_NoteType :
          NoteSTART y_NoteType NoteEND
          {$$ = $2;
           $$->printElement = "Note";
          }
        ;

y_NotedEventIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | NotedEventIdsSTART y_ArrayReferenceFullType NotedEventIdsEND
          {$$ = $2;}
        ;

y_NotedEventIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | NotedEventIdsSTART y_ArrayReferenceType NotedEventIdsEND
          {$$ = $2;}
        ;

y_NotedEventType :
          y_LiztAttributePair ENDITEM y_Description_XmlString
          y_SequenceNumber_NaturalType y_TimeOccurred_XmlDateTime_0
          y_NotableEventId_QIFReferenceType_0
          {$$ = new NotedEventType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NotedEventType attributes");
             }
           delete $1;
          }
        ;

y_NotedEvent_NotedEventType :
          NotedEventSTART y_NotedEventType NotedEventEND
          {$$ = $2;
           $$->printElement = "NotedEvent";
          }
        ;

y_NotedEventsType :
          y_LiztAttributePair ENDITEM y_LiztNotedEvent_NotedEventType_1_u
          {$$ = new NotedEventsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NotedEventsType attributes");
             }
           delete $1;
          }
        ;

y_NotedEvents_NotedEventsType_0 :
          /* empty */
          {$$ = 0;}
        | NotedEventsSTART y_NotedEventsType NotedEventsEND
          {$$ = $2;}
        ;

y_NumOutOfControlRng_CriterionIntegerType :
          NumOutOfControlRngSTART y_CriterionIntegerType
          NumOutOfControlRngEND
          {$$ = $2;}
        ;

y_NumOutOfControl_CriterionIntegerType :
          NumOutOfControlSTART y_CriterionIntegerType NumOutOfControlEND
          {$$ = $2;}
        ;

y_NumOutOfTolerance_CriterionIntegerType :
          NumOutOfToleranceSTART y_CriterionIntegerType
          NumOutOfToleranceEND
          {$$ = $2;}
        ;

y_NumberAllowedExceptions_LimitingNumberType :
          NumberAllowedExceptionsSTART y_LimitingNumberType
          NumberAllowedExceptionsEND
          {$$ = $2;}
        ;

y_NumberAllowedExceptions_LimitingNumberType_0 :
          /* empty */
          {$$ = 0;}
        | NumberAllowedExceptionsSTART y_LimitingNumberType
          NumberAllowedExceptionsEND
          {$$ = $2;}
        ;

y_NumberFailures_StatsNonNegativeIntegerType :
          NumberFailuresSTART y_StatsNonNegativeIntegerType
          NumberFailuresEND
          {$$ = $2;
           $$->printElement = "NumberFailures";
          }
        ;

y_NumberOfAppraisers_XmlPositiveInteger :
          NumberOfAppraisersSTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger NumberOfAppraisersEND
          {$$ = $4;}
        ;

y_NumberOfCameraPixels_XmlInt_0 :
          /* empty */
          {$$ = 0;}
        | NumberOfCameraPixelsSTART ENDITEM {yyReadData = 1;} y_XmlInt
          NumberOfCameraPixelsEND
          {$$ = $4;}
        ;

y_NumberOfFacets_NaturalType :
          NumberOfFacetsSTART ENDITEM {yyReadData = 1;} y_NaturalType
          NumberOfFacetsEND
          {$$ = $4;}
        ;

y_NumberOfFeaturesPerRow_NaturalType :
          NumberOfFeaturesPerRowSTART ENDITEM {yyReadData = 1;}
          y_NaturalType NumberOfFeaturesPerRowEND
          {$$ = $4;}
        ;

y_NumberOfFeatures_NaturalType :
          NumberOfFeaturesSTART ENDITEM {yyReadData = 1;} y_NaturalType
          NumberOfFeaturesEND
          {$$ = $4;}
        ;

y_NumberOfJoints_XmlInt_0 :
          /* empty */
          {$$ = 0;}
        | NumberOfJointsSTART ENDITEM {yyReadData = 1;} y_XmlInt
          NumberOfJointsEND
          {$$ = $4;}
        ;

y_NumberOfMeasurementPoints_XmlPositiveInteger_0 :
          /* empty */
          {$$ = 0;}
        | NumberOfMeasurementPointsSTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger NumberOfMeasurementPointsEND
          {$$ = $4;}
        ;

y_NumberOfParts_XmlPositiveInteger :
          NumberOfPartsSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          NumberOfPartsEND
          {$$ = $4;}
        ;

y_NumberOfPixels_XmlInt_0 :
          /* empty */
          {$$ = 0;}
        | NumberOfPixelsSTART ENDITEM {yyReadData = 1;} y_XmlInt
          NumberOfPixelsEND
          {$$ = $4;}
        ;

y_NumberOfPoints_XmlUnsignedInt :
          NumberOfPointsSTART ENDITEM {yyReadData = 1;} y_XmlUnsignedInt
          NumberOfPointsEND
          {$$ = $4;}
        ;

y_NumberOfRows_NaturalType :
          NumberOfRowsSTART ENDITEM {yyReadData = 1;} y_NaturalType
          NumberOfRowsEND
          {$$ = $4;}
        ;

y_NumberOfSamples_XmlPositiveInteger :
          NumberOfSamplesSTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger NumberOfSamplesEND
          {$$ = $4;}
        ;

y_NumberOfSteps_XmlPositiveInteger :
          NumberOfStepsSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          NumberOfStepsEND
          {$$ = $4;}
        ;

y_NumberOfTrials_XmlPositiveInteger :
          NumberOfTrialsSTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger NumberOfTrialsEND
          {$$ = $4;}
        ;

y_NumberOutOfControl_StatsNonNegativeIntegerWithReferencesType :
          NumberOutOfControlSTART
          y_StatsNonNegativeIntegerWithReferencesType NumberOutOfControlEND
          {$$ = $2;
           $$->printElement = "NumberOutOfControl";
          }
        ;

y_NumberOutOfTolerance_StatsNonNegativeIntegerWithReferencesType :
          NumberOutOfToleranceSTART
          y_StatsNonNegativeIntegerWithReferencesType
          NumberOutOfToleranceEND
          {$$ = $2;
           $$->printElement = "NumberOutOfTolerance";
          }
        ;

y_NumberOverUpperTolerance_StatsNonNegativeIntegerWithReferencesType :
          NumberOverUpperToleranceSTART
          y_StatsNonNegativeIntegerWithReferencesType
          NumberOverUpperToleranceEND
          {$$ = $2;
           $$->printElement = "NumberOverUpperTolerance";
          }
        ;

y_NumberSubgroups_StatsNonNegativeIntegerType :
          NumberSubgroupsSTART y_StatsNonNegativeIntegerType
          NumberSubgroupsEND
          {$$ = $2;
           $$->printElement = "NumberSubgroups";
          }
        ;

y_NumberUnderLowerTolerance_StatsNonNegativeIntegerWithReferencesType :
          NumberUnderLowerToleranceSTART
          y_StatsNonNegativeIntegerWithReferencesType
          NumberUnderLowerToleranceEND
          {$$ = $2;
           $$->printElement = "NumberUnderLowerTolerance";
          }
        ;

y_NumberedPlanElementType :
          ENDITEM y_SequenceNumber_XmlPositiveInteger
          y_PlanElement_substituteType
          {$$ = new NumberedPlanElementType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_NumberedPlanElement_NumberedPlanElementType :
          NumberedPlanElementSTART y_NumberedPlanElementType
          NumberedPlanElementEND
          {$$ = $2;}
        ;

y_NumberedPlanElementsType :
          y_LiztAttributePair ENDITEM
          y_LiztNumberedPlanElement_NumberedPlanElementType_1_u
          {$$ = new NumberedPlanElementsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad NumberedPlanElementsType attributes");
             }
           delete $1;
          }
        ;

y_Numerator_NaturalType :
          NumeratorSTART ENDITEM {yyReadData = 1;} y_NaturalType
          NumeratorEND
          {$$ = $4;}
        ;

y_Numerator_XmlPositiveInteger :
          NumeratorSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          NumeratorEND
          {$$ = $4;}
        ;

y_NumericCharacteristicStatsValue_substituteType :
          y_AppraiserVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AverageRange_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Average_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Bias_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Difference_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EffectiveNumber_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EquipmentVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EstimatedStandardDeviation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GageRandR_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GoodnessOfFit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Interaction_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Kurtosis_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Linearity_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LowerConfidenceLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LowerControlLimitRange_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LowerControlLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Maximum_StatsMeasuredDecimalWithReferenceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Minimum_StatsMeasuredDecimalWithReferenceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Normality_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberOutOfControl_StatsNonNegativeIntegerWithReferencesType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberSubgroups_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PartVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ProcessVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Range_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RegressionIntercept_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RegressionSlope_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeBias_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeLinearity_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RootMeanSquare_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Skew_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StandardDeviation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupAverages_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupDifferences_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupEffectiveNumbers_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupMaxima_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupMinima_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupRanges_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupTotalNumbers_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TDistribution_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalNumber_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UpperConfidenceLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UpperControlLimitRange_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UpperControlLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_NumericCharacteristicWithTolStatsValue_substituteType :
          y_AppraiserVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_AverageRange_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Average_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Bias_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Cm_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Cmk_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Cp_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Cpk_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Cpm_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Difference_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EffectiveNumber_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EquipmentVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_EstimatedStandardDeviation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GageRandR_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GoodnessOfFit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Interaction_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Kurtosis_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Linearity_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LowerConfidenceLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LowerControlLimitRange_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LowerControlLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Maximum_StatsMeasuredDecimalWithReferenceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Minimum_StatsMeasuredDecimalWithReferenceType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Normality_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberOutOfControl_StatsNonNegativeIntegerWithReferencesType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberOutOfTolerance_StatsNonNegativeIntegerWithReferencesType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberOverUpperTolerance_StatsNonNegativeIntegerWithReferencesType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberSubgroups_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberUnderLowerTolerance_StatsNonNegativeIntegerWithReferencesType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PartVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Pp_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Ppk_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ProcessVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Range_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RegressionIntercept_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RegressionSlope_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeAppraiserVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeBias_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeEquipmentVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeGageRandR_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeInteraction_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeLinearity_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativePartVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RelativeTotalVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_RootMeanSquare_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Skew_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StandardDeviation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupAverages_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupDifferences_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupEffectiveNumbers_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupMaxima_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupMinima_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupNumbersOutOfTolerance_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupNumbersOverUpperTolerance_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupNumbersUnderLowerTolerance_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupRanges_SubgroupDecimalsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SubgroupTotalNumbers_SubgroupIntegersType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TDistribution_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalNumber_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TotalVariation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UpperConfidenceLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UpperControlLimitRange_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UpperControlLimit_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_NumericalLengthAccuracyType :
          ENDITEM y_EnvironmentalRange_EnvironmentalRangeType
          y_AccuracyValue_LinearValueType
          {$$ = new NumericalLengthAccuracyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Nurbs12CoreType :
          y_LiztAttributePair ENDITEM y_Order_NaturalType
          y_Knots_ArrayDoubleType
          y_Nurbs12CoreType_1218_Nurbs12CoreType_1218_Type
          y_Weights_ArrayDoubleType_0
          {$$ = new Nurbs12CoreType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Nurbs12CoreType attributes");
             }
           delete $1;
          }
        ;

y_Nurbs12CoreType_1218_Nurbs12CoreType_1218_Type :
          y_Nurbs12CoreType_1218_Type
          {$$ = $1;}
        ;

y_Nurbs12CoreType_1218_Type :
          y_Nurbs12CoreType_1218_TypeChoicePair
          {$$ = new Nurbs12CoreType_1218_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Nurbs12CoreType_1218_TypeChoicePair :
          y_CPsBinary_ArrayBinaryType
          {$$ = new Nurbs12CoreType_1218_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Nurbs12CoreType_1218_TypeType = Nurbs12CoreType_1218_TypeChoicePair::CPsBinaryE;
           $$->Nurbs12CoreType_1218_TypeValue.CPsBinary = $1;
          }
        | y_CPs_ArrayPoint2dType
          {$$ = new Nurbs12CoreType_1218_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Nurbs12CoreType_1218_TypeType = Nurbs12CoreType_1218_TypeChoicePair::CPsE;
           $$->Nurbs12CoreType_1218_TypeValue.CPs = $1;
          }
        ;

y_Nurbs12Core_Nurbs12CoreType :
          Nurbs12CoreSTART y_Nurbs12CoreType Nurbs12CoreEND
          {$$ = $2;
           $$->printElement = "Nurbs12Core";
          }
        ;

y_Nurbs12Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Nurbs12Core_Nurbs12CoreType
          {$$ = new Nurbs12Type($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Nurbs12Type attributes");
             }
           delete $1;
          }
        ;

y_Nurbs12_Nurbs12Type :
          Nurbs12START y_Nurbs12Type Nurbs12END
          {$$ = $2;
           $$->printElement = "Nurbs12";
          }
        ;

y_Nurbs13CoreType :
          y_LiztAttributePair ENDITEM y_Order_NaturalType
          y_Knots_ArrayDoubleType
          y_Nurbs13CoreType_1219_Nurbs13CoreType_1219_Type
          y_Weights_ArrayDoubleType_0
          {$$ = new Nurbs13CoreType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Nurbs13CoreType attributes");
             }
           delete $1;
          }
        ;

y_Nurbs13CoreType_1219_Nurbs13CoreType_1219_Type :
          y_Nurbs13CoreType_1219_Type
          {$$ = $1;}
        ;

y_Nurbs13CoreType_1219_Type :
          y_Nurbs13CoreType_1219_TypeChoicePair
          {$$ = new Nurbs13CoreType_1219_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Nurbs13CoreType_1219_TypeChoicePair :
          y_CPsBinary_ArrayBinaryType
          {$$ = new Nurbs13CoreType_1219_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Nurbs13CoreType_1219_TypeType = Nurbs13CoreType_1219_TypeChoicePair::CPsBinaryE;
           $$->Nurbs13CoreType_1219_TypeValue.CPsBinary = $1;
          }
        | y_CPs_ArrayPointType
          {$$ = new Nurbs13CoreType_1219_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Nurbs13CoreType_1219_TypeType = Nurbs13CoreType_1219_TypeChoicePair::CPsE;
           $$->Nurbs13CoreType_1219_TypeValue.CPs = $1;
          }
        ;

y_Nurbs13Core_Nurbs13CoreType :
          Nurbs13CoreSTART y_Nurbs13CoreType Nurbs13CoreEND
          {$$ = $2;
           $$->printElement = "Nurbs13Core";
          }
        ;

y_Nurbs13Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Nurbs13Core_Nurbs13CoreType y_Transform_ElementReferenceType_0
          {$$ = new Nurbs13Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Nurbs13Type attributes");
             }
           delete $1;
          }
        ;

y_Nurbs13_Nurbs13Type :
          Nurbs13START y_Nurbs13Type Nurbs13END
          {$$ = $2;
           $$->printElement = "Nurbs13";
          }
        ;

y_Nurbs23CoreType :
          ENDITEM y_OrderU_NaturalType y_OrderV_NaturalType
          y_KnotsU_ArrayDoubleType y_KnotsV_ArrayDoubleType
          y_Nurbs23CoreType_1220_Nurbs23CoreType_1220_Type
          y_Weights_ArrayDoubleType_0
          {$$ = new Nurbs23CoreType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        | y_LiztAttributePair ENDITEM y_OrderU_NaturalType
          y_OrderV_NaturalType y_KnotsU_ArrayDoubleType
          y_KnotsV_ArrayDoubleType
          y_Nurbs23CoreType_1220_Nurbs23CoreType_1220_Type
          y_Weights_ArrayDoubleType_0
          {$$ = new Nurbs23CoreType($3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Nurbs23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Nurbs23CoreType_1220_Nurbs23CoreType_1220_Type :
          y_Nurbs23CoreType_1220_Type
          {$$ = $1;}
        ;

y_Nurbs23CoreType_1220_Type :
          y_Nurbs23CoreType_1220_TypeChoicePair
          {$$ = new Nurbs23CoreType_1220_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Nurbs23CoreType_1220_TypeChoicePair :
          y_CPsBinary_ArrayBinaryType
          {$$ = new Nurbs23CoreType_1220_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Nurbs23CoreType_1220_TypeType = Nurbs23CoreType_1220_TypeChoicePair::CPsBinaryE;
           $$->Nurbs23CoreType_1220_TypeValue.CPsBinary = $1;
          }
        | y_CPs_ArrayPointType
          {$$ = new Nurbs23CoreType_1220_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Nurbs23CoreType_1220_TypeType = Nurbs23CoreType_1220_TypeChoicePair::CPsE;
           $$->Nurbs23CoreType_1220_TypeValue.CPs = $1;
          }
        ;

y_Nurbs23Core_Nurbs23CoreType :
          Nurbs23CoreSTART y_Nurbs23CoreType Nurbs23CoreEND
          {$$ = $2;
           $$->printElement = "Nurbs23Core";
          }
        ;

y_Nurbs23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Nurbs23Core_Nurbs23CoreType y_Transform_ElementReferenceType_0
          {$$ = new Nurbs23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Nurbs23Type attributes");
             }
           delete $1;
          }
        ;

y_Nurbs23_Nurbs23Type :
          Nurbs23START y_Nurbs23Type Nurbs23END
          {$$ = $2;
           $$->printElement = "Nurbs23";
          }
        ;

y_ObjectId_QIFReferenceFullType :
          ObjectIdSTART y_QIFReferenceFullType ObjectIdEND
          {$$ = $2;}
        ;

y_ObjectTemperature_MeasuredTemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | ObjectTemperatureSTART y_MeasuredTemperatureValueType
          ObjectTemperatureEND
          {$$ = $2;}
        ;

y_ObjectiveFocalLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ObjectiveFocalLengthSTART y_LinearValueType
          ObjectiveFocalLengthEND
          {$$ = $2;}
        ;

y_ObjectiveMagnification_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | ObjectiveMagnificationSTART ENDITEM {yyReadData = 1;}
          y_XmlDecimal ObjectiveMagnificationEND
          {$$ = $4;}
        ;

y_Obtention_RoughnessObtentionEnumType_0 :
          /* empty */
          {$$ = 0;}
        | ObtentionSTART ENDITEM {yyReadData = 1;}
          y_RoughnessObtentionEnumType ObtentionEND
          {$$ = $4;}
        ;

y_Offset23CoreType :
          ENDITEM y_Distance_XmlDouble y_Surface_SurfaceCoreType
          {$$ = new Offset23CoreType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Distance_XmlDouble
          y_Surface_SurfaceCoreType
          {$$ = new Offset23CoreType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Offset23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Offset23Core_Offset23CoreType :
          Offset23CoreSTART y_Offset23CoreType Offset23CoreEND
          {$$ = $2;
           $$->printElement = "Offset23Core";
          }
        ;

y_Offset23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Offset23Core_Offset23CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Offset23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Offset23Type attributes");
             }
           delete $1;
          }
        ;

y_Offset23_Offset23Type :
          Offset23START y_Offset23Type Offset23END
          {$$ = $2;
           $$->printElement = "Offset23";
          }
        ;

y_OffsetDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | OffsetDistanceSTART y_LinearValueType OffsetDistanceEND
          {$$ = $2;}
        ;

y_OffsetVolumetricPerformance_LinearValueType :
          OffsetVolumetricPerformanceSTART y_LinearValueType
          OffsetVolumetricPerformanceEND
          {$$ = $2;}
        ;

y_OffsetZone_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | OffsetZoneSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          OffsetZoneEND
          {$$ = $4;}
        ;

y_Offset_LinearValueType :
          OffsetSTART y_LinearValueType OffsetEND
          {$$ = $2;}
        ;

y_Offset_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | OffsetSTART y_LinearValueType OffsetEND
          {$$ = $2;}
        ;

y_Offset_PlaneOffsetType :
          OffsetSTART y_PlaneOffsetType OffsetEND
          {$$ = $2;
           $$->printElement = "Offset";
          }
        ;

y_Offset_VectorType :
          OffsetSTART y_VectorType OffsetEND
          {$$ = $2;}
        ;

y_Offset_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | OffsetSTART ENDITEM {yyReadData = 1;} y_XmlDecimal OffsetEND
          {$$ = $4;}
        ;

y_OneOfActionGroupType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
          y_Steps_NumberedPlanElementsType
          {$$ = new OneOfActionGroupType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_OneOfActionGroup_OneOfActionGroupType :
          OneOfActionGroupSTART y_OneOfActionGroupType OneOfActionGroupEND
          {$$ = $2;
           $$->printElement = "OneOfActionGroup";
          }
        ;

y_OneOfPlanRoot_OneOfActionGroupType :
          OneOfPlanRootSTART y_OneOfActionGroupType OneOfPlanRootEND
          {$$ = $2;
           $$->printElement = "OneOfPlanRoot";
          }
        ;

y_OneSide_WeldFilletOneSideType :
          OneSideSTART ENDWHOLEITEM
          {$$ = new WeldFilletOneSideType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "OneSide";
          }
        | OneSideSTART y_WeldFilletOneSideType OneSideEND
          {$$ = $2;
           $$->printElement = "OneSide";
          }
        ;

y_OneSide_WeldGrooveOneSideType :
          OneSideSTART y_WeldGrooveOneSideType OneSideEND
          {$$ = $2;}
        ;

y_OneSidedCapabilityCalculationEnumType :
          DATASTRING
          {$$ = new OneSidedCapabilityCalculationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad OneSidedCapabilityCalculationEnumType value");
          }
        ;

y_OneThirdGrouping_CriterionOutOfType :
          OneThirdGroupingSTART y_CriterionOutOfType OneThirdGroupingEND
          {$$ = $2;}
        ;

y_OpenCurvePointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new OpenCurvePointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad OpenCurvePointSamplingStrategyEnumType value");
          }
        ;

y_OperatorIdentifier_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | OperatorIdentifierSTART ENDITEM {yyReadData = 1;} y_XmlString
          OperatorIdentifierEND
          {$$ = $4;}
        ;

y_OppositeAngledLinesBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_4_u_Check
          {$$ = new OppositeAngledLinesBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledLinesBestFitType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledLinesCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new OppositeAngledLinesCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeAngledLinesCheckedFeatureType :
          ENDITEM y_CheckDetails_OppositeAngledLinesCheckedType_0
          {$$ = new OppositeAngledLinesCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledLinesCheckedType :
          ENDITEM y_OppositeAngledLinesCheckedTypeChoicePair
          {$$ = new OppositeAngledLinesCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledLinesCheckedTypeChoicePair :
          y_Constructed_OppositeAngledLinesConstructionMethodType
          {$$ = new OppositeAngledLinesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesCheckedTypeType = OppositeAngledLinesCheckedTypeChoicePair::ConstructedE;
           $$->OppositeAngledLinesCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new OppositeAngledLinesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesCheckedTypeType = OppositeAngledLinesCheckedTypeChoicePair::MeasuredE;
           $$->OppositeAngledLinesCheckedTypeValue.Measured = $1;
          }
        ;

y_OppositeAngledLinesConstructionMethodType :
          ENDITEM y_OppositeAngledLinesConstructionMethodTypeChoicePair
          {$$ = new OppositeAngledLinesConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledLinesConstructionMethodTypeChoicePair :
          y_BestFit_OppositeAngledLinesBestFitType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::BestFitE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_OppositeAngledLinesCastType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::CastE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_OppositeAngledLinesCopyType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::CopyE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_OppositeAngledLinesFromScanType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::FromScanE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_OppositeAngledLinesIntersectionType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::IntersectionE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.Intersection = $1;
          }
        | y_Projection_OppositeAngledLinesProjectionType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::ProjectionE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.Projection = $1;
          }
        | y_Recompensated_OppositeAngledLinesRecompType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::RecompensatedE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_OppositeAngledLinesTransformType
          {$$ = new OppositeAngledLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesConstructionMethodTypeType = OppositeAngledLinesConstructionMethodTypeChoicePair::TransformE;
           $$->OppositeAngledLinesConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_OppositeAngledLinesCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeAngledLines_BaseFeatureType
          {$$ = new OppositeAngledLinesCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeAngledLinesFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Width_LinearValueType y_Length_LinearValueType_0
          y_EndType_SlotEndType y_TaperAngle_AngularValueType
          y_SingleOpenEnd_XmlBoolean_0 y_EndRadius1_EndRadiusType_0
          y_EndRadius2_EndRadiusType_0
          {$$ = new OppositeAngledLinesFeatureDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledLinesFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledLinesFeatureDefinition_OppositeAngledLinesFeatureDefinitionType :
          OppositeAngledLinesFeatureDefinitionSTART
          y_OppositeAngledLinesFeatureDefinitionType
          OppositeAngledLinesFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OppositeAngledLinesFeatureDefinition";
          }
        ;

y_OppositeAngledLinesFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_OppositeAngledLinesMeasurementDeterminationType
          {$$ = new OppositeAngledLinesFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledLinesFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledLinesFeatureItem_OppositeAngledLinesFeatureItemType :
          OppositeAngledLinesFeatureItemSTART
          y_OppositeAngledLinesFeatureItemType
          OppositeAngledLinesFeatureItemEND
          {$$ = $2;
           $$->printElement = "OppositeAngledLinesFeatureItem";
          }
        ;

y_OppositeAngledLinesFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_CenterLine_MeasuredPointAndVectorType_0
          y_Normal_MeasuredUnitVectorType_0
          y_Width_MeasuredLinearValueType_0
          y_WidthMin_MeasuredLinearValueType_0
          y_WidthMax_MeasuredLinearValueType_0
          y_Length_MeasuredLinearValueType_0
          y_LengthMin_MeasuredLinearValueType_0
          y_LengthMax_MeasuredLinearValueType_0
          y_TaperAngle_MeasuredAngularValueType_0
          y_EndRadius1_MeasuredEndRadiusType_0
          y_EndRadius2_MeasuredEndRadiusType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new OppositeAngledLinesFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledLinesFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledLinesFeatureMeasurement_OppositeAngledLinesFeatureMeasurementType :
          OppositeAngledLinesFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OppositeAngledLinesFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OppositeAngledLinesFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OppositeAngledLinesFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OppositeAngledLinesFeatureMeasurementSTART
          y_OppositeAngledLinesFeatureMeasurementType
          OppositeAngledLinesFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OppositeAngledLinesFeatureMeasurement";
          }
        ;

y_OppositeAngledLinesFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_CenterLine_PointAndVectorType y_Normal_UnitVectorType
          y_Constructed_OppositeAngledLinesConstructionMethodType_0
          {$$ = new OppositeAngledLinesFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledLinesFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledLinesFeatureNominal_OppositeAngledLinesFeatureNominalType :
          OppositeAngledLinesFeatureNominalSTART
          y_OppositeAngledLinesFeatureNominalType
          OppositeAngledLinesFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OppositeAngledLinesFeatureNominal";
          }
        ;

y_OppositeAngledLinesFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_Depth_LinearValueType
          {$$ = new OppositeAngledLinesFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_OppositeAngledLinesIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_IntersectionPlane_BaseFeatureType
          y_IntersectionFeature_BaseFeatureType
          {$$ = new OppositeAngledLinesIntersectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeAngledLinesMeasurementDeterminationType :
          ENDITEM
          y_OppositeAngledLinesMeasurementDeterminationTypeChoicePair
          {$$ = new OppositeAngledLinesMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledLinesMeasurementDeterminationTypeChoicePair :
          y_Checked_OppositeAngledLinesCheckedFeatureType
          {$$ = new OppositeAngledLinesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesMeasurementDeterminationTypeType = OppositeAngledLinesMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->OppositeAngledLinesMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new OppositeAngledLinesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesMeasurementDeterminationTypeType = OppositeAngledLinesMeasurementDeterminationTypeChoicePair::SetE;
           $$->OppositeAngledLinesMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_OppositeAngledLinesPointSamplingStrategyType :
          ENDITEM y_OppositeAngledLinesPointSamplingStrategyTypeChoicePair
          {$$ = new OppositeAngledLinesPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledLinesPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType
          {$$ = new OppositeAngledLinesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesPointSamplingStrategyTypeType = OppositeAngledLinesPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->OppositeAngledLinesPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new OppositeAngledLinesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledLinesPointSamplingStrategyTypeType = OppositeAngledLinesPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->OppositeAngledLinesPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_OppositeAngledLinesProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionPlane_BaseFeatureType
          y_ProjectionOppositeAngledLines_BaseFeatureType
          {$$ = new OppositeAngledLinesProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeAngledLinesRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new OppositeAngledLinesRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeAngledLinesTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeAngledLines_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new OppositeAngledLinesTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeAngledP_1118_OppositeAngledP_1118_Type :
          y_OppositeAngledP_1118_Type
          {$$ = $1;}
        ;

y_OppositeAngledP_1118_Type :
          y_OppositeAngledP_1118_TypeChoicePair
          {$$ = new OppositeAngledP_1118_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_OppositeAngledP_1118_TypeChoicePair :
          y_DraftAngle_AngularValueType
          {$$ = new OppositeAngledP_1118_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledP_1118_TypeType = OppositeAngledP_1118_TypeChoicePair::DraftAngleE;
           $$->OppositeAngledP_1118_TypeValue.DraftAngle = $1;
          }
        | y_TaperAngle_AngularValueType
          {$$ = new OppositeAngledP_1118_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledP_1118_TypeType = OppositeAngledP_1118_TypeChoicePair::TaperAngleE;
           $$->OppositeAngledP_1118_TypeValue.TaperAngle = $1;
          }
        ;

y_OppositeAngledP_1119_OppositeAngledP_1119_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_OppositeAngledP_1119_Type
          {$$ = $1;}
        ;

y_OppositeAngledP_1119_Type :
          y_OppositeAngledP_1119_TypeChoicePair
          {$$ = new OppositeAngledP_1119_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_OppositeAngledP_1119_TypeChoicePair :
          y_DraftAngle_MeasuredAngularValueType
          {$$ = new OppositeAngledP_1119_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledP_1119_TypeType = OppositeAngledP_1119_TypeChoicePair::DraftAngleE;
           $$->OppositeAngledP_1119_TypeValue.DraftAngle = $1;
          }
        | y_TaperAngle_MeasuredAngularValueType
          {$$ = new OppositeAngledP_1119_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledP_1119_TypeType = OppositeAngledP_1119_TypeChoicePair::TaperAngleE;
           $$->OppositeAngledP_1119_TypeValue.TaperAngle = $1;
          }
        ;

y_OppositeAngledPlanesBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new OppositeAngledPlanesBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledPlanesBestFitType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledPlanesCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new OppositeAngledPlanesCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeAngledPlanesCheckedFeatureType :
          ENDITEM y_CheckDetails_OppositeAngledPlanesCheckedType_0
          {$$ = new OppositeAngledPlanesCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledPlanesCheckedType :
          ENDITEM y_OppositeAngledPlanesCheckedTypeChoicePair
          {$$ = new OppositeAngledPlanesCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledPlanesCheckedTypeChoicePair :
          y_Constructed_OppositeAngledPlanesConstructionMethodType
          {$$ = new OppositeAngledPlanesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesCheckedTypeType = OppositeAngledPlanesCheckedTypeChoicePair::ConstructedE;
           $$->OppositeAngledPlanesCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new OppositeAngledPlanesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesCheckedTypeType = OppositeAngledPlanesCheckedTypeChoicePair::MeasuredE;
           $$->OppositeAngledPlanesCheckedTypeValue.Measured = $1;
          }
        ;

y_OppositeAngledPlanesConstructionMethodType :
          ENDITEM y_OppositeAngledPlanesConstructionMethodTypeChoicePair
          {$$ = new OppositeAngledPlanesConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledPlanesConstructionMethodTypeChoicePair :
          y_BestFit_OppositeAngledPlanesBestFitType
          {$$ = new OppositeAngledPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesConstructionMethodTypeType = OppositeAngledPlanesConstructionMethodTypeChoicePair::BestFitE;
           $$->OppositeAngledPlanesConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_OppositeAngledPlanesCastType
          {$$ = new OppositeAngledPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesConstructionMethodTypeType = OppositeAngledPlanesConstructionMethodTypeChoicePair::CastE;
           $$->OppositeAngledPlanesConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_OppositeAngledPlanesCopyType
          {$$ = new OppositeAngledPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesConstructionMethodTypeType = OppositeAngledPlanesConstructionMethodTypeChoicePair::CopyE;
           $$->OppositeAngledPlanesConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_OppositeAngledPlanesFromScanType
          {$$ = new OppositeAngledPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesConstructionMethodTypeType = OppositeAngledPlanesConstructionMethodTypeChoicePair::FromScanE;
           $$->OppositeAngledPlanesConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Recompensated_OppositeAngledPlanesRecompType
          {$$ = new OppositeAngledPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesConstructionMethodTypeType = OppositeAngledPlanesConstructionMethodTypeChoicePair::RecompensatedE;
           $$->OppositeAngledPlanesConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_OppositeAngledPlanesTransformType
          {$$ = new OppositeAngledPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesConstructionMethodTypeType = OppositeAngledPlanesConstructionMethodTypeChoicePair::TransformE;
           $$->OppositeAngledPlanesConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_OppositeAngledPlanesCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeAngledPlanes_BaseFeatureType
          {$$ = new OppositeAngledPlanesCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeAngledPlanesFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Width_LinearValueType y_Length_LinearValueType_0
          y_EndType_SlotEndType y_Depth_LinearValueType_0
          y_Bottom_BottomType_0 y_SingleOpenEnd_XmlBoolean_0
          y_EndRadius1_EndRadiusType_0 y_EndRadius2_EndRadiusType_0
          y_OppositeAngledP_1118_OppositeAngledP_1118_Type
          {$$ = new OppositeAngledPlanesFeatureDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledPlanesFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledPlanesFeatureDefinition_OppositeAngledPlanesFeatureDefinitionType :
          OppositeAngledPlanesFeatureDefinitionSTART
          y_OppositeAngledPlanesFeatureDefinitionType
          OppositeAngledPlanesFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OppositeAngledPlanesFeatureDefinition";
          }
        ;

y_OppositeAngledPlanesFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_OppositeAngledPlanesMeasurementDeterminationType
          {$$ = new OppositeAngledPlanesFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledPlanesFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledPlanesFeatureItem_OppositeAngledPlanesFeatureItemType :
          OppositeAngledPlanesFeatureItemSTART
          y_OppositeAngledPlanesFeatureItemType
          OppositeAngledPlanesFeatureItemEND
          {$$ = $2;
           $$->printElement = "OppositeAngledPlanesFeatureItem";
          }
        ;

y_OppositeAngledPlanesFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_CenterPlane_MeasuredPlaneType_0
          y_LengthVector_MeasuredUnitVectorType_0
          y_DepthVector_MeasuredUnitVectorType_0
          y_Width_MeasuredLinearValueType_0
          y_WidthMin_MeasuredLinearValueType_0
          y_WidthMax_MeasuredLinearValueType_0
          y_Length_MeasuredLinearValueType_0
          y_LengthMin_MeasuredLinearValueType_0
          y_LengthMax_MeasuredLinearValueType_0
          y_Depth_MeasuredLinearValueType_0
          y_OppositeAngledP_1119_OppositeAngledP_1119_Type_0
          y_EndRadius1_MeasuredEndRadiusType_0
          y_EndRadius2_MeasuredEndRadiusType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new OppositeAngledPlanesFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledPlanesFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledPlanesFeatureMeasurement_OppositeAngledPlanesFeatureMeasurementType :
          OppositeAngledPlanesFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OppositeAngledPlanesFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OppositeAngledPlanesFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OppositeAngledPlanesFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OppositeAngledPlanesFeatureMeasurementSTART
          y_OppositeAngledPlanesFeatureMeasurementType
          OppositeAngledPlanesFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OppositeAngledPlanesFeatureMeasurement";
          }
        ;

y_OppositeAngledPlanesFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_CenterPlane_PlaneType y_LengthVector_UnitVectorType_0
          y_DepthVector_UnitVectorType_0 y_DraftVector_UnitVectorType_0
          y_Constructed_OppositeAngledPlanesConstructionMethodType_0
          {$$ = new OppositeAngledPlanesFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeAngledPlanesFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OppositeAngledPlanesFeatureNominal_OppositeAngledPlanesFeatureNominalType :
          OppositeAngledPlanesFeatureNominalSTART
          y_OppositeAngledPlanesFeatureNominalType
          OppositeAngledPlanesFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OppositeAngledPlanesFeatureNominal";
          }
        ;

y_OppositeAngledPlanesFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          {$$ = new OppositeAngledPlanesFromScanType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeAngledPlanesMeasurementDeterminationType :
          ENDITEM
          y_OppositeAngledPlanesMeasurementDeterminationTypeChoicePair
          {$$ = new OppositeAngledPlanesMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledPlanesMeasurementDeterminationTypeChoicePair :
          y_Checked_OppositeAngledPlanesCheckedFeatureType
          {$$ = new OppositeAngledPlanesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesMeasurementDeterminationTypeType = OppositeAngledPlanesMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->OppositeAngledPlanesMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new OppositeAngledPlanesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesMeasurementDeterminationTypeType = OppositeAngledPlanesMeasurementDeterminationTypeChoicePair::SetE;
           $$->OppositeAngledPlanesMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_OppositeAngledPlanesPointSamplingStrategyType :
          ENDITEM y_OppositeAngledPlanesPointSamplingStrategyTypeChoicePair
          {$$ = new OppositeAngledPlanesPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeAngledPlanesPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_PlanePointSamplingStrategyEnumType
          {$$ = new OppositeAngledPlanesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesPointSamplingStrategyTypeType = OppositeAngledPlanesPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->OppositeAngledPlanesPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new OppositeAngledPlanesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeAngledPlanesPointSamplingStrategyTypeType = OppositeAngledPlanesPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->OppositeAngledPlanesPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_OppositeAngledPlanesRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new OppositeAngledPlanesRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeAngledPlanesTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeAngledPlanes_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new OppositeAngledPlanesTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeParallelLinesBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check
          {$$ = new OppositeParallelLinesBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelLinesBestFitType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelLinesCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new OppositeParallelLinesCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeParallelLinesCheckedFeatureType :
          ENDITEM y_CheckDetails_OppositeParallelLinesCheckedType_0
          {$$ = new OppositeParallelLinesCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelLinesCheckedType :
          ENDITEM y_OppositeParallelLinesCheckedTypeChoicePair
          {$$ = new OppositeParallelLinesCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelLinesCheckedTypeChoicePair :
          y_Constructed_OppositeParallelLinesConstructionMethodType
          {$$ = new OppositeParallelLinesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesCheckedTypeType = OppositeParallelLinesCheckedTypeChoicePair::ConstructedE;
           $$->OppositeParallelLinesCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new OppositeParallelLinesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesCheckedTypeType = OppositeParallelLinesCheckedTypeChoicePair::MeasuredE;
           $$->OppositeParallelLinesCheckedTypeValue.Measured = $1;
          }
        ;

y_OppositeParallelLinesConstructionMethodType :
          ENDITEM y_OppositeParallelLinesConstructionMethodTypeChoicePair
          {$$ = new OppositeParallelLinesConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelLinesConstructionMethodTypeChoicePair :
          y_BestFit_OppositeParallelLinesBestFitType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::BestFitE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_OppositeParallelLinesCastType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::CastE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_OppositeParallelLinesCopyType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::CopyE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_OppositeParallelLinesFromScanType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::FromScanE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_OppositeParallelLinesIntersectionType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::IntersectionE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.Intersection = $1;
          }
        | y_Projection_OppositeParallelLinesProjectionType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::ProjectionE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.Projection = $1;
          }
        | y_Recompensated_OppositeParallelLinesRecompType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::RecompensatedE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_OppositeParallelLinesTransformType
          {$$ = new OppositeParallelLinesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesConstructionMethodTypeType = OppositeParallelLinesConstructionMethodTypeChoicePair::TransformE;
           $$->OppositeParallelLinesConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_OppositeParallelLinesCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeParallelLines_BaseFeatureType
          {$$ = new OppositeParallelLinesCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeParallelLinesFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Width_LinearValueType y_Length_LinearValueType_0
          y_EndType_SlotEndType y_SingleOpenEnd_XmlBoolean_0
          y_EndRadius1_EndRadiusType_0 y_EndRadius2_EndRadiusType_0
          {$$ = new OppositeParallelLinesFeatureDefinitionType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelLinesFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelLinesFeatureDefinition_OppositeParallelLinesFeatureDefinitionType :
          OppositeParallelLinesFeatureDefinitionSTART
          y_OppositeParallelLinesFeatureDefinitionType
          OppositeParallelLinesFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OppositeParallelLinesFeatureDefinition";
          }
        ;

y_OppositeParallelLinesFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_OppositeParallelLinesMeasurementDeterminationType
          {$$ = new OppositeParallelLinesFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelLinesFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelLinesFeatureItem_OppositeParallelLinesFeatureItemType :
          OppositeParallelLinesFeatureItemSTART
          y_OppositeParallelLinesFeatureItemType
          OppositeParallelLinesFeatureItemEND
          {$$ = $2;
           $$->printElement = "OppositeParallelLinesFeatureItem";
          }
        ;

y_OppositeParallelLinesFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_CenterLine_MeasuredPointAndVectorType_0
          y_Normal_MeasuredUnitVectorType_0
          y_Width_MeasuredLinearValueType_0
          y_WidthMin_MeasuredLinearValueType_0
          y_WidthMax_MeasuredLinearValueType_0
          y_Length_MeasuredLinearValueType_0
          y_LengthMin_MeasuredLinearValueType_0
          y_LengthMax_MeasuredLinearValueType_0
          y_EndRadius1_MeasuredEndRadiusType_0
          y_EndRadius2_MeasuredEndRadiusType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new OppositeParallelLinesFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelLinesFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelLinesFeatureMeasurement_OppositeParallelLinesFeatureMeasurementType :
          OppositeParallelLinesFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OppositeParallelLinesFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OppositeParallelLinesFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OppositeParallelLinesFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OppositeParallelLinesFeatureMeasurementSTART
          y_OppositeParallelLinesFeatureMeasurementType
          OppositeParallelLinesFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OppositeParallelLinesFeatureMeasurement";
          }
        ;

y_OppositeParallelLinesFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_CenterLine_PointAndVectorType y_Normal_UnitVectorType
          y_Constructed_OppositeParallelLinesConstructionMethodType_0
          {$$ = new OppositeParallelLinesFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelLinesFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelLinesFeatureNominal_OppositeParallelLinesFeatureNominalType :
          OppositeParallelLinesFeatureNominalSTART
          y_OppositeParallelLinesFeatureNominalType
          OppositeParallelLinesFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OppositeParallelLinesFeatureNominal";
          }
        ;

y_OppositeParallelLinesFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_Depth_LinearValueType
          {$$ = new OppositeParallelLinesFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_OppositeParallelLinesIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_IntersectionPlane_BaseFeatureType
          y_IntersectionFeature_BaseFeatureType
          {$$ = new OppositeParallelLinesIntersectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeParallelLinesMeasurementDeterminationType :
          ENDITEM
          y_OppositeParallelLinesMeasurementDeterminationTypeChoicePair
          {$$ = new OppositeParallelLinesMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelLinesMeasurementDeterminationTypeChoicePair :
          y_Checked_OppositeParallelLinesCheckedFeatureType
          {$$ = new OppositeParallelLinesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesMeasurementDeterminationTypeType = OppositeParallelLinesMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->OppositeParallelLinesMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new OppositeParallelLinesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesMeasurementDeterminationTypeType = OppositeParallelLinesMeasurementDeterminationTypeChoicePair::SetE;
           $$->OppositeParallelLinesMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_OppositeParallelLinesPointSamplingStrategyType :
          ENDITEM
          y_OppositeParallelLinesPointSamplingStrategyTypeChoicePair
          {$$ = new OppositeParallelLinesPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelLinesPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType
          {$$ = new OppositeParallelLinesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesPointSamplingStrategyTypeType = OppositeParallelLinesPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->OppositeParallelLinesPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new OppositeParallelLinesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelLinesPointSamplingStrategyTypeType = OppositeParallelLinesPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->OppositeParallelLinesPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_OppositeParallelLinesProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionPlane_BaseFeatureType
          y_ProjectionOppositeParallelLines_BaseFeatureType
          {$$ = new OppositeParallelLinesProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeParallelLinesRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new OppositeParallelLinesRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeParallelLinesTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeParallelLines_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new OppositeParallelLinesTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeParallelPlanesBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_4_u_Check
          {$$ = new OppositeParallelPlanesBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelPlanesBestFitType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelPlanesCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new OppositeParallelPlanesCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeParallelPlanesCheckedFeatureType :
          ENDITEM y_CheckDetails_OppositeParallelPlanesCheckedType_0
          {$$ = new OppositeParallelPlanesCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelPlanesCheckedType :
          ENDITEM y_OppositeParallelPlanesCheckedTypeChoicePair
          {$$ = new OppositeParallelPlanesCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelPlanesCheckedTypeChoicePair :
          y_Constructed_OppositeParallelPlanesConstructionMethodType
          {$$ = new OppositeParallelPlanesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesCheckedTypeType = OppositeParallelPlanesCheckedTypeChoicePair::ConstructedE;
           $$->OppositeParallelPlanesCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new OppositeParallelPlanesCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesCheckedTypeType = OppositeParallelPlanesCheckedTypeChoicePair::MeasuredE;
           $$->OppositeParallelPlanesCheckedTypeValue.Measured = $1;
          }
        ;

y_OppositeParallelPlanesConstructionMethodType :
          ENDITEM y_OppositeParallelPlanesConstructionMethodTypeChoicePair
          {$$ = new OppositeParallelPlanesConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelPlanesConstructionMethodTypeChoicePair :
          y_BestFit_OppositeParallelPlanesBestFitType
          {$$ = new OppositeParallelPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesConstructionMethodTypeType = OppositeParallelPlanesConstructionMethodTypeChoicePair::BestFitE;
           $$->OppositeParallelPlanesConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_OppositeParallelPlanesCastType
          {$$ = new OppositeParallelPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesConstructionMethodTypeType = OppositeParallelPlanesConstructionMethodTypeChoicePair::CastE;
           $$->OppositeParallelPlanesConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_OppositeParallelPlanesCopyType
          {$$ = new OppositeParallelPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesConstructionMethodTypeType = OppositeParallelPlanesConstructionMethodTypeChoicePair::CopyE;
           $$->OppositeParallelPlanesConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_OppositeParallelPlanesFromScanType
          {$$ = new OppositeParallelPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesConstructionMethodTypeType = OppositeParallelPlanesConstructionMethodTypeChoicePair::FromScanE;
           $$->OppositeParallelPlanesConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Recompensated_OppositeParallelPlanesRecompType
          {$$ = new OppositeParallelPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesConstructionMethodTypeType = OppositeParallelPlanesConstructionMethodTypeChoicePair::RecompensatedE;
           $$->OppositeParallelPlanesConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_OppositeParallelPlanesTransformType
          {$$ = new OppositeParallelPlanesConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesConstructionMethodTypeType = OppositeParallelPlanesConstructionMethodTypeChoicePair::TransformE;
           $$->OppositeParallelPlanesConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_OppositeParallelPlanesCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeParallelPlanes_BaseFeatureType
          {$$ = new OppositeParallelPlanesCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeParallelPlanesFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Width_LinearValueType y_Length_LinearValueType_0
          y_EndType_SlotEndType y_Depth_LinearValueType_0
          y_Bottom_BottomType_0 y_SingleOpenEnd_XmlBoolean_0
          y_EndRadius1_EndRadiusType_0 y_EndRadius2_EndRadiusType_0
          {$$ = new OppositeParallelPlanesFeatureDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelPlanesFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelPlanesFeatureDefinition_OppositeParallelPlanesFeatureDefinitionType :
          OppositeParallelPlanesFeatureDefinitionSTART
          y_OppositeParallelPlanesFeatureDefinitionType
          OppositeParallelPlanesFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OppositeParallelPlanesFeatureDefinition";
          }
        ;

y_OppositeParallelPlanesFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_OppositeParallelPlanesMeasurementDeterminationType
          {$$ = new OppositeParallelPlanesFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelPlanesFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelPlanesFeatureItem_OppositeParallelPlanesFeatureItemType :
          OppositeParallelPlanesFeatureItemSTART
          y_OppositeParallelPlanesFeatureItemType
          OppositeParallelPlanesFeatureItemEND
          {$$ = $2;
           $$->printElement = "OppositeParallelPlanesFeatureItem";
          }
        ;

y_OppositeParallelPlanesFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_CenterPlane_MeasuredPlaneType_0
          y_LengthVector_MeasuredUnitVectorType_0
          y_DepthVector_MeasuredUnitVectorType_0
          y_Width_MeasuredLinearValueType_0
          y_WidthMin_MeasuredLinearValueType_0
          y_WidthMax_MeasuredLinearValueType_0
          y_Length_MeasuredLinearValueType_0
          y_LengthMin_MeasuredLinearValueType_0
          y_LengthMax_MeasuredLinearValueType_0
          y_Depth_MeasuredLinearValueType_0
          y_EndRadius1_MeasuredEndRadiusType_0
          y_EndRadius2_MeasuredEndRadiusType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new OppositeParallelPlanesFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelPlanesFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelPlanesFeatureMeasurement_OppositeParallelPlanesFeatureMeasurementType :
          OppositeParallelPlanesFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OppositeParallelPlanesFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OppositeParallelPlanesFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OppositeParallelPlanesFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OppositeParallelPlanesFeatureMeasurementSTART
          y_OppositeParallelPlanesFeatureMeasurementType
          OppositeParallelPlanesFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OppositeParallelPlanesFeatureMeasurement";
          }
        ;

y_OppositeParallelPlanesFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_CenterPlane_PlaneType y_LengthVector_UnitVectorType_0
          y_DepthVector_UnitVectorType_0
          y_Constructed_OppositeParallelPlanesConstructionMethodType_0
          {$$ = new OppositeParallelPlanesFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OppositeParallelPlanesFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OppositeParallelPlanesFeatureNominal_OppositeParallelPlanesFeatureNominalType :
          OppositeParallelPlanesFeatureNominalSTART
          y_OppositeParallelPlanesFeatureNominalType
          OppositeParallelPlanesFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OppositeParallelPlanesFeatureNominal";
          }
        ;

y_OppositeParallelPlanesFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          {$$ = new OppositeParallelPlanesFromScanType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OppositeParallelPlanesMeasurementDeterminationType :
          ENDITEM
          y_OppositeParallelPlanesMeasurementDeterminationTypeChoicePair
          {$$ = new OppositeParallelPlanesMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelPlanesMeasurementDeterminationTypeChoicePair :
          y_Checked_OppositeParallelPlanesCheckedFeatureType
          {$$ = new OppositeParallelPlanesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesMeasurementDeterminationTypeType = OppositeParallelPlanesMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->OppositeParallelPlanesMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new OppositeParallelPlanesMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesMeasurementDeterminationTypeType = OppositeParallelPlanesMeasurementDeterminationTypeChoicePair::SetE;
           $$->OppositeParallelPlanesMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_OppositeParallelPlanesPointSamplingStrategyType :
          ENDITEM
          y_OppositeParallelPlanesPointSamplingStrategyTypeChoicePair
          {$$ = new OppositeParallelPlanesPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OppositeParallelPlanesPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_PlanePointSamplingStrategyEnumType
          {$$ = new OppositeParallelPlanesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesPointSamplingStrategyTypeType = OppositeParallelPlanesPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->OppositeParallelPlanesPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new OppositeParallelPlanesPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OppositeParallelPlanesPointSamplingStrategyTypeType = OppositeParallelPlanesPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->OppositeParallelPlanesPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_OppositeParallelPlanesRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new OppositeParallelPlanesRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OppositeParallelPlanesTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOppositeParallelPlanes_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new OppositeParallelPlanesTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_OpticalComparatorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_Magnification_XmlDecimal_0
          y_EffectiveScreenDiameter_LinearValueType_0
          y_ScreenMaterial_XmlString_0 y_AngleResolution_AngularValueType_0
          y_SurfaceIlluminationLightSource_XmlString_0
          y_ContourIlluminationLightSource_XmlString_0
          y_MaxWorkpieceHeight_LinearValueType_0
          y_WorkingDistance_LinearValueType_0
          y_ToolIds_ArrayReferenceType_0
          {$$ = new OpticalComparatorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OpticalComparatorType attributes");
             }
           delete $1;
          }
        ;

y_OpticalComparator_OpticalComparatorType :
          OpticalComparatorSTART y_OpticalComparatorType
          OpticalComparatorEND
          {$$ = $2;
           $$->printElement = "OpticalComparator";
          }
        ;

y_OpticalFiberCableLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | OpticalFiberCableLengthSTART y_LinearValueType
          OpticalFiberCableLengthEND
          {$$ = $2;}
        ;

y_OrType :
          y_LiztAttributePair ENDITEM
          y_LiztBooleanExpression_substituteType_2_u_Check
          {$$ = new OrType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OrType attributes");
             }
           delete $1;
          }
        ;

y_Or_OrType :
          OrSTART y_OrType OrEND
          {$$ = $2;
           $$->printElement = "Or";
          }
        ;

y_OrderNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | OrderNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          OrderNumberEND
          {$$ = $4;}
        ;

y_OrderU_NaturalType :
          OrderUSTART ENDITEM {yyReadData = 1;} y_NaturalType OrderUEND
          {$$ = $4;}
        ;

y_OrderV_NaturalType :
          OrderVSTART ENDITEM {yyReadData = 1;} y_NaturalType OrderVEND
          {$$ = $4;}
        ;

y_Order_NaturalType :
          OrderSTART ENDITEM {yyReadData = 1;} y_NaturalType OrderEND
          {$$ = $4;}
        ;

y_OrderedActionGroupType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
          y_Steps_NumberedPlanElementsType
          {$$ = new OrderedActionGroupType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_OrderedActionGroup_OrderedActionGroupType :
          OrderedActionGroupSTART y_OrderedActionGroupType
          OrderedActionGroupEND
          {$$ = $2;
           $$->printElement = "OrderedActionGroup";
          }
        ;

y_OrderedPlanRoot_OrderedActionGroupType :
          OrderedPlanRootSTART y_OrderedActionGroupType OrderedPlanRootEND
          {$$ = $2;
           $$->printElement = "OrderedPlanRoot";
          }
        ;

y_OrdersU_ArrayNaturalType :
          OrdersUSTART y_ArrayNaturalType OrdersUEND
          {$$ = $2;}
        ;

y_OrdersV_ArrayNaturalType :
          OrdersVSTART y_ArrayNaturalType OrdersVEND
          {$$ = $2;}
        ;

y_Orders_ArrayNaturalType :
          OrdersSTART y_ArrayNaturalType OrdersEND
          {$$ = $2;}
        ;

y_OrganizationType :
          ENDITEM y_Name_XmlToken y_Address_PhysicalAddressType_0
          y_Attributes_AttributesType_0
          {$$ = new OrganizationType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Organization_StandardsOrganizationType :
          OrganizationSTART y_StandardsOrganizationType OrganizationEND
          {$$ = $2;}
        ;

y_Organization_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | OrganizationSTART ENDITEM {yyReadData = 1;} y_XmlString
          OrganizationEND
          {$$ = $4;}
        ;

y_OrientationChar_1064_OrientationChar_1064_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_OrientationChar_1064_Type
          {$$ = $1;}
        ;

y_OrientationChar_1064_Type :
          y_OrientationChar_1064_TypeChoicePair
          {$$ = new OrientationChar_1064_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_OrientationChar_1064_TypeChoicePair :
          y_EachElement_XmlBoolean
          {$$ = new OrientationChar_1064_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OrientationChar_1064_TypeType = OrientationChar_1064_TypeChoicePair::EachElementE;
           $$->OrientationChar_1064_TypeValue.EachElement = $1;
          }
        | y_EachRadialElement_XmlBoolean
          {$$ = new OrientationChar_1064_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OrientationChar_1064_TypeType = OrientationChar_1064_TypeChoicePair::EachRadialElementE;
           $$->OrientationChar_1064_TypeValue.EachRadialElement = $1;
          }
        ;

y_OrientationCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_BonusStats_StatsLinearType_0
          y_ReferenceLengthStats_StatsLinearType_0
          {$$ = new OrientationCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
          }
        ;

y_OrientationCharacteristicStats_OrientationCharacteristicStatsEvalType :
          OrientationCharacteristicStatsSTART
          y_OrientationCharacteristicStatsEvalType
          OrientationCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "OrientationCharacteristicStats";
          }
        ;

y_OrientationDiametricalZoneType :
          ENDITEM y_ZoneOrientationVector_UnitVectorType_0
          {$$ = new OrientationDiametricalZoneType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OrientationOnly_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | OrientationOnlySTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          OrientationOnlyEND
          {$$ = $4;}
        ;

y_OrientationPlanarZoneType :
          ENDITEM y_ZoneOrientationVector_UnitVectorType_0
          {$$ = new OrientationPlanarZoneType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OrientationPlaneEnum_ModifyingPlaneEnumType :
          OrientationPlaneEnumSTART ENDITEM {yyReadData = 1;}
          y_ModifyingPlaneEnumType OrientationPlaneEnumEND
          {$$ = $4;}
        ;

y_OrientationPlaneType :
          ENDITEM y_OrientationPlaneEnum_ModifyingPlaneEnumType
          y_DatumDefinitionId_QIFReferenceFullType
          {$$ = new OrientationPlaneType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OrientationPlane_OrientationPlaneType_0 :
          /* empty */
          {$$ = 0;}
        | OrientationPlaneSTART y_OrientationPlaneType OrientationPlaneEND
          {$$ = $2;}
        ;

y_OrientationZoneShapeType :
          ENDITEM y_OrientationZoneShapeTypeChoicePair
          {$$ = new OrientationZoneShapeType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OrientationZoneShapeTypeChoicePair :
          y_DiametricalZone_OrientationDiametricalZoneType
          {$$ = new OrientationZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OrientationZoneShapeTypeType = OrientationZoneShapeTypeChoicePair::DiametricalZoneE;
           $$->OrientationZoneShapeTypeValue.DiametricalZone = $1;
          }
        | y_PlanarZone_OrientationPlanarZoneType
          {$$ = new OrientationZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OrientationZoneShapeTypeType = OrientationZoneShapeTypeChoicePair::PlanarZoneE;
           $$->OrientationZoneShapeTypeValue.PlanarZone = $1;
          }
        ;

y_Orientation_QuaternionType :
          OrientationSTART y_QuaternionType OrientationEND
          {$$ = $2;}
        ;

y_OrientedLatitudeLongitudeSweepType :
          ENDITEM y_DirMeridianPrime_UnitVectorType
          y_DomainLatitude_AngleRangeType y_DomainLongitude_AngleRangeType
          y_DirNorthPole_UnitVectorType
          {$$ = new OrientedLatitudeLongitudeSweepType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_OriginDirection_UnitVectorType :
          OriginDirectionSTART y_UnitVectorType OriginDirectionEND
          {$$ = $2;}
        ;

y_OriginEntity_AlignmentFeatureType :
          OriginEntitySTART y_AlignmentFeatureType OriginEntityEND
          {$$ = $2;}
        ;

y_OriginReferenceType :
          ENDITEM y_OriginReferenceTypeChoicePair
          {$$ = new OriginReferenceType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OriginReferenceTypeChoicePair :
          y_DatumDefinitionId_QIFReferenceFullType
          {$$ = new OriginReferenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OriginReferenceTypeType = OriginReferenceTypeChoicePair::DatumDefinitionIdE;
           $$->OriginReferenceTypeValue.DatumDefinitionId = $1;
          }
        | y_OriginReference_1065_OriginReference_1065_Type
          {$$ = new OriginReferenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OriginReferenceTypeType = OriginReferenceTypeChoicePair::OriginReference_1065E;
           $$->OriginReferenceTypeValue.OriginReference_1065 = $1;
          }
        ;

y_OriginReference_1065_OriginReference_1065_Type :
          y_OriginReference_1065_Type
          {$$ = $1;}
        ;

y_OriginReference_1065_Type :
          y_FeatureNominalId_QIFReferenceFullType
          y_ReferencedComponent_ReferencedComponentEnumType
          {$$ = new OriginReference_1065_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OriginReference_OriginReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | OriginReferenceSTART y_OriginReferenceType OriginReferenceEND
          {$$ = $2;}
        ;

y_Origin_MeasurementOriginOffsetType :
          OriginSTART y_MeasurementOriginOffsetType OriginEND
          {$$ = $2;}
        ;

y_Origin_Point2dSimpleType :
          OriginSTART y_Point2dSimpleType OriginEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_Origin_PointSimpleType :
          OriginSTART y_PointSimpleType OriginEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_Origin_PointSimpleType_0 :
          /* empty */
          {$$ = 0;}
        | OriginSTART y_PointSimpleType OriginEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_Origin_PointType :
          OriginSTART y_PointType OriginEND
          {$$ = $2;}
        ;

y_Origin_PointType_0 :
          /* empty */
          {$$ = 0;}
        | OriginSTART y_PointType OriginEND
          {$$ = $2;}
        ;

y_Oscillation_CriterionOutOfType :
          OscillationSTART y_CriterionOutOfType OscillationEND
          {$$ = $2;}
        ;

y_OtherAccuracySource_XmlString :
          OtherAccuracySourceSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherAccuracySourceEND
          {$$ = $4;}
        ;

y_OtherAddressDescription_XmlString :
          OtherAddressDescriptionSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherAddressDescriptionEND
          {$$ = $4;}
        ;

y_OtherArea_XmlString :
          OtherAreaSTART ENDITEM {yyReadData = 1;} y_XmlString OtherAreaEND
          {$$ = $4;}
        ;

y_OtherBottom_XmlString :
          OtherBottomSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherBottomEND
          {$$ = $4;}
        ;

y_OtherCartesianCMMGeometry_XmlString :
          OtherCartesianCMMGeometrySTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherCartesianCMMGeometryEND
          {$$ = $4;}
        ;

y_OtherCharacteristicStatus_XmlString :
          OtherCharacteristicStatusSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherCharacteristicStatusEND
          {$$ = $4;}
        ;

y_OtherControlIssue_XmlString :
          OtherControlIssueSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherControlIssueEND
          {$$ = $4;}
        ;

y_OtherCoordinate_XmlString :
          OtherCoordinateSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherCoordinateEND
          {$$ = $4;}
        ;

y_OtherCurveCheckedFeatureType :
          ENDITEM y_CheckDetails_OtherCurveCheckedType_0
          {$$ = new OtherCurveCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherCurveCheckedType :
          ENDITEM y_OtherCurveCheckedTypeChoicePair
          {$$ = new OtherCurveCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherCurveCheckedTypeChoicePair :
          y_Constructed_OtherCurveConstructionMethodType
          {$$ = new OtherCurveCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherCurveCheckedTypeType = OtherCurveCheckedTypeChoicePair::ConstructedE;
           $$->OtherCurveCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new OtherCurveCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherCurveCheckedTypeType = OtherCurveCheckedTypeChoicePair::MeasuredE;
           $$->OtherCurveCheckedTypeValue.Measured = $1;
          }
        ;

y_OtherCurveConstructionMethodType :
          ENDITEM y_OtherCurveConstructionMethodTypeChoicePair
          {$$ = new OtherCurveConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherCurveConstructionMethodTypeChoicePair :
          y_Copy_OtherCurveFeatureCopyType
          {$$ = new OtherCurveConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherCurveConstructionMethodTypeType = OtherCurveConstructionMethodTypeChoicePair::CopyE;
           $$->OtherCurveConstructionMethodTypeValue.Copy = $1;
          }
        ;

y_OtherCurveFeatureCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOtherCurveFeature_BaseFeatureType
          {$$ = new OtherCurveFeatureCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OtherCurveFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          {$$ = new OtherCurveFeatureDefinitionType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherCurveFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OtherCurveFeatureDefinition_OtherCurveFeatureDefinitionType :
          OtherCurveFeatureDefinitionSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new OtherCurveFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OtherCurveFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherCurveFeatureDefinitionType attributes");
             }
           delete $2;
          }
        | OtherCurveFeatureDefinitionSTART
          y_OtherCurveFeatureDefinitionType OtherCurveFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OtherCurveFeatureDefinition";
          }
        ;

y_OtherCurveFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_OtherCurveMeasurementDeterminationType
          {$$ = new OtherCurveFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherCurveFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OtherCurveFeatureItem_OtherCurveFeatureItemType :
          OtherCurveFeatureItemSTART y_OtherCurveFeatureItemType
          OtherCurveFeatureItemEND
          {$$ = $2;
           $$->printElement = "OtherCurveFeatureItem";
          }
        ;

y_OtherCurveFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          {$$ = new OtherCurveFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherCurveFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OtherCurveFeatureMeasurement_OtherCurveFeatureMeasurementType :
          OtherCurveFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OtherCurveFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OtherCurveFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherCurveFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OtherCurveFeatureMeasurementSTART
          y_OtherCurveFeatureMeasurementType
          OtherCurveFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OtherCurveFeatureMeasurement";
          }
        ;

y_OtherCurveFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_Constructed_OtherCurveConstructionMethodType_0
          {$$ = new OtherCurveFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherCurveFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OtherCurveFeatureNominal_OtherCurveFeatureNominalType :
          OtherCurveFeatureNominalSTART y_OtherCurveFeatureNominalType
          OtherCurveFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OtherCurveFeatureNominal";
          }
        ;

y_OtherCurveMeasurementDeterminationType :
          ENDITEM y_OtherCurveMeasurementDeterminationTypeChoicePair
          {$$ = new OtherCurveMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherCurveMeasurementDeterminationTypeChoicePair :
          y_Checked_OtherCurveCheckedFeatureType
          {$$ = new OtherCurveMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherCurveMeasurementDeterminationTypeType = OtherCurveMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->OtherCurveMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new OtherCurveMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherCurveMeasurementDeterminationTypeType = OtherCurveMeasurementDeterminationTypeChoicePair::SetE;
           $$->OtherCurveMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_OtherDigitalModelFormat_XmlString :
          OtherDigitalModelFormatSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherDigitalModelFormatEND
          {$$ = $4;}
        ;

y_OtherDistributionTransformation_XmlString :
          OtherDistributionTransformationSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherDistributionTransformationEND
          {$$ = $4;}
        ;

y_OtherExclusionReason_XmlString :
          OtherExclusionReasonSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherExclusionReasonEND
          {$$ = $4;}
        ;

y_OtherExtent_XmlString :
          OtherExtentSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherExtentEND
          {$$ = $4;}
        ;

y_OtherFileSpec_XmlString :
          OtherFileSpecSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherFileSpecEND
          {$$ = $4;}
        ;

y_OtherFormCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          {$$ = new OtherFormCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherFormCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OtherFormCharacteristicDefinition_OtherFormCharacteristicDefinitionType :
          OtherFormCharacteristicDefinitionSTART
          y_OtherFormCharacteristicDefinitionType
          OtherFormCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "OtherFormCharacteristicDefinition";
          }
        ;

y_OtherFormCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new OtherFormCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherFormCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_OtherFormCharacteristicItem_OtherFormCharacteristicItemType :
          OtherFormCharacteristicItemSTART
          y_OtherFormCharacteristicItemType OtherFormCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "OtherFormCharacteristicItem";
          }
        ;

y_OtherFormCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new OtherFormCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherFormCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OtherFormCharacteristicMeasurement_OtherFormCharacteristicMeasurementType :
          OtherFormCharacteristicMeasurementSTART
          y_OtherFormCharacteristicMeasurementType
          OtherFormCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "OtherFormCharacteristicMeasurement";
          }
        ;

y_OtherFormCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new OtherFormCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherFormCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_OtherFormCharacteristicNominal_OtherFormCharacteristicNominalType :
          OtherFormCharacteristicNominalSTART
          y_OtherFormCharacteristicNominalType
          OtherFormCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "OtherFormCharacteristicNominal";
          }
        ;

y_OtherFormCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          {$$ = new OtherFormCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_OtherFormCharacteristicStats_OtherFormCharacteristicStatsEvalType :
          OtherFormCharacteristicStatsSTART
          y_OtherFormCharacteristicStatsEvalType
          OtherFormCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "OtherFormCharacteristicStats";
          }
        ;

y_OtherInspectionStatus_XmlString :
          OtherInspectionStatusSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherInspectionStatusEND
          {$$ = $4;}
        ;

y_OtherLevel_XmlString :
          OtherLevelSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherLevelEND
          {$$ = $4;}
        ;

y_OtherManufacturingMethod_XmlString :
          OtherManufacturingMethodSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherManufacturingMethodEND
          {$$ = $4;}
        ;

y_OtherMarkingMethod_XmlString :
          OtherMarkingMethodSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherMarkingMethodEND
          {$$ = $4;}
        ;

y_OtherMaterialClass_XmlString :
          OtherMaterialClassSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherMaterialClassEND
          {$$ = $4;}
        ;

y_OtherMeasureActionGroupFunction_XmlString :
          OtherMeasureActionGroupFunctionSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherMeasureActionGroupFunctionEND
          {$$ = $4;}
        ;

y_OtherMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new OtherMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_OtherMeasureFeatureMethod_OtherMeasureFeatureMethodType :
          OtherMeasureFeatureMethodSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new OtherMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OtherMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        | OtherMeasureFeatureMethodSTART y_OtherMeasureFeatureMethodType
          OtherMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "OtherMeasureFeatureMethod";
          }
        ;

y_OtherMeasurementDirective_XmlString :
          OtherMeasurementDirectiveSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherMeasurementDirectiveEND
          {$$ = $4;}
        ;

y_OtherNonShapeFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString
          {$$ = new OtherNonShapeFeatureDefinitionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherNonShapeFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OtherNonShapeFeatureDefinition_OtherNonShapeFeatureDefinitionType :
          OtherNonShapeFeatureDefinitionSTART
          y_OtherNonShapeFeatureDefinitionType
          OtherNonShapeFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OtherNonShapeFeatureDefinition";
          }
        ;

y_OtherNonShapeFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new OtherNonShapeFeatureItemType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherNonShapeFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OtherNonShapeFeatureItem_OtherNonShapeFeatureItemType :
          OtherNonShapeFeatureItemSTART y_OtherNonShapeFeatureItemType
          OtherNonShapeFeatureItemEND
          {$$ = $2;
           $$->printElement = "OtherNonShapeFeatureItem";
          }
        ;

y_OtherNonShapeFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          {$$ = new OtherNonShapeFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherNonShapeFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OtherNonShapeFeatureMeasurement_OtherNonShapeFeatureMeasurementType :
          OtherNonShapeFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OtherNonShapeFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OtherNonShapeFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherNonShapeFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OtherNonShapeFeatureMeasurementSTART
          y_OtherNonShapeFeatureMeasurementType
          OtherNonShapeFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OtherNonShapeFeatureMeasurement";
          }
        ;

y_OtherNonShapeFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_ReferenceFeatureNominalIds_ArrayReferenceFullType_0
          {$$ = new OtherNonShapeFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherNonShapeFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OtherNonShapeFeatureNominal_OtherNonShapeFeatureNominalType :
          OtherNonShapeFeatureNominalSTART
          y_OtherNonShapeFeatureNominalType OtherNonShapeFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OtherNonShapeFeatureNominal";
          }
        ;

y_OtherPrecedence_XmlString :
          OtherPrecedenceSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherPrecedenceEND
          {$$ = $4;}
        ;

y_OtherSamplingInterval_XmlString :
          OtherSamplingIntervalSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherSamplingIntervalEND
          {$$ = $4;}
        ;

y_OtherSecurityClassification_XmlString :
          OtherSecurityClassificationSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherSecurityClassificationEND
          {$$ = $4;}
        ;

y_OtherShapeCheckedFeatureType :
          ENDITEM y_CheckDetails_OtherShapeCheckedType_0
          {$$ = new OtherShapeCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherShapeCheckedType :
          ENDITEM y_OtherShapeCheckedTypeChoicePair
          {$$ = new OtherShapeCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherShapeCheckedTypeChoicePair :
          y_Constructed_OtherShapeConstructionMethodType
          {$$ = new OtherShapeCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherShapeCheckedTypeType = OtherShapeCheckedTypeChoicePair::ConstructedE;
           $$->OtherShapeCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new OtherShapeCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherShapeCheckedTypeType = OtherShapeCheckedTypeChoicePair::MeasuredE;
           $$->OtherShapeCheckedTypeValue.Measured = $1;
          }
        ;

y_OtherShapeClass_XmlString :
          OtherShapeClassSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherShapeClassEND
          {$$ = $4;}
        ;

y_OtherShapeConstructionMethodType :
          ENDITEM y_OtherShapeConstructionMethodTypeChoicePair
          {$$ = new OtherShapeConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherShapeConstructionMethodTypeChoicePair :
          y_Copy_OtherShapeFeatureCopyType
          {$$ = new OtherShapeConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherShapeConstructionMethodTypeType = OtherShapeConstructionMethodTypeChoicePair::CopyE;
           $$->OtherShapeConstructionMethodTypeValue.Copy = $1;
          }
        ;

y_OtherShapeFeatureCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOtherShapeFeature_BaseFeatureType
          {$$ = new OtherShapeFeatureCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OtherShapeFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString
          {$$ = new OtherShapeFeatureDefinitionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherShapeFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OtherShapeFeatureDefinition_OtherShapeFeatureDefinitionType :
          OtherShapeFeatureDefinitionSTART
          y_OtherShapeFeatureDefinitionType OtherShapeFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OtherShapeFeatureDefinition";
          }
        ;

y_OtherShapeFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_OtherShapeMeasurementDeterminationType
          {$$ = new OtherShapeFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherShapeFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OtherShapeFeatureItem_OtherShapeFeatureItemType :
          OtherShapeFeatureItemSTART y_OtherShapeFeatureItemType
          OtherShapeFeatureItemEND
          {$$ = $2;
           $$->printElement = "OtherShapeFeatureItem";
          }
        ;

y_OtherShapeFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          {$$ = new OtherShapeFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherShapeFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OtherShapeFeatureMeasurement_OtherShapeFeatureMeasurementType :
          OtherShapeFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OtherShapeFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OtherShapeFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherShapeFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OtherShapeFeatureMeasurementSTART
          y_OtherShapeFeatureMeasurementType
          OtherShapeFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OtherShapeFeatureMeasurement";
          }
        ;

y_OtherShapeFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Constructed_OtherShapeConstructionMethodType_0
          {$$ = new OtherShapeFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherShapeFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OtherShapeFeatureNominal_OtherShapeFeatureNominalType :
          OtherShapeFeatureNominalSTART y_OtherShapeFeatureNominalType
          OtherShapeFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OtherShapeFeatureNominal";
          }
        ;

y_OtherShapeMeasurementDeterminationType :
          ENDITEM y_OtherShapeMeasurementDeterminationTypeChoicePair
          {$$ = new OtherShapeMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherShapeMeasurementDeterminationTypeChoicePair :
          y_Checked_OtherShapeCheckedFeatureType
          {$$ = new OtherShapeMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherShapeMeasurementDeterminationTypeType = OtherShapeMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->OtherShapeMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new OtherShapeMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherShapeMeasurementDeterminationTypeType = OtherShapeMeasurementDeterminationTypeChoicePair::SetE;
           $$->OtherShapeMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_OtherSideContourSymbol_WeldContourSymbolType_0 :
          /* empty */
          {$$ = 0;}
        | OtherSideContourSymbolSTART y_WeldContourSymbolType
          OtherSideContourSymbolEND
          {$$ = $2;
           $$->printElement = "OtherSideContourSymbol";
          }
        ;

y_OtherSideParameters_WeldGrooveOneSideParametersType_0 :
          /* empty */
          {$$ = 0;}
        | OtherSideParametersSTART ENDWHOLEITEM
          {$$ = new WeldGrooveOneSideParametersType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "OtherSideParameters";
          }
        | OtherSideParametersSTART y_WeldGrooveOneSideParametersType
          OtherSideParametersEND
          {$$ = $2;
           $$->printElement = "OtherSideParameters";
          }
        ;

y_OtherSide_WeldFilletOneSideInBothSidesType_0 :
          /* empty */
          {$$ = 0;}
        | OtherSideSTART ENDWHOLEITEM
          {$$ = new WeldFilletOneSideInBothSidesType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "OtherSide";
          }
        | OtherSideSTART y_WeldFilletOneSideInBothSidesType OtherSideEND
          {$$ = $2;
           $$->printElement = "OtherSide";
          }
        ;

y_OtherSlotEnd_XmlString :
          OtherSlotEndSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherSlotEndEND
          {$$ = $4;}
        ;

y_OtherStandardsOrganization_XmlString :
          OtherStandardsOrganizationSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherStandardsOrganizationEND
          {$$ = $4;}
        ;

y_OtherStatsEvalStatus_XmlString :
          OtherStatsEvalStatusSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherStatsEvalStatusEND
          {$$ = $4;}
        ;

y_OtherSubstituteFeatureAlgorithm_XmlString :
          OtherSubstituteFeatureAlgorithmSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherSubstituteFeatureAlgorithmEND
          {$$ = $4;}
        ;

y_OtherSurfaceCheckedFeatureType :
          ENDITEM y_CheckDetails_OtherSurfaceCheckedType_0
          {$$ = new OtherSurfaceCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherSurfaceCheckedType :
          ENDITEM y_OtherSurfaceCheckedTypeChoicePair
          {$$ = new OtherSurfaceCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherSurfaceCheckedTypeChoicePair :
          y_Constructed_OtherSurfaceConstructionMethodType
          {$$ = new OtherSurfaceCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceCheckedTypeType = OtherSurfaceCheckedTypeChoicePair::ConstructedE;
           $$->OtherSurfaceCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new OtherSurfaceCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceCheckedTypeType = OtherSurfaceCheckedTypeChoicePair::MeasuredE;
           $$->OtherSurfaceCheckedTypeValue.Measured = $1;
          }
        ;

y_OtherSurfaceConstructionMethodType :
          ENDITEM y_OtherSurfaceConstructionMethodTypeChoicePair
          {$$ = new OtherSurfaceConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherSurfaceConstructionMethodTypeChoicePair :
          y_Copy_OtherSurfaceFeatureCopyType
          {$$ = new OtherSurfaceConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceConstructionMethodTypeType = OtherSurfaceConstructionMethodTypeChoicePair::CopyE;
           $$->OtherSurfaceConstructionMethodTypeValue.Copy = $1;
          }
        ;

y_OtherSurfaceFea_1120_OtherSurfaceFea_1120_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_OtherSurfaceFea_1120_Type
          {$$ = $1;}
        ;

y_OtherSurfaceFea_1120_Type :
          y_OtherSurfaceFea_1120_TypeChoicePair
          {$$ = new OtherSurfaceFea_1120_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_OtherSurfaceFea_1120_TypeChoicePair :
          y_ClosedSurface_InternalExternalEnumType
          {$$ = new OtherSurfaceFea_1120_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceFea_1120_TypeType = OtherSurfaceFea_1120_TypeChoicePair::ClosedSurfaceE;
           $$->OtherSurfaceFea_1120_TypeValue.ClosedSurface = $1;
          }
        | y_Constructed_OtherSurfaceConstructionMethodType
          {$$ = new OtherSurfaceFea_1120_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceFea_1120_TypeType = OtherSurfaceFea_1120_TypeChoicePair::ConstructedE;
           $$->OtherSurfaceFea_1120_TypeValue.Constructed = $1;
          }
        | y_PolyLine_PolyLineType
          {$$ = new OtherSurfaceFea_1120_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceFea_1120_TypeType = OtherSurfaceFea_1120_TypeChoicePair::PolyLineE;
           $$->OtherSurfaceFea_1120_TypeValue.PolyLine = $1;
          }
        ;

y_OtherSurfaceFeatureCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseOtherSurfaceFeature_BaseFeatureType
          {$$ = new OtherSurfaceFeatureCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_OtherSurfaceFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          {$$ = new OtherSurfaceFeatureDefinitionType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherSurfaceFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_OtherSurfaceFeatureDefinition_OtherSurfaceFeatureDefinitionType :
          OtherSurfaceFeatureDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OtherSurfaceFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OtherSurfaceFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherSurfaceFeatureDefinitionType attributes");
             }
           delete $2;
          }
        | OtherSurfaceFeatureDefinitionSTART
          y_OtherSurfaceFeatureDefinitionType
          OtherSurfaceFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "OtherSurfaceFeatureDefinition";
          }
        ;

y_OtherSurfaceFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_OtherSurfaceMeasurementDeterminationType
          {$$ = new OtherSurfaceFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherSurfaceFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_OtherSurfaceFeatureItem_OtherSurfaceFeatureItemType :
          OtherSurfaceFeatureItemSTART y_OtherSurfaceFeatureItemType
          OtherSurfaceFeatureItemEND
          {$$ = $2;
           $$->printElement = "OtherSurfaceFeatureItem";
          }
        ;

y_OtherSurfaceFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_PolyLine_PolyLineType_0
          {$$ = new OtherSurfaceFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherSurfaceFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_OtherSurfaceFeatureMeasurement_OtherSurfaceFeatureMeasurementType :
          OtherSurfaceFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new OtherSurfaceFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "OtherSurfaceFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherSurfaceFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | OtherSurfaceFeatureMeasurementSTART
          y_OtherSurfaceFeatureMeasurementType
          OtherSurfaceFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "OtherSurfaceFeatureMeasurement";
          }
        ;

y_OtherSurfaceFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_OtherSurfaceFea_1120_OtherSurfaceFea_1120_Type_0
          {$$ = new OtherSurfaceFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherSurfaceFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_OtherSurfaceFeatureNominal_OtherSurfaceFeatureNominalType :
          OtherSurfaceFeatureNominalSTART y_OtherSurfaceFeatureNominalType
          OtherSurfaceFeatureNominalEND
          {$$ = $2;
           $$->printElement = "OtherSurfaceFeatureNominal";
          }
        ;

y_OtherSurfaceMeasurementDeterminationType :
          ENDITEM y_OtherSurfaceMeasurementDeterminationTypeChoicePair
          {$$ = new OtherSurfaceMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_OtherSurfaceMeasurementDeterminationTypeChoicePair :
          y_Checked_OtherSurfaceCheckedFeatureType
          {$$ = new OtherSurfaceMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceMeasurementDeterminationTypeType = OtherSurfaceMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->OtherSurfaceMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new OtherSurfaceMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->OtherSurfaceMeasurementDeterminationTypeType = OtherSurfaceMeasurementDeterminationTypeChoicePair::SetE;
           $$->OtherSurfaceMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_OtherSurfaceParameter_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | OtherSurfaceParameterSTART ENDITEM {yyReadData = 1;} y_XmlToken
          OtherSurfaceParameterEND
          {$$ = $4;}
        ;

y_OtherTemperatureCompensation_XmlString :
          OtherTemperatureCompensationSTART ENDITEM {yyReadData = 1;}
          y_XmlString OtherTemperatureCompensationEND
          {$$ = $4;}
        ;

y_OtherThreadClass_XmlString :
          OtherThreadClassSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherThreadClassEND
          {$$ = $4;}
        ;

y_OtherThreadSeries_XmlString :
          OtherThreadSeriesSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherThreadSeriesEND
          {$$ = $4;}
        ;

y_OtherTimeDescription_XmlString :
          OtherTimeDescriptionSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherTimeDescriptionEND
          {$$ = $4;}
        ;

y_OtherTipEndGeometry_XmlString :
          OtherTipEndGeometrySTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherTipEndGeometryEND
          {$$ = $4;}
        ;

y_OtherTypeOfScale_XmlString :
          OtherTypeOfScaleSTART ENDITEM {yyReadData = 1;} y_XmlString
          OtherTypeOfScaleEND
          {$$ = $4;}
        ;

y_OtherUnitsType :
          y_LiztAttributePair ENDITEM y_LiztAreaUnit_AreaUnitType_0_u
          y_LiztAngularUnit_AngularUnitType_0_u
          y_LiztForceUnit_ForceUnitType_0_u
          y_LiztLinearUnit_LinearUnitType_0_u
          y_LiztMassUnit_MassUnitType_0_u
          y_LiztPressureUnit_PressureUnitType_0_u
          y_LiztSpeedUnit_SpeedUnitType_0_u
          y_LiztTemperatureUnit_TemperatureUnitType_0_u
          y_LiztTimeUnit_TimeUnitType_0_u
          {$$ = new OtherUnitsType($3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad OtherUnitsType attributes");
             }
           delete $1;
          }
        ;

y_OtherUnits_OtherUnitsType_0 :
          /* empty */
          {$$ = 0;}
        | OtherUnitsSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new OtherUnitsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherUnitsType attributes");
             }
           delete $2;
          }
        | OtherUnitsSTART y_OtherUnitsType OtherUnitsEND
          {$$ = $2;}
        ;

y_OuterDisposition_LinearValueType :
          OuterDispositionSTART y_LinearValueType OuterDispositionEND
          {$$ = $2;}
        ;

y_OuterDisposition_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | OuterDispositionSTART y_LinearValueType OuterDispositionEND
          {$$ = $2;}
        ;

y_OutputFileFormat_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | OutputFileFormatSTART ENDITEM {yyReadData = 1;} y_XmlString
          OutputFileFormatEND
          {$$ = $4;}
        ;

y_OutputPower_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | OutputPowerSTART y_UserDefinedUnitValueType OutputPowerEND
          {$$ = $2;}
        ;

y_OverallLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | OverallLengthSTART y_LinearValueType OverallLengthEND
          {$$ = $2;}
        ;

y_PMIAngularUnit_AngularUnitType_0 :
          /* empty */
          {$$ = 0;}
        | PMIAngularUnitSTART y_AngularUnitType PMIAngularUnitEND
          {$$ = $2;}
        ;

y_PMIAreaUnit_AreaUnitType_0 :
          /* empty */
          {$$ = 0;}
        | PMIAreaUnitSTART y_AreaUnitType PMIAreaUnitEND
          {$$ = $2;}
        ;

y_PMIDisplaySetType :
          y_LiztAttributePair ENDITEM y_LiztPMIDisplay_PMIDisplayType_1_u
          {$$ = new PMIDisplaySetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PMIDisplaySetType attributes");
             }
           delete $1;
          }
        ;

y_PMIDisplaySet_PMIDisplaySetType :
          PMIDisplaySetSTART y_PMIDisplaySetType PMIDisplaySetEND
          {$$ = $2;}
        ;

y_PMIDisplayType :
          ENDITEM y_Attributes_AttributesType_0 y_Color_ColorType_0
          y_Plane_PlanePMIDisplayType_0 y_Texts_TextsType_0
          y_LiztLeader_substituteType_0_u y_WitnessLines_WitnessLinesType_0
          y_Frames_FramesType_0 y_Graphics_GraphicsType_0
          y_Reference_ElementReferenceFullType y_GroupID_I2Type_0
          {$$ = new PMIDisplayType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_PMIDisplay_PMIDisplayType :
          PMIDisplaySTART y_PMIDisplayType PMIDisplayEND
          {$$ = $2;}
        ;

y_PMILinearUnit_LinearUnitType_0 :
          /* empty */
          {$$ = 0;}
        | PMILinearUnitSTART y_LinearUnitType PMILinearUnitEND
          {$$ = $2;}
        ;

y_ParallelFeature_BaseFeatureType :
          ParallelFeatureSTART y_BaseFeatureType ParallelFeatureEND
          {$$ = $2;}
        ;

y_ParallelLinkCMMSpeedsType :
          ENDITEM y_MaxXTraverseSpeed_SpeedValueType_0
          y_MaxYTraverseSpeed_SpeedValueType_0
          y_MaxZTraverseSpeed_SpeedValueType_0
          y_MaxXProbingSpeed_SpeedValueType_0
          y_MaxYProbingSpeed_SpeedValueType_0
          y_MaxZProbingSpeed_SpeedValueType_0
          y_MaxXRotation_UserDefinedUnitValueType_0
          y_MaxYRotation_UserDefinedUnitValueType_0
          y_MaxZRotation_UserDefinedUnitValueType_0
          {$$ = new ParallelLinkCMMSpeedsType($2, $3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
          }
        ;

y_ParallelLinkCMMSpeeds_ParallelLinkCMMSpeedsType :
          ParallelLinkCMMSpeedsSTART ENDWHOLEITEM
          {$$ = new ParallelLinkCMMSpeedsType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ParallelLinkCMMSpeeds";
          }
        | ParallelLinkCMMSpeedsSTART y_ParallelLinkCMMSpeedsType
          ParallelLinkCMMSpeedsEND
          {$$ = $2;
           $$->printElement = "ParallelLinkCMMSpeeds";
          }
        ;

y_ParallelLinkCMMType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_CMMSpeeds_substituteType_0
          y_AxesTravelDistance_XYZLinearSpecificationType_0
          y_AxesRotationAngle_AngularValueType_0
          y_AxisBacklash_XYZLinearSpecificationType_0
          y_AxisRepeatability_XYZLinearSpecificationType_0
          y_MaxLoad_MassValueType_0 y_StageMaterial_XmlString_0
          y_MaxHoldingForce_ForceValueType_0 y_MotorType_XmlString_0
          y_LinksStiffness_StiffnessType_0 y_ToolIds_ArrayReferenceType_0
          {$$ = new ParallelLinkCMMType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ParallelLinkCMMType attributes");
             }
           delete $1;
          }
        ;

y_ParallelLinkCMM_ParallelLinkCMMType :
          ParallelLinkCMMSTART y_ParallelLinkCMMType ParallelLinkCMMEND
          {$$ = $2;
           $$->printElement = "ParallelLinkCMM";
          }
        ;

y_ParallelScaleFactor_XmlDecimal :
          ParallelScaleFactorSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          ParallelScaleFactorEND
          {$$ = $4;}
        ;

y_Parallel_LineParallelType :
          ParallelSTART y_LineParallelType ParallelEND
          {$$ = $2;
           $$->printElement = "Parallel";
          }
        ;

y_Parallel_PlaneParallelType :
          ParallelSTART y_PlaneParallelType ParallelEND
          {$$ = $2;
           $$->printElement = "Parallel";
          }
        ;

y_ParallelismCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_MaterialCondition_MaterialModifierEnumType
          y_SizeCharacteristicDefinitionId_QIFReferenceType_0
          y_ZoneShape_OrientationZoneShapeType y_TangentPlane_XmlBoolean_0
          y_MaximumToleranceValue_LinearValueType_0
          y_ProjectedToleranceZoneValue_LinearValueType_0
          y_OrientationChar_1064_OrientationChar_1064_Type_0
          {$$ = new ParallelismCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ParallelismCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ParallelismCharacteristicDefinition_ParallelismCharacteristicDefinitionType :
          ParallelismCharacteristicDefinitionSTART
          y_ParallelismCharacteristicDefinitionType
          ParallelismCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ParallelismCharacteristicDefinition";
          }
        ;

y_ParallelismCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ParallelismCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ParallelismCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ParallelismCharacteristicItem_ParallelismCharacteristicItemType :
          ParallelismCharacteristicItemSTART
          y_ParallelismCharacteristicItemType
          ParallelismCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ParallelismCharacteristicItem";
          }
        ;

y_ParallelismCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0 y_DatumsOk_XmlBoolean_0
          y_Bonus_MeasuredLinearValueType_0
          y_ReferenceLength_LinearValueType_0
          y_DRFTransformActualId_QIFReferenceType_0
          {$$ = new ParallelismCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ParallelismCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ParallelismCharacteristicMeasurement_ParallelismCharacteristicMeasurementType :
          ParallelismCharacteristicMeasurementSTART
          y_ParallelismCharacteristicMeasurementType
          ParallelismCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ParallelismCharacteristicMeasurement";
          }
        ;

y_ParallelismCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new ParallelismCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ParallelismCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ParallelismCharacteristicNominal_ParallelismCharacteristicNominalType :
          ParallelismCharacteristicNominalSTART
          y_ParallelismCharacteristicNominalType
          ParallelismCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ParallelismCharacteristicNominal";
          }
        ;

y_ParallelismCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_BonusStats_StatsLinearType_0
          y_ReferenceLengthStats_StatsLinearType_0
          {$$ = new ParallelismCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
          }
        ;

y_ParallelismCharacteristicStats_ParallelismCharacteristicStatsEvalType :
          ParallelismCharacteristicStatsSTART
          y_ParallelismCharacteristicStatsEvalType
          ParallelismCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ParallelismCharacteristicStats";
          }
        ;

y_Parallelism_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ParallelismSTART y_LinearValueType ParallelismEND
          {$$ = $2;}
        ;

y_ParameterConstraints_DMEParameterConstraintSetType_0 :
          /* empty */
          {$$ = 0;}
        | ParameterConstraintsSTART y_DMEParameterConstraintSetType
          ParameterConstraintsEND
          {$$ = $2;}
        ;

y_ParameterName_XmlToken :
          ParameterNameSTART ENDITEM {yyReadData = 1;} y_XmlToken
          ParameterNameEND
          {$$ = $4;}
        ;

y_ParameterType_XmlString :
          ParameterTypeSTART ENDITEM {yyReadData = 1;} y_XmlString
          ParameterTypeEND
          {$$ = $4;}
        ;

y_ParameterValue_XmlString :
          ParameterValueSTART ENDITEM {yyReadData = 1;} y_XmlString
          ParameterValueEND
          {$$ = $4;}
        ;

y_Parameter_ProcessParameterType :
          ParameterSTART y_ProcessParameterType ParameterEND
          {$$ = $2;}
        ;

y_Parameter_ReferenceFeatureAssociationSpecificationParameterEnumType :
          ParameterSTART ENDITEM {yyReadData = 1;}
          y_ReferenceFeatureAssociationSpecificationParameterEnumType
          ParameterEND
          {$$ = $4;}
        ;

y_Parameter_XmlToken :
          ParameterSTART ENDITEM {yyReadData = 1;} y_XmlToken ParameterEND
          {$$ = $4;}
        ;

y_Parameters_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ParametersSTART ENDITEM {yyReadData = 1;} y_XmlString
          ParametersEND
          {$$ = $4;}
        ;

y_ParentFeatureItemId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ParentFeatureItemIdSTART y_QIFReferenceType
          ParentFeatureItemIdEND
          {$$ = $2;}
        ;

y_ParentFeatureNominalId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ParentFeatureNominalIdSTART y_QIFReferenceType
          ParentFeatureNominalIdEND
          {$$ = $2;}
        ;

y_PartAssemblyHeaderType :
          ENDITEM y_Name_XmlString_0 y_File_FileInternalType_0
          y_Application_ApplicationType_0 y_Author_AuthorType_0
          y_ApplicationSource_ApplicationType_0 y_Description_XmlString_0
          {$$ = new PartAssemblyHeaderType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_PartFamilyType :
          ENDITEM y_PrimaryShapeClass_ShapeClassType_0
          y_MinimumTolerance_LinearValueType_0
          y_MinimumBoundingBox_BoundingBoxType_0
          y_PrimaryManufacturingMethod_ManufacturingMethodType_0
          {$$ = new PartFamilyType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_PartFamily_PartFamilyType_0 :
          /* empty */
          {$$ = 0;}
        | PartFamilySTART ENDWHOLEITEM
          {$$ = new PartFamilyType();
           yyUnrefMap[$$] = $$;
          }
        | PartFamilySTART y_PartFamilyType PartFamilyEND
          {$$ = $2;}
        ;

y_PartNoteIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | PartNoteIdsSTART y_ArrayReferenceFullType PartNoteIdsEND
          {$$ = $2;}
        ;

y_PartNoteIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | PartNoteIdsSTART y_ArrayReferenceType PartNoteIdsEND
          {$$ = $2;}
        ;

y_PartNoteSetType :
          y_LiztAttributePair ENDITEM y_LiztPartNote_PartNoteType_1_u
          {$$ = new PartNoteSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PartNoteSetType attributes");
             }
           delete $1;
          }
        ;

y_PartNoteSet_PartNoteSetType_0 :
          /* empty */
          {$$ = 0;}
        | PartNoteSetSTART y_PartNoteSetType PartNoteSetEND
          {$$ = $2;}
        ;

y_PartNoteType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Text_XmlString_0 y_PartNoteIds_ArrayReferenceType_0
          {$$ = new PartNoteType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PartNoteType attributes");
             }
           delete $1;
          }
        ;

y_PartNote_PartNoteType :
          PartNoteSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new PartNoteType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PartNote";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PartNoteType attributes");
             }
           delete $2;
          }
        | PartNoteSTART y_PartNoteType PartNoteEND
          {$$ = $2;
           $$->printElement = "PartNote";
          }
        ;

y_PartSetType :
          y_LiztAttributePair ENDITEM y_LiztPart_PartType_1_u
          {$$ = new PartSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PartSetType attributes");
             }
           delete $1;
          }
        ;

y_PartSet_PartSetType_0 :
          /* empty */
          {$$ = 0;}
        | PartSetSTART y_PartSetType PartSetEND
          {$$ = $2;}
        ;

y_PartType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Validation_ValidationPartAssemblyType_0
          y_Header_PartAssemblyHeaderType_0 y_UUID_QPIdType_0
          y_ModelNumber_XmlString_0 y_Version_XmlString_0
          y_SecurityClassification_SecurityClassificationType_0
          y_ExportControlClassification_XmlString_0
          y_FeatureNominalIds_ArrayReferenceType_0
          y_FeatureZoneIds_ArrayReferenceType_0
          y_CharacteristicNominalIds_ArrayReferenceType_0
          y_NoteIds_ArrayReferenceType_0 y_PartNoteIds_ArrayReferenceType_0
          y_DatumDefinitionIds_ArrayReferenceType_0
          y_DatumTargetDefinitionIds_ArrayReferenceType_0
          y_DatumReferenceFrameIds_ArrayReferenceType_0
          y_BodyIds_ArrayReferenceType_0
          y_CoordinateSystemIds_ArrayReferenceType_0
          y_AuxiliaryIds_ArrayReferenceType_0
          y_ViewIds_ArrayReferenceType_0
          y_PointCloudIds_ArrayReferenceType_0
          y_DefinitionExternal_DefinitionExternalType_0
          y_PartFamily_PartFamilyType_0 y_FoldersPart_FoldersPartType_0
          {$$ = new PartType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PartType attributes");
             }
           delete $1;
          }
        ;

y_PartVariation_StatsMeasuredDecimalType :
          PartVariationSTART y_StatsMeasuredDecimalType PartVariationEND
          {$$ = $2;
           $$->printElement = "PartVariation";
          }
        ;

y_Part_ElementReferenceType :
          PartSTART y_ElementReferenceType PartEND
          {$$ = $2;}
        ;

y_Part_PartType :
          PartSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new PartType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "Part";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PartType attributes");
             }
           delete $2;
          }
        | PartSTART y_PartType PartEND
          {$$ = $2;
           $$->printElement = "Part";
          }
        ;

y_PartialInspectionType :
          ENDITEM y_BaselineProductNumber_XmlString
          y_BaselineProductVersion_XmlString_0
          y_ReasonForPartialInspection_XmlString
          {$$ = new PartialInspectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PartialInspection_PartialInspectionType_0 :
          /* empty */
          {$$ = 0;}
        | PartialInspectionSTART y_PartialInspectionType
          PartialInspectionEND
          {$$ = $2;}
        ;

y_PartiallyOrderedActionGroupType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
          y_StepsWithPredecessors_StepsWithPredecessorsType
          {$$ = new PartiallyOrderedActionGroupType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_PartiallyOrderedActionGroup_PartiallyOrderedActionGroupType :
          PartiallyOrderedActionGroupSTART
          y_PartiallyOrderedActionGroupType PartiallyOrderedActionGroupEND
          {$$ = $2;
           $$->printElement = "PartiallyOrderedActionGroup";
          }
        ;

y_PartiallyOrderedPlanRoot_PartiallyOrderedActionGroupType :
          PartiallyOrderedPlanRootSTART y_PartiallyOrderedActionGroupType
          PartiallyOrderedPlanRootEND
          {$$ = $2;
           $$->printElement = "PartiallyOrderedPlanRoot";
          }
        ;

y_PassFailStatsValue_substituteType :
          y_FailurePercentage_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_NumberFailures_StatsNonNegativeIntegerType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PassValues_StringValuesType_0 :
          /* empty */
          {$$ = 0;}
        | PassValuesSTART y_StringValuesType PassValuesEND
          {$$ = $2;}
        ;

y_PatchRadius_LinearValueType :
          PatchRadiusSTART y_LinearValueType PatchRadiusEND
          {$$ = $2;}
        ;

y_PathTriangulationCoreType :
          ENDITEM y_PathTriangulationCoreTypeChoicePair
          {$$ = new PathTriangulationCoreType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PathTriangulationCoreTypeChoicePair :
          y_EdgesBinary_ArrayBinaryType
          {$$ = new PathTriangulationCoreTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PathTriangulationCoreTypeType = PathTriangulationCoreTypeChoicePair::EdgesBinaryE;
           $$->PathTriangulationCoreTypeValue.EdgesBinary = $1;
          }
        | y_Edges_ArrayI2Type
          {$$ = new PathTriangulationCoreTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PathTriangulationCoreTypeType = PathTriangulationCoreTypeChoicePair::EdgesE;
           $$->PathTriangulationCoreTypeValue.Edges = $1;
          }
        ;

y_PathTriangulationCore_PathTriangulationCoreType :
          PathTriangulationCoreSTART y_PathTriangulationCoreType
          PathTriangulationCoreEND
          {$$ = $2;}
        ;

y_PathTriangulationType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_PathTriangulationCore_PathTriangulationCoreType
          y_MeshTriangle_ElementReferenceType
          {$$ = new PathTriangulationType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PathTriangulationType attributes");
             }
           delete $1;
          }
        ;

y_PathTriangulation_PathTriangulationType :
          PathTriangulationSTART y_PathTriangulationType
          PathTriangulationEND
          {$$ = $2;
           $$->printElement = "PathTriangulation";
          }
        ;

y_Path_SectionPathType :
          PathSTART y_SectionPathType PathEND
          {$$ = $2;}
        ;

y_Path_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | PathSTART ENDITEM {yyReadData = 1;} y_XmlString PathEND
          {$$ = $4;}
        ;

y_Paths_SectionPathsType_0 :
          /* empty */
          {$$ = 0;}
        | PathsSTART y_SectionPathsType PathsEND
          {$$ = $2;}
        ;

y_PatternFeatureCircleDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_IsProfileGroup_XmlBoolean_0 y_IsRunoutGroup_XmlBoolean_0
          y_GroupFeatureDef_1104_GroupFeatureDef_1104_Type_0
          y_Diameter_LinearValueType y_FeatureDirection_UnitVectorType_0
          y_NumberOfFeatures_NaturalType
          {$$ = new PatternFeatureCircleDefinitionType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureCircleDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureCircleDefinition_PatternFeatureCircleDefinitionType :
          PatternFeatureCircleDefinitionSTART
          y_PatternFeatureCircleDefinitionType
          PatternFeatureCircleDefinitionEND
          {$$ = $2;
           $$->printElement = "PatternFeatureCircleDefinition";
          }
        ;

y_PatternFeatureCircleItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new PatternFeatureCircleItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureCircleItemType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureCircleItem_PatternFeatureCircleItemType :
          PatternFeatureCircleItemSTART y_PatternFeatureCircleItemType
          PatternFeatureCircleItemEND
          {$$ = $2;
           $$->printElement = "PatternFeatureCircleItem";
          }
        ;

y_PatternFeatureCircleNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureNominalIds_ArrayReferenceFullType
          y_Normal_UnitVectorType y_Center_PointType
          y_FirstFeatureLocation_QIFReferenceType
          {$$ = new PatternFeatureCircleNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureCircleNominalType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureCircleNominal_PatternFeatureCircleNominalType :
          PatternFeatureCircleNominalSTART
          y_PatternFeatureCircleNominalType PatternFeatureCircleNominalEND
          {$$ = $2;
           $$->printElement = "PatternFeatureCircleNominal";
          }
        ;

y_PatternFeatureCircularArcDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_IsProfileGroup_XmlBoolean_0 y_IsRunoutGroup_XmlBoolean_0
          y_GroupFeatureDef_1104_GroupFeatureDef_1104_Type_0
          y_ArcRadius_LinearValueType y_IncrementalArc_AngularValueType
          y_FeatureDirection_UnitVectorType_0
          y_NumberOfFeatures_NaturalType
          {$$ = new PatternFeatureCircularArcDefinitionType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureCircularArcDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureCircularArcDefinition_PatternFeatureCircularArcDefinitionType :
          PatternFeatureCircularArcDefinitionSTART
          y_PatternFeatureCircularArcDefinitionType
          PatternFeatureCircularArcDefinitionEND
          {$$ = $2;
           $$->printElement = "PatternFeatureCircularArcDefinition";
          }
        ;

y_PatternFeatureCircularArcItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new PatternFeatureCircularArcItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureCircularArcItemType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureCircularArcItem_PatternFeatureCircularArcItemType :
          PatternFeatureCircularArcItemSTART
          y_PatternFeatureCircularArcItemType
          PatternFeatureCircularArcItemEND
          {$$ = $2;
           $$->printElement = "PatternFeatureCircularArcItem";
          }
        ;

y_PatternFeatureCircularArcNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureNominalIds_ArrayReferenceFullType
          y_Normal_UnitVectorType y_Center_PointType
          y_FirstFeatureLocation_QIFReferenceType
          {$$ = new PatternFeatureCircularArcNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureCircularArcNominalType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureCircularArcNominal_PatternFeatureCircularArcNominalType :
          PatternFeatureCircularArcNominalSTART
          y_PatternFeatureCircularArcNominalType
          PatternFeatureCircularArcNominalEND
          {$$ = $2;
           $$->printElement = "PatternFeatureCircularArcNominal";
          }
        ;

y_PatternFeatureLinearDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_IsProfileGroup_XmlBoolean_0 y_IsRunoutGroup_XmlBoolean_0
          y_GroupFeatureDef_1104_GroupFeatureDef_1104_Type_0
          y_LineDirection_UnitVectorType
          y_IncrementalDistance_LinearValueType
          y_FeatureDirection_UnitVectorType_0
          y_NumberOfFeatures_NaturalType
          {$$ = new PatternFeatureLinearDefinitionType($3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureLinearDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureLinearDefinition_PatternFeatureLinearDefinitionType :
          PatternFeatureLinearDefinitionSTART
          y_PatternFeatureLinearDefinitionType
          PatternFeatureLinearDefinitionEND
          {$$ = $2;
           $$->printElement = "PatternFeatureLinearDefinition";
          }
        ;

y_PatternFeatureLinearItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new PatternFeatureLinearItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureLinearItemType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureLinearItem_PatternFeatureLinearItemType :
          PatternFeatureLinearItemSTART y_PatternFeatureLinearItemType
          PatternFeatureLinearItemEND
          {$$ = $2;
           $$->printElement = "PatternFeatureLinearItem";
          }
        ;

y_PatternFeatureLinearNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureNominalIds_ArrayReferenceFullType
          y_FirstFeatureLocation_QIFReferenceType
          {$$ = new PatternFeatureLinearNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureLinearNominalType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureLinearNominal_PatternFeatureLinearNominalType :
          PatternFeatureLinearNominalSTART
          y_PatternFeatureLinearNominalType PatternFeatureLinearNominalEND
          {$$ = $2;
           $$->printElement = "PatternFeatureLinearNominal";
          }
        ;

y_PatternFeatureParallelogramDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_IsProfileGroup_XmlBoolean_0 y_IsRunoutGroup_XmlBoolean_0
          y_GroupFeatureDef_1104_GroupFeatureDef_1104_Type_0
          y_AlongRowDirection_VectorType
          y_IncrementalRowDistance_LinearValueType
          y_BetweenRowDirection_VectorType
          y_RowSeparationDistance_LinearValueType
          y_FeatureDirection_UnitVectorType_0
          y_NumberOfFeaturesPerRow_NaturalType y_NumberOfRows_NaturalType
          {$$ = new PatternFeatureParallelogramDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureParallelogramDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureParallelogramDefinition_PatternFeatureParallelogramDefinitionType :
          PatternFeatureParallelogramDefinitionSTART
          y_PatternFeatureParallelogramDefinitionType
          PatternFeatureParallelogramDefinitionEND
          {$$ = $2;
           $$->printElement = "PatternFeatureParallelogramDefinition";
          }
        ;

y_PatternFeatureParallelogramItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new PatternFeatureParallelogramItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureParallelogramItemType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureParallelogramItem_PatternFeatureParallelogramItemType :
          PatternFeatureParallelogramItemSTART
          y_PatternFeatureParallelogramItemType
          PatternFeatureParallelogramItemEND
          {$$ = $2;
           $$->printElement = "PatternFeatureParallelogramItem";
          }
        ;

y_PatternFeatureParallelogramNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureNominalIds_ArrayReferenceFullType
          y_FirstFeatureLocation_QIFReferenceType
          {$$ = new PatternFeatureParallelogramNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PatternFeatureParallelogramNominalType attributes");
             }
           delete $1;
          }
        ;

y_PatternFeatureParallelogramNominal_PatternFeatureParallelogramNominalType :
          PatternFeatureParallelogramNominalSTART
          y_PatternFeatureParallelogramNominalType
          PatternFeatureParallelogramNominalEND
          {$$ = $2;
           $$->printElement = "PatternFeatureParallelogramNominal";
          }
        ;

y_Pattern_HatchPatternType :
          PatternSTART y_HatchPatternType PatternEND
          {$$ = $2;}
        ;

y_Patterns_HatchPatternsType_0 :
          /* empty */
          {$$ = 0;}
        | PatternsSTART y_HatchPatternsType PatternsEND
          {$$ = $2;}
        ;

y_PermissibleAmbientLight_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | PermissibleAmbientLightSTART y_UserDefinedUnitValueType
          PermissibleAmbientLightEND
          {$$ = $2;}
        ;

y_PerpendicularFeature_BaseFeatureType :
          PerpendicularFeatureSTART y_BaseFeatureType
          PerpendicularFeatureEND
          {$$ = $2;}
        ;

y_PerpendicularScaleFactor_XmlDecimal :
          PerpendicularScaleFactorSTART ENDITEM {yyReadData = 1;}
          y_XmlDecimal PerpendicularScaleFactorEND
          {$$ = $4;}
        ;

y_Perpendicular_LinePerpendicularType :
          PerpendicularSTART y_LinePerpendicularType PerpendicularEND
          {$$ = $2;
           $$->printElement = "Perpendicular";
          }
        ;

y_Perpendicular_PlanePerpendicularType :
          PerpendicularSTART y_PlanePerpendicularType PerpendicularEND
          {$$ = $2;
           $$->printElement = "Perpendicular";
          }
        ;

y_PerpendicularityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_MaterialCondition_MaterialModifierEnumType
          y_SizeCharacteristicDefinitionId_QIFReferenceType_0
          y_ZoneShape_OrientationZoneShapeType y_TangentPlane_XmlBoolean_0
          y_MaximumToleranceValue_LinearValueType_0
          y_ProjectedToleranceZoneValue_LinearValueType_0
          y_OrientationChar_1064_OrientationChar_1064_Type_0
          {$$ = new PerpendicularityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PerpendicularityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PerpendicularityCharacteristicDefinition_PerpendicularityCharacteristicDefinitionType :
          PerpendicularityCharacteristicDefinitionSTART
          y_PerpendicularityCharacteristicDefinitionType
          PerpendicularityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "PerpendicularityCharacteristicDefinition";
          }
        ;

y_PerpendicularityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new PerpendicularityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PerpendicularityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_PerpendicularityCharacteristicItem_PerpendicularityCharacteristicItemType :
          PerpendicularityCharacteristicItemSTART
          y_PerpendicularityCharacteristicItemType
          PerpendicularityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "PerpendicularityCharacteristicItem";
          }
        ;

y_PerpendicularityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0 y_DatumsOk_XmlBoolean_0
          y_Bonus_MeasuredLinearValueType_0
          y_ReferenceLength_LinearValueType_0
          y_DRFTransformActualId_QIFReferenceType_0
          {$$ = new PerpendicularityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PerpendicularityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_PerpendicularityCharacteristicMeasurement_PerpendicularityCharacteristicMeasurementType :
          PerpendicularityCharacteristicMeasurementSTART
          y_PerpendicularityCharacteristicMeasurementType
          PerpendicularityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "PerpendicularityCharacteristicMeasurement";
          }
        ;

y_PerpendicularityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new PerpendicularityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PerpendicularityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_PerpendicularityCharacteristicNominal_PerpendicularityCharacteristicNominalType :
          PerpendicularityCharacteristicNominalSTART
          y_PerpendicularityCharacteristicNominalType
          PerpendicularityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "PerpendicularityCharacteristicNominal";
          }
        ;

y_PerpendicularityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_BonusStats_StatsLinearType_0
          y_ReferenceLengthStats_StatsLinearType_0
          {$$ = new PerpendicularityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
          }
        ;

y_PerpendicularityCharacteristicStats_PerpendicularityCharacteristicStatsEvalType :
          PerpendicularityCharacteristicStatsSTART
          y_PerpendicularityCharacteristicStatsEvalType
          PerpendicularityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "PerpendicularityCharacteristicStats";
          }
        ;

y_PhysicalAddressType :
          ENDITEM y_Description_AddressDescriptionType_0
          y_InternalLocation_XmlToken_0 y_StreetNumber_XmlToken_0
          y_Street_XmlToken_0 y_PostalBox_XmlToken_0 y_Town_XmlToken_0
          y_Region_XmlToken_0 y_PostalCode_XmlToken_0 y_Country_XmlToken_0
          y_FacsimileNumber_XmlToken_0 y_TelephoneNumber_XmlToken_0
          y_ElectronicMailAddress_XmlToken_0 y_TelexNumber_XmlToken_0
          {$$ = new PhysicalAddressType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
          }
        ;

y_PhysicalModelType :
          y_LiztAttributePair ENDITEM y_Name_XmlString
          y_Version_XmlString_0 y_Description_XmlString_0
          y_Author_AuthorType_0 y_Location_XmlString_0
          y_ModelNumber_XmlString_0
          {$$ = new PhysicalModelType($3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PhysicalModelType attributes");
             }
           delete $1;
          }
        ;

y_PhysicalModel_PhysicalModelType :
          PhysicalModelSTART y_PhysicalModelType PhysicalModelEND
          {$$ = $2;}
        ;

y_PickSomeActionGroupType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
          y_Steps_UnnumberedPlanElementsType
          y_NumberOfSteps_XmlPositiveInteger
          {$$ = new PickSomeActionGroupType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_PickSomeActionGroup_PickSomeActionGroupType :
          PickSomeActionGroupSTART y_PickSomeActionGroupType
          PickSomeActionGroupEND
          {$$ = $2;
           $$->printElement = "PickSomeActionGroup";
          }
        ;

y_PickSomePlanRoot_PickSomeActionGroupType :
          PickSomePlanRootSTART y_PickSomeActionGroupType
          PickSomePlanRootEND
          {$$ = $2;
           $$->printElement = "PickSomePlanRoot";
          }
        ;

y_Pierce_PointFeaturePierceType :
          PierceSTART y_PointFeaturePierceType PierceEND
          {$$ = $2;
           $$->printElement = "Pierce";
          }
        ;

y_PitchDiameterStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | PitchDiameterStatsSTART y_StatsLinearType PitchDiameterStatsEND
          {$$ = $2;
           $$->printElement = "PitchDiameterStats";
          }
        ;

y_PitchDiameter_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | PitchDiameterSTART y_MeasuredLinearValueType PitchDiameterEND
          {$$ = $2;}
        ;

y_Pitch_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | PitchSTART y_LinearValueType PitchEND
          {$$ = $2;}
        ;

y_PixelSize_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | PixelSizeSTART y_LinearValueType PixelSizeEND
          {$$ = $2;}
        ;

y_PlanElement_substituteType :
          y_EvaluateSpecifiedCharacteristics_EvaluateSpecifiedCharacteristicsActionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Halt_HaltActionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_IfActionGroup_IfActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MeasureEvaluateAll_MeasureEvaluateAllActionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MeasureEvaluateSpecified_MeasureEvaluateSpecifiedActionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MeasureSpecifiedFeatures_MeasureSpecifiedFeaturesActionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_MeasureSpecifiedMeasurands_MeasureSpecifiedMeasurandsActionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OneOfActionGroup_OneOfActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OrderedActionGroup_OrderedActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PartiallyOrderedActionGroup_PartiallyOrderedActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PickSomeActionGroup_PickSomeActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UnorderedActionGroup_UnorderedActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_VariableSet_VariableSetType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WhileActionGroup_WhileActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PlanId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | PlanIdSTART y_QIFReferenceType PlanIdEND
          {$$ = $2;}
        ;

y_PlanRoot_substituteType :
          y_OneOfPlanRoot_OneOfActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_OrderedPlanRoot_OrderedActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PartiallyOrderedPlanRoot_PartiallyOrderedActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_PickSomePlanRoot_PickSomeActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UnorderedPlanRoot_UnorderedActionGroupType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PlanType :
          ENDITEM y_Version_VersionType_0
          y_RulesUsedQPId_QPIdFullReferenceType_0
          y_RulesToUseQPId_QPIdFullReferenceType_0
          y_WorkInstructions_WorkInstructionsType_0
          y_ActionMethods_ActionMethodsType_0 y_Measurands_MeasurandsType_0
          y_LocalVariables_LocalVariablesType_0 y_PlanRoot_substituteType
          {$$ = new PlanType($2, $3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
          }
        ;

y_Plan_PlanType_0 :
          /* empty */
          {$$ = 0;}
        | PlanSTART y_PlanType PlanEND
          {$$ = $2;}
        ;

y_PlanarZone_OrientationPlanarZoneType :
          PlanarZoneSTART ENDWHOLEITEM
          {$$ = new OrientationPlanarZoneType();
           yyUnrefMap[$$] = $$;
          }
        | PlanarZoneSTART y_OrientationPlanarZoneType PlanarZoneEND
          {$$ = $2;}
        ;

y_Plane23CoreType :
          y_LiztAttributePair ENDITEM y_Origin_PointSimpleType
          y_DirU_VectorSimpleType y_DirV_VectorSimpleType
          {$$ = new Plane23CoreType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Plane23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Plane23Core_Plane23CoreType :
          Plane23CoreSTART y_Plane23CoreType Plane23CoreEND
          {$$ = $2;
           $$->printElement = "Plane23Core";
          }
        ;

y_Plane23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Plane23Core_Plane23CoreType y_Transform_ElementReferenceType_0
          {$$ = new Plane23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Plane23Type attributes");
             }
           delete $1;
          }
        ;

y_Plane23_Plane23Type :
          Plane23START y_Plane23Type Plane23END
          {$$ = $2;
           $$->printElement = "Plane23";
          }
        ;

y_PlaneBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check
          {$$ = new PlaneBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PlaneBestFitType attributes");
             }
           delete $1;
          }
        ;

y_PlaneCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new PlaneCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PlaneCheckedFeatureType :
          ENDITEM y_CheckDetails_PlaneCheckedType_0
          {$$ = new PlaneCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PlaneCheckedType :
          ENDITEM y_PlaneCheckedTypeChoicePair
          {$$ = new PlaneCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PlaneCheckedTypeChoicePair :
          y_Constructed_PlaneConstructionMethodType
          {$$ = new PlaneCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneCheckedTypeType = PlaneCheckedTypeChoicePair::ConstructedE;
           $$->PlaneCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new PlaneCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneCheckedTypeType = PlaneCheckedTypeChoicePair::MeasuredE;
           $$->PlaneCheckedTypeValue.Measured = $1;
          }
        ;

y_PlaneConstructionMethodType :
          ENDITEM y_PlaneConstructionMethodTypeChoicePair
          {$$ = new PlaneConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PlaneConstructionMethodTypeChoicePair :
          y_BestFit_PlaneBestFitType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::BestFitE;
           $$->PlaneConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_PlaneCastType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::CastE;
           $$->PlaneConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_PlaneCopyType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::CopyE;
           $$->PlaneConstructionMethodTypeValue.Copy = $1;
          }
        | y_Extract_PlaneExtractType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::ExtractE;
           $$->PlaneConstructionMethodTypeValue.Extract = $1;
          }
        | y_Midplane_PlaneMidplaneType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::MidplaneE;
           $$->PlaneConstructionMethodTypeValue.Midplane = $1;
          }
        | y_Offset_PlaneOffsetType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::OffsetE;
           $$->PlaneConstructionMethodTypeValue.Offset = $1;
          }
        | y_Parallel_PlaneParallelType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::ParallelE;
           $$->PlaneConstructionMethodTypeValue.Parallel = $1;
          }
        | y_Perpendicular_PlanePerpendicularType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::PerpendicularE;
           $$->PlaneConstructionMethodTypeValue.Perpendicular = $1;
          }
        | y_Recompensated_PlaneRecompType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::RecompensatedE;
           $$->PlaneConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_TangentThrough_PlaneTangentThroughType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::TangentThroughE;
           $$->PlaneConstructionMethodTypeValue.TangentThrough = $1;
          }
        | y_Through_PlaneThroughType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::ThroughE;
           $$->PlaneConstructionMethodTypeValue.Through = $1;
          }
        | y_Transform_PlaneTransformType
          {$$ = new PlaneConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneConstructionMethodTypeType = PlaneConstructionMethodTypeChoicePair::TransformE;
           $$->PlaneConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_PlaneCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePlane_BaseFeatureType
          {$$ = new PlaneCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PlaneExtractType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType
          {$$ = new PlaneExtractType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PlaneFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          {$$ = new PlaneFeatureDefinitionType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PlaneFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PlaneFeatureDefinition_PlaneFeatureDefinitionType :
          PlaneFeatureDefinitionSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new PlaneFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PlaneFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PlaneFeatureDefinitionType attributes");
             }
           delete $2;
          }
        | PlaneFeatureDefinitionSTART y_PlaneFeatureDefinitionType
          PlaneFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "PlaneFeatureDefinition";
          }
        ;

y_PlaneFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_PlaneMeasurementDeterminationType
          {$$ = new PlaneFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PlaneFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_PlaneFeatureItem_PlaneFeatureItemType :
          PlaneFeatureItemSTART y_PlaneFeatureItemType PlaneFeatureItemEND
          {$$ = $2;
           $$->printElement = "PlaneFeatureItem";
          }
        ;

y_PlaneFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0 y_Normal_MeasuredUnitVectorType_0
          y_PolyLine_PolyLineType_0 y_Form_MeasuredLinearValueType_0
          {$$ = new PlaneFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PlaneFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_PlaneFeatureMeasurement_PlaneFeatureMeasurementType :
          PlaneFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new PlaneFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PlaneFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PlaneFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | PlaneFeatureMeasurementSTART y_PlaneFeatureMeasurementType
          PlaneFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "PlaneFeatureMeasurement";
          }
        ;

y_PlaneFeatureNom_1121_PlaneFeatureNom_1121_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_PlaneFeatureNom_1121_Type
          {$$ = $1;}
        ;

y_PlaneFeatureNom_1121_Type :
          y_PlaneFeatureNom_1121_TypeChoicePair
          {$$ = new PlaneFeatureNom_1121_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PlaneFeatureNom_1121_TypeChoicePair :
          y_Circle_CircleType
          {$$ = new PlaneFeatureNom_1121_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneFeatureNom_1121_TypeType = PlaneFeatureNom_1121_TypeChoicePair::CircleE;
           $$->PlaneFeatureNom_1121_TypeValue.Circle = $1;
          }
        | y_PolyLine_PolyLineType
          {$$ = new PlaneFeatureNom_1121_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneFeatureNom_1121_TypeType = PlaneFeatureNom_1121_TypeChoicePair::PolyLineE;
           $$->PlaneFeatureNom_1121_TypeValue.PolyLine = $1;
          }
        | y_Rectangle_RectangleType
          {$$ = new PlaneFeatureNom_1121_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneFeatureNom_1121_TypeType = PlaneFeatureNom_1121_TypeChoicePair::RectangleE;
           $$->PlaneFeatureNom_1121_TypeValue.Rectangle = $1;
          }
        ;

y_PlaneFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Location_PointType y_Normal_UnitVectorType
          y_PlaneFeatureNom_1121_PlaneFeatureNom_1121_Type_0
          y_Constructed_PlaneConstructionMethodType_0
          {$$ = new PlaneFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PlaneFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_PlaneFeatureNominal_PlaneFeatureNominalType :
          PlaneFeatureNominalSTART y_PlaneFeatureNominalType
          PlaneFeatureNominalEND
          {$$ = $2;
           $$->printElement = "PlaneFeatureNominal";
          }
        ;

y_PlaneMeasurementDeterminationType :
          ENDITEM y_PlaneMeasurementDeterminationTypeChoicePair
          {$$ = new PlaneMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PlaneMeasurementDeterminationTypeChoicePair :
          y_Checked_PlaneCheckedFeatureType
          {$$ = new PlaneMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneMeasurementDeterminationTypeType = PlaneMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->PlaneMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new PlaneMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlaneMeasurementDeterminationTypeType = PlaneMeasurementDeterminationTypeChoicePair::SetE;
           $$->PlaneMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_PlaneMidplaneType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBasePlane_SequencedBaseFeatureType_2_2_Check
          {$$ = new PlaneMidplaneType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PlaneNormal_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | PlaneNormalSTART y_UnitVectorType PlaneNormalEND
          {$$ = $2;}
        ;

y_PlaneOffsetType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePlane_BaseFeatureType y_Offset_LinearValueType
          {$$ = new PlaneOffsetType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PlanePMIDisplayType :
          ENDITEM y_AnnotationViewId_ElementReferenceType
          y_Origin_PointType_0 y_Direction_UnitVectorType_0
          {$$ = new PlanePMIDisplayType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PlaneParallelType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ParallelFeature_BaseFeatureType y_PointFeature_BaseFeatureType
          {$$ = new PlaneParallelType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PlanePerpendicularType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_PerpendicularFeature_BaseFeatureType
          y_PointFeature_BaseFeatureType
          {$$ = new PlanePerpendicularType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PlanePointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new PlanePointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad PlanePointSamplingStrategyEnumType value");
          }
        ;

y_PlanePointSamplingStrategyType :
          ENDITEM y_PlanePointSamplingStrategyTypeChoicePair
          {$$ = new PlanePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PlanePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_PlanePointSamplingStrategyEnumType
          {$$ = new PlanePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlanePointSamplingStrategyTypeType = PlanePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->PlanePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new PlanePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PlanePointSamplingStrategyTypeType = PlanePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->PlanePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_PlaneRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new PlaneRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PlaneReferenceType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Plane_PlaneType
          {$$ = new PlaneReferenceType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PlaneReferenceType attributes");
             }
           delete $1;
          }
        ;

y_PlaneReference_PlaneReferenceType :
          PlaneReferenceSTART y_PlaneReferenceType PlaneReferenceEND
          {$$ = $2;
           $$->printElement = "PlaneReference";
          }
        ;

y_PlaneTangentThroughType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_TangentFeature_BaseFeatureType y_PointFeature_BaseFeatureType
          {$$ = new PlaneTangentThroughType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PlaneThroughType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_2_2_Check
          {$$ = new PlaneThroughType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PlaneTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePlane_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new PlaneTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PlaneType :
          ENDITEM y_Point_PointType y_Normal_UnitVectorType
          {$$ = new PlaneType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PlaneXType :
          ENDITEM y_Point_PointType y_Normal_UnitVectorType
          y_Direction_UnitVectorType
          {$$ = new PlaneXType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Plane_MeasuredPlaneType_0 :
          /* empty */
          {$$ = 0;}
        | PlaneSTART y_MeasuredPlaneType PlaneEND
          {$$ = $2;}
        ;

y_Plane_PlanePMIDisplayType_0 :
          /* empty */
          {$$ = 0;}
        | PlaneSTART y_PlanePMIDisplayType PlaneEND
          {$$ = $2;}
        ;

y_Plane_PlaneType :
          PlaneSTART y_PlaneType PlaneEND
          {$$ = $2;}
        ;

y_Plane_PlaneType_0 :
          /* empty */
          {$$ = 0;}
        | PlaneSTART y_PlaneType PlaneEND
          {$$ = $2;}
        ;

y_Plane_PlaneXType :
          PlaneSTART y_PlaneXType PlaneEND
          {$$ = $2;
           $$->printElement = "Plane";
          }
        ;

y_PlantLocation_LocationType_0 :
          /* empty */
          {$$ = 0;}
        | PlantLocationSTART y_LocationType PlantLocationEND
          {$$ = $2;}
        ;

y_PlantSector_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | PlantSectorSTART ENDITEM {yyReadData = 1;} y_XmlString
          PlantSectorEND
          {$$ = $4;}
        ;

y_PlusType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_u_Check
          {$$ = new PlusType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Plus_PlusType :
          PlusSTART y_PlusType PlusEND
          {$$ = $2;
           $$->printElement = "Plus";
          }
        ;

y_Point2dSimpleType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new Point2dSimpleType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_Point2dSimpleType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointAccuracyTestType :
          ENDITEM y_Accuracy_LinearValueType
          {$$ = new PointAccuracyTestType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointAndVectorType :
          ENDITEM y_StartPoint_PointType y_Vector_UnitVectorType
          {$$ = new PointAndVectorType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointAuxiliaryType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_XYZ_PointType
          {$$ = new PointAuxiliaryType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointAuxiliaryType attributes");
             }
           delete $1;
          }
        ;

y_PointAuxiliary_PointAuxiliaryType :
          PointAuxiliarySTART y_PointAuxiliaryType PointAuxiliaryEND
          {$$ = $2;
           $$->printElement = "PointAuxiliary";
          }
        ;

y_PointCheckedFeatureType :
          ENDITEM y_CheckDetails_PointCheckedType_0
          {$$ = new PointCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointCheckedType :
          ENDITEM y_PointCheckedTypeChoicePair
          {$$ = new PointCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointCheckedTypeChoicePair :
          y_Constructed_PointConstructionMethodType
          {$$ = new PointCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCheckedTypeType = PointCheckedTypeChoicePair::ConstructedE;
           $$->PointCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new PointCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCheckedTypeType = PointCheckedTypeChoicePair::MeasuredE;
           $$->PointCheckedTypeValue.Measured = $1;
          }
        ;

y_PointCloudIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | PointCloudIdsSTART y_ArrayReferenceType PointCloudIdsEND
          {$$ = $2;}
        ;

y_PointCloudSetType :
          y_LiztAttributePair ENDITEM y_LiztPointCloud_PointCloudType_1_u
          {$$ = new PointCloudSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointCloudSetType attributes");
             }
           delete $1;
          }
        ;

y_PointCloudSet_PointCloudSetType_0 :
          /* empty */
          {$$ = 0;}
        | PointCloudSetSTART y_PointCloudSetType PointCloudSetEND
          {$$ = $2;}
        ;

y_PointCloudType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_PointCloudType_1226_PointCloudType_1226_Type
          y_PointCloudType_1227_PointCloudType_1227_Type_0
          y_PointCloudType_1228_PointCloudType_1228_Type_0
          y_PointCloudType_1229_PointCloudType_1229_Type_0
          {$$ = new PointCloudType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointCloudType attributes");
             }
           delete $1;
          }
        ;

y_PointCloudType_1226_PointCloudType_1226_Type :
          y_PointCloudType_1226_Type
          {$$ = $1;}
        ;

y_PointCloudType_1226_Type :
          y_PointCloudType_1226_TypeChoicePair
          {$$ = new PointCloudType_1226_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointCloudType_1226_TypeChoicePair :
          y_PointsBinary_ArrayBinaryType
          {$$ = new PointCloudType_1226_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1226_TypeType = PointCloudType_1226_TypeChoicePair::PointsBinaryE;
           $$->PointCloudType_1226_TypeValue.PointsBinary = $1;
          }
        | y_Points_ArrayPointType
          {$$ = new PointCloudType_1226_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1226_TypeType = PointCloudType_1226_TypeChoicePair::PointsE;
           $$->PointCloudType_1226_TypeValue.Points = $1;
          }
        ;

y_PointCloudType_1227_PointCloudType_1227_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_PointCloudType_1227_Type
          {$$ = $1;}
        ;

y_PointCloudType_1227_Type :
          y_PointCloudType_1227_TypeChoicePair
          {$$ = new PointCloudType_1227_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointCloudType_1227_TypeChoicePair :
          y_NormalsBinary_ArrayBinaryType
          {$$ = new PointCloudType_1227_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1227_TypeType = PointCloudType_1227_TypeChoicePair::NormalsBinaryE;
           $$->PointCloudType_1227_TypeValue.NormalsBinary = $1;
          }
        | y_Normals_ArrayUnitVectorType
          {$$ = new PointCloudType_1227_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1227_TypeType = PointCloudType_1227_TypeChoicePair::NormalsE;
           $$->PointCloudType_1227_TypeValue.Normals = $1;
          }
        ;

y_PointCloudType_1228_PointCloudType_1228_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_PointCloudType_1228_Type
          {$$ = $1;}
        ;

y_PointCloudType_1228_Type :
          y_PointCloudType_1228_TypeChoicePair
          {$$ = new PointCloudType_1228_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointCloudType_1228_TypeChoicePair :
          y_PointsHiddenBinary_ArrayBinaryType
          {$$ = new PointCloudType_1228_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1228_TypeType = PointCloudType_1228_TypeChoicePair::PointsHiddenBinaryE;
           $$->PointCloudType_1228_TypeValue.PointsHiddenBinary = $1;
          }
        | y_PointsHidden_ArrayIntType
          {$$ = new PointCloudType_1228_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1228_TypeType = PointCloudType_1228_TypeChoicePair::PointsHiddenE;
           $$->PointCloudType_1228_TypeValue.PointsHidden = $1;
          }
        | y_PointsVisibleBinary_ArrayBinaryType
          {$$ = new PointCloudType_1228_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1228_TypeType = PointCloudType_1228_TypeChoicePair::PointsVisibleBinaryE;
           $$->PointCloudType_1228_TypeValue.PointsVisibleBinary = $1;
          }
        | y_PointsVisible_ArrayIntType
          {$$ = new PointCloudType_1228_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1228_TypeType = PointCloudType_1228_TypeChoicePair::PointsVisibleE;
           $$->PointCloudType_1228_TypeValue.PointsVisible = $1;
          }
        ;

y_PointCloudType_1229_PointCloudType_1229_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_PointCloudType_1229_Type
          {$$ = $1;}
        ;

y_PointCloudType_1229_Type :
          y_PointCloudType_1229_TypeChoicePair
          {$$ = new PointCloudType_1229_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointCloudType_1229_TypeChoicePair :
          y_PointsColorBinary_ArrayBinaryType
          {$$ = new PointCloudType_1229_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1229_TypeType = PointCloudType_1229_TypeChoicePair::PointsColorBinaryE;
           $$->PointCloudType_1229_TypeValue.PointsColorBinary = $1;
          }
        | y_PointsColor_ArrayUnsignedByteType
          {$$ = new PointCloudType_1229_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointCloudType_1229_TypeType = PointCloudType_1229_TypeChoicePair::PointsColorE;
           $$->PointCloudType_1229_TypeValue.PointsColor = $1;
          }
        ;

y_PointCloud_PointCloudType :
          PointCloudSTART y_PointCloudType PointCloudEND
          {$$ = $2;
           $$->printElement = "PointCloud";
          }
        ;

y_PointConnection_Point2dSimpleType :
          PointConnectionSTART y_Point2dSimpleType PointConnectionEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_PointConstructionMethodType :
          ENDITEM y_PointConstructionMethodTypeChoicePair
          {$$ = new PointConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointConstructionMethodTypeChoicePair :
          y_Cast_PointFeatureCastType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::CastE;
           $$->PointConstructionMethodTypeValue.Cast = $1;
          }
        | y_CenterOfGravity_PointFeatureCenterOfGravityType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::CenterOfGravityE;
           $$->PointConstructionMethodTypeValue.CenterOfGravity = $1;
          }
        | y_Copy_PointFeatureCopyType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::CopyE;
           $$->PointConstructionMethodTypeValue.Copy = $1;
          }
        | y_Extreme_PointFeatureExtremeType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::ExtremeE;
           $$->PointConstructionMethodTypeValue.Extreme = $1;
          }
        | y_FromCone_PointFeatureFromConeType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::FromConeE;
           $$->PointConstructionMethodTypeValue.FromCone = $1;
          }
        | y_FromScan_PointFeatureFromScanType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::FromScanE;
           $$->PointConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Intersection_PointFeatureIntersectionType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::IntersectionE;
           $$->PointConstructionMethodTypeValue.Intersection = $1;
          }
        | y_MidPoint_PointFeatureMidPointType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::MidPointE;
           $$->PointConstructionMethodTypeValue.MidPoint = $1;
          }
        | y_MovePointAxis_PointFeatureMovePointAxisType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::MovePointAxisE;
           $$->PointConstructionMethodTypeValue.MovePointAxis = $1;
          }
        | y_MovePointVector_PointFeatureMovePointVectorType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::MovePointVectorE;
           $$->PointConstructionMethodTypeValue.MovePointVector = $1;
          }
        | y_MovePoint_PointFeatureMovePointType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::MovePointE;
           $$->PointConstructionMethodTypeValue.MovePoint = $1;
          }
        | y_Pierce_PointFeaturePierceType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::PierceE;
           $$->PointConstructionMethodTypeValue.Pierce = $1;
          }
        | y_Projection_PointFeatureProjectionType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::ProjectionE;
           $$->PointConstructionMethodTypeValue.Projection = $1;
          }
        | y_Transform_PointFeatureTransformType
          {$$ = new PointConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointConstructionMethodTypeType = PointConstructionMethodTypeChoicePair::TransformE;
           $$->PointConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_PointDefinedCurveBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check
          {$$ = new PointDefinedCurveBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedCurveBestFitType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedCurveCheckedFeatureType :
          ENDITEM y_CheckDetails_PointDefinedCurveCheckedType_0
          {$$ = new PointDefinedCurveCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedCurveCheckedType :
          ENDITEM y_PointDefinedCurveCheckedTypeChoicePair
          {$$ = new PointDefinedCurveCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedCurveCheckedTypeChoicePair :
          y_Constructed_PointDefinedCurveConstructionMethodType
          {$$ = new PointDefinedCurveCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveCheckedTypeType = PointDefinedCurveCheckedTypeChoicePair::ConstructedE;
           $$->PointDefinedCurveCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new PointDefinedCurveCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveCheckedTypeType = PointDefinedCurveCheckedTypeChoicePair::MeasuredE;
           $$->PointDefinedCurveCheckedTypeValue.Measured = $1;
          }
        ;

y_PointDefinedCurveConstructionMethodType :
          ENDITEM y_PointDefinedCurveConstructionMethodTypeChoicePair
          {$$ = new PointDefinedCurveConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedCurveConstructionMethodTypeChoicePair :
          y_BestFit_PointDefinedCurveBestFitType
          {$$ = new PointDefinedCurveConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveConstructionMethodTypeType = PointDefinedCurveConstructionMethodTypeChoicePair::BestFitE;
           $$->PointDefinedCurveConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Copy_PointDefinedCurveCopyType
          {$$ = new PointDefinedCurveConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveConstructionMethodTypeType = PointDefinedCurveConstructionMethodTypeChoicePair::CopyE;
           $$->PointDefinedCurveConstructionMethodTypeValue.Copy = $1;
          }
        | y_Extract_PointDefinedCurveExtractType
          {$$ = new PointDefinedCurveConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveConstructionMethodTypeType = PointDefinedCurveConstructionMethodTypeChoicePair::ExtractE;
           $$->PointDefinedCurveConstructionMethodTypeValue.Extract = $1;
          }
        | y_FromScan_PointDefinedCurveFromScanType
          {$$ = new PointDefinedCurveConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveConstructionMethodTypeType = PointDefinedCurveConstructionMethodTypeChoicePair::FromScanE;
           $$->PointDefinedCurveConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Recompensated_PointDefinedCurveRecompType
          {$$ = new PointDefinedCurveConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveConstructionMethodTypeType = PointDefinedCurveConstructionMethodTypeChoicePair::RecompensatedE;
           $$->PointDefinedCurveConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_PointDefinedCurveTransformType
          {$$ = new PointDefinedCurveConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveConstructionMethodTypeType = PointDefinedCurveConstructionMethodTypeChoicePair::TransformE;
           $$->PointDefinedCurveConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_PointDefinedCurveCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePointDefinedCurve_BaseFeatureType
          {$$ = new PointDefinedCurveCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDefinedCurveExtractType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_CurveFeature_BaseFeatureType
          {$$ = new PointDefinedCurveExtractType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDefinedCurveFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          {$$ = new PointDefinedCurveFeatureDefinitionType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedCurveFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedCurveFeatureDefinition_PointDefinedCurveFeatureDefinitionType :
          PointDefinedCurveFeatureDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new PointDefinedCurveFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PointDefinedCurveFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PointDefinedCurveFeatureDefinitionType attributes");
             }
           delete $2;
          }
        | PointDefinedCurveFeatureDefinitionSTART
          y_PointDefinedCurveFeatureDefinitionType
          PointDefinedCurveFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "PointDefinedCurveFeatureDefinition";
          }
        ;

y_PointDefinedCurveFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_PointDefinedCurveMeasurementDeterminationType
          {$$ = new PointDefinedCurveFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedCurveFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedCurveFeatureItem_PointDefinedCurveFeatureItemType :
          PointDefinedCurveFeatureItemSTART
          y_PointDefinedCurveFeatureItemType
          PointDefinedCurveFeatureItemEND
          {$$ = $2;
           $$->printElement = "PointDefinedCurveFeatureItem";
          }
        ;

y_PointDefinedCurveFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_DefiningPoints_DefiningPointsMeasurementType_0
          y_Plane_MeasuredPlaneType_0 y_Form_MeasuredLinearValueType_0
          {$$ = new PointDefinedCurveFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedCurveFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedCurveFeatureMeasurement_PointDefinedCurveFeatureMeasurementType :
          PointDefinedCurveFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new PointDefinedCurveFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PointDefinedCurveFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PointDefinedCurveFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | PointDefinedCurveFeatureMeasurementSTART
          y_PointDefinedCurveFeatureMeasurementType
          PointDefinedCurveFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "PointDefinedCurveFeatureMeasurement";
          }
        ;

y_PointDefinedCurveFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_SurfaceFeatureNominalId_QIFReferenceFullType_0
          y_DefiningPoints_DefiningPointsNominalType y_Plane_PlaneType_0
          y_Constructed_PointDefinedCurveConstructionMethodType_0
          {$$ = new PointDefinedCurveFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedCurveFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedCurveFeatureNominal_PointDefinedCurveFeatureNominalType :
          PointDefinedCurveFeatureNominalSTART
          y_PointDefinedCurveFeatureNominalType
          PointDefinedCurveFeatureNominalEND
          {$$ = $2;
           $$->printElement = "PointDefinedCurveFeatureNominal";
          }
        ;

y_PointDefinedCurveFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          {$$ = new PointDefinedCurveFromScanType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PointDefinedCurveMeasurementDeterminationType :
          ENDITEM y_PointDefinedCurveMeasurementDeterminationTypeChoicePair
          {$$ = new PointDefinedCurveMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedCurveMeasurementDeterminationTypeChoicePair :
          y_Checked_PointDefinedCurveCheckedFeatureType
          {$$ = new PointDefinedCurveMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveMeasurementDeterminationTypeType = PointDefinedCurveMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->PointDefinedCurveMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new PointDefinedCurveMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurveMeasurementDeterminationTypeType = PointDefinedCurveMeasurementDeterminationTypeChoicePair::SetE;
           $$->PointDefinedCurveMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_PointDefinedCurvePointSamplingStrategyType :
          ENDITEM y_PointDefinedCurvePointSamplingStrategyTypeChoicePair
          {$$ = new PointDefinedCurvePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedCurvePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_PointDefinedPointSamplingStrategyEnumType
          {$$ = new PointDefinedCurvePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurvePointSamplingStrategyTypeType = PointDefinedCurvePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->PointDefinedCurvePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new PointDefinedCurvePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedCurvePointSamplingStrategyTypeType = PointDefinedCurvePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->PointDefinedCurvePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_PointDefinedCurveRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new PointDefinedCurveRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDefinedCurveTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePointDefinedCurve_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new PointDefinedCurveTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PointDefinedPointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new PointDefinedPointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad PointDefinedPointSamplingStrategyEnumType value");
          }
        ;

y_PointDefinedSurfaceBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_3_u_Check
          {$$ = new PointDefinedSurfaceBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedSurfaceBestFitType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedSurfaceCheckedFeatureType :
          ENDITEM y_CheckDetails_PointDefinedSurfaceCheckedType_0
          {$$ = new PointDefinedSurfaceCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedSurfaceCheckedType :
          ENDITEM y_PointDefinedSurfaceCheckedTypeChoicePair
          {$$ = new PointDefinedSurfaceCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedSurfaceCheckedTypeChoicePair :
          y_Constructed_PointDefinedSurfaceConstructionMethodType
          {$$ = new PointDefinedSurfaceCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceCheckedTypeType = PointDefinedSurfaceCheckedTypeChoicePair::ConstructedE;
           $$->PointDefinedSurfaceCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new PointDefinedSurfaceCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceCheckedTypeType = PointDefinedSurfaceCheckedTypeChoicePair::MeasuredE;
           $$->PointDefinedSurfaceCheckedTypeValue.Measured = $1;
          }
        ;

y_PointDefinedSurfaceConstructionMethodType :
          ENDITEM y_PointDefinedSurfaceConstructionMethodTypeChoicePair
          {$$ = new PointDefinedSurfaceConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedSurfaceConstructionMethodTypeChoicePair :
          y_BestFit_PointDefinedSurfaceBestFitType
          {$$ = new PointDefinedSurfaceConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceConstructionMethodTypeType = PointDefinedSurfaceConstructionMethodTypeChoicePair::BestFitE;
           $$->PointDefinedSurfaceConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Copy_PointDefinedSurfaceCopyType
          {$$ = new PointDefinedSurfaceConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceConstructionMethodTypeType = PointDefinedSurfaceConstructionMethodTypeChoicePair::CopyE;
           $$->PointDefinedSurfaceConstructionMethodTypeValue.Copy = $1;
          }
        | y_Extract_PointDefinedSurfaceExtractType
          {$$ = new PointDefinedSurfaceConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceConstructionMethodTypeType = PointDefinedSurfaceConstructionMethodTypeChoicePair::ExtractE;
           $$->PointDefinedSurfaceConstructionMethodTypeValue.Extract = $1;
          }
        | y_Recompensated_PointDefinedSurfaceRecompType
          {$$ = new PointDefinedSurfaceConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceConstructionMethodTypeType = PointDefinedSurfaceConstructionMethodTypeChoicePair::RecompensatedE;
           $$->PointDefinedSurfaceConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_PointDefinedSurfaceTransformType
          {$$ = new PointDefinedSurfaceConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceConstructionMethodTypeType = PointDefinedSurfaceConstructionMethodTypeChoicePair::TransformE;
           $$->PointDefinedSurfaceConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_PointDefinedSurfaceCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePointDefinedSurface_BaseFeatureType
          {$$ = new PointDefinedSurfaceCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDefinedSurfaceExtractType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType
          {$$ = new PointDefinedSurfaceExtractType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDefinedSurfaceFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          {$$ = new PointDefinedSurfaceFeatureDefinitionType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedSurfaceFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedSurfaceFeatureDefinition_PointDefinedSurfaceFeatureDefinitionType :
          PointDefinedSurfaceFeatureDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new PointDefinedSurfaceFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PointDefinedSurfaceFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PointDefinedSurfaceFeatureDefinitionType attributes");
             }
           delete $2;
          }
        | PointDefinedSurfaceFeatureDefinitionSTART
          y_PointDefinedSurfaceFeatureDefinitionType
          PointDefinedSurfaceFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "PointDefinedSurfaceFeatureDefinition";
          }
        ;

y_PointDefinedSurfaceFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_PointDefinedSurfaceMeasurementDeterminationType
          {$$ = new PointDefinedSurfaceFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedSurfaceFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedSurfaceFeatureItem_PointDefinedSurfaceFeatureItemType :
          PointDefinedSurfaceFeatureItemSTART
          y_PointDefinedSurfaceFeatureItemType
          PointDefinedSurfaceFeatureItemEND
          {$$ = $2;
           $$->printElement = "PointDefinedSurfaceFeatureItem";
          }
        ;

y_PointDefinedSurfaceFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_DefiningPoints_DefiningPointsMeasurementType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new PointDefinedSurfaceFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedSurfaceFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedSurfaceFeatureMeasurement_PointDefinedSurfaceFeatureMeasurementType :
          PointDefinedSurfaceFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new PointDefinedSurfaceFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PointDefinedSurfaceFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PointDefinedSurfaceFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | PointDefinedSurfaceFeatureMeasurementSTART
          y_PointDefinedSurfaceFeatureMeasurementType
          PointDefinedSurfaceFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "PointDefinedSurfaceFeatureMeasurement";
          }
        ;

y_PointDefinedSurfaceFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_DefiningPoints_DefiningPointsNominalType
          y_Constructed_PointDefinedSurfaceConstructionMethodType_0
          {$$ = new PointDefinedSurfaceFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDefinedSurfaceFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_PointDefinedSurfaceFeatureNominal_PointDefinedSurfaceFeatureNominalType :
          PointDefinedSurfaceFeatureNominalSTART
          y_PointDefinedSurfaceFeatureNominalType
          PointDefinedSurfaceFeatureNominalEND
          {$$ = $2;
           $$->printElement = "PointDefinedSurfaceFeatureNominal";
          }
        ;

y_PointDefinedSurfaceMeasurementDeterminationType :
          ENDITEM
          y_PointDefinedSurfaceMeasurementDeterminationTypeChoicePair
          {$$ = new PointDefinedSurfaceMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedSurfaceMeasurementDeterminationTypeChoicePair :
          y_Checked_PointDefinedSurfaceCheckedFeatureType
          {$$ = new PointDefinedSurfaceMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceMeasurementDeterminationTypeType = PointDefinedSurfaceMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->PointDefinedSurfaceMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new PointDefinedSurfaceMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfaceMeasurementDeterminationTypeType = PointDefinedSurfaceMeasurementDeterminationTypeChoicePair::SetE;
           $$->PointDefinedSurfaceMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_PointDefinedSurfacePointSamplingStrategyType :
          ENDITEM y_PointDefinedSurfacePointSamplingStrategyTypeChoicePair
          {$$ = new PointDefinedSurfacePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointDefinedSurfacePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_PointDefinedPointSamplingStrategyEnumType
          {$$ = new PointDefinedSurfacePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfacePointSamplingStrategyTypeType = PointDefinedSurfacePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->PointDefinedSurfacePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new PointDefinedSurfacePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointDefinedSurfacePointSamplingStrategyTypeType = PointDefinedSurfacePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->PointDefinedSurfacePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_PointDefinedSurfaceRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new PointDefinedSurfaceRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDefinedSurfaceTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePointDefinedSurface_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new PointDefinedSurfaceTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PointDensity_PositiveDecimalType :
          PointDensitySTART ENDITEM {yyReadData = 1;} y_PositiveDecimalType
          PointDensityEND
          {$$ = $4;}
        ;

y_PointDeviationStatsEvalType :
          ENDITEM y_MeasuredPointIds_StatsArrayIdType
          y_DeviationStats_StatsLinearType
          {$$ = new PointDeviationStatsEvalType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDeviationStats_PointDeviationStatsEvalType :
          PointDeviationStatsSTART y_PointDeviationStatsEvalType
          PointDeviationStatsEND
          {$$ = $2;}
        ;

y_PointDeviationType :
          ENDITEM y_MeasurePointId_PointSetReferenceSingleType
          y_Deviation_LinearValueType
          {$$ = new PointDeviationType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointDeviation_PointDeviationType :
          PointDeviationSTART y_PointDeviationType PointDeviationEND
          {$$ = $2;}
        ;

y_PointDeviationsStatsEvalType :
          y_LiztAttributePair ENDITEM
          y_LiztPointDeviationStats_PointDeviationStatsEvalType_1_u
          {$$ = new PointDeviationsStatsEvalType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDeviationsStatsEvalType attributes");
             }
           delete $1;
          }
        ;

y_PointDeviationsStats_PointDeviationsStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | PointDeviationsStatsSTART y_PointDeviationsStatsEvalType
          PointDeviationsStatsEND
          {$$ = $2;}
        ;

y_PointDeviationsType :
          y_LiztAttributePair ENDITEM
          y_LiztPointDeviation_PointDeviationType_1_u
          {$$ = new PointDeviationsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointDeviationsType attributes");
             }
           delete $1;
          }
        ;

y_PointDeviations_PointDeviationsType_0 :
          /* empty */
          {$$ = 0;}
        | PointDeviationsSTART y_PointDeviationsType PointDeviationsEND
          {$$ = $2;}
        ;

y_PointEntityType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_XYZ_PointSimpleType
          {$$ = new PointEntityType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointEntityType attributes");
             }
           delete $1;
          }
        ;

y_PointExtension_Point2dSimpleType :
          PointExtensionSTART y_Point2dSimpleType PointExtensionEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_PointFeatureCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new PointFeatureCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointFeatureCenterOfGravityType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_BaseFeatureType_3_u_Check
          {$$ = new PointFeatureCenterOfGravityType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointFeatureCenterOfGravityType attributes");
             }
           delete $1;
          }
        ;

y_PointFeatureCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePointFeature_BaseFeatureType
          {$$ = new PointFeatureCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          {$$ = new PointFeatureDefinitionType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PointFeatureDefinition_PointFeatureDefinitionType :
          PointFeatureDefinitionSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new PointFeatureDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PointFeatureDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PointFeatureDefinitionType attributes");
             }
           delete $2;
          }
        | PointFeatureDefinitionSTART y_PointFeatureDefinitionType
          PointFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "PointFeatureDefinition";
          }
        ;

y_PointFeatureExt_1122_PointFeatureExt_1122_Type :
          y_PointFeatureExt_1122_Type
          {$$ = $1;}
        ;

y_PointFeatureExt_1122_Type :
          y_PointFeatureExt_1122_TypeChoicePair
          {$$ = new PointFeatureExt_1122_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointFeatureExt_1122_TypeChoicePair :
          y_BaseAxisFeature_BaseFeatureType
          {$$ = new PointFeatureExt_1122_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureExt_1122_TypeType = PointFeatureExt_1122_TypeChoicePair::BaseAxisFeatureE;
           $$->PointFeatureExt_1122_TypeValue.BaseAxisFeature = $1;
          }
        | y_Radial_XmlToken
          {$$ = new PointFeatureExt_1122_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureExt_1122_TypeType = PointFeatureExt_1122_TypeChoicePair::RadialE;
           $$->PointFeatureExt_1122_TypeValue.Radial = $1;
          }
        | y_Vector_UnitVectorType
          {$$ = new PointFeatureExt_1122_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureExt_1122_TypeType = PointFeatureExt_1122_TypeChoicePair::VectorE;
           $$->PointFeatureExt_1122_TypeValue.Vector = $1;
          }
        | y_Xaxis_XmlToken
          {$$ = new PointFeatureExt_1122_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureExt_1122_TypeType = PointFeatureExt_1122_TypeChoicePair::XaxisE;
           $$->PointFeatureExt_1122_TypeValue.Xaxis = $1;
          }
        | y_Yaxis_XmlToken
          {$$ = new PointFeatureExt_1122_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureExt_1122_TypeType = PointFeatureExt_1122_TypeChoicePair::YaxisE;
           $$->PointFeatureExt_1122_TypeValue.Yaxis = $1;
          }
        | y_Zaxis_XmlToken
          {$$ = new PointFeatureExt_1122_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureExt_1122_TypeType = PointFeatureExt_1122_TypeChoicePair::ZaxisE;
           $$->PointFeatureExt_1122_TypeValue.Zaxis = $1;
          }
        ;

y_PointFeatureExtremeType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType y_Minimum_XmlBoolean
          y_PointFeatureExt_1122_PointFeatureExt_1122_Type
          {$$ = new PointFeatureExtremeType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_PointFeatureFromConeType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCone_BaseFeatureType
          {$$ = new PointFeatureFromConeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointFeatureFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_RetrievalMethod_RetrievalMethodEnumType
          {$$ = new PointFeatureFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_PointFeatureIntersectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztIntersectionFeature_SequencedBaseFeatureType_2_2_Check
          {$$ = new PointFeatureIntersectionType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_PointMeasurementDeterminationType
          {$$ = new PointFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_PointFeatureItem_PointFeatureItemType :
          PointFeatureItemSTART y_PointFeatureItemType PointFeatureItemEND
          {$$ = $2;
           $$->printElement = "PointFeatureItem";
          }
        ;

y_PointFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0 y_Normal_MeasuredUnitVectorType_0
          {$$ = new PointFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_PointFeatureMeasurement_PointFeatureMeasurementType :
          PointFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new PointFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "PointFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad PointFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | PointFeatureMeasurementSTART y_PointFeatureMeasurementType
          PointFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "PointFeatureMeasurement";
          }
        ;

y_PointFeatureMidPointType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_2_2_Check
          {$$ = new PointFeatureMidPointType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointFeatureMov_1123_PointFeatureMov_1123_Type :
          y_PointFeatureMov_1123_Type
          {$$ = $1;}
        ;

y_PointFeatureMov_1123_Type :
          y_PointFeatureMov_1123_TypeChoicePair
          {$$ = new PointFeatureMov_1123_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointFeatureMov_1123_TypeChoicePair :
          y_DirectionalOffset_DirectionalOffsetType
          {$$ = new PointFeatureMov_1123_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureMov_1123_TypeType = PointFeatureMov_1123_TypeChoicePair::DirectionalOffsetE;
           $$->PointFeatureMov_1123_TypeValue.DirectionalOffset = $1;
          }
        | y_Offset_VectorType
          {$$ = new PointFeatureMov_1123_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureMov_1123_TypeType = PointFeatureMov_1123_TypeChoicePair::OffsetE;
           $$->PointFeatureMov_1123_TypeValue.Offset = $1;
          }
        ;

y_PointFeatureMovePointAxisType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseLocationFeature_BaseFeatureType y_Distance_LinearValueType
          y_BaseAxisFeature_BaseFeatureType
          {$$ = new PointFeatureMovePointAxisType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_PointFeatureMovePointType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          y_PointFeatureMov_1123_PointFeatureMov_1123_Type
          {$$ = new PointFeatureMovePointType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PointFeatureMovePointVectorType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType y_Distance_LinearValueType
          y_Vector_UnitVectorType
          {$$ = new PointFeatureMovePointVectorType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_PointFeatureNom_1124_PointFeatureNom_1124_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_PointFeatureNom_1124_Type
          {$$ = $1;}
        ;

y_PointFeatureNom_1124_Type :
          y_PointFeatureNom_1124_TypeChoicePair
          {$$ = new PointFeatureNom_1124_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointFeatureNom_1124_TypeChoicePair :
          y_CurveFeatureNominalId_QIFReferenceFullType
          {$$ = new PointFeatureNom_1124_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureNom_1124_TypeType = PointFeatureNom_1124_TypeChoicePair::CurveFeatureNominalIdE;
           $$->PointFeatureNom_1124_TypeValue.CurveFeatureNominalId = $1;
          }
        | y_SurfaceFeatureNominalId_QIFReferenceFullType
          {$$ = new PointFeatureNom_1124_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointFeatureNom_1124_TypeType = PointFeatureNom_1124_TypeChoicePair::SurfaceFeatureNominalIdE;
           $$->PointFeatureNom_1124_TypeValue.SurfaceFeatureNominalId = $1;
          }
        ;

y_PointFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_PointFeatureNom_1124_PointFeatureNom_1124_Type_0
          y_Location_PointType y_Normal_UnitVectorType_0
          y_Constructed_PointConstructionMethodType_0
          {$$ = new PointFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_PointFeatureNominal_PointFeatureNominalType :
          PointFeatureNominalSTART y_PointFeatureNominalType
          PointFeatureNominalEND
          {$$ = $2;
           $$->printElement = "PointFeatureNominal";
          }
        ;

y_PointFeaturePierceType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_CurveFeature_BaseFeatureType
          {$$ = new PointFeaturePierceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PointFeatureProjectionType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_ProjectionPlane_BaseFeatureType
          y_ProjectionFeature_BaseFeatureType
          {$$ = new PointFeatureProjectionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PointFeatureTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BasePointFeature_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new PointFeatureTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PointFeature_BaseFeatureType :
          PointFeatureSTART y_BaseFeatureType PointFeatureEND
          {$$ = $2;}
        ;

y_PointId_QIFReferenceFullType :
          PointIdSTART y_QIFReferenceFullType PointIdEND
          {$$ = $2;}
        ;

y_PointIndexType :
          ENDITEM y_PointIndexTypeChoicePair
          {$$ = new PointIndexType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointIndexTypeChoicePair :
          y_All_XmlToken
          {$$ = new PointIndexTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointIndexTypeType = PointIndexTypeChoicePair::AllE;
           $$->PointIndexTypeValue.All = $1;
          }
        | y_Range_PointRangeType
          {$$ = new PointIndexTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointIndexTypeType = PointIndexTypeChoicePair::RangeE;
           $$->PointIndexTypeValue.Range = $1;
          }
        | y_Single_NaturalType
          {$$ = new PointIndexTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointIndexTypeType = PointIndexTypeChoicePair::SingleE;
           $$->PointIndexTypeValue.Single = $1;
          }
        ;

y_PointIndex_PointIndexType :
          PointIndexSTART y_PointIndexType PointIndexEND
          {$$ = $2;}
        ;

y_PointIndices_ArrayI3Type :
          PointIndicesSTART y_ArrayI3Type PointIndicesEND
          {$$ = $2;}
        ;

y_PointListType :
          y_LiztAttributePair ENDITEM y_LiztPointSetId_substituteType_1_u
          {$$ = new PointListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointListType attributes");
             }
           delete $1;
          }
        ;

y_PointList_PointListType_0 :
          /* empty */
          {$$ = 0;}
        | PointListSTART y_PointListType PointListEND
          {$$ = $2;}
        ;

y_PointMax_PointSimpleType :
          PointMaxSTART y_PointSimpleType PointMaxEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_PointMeasurementDeterminationType :
          ENDITEM y_PointMeasurementDeterminationTypeChoicePair
          {$$ = new PointMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointMeasurementDeterminationTypeChoicePair :
          y_Checked_PointCheckedFeatureType
          {$$ = new PointMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointMeasurementDeterminationTypeType = PointMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->PointMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new PointMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointMeasurementDeterminationTypeType = PointMeasurementDeterminationTypeChoicePair::SetE;
           $$->PointMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_PointMin_PointSimpleType :
          PointMinSTART y_PointSimpleType PointMinEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_PointPointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new PointPointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad PointPointSamplingStrategyEnumType value");
          }
        ;

y_PointPointSamplingStrategyType :
          ENDITEM y_PointPointSamplingStrategyTypeChoicePair
          {$$ = new PointPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_PointPointSamplingStrategyEnumType
          {$$ = new PointPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointPointSamplingStrategyTypeType = PointPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->PointPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new PointPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PointPointSamplingStrategyTypeType = PointPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->PointPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_PointProfileCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_ProfileCharacte_1067_ProfileCharacte_1067_Type_0
          y_OffsetZone_XmlBoolean_0 y_VariableAngle_XmlBoolean_0
          y_SecondCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_ThirdCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_FourthCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_OrientationOnly_XmlBoolean_0
          {$$ = new PointProfileCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointProfileCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PointProfileCharacteristicDefinition_PointProfileCharacteristicDefinitionType :
          PointProfileCharacteristicDefinitionSTART
          y_PointProfileCharacteristicDefinitionType
          PointProfileCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "PointProfileCharacteristicDefinition";
          }
        ;

y_PointProfileCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new PointProfileCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointProfileCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_PointProfileCharacteristicItem_PointProfileCharacteristicItemType :
          PointProfileCharacteristicItemSTART
          y_PointProfileCharacteristicItemType
          PointProfileCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "PointProfileCharacteristicItem";
          }
        ;

y_PointProfileCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_WorstPositiveDeviation_LinearValueType_0
          y_WorstNegativeDeviation_LinearValueType_0
          y_PointDeviations_PointDeviationsType_0 y_DatumsOk_XmlBoolean_0
          y_DRFTransformActualId_QIFReferenceType_0
          y_SecondCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_ThirdCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_FourthCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          {$$ = new PointProfileCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointProfileCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_PointProfileCharacteristicMeasurement_PointProfileCharacteristicMeasurementType :
          PointProfileCharacteristicMeasurementSTART
          y_PointProfileCharacteristicMeasurementType
          PointProfileCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "PointProfileCharacteristicMeasurement";
          }
        ;

y_PointProfileCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          {$$ = new PointProfileCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointProfileCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_PointProfileCharacteristicNominal_PointProfileCharacteristicNominalType :
          PointProfileCharacteristicNominalSTART
          y_PointProfileCharacteristicNominalType
          PointProfileCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "PointProfileCharacteristicNominal";
          }
        ;

y_PointProfileCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_WorstPositiveDeviationStats_StatsLinearType_0
          y_WorstNegativeDeviationStats_StatsLinearType_0
          y_PointDeviationsStats_PointDeviationsStatsEvalType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_CompositeSegmentsStats_CompositeSegmentsProfileStatsEvalType_0
          {$$ = new PointProfileCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
          }
        ;

y_PointProfileCharacteristicStats_PointProfileCharacteristicStatsEvalType :
          PointProfileCharacteristicStatsSTART
          y_PointProfileCharacteristicStatsEvalType
          PointProfileCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "PointProfileCharacteristicStats";
          }
        ;

y_PointRangeType :
          ENDITEM y_Start_NaturalType y_Stop_NaturalType
          {$$ = new PointRangeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PointSamplingStrategyEnum_ClosedCurvePointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_ClosedCurvePointSamplingStrategyEnumType
          PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_ConePointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_ConePointSamplingStrategyEnumType PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_ElongatedCylinderPointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_ElongatedCylinderPointSamplingStrategyEnumType
          PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_ExtrudedCrossSectionPointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_ExtrudedCrossSectionPointSamplingStrategyEnumType
          PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_OpenCurvePointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_OpenCurvePointSamplingStrategyEnumType
          PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_PlanePointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_PlanePointSamplingStrategyEnumType PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_PointDefinedPointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_PointDefinedPointSamplingStrategyEnumType
          PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_PointPointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_PointPointSamplingStrategyEnumType PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_SpherePointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_SpherePointSamplingStrategyEnumType
          PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSamplingStrategyEnum_SurfaceOfRevolutionPointSamplingStrategyEnumType :
          PointSamplingStrategyEnumSTART ENDITEM {yyReadData = 1;}
          y_SurfaceOfRevolutionPointSamplingStrategyEnumType
          PointSamplingStrategyEnumEND
          {$$ = $4;}
        ;

y_PointSetId_substituteType :
          y_RangePointSetId_PointSetReferenceRangeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SinglePointSetId_PointSetReferenceSingleType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_WholePointSetId_PointSetReferenceWholeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PointSetNominalType :
          y_LiztAttributePair ENDITEM
          y_LiztMeasurePoint_MeasurePointNominalType_1_u
          {$$ = new PointSetNominalType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointSetNominalType attributes");
             }
           delete $1;
          }
        ;

y_PointSetReferenceRangeType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new PointSetReferenceRangeType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointSetReferenceRangeType attributes");
             }
           delete $1;
          }
        ;

y_PointSetReferenceSingleType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new PointSetReferenceSingleType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointSetReferenceSingleType attributes");
             }
           delete $1;
          }
        ;

y_PointSetReferenceWholeType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new PointSetReferenceWholeType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new PointSetReferenceWholeType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointSetReferenceWholeType attributes");
             }
           delete $1;
          }
        ;

y_PointSetType :
          y_LiztAttributePair ENDITEM y_LiztPoint_PointEntityType_1_u
          {$$ = new PointSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointSetType attributes");
             }
           delete $1;
          }
        ;

y_PointSet_PointSetType_0 :
          /* empty */
          {$$ = 0;}
        | PointSetSTART y_PointSetType PointSetEND
          {$$ = $2;}
        ;

y_PointSimpleType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new PointSimpleType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_PointSimpleType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PointType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new PointType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new PointType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PointType attributes");
             }
           delete $1;
          }
        | y_PointType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Point_ElementReferenceType :
          PointSTART y_ElementReferenceType PointEND
          {$$ = $2;}
        ;

y_Point_MeasuredPointType :
          PointSTART y_MeasuredPointType PointEND
          {$$ = $2;}
        ;

y_Point_Point2dSimpleType :
          PointSTART y_Point2dSimpleType PointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_Point_PointEntityType :
          PointSTART y_PointEntityType PointEND
          {$$ = $2;
           $$->printElement = "Point";
          }
        ;

y_Point_PointType :
          PointSTART y_PointType PointEND
          {$$ = $2;}
        ;

y_PointingLaser_LaserType_0 :
          /* empty */
          {$$ = 0;}
        | PointingLaserSTART y_LaserType PointingLaserEND
          {$$ = $2;
           $$->printElement = "PointingLaser";
          }
        ;

y_PointsBinary_ArrayBinaryType :
          PointsBinarySTART y_ArrayBinaryType PointsBinaryEND
          {$$ = $2;}
        ;

y_PointsColorBinary_ArrayBinaryType :
          PointsColorBinarySTART y_ArrayBinaryType PointsColorBinaryEND
          {$$ = $2;}
        ;

y_PointsColor_ArrayUnsignedByteType :
          PointsColorSTART y_ArrayUnsignedByteType PointsColorEND
          {$$ = $2;}
        ;

y_PointsHiddenBinary_ArrayBinaryType :
          PointsHiddenBinarySTART y_ArrayBinaryType PointsHiddenBinaryEND
          {$$ = $2;}
        ;

y_PointsHidden_ArrayIntType :
          PointsHiddenSTART y_ArrayIntType PointsHiddenEND
          {$$ = $2;}
        ;

y_PointsVisibleBinary_ArrayBinaryType :
          PointsVisibleBinarySTART y_ArrayBinaryType PointsVisibleBinaryEND
          {$$ = $2;}
        ;

y_PointsVisible_ArrayIntType :
          PointsVisibleSTART y_ArrayIntType PointsVisibleEND
          {$$ = $2;}
        ;

y_Points_ArrayPoint2dType :
          PointsSTART y_ArrayPoint2dType PointsEND
          {$$ = $2;}
        ;

y_Points_ArrayPointType :
          PointsSTART y_ArrayPointType PointsEND
          {$$ = $2;}
        ;

y_Points_ListDoubleType :
          PointsSTART y_ListDoubleType PointsEND
          {$$ = $2;}
        ;

y_Points_ValidationPointsType_0 :
          /* empty */
          {$$ = 0;}
        | PointsSTART y_ValidationPointsType PointsEND
          {$$ = $2;}
        ;

y_PoissonsRatio_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | PoissonsRatioSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          PoissonsRatioEND
          {$$ = $4;}
        ;

y_PolarAngleResolution_AngularValueType :
          PolarAngleResolutionSTART y_AngularValueType
          PolarAngleResolutionEND
          {$$ = $2;}
        ;

y_PolyLineType :
          y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new PolyLineType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PolyLineType attributes");
             }
           delete $1;
          }
        | y_PolyLineType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PolyLine_PolyLineType :
          PolyLineSTART y_PolyLineType PolyLineEND
          {$$ = $2;}
        ;

y_PolyLine_PolyLineType_0 :
          /* empty */
          {$$ = 0;}
        | PolyLineSTART y_PolyLineType PolyLineEND
          {$$ = $2;}
        ;

y_Polyline12CoreT_1221_Polyline12CoreT_1221_Type :
          y_Polyline12CoreT_1221_Type
          {$$ = $1;}
        ;

y_Polyline12CoreT_1221_Type :
          y_Polyline12CoreT_1221_TypeChoicePair
          {$$ = new Polyline12CoreT_1221_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Polyline12CoreT_1221_TypeChoicePair :
          y_PointsBinary_ArrayBinaryType
          {$$ = new Polyline12CoreT_1221_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Polyline12CoreT_1221_TypeType = Polyline12CoreT_1221_TypeChoicePair::PointsBinaryE;
           $$->Polyline12CoreT_1221_TypeValue.PointsBinary = $1;
          }
        | y_Points_ArrayPoint2dType
          {$$ = new Polyline12CoreT_1221_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Polyline12CoreT_1221_TypeType = Polyline12CoreT_1221_TypeChoicePair::PointsE;
           $$->Polyline12CoreT_1221_TypeValue.Points = $1;
          }
        ;

y_Polyline12CoreType :
          y_LiztAttributePair ENDITEM
          y_Polyline12CoreT_1221_Polyline12CoreT_1221_Type
          {$$ = new Polyline12CoreType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Polyline12CoreType attributes");
             }
           delete $1;
          }
        ;

y_Polyline12Core_Polyline12CoreType :
          Polyline12CoreSTART y_Polyline12CoreType Polyline12CoreEND
          {$$ = $2;
           $$->printElement = "Polyline12Core";
          }
        ;

y_Polyline12Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Polyline12Core_Polyline12CoreType
          {$$ = new Polyline12Type($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Polyline12Type attributes");
             }
           delete $1;
          }
        ;

y_Polyline12_Polyline12Type :
          Polyline12START y_Polyline12Type Polyline12END
          {$$ = $2;
           $$->printElement = "Polyline12";
          }
        ;

y_Polyline13CoreT_1222_Polyline13CoreT_1222_Type :
          y_Polyline13CoreT_1222_Type
          {$$ = $1;}
        ;

y_Polyline13CoreT_1222_Type :
          y_Polyline13CoreT_1222_TypeChoicePair
          {$$ = new Polyline13CoreT_1222_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Polyline13CoreT_1222_TypeChoicePair :
          y_PointsBinary_ArrayBinaryType
          {$$ = new Polyline13CoreT_1222_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Polyline13CoreT_1222_TypeType = Polyline13CoreT_1222_TypeChoicePair::PointsBinaryE;
           $$->Polyline13CoreT_1222_TypeValue.PointsBinary = $1;
          }
        | y_Points_ArrayPointType
          {$$ = new Polyline13CoreT_1222_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Polyline13CoreT_1222_TypeType = Polyline13CoreT_1222_TypeChoicePair::PointsE;
           $$->Polyline13CoreT_1222_TypeValue.Points = $1;
          }
        ;

y_Polyline13CoreType :
          y_LiztAttributePair ENDITEM
          y_Polyline13CoreT_1222_Polyline13CoreT_1222_Type
          {$$ = new Polyline13CoreType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Polyline13CoreType attributes");
             }
           delete $1;
          }
        ;

y_Polyline13Core_Polyline13CoreType :
          Polyline13CoreSTART y_Polyline13CoreType Polyline13CoreEND
          {$$ = $2;
           $$->printElement = "Polyline13Core";
          }
        ;

y_Polyline13Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Polyline13Core_Polyline13CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Polyline13Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Polyline13Type attributes");
             }
           delete $1;
          }
        ;

y_Polyline13_Polyline13Type :
          Polyline13START y_Polyline13Type Polyline13END
          {$$ = $2;
           $$->printElement = "Polyline13";
          }
        ;

y_Polyline2dType :
          ENDITEM y_Polyline2dType_1232_Polyline2dType_1232_Type
          {$$ = new Polyline2dType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM
          y_Polyline2dType_1232_Polyline2dType_1232_Type
          {$$ = new Polyline2dType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Polyline2dType attributes");
             }
           delete $1;
          }
        ;

y_Polyline2dType_1232_Polyline2dType_1232_Type :
          y_Polyline2dType_1232_Type
          {$$ = $1;}
        ;

y_Polyline2dType_1232_Type :
          y_Polyline2dType_1232_TypeChoicePair
          {$$ = new Polyline2dType_1232_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Polyline2dType_1232_TypeChoicePair :
          y_PointsBinary_ArrayBinaryType
          {$$ = new Polyline2dType_1232_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Polyline2dType_1232_TypeType = Polyline2dType_1232_TypeChoicePair::PointsBinaryE;
           $$->Polyline2dType_1232_TypeValue.PointsBinary = $1;
          }
        | y_Points_ArrayPoint2dType
          {$$ = new Polyline2dType_1232_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Polyline2dType_1232_TypeType = Polyline2dType_1232_TypeChoicePair::PointsE;
           $$->Polyline2dType_1232_TypeValue.Points = $1;
          }
        ;

y_Polyline_Polyline2dType :
          PolylineSTART y_Polyline2dType PolylineEND
          {$$ = $2;}
        ;

y_Polylines2dType :
          y_LiztAttributePair ENDITEM y_LiztPolyline_Polyline2dType_1_u
          {$$ = new Polylines2dType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Polylines2dType attributes");
             }
           delete $1;
          }
        ;

y_Polylines_Polylines2dType_0 :
          /* empty */
          {$$ = 0;}
        | PolylinesSTART y_Polylines2dType PolylinesEND
          {$$ = $2;}
        ;

y_PositionCapabilityCalculationEnumType :
          DATASTRING
          {$$ = new PositionCapabilityCalculationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad PositionCapabilityCalculationEnumType value");
          }
        ;

y_PositionCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_MaterialCondition_MaterialModifierEnumType
          y_SizeCharacteristicDefinitionId_QIFReferenceType_0
          y_ZoneShape_PositionZoneShapeType
          y_MaximumToleranceValue_LinearValueType_0
          y_ProjectedToleranceZoneValue_LinearValueType_0
          y_SecondCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0
          y_ThirdCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0
          y_FourthCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0
          y_ToPointToleranceValue_LinearValueType_0
          y_OrientationOnly_XmlBoolean_0
          {$$ = new PositionCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           if ($32) yyUnrefMap.erase($32);
           if ($33) yyUnrefMap.erase($33);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PositionCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_PositionCharacteristicDefinition_PositionCharacteristicDefinitionType :
          PositionCharacteristicDefinitionSTART
          y_PositionCharacteristicDefinitionType
          PositionCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "PositionCharacteristicDefinition";
          }
        ;

y_PositionCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new PositionCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PositionCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_PositionCharacteristicItem_PositionCharacteristicItemType :
          PositionCharacteristicItemSTART y_PositionCharacteristicItemType
          PositionCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "PositionCharacteristicItem";
          }
        ;

y_PositionCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_ZoneDataSet_ZoneDataSetType_0 y_DatumsOk_XmlBoolean_0
          y_Bonus_MeasuredLinearValueType_0
          y_DRFTransformActualId_QIFReferenceType_0
          y_SecondCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0
          y_ThirdCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0
          y_FourthCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0
          {$$ = new PositionCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PositionCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_PositionCharacteristicMeasurement_PositionCharacteristicMeasurementType :
          PositionCharacteristicMeasurementSTART
          y_PositionCharacteristicMeasurementType
          PositionCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "PositionCharacteristicMeasurement";
          }
        ;

y_PositionCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_CoordinateMethod_PositionCoordinateMethodType_0
          {$$ = new PositionCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PositionCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_PositionCharacteristicNominal_PositionCharacteristicNominalType :
          PositionCharacteristicNominalSTART
          y_PositionCharacteristicNominalType
          PositionCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "PositionCharacteristicNominal";
          }
        ;

y_PositionCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_BonusStats_StatsLinearType_0
          y_CapabilityCalculationMethod_PositionCapabilityCalculationEnumType_0
          y_CompositeSegmentsStats_CompositeSegmentsPositionStatsEvalType_0
          {$$ = new PositionCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
          }
        ;

y_PositionCharacteristicStats_PositionCharacteristicStatsEvalType :
          PositionCharacteristicStatsSTART
          y_PositionCharacteristicStatsEvalType
          PositionCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "PositionCharacteristicStats";
          }
        ;

y_PositionCoordinateMethodEnumType :
          DATASTRING
          {$$ = new PositionCoordinateMethodEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad PositionCoordinateMethodEnumType value");
          }
        ;

y_PositionCoordinateMethodType :
          ENDITEM y_Method_PositionCoordinateMethodEnumType
          y_FeatureZoneIds_ArrayReferenceFullType_0
          {$$ = new PositionCoordinateMethodType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_PositionDiametricalZoneType :
          ENDITEM y_Dimensionality_DimensionCountEnumType_0
          y_ZoneOrientationVector_UnitVectorType_0
          y_ElongatedZone_XmlBoolean_0
          {$$ = new PositionDiametricalZoneType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PositionNonDiametricalZoneType :
          ENDITEM y_Dimensionality_DimensionCountEnumType_0
          y_ZoneOrientationVector_UnitVectorType_0
          y_BoundaryZone_XmlBoolean_0
          y_ZoneOrientationEnum_ZoneOrientationEnumType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          {$$ = new PositionNonDiametricalZoneType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_PositionSphericalZoneType :
          ENDITEM y_Dimensionality_DimensionCountEnumType_0
          {$$ = new PositionSphericalZoneType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PositionZoneShapeType :
          ENDITEM y_PositionZoneShapeTypeChoicePair
          {$$ = new PositionZoneShapeType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PositionZoneShapeTypeChoicePair :
          y_DiametricalZone_PositionDiametricalZoneType
          {$$ = new PositionZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PositionZoneShapeTypeType = PositionZoneShapeTypeChoicePair::DiametricalZoneE;
           $$->PositionZoneShapeTypeValue.DiametricalZone = $1;
          }
        | y_NonDiametricalZone_PositionNonDiametricalZoneType
          {$$ = new PositionZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PositionZoneShapeTypeType = PositionZoneShapeTypeChoicePair::NonDiametricalZoneE;
           $$->PositionZoneShapeTypeValue.NonDiametricalZone = $1;
          }
        | y_SphericalZone_PositionSphericalZoneType
          {$$ = new PositionZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PositionZoneShapeTypeType = PositionZoneShapeTypeChoicePair::SphericalZoneE;
           $$->PositionZoneShapeTypeValue.SphericalZone = $1;
          }
        ;

y_PositiveDecimalType :
          DATASTRING
          {$$ = new PositiveDecimalType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad PositiveDecimalType value");
          }
        ;

y_PostalBox_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | PostalBoxSTART ENDITEM {yyReadData = 1;} y_XmlToken PostalBoxEND
          {$$ = $4;}
        ;

y_PostalCode_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | PostalCodeSTART ENDITEM {yyReadData = 1;} y_XmlToken
          PostalCodeEND
          {$$ = $4;}
        ;

y_PpThreshold_CriterionDecimalType :
          PpThresholdSTART y_CriterionDecimalType PpThresholdEND
          {$$ = $2;}
        ;

y_Pp_StatsMeasuredDecimalType :
          PpSTART y_StatsMeasuredDecimalType PpEND
          {$$ = $2;
           $$->printElement = "Pp";
          }
        ;

y_PpkThreshold_CriterionDecimalType :
          PpkThresholdSTART y_CriterionDecimalType PpkThresholdEND
          {$$ = $2;}
        ;

y_Ppk_StatsMeasuredDecimalType :
          PpkSTART y_StatsMeasuredDecimalType PpkEND
          {$$ = $2;
           $$->printElement = "Ppk";
          }
        ;

y_PreInspectionTr_1043_PreInspectionTr_1043_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_PreInspectionTr_1043_Type
          {$$ = $1;}
        ;

y_PreInspectionTr_1043_Type :
          y_PreInspectionTr_1043_TypeChoicePair
          {$$ = new PreInspectionTr_1043_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PreInspectionTr_1043_TypeChoicePair :
          y_ReferencedQIFPlanInstance_QPIdFullReferenceType
          {$$ = new PreInspectionTr_1043_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PreInspectionTr_1043_TypeType = PreInspectionTr_1043_TypeChoicePair::ReferencedQIFPlanInstanceE;
           $$->PreInspectionTr_1043_TypeValue.ReferencedQIFPlanInstance = $1;
          }
        | y_ReferencedQIFPlan_XmlNMTOKEN
          {$$ = new PreInspectionTr_1043_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PreInspectionTr_1043_TypeType = PreInspectionTr_1043_TypeChoicePair::ReferencedQIFPlanE;
           $$->PreInspectionTr_1043_TypeValue.ReferencedQIFPlan = $1;
          }
        ;

y_PreInspectionTraceabilityType :
          ENDITEM y_InspectingOrganization_OrganizationType_0
          y_CustomerOrganization_CustomerOrganizationType_0
          y_SupplierCode_XmlString_0 y_PurchaseOrderNumber_XmlString_0
          y_OrderNumber_XmlString_0 y_AsmPathIds_ArrayReferenceType_0
          y_ReportNumber_XmlString_0
          y_InspectionScope_InspectionScopeEnumType_0
          y_InspectionMode_InspectionModeEnumType_0
          y_PartialInspection_PartialInspectionType_0
          y_NotableEvents_NotableEventsType_0
          y_InspectionSoftwareItems_InspectionSoftwareItemsType_0
          y_InspectionProgram_InspectionProgramType_0
          y_SecurityClassification_SecurityClassificationType_0
          y_PlantLocation_LocationType_0
          y_PreInspectionTr_1043_PreInspectionTr_1043_Type_0
          y_FormalStandardId_QIFReferenceType y_Attributes_AttributesType_0
          {$$ = new PreInspectionTraceabilityType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
          }
        ;

y_PreInspectionTraceability_PreInspectionTraceabilityType_0 :
          /* empty */
          {$$ = 0;}
        | PreInspectionTraceabilitySTART y_PreInspectionTraceabilityType
          PreInspectionTraceabilityEND
          {$$ = $2;}
        ;

y_PrecedenceEnumType :
          DATASTRING
          {$$ = new PrecedenceEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad PrecedenceEnumType value");
          }
        ;

y_PrecedenceEnum_PrecedenceEnumType :
          PrecedenceEnumSTART ENDITEM {yyReadData = 1;}
          y_PrecedenceEnumType PrecedenceEnumEND
          {$$ = $4;}
        ;

y_PrecedenceType :
          ENDITEM y_PrecedenceTypeChoicePair
          {$$ = new PrecedenceType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PrecedenceTypeChoicePair :
          y_OtherPrecedence_XmlString
          {$$ = new PrecedenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PrecedenceTypeType = PrecedenceTypeChoicePair::OtherPrecedenceE;
           $$->PrecedenceTypeValue.OtherPrecedence = $1;
          }
        | y_PrecedenceEnum_PrecedenceEnumType
          {$$ = new PrecedenceTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PrecedenceTypeType = PrecedenceTypeChoicePair::PrecedenceEnumE;
           $$->PrecedenceTypeValue.PrecedenceEnum = $1;
          }
        ;

y_Precedence_PrecedenceType :
          PrecedenceSTART y_PrecedenceType PrecedenceEND
          {$$ = $2;}
        ;

y_Predecessor_XmlPositiveInteger :
          PredecessorSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          PredecessorEND
          {$$ = $4;}
        ;

y_PredecessorsType :
          y_LiztAttributePair ENDITEM
          y_LiztPredecessor_XmlPositiveInteger_1_u
          {$$ = new PredecessorsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PredecessorsType attributes");
             }
           delete $1;
          }
        ;

y_Predecessors_PredecessorsType_0 :
          /* empty */
          {$$ = 0;}
        | PredecessorsSTART y_PredecessorsType PredecessorsEND
          {$$ = $2;}
        ;

y_PreferredActionMethodId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | PreferredActionMethodIdSTART y_QIFReferenceType
          PreferredActionMethodIdEND
          {$$ = $2;}
        ;

y_PreferredResourceIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | PreferredResourceIdsSTART y_ArrayReferenceType
          PreferredResourceIdsEND
          {$$ = $2;}
        ;

y_PressureAbsoluteLinearity_MeasuredPressureValueType :
          PressureAbsoluteLinearitySTART y_MeasuredPressureValueType
          PressureAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_PressureCharact_1066_PressureCharact_1066_Type :
          y_PressureCharact_1066_Type
          {$$ = $1;}
        ;

y_PressureCharact_1066_Type :
          y_PressureCharact_1066_TypeChoicePair
          {$$ = new PressureCharact_1066_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PressureCharact_1066_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new PressureCharact_1066_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PressureCharact_1066_TypeType = PressureCharact_1066_TypeChoicePair::NonToleranceE;
           $$->PressureCharact_1066_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_PressureToleranceType
          {$$ = new PressureCharact_1066_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PressureCharact_1066_TypeType = PressureCharact_1066_TypeChoicePair::ToleranceE;
           $$->PressureCharact_1066_TypeValue.Tolerance = $1;
          }
        ;

y_PressureCriterion_CriterionPressureType_0 :
          /* empty */
          {$$ = 0;}
        | PressureCriterionSTART y_CriterionPressureType
          PressureCriterionEND
          {$$ = $2;
           $$->printElement = "PressureCriterion";
          }
        ;

y_PressureLimit_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | PressureLimitSTART y_PressureValueType PressureLimitEND
          {$$ = $2;}
        ;

y_PressureMeasurement_MeasuredPressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | PressureMeasurementSTART y_MeasuredPressureValueType
          PressureMeasurementEND
          {$$ = $2;}
        ;

y_PressureStatsSummaries_SummariesStatisticsPressureType_0 :
          /* empty */
          {$$ = 0;}
        | PressureStatsSummariesSTART y_SummariesStatisticsPressureType
          PressureStatsSummariesEND
          {$$ = $2;}
        ;

y_PressureStatsSummary_SummaryStatisticsPressureType :
          PressureStatsSummarySTART y_SummaryStatisticsPressureType
          PressureStatsSummaryEND
          {$$ = $2;
           $$->printElement = "PressureStatsSummary";
          }
        ;

y_PressureToleran_1020_PressureToleran_1020_Type :
          y_PressureToleran_1020_Type
          {$$ = $1;}
        ;

y_PressureToleran_1020_Type :
          y_PressureToleran_1020_TypeChoicePair
          {$$ = new PressureToleran_1020_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_PressureToleran_1020_TypeChoicePair :
          y_MinValue_PressureValueType
          {$$ = new PressureToleran_1020_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PressureToleran_1020_TypeType = PressureToleran_1020_TypeChoicePair::MinValueE;
           $$->PressureToleran_1020_TypeValue.MinValue = $1;
          }
        | y_PressureToleran_1037_PressureToleran_1037_Type
          {$$ = new PressureToleran_1020_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->PressureToleran_1020_TypeType = PressureToleran_1020_TypeChoicePair::PressureToleran_1037E;
           $$->PressureToleran_1020_TypeValue.PressureToleran_1037 = $1;
          }
        ;

y_PressureToleran_1037_PressureToleran_1037_Type :
          y_PressureToleran_1037_Type
          {$$ = $1;}
        ;

y_PressureToleran_1037_Type :
          y_MaxValue_PressureValueType y_MinValue_PressureValueType_0
          {$$ = new PressureToleran_1037_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_PressureToleranceType :
          ENDITEM y_PressureToleran_1020_PressureToleran_1020_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new PressureToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PressureUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new PressureUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_PressureUnit_PressureUnitType :
          PressureUnitSTART y_PressureUnitType PressureUnitEND
          {$$ = $2;}
        ;

y_PressureUnit_PressureUnitType_0 :
          /* empty */
          {$$ = 0;}
        | PressureUnitSTART y_PressureUnitType PressureUnitEND
          {$$ = $2;}
        ;

y_PressureValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new PressureValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new PressureValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PressureValueType attributes");
             }
           delete $1;
          }
        ;

y_PreviousOperationId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | PreviousOperationIdSTART y_QIFReferenceType
          PreviousOperationIdEND
          {$$ = $2;}
        ;

y_PrimaryAlignmentOperationType :
          ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0
          y_PrimaryEntity_AlignmentFeatureType y_PrimaryAxis_UnitVectorType
          {$$ = new PrimaryAlignmentOperationType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_PrimaryAlignment_PrimaryAlignmentOperationType :
          PrimaryAlignmentSTART y_PrimaryAlignmentOperationType
          PrimaryAlignmentEND
          {$$ = $2;
           $$->printElement = "PrimaryAlignment";
          }
        ;

y_PrimaryAxis_UnitVectorType :
          PrimaryAxisSTART y_UnitVectorType PrimaryAxisEND
          {$$ = $2;}
        ;

y_PrimaryEntity_AlignmentFeatureType :
          PrimaryEntitySTART y_AlignmentFeatureType PrimaryEntityEND
          {$$ = $2;}
        ;

y_PrimaryManufacturingMethod_ManufacturingMethodType_0 :
          /* empty */
          {$$ = 0;}
        | PrimaryManufacturingMethodSTART y_ManufacturingMethodType
          PrimaryManufacturingMethodEND
          {$$ = $2;}
        ;

y_PrimaryShapeClass_ShapeClassType_0 :
          /* empty */
          {$$ = 0;}
        | PrimaryShapeClassSTART y_ShapeClassType PrimaryShapeClassEND
          {$$ = $2;}
        ;

y_PrimaryUnitsType :
          ENDITEM y_AreaUnit_AreaUnitType_0 y_PMIAreaUnit_AreaUnitType_0
          y_AngularUnit_AngularUnitType_0
          y_PMIAngularUnit_AngularUnitType_0 y_ForceUnit_ForceUnitType_0
          y_LinearUnit_LinearUnitType_0 y_PMILinearUnit_LinearUnitType_0
          y_MassUnit_MassUnitType_0 y_PressureUnit_PressureUnitType_0
          y_SpeedUnit_SpeedUnitType_0
          y_TemperatureUnit_TemperatureUnitType_0 y_TimeUnit_TimeUnitType_0
          {$$ = new PrimaryUnitsType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
          }
        ;

y_PrimaryUnits_PrimaryUnitsType :
          PrimaryUnitsSTART ENDWHOLEITEM
          {$$ = new PrimaryUnitsType();
           yyUnrefMap[$$] = $$;
          }
        | PrimaryUnitsSTART y_PrimaryUnitsType PrimaryUnitsEND
          {$$ = $2;}
        ;

y_PrintedDrawingType :
          y_LiztAttributePair ENDITEM y_Name_XmlString
          y_Version_XmlString_0 y_Description_XmlString_0
          y_Author_AuthorType_0 y_DrawingNumber_XmlString_0
          y_AdditionalChanges_XmlString_0 y_Location_XmlString_0
          {$$ = new PrintedDrawingType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad PrintedDrawingType attributes");
             }
           delete $1;
          }
        ;

y_PrintedDrawing_PrintedDrawingType :
          PrintedDrawingSTART y_PrintedDrawingType PrintedDrawingEND
          {$$ = $2;}
        ;

y_ProbeRadii_ListDoubleType :
          ProbeRadiiSTART y_ListDoubleType ProbeRadiiEND
          {$$ = $2;}
        ;

y_ProbeRadius_XmlDecimal :
          ProbeRadiusSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          ProbeRadiusEND
          {$$ = $4;}
        ;

y_ProbeTipDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ProbeTipDiameterSTART y_LinearValueType ProbeTipDiameterEND
          {$$ = $2;}
        ;

y_ProbeTipType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_TipEndGeometry_TipEndGeometryType_0
          y_TipEndDiameter_LinearValueType_0 y_TipEndMaterial_XmlString_0
          y_StemMaterial_XmlString_0 y_StemDiameter_LinearValueType_0
          {$$ = new ProbeTipType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProbeTipType attributes");
             }
           delete $1;
          }
        ;

y_ProbeTip_ProbeTipType :
          ProbeTipSTART y_ProbeTipType ProbeTipEND
          {$$ = $2;
           $$->printElement = "ProbeTip";
          }
        ;

y_ProcessDifferen_1206_ProcessDifferen_1206_Type :
          y_ProcessDifferen_1206_Type
          {$$ = $1;}
        ;

y_ProcessDifferen_1206_Type :
          y_ProcessDifferen_1206_TypeChoicePair
          {$$ = new ProcessDifferen_1206_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ProcessDifferen_1206_TypeChoicePair :
          y_AbsoluteDifferences_AbsoluteLimitsByUnitType
          {$$ = new ProcessDifferen_1206_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProcessDifferen_1206_TypeType = ProcessDifferen_1206_TypeChoicePair::AbsoluteDifferencesE;
           $$->ProcessDifferen_1206_TypeValue.AbsoluteDifferences = $1;
          }
        | y_RelativeDifference_XmlDecimal
          {$$ = new ProcessDifferen_1206_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProcessDifferen_1206_TypeType = ProcessDifferen_1206_TypeChoicePair::RelativeDifferenceE;
           $$->ProcessDifferen_1206_TypeValue.RelativeDifference = $1;
          }
        ;

y_ProcessDifferenceStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger
          y_ManufacturingProcessId_QIFReferenceType_0
          y_ProcessDifferen_1206_ProcessDifferen_1206_Type
          {$$ = new ProcessDifferenceStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProcessDifferenceStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_ProcessDifferenceStudyPlan_ProcessDifferenceStudyPlanType :
          ProcessDifferenceStudyPlanSTART y_ProcessDifferenceStudyPlanType
          ProcessDifferenceStudyPlanEND
          {$$ = $2;
           $$->printElement = "ProcessDifferenceStudyPlan";
          }
        ;

y_ProcessDifferenceStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger
          y_ManufacturingProcessId_QIFReferenceType_0
          y_AbsoluteDifferences_AbsoluteMeasurementsByUnitType_0
          y_RelativeDifference_MeasuredDecimalType_0
          {$$ = new ProcessDifferenceStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProcessDifferenceStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_ProcessDifferenceStudyResults_ProcessDifferenceStudyResultsType :
          ProcessDifferenceStudyResultsSTART
          y_ProcessDifferenceStudyResultsType
          ProcessDifferenceStudyResultsEND
          {$$ = $2;
           $$->printElement = "ProcessDifferenceStudyResults";
          }
        ;

y_ProcessParameterType :
          ENDITEM y_ParameterType_XmlString y_ParameterValue_XmlString
          {$$ = new ProcessParameterType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ProcessParametersType :
          y_LiztAttributePair ENDITEM
          y_LiztParameter_ProcessParameterType_1_u
          {$$ = new ProcessParametersType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProcessParametersType attributes");
             }
           delete $1;
          }
        ;

y_ProcessParameters_ProcessParametersType_0 :
          /* empty */
          {$$ = 0;}
        | ProcessParametersSTART y_ProcessParametersType
          ProcessParametersEND
          {$$ = $2;}
        ;

y_ProcessVariation_StatsMeasuredDecimalType :
          ProcessVariationSTART y_StatsMeasuredDecimalType
          ProcessVariationEND
          {$$ = $2;
           $$->printElement = "ProcessVariation";
          }
        ;

y_Process_WeldingProcessEnumType :
          ProcessSTART ENDITEM {yyReadData = 1;} y_WeldingProcessEnumType
          ProcessEND
          {$$ = $4;}
        ;

y_ProductAsmPathsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductAsmPathsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductAsmPathsCountEND
          {$$ = $4;}
        ;

y_ProductAssemblySetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductAssemblySetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductAssemblySetCountEND
          {$$ = $4;}
        ;

y_ProductAuxiliarySetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductAuxiliarySetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductAuxiliarySetCountEND
          {$$ = $4;}
        ;

y_ProductComponentSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductComponentSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductComponentSetCountEND
          {$$ = $4;}
        ;

y_ProductCoordinateSystemSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductCoordinateSystemSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductCoordinateSystemSetCountEND
          {$$ = $4;}
        ;

y_ProductDataQual_1044_ProductDataQual_1044_Type :
          y_ProductDataQual_1044_Type
          {$$ = $1;}
        ;

y_ProductDataQual_1044_Type :
          y_ProductDataQual_1044_TypeChoicePair
          {$$ = new ProductDataQual_1044_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ProductDataQual_1044_TypeChoicePair :
          y_AreaEnum_ProductDataQualityAreaEnumType
          {$$ = new ProductDataQual_1044_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProductDataQual_1044_TypeType = ProductDataQual_1044_TypeChoicePair::AreaEnumE;
           $$->ProductDataQual_1044_TypeValue.AreaEnum = $1;
          }
        | y_OtherArea_XmlString
          {$$ = new ProductDataQual_1044_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProductDataQual_1044_TypeType = ProductDataQual_1044_TypeChoicePair::OtherAreaE;
           $$->ProductDataQual_1044_TypeValue.OtherArea = $1;
          }
        ;

y_ProductDataQualityAreaEnumType :
          DATASTRING
          {$$ = new ProductDataQualityAreaEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ProductDataQualityAreaEnumType value");
          }
        ;

y_ProductDataQualityAreaType :
          ENDITEM y_ProductDataQual_1044_ProductDataQual_1044_Type
          {$$ = new ProductDataQualityAreaType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ProductDataQualityCheckType :
          ENDITEM y_Type_ProductDataQualityAreaType y_Description_XmlString
          y_Requirements_XmlString y_SourceOfRequiredness_XmlString_0
          y_ApplicationTool_SoftwareType_0 y_XsltFile_XmlAnyURI_0
          y_ResultStatement_XmlString y_ResultStatus_CheckStatusEnumType
          {$$ = new ProductDataQualityCheckType($2, $3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
          }
        ;

y_ProductDataQualityCheck_ProductDataQualityCheckType :
          ProductDataQualityCheckSTART y_ProductDataQualityCheckType
          ProductDataQualityCheckEND
          {$$ = $2;}
        ;

y_ProductDataQualityChecksType :
          y_LiztAttributePair ENDITEM
          y_LiztProductDataQualityCheck_ProductDataQualityCheckType_1_u
          {$$ = new ProductDataQualityChecksType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProductDataQualityChecksType attributes");
             }
           delete $1;
          }
        ;

y_ProductDataQualityChecks_ProductDataQualityChecksType_0 :
          /* empty */
          {$$ = 0;}
        | ProductDataQualityChecksSTART y_ProductDataQualityChecksType
          ProductDataQualityChecksEND
          {$$ = $2;}
        ;

y_ProductDataQualityType :
          ENDITEM y_ChecksPerformed_XmlBoolean y_ChecksApproved_XmlBoolean
          y_Declaration_XmlString
          y_ProductDataQualityChecks_ProductDataQualityChecksType_0
          {$$ = new ProductDataQualityType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_ProductDataQuality_ProductDataQualityType_0 :
          /* empty */
          {$$ = 0;}
        | ProductDataQualitySTART y_ProductDataQualityType
          ProductDataQualityEND
          {$$ = $2;}
        ;

y_ProductEnvironments_EnvironmentsType_0 :
          /* empty */
          {$$ = 0;}
        | ProductEnvironmentsSTART y_EnvironmentsType
          ProductEnvironmentsEND
          {$$ = $2;}
        ;

y_ProductGeometrySetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductGeometrySetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductGeometrySetCountEND
          {$$ = $4;}
        ;

y_ProductHeaderType :
          ENDITEM y_Name_XmlString_0 y_File_FileInternalType_0
          y_Application_ApplicationType_0 y_Author_AuthorType_0
          y_ApplicationSource_ApplicationType_0 y_Description_XmlString_0
          y_ScaleCoefficient_XmlDouble_0 y_ModelTolerance_XmlDouble_0
          y_MassPropertyTolerance_XmlDouble_0
          {$$ = new ProductHeaderType($2, $3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
          }
        ;

y_ProductLayerSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductLayerSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductLayerSetCountEND
          {$$ = $4;}
        ;

y_ProductNoteFlagSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductNoteFlagSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductNoteFlagSetCountEND
          {$$ = $4;}
        ;

y_ProductNoteSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductNoteSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductNoteSetCountEND
          {$$ = $4;}
        ;

y_ProductPartNoteSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductPartNoteSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductPartNoteSetCountEND
          {$$ = $4;}
        ;

y_ProductPartSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductPartSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductPartSetCountEND
          {$$ = $4;}
        ;

y_ProductTopologySetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductTopologySetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductTopologySetCountEND
          {$$ = $4;}
        ;

y_ProductTraceabilityType :
          ENDITEM y_ReportNumber_XmlString_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_FixtureId_QIFReferenceType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_InspectionSoftwareItems_InspectionSoftwareItemsType_0
          y_InspectionProgram_InspectionProgramType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new ProductTraceabilityType($2, $3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
          }
        ;

y_ProductType :
          ENDITEM y_Header_ProductHeaderType_0
          y_GeometrySet_GeometrySetType_0 y_TopologySet_TopologySetType_0
          y_NoteSet_NoteSetType_0 y_NoteFlagSet_NoteFlagSetType_0
          y_PartNoteSet_PartNoteSetType_0 y_ViewSet_ViewSetType_0
          y_LayerSet_LayerSetType_0
          y_CoordinateSystemSet_CoordinateSystemSetType_0
          y_VisualizationSet_VisualizationSetType_0
          y_AuxiliarySet_AuxiliarySetType_0 y_PartSet_PartSetType_0
          y_AssemblySet_AssemblySetType_0 y_ComponentSet_ComponentSetType_0
          y_ProductType_1238_ProductType_1238_Type_0
          y_AsmPaths_AsmPathsType_0 y_MaterialLibrary_MaterialsType_0
          {$$ = new ProductType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
          }
        ;

y_ProductType_1238_ProductType_1238_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ProductType_1238_Type
          {$$ = $1;}
        ;

y_ProductType_1238_Type :
          y_ProductType_1238_TypeChoicePair
          {$$ = new ProductType_1238_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ProductType_1238_TypeChoicePair :
          y_RootAssembly_ElementReferenceType
          {$$ = new ProductType_1238_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProductType_1238_TypeType = ProductType_1238_TypeChoicePair::RootAssemblyE;
           $$->ProductType_1238_TypeValue.RootAssembly = $1;
          }
        | y_RootComponent_ElementReferenceType
          {$$ = new ProductType_1238_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProductType_1238_TypeType = ProductType_1238_TypeChoicePair::RootComponentE;
           $$->ProductType_1238_TypeValue.RootComponent = $1;
          }
        | y_RootPart_ElementReferenceType
          {$$ = new ProductType_1238_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProductType_1238_TypeType = ProductType_1238_TypeChoicePair::RootPartE;
           $$->ProductType_1238_TypeValue.RootPart = $1;
          }
        ;

y_ProductViewSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductViewSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductViewSetCountEND
          {$$ = $4;}
        ;

y_ProductVisualizationSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ProductVisualizationSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ProductVisualizationSetCountEND
          {$$ = $4;}
        ;

y_Product_ProductType_0 :
          /* empty */
          {$$ = 0;}
        | ProductSTART ENDWHOLEITEM
          {$$ = new ProductType();
           yyUnrefMap[$$] = $$;
          }
        | ProductSTART y_ProductType ProductEND
          {$$ = $2;}
        ;

y_ProductionMethod_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | ProductionMethodSTART ENDITEM {yyReadData = 1;} y_XmlToken
          ProductionMethodEND
          {$$ = $4;}
        ;

y_ProductionStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger_0
          y_SamplingMethod_SamplingMethodType
          y_ControlMethods_ControlMethodsType
          {$$ = new ProductionStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProductionStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_ProductionStudyPlan_ProductionStudyPlanType :
          ProductionStudyPlanSTART y_ProductionStudyPlanType
          ProductionStudyPlanEND
          {$$ = $2;
           $$->printElement = "ProductionStudyPlan";
          }
        ;

y_ProductionStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger_0
          y_LiztControlIssueDetailsList_ControlIssueDetailsListType_1_u
          {$$ = new ProductionStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProductionStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_ProductionStudyResults_ProductionStudyResultsType :
          ProductionStudyResultsSTART y_ProductionStudyResultsType
          ProductionStudyResultsEND
          {$$ = $2;
           $$->printElement = "ProductionStudyResults";
          }
        ;

y_ProfileCharacte_1067_ProfileCharacte_1067_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ProfileCharacte_1067_Type
          {$$ = $1;}
        ;

y_ProfileCharacte_1067_Type :
          y_ProfileCharacte_1067_TypeChoicePair
          {$$ = new ProfileCharacte_1067_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ProfileCharacte_1067_TypeChoicePair :
          y_OuterDisposition_LinearValueType
          {$$ = new ProfileCharacte_1067_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProfileCharacte_1067_TypeType = ProfileCharacte_1067_TypeChoicePair::OuterDispositionE;
           $$->ProfileCharacte_1067_TypeValue.OuterDisposition = $1;
          }
        | y_UnequallyDisposedZone_LinearValueType
          {$$ = new ProfileCharacte_1067_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ProfileCharacte_1067_TypeType = ProfileCharacte_1067_TypeChoicePair::UnequallyDisposedZoneE;
           $$->ProfileCharacte_1067_TypeValue.UnequallyDisposedZone = $1;
          }
        ;

y_ProfileCurveId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ProfileCurveIdSTART y_QIFReferenceFullType ProfileCurveIdEND
          {$$ = $2;}
        ;

y_ProfileProjectorMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new ProfileProjectorMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ProfileProjectorMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_ProfileProjectorMeasureFeatureMethod_ProfileProjectorMeasureFeatureMethodType :
          ProfileProjectorMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ProfileProjectorMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ProfileProjectorMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ProfileProjectorMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        | ProfileProjectorMeasureFeatureMethodSTART
          y_ProfileProjectorMeasureFeatureMethodType
          ProfileProjectorMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "ProfileProjectorMeasureFeatureMethod";
          }
        ;

y_ProjectedDatum_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ProjectedDatumSTART y_LinearValueType ProjectedDatumEND
          {$$ = $2;}
        ;

y_ProjectedToleranceZoneValue_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ProjectedToleranceZoneValueSTART y_LinearValueType
          ProjectedToleranceZoneValueEND
          {$$ = $2;}
        ;

y_ProjectedToleranceZone_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ProjectedToleranceZoneSTART y_LinearValueType
          ProjectedToleranceZoneEND
          {$$ = $2;}
        ;

y_ProjectionArc_BaseFeatureType :
          ProjectionArcSTART y_BaseFeatureType ProjectionArcEND
          {$$ = $2;}
        ;

y_ProjectionCircle_BaseFeatureType :
          ProjectionCircleSTART y_BaseFeatureType ProjectionCircleEND
          {$$ = $2;}
        ;

y_ProjectionFeature_BaseFeatureType :
          ProjectionFeatureSTART y_BaseFeatureType ProjectionFeatureEND
          {$$ = $2;}
        ;

y_ProjectionLine_BaseFeatureType :
          ProjectionLineSTART y_BaseFeatureType ProjectionLineEND
          {$$ = $2;}
        ;

y_ProjectionOppositeAngledLines_BaseFeatureType :
          ProjectionOppositeAngledLinesSTART y_BaseFeatureType
          ProjectionOppositeAngledLinesEND
          {$$ = $2;}
        ;

y_ProjectionOppositeParallelLines_BaseFeatureType :
          ProjectionOppositeParallelLinesSTART y_BaseFeatureType
          ProjectionOppositeParallelLinesEND
          {$$ = $2;}
        ;

y_ProjectionPlane_BaseFeatureType :
          ProjectionPlaneSTART y_BaseFeatureType ProjectionPlaneEND
          {$$ = $2;}
        ;

y_Projection_CircleProjectionType :
          ProjectionSTART y_CircleProjectionType ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_CircularArcProjectionType :
          ProjectionSTART y_CircularArcProjectionType ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_EllipseProjectionType :
          ProjectionSTART y_EllipseProjectionType ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_EllipticalArcProjectionType :
          ProjectionSTART y_EllipticalArcProjectionType ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_LineProjectionType :
          ProjectionSTART y_LineProjectionType ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_OppositeAngledLinesProjectionType :
          ProjectionSTART y_OppositeAngledLinesProjectionType ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_OppositeParallelLinesProjectionType :
          ProjectionSTART y_OppositeParallelLinesProjectionType
          ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_PointFeatureProjectionType :
          ProjectionSTART y_PointFeatureProjectionType ProjectionEND
          {$$ = $2;
           $$->printElement = "Projection";
          }
        ;

y_Projection_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | ProjectionSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          ProjectionEND
          {$$ = $4;}
        ;

y_ProtectionClass_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ProtectionClassSTART ENDITEM {yyReadData = 1;} y_XmlString
          ProtectionClassEND
          {$$ = $4;}
        ;

y_ProxyMeasurementId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ProxyMeasurementIdSTART y_QIFReferenceType ProxyMeasurementIdEND
          {$$ = $2;}
        ;

y_PurchaseOrderNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | PurchaseOrderNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          PurchaseOrderNumberEND
          {$$ = $4;}
        ;

y_QIFDocumentHeaderType :
          ENDITEM y_Application_ApplicationType_0 y_Author_AuthorType_0
          y_ApplicationSource_ApplicationType_0 y_Description_XmlString_0
          y_Scope_XmlString_0
          {$$ = new QIFDocumentHeaderType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_QIFDocumentType :
          y_QPId_QPIdType y_Attributes_AttributesType_0
          y_VersionHistory_VersionHistoryType_0 y_Version_VersionBaseType_0
          y_Header_QIFDocumentHeaderType_0
          y_ValidationCounts_ValidationCountsType_0
          y_ProductDataQuality_ProductDataQualityType_0
          y_ExternalQIFReferences_ExternalQIFReferencesType_0
          y_StandardsDefinitions_StandardsType_0
          y_SoftwareDefinitions_SoftwaresType_0
          y_AlgorithmDefinitions_AlgorithmsType_0
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_FileUnits_FileUnitsType_0
          y_DatumDefinitions_DatumDefinitionsType_0
          y_DatumTargetDefinitions_DatumTargetDefinitionsType_0
          y_Transforms_TransformListType_0
          y_CoordinateSystems_CoordinateSystemsType_0
          y_DatumReferenceFrames_DatumReferenceFramesType_0
          y_MeasurementResources_MeasurementResourcesType_0
          y_ThreadSpecifications_ThreadSpecificationsType_0
          y_Product_ProductType_0 y_Features_FeatureAspectsListsType_0
          y_FeatureZones_FeatureZoneListType_0
          y_Characteristics_CharacteristicAspectsListsType_0
          y_Plan_PlanType_0 y_Results_ResultsType_0
          y_Statistics_StatisticsType_0
          y_ManufacturingProcessTraceabilities_ManufacturingProcessTraceabilitiesType_0
          y_Rules_QIFRulesType_0 y_UserDataXML_XmlString_0
          y_Signature_XmlString_0
          {$$ = new QIFDocumentType($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
          }
        ;

y_QIFFeaturePairType :
          ENDITEM y_FirstFeature_QIFReferenceFullType
          y_SecondFeature_QIFReferenceFullType
          y_FirstFeatureZone_QIFReferenceFullType_0
          y_SecondFeatureZone_QIFReferenceFullType_0
          {$$ = new QIFFeaturePairType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_QIFMayType :
          /* empty */
          {$$ = new QIFMayType();
           yyUnrefMap[$$] = $$;
          }
        | y_LiztAttributePair
          {$$ = new QIFMayType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad QIFMayType attributes");
             }
           delete $1;
          }
        ;

y_QIFMustNotType :
          /* empty */
          {$$ = new QIFMustNotType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_QIFMustType :
          /* empty */
          {$$ = new QIFMustType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_QIFReferenceActiveType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new QIFReferenceActiveType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new QIFReferenceActiveType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad QIFReferenceActiveType attributes");
             }
           delete $1;
          }
        ;

y_QIFReferenceFullType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new QIFReferenceFullType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new QIFReferenceFullType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad QIFReferenceFullType attributes");
             }
           delete $1;
          }
        ;

y_QIFReferenceSimpleType :
          DATASTRING
          {$$ = new QIFReferenceSimpleType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad QIFReferenceSimpleType value");
          }
        ;

y_QIFReferenceType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new QIFReferenceType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new QIFReferenceType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad QIFReferenceType attributes");
             }
           delete $1;
          }
        ;

y_QIFRulesType :
          ENDITEM y_Version_VersionType_0 y_RulesUnits_RulesUnitsType_0
          y_FeatureRules_FeatureRulesType_0
          y_DMESelectionRules_DMESelectionRulesType_0
          {$$ = new QIFRulesType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_QPIdFullReferenceType :
          ENDITEM y_ItemQPId_QPIdReferenceType
          y_LiztDocumentQPId_QPIdReferenceType_0_u
          {$$ = new QPIdFullReferenceType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_QPIdReferenceType :
          DATASTRING
          {$$ = new QPIdReferenceType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad QPIdReferenceType value");
          }
        ;

y_QPIdReference_QPIdReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | QPIdReferenceSTART ENDITEM {yyReadData = 1;} y_QPIdReferenceType
          QPIdReferenceEND
          {$$ = $4;}
        ;

y_QPIdType :
          DATASTRING
          {$$ = new QPIdType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad QPIdType value");
          }
        ;

y_QPId_QPIdFullReferenceType :
          QPIdSTART y_QPIdFullReferenceType QPIdEND
          {$$ = $2;}
        ;

y_QPId_QPIdReferenceType :
          QPIdSTART ENDITEM {yyReadData = 1;} y_QPIdReferenceType QPIdEND
          {$$ = $4;}
        ;

y_QPId_QPIdType :
          QPIdSTART ENDITEM {yyReadData = 1;} y_QPIdType QPIdEND
          {$$ = $4;}
        ;

y_QualificationType :
          ENDITEM y_Attributes_AttributesType_0 y_Description_XmlString
          {$$ = new QualificationType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Qualification_QualificationType :
          QualificationSTART y_QualificationType QualificationEND
          {$$ = $2;}
        ;

y_QualificationsType :
          y_LiztAttributePair ENDITEM
          y_LiztQualification_QualificationType_1_u
          {$$ = new QualificationsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad QualificationsType attributes");
             }
           delete $1;
          }
        ;

y_Qualifications_QualificationsType_0 :
          /* empty */
          {$$ = 0;}
        | QualificationsSTART y_QualificationsType QualificationsEND
          {$$ = $2;}
        ;

y_Quality_ListDoubleType :
          QualitySTART y_ListDoubleType QualityEND
          {$$ = $2;}
        ;

y_QuaternionType :
          ENDITEM y_Value_D4Type
          {$$ = new QuaternionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_RAPResolution_RAPZResolutionType :
          RAPResolutionSTART y_RAPZResolutionType RAPResolutionEND
          {$$ = $2;}
        ;

y_RAPZResolutionType :
          ENDITEM y_RadialResolution_LinearValueType
          y_AzimuthalAngleResolution_AngularValueType
          y_PolarAngleResolution_AngularValueType
          {$$ = new RAPZResolutionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_RAPZResolution_RAPZResolutionType :
          RAPZResolutionSTART y_RAPZResolutionType RAPZResolutionEND
          {$$ = $2;}
        ;

y_RadialAxisLength_LinearValueType :
          RadialAxisLengthSTART y_LinearValueType RadialAxisLengthEND
          {$$ = $2;}
        ;

y_RadialDifferentialScaleType :
          ENDITEM y_PerpendicularScaleFactor_XmlDecimal
          y_ParallelScaleFactor_XmlDecimal y_Direction_UnitVectorType
          {$$ = new RadialDifferentialScaleType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_RadialDifferentialScale_RadialDifferentialScaleType :
          RadialDifferentialScaleSTART y_RadialDifferentialScaleType
          RadialDifferentialScaleEND
          {$$ = $2;}
        ;

y_RadialError_LinearValueType :
          RadialErrorSTART y_LinearValueType RadialErrorEND
          {$$ = $2;}
        ;

y_RadialResolution_LinearValueType :
          RadialResolutionSTART y_LinearValueType RadialResolutionEND
          {$$ = $2;}
        ;

y_Radial_XmlToken :
          RadialSTART ENDITEM {yyReadData = 1;} y_XmlToken RadialEND
          {$$ = $4;}
        ;

y_RadiusCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          y_ControlledRadius_XmlBoolean_0
          {$$ = new RadiusCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad RadiusCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_RadiusCharacteristicDefinition_RadiusCharacteristicDefinitionType :
          RadiusCharacteristicDefinitionSTART
          y_RadiusCharacteristicDefinitionType
          RadiusCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "RadiusCharacteristicDefinition";
          }
        ;

y_RadiusCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new RadiusCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad RadiusCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_RadiusCharacteristicItem_RadiusCharacteristicItemType :
          RadiusCharacteristicItemSTART y_RadiusCharacteristicItemType
          RadiusCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "RadiusCharacteristicItem";
          }
        ;

y_RadiusCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new RadiusCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad RadiusCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_RadiusCharacteristicMeasurement_RadiusCharacteristicMeasurementType :
          RadiusCharacteristicMeasurementSTART
          y_RadiusCharacteristicMeasurementType
          RadiusCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "RadiusCharacteristicMeasurement";
          }
        ;

y_RadiusCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new RadiusCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad RadiusCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_RadiusCharacteristicNominal_RadiusCharacteristicNominalType :
          RadiusCharacteristicNominalSTART
          y_RadiusCharacteristicNominalType RadiusCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "RadiusCharacteristicNominal";
          }
        ;

y_RadiusCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new RadiusCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_RadiusCharacteristicStats_RadiusCharacteristicStatsEvalType :
          RadiusCharacteristicStatsSTART
          y_RadiusCharacteristicStatsEvalType RadiusCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "RadiusCharacteristicStats";
          }
        ;

y_RadiusMax_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | RadiusMaxSTART y_MeasuredLinearValueType RadiusMaxEND
          {$$ = $2;}
        ;

y_RadiusMin_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | RadiusMinSTART y_MeasuredLinearValueType RadiusMinEND
          {$$ = $2;}
        ;

y_Radius_LinearValueType :
          RadiusSTART y_LinearValueType RadiusEND
          {$$ = $2;}
        ;

y_Radius_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | RadiusSTART y_MeasuredLinearValueType RadiusEND
          {$$ = $2;}
        ;

y_Radius_XmlDouble :
          RadiusSTART ENDITEM {yyReadData = 1;} y_XmlDouble RadiusEND
          {$$ = $4;}
        ;

y_RandRStudyType_GageRandRStudyEnumType :
          RandRStudyTypeSTART ENDITEM {yyReadData = 1;}
          y_GageRandRStudyEnumType RandRStudyTypeEND
          {$$ = $4;}
        ;

y_RangeAngularUnit_XmlToken :
          RangeAngularUnitSTART ENDITEM {yyReadData = 1;} y_XmlToken
          RangeAngularUnitEND
          {$$ = $4;}
        ;

y_RangeForVolumetricUncertainty_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | RangeForVolumetricUncertaintySTART y_LinearValueType
          RangeForVolumetricUncertaintyEND
          {$$ = $2;}
        ;

y_RangeLinearUnit_XmlToken :
          RangeLinearUnitSTART ENDITEM {yyReadData = 1;} y_XmlToken
          RangeLinearUnitEND
          {$$ = $4;}
        ;

y_RangePointSetId_PointSetReferenceRangeType :
          RangePointSetIdSTART y_PointSetReferenceRangeType
          RangePointSetIdEND
          {$$ = $2;
           $$->printElement = "RangePointSetId";
          }
        ;

y_RangeValues_ListDoubleType :
          RangeValuesSTART y_ListDoubleType RangeValuesEND
          {$$ = $2;}
        ;

y_Range_PointRangeType :
          RangeSTART y_PointRangeType RangeEND
          {$$ = $2;}
        ;

y_Range_StatsMeasuredDecimalType :
          RangeSTART y_StatsMeasuredDecimalType RangeEND
          {$$ = $2;
           $$->printElement = "Range";
          }
        ;

y_Ratio_XmlDouble :
          RatioSTART ENDITEM {yyReadData = 1;} y_XmlDouble RatioEND
          {$$ = $4;}
        ;

y_ReasonForPartialInspection_XmlString :
          ReasonForPartialInspectionSTART ENDITEM {yyReadData = 1;}
          y_XmlString ReasonForPartialInspectionEND
          {$$ = $4;}
        ;

y_Reason_ExclusionReasonType :
          ReasonSTART y_ExclusionReasonType ReasonEND
          {$$ = $2;}
        ;

y_Recompensated_CircleRecompType :
          RecompensatedSTART y_CircleRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_CircularArcRecompType :
          RecompensatedSTART y_CircularArcRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_ConeRecompType :
          RecompensatedSTART y_ConeRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_ConicalSegmentRecompType :
          RecompensatedSTART y_ConicalSegmentRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_CylinderRecompType :
          RecompensatedSTART y_CylinderRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_CylindricalSegmentRecompType :
          RecompensatedSTART y_CylindricalSegmentRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_EllipseRecompType :
          RecompensatedSTART y_EllipseRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_EllipticalArcRecompType :
          RecompensatedSTART y_EllipticalArcRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_ElongatedCircleRecompType :
          RecompensatedSTART y_ElongatedCircleRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_ElongatedCylinderRecompType :
          RecompensatedSTART y_ElongatedCylinderRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_ExtrudedCrossSectionRecompType :
          RecompensatedSTART y_ExtrudedCrossSectionRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_LineRecompType :
          RecompensatedSTART y_LineRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_OppositeAngledLinesRecompType :
          RecompensatedSTART y_OppositeAngledLinesRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_OppositeAngledPlanesRecompType :
          RecompensatedSTART y_OppositeAngledPlanesRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_OppositeParallelLinesRecompType :
          RecompensatedSTART y_OppositeParallelLinesRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_OppositeParallelPlanesRecompType :
          RecompensatedSTART y_OppositeParallelPlanesRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_PlaneRecompType :
          RecompensatedSTART y_PlaneRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_PointDefinedCurveRecompType :
          RecompensatedSTART y_PointDefinedCurveRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_PointDefinedSurfaceRecompType :
          RecompensatedSTART y_PointDefinedSurfaceRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_SphereRecompType :
          RecompensatedSTART y_SphereRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_SphericalSegmentRecompType :
          RecompensatedSTART y_SphericalSegmentRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_SurfaceOfRevolutionRecompType :
          RecompensatedSTART y_SurfaceOfRevolutionRecompType
          RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_ThreadedFeatureRecompType :
          RecompensatedSTART y_ThreadedFeatureRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_ToroidalSegmentRecompType :
          RecompensatedSTART y_ToroidalSegmentRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_Recompensated_TorusRecompType :
          RecompensatedSTART y_TorusRecompType RecompensatedEND
          {$$ = $2;
           $$->printElement = "Recompensated";
          }
        ;

y_RectangleType :
          ENDITEM y_Length_LinearValueType y_CornerPoint_PointType
          y_Width_LinearValueType y_WidthDirection_UnitVectorType
          y_LengthDirection_UnitVectorType
          {$$ = new RectangleType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_Rectangle_RectangleType :
          RectangleSTART y_RectangleType RectangleEND
          {$$ = $2;}
        ;

y_RectangularUnitAreaLength_LinearValueType :
          RectangularUnitAreaLengthSTART y_LinearValueType
          RectangularUnitAreaLengthEND
          {$$ = $2;}
        ;

y_RectangularUnitAreaOrientation_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | RectangularUnitAreaOrientationSTART y_UnitVectorType
          RectangularUnitAreaOrientationEND
          {$$ = $2;}
        ;

y_RectangularUnitAreaType :
          ENDITEM y_RectangularUnitAreaLength_LinearValueType
          y_RectangularUnitAreaWidth_LinearValueType
          y_RectangularUnitAreaOrientation_UnitVectorType_0
          {$$ = new RectangularUnitAreaType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_RectangularUnitAreaWidth_LinearValueType :
          RectangularUnitAreaWidthSTART y_LinearValueType
          RectangularUnitAreaWidthEND
          {$$ = $2;}
        ;

y_RectangularUnitArea_RectangularUnitAreaType :
          RectangularUnitAreaSTART y_RectangularUnitAreaType
          RectangularUnitAreaEND
          {$$ = $2;}
        ;

y_ReducedDatumEnumType :
          DATASTRING
          {$$ = new ReducedDatumEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ReducedDatumEnumType value");
          }
        ;

y_ReducedDatum_ReducedDatumEnumType_0 :
          /* empty */
          {$$ = 0;}
        | ReducedDatumSTART ENDITEM {yyReadData = 1;}
          y_ReducedDatumEnumType ReducedDatumEND
          {$$ = $4;}
        ;

y_ReferenceFeatureAssociationSpecificationElementEnumType :
          DATASTRING
          {$$ = new ReferenceFeatureAssociationSpecificationElementEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ReferenceFeatureAssociationSpecificationElementEnumType value");
          }
        ;

y_ReferenceFeatureAssociationSpecificationElementType :
          ENDITEM y_Filter_FilterType_0
          y_Association_ReferenceFeatureAssociationSpecificationElementEnumType
          y_Parameter_ReferenceFeatureAssociationSpecificationParameterEnumType
          {$$ = new ReferenceFeatureAssociationSpecificationElementType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ReferenceFeatureAssociationSpecificationElement_ReferenceFeatureAssociationSpecificationElementType :
          ReferenceFeatureAssociationSpecificationElementSTART
          y_ReferenceFeatureAssociationSpecificationElementType
          ReferenceFeatureAssociationSpecificationElementEND
          {$$ = $2;}
        ;

y_ReferenceFeatureAssociationSpecificationParameterEnumType :
          DATASTRING
          {$$ = new ReferenceFeatureAssociationSpecificationParameterEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ReferenceFeatureAssociationSpecificationParameterEnumType value");
          }
        ;

y_ReferenceFeatureNominalId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ReferenceFeatureNominalIdSTART y_QIFReferenceFullType
          ReferenceFeatureNominalIdEND
          {$$ = $2;}
        ;

y_ReferenceFeatureNominalIds_ArrayReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | ReferenceFeatureNominalIdsSTART y_ArrayReferenceFullType
          ReferenceFeatureNominalIdsEND
          {$$ = $2;}
        ;

y_ReferenceLengthStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | ReferenceLengthStatsSTART y_StatsLinearType
          ReferenceLengthStatsEND
          {$$ = $2;
           $$->printElement = "ReferenceLengthStats";
          }
        ;

y_ReferenceLength_LinearValueType :
          ReferenceLengthSTART y_LinearValueType ReferenceLengthEND
          {$$ = $2;}
        ;

y_ReferenceLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ReferenceLengthSTART y_LinearValueType ReferenceLengthEND
          {$$ = $2;}
        ;

y_ReferenceLineBeginPoint_Point2dSimpleType :
          ReferenceLineBeginPointSTART y_Point2dSimpleType
          ReferenceLineBeginPointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_ReferenceLineEndPoint_Point2dSimpleType :
          ReferenceLineEndPointSTART y_Point2dSimpleType
          ReferenceLineEndPointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_Reference_ElementReferenceFullType :
          ReferenceSTART y_ElementReferenceFullType ReferenceEND
          {$$ = $2;}
        ;

y_ReferencedComponentEnumType :
          DATASTRING
          {$$ = new ReferencedComponentEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ReferencedComponentEnumType value");
          }
        ;

y_ReferencedComponent_ReferencedComponentEnumType :
          ReferencedComponentSTART ENDITEM {yyReadData = 1;}
          y_ReferencedComponentEnumType ReferencedComponentEND
          {$$ = $4;}
        ;

y_ReferencedQIFPlanInstance_QPIdFullReferenceType :
          ReferencedQIFPlanInstanceSTART y_QPIdFullReferenceType
          ReferencedQIFPlanInstanceEND
          {$$ = $2;}
        ;

y_ReferencedQIFPlan_XmlNMTOKEN :
          ReferencedQIFPlanSTART ENDITEM {yyReadData = 1;} y_XmlNMTOKEN
          ReferencedQIFPlanEND
          {$$ = $4;}
        ;

y_ReferencedStandardIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ReferencedStandardIdsSTART y_ArrayReferenceType
          ReferencedStandardIdsEND
          {$$ = $2;}
        ;

y_Region_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | RegionSTART ENDITEM {yyReadData = 1;} y_XmlToken RegionEND
          {$$ = $4;}
        ;

y_RegressionIntercept_StatsMeasuredDecimalType :
          RegressionInterceptSTART y_StatsMeasuredDecimalType
          RegressionInterceptEND
          {$$ = $2;
           $$->printElement = "RegressionIntercept";
          }
        ;

y_RegressionSlope_StatsMeasuredDecimalType :
          RegressionSlopeSTART y_StatsMeasuredDecimalType
          RegressionSlopeEND
          {$$ = $2;
           $$->printElement = "RegressionSlope";
          }
        ;

y_RelativeAppraiserVariation_StatsMeasuredDecimalType :
          RelativeAppraiserVariationSTART y_StatsMeasuredDecimalType
          RelativeAppraiserVariationEND
          {$$ = $2;
           $$->printElement = "RelativeAppraiserVariation";
          }
        ;

y_RelativeBias_StatsMeasuredDecimalType :
          RelativeBiasSTART y_StatsMeasuredDecimalType RelativeBiasEND
          {$$ = $2;
           $$->printElement = "RelativeBias";
          }
        ;

y_RelativeDifference_MeasuredDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | RelativeDifferenceSTART y_MeasuredDecimalType
          RelativeDifferenceEND
          {$$ = $2;}
        ;

y_RelativeDifference_XmlDecimal :
          RelativeDifferenceSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          RelativeDifferenceEND
          {$$ = $4;}
        ;

y_RelativeEquipmentVariation_StatsMeasuredDecimalType :
          RelativeEquipmentVariationSTART y_StatsMeasuredDecimalType
          RelativeEquipmentVariationEND
          {$$ = $2;
           $$->printElement = "RelativeEquipmentVariation";
          }
        ;

y_RelativeGageRandR_StatsMeasuredDecimalType :
          RelativeGageRandRSTART y_StatsMeasuredDecimalType
          RelativeGageRandREND
          {$$ = $2;
           $$->printElement = "RelativeGageRandR";
          }
        ;

y_RelativeHumidityControlMax_FractionType :
          RelativeHumidityControlMaxSTART y_FractionType
          RelativeHumidityControlMaxEND
          {$$ = $2;}
        ;

y_RelativeHumidityControlMin_FractionType :
          RelativeHumidityControlMinSTART y_FractionType
          RelativeHumidityControlMinEND
          {$$ = $2;}
        ;

y_RelativeHumidityRangeMax_FractionType :
          RelativeHumidityRangeMaxSTART y_FractionType
          RelativeHumidityRangeMaxEND
          {$$ = $2;}
        ;

y_RelativeHumidityRangeMin_FractionType :
          RelativeHumidityRangeMinSTART y_FractionType
          RelativeHumidityRangeMinEND
          {$$ = $2;}
        ;

y_RelativeHumidity_MeasuredDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | RelativeHumiditySTART y_MeasuredDecimalType RelativeHumidityEND
          {$$ = $2;}
        ;

y_RelativeInteraction_StatsMeasuredDecimalType :
          RelativeInteractionSTART y_StatsMeasuredDecimalType
          RelativeInteractionEND
          {$$ = $2;
           $$->printElement = "RelativeInteraction";
          }
        ;

y_RelativeLinearityMinimum_XmlDecimal :
          RelativeLinearityMinimumSTART ENDITEM {yyReadData = 1;}
          y_XmlDecimal RelativeLinearityMinimumEND
          {$$ = $4;}
        ;

y_RelativeLinearity_MeasuredDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | RelativeLinearitySTART y_MeasuredDecimalType RelativeLinearityEND
          {$$ = $2;}
        ;

y_RelativeLinearity_StatsMeasuredDecimalType :
          RelativeLinearitySTART y_StatsMeasuredDecimalType
          RelativeLinearityEND
          {$$ = $2;
           $$->printElement = "RelativeLinearity";
          }
        ;

y_RelativeMaximum_MeasuredDecimalType_0 :
          /* empty */
          {$$ = 0;}
        | RelativeMaximumSTART y_MeasuredDecimalType RelativeMaximumEND
          {$$ = $2;}
        ;

y_RelativeMaximum_XmlDecimal :
          RelativeMaximumSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          RelativeMaximumEND
          {$$ = $4;}
        ;

y_RelativePartVariation_StatsMeasuredDecimalType :
          RelativePartVariationSTART y_StatsMeasuredDecimalType
          RelativePartVariationEND
          {$$ = $2;
           $$->printElement = "RelativePartVariation";
          }
        ;

y_RelativeTotalVariation_StatsMeasuredDecimalType :
          RelativeTotalVariationSTART y_StatsMeasuredDecimalType
          RelativeTotalVariationEND
          {$$ = $2;
           $$->printElement = "RelativeTotalVariation";
          }
        ;

y_Repeatability_LinearValueType :
          RepeatabilitySTART y_LinearValueType RepeatabilityEND
          {$$ = $2;}
        ;

y_Repeatability_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | RepeatabilitySTART y_LinearValueType RepeatabilityEND
          {$$ = $2;}
        ;

y_ReportNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ReportNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          ReportNumberEND
          {$$ = $4;}
        ;

y_ReportPreparationDate_XmlDateTime_0 :
          /* empty */
          {$$ = 0;}
        | ReportPreparationDateSTART ENDITEM {yyReadData = 1;}
          y_XmlDateTime ReportPreparationDateEND
          {$$ = $4;}
        ;

y_ReportPreparer_EmployeeType_0 :
          /* empty */
          {$$ = 0;}
        | ReportPreparerSTART y_EmployeeType ReportPreparerEND
          {$$ = $2;}
        ;

y_ReportType_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | ReportTypeSTART ENDITEM {yyReadData = 1;} y_XmlToken
          ReportTypeEND
          {$$ = $4;}
        ;

y_Requirement_SimultaneousRequirementEnumType :
          RequirementSTART ENDITEM {yyReadData = 1;}
          y_SimultaneousRequirementEnumType RequirementEND
          {$$ = $4;}
        ;

y_Requirements_XmlString :
          RequirementsSTART ENDITEM {yyReadData = 1;} y_XmlString
          RequirementsEND
          {$$ = $4;}
        ;

y_Resolution_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ResolutionSTART y_LinearValueType ResolutionEND
          {$$ = $2;}
        ;

y_Resolution_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ResolutionSTART ENDITEM {yyReadData = 1;} y_XmlString
          ResolutionEND
          {$$ = $4;}
        ;

y_Resolution_substituteType_0 :
          /* empty */
          {$$ = 0;}
        | y_CartesianResolution_CartesianResolutionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearResolution_LinearResolutionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalResolution_SphericalResolutionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedResolution_UserDefinedResolutionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ResponsibilityIdentifier_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ResponsibilityIdentifierSTART ENDITEM {yyReadData = 1;}
          y_XmlString ResponsibilityIdentifierEND
          {$$ = $4;}
        ;

y_ResultStatement_XmlString :
          ResultStatementSTART ENDITEM {yyReadData = 1;} y_XmlString
          ResultStatementEND
          {$$ = $4;}
        ;

y_ResultStatus_CheckStatusEnumType :
          ResultStatusSTART ENDITEM {yyReadData = 1;} y_CheckStatusEnumType
          ResultStatusEND
          {$$ = $4;}
        ;

y_ResultsFiles_ExternalFileReferencesType :
          ResultsFilesSTART y_ExternalFileReferencesType ResultsFilesEND
          {$$ = $2;}
        ;

y_ResultsIds_ArrayReferenceType :
          ResultsIdsSTART y_ArrayReferenceType ResultsIdsEND
          {$$ = $2;}
        ;

y_ResultsQPIds_ArrayQPIdFullReferenceType :
          ResultsQPIdsSTART y_ArrayQPIdFullReferenceType ResultsQPIdsEND
          {$$ = $2;}
        ;

y_ResultsType :
          ENDITEM y_Version_VersionType_0
          y_MeasurementResultsSet_MeasurementResultsSetType
          y_ActualComponentSets_ActualComponentSetsType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          {$$ = new ResultsType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_Results_ResultsType_0 :
          /* empty */
          {$$ = 0;}
        | ResultsSTART y_ResultsType ResultsEND
          {$$ = $2;}
        ;

y_RetrievalMethodEnumType :
          DATASTRING
          {$$ = new RetrievalMethodEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad RetrievalMethodEnumType value");
          }
        ;

y_RetrievalMethod_RetrievalMethodEnumType :
          RetrievalMethodSTART ENDITEM {yyReadData = 1;}
          y_RetrievalMethodEnumType RetrievalMethodEND
          {$$ = $4;}
        ;

y_Revision_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | RevisionSTART ENDITEM {yyReadData = 1;} y_XmlString RevisionEND
          {$$ = $4;}
        ;

y_Revolution23CoreType :
          y_LiztAttributePair ENDITEM y_Axis_AxisType
          y_Generatrix_Curve13CoreType
          {$$ = new Revolution23CoreType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Revolution23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Revolution23Core_Revolution23CoreType :
          Revolution23CoreSTART y_Revolution23CoreType Revolution23CoreEND
          {$$ = $2;
           $$->printElement = "Revolution23Core";
          }
        ;

y_Revolution23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Revolution23Core_Revolution23CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Revolution23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Revolution23Type attributes");
             }
           delete $1;
          }
        ;

y_Revolution23_Revolution23Type :
          Revolution23START y_Revolution23Type Revolution23END
          {$$ = $2;
           $$->printElement = "Revolution23";
          }
        ;

y_RootAssembly_ElementReferenceType :
          RootAssemblySTART y_ElementReferenceType RootAssemblyEND
          {$$ = $2;}
        ;

y_RootComponent_ElementReferenceType :
          RootComponentSTART y_ElementReferenceType RootComponentEND
          {$$ = $2;}
        ;

y_RootMeanSquare_StatsMeasuredDecimalType :
          RootMeanSquareSTART y_StatsMeasuredDecimalType RootMeanSquareEND
          {$$ = $2;
           $$->printElement = "RootMeanSquare";
          }
        ;

y_RootOpening_FractionType_0 :
          /* empty */
          {$$ = 0;}
        | RootOpeningSTART y_FractionType RootOpeningEND
          {$$ = $2;}
        ;

y_RootPart_ElementReferenceType :
          RootPartSTART y_ElementReferenceType RootPartEND
          {$$ = $2;}
        ;

y_RotaryAxisType :
          ENDITEM y_MinRotaryAxis_AngularValueType
          y_MaxRotaryAxis_AngularValueType
          {$$ = new RotaryAxisType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_RotaryAxis_RotaryAxisType :
          RotaryAxisSTART y_RotaryAxisType RotaryAxisEND
          {$$ = $2;
           $$->printElement = "RotaryAxis";
          }
        ;

y_RotaryTableType :
          ENDITEM y_LocationOnCMM_PointType y_AxisDirection_UnitVectorType
          y_ZeroIndexDirection_UnitVectorType y_TableRadius_LinearValueType
          y_TableErrors_TableErrorsType
          {$$ = new RotaryTableType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_RotaryTable_RotaryTableType_0 :
          /* empty */
          {$$ = 0;}
        | RotaryTableSTART y_RotaryTableType RotaryTableEND
          {$$ = $2;}
        ;

y_Rotate_ExplodedViewRotateType :
          RotateSTART y_ExplodedViewRotateType RotateEND
          {$$ = $2;}
        ;

y_RotationAxis_UnitVectorType :
          RotationAxisSTART y_UnitVectorType RotationAxisEND
          {$$ = $2;}
        ;

y_RotationAxis_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | RotationAxisSTART y_UnitVectorType RotationAxisEND
          {$$ = $2;}
        ;

y_Rotation_TransformRotationType_0 :
          /* empty */
          {$$ = 0;}
        | RotationSTART y_TransformRotationType RotationEND
          {$$ = $2;}
        ;

y_RoughnessApplicabilityEnumType :
          DATASTRING
          {$$ = new RoughnessApplicabilityEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad RoughnessApplicabilityEnumType value");
          }
        ;

y_RoughnessAverageValueStats_StatsWithTolLinearType_0 :
          /* empty */
          {$$ = 0;}
        | RoughnessAverageValueStatsSTART y_StatsWithTolLinearType
          RoughnessAverageValueStatsEND
          {$$ = $2;
           $$->printElement = "RoughnessAverageValueStats";
          }
        ;

y_RoughnessAverageValue_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | RoughnessAverageValueSTART y_MeasuredLinearValueType
          RoughnessAverageValueEND
          {$$ = $2;}
        ;

y_RoughnessAverage_LinearValueType :
          RoughnessAverageSTART y_LinearValueType RoughnessAverageEND
          {$$ = $2;}
        ;

y_RoughnessLayEnumType :
          DATASTRING
          {$$ = new RoughnessLayEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad RoughnessLayEnumType value");
          }
        ;

y_RoughnessObtentionEnumType :
          DATASTRING
          {$$ = new RoughnessObtentionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad RoughnessObtentionEnumType value");
          }
        ;

y_RowSeparationDistance_LinearValueType :
          RowSeparationDistanceSTART y_LinearValueType
          RowSeparationDistanceEND
          {$$ = $2;}
        ;

y_Ruled23CoreType :
          ENDITEM y_LiztCurve_Curve13CoreType_2_2_Check
          {$$ = new Ruled23CoreType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        | y_LiztAttributePair ENDITEM y_LiztCurve_Curve13CoreType_2_2_Check
          {$$ = new Ruled23CoreType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Ruled23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Ruled23Core_Ruled23CoreType :
          Ruled23CoreSTART y_Ruled23CoreType Ruled23CoreEND
          {$$ = $2;
           $$->printElement = "Ruled23Core";
          }
        ;

y_Ruled23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Ruled23Core_Ruled23CoreType y_Transform_ElementReferenceType_0
          {$$ = new Ruled23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Ruled23Type attributes");
             }
           delete $1;
          }
        ;

y_Ruled23_Ruled23Type :
          Ruled23START y_Ruled23Type Ruled23END
          {$$ = $2;
           $$->printElement = "Ruled23";
          }
        ;

y_RulesToUseQPId_QPIdFullReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | RulesToUseQPIdSTART y_QPIdFullReferenceType RulesToUseQPIdEND
          {$$ = $2;}
        ;

y_RulesUnitsType :
          y_LiztAttributePair ENDITEM y_AreaUnit_AreaUnitType_0
          y_AngularUnit_AngularUnitType_0 y_ForceUnit_ForceUnitType_0
          y_LinearUnit_LinearUnitType_0 y_MassUnit_MassUnitType_0
          y_PressureUnit_PressureUnitType_0 y_SpeedUnit_SpeedUnitType_0
          y_TemperatureUnit_TemperatureUnitType_0 y_TimeUnit_TimeUnitType_0
          {$$ = new RulesUnitsType($3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad RulesUnitsType attributes");
             }
           delete $1;
          }
        ;

y_RulesUnits_RulesUnitsType_0 :
          /* empty */
          {$$ = 0;}
        | RulesUnitsSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new RulesUnitsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad RulesUnitsType attributes");
             }
           delete $2;
          }
        | RulesUnitsSTART y_RulesUnitsType RulesUnitsEND
          {$$ = $2;}
        ;

y_RulesUsedQPId_QPIdFullReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | RulesUsedQPIdSTART y_QPIdFullReferenceType RulesUsedQPIdEND
          {$$ = $2;}
        ;

y_Rules_QIFRulesType_0 :
          /* empty */
          {$$ = 0;}
        | RulesSTART ENDWHOLEITEM
          {$$ = new QIFRulesType();
           yyUnrefMap[$$] = $$;
          }
        | RulesSTART y_QIFRulesType RulesEND
          {$$ = $2;}
        ;

y_SIUnitName_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | SIUnitNameSTART ENDITEM {yyReadData = 1;} y_XmlToken
          SIUnitNameEND
          {$$ = $4;}
        ;

y_SafetyLevel_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SafetyLevelSTART ENDITEM {yyReadData = 1;} y_XmlString
          SafetyLevelEND
          {$$ = $4;}
        ;

y_SampleFrequency_XmlPositiveInteger :
          SampleFrequencySTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger SampleFrequencyEND
          {$$ = $4;}
        ;

y_SampleNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SampleNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          SampleNumberEND
          {$$ = $4;}
        ;

y_SamplePenetratingMaterialLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SamplePenetratingMaterialLengthSTART y_LinearValueType
          SamplePenetratingMaterialLengthEND
          {$$ = $2;}
        ;

y_SamplePenetratingMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SamplePenetratingMaterialSTART ENDITEM {yyReadData = 1;}
          y_XmlString SamplePenetratingMaterialEND
          {$$ = $4;}
        ;

y_SampleSize_XmlPositiveInteger :
          SampleSizeSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          SampleSizeEND
          {$$ = $4;}
        ;

y_SamplingCategoryIsType :
          y_LiztAttributePair
          {$$ = new SamplingCategoryIsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SamplingCategoryIsType attributes");
             }
           delete $1;
          }
        ;

y_SamplingCategoryIs_SamplingCategoryIsType :
          SamplingCategoryIsSTART y_SamplingCategoryIsType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "SamplingCategoryIs";
          }
        ;

y_SamplingFrequency_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | SamplingFrequencySTART y_UserDefinedUnitValueType
          SamplingFrequencyEND
          {$$ = $2;}
        ;

y_SamplingFrequency_XmlPositiveInteger :
          SamplingFrequencySTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger SamplingFrequencyEND
          {$$ = $4;}
        ;

y_SamplingIntervalEnumType :
          DATASTRING
          {$$ = new SamplingIntervalEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SamplingIntervalEnumType value");
          }
        ;

y_SamplingIntervalEnum_SamplingIntervalEnumType :
          SamplingIntervalEnumSTART ENDITEM {yyReadData = 1;}
          y_SamplingIntervalEnumType SamplingIntervalEnumEND
          {$$ = $4;}
        ;

y_SamplingIntervalType :
          ENDITEM y_SamplingIntervalTypeChoicePair
          {$$ = new SamplingIntervalType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SamplingIntervalTypeChoicePair :
          y_OtherSamplingInterval_XmlString
          {$$ = new SamplingIntervalTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SamplingIntervalTypeType = SamplingIntervalTypeChoicePair::OtherSamplingIntervalE;
           $$->SamplingIntervalTypeValue.OtherSamplingInterval = $1;
          }
        | y_SamplingIntervalEnum_SamplingIntervalEnumType
          {$$ = new SamplingIntervalTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SamplingIntervalTypeType = SamplingIntervalTypeChoicePair::SamplingIntervalEnumE;
           $$->SamplingIntervalTypeValue.SamplingIntervalEnum = $1;
          }
        ;

y_SamplingInterval_SamplingIntervalType :
          SamplingIntervalSTART y_SamplingIntervalType SamplingIntervalEND
          {$$ = $2;}
        ;

y_SamplingMethodT_1135_SamplingMethodT_1135_Type :
          y_SamplingMethodT_1135_Type
          {$$ = $1;}
        ;

y_SamplingMethodT_1135_Type :
          y_SamplingMethodT_1135_TypeChoicePair
          {$$ = new SamplingMethodT_1135_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SamplingMethodT_1135_TypeChoicePair :
          y_SamplingMethodT_1157_SamplingMethodT_1157_Type
          {$$ = new SamplingMethodT_1135_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SamplingMethodT_1135_TypeType = SamplingMethodT_1135_TypeChoicePair::SamplingMethodT_1157E;
           $$->SamplingMethodT_1135_TypeValue.SamplingMethodT_1157 = $1;
          }
        | y_SamplingPeriod_XmlPositiveInteger
          {$$ = new SamplingMethodT_1135_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SamplingMethodT_1135_TypeType = SamplingMethodT_1135_TypeChoicePair::SamplingPeriodE;
           $$->SamplingMethodT_1135_TypeValue.SamplingPeriod = $1;
          }
        ;

y_SamplingMethodT_1157_SamplingMethodT_1157_Type :
          y_SamplingMethodT_1157_Type
          {$$ = $1;}
        ;

y_SamplingMethodT_1157_Type :
          y_SamplingFrequency_XmlPositiveInteger
          y_SamplingInterval_SamplingIntervalType
          {$$ = new SamplingMethodT_1157_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SamplingMethodType :
          ENDITEM y_SampleSize_XmlPositiveInteger
          y_SamplingMethodT_1135_SamplingMethodT_1135_Type
          {$$ = new SamplingMethodType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SamplingMethod_SamplingMethodType :
          SamplingMethodSTART y_SamplingMethodType SamplingMethodEND
          {$$ = $2;}
        ;

y_SamplingPeriod_XmlPositiveInteger :
          SamplingPeriodSTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger SamplingPeriodEND
          {$$ = $4;}
        ;

y_SamplingRate_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | SamplingRateSTART y_UserDefinedUnitValueType SamplingRateEND
          {$$ = $2;}
        ;

y_SavedViewSetType :
          y_LiztAttributePair ENDITEM y_LiztSavedView_SavedViewType_1_u
          {$$ = new SavedViewSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SavedViewSetType attributes");
             }
           delete $1;
          }
        ;

y_SavedViewSet_SavedViewSetType_0 :
          /* empty */
          {$$ = 0;}
        | SavedViewSetSTART y_SavedViewSetType SavedViewSetEND
          {$$ = $2;}
        ;

y_SavedViewType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ActiveView_XmlBoolean_0
          y_AnnotationVisibleIds_ArrayReferenceFullType_0
          y_AnnotationHiddenIds_ArrayReferenceFullType_0
          y_BodyIds_ArrayReferenceFullType_0
          y_ComponentIds_ArrayReferenceFullType_0
          y_SimplifiedRepresentationId_QIFReferenceActiveType_0
          y_ExplodedViewId_QIFReferenceActiveType_0
          y_DisplayStyleId_QIFReferenceActiveType_0
          y_ZoneSectionId_QIFReferenceActiveType_0
          y_CameraIds_ArrayReferenceActiveType_0
          {$$ = new SavedViewType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SavedViewType attributes");
             }
           delete $1;
          }
        ;

y_SavedView_SavedViewType :
          SavedViewSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new SavedViewType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "SavedView";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad SavedViewType attributes");
             }
           delete $2;
          }
        | SavedViewSTART y_SavedViewType SavedViewEND
          {$$ = $2;
           $$->printElement = "SavedView";
          }
        ;

y_ScaleCoefficientOfExpansionUncertainty_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | ScaleCoefficientOfExpansionUncertaintySTART ENDITEM {yyReadData =
          1;} y_XmlDecimal ScaleCoefficientOfExpansionUncertaintyEND
          {$$ = $4;}
        ;

y_ScaleCoefficientOfExpansion_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | ScaleCoefficientOfExpansionSTART ENDITEM {yyReadData = 1;}
          y_XmlDecimal ScaleCoefficientOfExpansionEND
          {$$ = $4;}
        ;

y_ScaleCoefficient_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | ScaleCoefficientSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          ScaleCoefficientEND
          {$$ = $4;}
        ;

y_ScaleFactor_XmlDecimal :
          ScaleFactorSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          ScaleFactorEND
          {$$ = $4;}
        ;

y_ScaleMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ScaleMaterialSTART ENDITEM {yyReadData = 1;} y_XmlString
          ScaleMaterialEND
          {$$ = $4;}
        ;

y_ScaleReferenceEnumType :
          DATASTRING
          {$$ = new ScaleReferenceEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ScaleReferenceEnumType value");
          }
        ;

y_ScaleReference_ScaleReferenceEnumType_0 :
          /* empty */
          {$$ = 0;}
        | ScaleReferenceSTART ENDITEM {yyReadData = 1;}
          y_ScaleReferenceEnumType ScaleReferenceEND
          {$$ = $4;}
        ;

y_ScaleResolution_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ScaleResolutionSTART y_LinearValueType ScaleResolutionEND
          {$$ = $2;}
        ;

y_ScaleType :
          ENDITEM y_Origin_PointType y_ScaleType_1005_ScaleType_1005_Type
          {$$ = new ScaleType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ScaleType_1005_ScaleType_1005_Type :
          y_ScaleType_1005_Type
          {$$ = $1;}
        ;

y_ScaleType_1005_Type :
          y_ScaleType_1005_TypeChoicePair
          {$$ = new ScaleType_1005_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ScaleType_1005_TypeChoicePair :
          y_AxialDifferentialScale_AxialDifferentialScaleType
          {$$ = new ScaleType_1005_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ScaleType_1005_TypeType = ScaleType_1005_TypeChoicePair::AxialDifferentialScaleE;
           $$->ScaleType_1005_TypeValue.AxialDifferentialScale = $1;
          }
        | y_RadialDifferentialScale_RadialDifferentialScaleType
          {$$ = new ScaleType_1005_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ScaleType_1005_TypeType = ScaleType_1005_TypeChoicePair::RadialDifferentialScaleE;
           $$->ScaleType_1005_TypeValue.RadialDifferentialScale = $1;
          }
        | y_UniformScale_UniformScaleType
          {$$ = new ScaleType_1005_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ScaleType_1005_TypeType = ScaleType_1005_TypeChoicePair::UniformScaleE;
           $$->ScaleType_1005_TypeValue.UniformScale = $1;
          }
        ;

y_Scale_ScaleType_0 :
          /* empty */
          {$$ = 0;}
        | ScaleSTART y_ScaleType ScaleEND
          {$$ = $2;}
        ;

y_Scales_substituteType_0 :
          /* empty */
          {$$ = 0;}
        | y_CartesianMeasurementDeviceScales_CartesianMeasurementDeviceScalesType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ScanningSpeed_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | ScanningSpeedSTART y_UserDefinedUnitValueType ScanningSpeedEND
          {$$ = $2;}
        ;

y_Scope_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ScopeSTART ENDITEM {yyReadData = 1;} y_XmlString ScopeEND
          {$$ = $4;}
        ;

y_ScreenMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ScreenMaterialSTART ENDITEM {yyReadData = 1;} y_XmlString
          ScreenMaterialEND
          {$$ = $4;}
        ;

y_SearchRadius_LinearValueType :
          SearchRadiusSTART y_LinearValueType SearchRadiusEND
          {$$ = $2;}
        ;

y_SecondAxis_UserDefinedAxisType :
          SecondAxisSTART y_UserDefinedAxisType SecondAxisEND
          {$$ = $2;
           $$->printElement = "SecondAxis";
          }
        ;

y_SecondCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | SecondCompositeSegmentPositionDefinitionSTART
          y_CompositeSegmentPositionDefinitionType
          SecondCompositeSegmentPositionDefinitionEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentPositionDefinition";
          }
        ;

y_SecondCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | SecondCompositeSegmentPositionMeasurementSTART
          y_CompositeSegmentPositionMeasurementType
          SecondCompositeSegmentPositionMeasurementEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentPositionMeasurement";
          }
        ;

y_SecondCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType :
          SecondCompositeSegmentPositionStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentPositionStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SecondCompositeSegmentPositionStats";
          }
        | SecondCompositeSegmentPositionStatsSTART
          y_CompositeSegmentPositionStatsEvalType
          SecondCompositeSegmentPositionStatsEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentPositionStats";
          }
        ;

y_SecondCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | SecondCompositeSegmentProfileDefinitionSTART
          y_CompositeSegmentProfileDefinitionType
          SecondCompositeSegmentProfileDefinitionEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentProfileDefinition";
          }
        ;

y_SecondCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | SecondCompositeSegmentProfileMeasurementSTART
          y_CompositeSegmentProfileMeasurementType
          SecondCompositeSegmentProfileMeasurementEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentProfileMeasurement";
          }
        ;

y_SecondCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType :
          SecondCompositeSegmentProfileStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentProfileStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SecondCompositeSegmentProfileStats";
          }
        | SecondCompositeSegmentProfileStatsSTART
          y_CompositeSegmentProfileStatsEvalType
          SecondCompositeSegmentProfileStatsEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentProfileStats";
          }
        ;

y_SecondCompositeSegmentSymmetryDefinition_CompositeSegmentSymmetryDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | SecondCompositeSegmentSymmetryDefinitionSTART
          y_CompositeSegmentSymmetryDefinitionType
          SecondCompositeSegmentSymmetryDefinitionEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentSymmetryDefinition";
          }
        ;

y_SecondCompositeSegmentSymmetryMeasurement_CompositeSegmentSymmetryMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | SecondCompositeSegmentSymmetryMeasurementSTART
          y_CompositeSegmentSymmetryMeasurementType
          SecondCompositeSegmentSymmetryMeasurementEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentSymmetryMeasurement";
          }
        ;

y_SecondCompositeSegmentSymmetryStats_CompositeSegmentSymmetryStatsEvalType :
          SecondCompositeSegmentSymmetryStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentSymmetryStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SecondCompositeSegmentSymmetryStats";
          }
        | SecondCompositeSegmentSymmetryStatsSTART
          y_CompositeSegmentSymmetryStatsEvalType
          SecondCompositeSegmentSymmetryStatsEND
          {$$ = $2;
           $$->printElement = "SecondCompositeSegmentSymmetryStats";
          }
        ;

y_SecondDirectionFirstNestingIndex_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SecondDirectionFirstNestingIndexSTART y_LinearValueType
          SecondDirectionFirstNestingIndexEND
          {$$ = $2;}
        ;

y_SecondDirectionNestingIndex_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SecondDirectionNestingIndexSTART y_LinearValueType
          SecondDirectionNestingIndexEND
          {$$ = $2;}
        ;

y_SecondDirectionSecondNestingIndex_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SecondDirectionSecondNestingIndexSTART y_LinearValueType
          SecondDirectionSecondNestingIndexEND
          {$$ = $2;}
        ;

y_SecondFeatureZone_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | SecondFeatureZoneSTART y_QIFReferenceFullType
          SecondFeatureZoneEND
          {$$ = $2;}
        ;

y_SecondFeature_QIFReferenceFullType :
          SecondFeatureSTART y_QIFReferenceFullType SecondFeatureEND
          {$$ = $2;}
        ;

y_SecondLegLength_FractionType :
          SecondLegLengthSTART y_FractionType SecondLegLengthEND
          {$$ = $2;}
        ;

y_SecondLineOrigin_Point2dSimpleType :
          SecondLineOriginSTART y_Point2dSimpleType SecondLineOriginEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_SecondNestingIndex_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SecondNestingIndexSTART y_LinearValueType SecondNestingIndexEND
          {$$ = $2;}
        ;

y_SecondaryAlignmentOperationType :
          ENDITEM y_SequenceNumber_NaturalType
          y_Attributes_AttributesType_0
          y_SecondaryEntity_AlignmentFeatureType
          y_SecondaryAxis_UnitVectorType y_RotationAxis_UnitVectorType_0
          {$$ = new SecondaryAlignmentOperationType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_SecondaryAlignment_SecondaryAlignmentOperationType :
          SecondaryAlignmentSTART y_SecondaryAlignmentOperationType
          SecondaryAlignmentEND
          {$$ = $2;
           $$->printElement = "SecondaryAlignment";
          }
        ;

y_SecondaryAxis_UnitVectorType :
          SecondaryAxisSTART y_UnitVectorType SecondaryAxisEND
          {$$ = $2;}
        ;

y_SecondaryAxis_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | SecondaryAxisSTART y_UnitVectorType SecondaryAxisEND
          {$$ = $2;}
        ;

y_SecondaryEntity_AlignmentFeatureType :
          SecondaryEntitySTART y_AlignmentFeatureType SecondaryEntityEND
          {$$ = $2;}
        ;

y_SecondaryRoughnessParameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SecondaryRoughnessParameterSTART y_LinearValueType
          SecondaryRoughnessParameterEND
          {$$ = $2;}
        ;

y_SectionAreaType :
          ENDITEM y_HatchStyleId_QIFReferenceType_0
          y_Loops_SectionLoopsType
          {$$ = new SectionAreaType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SectionAreasType :
          y_LiztAttributePair ENDITEM y_LiztArea_SectionAreaType_1_u
          {$$ = new SectionAreasType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SectionAreasType attributes");
             }
           delete $1;
          }
        ;

y_SectionEdgesType :
          y_LiztAttributePair ENDITEM y_LiztEdge_EdgeOrientedType_1_u
          {$$ = new SectionEdgesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SectionEdgesType attributes");
             }
           delete $1;
          }
        ;

y_SectionGroupType :
          ENDITEM y_BodyId_QIFReferenceFullType_0
          y_Areas_SectionAreasType_0 y_Paths_SectionPathsType_0
          y_Vertices_ArrayReferenceType_0
          {$$ = new SectionGroupType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_SectionGroup_SectionGroupType :
          SectionGroupSTART ENDWHOLEITEM
          {$$ = new SectionGroupType();
           yyUnrefMap[$$] = $$;
          }
        | SectionGroupSTART y_SectionGroupType SectionGroupEND
          {$$ = $2;}
        ;

y_SectionGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztSectionGroup_SectionGroupType_1_u
          {$$ = new SectionGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SectionGroupsType attributes");
             }
           delete $1;
          }
        ;

y_SectionGroups_SectionGroupsType_0 :
          /* empty */
          {$$ = 0;}
        | SectionGroupsSTART y_SectionGroupsType SectionGroupsEND
          {$$ = $2;}
        ;

y_SectionLoopsType :
          y_LiztAttributePair ENDITEM y_LiztLoop_SectionPathType_1_u
          {$$ = new SectionLoopsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SectionLoopsType attributes");
             }
           delete $1;
          }
        ;

y_SectionModifierEnumType :
          DATASTRING
          {$$ = new SectionModifierEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SectionModifierEnumType value");
          }
        ;

y_SectionModifier_SectionModifierEnumType_0 :
          /* empty */
          {$$ = 0;}
        | SectionModifierSTART ENDITEM {yyReadData = 1;}
          y_SectionModifierEnumType SectionModifierEND
          {$$ = $4;}
        ;

y_SectionPathType :
          ENDITEM y_Edges_SectionEdgesType
          {$$ = new SectionPathType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SectionPathsType :
          y_LiztAttributePair ENDITEM y_LiztPath_SectionPathType_1_u
          {$$ = new SectionPathsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SectionPathsType attributes");
             }
           delete $1;
          }
        ;

y_SectionPlane_XmlUnsignedInt :
          SectionPlaneSTART ENDITEM {yyReadData = 1;} y_XmlUnsignedInt
          SectionPlaneEND
          {$$ = $4;}
        ;

y_SectionPlane_ZoneSectionPlaneType :
          SectionPlaneSTART y_ZoneSectionPlaneType SectionPlaneEND
          {$$ = $2;}
        ;

y_SectionPlanes_ZoneSectionPlanesType :
          SectionPlanesSTART y_ZoneSectionPlanesType SectionPlanesEND
          {$$ = $2;}
        ;

y_Section_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SectionSTART ENDITEM {yyReadData = 1;} y_XmlString SectionEND
          {$$ = $4;}
        ;

y_SecurityClassificationEnumType :
          DATASTRING
          {$$ = new SecurityClassificationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SecurityClassificationEnumType value");
          }
        ;

y_SecurityClassificationEnum_SecurityClassificationEnumType :
          SecurityClassificationEnumSTART ENDITEM {yyReadData = 1;}
          y_SecurityClassificationEnumType SecurityClassificationEnumEND
          {$$ = $4;}
        ;

y_SecurityClassificationType :
          ENDITEM y_SecurityClassificationTypeChoicePair
          {$$ = new SecurityClassificationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SecurityClassificationTypeChoicePair :
          y_OtherSecurityClassification_XmlString
          {$$ = new SecurityClassificationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SecurityClassificationTypeType = SecurityClassificationTypeChoicePair::OtherSecurityClassificationE;
           $$->SecurityClassificationTypeValue.OtherSecurityClassification = $1;
          }
        | y_SecurityClassificationEnum_SecurityClassificationEnumType
          {$$ = new SecurityClassificationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SecurityClassificationTypeType = SecurityClassificationTypeChoicePair::SecurityClassificationEnumE;
           $$->SecurityClassificationTypeValue.SecurityClassificationEnum = $1;
          }
        ;

y_SecurityClassification_SecurityClassificationType_0 :
          /* empty */
          {$$ = 0;}
        | SecurityClassificationSTART y_SecurityClassificationType
          SecurityClassificationEND
          {$$ = $2;}
        ;

y_Segment12CoreType :
          y_LiztAttributePair ENDITEM y_StartPoint_Point2dSimpleType
          y_EndPoint_Point2dSimpleType
          {$$ = new Segment12CoreType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Segment12CoreType attributes");
             }
           delete $1;
          }
        ;

y_Segment12Core_Segment12CoreType :
          Segment12CoreSTART y_Segment12CoreType Segment12CoreEND
          {$$ = $2;
           $$->printElement = "Segment12Core";
          }
        ;

y_Segment12Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Segment12Core_Segment12CoreType
          {$$ = new Segment12Type($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Segment12Type attributes");
             }
           delete $1;
          }
        ;

y_Segment12_Segment12Type :
          Segment12START y_Segment12Type Segment12END
          {$$ = $2;
           $$->printElement = "Segment12";
          }
        ;

y_Segment13CoreType :
          y_LiztAttributePair ENDITEM y_StartPoint_PointSimpleType
          y_EndPoint_PointSimpleType
          {$$ = new Segment13CoreType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Segment13CoreType attributes");
             }
           delete $1;
          }
        ;

y_Segment13Core_Segment13CoreType :
          Segment13CoreSTART y_Segment13CoreType Segment13CoreEND
          {$$ = $2;
           $$->printElement = "Segment13Core";
          }
        ;

y_Segment13Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Segment13Core_Segment13CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Segment13Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Segment13Type attributes");
             }
           delete $1;
          }
        ;

y_Segment13_Segment13Type :
          Segment13START y_Segment13Type Segment13END
          {$$ = $2;
           $$->printElement = "Segment13";
          }
        ;

y_Segment1_LineSegment2dType :
          Segment1START y_LineSegment2dType Segment1END
          {$$ = $2;}
        ;

y_Segment2_LineSegment2dType :
          Segment2START y_LineSegment2dType Segment2END
          {$$ = $2;}
        ;

y_Sensitivity_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | SensitivitySTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          SensitivityEND
          {$$ = $4;}
        ;

y_SensorId_QIFReferenceType :
          SensorIdSTART y_QIFReferenceType SensorIdEND
          {$$ = $2;}
        ;

y_SensorId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | SensorIdSTART y_QIFReferenceType SensorIdEND
          {$$ = $2;}
        ;

y_SensorIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | SensorIdsSTART y_ArrayReferenceType SensorIdsEND
          {$$ = $2;}
        ;

y_SensorIds_ListQIFReferenceType :
          SensorIdsSTART y_ListQIFReferenceType SensorIdsEND
          {$$ = $2;}
        ;

y_SeparateZone_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | SeparateZoneSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          SeparateZoneEND
          {$$ = $4;}
        ;

y_SequenceNumber_NaturalType :
          SequenceNumberSTART ENDITEM {yyReadData = 1;} y_NaturalType
          SequenceNumberEND
          {$$ = $4;}
        ;

y_SequenceNumber_NaturalType_0 :
          /* empty */
          {$$ = 0;}
        | SequenceNumberSTART ENDITEM {yyReadData = 1;} y_NaturalType
          SequenceNumberEND
          {$$ = $4;}
        ;

y_SequenceNumber_XmlPositiveInteger :
          SequenceNumberSTART ENDITEM {yyReadData = 1;}
          y_XmlPositiveInteger SequenceNumberEND
          {$$ = $4;}
        ;

y_SequencedBaseFeatureType :
          ENDITEM y_ReferencedComponent_ReferencedComponentEnumType
          y_FeatureId_QIFReferenceFullType y_SequenceNumber_NaturalType
          {$$ = new SequencedBaseFeatureType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SequencedDatumT_1021_SequencedDatumT_1021_Type :
          y_SequencedDatumT_1021_Type
          {$$ = $1;}
        ;

y_SequencedDatumT_1021_Type :
          y_SequencedDatumT_1021_TypeChoicePair
          {$$ = new SequencedDatumT_1021_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SequencedDatumT_1021_TypeChoicePair :
          y_CompoundDatum_CompoundDatumType
          {$$ = new SequencedDatumT_1021_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SequencedDatumT_1021_TypeType = SequencedDatumT_1021_TypeChoicePair::CompoundDatumE;
           $$->SequencedDatumT_1021_TypeValue.CompoundDatum = $1;
          }
        | y_SimpleDatum_DatumType
          {$$ = new SequencedDatumT_1021_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SequencedDatumT_1021_TypeType = SequencedDatumT_1021_TypeChoicePair::SimpleDatumE;
           $$->SequencedDatumT_1021_TypeValue.SimpleDatum = $1;
          }
        ;

y_SequencedDatumType :
          ENDITEM y_SequencedDatumT_1021_SequencedDatumT_1021_Type
          y_SequenceNumber_NaturalType
          {$$ = new SequencedDatumType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SerialNumber_XmlString :
          SerialNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          SerialNumberEND
          {$$ = $4;}
        ;

y_SerialNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SerialNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          SerialNumberEND
          {$$ = $4;}
        ;

y_SetFeatureType :
          /* empty */
          {
           $$ = new SetFeatureType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_Set_SetFeatureType :
          SetSTART y_SetFeatureType ENDWHOLEITEM
          {$$ = $2;}
        ;

y_ShapeClassEnumType :
          DATASTRING
          {$$ = new ShapeClassEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ShapeClassEnumType value");
          }
        ;

y_ShapeClassEnum_ShapeClassEnumType :
          ShapeClassEnumSTART ENDITEM {yyReadData = 1;}
          y_ShapeClassEnumType ShapeClassEnumEND
          {$$ = $4;}
        ;

y_ShapeClassIsType :
          y_LiztAttributePair
          {$$ = new ShapeClassIsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ShapeClassIsType attributes");
             }
           delete $1;
          }
        ;

y_ShapeClassIs_ShapeClassIsType :
          ShapeClassIsSTART y_ShapeClassIsType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "ShapeClassIs";
          }
        ;

y_ShapeClassType :
          ENDITEM y_ShapeClassTypeChoicePair
          {$$ = new ShapeClassType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ShapeClassTypeChoicePair :
          y_OtherShapeClass_XmlString
          {$$ = new ShapeClassTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ShapeClassTypeType = ShapeClassTypeChoicePair::OtherShapeClassE;
           $$->ShapeClassTypeValue.OtherShapeClass = $1;
          }
        | y_ShapeClassEnum_ShapeClassEnumType
          {$$ = new ShapeClassTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ShapeClassTypeType = ShapeClassTypeChoicePair::ShapeClassEnumE;
           $$->ShapeClassTypeValue.ShapeClassEnum = $1;
          }
        ;

y_SheetNumber_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SheetNumberSTART ENDITEM {yyReadData = 1;} y_XmlString
          SheetNumberEND
          {$$ = $4;}
        ;

y_ShellIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ShellIdsSTART y_ArrayReferenceType ShellIdsEND
          {$$ = $2;}
        ;

y_ShellSetType :
          y_LiztAttributePair ENDITEM y_LiztShell_ShellType_1_u
          {$$ = new ShellSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ShellSetType attributes");
             }
           delete $1;
          }
        ;

y_ShellSet_ShellSetType :
          ShellSetSTART y_ShellSetType ShellSetEND
          {$$ = $2;}
        ;

y_ShellSet_ShellSetType_0 :
          /* empty */
          {$$ = 0;}
        | ShellSetSTART y_ShellSetType ShellSetEND
          {$$ = $2;}
        ;

y_ShellType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FaceIds_ArrayReferenceType_0
          {$$ = new ShellType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ShellType attributes");
             }
           delete $1;
          }
        ;

y_Shell_ShellType :
          ShellSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new ShellType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "Shell";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ShellType attributes");
             }
           delete $2;
          }
        | ShellSTART y_ShellType ShellEND
          {$$ = $2;
           $$->printElement = "Shell";
          }
        ;

y_Shift_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ShiftSTART ENDITEM {yyReadData = 1;} y_XmlString ShiftEND
          {$$ = $4;}
        ;

y_Shift_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | ShiftSTART ENDITEM {yyReadData = 1;} y_XmlToken ShiftEND
          {$$ = $4;}
        ;

y_ShockTolerance_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | ShockToleranceSTART y_UserDefinedUnitValueType ShockToleranceEND
          {$$ = $2;}
        ;

y_SideParameters_WeldGrooveOneSideParametersType_0 :
          /* empty */
          {$$ = 0;}
        | SideParametersSTART ENDWHOLEITEM
          {$$ = new WeldGrooveOneSideParametersType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SideParameters";
          }
        | SideParametersSTART y_WeldGrooveOneSideParametersType
          SideParametersEND
          {$$ = $2;
           $$->printElement = "SideParameters";
          }
        ;

y_SideParameters_WeldOneSideParametersExtendSizeType_0 :
          /* empty */
          {$$ = 0;}
        | SideParametersSTART ENDWHOLEITEM
          {$$ = new WeldOneSideParametersExtendSizeType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SideParameters";
          }
        | SideParametersSTART y_WeldOneSideParametersExtendSizeType
          SideParametersEND
          {$$ = $2;
           $$->printElement = "SideParameters";
          }
        ;

y_SideParameters_WeldOneSideParametersExtendType_0 :
          /* empty */
          {$$ = 0;}
        | SideParametersSTART ENDWHOLEITEM
          {$$ = new WeldOneSideParametersExtendType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SideParameters";
          }
        | SideParametersSTART y_WeldOneSideParametersExtendType
          SideParametersEND
          {$$ = $2;
           $$->printElement = "SideParameters";
          }
        ;

y_SideParameters_WeldPlugOneSideParametersType_0 :
          /* empty */
          {$$ = 0;}
        | SideParametersSTART ENDWHOLEITEM
          {$$ = new WeldPlugOneSideParametersType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SideParameters";
          }
        | SideParametersSTART y_WeldPlugOneSideParametersType
          SideParametersEND
          {$$ = $2;
           $$->printElement = "SideParameters";
          }
        ;

y_SideParameters_WeldSpotOneSideParametersType_0 :
          /* empty */
          {$$ = 0;}
        | SideParametersSTART ENDWHOLEITEM
          {$$ = new WeldSpotOneSideParametersType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "SideParameters";
          }
        | SideParametersSTART y_WeldSpotOneSideParametersType
          SideParametersEND
          {$$ = $2;
           $$->printElement = "SideParameters";
          }
        ;

y_SignOffsType :
          y_LiztAttributePair ENDITEM y_LiztEmployee_EmployeeType_1_u
          {$$ = new SignOffsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SignOffsType attributes");
             }
           delete $1;
          }
        ;

y_SignOffs_SignOffsType_0 :
          /* empty */
          {$$ = 0;}
        | SignOffsSTART y_SignOffsType SignOffsEND
          {$$ = $2;}
        ;

y_SignaturePresent_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | SignaturePresentSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          SignaturePresentEND
          {$$ = $4;}
        ;

y_Signature_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SignatureSTART ENDITEM {yyReadData = 1;} y_XmlString SignatureEND
          {$$ = $4;}
        ;

y_SignificanceModifier_SignificantDimensionEnumType_0 :
          /* empty */
          {$$ = 0;}
        | SignificanceModifierSTART ENDITEM {yyReadData = 1;}
          y_SignificantDimensionEnumType SignificanceModifierEND
          {$$ = $4;}
        ;

y_SignificantDimensionEnumType :
          DATASTRING
          {$$ = new SignificantDimensionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SignificantDimensionEnumType value");
          }
        ;

y_SimpleDatum_DatumType :
          SimpleDatumSTART y_DatumType SimpleDatumEND
          {$$ = $2;}
        ;

y_SimpleStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger_0
          {$$ = new SimpleStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SimpleStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_SimpleStudyPlan_SimpleStudyPlanType :
          SimpleStudyPlanSTART y_SimpleStudyPlanType SimpleStudyPlanEND
          {$$ = $2;
           $$->printElement = "SimpleStudyPlan";
          }
        ;

y_SimpleStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_NumberOfSamples_XmlPositiveInteger
          y_SubgroupSize_XmlPositiveInteger_0
          {$$ = new SimpleStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SimpleStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_SimpleStudyResults_SimpleStudyResultsType :
          SimpleStudyResultsSTART y_SimpleStudyResultsType
          SimpleStudyResultsEND
          {$$ = $2;
           $$->printElement = "SimpleStudyResults";
          }
        ;

y_SimpleTactileProbeSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Qualifications_QualificationsType_0 y_Length_LinearValueType_0
          y_TipEndGeometry_TipEndGeometryType_0
          y_TipEndDiameter_LinearValueType_0 y_TipEndMaterial_XmlString_0
          y_StemMaterial_XmlString_0 y_StemDiameter_LinearValueType_0
          {$$ = new SimpleTactileProbeSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SimpleTactileProbeSensorType attributes");
             }
           delete $1;
          }
        ;

y_SimpleTactileProbeSensor_SimpleTactileProbeSensorType :
          SimpleTactileProbeSensorSTART y_SimpleTactileProbeSensorType
          SimpleTactileProbeSensorEND
          {$$ = $2;
           $$->printElement = "SimpleTactileProbeSensor";
          }
        ;

y_SimplifiedRepresentationFormEnumType :
          DATASTRING
          {$$ = new SimplifiedRepresentationFormEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SimplifiedRepresentationFormEnumType value");
          }
        ;

y_SimplifiedRepresentationGroupType :
          ENDITEM y_Form_SimplifiedRepresentationFormEnumType
          y_ComponentIds_ArrayReferenceFullType_0
          y_BodyIds_ArrayReferenceFullType_0
          {$$ = new SimplifiedRepresentationGroupType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SimplifiedRepresentationGroup_SimplifiedRepresentationGroupType :
          SimplifiedRepresentationGroupSTART
          y_SimplifiedRepresentationGroupType
          SimplifiedRepresentationGroupEND
          {$$ = $2;}
        ;

y_SimplifiedRepresentationGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztSimplifiedRepresentationGroup_SimplifiedRepresentationGroupType_1_u
          {$$ = new SimplifiedRepresentationGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SimplifiedRepresentationGroupsType attributes");
             }
           delete $1;
          }
        ;

y_SimplifiedRepresentationGroups_SimplifiedRepresentationGroupsType_0 :
          /* empty */
          {$$ = 0;}
        | SimplifiedRepresentationGroupsSTART
          y_SimplifiedRepresentationGroupsType
          SimplifiedRepresentationGroupsEND
          {$$ = $2;}
        ;

y_SimplifiedRepresentationId_QIFReferenceActiveType_0 :
          /* empty */
          {$$ = 0;}
        | SimplifiedRepresentationIdSTART y_QIFReferenceActiveType
          SimplifiedRepresentationIdEND
          {$$ = $2;}
        ;

y_SimplifiedRepresentationSetType :
          y_LiztAttributePair ENDITEM
          y_LiztSimplifiedRepresentation_SimplifiedRepresentationType_1_u
          {$$ = new SimplifiedRepresentationSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SimplifiedRepresentationSetType attributes");
             }
           delete $1;
          }
        ;

y_SimplifiedRepresentationSet_SimplifiedRepresentationSetType_0 :
          /* empty */
          {$$ = 0;}
        | SimplifiedRepresentationSetSTART
          y_SimplifiedRepresentationSetType SimplifiedRepresentationSetEND
          {$$ = $2;}
        ;

y_SimplifiedRepresentationType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Form_SimplifiedRepresentationFormEnumType
          y_SimplifiedRepresentationGroups_SimplifiedRepresentationGroupsType_0
          {$$ = new SimplifiedRepresentationType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SimplifiedRepresentationType attributes");
             }
           delete $1;
          }
        ;

y_SimplifiedRepresentation_SimplifiedRepresentationType :
          SimplifiedRepresentationSTART y_SimplifiedRepresentationType
          SimplifiedRepresentationEND
          {$$ = $2;
           $$->printElement = "SimplifiedRepresentation";
          }
        ;

y_SimultaneousRequirementEnumType :
          DATASTRING
          {$$ = new SimultaneousRequirementEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SimultaneousRequirementEnumType value");
          }
        ;

y_SimultaneousRequirementGroupType :
          ENDITEM y_CharacteristicNominalIds_ArrayReferenceType
          y_Requirement_SimultaneousRequirementEnumType
          y_CompositeLevel_CompositeSegmentLowerLevelEnumType_0
          {$$ = new SimultaneousRequirementGroupType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SimultaneousRequirementGroup_SimultaneousRequirementGroupType :
          SimultaneousRequirementGroupSTART
          y_SimultaneousRequirementGroupType
          SimultaneousRequirementGroupEND
          {$$ = $2;}
        ;

y_SimultaneousRequirementGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztSimultaneousRequirementGroup_SimultaneousRequirementGroupType_1_u
          {$$ = new SimultaneousRequirementGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SimultaneousRequirementGroupsType attributes");
             }
           delete $1;
          }
        ;

y_SimultaneousRequirementGroups_SimultaneousRequirementGroupsType_0 :
          /* empty */
          {$$ = 0;}
        | SimultaneousRequirementGroupsSTART
          y_SimultaneousRequirementGroupsType
          SimultaneousRequirementGroupsEND
          {$$ = $2;}
        ;

y_SineBarType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_NominalBallCenterToBallCenterLength_LinearValueType_0
          y_CylinderCenterToCylinderCenterAccuracy_LinearValueType_0
          y_Parallelism_LinearValueType_0 y_OverallLength_LinearValueType_0
          y_Material_XmlString_0 y_Magnetic_XmlBoolean_0
          y_Width_LinearValueType_0
          {$$ = new SineBarType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SineBarType attributes");
             }
           delete $1;
          }
        ;

y_SineBar_SineBarType :
          SineBarSTART y_SineBarType SineBarEND
          {$$ = $2;
           $$->printElement = "SineBar";
          }
        ;

y_SingleLeadSpecification_SingleLeadThreadSpecificationType :
          SingleLeadSpecificationSTART y_SingleLeadThreadSpecificationType
          SingleLeadSpecificationEND
          {$$ = $2;
           $$->printElement = "SingleLeadSpecification";
          }
        ;

y_SingleLeadThreadSpecificationType :
          y_LiztAttributePair ENDITEM y_Diameter_LinearValueType
          y_ThreadSeries_ThreadSeriesType
          y_ThreadToleranceClass_ThreadClassType
          y_CrestDiameterToleranceClass_ThreadClassType_0
          y_LeftHanded_XmlBoolean_0 y_ModifiedThread_XmlBoolean_0
          y_ThreadLengthEngagement_LinearValueType_0
          y_Attributes_AttributesType_0
          y_ThreadDensity_SpecifiedDecimalType
          {$$ = new SingleLeadThreadSpecificationType($3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SingleLeadThreadSpecificationType attributes");
             }
           delete $1;
          }
        ;

y_SingleNestingIndexFilterSymbolEnumType :
          DATASTRING
          {$$ = new SingleNestingIndexFilterSymbolEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SingleNestingIndexFilterSymbolEnumType value");
          }
        ;

y_SingleNestingIndexFilterType :
          ENDITEM y_Symbol_SingleNestingIndexFilterSymbolEnumType
          y_NestingIndex_LinearValueType
          y_SecondDirectionNestingIndex_LinearValueType_0
          {$$ = new SingleNestingIndexFilterType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SingleNestingIndexFilter_SingleNestingIndexFilterType :
          SingleNestingIndexFilterSTART y_SingleNestingIndexFilterType
          SingleNestingIndexFilterEND
          {$$ = $2;}
        ;

y_SingleOpenEnd_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | SingleOpenEndSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          SingleOpenEndEND
          {$$ = $4;}
        ;

y_SinglePointArticulationPerformanceTestType :
          ENDITEM y_MaxDeviationFromAverageNear_LinearValueType
          y_MaxDeviationFromAverageFar_LinearValueType
          y_MaxDeviationFromAverageMiddle_LinearValueType
          y_TwiceStandardDeviationNear_LinearValueType
          y_TwiceStandardDeviationFar_LinearValueType
          y_TwiceStandardDeviationMiddle_LinearValueType
          {$$ = new SinglePointArticulationPerformanceTestType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_SinglePointArticulationPerformanceTest_SinglePointArticulationPerformanceTestType_0 :
          /* empty */
          {$$ = 0;}
        | SinglePointArticulationPerformanceTestSTART
          y_SinglePointArticulationPerformanceTestType
          SinglePointArticulationPerformanceTestEND
          {$$ = $2;}
        ;

y_SinglePointSetId_PointSetReferenceSingleType :
          SinglePointSetIdSTART y_PointSetReferenceSingleType
          SinglePointSetIdEND
          {$$ = $2;
           $$->printElement = "SinglePointSetId";
          }
        ;

y_Single_NaturalType :
          SingleSTART ENDITEM {yyReadData = 1;} y_NaturalType SingleEND
          {$$ = $4;}
        ;

y_SizeCharacteristicDefinitionId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | SizeCharacteristicDefinitionIdSTART y_QIFReferenceType
          SizeCharacteristicDefinitionIdEND
          {$$ = $2;}
        ;

y_Size_CartesianWorkingVolumeType_0 :
          /* empty */
          {$$ = 0;}
        | SizeSTART ENDWHOLEITEM
          {$$ = new CartesianWorkingVolumeType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "Size";
          }
        | SizeSTART y_CartesianWorkingVolumeType SizeEND
          {$$ = $2;
           $$->printElement = "Size";
          }
        ;

y_Size_FractionType_0 :
          /* empty */
          {$$ = 0;}
        | SizeSTART y_FractionType SizeEND
          {$$ = $2;}
        ;

y_Size_NaturalType :
          SizeSTART ENDITEM {yyReadData = 1;} y_NaturalType SizeEND
          {$$ = $4;}
        ;

y_SkewGrouping_CriterionIntegerType :
          SkewGroupingSTART y_CriterionIntegerType SkewGroupingEND
          {$$ = $2;}
        ;

y_Skew_StatsMeasuredDecimalType :
          SkewSTART y_StatsMeasuredDecimalType SkewEND
          {$$ = $2;
           $$->printElement = "Skew";
          }
        ;

y_SlotEndEnumType :
          DATASTRING
          {$$ = new SlotEndEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SlotEndEnumType value");
          }
        ;

y_SlotEndEnum_SlotEndEnumType :
          SlotEndEnumSTART ENDITEM {yyReadData = 1;} y_SlotEndEnumType
          SlotEndEnumEND
          {$$ = $4;}
        ;

y_SlotEndType :
          ENDITEM y_SlotEndTypeChoicePair
          {$$ = new SlotEndType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SlotEndTypeChoicePair :
          y_OtherSlotEnd_XmlString
          {$$ = new SlotEndTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SlotEndTypeType = SlotEndTypeChoicePair::OtherSlotEndE;
           $$->SlotEndTypeValue.OtherSlotEnd = $1;
          }
        | y_SlotEndEnum_SlotEndEnumType
          {$$ = new SlotEndTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SlotEndTypeType = SlotEndTypeChoicePair::SlotEndEnumE;
           $$->SlotEndTypeValue.SlotEndEnum = $1;
          }
        ;

y_SmallEndDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SmallEndDistanceSTART y_LinearValueType SmallEndDistanceEND
          {$$ = $2;}
        ;

y_SmallEndDistance_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SmallEndDistanceSTART y_MeasuredLinearValueType
          SmallEndDistanceEND
          {$$ = $2;}
        ;

y_SoftwareDefinitions_SoftwaresType_0 :
          /* empty */
          {$$ = 0;}
        | SoftwareDefinitionsSTART y_SoftwaresType SoftwareDefinitionsEND
          {$$ = $2;}
        ;

y_SoftwareId_QIFReferenceType :
          SoftwareIdSTART y_QIFReferenceType SoftwareIdEND
          {$$ = $2;}
        ;

y_SoftwareType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_VendorName_XmlToken y_ApplicationName_XmlToken
          y_Version_XmlToken_0 y_Description_XmlString_0 y_URI_XmlAnyURI_0
          y_ReferencedStandardIds_ArrayReferenceType_0
          {$$ = new SoftwareType($3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SoftwareType attributes");
             }
           delete $1;
          }
        ;

y_Software_SoftwareType :
          SoftwareSTART y_SoftwareType SoftwareEND
          {$$ = $2;}
        ;

y_SoftwaresType :
          y_LiztAttributePair ENDITEM y_LiztSoftware_SoftwareType_1_u
          {$$ = new SoftwaresType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SoftwaresType attributes");
             }
           delete $1;
          }
        ;

y_SourceDescription_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SourceDescriptionSTART ENDITEM {yyReadData = 1;} y_XmlString
          SourceDescriptionEND
          {$$ = $4;}
        ;

y_SourceOfRequiredness_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SourceOfRequirednessSTART ENDITEM {yyReadData = 1;} y_XmlString
          SourceOfRequirednessEND
          {$$ = $4;}
        ;

y_Spacer_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | SpacerSTART ENDITEM {yyReadData = 1;} y_XmlBoolean SpacerEND
          {$$ = $4;}
        ;

y_SpecificHeatCapacity_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | SpecificHeatCapacitySTART ENDITEM {yyReadData = 1;} y_XmlDouble
          SpecificHeatCapacityEND
          {$$ = $4;}
        ;

y_Specification_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | SpecificationSTART ENDITEM {yyReadData = 1;} y_XmlToken
          SpecificationEND
          {$$ = $4;}
        ;

y_SpecifiedDecimalType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new SpecifiedDecimalType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new SpecifiedDecimalType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SpecifiedDecimalType attributes");
             }
           delete $1;
          }
        ;

y_SpeedAbsoluteLinearity_MeasuredSpeedValueType :
          SpeedAbsoluteLinearitySTART y_MeasuredSpeedValueType
          SpeedAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_SpeedCharacteri_1068_SpeedCharacteri_1068_Type :
          y_SpeedCharacteri_1068_Type
          {$$ = $1;}
        ;

y_SpeedCharacteri_1068_Type :
          y_SpeedCharacteri_1068_TypeChoicePair
          {$$ = new SpeedCharacteri_1068_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SpeedCharacteri_1068_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new SpeedCharacteri_1068_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SpeedCharacteri_1068_TypeType = SpeedCharacteri_1068_TypeChoicePair::NonToleranceE;
           $$->SpeedCharacteri_1068_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_SpeedToleranceType
          {$$ = new SpeedCharacteri_1068_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SpeedCharacteri_1068_TypeType = SpeedCharacteri_1068_TypeChoicePair::ToleranceE;
           $$->SpeedCharacteri_1068_TypeValue.Tolerance = $1;
          }
        ;

y_SpeedCriterion_CriterionSpeedType_0 :
          /* empty */
          {$$ = 0;}
        | SpeedCriterionSTART y_CriterionSpeedType SpeedCriterionEND
          {$$ = $2;
           $$->printElement = "SpeedCriterion";
          }
        ;

y_SpeedLimit_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | SpeedLimitSTART y_SpeedValueType SpeedLimitEND
          {$$ = $2;}
        ;

y_SpeedMeasurement_MeasuredSpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | SpeedMeasurementSTART y_MeasuredSpeedValueType
          SpeedMeasurementEND
          {$$ = $2;}
        ;

y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0 :
          /* empty */
          {$$ = 0;}
        | SpeedStatsSummariesSTART y_SummariesStatisticsSpeedType
          SpeedStatsSummariesEND
          {$$ = $2;}
        ;

y_SpeedStatsSummary_SummaryStatisticsSpeedType :
          SpeedStatsSummarySTART y_SummaryStatisticsSpeedType
          SpeedStatsSummaryEND
          {$$ = $2;
           $$->printElement = "SpeedStatsSummary";
          }
        ;

y_SpeedToleranceT_1022_SpeedToleranceT_1022_Type :
          y_SpeedToleranceT_1022_Type
          {$$ = $1;}
        ;

y_SpeedToleranceT_1022_Type :
          y_SpeedToleranceT_1022_TypeChoicePair
          {$$ = new SpeedToleranceT_1022_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SpeedToleranceT_1022_TypeChoicePair :
          y_MinValue_SpeedValueType
          {$$ = new SpeedToleranceT_1022_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SpeedToleranceT_1022_TypeType = SpeedToleranceT_1022_TypeChoicePair::MinValueE;
           $$->SpeedToleranceT_1022_TypeValue.MinValue = $1;
          }
        | y_SpeedToleranceT_1038_SpeedToleranceT_1038_Type
          {$$ = new SpeedToleranceT_1022_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SpeedToleranceT_1022_TypeType = SpeedToleranceT_1022_TypeChoicePair::SpeedToleranceT_1038E;
           $$->SpeedToleranceT_1022_TypeValue.SpeedToleranceT_1038 = $1;
          }
        ;

y_SpeedToleranceT_1038_SpeedToleranceT_1038_Type :
          y_SpeedToleranceT_1038_Type
          {$$ = $1;}
        ;

y_SpeedToleranceT_1038_Type :
          y_MaxValue_SpeedValueType y_MinValue_SpeedValueType_0
          {$$ = new SpeedToleranceT_1038_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SpeedToleranceType :
          ENDITEM y_SpeedToleranceT_1022_SpeedToleranceT_1022_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new SpeedToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SpeedUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new SpeedUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SpeedUnit_SpeedUnitType :
          SpeedUnitSTART y_SpeedUnitType SpeedUnitEND
          {$$ = $2;}
        ;

y_SpeedUnit_SpeedUnitType_0 :
          /* empty */
          {$$ = 0;}
        | SpeedUnitSTART y_SpeedUnitType SpeedUnitEND
          {$$ = $2;}
        ;

y_SpeedValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new SpeedValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new SpeedValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SpeedValueType attributes");
             }
           delete $1;
          }
        ;

y_Sphere23CoreType :
          ENDITEM y_Diameter_XmlDouble y_Location_PointSimpleType
          y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType
          {$$ = new Sphere23CoreType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Diameter_XmlDouble
          y_Location_PointSimpleType
          y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType
          {$$ = new Sphere23CoreType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Sphere23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Sphere23Core_Sphere23CoreType :
          Sphere23CoreSTART y_Sphere23CoreType Sphere23CoreEND
          {$$ = $2;
           $$->printElement = "Sphere23Core";
          }
        ;

y_Sphere23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Sphere23Core_Sphere23CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Sphere23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Sphere23Type attributes");
             }
           delete $1;
          }
        ;

y_Sphere23_Sphere23Type :
          Sphere23START y_Sphere23Type Sphere23END
          {$$ = $2;
           $$->printElement = "Sphere23";
          }
        ;

y_SphereBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_4_u_Check
          {$$ = new SphereBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphereBestFitType attributes");
             }
           delete $1;
          }
        ;

y_SphereCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new SphereCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SphereCheckedFeatureType :
          ENDITEM y_CheckDetails_SphereCheckedType_0
          {$$ = new SphereCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphereCheckedType :
          ENDITEM y_SphereCheckedTypeChoicePair
          {$$ = new SphereCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphereCheckedTypeChoicePair :
          y_Constructed_SphereConstructionMethodType
          {$$ = new SphereCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereCheckedTypeType = SphereCheckedTypeChoicePair::ConstructedE;
           $$->SphereCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new SphereCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereCheckedTypeType = SphereCheckedTypeChoicePair::MeasuredE;
           $$->SphereCheckedTypeValue.Measured = $1;
          }
        ;

y_SphereConstructionMethodType :
          ENDITEM y_SphereConstructionMethodTypeChoicePair
          {$$ = new SphereConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphereConstructionMethodTypeChoicePair :
          y_BestFit_SphereBestFitType
          {$$ = new SphereConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereConstructionMethodTypeType = SphereConstructionMethodTypeChoicePair::BestFitE;
           $$->SphereConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_SphereCastType
          {$$ = new SphereConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereConstructionMethodTypeType = SphereConstructionMethodTypeChoicePair::CastE;
           $$->SphereConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_SphereCopyType
          {$$ = new SphereConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereConstructionMethodTypeType = SphereConstructionMethodTypeChoicePair::CopyE;
           $$->SphereConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_SphereFromScanType
          {$$ = new SphereConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereConstructionMethodTypeType = SphereConstructionMethodTypeChoicePair::FromScanE;
           $$->SphereConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Recompensated_SphereRecompType
          {$$ = new SphereConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereConstructionMethodTypeType = SphereConstructionMethodTypeChoicePair::RecompensatedE;
           $$->SphereConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_SphereTransformType
          {$$ = new SphereConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereConstructionMethodTypeType = SphereConstructionMethodTypeChoicePair::TransformE;
           $$->SphereConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_SphereCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseSphere_BaseFeatureType
          {$$ = new SphereCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SphereFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType
          {$$ = new SphereFeatureDefinitionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphereFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SphereFeatureDefinition_SphereFeatureDefinitionType :
          SphereFeatureDefinitionSTART y_SphereFeatureDefinitionType
          SphereFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "SphereFeatureDefinition";
          }
        ;

y_SphereFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_SphereMeasurementDeterminationType
          {$$ = new SphereFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphereFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_SphereFeatureItem_SphereFeatureItemType :
          SphereFeatureItemSTART y_SphereFeatureItemType
          SphereFeatureItemEND
          {$$ = $2;
           $$->printElement = "SphereFeatureItem";
          }
        ;

y_SphereFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0
          y_Diameter_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_LatitudeLongitudeSweepMeasurementRange_OrientedLatitudeLongitudeSweepType_0
          y_LatitudeLongitudeSweepFull_OrientedLatitudeLongitudeSweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new SphereFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphereFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SphereFeatureMeasurement_SphereFeatureMeasurementType :
          SphereFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new SphereFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "SphereFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad SphereFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | SphereFeatureMeasurementSTART y_SphereFeatureMeasurementType
          SphereFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "SphereFeatureMeasurement";
          }
        ;

y_SphereFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Location_PointType
          y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType_0
          y_Constructed_SphereConstructionMethodType_0
          {$$ = new SphereFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphereFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_SphereFeatureNominal_SphereFeatureNominalType :
          SphereFeatureNominalSTART y_SphereFeatureNominalType
          SphereFeatureNominalEND
          {$$ = $2;
           $$->printElement = "SphereFeatureNominal";
          }
        ;

y_SphereFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          y_Vector_UnitVectorType_0
          {$$ = new SphereFromScanType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_SphereMeasurementDeterminationType :
          ENDITEM y_SphereMeasurementDeterminationTypeChoicePair
          {$$ = new SphereMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphereMeasurementDeterminationTypeChoicePair :
          y_Checked_SphereCheckedFeatureType
          {$$ = new SphereMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereMeasurementDeterminationTypeType = SphereMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->SphereMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new SphereMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphereMeasurementDeterminationTypeType = SphereMeasurementDeterminationTypeChoicePair::SetE;
           $$->SphereMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_SpherePointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new SpherePointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SpherePointSamplingStrategyEnumType value");
          }
        ;

y_SpherePointSamplingStrategyType :
          ENDITEM y_SpherePointSamplingStrategyTypeChoicePair
          {$$ = new SpherePointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SpherePointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_SpherePointSamplingStrategyEnumType
          {$$ = new SpherePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SpherePointSamplingStrategyTypeType = SpherePointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->SpherePointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new SpherePointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SpherePointSamplingStrategyTypeType = SpherePointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->SpherePointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_SphereRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new SphereRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SphereTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseSphere_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new SphereTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SphereType :
          ENDITEM y_CenterPoint_PointType y_Diameter_LinearValueType
          {$$ = new SphereType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Sphere_SphereType :
          SphereSTART y_SphereType SphereEND
          {$$ = $2;}
        ;

y_SphericalDiameterCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new SphericalDiameterCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalDiameterCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SphericalDiameterCharacteristicDefinition_SphericalDiameterCharacteristicDefinitionType :
          SphericalDiameterCharacteristicDefinitionSTART
          y_SphericalDiameterCharacteristicDefinitionType
          SphericalDiameterCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SphericalDiameterCharacteristicDefinition";
          }
        ;

y_SphericalDiameterCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SphericalDiameterCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalDiameterCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SphericalDiameterCharacteristicItem_SphericalDiameterCharacteristicItemType :
          SphericalDiameterCharacteristicItemSTART
          y_SphericalDiameterCharacteristicItemType
          SphericalDiameterCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SphericalDiameterCharacteristicItem";
          }
        ;

y_SphericalDiameterCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new SphericalDiameterCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalDiameterCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SphericalDiameterCharacteristicMeasurement_SphericalDiameterCharacteristicMeasurementType :
          SphericalDiameterCharacteristicMeasurementSTART
          y_SphericalDiameterCharacteristicMeasurementType
          SphericalDiameterCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SphericalDiameterCharacteristicMeasurement";
          }
        ;

y_SphericalDiameterCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new SphericalDiameterCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalDiameterCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SphericalDiameterCharacteristicNominal_SphericalDiameterCharacteristicNominalType :
          SphericalDiameterCharacteristicNominalSTART
          y_SphericalDiameterCharacteristicNominalType
          SphericalDiameterCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SphericalDiameterCharacteristicNominal";
          }
        ;

y_SphericalDiameterCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new SphericalDiameterCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_SphericalDiameterCharacteristicStats_SphericalDiameterCharacteristicStatsEvalType :
          SphericalDiameterCharacteristicStatsSTART
          y_SphericalDiameterCharacteristicStatsEvalType
          SphericalDiameterCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SphericalDiameterCharacteristicStats";
          }
        ;

y_SphericalRadiusCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new SphericalRadiusCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalRadiusCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SphericalRadiusCharacteristicDefinition_SphericalRadiusCharacteristicDefinitionType :
          SphericalRadiusCharacteristicDefinitionSTART
          y_SphericalRadiusCharacteristicDefinitionType
          SphericalRadiusCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SphericalRadiusCharacteristicDefinition";
          }
        ;

y_SphericalRadiusCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SphericalRadiusCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalRadiusCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SphericalRadiusCharacteristicItem_SphericalRadiusCharacteristicItemType :
          SphericalRadiusCharacteristicItemSTART
          y_SphericalRadiusCharacteristicItemType
          SphericalRadiusCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SphericalRadiusCharacteristicItem";
          }
        ;

y_SphericalRadiusCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new SphericalRadiusCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalRadiusCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SphericalRadiusCharacteristicMeasurement_SphericalRadiusCharacteristicMeasurementType :
          SphericalRadiusCharacteristicMeasurementSTART
          y_SphericalRadiusCharacteristicMeasurementType
          SphericalRadiusCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SphericalRadiusCharacteristicMeasurement";
          }
        ;

y_SphericalRadiusCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new SphericalRadiusCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalRadiusCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SphericalRadiusCharacteristicNominal_SphericalRadiusCharacteristicNominalType :
          SphericalRadiusCharacteristicNominalSTART
          y_SphericalRadiusCharacteristicNominalType
          SphericalRadiusCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SphericalRadiusCharacteristicNominal";
          }
        ;

y_SphericalRadiusCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new SphericalRadiusCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_SphericalRadiusCharacteristicStats_SphericalRadiusCharacteristicStatsEvalType :
          SphericalRadiusCharacteristicStatsSTART
          y_SphericalRadiusCharacteristicStatsEvalType
          SphericalRadiusCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SphericalRadiusCharacteristicStats";
          }
        ;

y_SphericalResolu_1242_SphericalResolu_1242_Type :
          y_SphericalResolu_1242_Type
          {$$ = $1;}
        ;

y_SphericalResolu_1242_Type :
          y_SphericalResolu_1242_TypeChoicePair
          {$$ = new SphericalResolu_1242_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SphericalResolu_1242_TypeChoicePair :
          y_RAPResolution_RAPZResolutionType
          {$$ = new SphericalResolu_1242_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalResolu_1242_TypeType = SphericalResolu_1242_TypeChoicePair::RAPResolutionE;
           $$->SphericalResolu_1242_TypeValue.RAPResolution = $1;
          }
        | y_SphericalResolu_1245_SphericalResolu_1245_Type
          {$$ = new SphericalResolu_1242_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalResolu_1242_TypeType = SphericalResolu_1242_TypeChoicePair::SphericalResolu_1245E;
           $$->SphericalResolu_1242_TypeValue.SphericalResolu_1245 = $1;
          }
        ;

y_SphericalResolu_1245_SphericalResolu_1245_Type :
          y_SphericalResolu_1245_Type
          {$$ = $1;}
        ;

y_SphericalResolu_1245_Type :
          y_CombinedSphericalResolution_CombinedSphericalResolutionType
          y_RAPZResolution_RAPZResolutionType
          {$$ = new SphericalResolu_1245_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericalResolutionType :
          ENDITEM y_SphericalResolu_1242_SphericalResolu_1242_Type
          {$$ = new SphericalResolutionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericalResolution_SphericalResolutionType :
          SphericalResolutionSTART y_SphericalResolutionType
          SphericalResolutionEND
          {$$ = $2;
           $$->printElement = "SphericalResolution";
          }
        ;

y_SphericalSegmentBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_4_u_Check
          {$$ = new SphericalSegmentBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalSegmentBestFitType attributes");
             }
           delete $1;
          }
        ;

y_SphericalSegmentCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new SphericalSegmentCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SphericalSegmentCheckedFeatureType :
          ENDITEM y_CheckDetails_SphericalSegmentCheckedType_0
          {$$ = new SphericalSegmentCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericalSegmentCheckedType :
          ENDITEM y_SphericalSegmentCheckedTypeChoicePair
          {$$ = new SphericalSegmentCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericalSegmentCheckedTypeChoicePair :
          y_Constructed_SphericalSegmentConstructionMethodType
          {$$ = new SphericalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentCheckedTypeType = SphericalSegmentCheckedTypeChoicePair::ConstructedE;
           $$->SphericalSegmentCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new SphericalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentCheckedTypeType = SphericalSegmentCheckedTypeChoicePair::MeasuredE;
           $$->SphericalSegmentCheckedTypeValue.Measured = $1;
          }
        ;

y_SphericalSegmentConstructionMethodType :
          ENDITEM y_SphericalSegmentConstructionMethodTypeChoicePair
          {$$ = new SphericalSegmentConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericalSegmentConstructionMethodTypeChoicePair :
          y_BestFit_SphericalSegmentBestFitType
          {$$ = new SphericalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentConstructionMethodTypeType = SphericalSegmentConstructionMethodTypeChoicePair::BestFitE;
           $$->SphericalSegmentConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_SphericalSegmentCastType
          {$$ = new SphericalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentConstructionMethodTypeType = SphericalSegmentConstructionMethodTypeChoicePair::CastE;
           $$->SphericalSegmentConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_SphericalSegmentCopyType
          {$$ = new SphericalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentConstructionMethodTypeType = SphericalSegmentConstructionMethodTypeChoicePair::CopyE;
           $$->SphericalSegmentConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_SphericalSegmentRecompType
          {$$ = new SphericalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentConstructionMethodTypeType = SphericalSegmentConstructionMethodTypeChoicePair::RecompensatedE;
           $$->SphericalSegmentConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_SphericalSegmentTransformType
          {$$ = new SphericalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentConstructionMethodTypeType = SphericalSegmentConstructionMethodTypeChoicePair::TransformE;
           $$->SphericalSegmentConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_SphericalSegmentCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseSphericalSegment_BaseFeatureType
          {$$ = new SphericalSegmentCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SphericalSegmentFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Diameter_LinearValueType
          {$$ = new SphericalSegmentFeatureDefinitionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalSegmentFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SphericalSegmentFeatureDefinition_SphericalSegmentFeatureDefinitionType :
          SphericalSegmentFeatureDefinitionSTART
          y_SphericalSegmentFeatureDefinitionType
          SphericalSegmentFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "SphericalSegmentFeatureDefinition";
          }
        ;

y_SphericalSegmentFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_SphericalSegmentMeasurementDeterminationType
          {$$ = new SphericalSegmentFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalSegmentFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_SphericalSegmentFeatureItem_SphericalSegmentFeatureItemType :
          SphericalSegmentFeatureItemSTART
          y_SphericalSegmentFeatureItemType SphericalSegmentFeatureItemEND
          {$$ = $2;
           $$->printElement = "SphericalSegmentFeatureItem";
          }
        ;

y_SphericalSegmentFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0
          y_Diameter_MeasuredLinearValueType_0
          y_DiameterMin_MeasuredLinearValueType_0
          y_DiameterMax_MeasuredLinearValueType_0
          y_LatitudeLongitudeSweepMeasurementRange_OrientedLatitudeLongitudeSweepType_0
          y_LatitudeLongitudeSweepFull_OrientedLatitudeLongitudeSweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new SphericalSegmentFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalSegmentFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SphericalSegmentFeatureMeasurement_SphericalSegmentFeatureMeasurementType :
          SphericalSegmentFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new SphericalSegmentFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "SphericalSegmentFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad SphericalSegmentFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | SphericalSegmentFeatureMeasurementSTART
          y_SphericalSegmentFeatureMeasurementType
          SphericalSegmentFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "SphericalSegmentFeatureMeasurement";
          }
        ;

y_SphericalSegmentFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Location_PointType
          y_LatitudeLongitudeSweep_OrientedLatitudeLongitudeSweepType
          y_Constructed_SphericalSegmentConstructionMethodType_0
          {$$ = new SphericalSegmentFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericalSegmentFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_SphericalSegmentFeatureNominal_SphericalSegmentFeatureNominalType :
          SphericalSegmentFeatureNominalSTART
          y_SphericalSegmentFeatureNominalType
          SphericalSegmentFeatureNominalEND
          {$$ = $2;
           $$->printElement = "SphericalSegmentFeatureNominal";
          }
        ;

y_SphericalSegmentMeasurementDeterminationType :
          ENDITEM y_SphericalSegmentMeasurementDeterminationTypeChoicePair
          {$$ = new SphericalSegmentMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericalSegmentMeasurementDeterminationTypeChoicePair :
          y_Checked_SphericalSegmentCheckedFeatureType
          {$$ = new SphericalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentMeasurementDeterminationTypeType = SphericalSegmentMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->SphericalSegmentMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new SphericalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentMeasurementDeterminationTypeType = SphericalSegmentMeasurementDeterminationTypeChoicePair::SetE;
           $$->SphericalSegmentMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_SphericalSegmentPointSamplingStrategyType :
          ENDITEM y_SphericalSegmentPointSamplingStrategyTypeChoicePair
          {$$ = new SphericalSegmentPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericalSegmentPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_SpherePointSamplingStrategyEnumType
          {$$ = new SphericalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentPointSamplingStrategyTypeType = SphericalSegmentPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->SphericalSegmentPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new SphericalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SphericalSegmentPointSamplingStrategyTypeType = SphericalSegmentPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->SphericalSegmentPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_SphericalSegmentRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new SphericalSegmentRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SphericalSegmentTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseSphericalSegment_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new SphericalSegmentTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SphericalWorkingVolumeType :
          ENDITEM y_RadialAxisLength_LinearValueType
          y_MinAzimuthalAxisAngle_AngularValueType
          y_MaxAzimuthalAxisAngle_AngularValueType
          y_MinPolarAxisAngle_AngularValueType
          y_MaxPolarAxisAngle_AngularValueType
          {$$ = new SphericalWorkingVolumeType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_SphericalWorkingVolume_SphericalWorkingVolumeType :
          SphericalWorkingVolumeSTART y_SphericalWorkingVolumeType
          SphericalWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "SphericalWorkingVolume";
          }
        ;

y_SphericalZone_ConcentricitySphericalZoneType :
          SphericalZoneSTART y_ConcentricitySphericalZoneType ENDWHOLEITEM
          {$$ = $2;}
        ;

y_SphericalZone_PositionSphericalZoneType :
          SphericalZoneSTART ENDWHOLEITEM
          {$$ = new PositionSphericalZoneType();
           yyUnrefMap[$$] = $$;
          }
        | SphericalZoneSTART y_PositionSphericalZoneType SphericalZoneEND
          {$$ = $2;}
        ;

y_SphericityChara_1069_SphericityChara_1069_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_SphericityChara_1069_Type
          {$$ = $1;}
        ;

y_SphericityChara_1069_Type :
          y_ZoneRadii_MeasuredZoneRadiiType y_ZonePoint_MeasuredPointType
          {$$ = new SphericityChara_1069_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SphericityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          {$$ = new SphericityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SphericityCharacteristicDefinition_SphericityCharacteristicDefinitionType :
          SphericityCharacteristicDefinitionSTART
          y_SphericityCharacteristicDefinitionType
          SphericityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SphericityCharacteristicDefinition";
          }
        ;

y_SphericityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SphericityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SphericityCharacteristicItem_SphericityCharacteristicItemType :
          SphericityCharacteristicItemSTART
          y_SphericityCharacteristicItemType
          SphericityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SphericityCharacteristicItem";
          }
        ;

y_SphericityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_SphericityChara_1069_SphericityChara_1069_Type_0
          {$$ = new SphericityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SphericityCharacteristicMeasurement_SphericityCharacteristicMeasurementType :
          SphericityCharacteristicMeasurementSTART
          y_SphericityCharacteristicMeasurementType
          SphericityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SphericityCharacteristicMeasurement";
          }
        ;

y_SphericityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new SphericityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SphericityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SphericityCharacteristicNominal_SphericityCharacteristicNominalType :
          SphericityCharacteristicNominalSTART
          y_SphericityCharacteristicNominalType
          SphericityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SphericityCharacteristicNominal";
          }
        ;

y_SphericityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          {$$ = new SphericityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_SphericityCharacteristicStats_SphericityCharacteristicStatsEvalType :
          SphericityCharacteristicStatsSTART
          y_SphericityCharacteristicStatsEvalType
          SphericityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SphericityCharacteristicStats";
          }
        ;

y_Spline12CoreType :
          y_LiztAttributePair ENDITEM y_Knots_ArrayDoubleType
          y_Orders_ArrayNaturalType y_Coefficients_ArrayPoint2dType
          {$$ = new Spline12CoreType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Spline12CoreType attributes");
             }
           delete $1;
          }
        ;

y_Spline12Core_Spline12CoreType :
          Spline12CoreSTART y_Spline12CoreType Spline12CoreEND
          {$$ = $2;
           $$->printElement = "Spline12Core";
          }
        ;

y_Spline12Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Spline12Core_Spline12CoreType
          {$$ = new Spline12Type($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Spline12Type attributes");
             }
           delete $1;
          }
        ;

y_Spline12_Spline12Type :
          Spline12START y_Spline12Type Spline12END
          {$$ = $2;
           $$->printElement = "Spline12";
          }
        ;

y_Spline13CoreType :
          y_LiztAttributePair ENDITEM y_Knots_ArrayDoubleType
          y_Orders_ArrayNaturalType y_Coefficients_ArrayPointType
          {$$ = new Spline13CoreType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Spline13CoreType attributes");
             }
           delete $1;
          }
        ;

y_Spline13Core_Spline13CoreType :
          Spline13CoreSTART y_Spline13CoreType Spline13CoreEND
          {$$ = $2;
           $$->printElement = "Spline13Core";
          }
        ;

y_Spline13Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Spline13Core_Spline13CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Spline13Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Spline13Type attributes");
             }
           delete $1;
          }
        ;

y_Spline13_Spline13Type :
          Spline13START y_Spline13Type Spline13END
          {$$ = $2;
           $$->printElement = "Spline13";
          }
        ;

y_Spline23CoreType :
          ENDITEM y_KnotsU_ArrayDoubleType y_KnotsV_ArrayDoubleType
          y_OrdersU_ArrayNaturalType y_OrdersV_ArrayNaturalType
          y_Coefficients_ArrayPointType
          {$$ = new Spline23CoreType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        | y_LiztAttributePair ENDITEM y_KnotsU_ArrayDoubleType
          y_KnotsV_ArrayDoubleType y_OrdersU_ArrayNaturalType
          y_OrdersV_ArrayNaturalType y_Coefficients_ArrayPointType
          {$$ = new Spline23CoreType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Spline23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Spline23Core_Spline23CoreType :
          Spline23CoreSTART y_Spline23CoreType Spline23CoreEND
          {$$ = $2;
           $$->printElement = "Spline23Core";
          }
        ;

y_Spline23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Spline23Core_Spline23CoreType
          y_Transform_ElementReferenceType_0
          {$$ = new Spline23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Spline23Type attributes");
             }
           delete $1;
          }
        ;

y_Spline23_Spline23Type :
          Spline23START y_Spline23Type Spline23END
          {$$ = $2;
           $$->printElement = "Spline23";
          }
        ;

y_SpotDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | SpotDiameterSTART y_LinearValueType SpotDiameterEND
          {$$ = $2;}
        ;

y_SquareCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new SquareCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SquareCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SquareCharacteristicDefinition_SquareCharacteristicDefinitionType :
          SquareCharacteristicDefinitionSTART
          y_SquareCharacteristicDefinitionType
          SquareCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SquareCharacteristicDefinition";
          }
        ;

y_SquareCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SquareCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SquareCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SquareCharacteristicItem_SquareCharacteristicItemType :
          SquareCharacteristicItemSTART y_SquareCharacteristicItemType
          SquareCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SquareCharacteristicItem";
          }
        ;

y_SquareCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new SquareCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SquareCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SquareCharacteristicMeasurement_SquareCharacteristicMeasurementType :
          SquareCharacteristicMeasurementSTART
          y_SquareCharacteristicMeasurementType
          SquareCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SquareCharacteristicMeasurement";
          }
        ;

y_SquareCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new SquareCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SquareCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SquareCharacteristicNominal_SquareCharacteristicNominalType :
          SquareCharacteristicNominalSTART
          y_SquareCharacteristicNominalType SquareCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SquareCharacteristicNominal";
          }
        ;

y_SquareCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new SquareCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_SquareCharacteristicStats_SquareCharacteristicStatsEvalType :
          SquareCharacteristicStatsSTART
          y_SquareCharacteristicStatsEvalType SquareCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SquareCharacteristicStats";
          }
        ;

y_StabilityStudyPlanType :
          y_LiztAttributePair ENDITEM y_Version_VersionType_0
          y_Attributes_AttributesType_0
          y_StatisticalStud_1207_StatisticalStud_1207_Type_0
          y_StatisticalStud_1208_StatisticalStud_1208_Type_0
          y_LiztStatsValuesSummarys_SummaryStatsValuesListType_0_u
          y_PreInspectionTraceability_PreInspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_PlanId_QIFReferenceType_0
          y_StatisticalStud_1209_StatisticalStud_1209_Type_0
          y_CorrectiveActionPlanId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_SampleSize_XmlPositiveInteger
          y_SampleFrequency_XmlPositiveInteger
          y_SamplingInterval_SamplingIntervalType
          {$$ = new StabilityStudyPlanType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StabilityStudyPlanType attributes");
             }
           delete $1;
          }
        ;

y_StabilityStudyPlan_StabilityStudyPlanType :
          StabilityStudyPlanSTART y_StabilityStudyPlanType
          StabilityStudyPlanEND
          {$$ = $2;
           $$->printElement = "StabilityStudyPlan";
          }
        ;

y_StabilityStudyResultsType :
          y_LiztAttributePair ENDITEM
          y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0
          y_Attributes_AttributesType_0 y_Status_StatsEvalStatusType
          y_StatisticalStud_1210_StatisticalStud_1210_Type_0
          y_StudyIssues_StudyIssuesType_0
          y_InspectionTraceability_InspectionTraceabilityType_0
          y_Name_XmlToken_0 y_Description_XmlString_0
          y_StudyId_QIFReferenceType_0
          y_StatisticalStud_1211_StatisticalStud_1211_Type_0
          y_AverageFeatures_AverageFeaturesType_0
          y_CharacteristicsStats_CharacteristicsStatsType_0
          y_LinearStatsSummaries_SummariesStatisticsLinearType_0
          y_AngularStatsSummaries_SummariesStatisticsAngularType_0
          y_AreaStatsSummaries_SummariesStatisticsAreaType_0
          y_ForceStatsSummaries_SummariesStatisticsForceType_0
          y_MassStatsSummaries_SummariesStatisticsMassType_0
          y_PressureStatsSummaries_SummariesStatisticsPressureType_0
          y_SpeedStatsSummaries_SummariesStatisticsSpeedType_0
          y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0
          y_TimeStatsSummaries_SummariesStatisticsTimeType_0
          y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0
          y_StatsSummaries_SummariesStatisticsType_0
          y_SampleSize_XmlPositiveInteger
          y_MeasurementDeviceIds_ArrayReferenceType_0
          {$$ = new StabilityStudyResultsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StabilityStudyResultsType attributes");
             }
           delete $1;
          }
        ;

y_StabilityStudyResults_StabilityStudyResultsType :
          StabilityStudyResultsSTART y_StabilityStudyResultsType
          StabilityStudyResultsEND
          {$$ = $2;
           $$->printElement = "StabilityStudyResults";
          }
        ;

y_StadiaBaseConstant_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | StadiaBaseConstantSTART y_UserDefinedUnitValueType
          StadiaBaseConstantEND
          {$$ = $2;}
        ;

y_StadiaRateConstant_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | StadiaRateConstantSTART y_UserDefinedUnitValueType
          StadiaRateConstantEND
          {$$ = $2;}
        ;

y_StageMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | StageMaterialSTART ENDITEM {yyReadData = 1;} y_XmlString
          StageMaterialEND
          {$$ = $4;}
        ;

y_StageSwivelingAngle_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | StageSwivelingAngleSTART y_AngularValueType
          StageSwivelingAngleEND
          {$$ = $2;}
        ;

y_Staggered_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | StaggeredSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          StaggeredEND
          {$$ = $4;}
        ;

y_StandOffDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | StandOffDistanceSTART y_LinearValueType StandOffDistanceEND
          {$$ = $2;}
        ;

y_StandardDeviation_StatsMeasuredDecimalType :
          StandardDeviationSTART y_StatsMeasuredDecimalType
          StandardDeviationEND
          {$$ = $2;
           $$->printElement = "StandardDeviation";
          }
        ;

y_StandardDeviation_XmlDecimal :
          StandardDeviationSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          StandardDeviationEND
          {$$ = $4;}
        ;

y_StandardId_QIFReferenceType :
          StandardIdSTART y_QIFReferenceType StandardIdEND
          {$$ = $2;}
        ;

y_StandardName_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | StandardNameSTART ENDITEM {yyReadData = 1;} y_XmlString
          StandardNameEND
          {$$ = $4;}
        ;

y_StandardType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Organization_StandardsOrganizationType y_Designator_XmlToken
          y_Year_XmlString_0 y_Title_XmlString_0 y_Description_XmlString_0
          y_URI_XmlAnyURI_0 y_ISBN_XmlNMTOKEN_0
          y_ReferencedStandardIds_ArrayReferenceType_0
          {$$ = new StandardType($3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StandardType attributes");
             }
           delete $1;
          }
        ;

y_Standard_StandardType :
          StandardSTART y_StandardType StandardEND
          {$$ = $2;}
        ;

y_StandardsDefinitions_StandardsType_0 :
          /* empty */
          {$$ = 0;}
        | StandardsDefinitionsSTART y_StandardsType StandardsDefinitionsEND
          {$$ = $2;}
        ;

y_StandardsOrganizationEnumType :
          DATASTRING
          {$$ = new StandardsOrganizationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad StandardsOrganizationEnumType value");
          }
        ;

y_StandardsOrganizationEnum_StandardsOrganizationEnumType :
          StandardsOrganizationEnumSTART ENDITEM {yyReadData = 1;}
          y_StandardsOrganizationEnumType StandardsOrganizationEnumEND
          {$$ = $4;}
        ;

y_StandardsOrganizationType :
          ENDITEM y_StandardsOrganizationTypeChoicePair
          {$$ = new StandardsOrganizationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_StandardsOrganizationTypeChoicePair :
          y_OtherStandardsOrganization_XmlString
          {$$ = new StandardsOrganizationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StandardsOrganizationTypeType = StandardsOrganizationTypeChoicePair::OtherStandardsOrganizationE;
           $$->StandardsOrganizationTypeValue.OtherStandardsOrganization = $1;
          }
        | y_StandardsOrganizationEnum_StandardsOrganizationEnumType
          {$$ = new StandardsOrganizationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StandardsOrganizationTypeType = StandardsOrganizationTypeChoicePair::StandardsOrganizationEnumE;
           $$->StandardsOrganizationTypeValue.StandardsOrganizationEnum = $1;
          }
        ;

y_StandardsType :
          y_LiztAttributePair ENDITEM y_LiztStandard_StandardType_1_u
          {$$ = new StandardsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StandardsType attributes");
             }
           delete $1;
          }
        ;

y_StartDirection_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | StartDirectionSTART y_UnitVectorType StartDirectionEND
          {$$ = $2;}
        ;

y_StartPoint_MeasuredPointType :
          StartPointSTART y_MeasuredPointType StartPointEND
          {$$ = $2;}
        ;

y_StartPoint_Point2dSimpleType :
          StartPointSTART y_Point2dSimpleType StartPointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_StartPoint_PointSimpleType :
          StartPointSTART y_PointSimpleType StartPointEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_StartPoint_PointType :
          StartPointSTART y_PointType StartPointEND
          {$$ = $2;}
        ;

y_Start_NaturalType :
          StartSTART ENDITEM {yyReadData = 1;} y_NaturalType StartEND
          {$$ = $4;}
        ;

y_StatisticalCharacteristic_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | StatisticalCharacteristicSTART ENDITEM {yyReadData = 1;}
          y_XmlBoolean StatisticalCharacteristicEND
          {$$ = $4;}
        ;

y_StatisticalStud_1207_StatisticalStud_1207_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_StatisticalStud_1207_Type
          {$$ = $1;}
        ;

y_StatisticalStud_1207_Type :
          y_FeatureItemIds_ArrayReferenceType
          y_CalculateAverageFeatures_XmlBoolean_0
          {$$ = new StatisticalStud_1207_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_StatisticalStud_1208_StatisticalStud_1208_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_StatisticalStud_1208_Type
          {$$ = $1;}
        ;

y_StatisticalStud_1208_Type :
          y_CharacteristicItemIds_ArrayReferenceType
          y_LiztStatsValuesPerChar_ListAccumulatedStatsValuesType_0_u
          y_LiztStatsValuesPerSubgroup_ListSubgroupStatsValuesType_0_u
          {$$ = new StatisticalStud_1208_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_StatisticalStud_1209_StatisticalStud_1209_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_StatisticalStud_1209_Type
          {$$ = $1;}
        ;

y_StatisticalStud_1209_Type :
          y_StatisticalStud_1209_TypeChoicePair
          {$$ = new StatisticalStud_1209_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StatisticalStud_1209_TypeChoicePair :
          y_SoftwareId_QIFReferenceType
          {$$ = new StatisticalStud_1209_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatisticalStud_1209_TypeType = StatisticalStud_1209_TypeChoicePair::SoftwareIdE;
           $$->StatisticalStud_1209_TypeValue.SoftwareId = $1;
          }
        | y_StandardId_QIFReferenceType
          {$$ = new StatisticalStud_1209_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatisticalStud_1209_TypeType = StatisticalStud_1209_TypeChoicePair::StandardIdE;
           $$->StatisticalStud_1209_TypeValue.StandardId = $1;
          }
        ;

y_StatisticalStud_1210_StatisticalStud_1210_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_StatisticalStud_1210_Type
          {$$ = $1;}
        ;

y_StatisticalStud_1210_Type :
          y_StatisticalStud_1210_TypeChoicePair
          {$$ = new StatisticalStud_1210_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StatisticalStud_1210_TypeChoicePair :
          y_SoftwareId_QIFReferenceType
          {$$ = new StatisticalStud_1210_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatisticalStud_1210_TypeType = StatisticalStud_1210_TypeChoicePair::SoftwareIdE;
           $$->StatisticalStud_1210_TypeValue.SoftwareId = $1;
          }
        | y_StandardId_QIFReferenceType
          {$$ = new StatisticalStud_1210_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatisticalStud_1210_TypeType = StatisticalStud_1210_TypeChoicePair::StandardIdE;
           $$->StatisticalStud_1210_TypeValue.StandardId = $1;
          }
        ;

y_StatisticalStud_1211_StatisticalStud_1211_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_StatisticalStud_1211_Type
          {$$ = $1;}
        ;

y_StatisticalStud_1211_Type :
          y_StatisticalStud_1211_TypeChoicePair
          {$$ = new StatisticalStud_1211_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StatisticalStud_1211_TypeChoicePair :
          y_LiztResultsQPIds_ArrayQPIdFullReferenceType_1_u
          {$$ = new StatisticalStud_1211_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatisticalStud_1211_TypeType = StatisticalStud_1211_TypeChoicePair::ResultsQPIdsE;
           $$->StatisticalStud_1211_TypeValue.ResultsQPIds = $1;
          }
        | y_ResultsFiles_ExternalFileReferencesType
          {$$ = new StatisticalStud_1211_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatisticalStud_1211_TypeType = StatisticalStud_1211_TypeChoicePair::ResultsFilesE;
           $$->StatisticalStud_1211_TypeValue.ResultsFiles = $1;
          }
        | y_ResultsIds_ArrayReferenceType
          {$$ = new StatisticalStud_1211_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatisticalStud_1211_TypeType = StatisticalStud_1211_TypeChoicePair::ResultsIdsE;
           $$->StatisticalStud_1211_TypeValue.ResultsIds = $1;
          }
        ;

y_StatisticalStudiesResultsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | StatisticalStudiesResultsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt StatisticalStudiesResultsCountEND
          {$$ = $4;}
        ;

y_StatisticalStudiesResultsType :
          y_LiztAttributePair ENDITEM
          y_LiztStatisticalStudyResults_substituteType_1_u
          {$$ = new StatisticalStudiesResultsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatisticalStudiesResultsType attributes");
             }
           delete $1;
          }
        ;

y_StatisticalStudiesResults_StatisticalStudiesResultsType_0 :
          /* empty */
          {$$ = 0;}
        | StatisticalStudiesResultsSTART y_StatisticalStudiesResultsType
          StatisticalStudiesResultsEND
          {$$ = $2;}
        ;

y_StatisticalStudyPlan_substituteType :
          y_BiasStudyPlan_BiasStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CapabilityStudyPlan_CapabilityStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FirstArticleStudyPlan_FirstArticleStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GageRandRStudyPlan_GageRandRStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearityStudyPlan_LinearityStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ProcessDifferenceStudyPlan_ProcessDifferenceStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ProductionStudyPlan_ProductionStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SimpleStudyPlan_SimpleStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StabilityStudyPlan_StabilityStudyPlanType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StatisticalStudyPlansCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | StatisticalStudyPlansCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt StatisticalStudyPlansCountEND
          {$$ = $4;}
        ;

y_StatisticalStudyPlansType :
          y_LiztAttributePair ENDITEM
          y_LiztStatisticalStudyPlan_substituteType_1_u
          {$$ = new StatisticalStudyPlansType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatisticalStudyPlansType attributes");
             }
           delete $1;
          }
        ;

y_StatisticalStudyPlans_StatisticalStudyPlansType_0 :
          /* empty */
          {$$ = 0;}
        | StatisticalStudyPlansSTART y_StatisticalStudyPlansType
          StatisticalStudyPlansEND
          {$$ = $2;}
        ;

y_StatisticalStudyResults_substituteType :
          y_BiasStudyResults_BiasStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CapabilityStudyResults_CapabilityStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_FirstArticleStudyResults_FirstArticleStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_GageRandRStudyResults_GageRandRStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_LinearityStudyResults_LinearityStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ProcessDifferenceStudyResults_ProcessDifferenceStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ProductionStudyResults_ProductionStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SimpleStudyResults_SimpleStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_StabilityStudyResults_StabilityStudyResultsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StatisticsType :
          ENDITEM y_StatisticalStudyPlans_StatisticalStudyPlansType_0
          y_StatisticalStudiesResults_StatisticalStudiesResultsType_0
          y_CorrectiveActionPlans_CorrectiveActionPlansType_0
          {$$ = new StatisticsType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Statistics_StatisticsType_0 :
          /* empty */
          {$$ = 0;}
        | StatisticsSTART ENDWHOLEITEM
          {$$ = new StatisticsType();
           yyUnrefMap[$$] = $$;
          }
        | StatisticsSTART y_StatisticsType StatisticsEND
          {$$ = $2;}
        ;

y_StatsAngularType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsAngularType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsAngularType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsAngularType attributes");
             }
           delete $1;
          }
        ;

y_StatsAreaType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsAreaType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsAreaType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsAreaType attributes");
             }
           delete $1;
          }
        ;

y_StatsArrayIdType :
          ENDITEM y_Ids_ArrayReferenceType y_Exclusions_ExclusionsIdType_0
          {$$ = new StatsArrayIdType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_StatsEvalStatusEnumType :
          DATASTRING
          {$$ = new StatsEvalStatusEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad StatsEvalStatusEnumType value");
          }
        ;

y_StatsEvalStatusEnum_StatsEvalStatusEnumType :
          StatsEvalStatusEnumSTART ENDITEM {yyReadData = 1;}
          y_StatsEvalStatusEnumType StatsEvalStatusEnumEND
          {$$ = $4;}
        ;

y_StatsEvalStatusType :
          ENDITEM y_StatsEvalStatusTypeChoicePair
          {$$ = new StatsEvalStatusType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_StatsEvalStatusTypeChoicePair :
          y_OtherStatsEvalStatus_XmlString
          {$$ = new StatsEvalStatusTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatsEvalStatusTypeType = StatsEvalStatusTypeChoicePair::OtherStatsEvalStatusE;
           $$->StatsEvalStatusTypeValue.OtherStatsEvalStatus = $1;
          }
        | y_StatsEvalStatusEnum_StatsEvalStatusEnumType
          {$$ = new StatsEvalStatusTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatsEvalStatusTypeType = StatsEvalStatusTypeChoicePair::StatsEvalStatusEnumE;
           $$->StatsEvalStatusTypeValue.StatsEvalStatusEnum = $1;
          }
        ;

y_StatsForceType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsForceType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsForceType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsForceType attributes");
             }
           delete $1;
          }
        ;

y_StatsLinearType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsLinearType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsLinearType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsLinearType attributes");
             }
           delete $1;
          }
        ;

y_StatsMassType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsMassType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsMassType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsMassType attributes");
             }
           delete $1;
          }
        ;

y_StatsMeasuredDecimalType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Value_MeasuredDecimalType
          {$$ = new StatsMeasuredDecimalType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_StatsMeasuredDecimalWithReferenceType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Value_MeasuredDecimalType y_Id_QIFReferenceType_0
          {$$ = new StatsMeasuredDecimalWithReferenceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_StatsNonNegativeIntegerType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Value_XmlNonNegativeInteger
          {$$ = new StatsNonNegativeIntegerType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_StatsNonNegativeIntegerWithReferencesType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Value_XmlNonNegativeInteger y_Ids_ArrayReferenceType_0
          {$$ = new StatsNonNegativeIntegerWithReferencesType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_StatsPassFailType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztCommonStatsValue_substituteType_1_u
          y_LiztPassFailStatsValue_substituteType_1_u
          {$$ = new StatsPassFailType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_StatsPressureType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsPressureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsPressureType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsPressureType attributes");
             }
           delete $1;
          }
        ;

y_StatsSpeedType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsSpeedType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsSpeedType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsSpeedType attributes");
             }
           delete $1;
          }
        ;

y_StatsSummaries_SummariesStatisticsType_0 :
          /* empty */
          {$$ = 0;}
        | StatsSummariesSTART y_SummariesStatisticsType StatsSummariesEND
          {$$ = $2;}
        ;

y_StatsSummary_SummaryStatisticsType :
          StatsSummarySTART y_SummaryStatisticsType StatsSummaryEND
          {$$ = $2;}
        ;

y_StatsTemperatureType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsTemperatureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsTemperatureType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsTemperatureType attributes");
             }
           delete $1;
          }
        ;

y_StatsTimeType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsTimeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsTimeType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsTimeType attributes");
             }
           delete $1;
          }
        ;

y_StatsUserDefinedUnitType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicStatsValue_substituteType_1_u
          {$$ = new StatsUserDefinedUnitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsUserDefinedUnitType attributes");
             }
           delete $1;
          }
        ;

y_StatsValuesEnumType :
          DATASTRING
          {$$ = new StatsValuesEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad StatsValuesEnumType value");
          }
        ;

y_StatsValuesPerChar_ListAccumulatedStatsValuesType :
          StatsValuesPerCharSTART y_ListAccumulatedStatsValuesType
          StatsValuesPerCharEND
          {$$ = $2;
           $$->printElement = "StatsValuesPerChar";
          }
        ;

y_StatsValuesPerSubgroup_ListSubgroupStatsValuesType :
          StatsValuesPerSubgroupSTART y_ListSubgroupStatsValuesType
          StatsValuesPerSubgroupEND
          {$$ = $2;
           $$->printElement = "StatsValuesPerSubgroup";
          }
        ;

y_StatsValuesSummarys_SummaryStatsValuesListType :
          StatsValuesSummarysSTART y_SummaryStatsValuesListType
          StatsValuesSummarysEND
          {$$ = $2;}
        ;

y_StatsValuesType :
          ENDITEM y_Values_ListTokenType y_Exclusions_ExclusionsIndexType_0
          {$$ = new StatsValuesType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_StatsWithRefere_1006_Type
          {$$ = $1;}
        ;

y_StatsWithRefere_1006_Type :
          y_StatsWithRefere_1006_TypeChoicePair
          {$$ = new StatsWithRefere_1006_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StatsWithRefere_1006_TypeChoicePair :
          y_AlgorithmId_QIFReferenceType
          {$$ = new StatsWithRefere_1006_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatsWithRefere_1006_TypeType = StatsWithRefere_1006_TypeChoicePair::AlgorithmIdE;
           $$->StatsWithRefere_1006_TypeValue.AlgorithmId = $1;
          }
        | y_SoftwareId_QIFReferenceType
          {$$ = new StatsWithRefere_1006_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatsWithRefere_1006_TypeType = StatsWithRefere_1006_TypeChoicePair::SoftwareIdE;
           $$->StatsWithRefere_1006_TypeValue.SoftwareId = $1;
          }
        | y_StandardId_QIFReferenceType
          {$$ = new StatsWithRefere_1006_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StatsWithRefere_1006_TypeType = StatsWithRefere_1006_TypeChoicePair::StandardIdE;
           $$->StatsWithRefere_1006_TypeValue.StandardId = $1;
          }
        ;

y_StatsWithTolAngularType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolAngularType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolAngularType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolAngularType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolAreaType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolAreaType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolAreaType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolAreaType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolForceType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolForceType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolForceType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolForceType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolLinearType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolLinearType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolLinearType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolLinearType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolMassType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolMassType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolMassType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolMassType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolPressureType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolPressureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolPressureType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolPressureType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolSpeedType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolSpeedType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolSpeedType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolSpeedType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolTemperatureType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolTemperatureType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolTemperatureType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolTemperatureType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolTimeType :
          ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolTimeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolTimeType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolTimeType attributes");
             }
           delete $1;
          }
        ;

y_StatsWithTolUserDefinedUnitType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_LiztNumericCharacteristicWithTolStatsValue_substituteType_1_u
          {$$ = new StatsWithTolUserDefinedUnitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StatsWithTolUserDefinedUnitType attributes");
             }
           delete $1;
          }
        ;

y_Stats_ListAccumulatedStatsValuesListType :
          StatsSTART y_ListAccumulatedStatsValuesListType StatsEND
          {$$ = $2;}
        ;

y_Stats_ListSubgroupStatsValuesListType :
          StatsSTART y_ListSubgroupStatsValuesListType StatsEND
          {$$ = $2;}
        ;

y_Stats_ListSummaryStatsValuesListType :
          StatsSTART y_ListSummaryStatsValuesListType StatsEND
          {$$ = $2;}
        ;

y_Status_CharacteristicStatusType :
          StatusSTART y_CharacteristicStatusType StatusEND
          {$$ = $2;}
        ;

y_Status_InspectionStatusType :
          StatusSTART y_InspectionStatusType StatusEND
          {$$ = $2;}
        ;

y_Status_StatsEvalStatusType :
          StatusSTART y_StatsEvalStatusType StatusEND
          {$$ = $2;}
        ;

y_StemDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | StemDiameterSTART y_LinearValueType StemDiameterEND
          {$$ = $2;}
        ;

y_StemMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | StemMaterialSTART ENDITEM {yyReadData = 1;} y_XmlString
          StemMaterialEND
          {$$ = $4;}
        ;

y_StepWithPredecessorsType :
          ENDITEM y_Predecessors_PredecessorsType_0
          y_Step_NumberedPlanElementType
          {$$ = new StepWithPredecessorsType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_StepWithPredecessors_StepWithPredecessorsType :
          StepWithPredecessorsSTART y_StepWithPredecessorsType
          StepWithPredecessorsEND
          {$$ = $2;}
        ;

y_Step_NumberedPlanElementType :
          StepSTART y_NumberedPlanElementType StepEND
          {$$ = $2;}
        ;

y_StepsWithPredecessorsType :
          y_LiztAttributePair ENDITEM
          y_LiztStepWithPredecessors_StepWithPredecessorsType_1_u
          {$$ = new StepsWithPredecessorsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StepsWithPredecessorsType attributes");
             }
           delete $1;
          }
        ;

y_StepsWithPredecessors_StepsWithPredecessorsType :
          StepsWithPredecessorsSTART y_StepsWithPredecessorsType
          StepsWithPredecessorsEND
          {$$ = $2;}
        ;

y_Steps_NumberedPlanElementsType :
          StepsSTART y_NumberedPlanElementsType StepsEND
          {$$ = $2;}
        ;

y_Steps_UnnumberedPlanElementsType :
          StepsSTART y_UnnumberedPlanElementsType StepsEND
          {$$ = $2;}
        ;

y_StiffnessType :
          ENDITEM y_XStiffness_UserDefinedUnitValueType_0
          y_YStiffness_UserDefinedUnitValueType_0
          y_ZStiffness_UserDefinedUnitValueType_0
          {$$ = new StiffnessType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Stop_NaturalType :
          StopSTART ENDITEM {yyReadData = 1;} y_NaturalType StopEND
          {$$ = $4;}
        ;

y_StraightnessCha_1070_StraightnessCha_1070_Type :
          y_StraightnessCha_1070_Type
          {$$ = $1;}
        ;

y_StraightnessCha_1070_Type :
          y_StraightnessCha_1070_TypeChoicePair
          {$$ = new StraightnessCha_1070_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StraightnessCha_1070_TypeChoicePair :
          y_StraightnessCha_1087_StraightnessCha_1087_Type
          {$$ = new StraightnessCha_1070_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StraightnessCha_1070_TypeType = StraightnessCha_1070_TypeChoicePair::StraightnessCha_1087E;
           $$->StraightnessCha_1070_TypeValue.StraightnessCha_1087 = $1;
          }
        | y_StraightnessCha_1088_StraightnessCha_1088_Type
          {$$ = new StraightnessCha_1070_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StraightnessCha_1070_TypeType = StraightnessCha_1070_TypeChoicePair::StraightnessCha_1088E;
           $$->StraightnessCha_1070_TypeValue.StraightnessCha_1088 = $1;
          }
        ;

y_StraightnessCha_1087_StraightnessCha_1087_Type :
          y_StraightnessCha_1087_Type
          {$$ = $1;}
        ;

y_StraightnessCha_1087_Type :
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType_0
          {$$ = new StraightnessCha_1087_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_StraightnessCha_1088_StraightnessCha_1088_Type :
          y_StraightnessCha_1088_Type
          {$$ = $1;}
        ;

y_StraightnessCha_1088_Type :
          y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType
          {$$ = new StraightnessCha_1088_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StraightnessCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_StraightnessCha_1070_StraightnessCha_1070_Type
          y_MaterialCondition_MaterialModifierEnumType_0
          y_SizeCharacteristicDefinitionId_QIFReferenceType_0
          y_ZoneShape_StraightnessZoneShapeType
          y_MaximumToleranceValue_LinearValueType_0
          {$$ = new StraightnessCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StraightnessCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_StraightnessCharacteristicDefinition_StraightnessCharacteristicDefinitionType :
          StraightnessCharacteristicDefinitionSTART
          y_StraightnessCharacteristicDefinitionType
          StraightnessCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "StraightnessCharacteristicDefinition";
          }
        ;

y_StraightnessCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new StraightnessCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StraightnessCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_StraightnessCharacteristicItem_StraightnessCharacteristicItemType :
          StraightnessCharacteristicItemSTART
          y_StraightnessCharacteristicItemType
          StraightnessCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "StraightnessCharacteristicItem";
          }
        ;

y_StraightnessCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_Bonus_MeasuredLinearValueType_0
          y_MaxStraightness_MeasuredLinearValueType_0
          y_ZoneOrientation_MeasuredUnitVectorType_0
          y_ZoneLine_MeasuredZoneAxisType_0
          {$$ = new StraightnessCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StraightnessCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_StraightnessCharacteristicMeasurement_StraightnessCharacteristicMeasurementType :
          StraightnessCharacteristicMeasurementSTART
          y_StraightnessCharacteristicMeasurementType
          StraightnessCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "StraightnessCharacteristicMeasurement";
          }
        ;

y_StraightnessCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_DirectionCurveId_QIFReferenceFullType_0
          {$$ = new StraightnessCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StraightnessCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_StraightnessCharacteristicNominal_StraightnessCharacteristicNominalType :
          StraightnessCharacteristicNominalSTART
          y_StraightnessCharacteristicNominalType
          StraightnessCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "StraightnessCharacteristicNominal";
          }
        ;

y_StraightnessCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_BonusStats_StatsLinearType_0
          y_MaxStraightnessStats_StatsLinearType_0
          {$$ = new StraightnessCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
          }
        ;

y_StraightnessCharacteristicStats_StraightnessCharacteristicStatsEvalType :
          StraightnessCharacteristicStatsSTART
          y_StraightnessCharacteristicStatsEvalType
          StraightnessCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "StraightnessCharacteristicStats";
          }
        ;

y_StraightnessDiametricalZoneType :
          /* empty */
          {
           $$ = new StraightnessDiametricalZoneType();
           yyUnrefMap[$$] = $$;
          }
        ;

y_StraightnessNonDiametricalZoneType :
          ENDITEM y_ZoneOrientationVector_UnitVectorType_0
          {$$ = new StraightnessNonDiametricalZoneType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_StraightnessZoneShapeType :
          ENDITEM y_StraightnessZoneShapeTypeChoicePair
          {$$ = new StraightnessZoneShapeType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_StraightnessZoneShapeTypeChoicePair :
          y_DiametricalZone_StraightnessDiametricalZoneType
          {$$ = new StraightnessZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StraightnessZoneShapeTypeType = StraightnessZoneShapeTypeChoicePair::DiametricalZoneE;
           $$->StraightnessZoneShapeTypeValue.DiametricalZone = $1;
          }
        | y_NonDiametricalZone_StraightnessNonDiametricalZoneType
          {$$ = new StraightnessZoneShapeTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StraightnessZoneShapeTypeType = StraightnessZoneShapeTypeChoicePair::NonDiametricalZoneE;
           $$->StraightnessZoneShapeTypeValue.NonDiametricalZone = $1;
          }
        ;

y_Stratification_CriterionOutOfType :
          StratificationSTART y_CriterionOutOfType StratificationEND
          {$$ = $2;}
        ;

y_StreetNumber_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | StreetNumberSTART ENDITEM {yyReadData = 1;} y_XmlToken
          StreetNumberEND
          {$$ = $4;}
        ;

y_Street_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | StreetSTART ENDITEM {yyReadData = 1;} y_XmlToken StreetEND
          {$$ = $4;}
        ;

y_StringValue_XmlString :
          StringValueSTART ENDITEM {yyReadData = 1;} y_XmlString
          StringValueEND
          {$$ = $4;}
        ;

y_StringValuesType :
          y_LiztAttributePair ENDITEM y_LiztStringValue_XmlString_1_u
          {$$ = new StringValuesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StringValuesType attributes");
             }
           delete $1;
          }
        ;

y_StructuredLightSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_OutputFileFormat_XmlString_0
          y_MeasurementFieldSize_LinearValueType_0
          y_NumberOfCameraPixels_XmlInt_0 y_LightSource_XmlString_0
          y_MeasurementRate_UserDefinedUnitValueType_0
          y_WorkingVolume_substituteType_0
          y_StandOffDistance_LinearValueType_0
          y_MaxPermissibleProbingError_LinearValueType_0
          y_Laser_LaserType_0
          {$$ = new StructuredLightSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StructuredLightSensorType attributes");
             }
           delete $1;
          }
        ;

y_StructuredLightSensor_StructuredLightSensorType :
          StructuredLightSensorSTART y_StructuredLightSensorType
          StructuredLightSensorEND
          {$$ = $2;
           $$->printElement = "StructuredLightSensor";
          }
        ;

y_StudyId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | StudyIdSTART y_QIFReferenceType StudyIdEND
          {$$ = $2;}
        ;

y_StudyIssueId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | StudyIssueIdSTART y_QIFReferenceType StudyIssueIdEND
          {$$ = $2;}
        ;

y_StudyIssueType :
          y_LiztAttributePair ENDITEM
          y_Traceability_InspectionTraceabilityType_0
          y_AssignableCauseIds_ArrayReferenceType_0
          y_CorrectiveActionIds_ArrayReferenceType_0
          y_Resolution_XmlString_0
          y_StudyIssueType_1136_StudyIssueType_1136_Type_0
          {$$ = new StudyIssueType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StudyIssueType attributes");
             }
           delete $1;
          }
        ;

y_StudyIssueType_1136_StudyIssueType_1136_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_StudyIssueType_1136_Type
          {$$ = $1;}
        ;

y_StudyIssueType_1136_Type :
          y_StudyIssueType_1136_TypeChoicePair
          {$$ = new StudyIssueType_1136_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_StudyIssueType_1136_TypeChoicePair :
          y_CharacteristicMeasurementIds_ArrayReferenceType
          {$$ = new StudyIssueType_1136_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StudyIssueType_1136_TypeType = StudyIssueType_1136_TypeChoicePair::CharacteristicMeasurementIdsE;
           $$->StudyIssueType_1136_TypeValue.CharacteristicMeasurementIds = $1;
          }
        | y_SubgroupIds_ArrayReferenceType
          {$$ = new StudyIssueType_1136_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->StudyIssueType_1136_TypeType = StudyIssueType_1136_TypeChoicePair::SubgroupIdsE;
           $$->StudyIssueType_1136_TypeValue.SubgroupIds = $1;
          }
        ;

y_StudyIssue_StudyIssueType :
          StudyIssueSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new StudyIssueType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad StudyIssueType attributes");
             }
           delete $2;
          }
        | StudyIssueSTART y_StudyIssueType StudyIssueEND
          {$$ = $2;}
        ;

y_StudyIssuesType :
          y_LiztAttributePair ENDITEM y_LiztStudyIssue_StudyIssueType_1_u
          {$$ = new StudyIssuesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad StudyIssuesType attributes");
             }
           delete $1;
          }
        ;

y_StudyIssues_StudyIssuesType_0 :
          /* empty */
          {$$ = 0;}
        | StudyIssuesSTART y_StudyIssuesType StudyIssuesEND
          {$$ = $2;}
        ;

y_SubCurve_Curve12OrientedType :
          SubCurveSTART y_Curve12OrientedType SubCurveEND
          {$$ = $2;}
        ;

y_SubCurve_Curve13OrientedType :
          SubCurveSTART y_Curve13OrientedType SubCurveEND
          {$$ = $2;}
        ;

y_SubCurves_ArraySubCurve12Type :
          SubCurvesSTART y_ArraySubCurve12Type SubCurvesEND
          {$$ = $2;}
        ;

y_SubCurves_ArraySubCurve13Type :
          SubCurvesSTART y_ArraySubCurve13Type SubCurvesEND
          {$$ = $2;}
        ;

y_SubgroupAverages_SubgroupDecimalsType :
          SubgroupAveragesSTART y_SubgroupDecimalsType SubgroupAveragesEND
          {$$ = $2;
           $$->printElement = "SubgroupAverages";
          }
        ;

y_SubgroupDecimalArrayType :
          y_LiztAttributePair ENDITEM
          y_LiztSubgroupDecimal_SubgroupDecimalType_1_u
          {$$ = new SubgroupDecimalArrayType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SubgroupDecimalArrayType attributes");
             }
           delete $1;
          }
        ;

y_SubgroupDecimalType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new SubgroupDecimalType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SubgroupDecimalType attributes");
             }
           delete $1;
          }
        ;

y_SubgroupDecimal_SubgroupDecimalType :
          SubgroupDecimalSTART y_SubgroupDecimalType SubgroupDecimalEND
          {$$ = $2;}
        ;

y_SubgroupDecimalsType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Values_SubgroupDecimalArrayType
          {$$ = new SubgroupDecimalsType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SubgroupDifferences_SubgroupDecimalsType :
          SubgroupDifferencesSTART y_SubgroupDecimalsType
          SubgroupDifferencesEND
          {$$ = $2;
           $$->printElement = "SubgroupDifferences";
          }
        ;

y_SubgroupEffectiveNumbers_SubgroupIntegersType :
          SubgroupEffectiveNumbersSTART y_SubgroupIntegersType
          SubgroupEffectiveNumbersEND
          {$$ = $2;
           $$->printElement = "SubgroupEffectiveNumbers";
          }
        ;

y_SubgroupIds_ArrayReferenceType :
          SubgroupIdsSTART y_ArrayReferenceType SubgroupIdsEND
          {$$ = $2;}
        ;

y_SubgroupIntegerArrayType :
          y_LiztAttributePair ENDITEM
          y_LiztSubgroupInteger_SubgroupIntegerType_1_u
          {$$ = new SubgroupIntegerArrayType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SubgroupIntegerArrayType attributes");
             }
           delete $1;
          }
        ;

y_SubgroupIntegerType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new SubgroupIntegerType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SubgroupIntegerType attributes");
             }
           delete $1;
          }
        ;

y_SubgroupInteger_SubgroupIntegerType :
          SubgroupIntegerSTART y_SubgroupIntegerType SubgroupIntegerEND
          {$$ = $2;}
        ;

y_SubgroupIntegersType :
          ENDITEM y_StatsWithRefere_1006_StatsWithRefere_1006_Type_0
          y_Values_SubgroupIntegerArrayType
          {$$ = new SubgroupIntegersType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SubgroupMaxima_SubgroupDecimalsType :
          SubgroupMaximaSTART y_SubgroupDecimalsType SubgroupMaximaEND
          {$$ = $2;
           $$->printElement = "SubgroupMaxima";
          }
        ;

y_SubgroupMinima_SubgroupDecimalsType :
          SubgroupMinimaSTART y_SubgroupDecimalsType SubgroupMinimaEND
          {$$ = $2;
           $$->printElement = "SubgroupMinima";
          }
        ;

y_SubgroupNumbersOutOfTolerance_SubgroupIntegersType :
          SubgroupNumbersOutOfToleranceSTART y_SubgroupIntegersType
          SubgroupNumbersOutOfToleranceEND
          {$$ = $2;
           $$->printElement = "SubgroupNumbersOutOfTolerance";
          }
        ;

y_SubgroupNumbersOverUpperTolerance_SubgroupIntegersType :
          SubgroupNumbersOverUpperToleranceSTART y_SubgroupIntegersType
          SubgroupNumbersOverUpperToleranceEND
          {$$ = $2;
           $$->printElement = "SubgroupNumbersOverUpperTolerance";
          }
        ;

y_SubgroupNumbersUnderLowerTolerance_SubgroupIntegersType :
          SubgroupNumbersUnderLowerToleranceSTART y_SubgroupIntegersType
          SubgroupNumbersUnderLowerToleranceEND
          {$$ = $2;
           $$->printElement = "SubgroupNumbersUnderLowerTolerance";
          }
        ;

y_SubgroupRanges_SubgroupDecimalsType :
          SubgroupRangesSTART y_SubgroupDecimalsType SubgroupRangesEND
          {$$ = $2;
           $$->printElement = "SubgroupRanges";
          }
        ;

y_SubgroupSize_XmlPositiveInteger :
          SubgroupSizeSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          SubgroupSizeEND
          {$$ = $4;}
        ;

y_SubgroupSize_XmlPositiveInteger_0 :
          /* empty */
          {$$ = 0;}
        | SubgroupSizeSTART ENDITEM {yyReadData = 1;} y_XmlPositiveInteger
          SubgroupSizeEND
          {$$ = $4;}
        ;

y_SubgroupStatsValuesEnumType :
          DATASTRING
          {$$ = new SubgroupStatsValuesEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SubgroupStatsValuesEnumType value");
          }
        ;

y_SubgroupTotalNumbers_SubgroupIntegersType :
          SubgroupTotalNumbersSTART y_SubgroupIntegersType
          SubgroupTotalNumbersEND
          {$$ = $2;
           $$->printElement = "SubgroupTotalNumbers";
          }
        ;

y_SubgroupType :
          y_LiztAttributePair ENDITEM y_MeasuredIds_StatsArrayIdType
          {$$ = new SubgroupType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SubgroupType attributes");
             }
           delete $1;
          }
        ;

y_SubgroupValuesType :
          y_LiztAttributePair ENDITEM y_LiztSubgroup_StatsValuesType_1_u
          {$$ = new SubgroupValuesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SubgroupValuesType attributes");
             }
           delete $1;
          }
        ;

y_SubgroupValues_SubgroupValuesType :
          SubgroupValuesSTART y_SubgroupValuesType SubgroupValuesEND
          {$$ = $2;}
        ;

y_Subgroup_StatsValuesType :
          SubgroupSTART y_StatsValuesType SubgroupEND
          {$$ = $2;}
        ;

y_Subgroup_SubgroupType :
          SubgroupSTART y_SubgroupType SubgroupEND
          {$$ = $2;}
        ;

y_SubgroupsType :
          y_LiztAttributePair ENDITEM y_LiztSubgroup_SubgroupType_1_u
          {$$ = new SubgroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SubgroupsType attributes");
             }
           delete $1;
          }
        ;

y_Subgroups_SubgroupsType :
          SubgroupsSTART y_SubgroupsType SubgroupsEND
          {$$ = $2;}
        ;

y_SubstituteFeatu_1023_SubstituteFeatu_1023_Type :
          y_SubstituteFeatu_1023_Type
          {$$ = $1;}
        ;

y_SubstituteFeatu_1023_Type :
          y_SubstituteFeatu_1023_TypeChoicePair
          {$$ = new SubstituteFeatu_1023_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SubstituteFeatu_1023_TypeChoicePair :
          y_OtherSubstituteFeatureAlgorithm_XmlString
          {$$ = new SubstituteFeatu_1023_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SubstituteFeatu_1023_TypeType = SubstituteFeatu_1023_TypeChoicePair::OtherSubstituteFeatureAlgorithmE;
           $$->SubstituteFeatu_1023_TypeValue.OtherSubstituteFeatureAlgorithm = $1;
          }
        | y_SubstituteFeatureAlgorithmEnum_SubstituteFeatureAlgorithmEnumType
          {$$ = new SubstituteFeatu_1023_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SubstituteFeatu_1023_TypeType = SubstituteFeatu_1023_TypeChoicePair::SubstituteFeatureAlgorithmEnumE;
           $$->SubstituteFeatu_1023_TypeValue.SubstituteFeatureAlgorithmEnum = $1;
          }
        | y_SubstituteFeatureAlgorithmId_QIFReferenceType
          {$$ = new SubstituteFeatu_1023_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SubstituteFeatu_1023_TypeType = SubstituteFeatu_1023_TypeChoicePair::SubstituteFeatureAlgorithmIdE;
           $$->SubstituteFeatu_1023_TypeValue.SubstituteFeatureAlgorithmId = $1;
          }
        ;

y_SubstituteFeatureAlgorithmEnumType :
          DATASTRING
          {$$ = new SubstituteFeatureAlgorithmEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SubstituteFeatureAlgorithmEnumType value");
          }
        ;

y_SubstituteFeatureAlgorithmEnum_SubstituteFeatureAlgorithmEnumType :
          SubstituteFeatureAlgorithmEnumSTART ENDITEM {yyReadData = 1;}
          y_SubstituteFeatureAlgorithmEnumType
          SubstituteFeatureAlgorithmEnumEND
          {$$ = $4;}
        ;

y_SubstituteFeatureAlgorithmId_QIFReferenceType :
          SubstituteFeatureAlgorithmIdSTART y_QIFReferenceType
          SubstituteFeatureAlgorithmIdEND
          {$$ = $2;}
        ;

y_SubstituteFeatureAlgorithmType :
          ENDITEM y_Attributes_AttributesType_0
          y_SubstituteFeatu_1023_SubstituteFeatu_1023_Type
          {$$ = new SubstituteFeatureAlgorithmType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0 :
          /* empty */
          {$$ = 0;}
        | SubstituteFeatureAlgorithmSTART y_SubstituteFeatureAlgorithmType
          SubstituteFeatureAlgorithmEND
          {$$ = $2;}
        ;

y_Suffix_WeldingProcessSuffixEnumType_0 :
          /* empty */
          {$$ = 0;}
        | SuffixSTART ENDITEM {yyReadData = 1;}
          y_WeldingProcessSuffixEnumType SuffixEND
          {$$ = $4;}
        ;

y_SummariesStatisticsAngularType :
          y_LiztAttributePair ENDITEM
          y_LiztAngularStatsSummary_SummaryStatisticsAngularType_1_u
          {$$ = new SummariesStatisticsAngularType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsAngularType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsAreaType :
          y_LiztAttributePair ENDITEM
          y_LiztAreaStatsSummary_SummaryStatisticsAreaType_1_u
          {$$ = new SummariesStatisticsAreaType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsAreaType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsForceType :
          y_LiztAttributePair ENDITEM
          y_LiztForceStatsSummary_SummaryStatisticsForceType_1_u
          {$$ = new SummariesStatisticsForceType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsForceType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsLinearType :
          y_LiztAttributePair ENDITEM
          y_LiztLinearStatsSummary_SummaryStatisticsLinearType_1_u
          {$$ = new SummariesStatisticsLinearType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsLinearType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsMassType :
          y_LiztAttributePair ENDITEM
          y_LiztMassStatsSummary_SummaryStatisticsMassType_1_u
          {$$ = new SummariesStatisticsMassType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsMassType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsPressureType :
          y_LiztAttributePair ENDITEM
          y_LiztPressureStatsSummary_SummaryStatisticsPressureType_1_u
          {$$ = new SummariesStatisticsPressureType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsPressureType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsSpeedType :
          y_LiztAttributePair ENDITEM
          y_LiztSpeedStatsSummary_SummaryStatisticsSpeedType_1_u
          {$$ = new SummariesStatisticsSpeedType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsSpeedType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsTemperatureType :
          y_LiztAttributePair ENDITEM
          y_LiztTemperatureStatsSummary_SummaryStatisticsTemperatureType_1_u
          {$$ = new SummariesStatisticsTemperatureType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsTemperatureType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsTimeType :
          y_LiztAttributePair ENDITEM
          y_LiztTimeStatsSummary_SummaryStatisticsTimeType_1_u
          {$$ = new SummariesStatisticsTimeType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsTimeType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsType :
          y_LiztAttributePair ENDITEM
          y_LiztStatsSummary_SummaryStatisticsType_1_u
          {$$ = new SummariesStatisticsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsType attributes");
             }
           delete $1;
          }
        ;

y_SummariesStatisticsUserDefinedUnitType :
          y_LiztAttributePair ENDITEM
          y_LiztUserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType_1_u
          {$$ = new SummariesStatisticsUserDefinedUnitType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummariesStatisticsUserDefinedUnitType attributes");
             }
           delete $1;
          }
        ;

y_SummaryAverage_StatsMeasuredDecimalType :
          SummaryAverageSTART y_StatsMeasuredDecimalType SummaryAverageEND
          {$$ = $2;
           $$->printElement = "SummaryAverage";
          }
        ;

y_SummaryMaximum_StatsMeasuredDecimalType :
          SummaryMaximumSTART y_StatsMeasuredDecimalType SummaryMaximumEND
          {$$ = $2;
           $$->printElement = "SummaryMaximum";
          }
        ;

y_SummaryMinimum_StatsMeasuredDecimalType :
          SummaryMinimumSTART y_StatsMeasuredDecimalType SummaryMinimumEND
          {$$ = $2;
           $$->printElement = "SummaryMinimum";
          }
        ;

y_SummaryRange_StatsMeasuredDecimalType :
          SummaryRangeSTART y_StatsMeasuredDecimalType SummaryRangeEND
          {$$ = $2;
           $$->printElement = "SummaryRange";
          }
        ;

y_SummaryStandardDeviation_StatsMeasuredDecimalType :
          SummaryStandardDeviationSTART y_StatsMeasuredDecimalType
          SummaryStandardDeviationEND
          {$$ = $2;
           $$->printElement = "SummaryStandardDeviation";
          }
        ;

y_SummaryStatisticsAngularType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsAngularType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsAngularType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsAngularType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsAreaType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsAreaType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsAreaType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsAreaType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsForceType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsForceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsForceType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsForceType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsLinearType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsLinearType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsLinearType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsLinearType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsMassType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsMassType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsMassType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsMassType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsPressureType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsPressureType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsPressureType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsPressureType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsSpeedType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsSpeedType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsSpeedType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsSpeedType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsTemperatureType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsTemperatureType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsTemperatureType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsTemperatureType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsTimeType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsTimeType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        | y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsTimeType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsTimeType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatisticsType :
          ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SummaryStatisticsUserDefinedUnitType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TypeOfSummary_StatsValuesEnumType
          y_LiztSummaryStatsValue_substituteType_1_u
          {$$ = new SummaryStatisticsUserDefinedUnitType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatisticsUserDefinedUnitType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatsValue_substituteType :
          y_SummaryAverage_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SummaryMaximum_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SummaryMinimum_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SummaryRange_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SummaryStandardDeviation_StatsMeasuredDecimalType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SummaryStatsValuesEnumType :
          DATASTRING
          {$$ = new SummaryStatsValuesEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SummaryStatsValuesEnumType value");
          }
        ;

y_SummaryStatsValuesListType :
          y_LiztAttributePair ENDITEM
          y_LiztSummaryStatsValues_SummaryStatsValuesType_1_u
          {$$ = new SummaryStatsValuesListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SummaryStatsValuesListType attributes");
             }
           delete $1;
          }
        ;

y_SummaryStatsValuesType :
          ENDITEM y_SummaryType_SummaryStatsValuesEnumType
          y_SummaryStats_ListSummaryStatsValuesType
          {$$ = new SummaryStatsValuesType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SummaryStatsValues_SummaryStatsValuesType :
          SummaryStatsValuesSTART y_SummaryStatsValuesType
          SummaryStatsValuesEND
          {$$ = $2;}
        ;

y_SummaryStats_ListSummaryStatsValuesType :
          SummaryStatsSTART y_ListSummaryStatsValuesType SummaryStatsEND
          {$$ = $2;
           $$->printElement = "SummaryStats";
          }
        ;

y_SummaryType_SummaryStatsValuesEnumType :
          SummaryTypeSTART ENDITEM {yyReadData = 1;}
          y_SummaryStatsValuesEnumType SummaryTypeEND
          {$$ = $4;}
        ;

y_SupplementarySymbol_WeldSupplementarySymbolEnumType_0 :
          /* empty */
          {$$ = 0;}
        | SupplementarySymbolSTART ENDITEM {yyReadData = 1;}
          y_WeldSupplementarySymbolEnumType SupplementarySymbolEND
          {$$ = $4;}
        ;

y_SupplementarySymbol_WeldSupplementarySymbolType_0 :
          /* empty */
          {$$ = 0;}
        | SupplementarySymbolSTART y_WeldSupplementarySymbolType
          SupplementarySymbolEND
          {$$ = $2;
           $$->printElement = "SupplementarySymbol";
          }
        ;

y_SupplierCode_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SupplierCodeSTART ENDITEM {yyReadData = 1;} y_XmlString
          SupplierCodeEND
          {$$ = $4;}
        ;

y_SurfaceCoreType :
          ENDITEM y_SurfaceCore_substituteType
          {$$ = new SurfaceCoreType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SurfaceCore_substituteType :
          y_Cone23Core_Cone23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Cylinder23Core_Cylinder23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Extrude23Core_Extrude23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Nurbs23Core_Nurbs23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Offset23Core_Offset23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Plane23Core_Plane23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Revolution23Core_Revolution23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Ruled23Core_Ruled23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Sphere23Core_Sphere23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Spline23Core_Spline23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Torus23Core_Torus23CoreType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SurfaceFeatureNominalId_QIFReferenceFullType :
          SurfaceFeatureNominalIdSTART y_QIFReferenceFullType
          SurfaceFeatureNominalIdEND
          {$$ = $2;}
        ;

y_SurfaceFeatureNominalId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | SurfaceFeatureNominalIdSTART y_QIFReferenceFullType
          SurfaceFeatureNominalIdEND
          {$$ = $2;}
        ;

y_SurfaceFeature_BaseFeatureType :
          SurfaceFeatureSTART y_BaseFeatureType SurfaceFeatureEND
          {$$ = $2;}
        ;

y_SurfaceIlluminationLightSource_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | SurfaceIlluminationLightSourceSTART ENDITEM {yyReadData = 1;}
          y_XmlString SurfaceIlluminationLightSourceEND
          {$$ = $4;}
        ;

y_SurfaceMeshSetType :
          y_LiztAttributePair ENDITEM
          y_LiztMeshTriangle_MeshTriangleType_1_u
          {$$ = new SurfaceMeshSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceMeshSetType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceMeshSet_SurfaceMeshSetType_0 :
          /* empty */
          {$$ = 0;}
        | SurfaceMeshSetSTART y_SurfaceMeshSetType SurfaceMeshSetEND
          {$$ = $2;}
        ;

y_SurfaceOfRevolutionBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new SurfaceOfRevolutionBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceOfRevolutionBestFitType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceOfRevolutionCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new SurfaceOfRevolutionCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SurfaceOfRevolutionCheckedFeatureType :
          ENDITEM y_CheckDetails_SurfaceOfRevolutionCheckedType_0
          {$$ = new SurfaceOfRevolutionCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SurfaceOfRevolutionCheckedType :
          ENDITEM y_SurfaceOfRevolutionCheckedTypeChoicePair
          {$$ = new SurfaceOfRevolutionCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SurfaceOfRevolutionCheckedTypeChoicePair :
          y_Constructed_SurfaceOfRevolutionConstructionMethodType
          {$$ = new SurfaceOfRevolutionCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionCheckedTypeType = SurfaceOfRevolutionCheckedTypeChoicePair::ConstructedE;
           $$->SurfaceOfRevolutionCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new SurfaceOfRevolutionCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionCheckedTypeType = SurfaceOfRevolutionCheckedTypeChoicePair::MeasuredE;
           $$->SurfaceOfRevolutionCheckedTypeValue.Measured = $1;
          }
        ;

y_SurfaceOfRevolutionConstructionMethodType :
          ENDITEM y_SurfaceOfRevolutionConstructionMethodTypeChoicePair
          {$$ = new SurfaceOfRevolutionConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SurfaceOfRevolutionConstructionMethodTypeChoicePair :
          y_BestFit_SurfaceOfRevolutionBestFitType
          {$$ = new SurfaceOfRevolutionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionConstructionMethodTypeType = SurfaceOfRevolutionConstructionMethodTypeChoicePair::BestFitE;
           $$->SurfaceOfRevolutionConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_SurfaceOfRevolutionCastType
          {$$ = new SurfaceOfRevolutionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionConstructionMethodTypeType = SurfaceOfRevolutionConstructionMethodTypeChoicePair::CastE;
           $$->SurfaceOfRevolutionConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_SurfaceOfRevolutionCopyType
          {$$ = new SurfaceOfRevolutionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionConstructionMethodTypeType = SurfaceOfRevolutionConstructionMethodTypeChoicePair::CopyE;
           $$->SurfaceOfRevolutionConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_SurfaceOfRevolutionRecompType
          {$$ = new SurfaceOfRevolutionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionConstructionMethodTypeType = SurfaceOfRevolutionConstructionMethodTypeChoicePair::RecompensatedE;
           $$->SurfaceOfRevolutionConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_SurfaceOfRevolutionTransformType
          {$$ = new SurfaceOfRevolutionConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionConstructionMethodTypeType = SurfaceOfRevolutionConstructionMethodTypeChoicePair::TransformE;
           $$->SurfaceOfRevolutionConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_SurfaceOfRevolutionCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseSurfaceOfRevolution_BaseFeatureType
          {$$ = new SurfaceOfRevolutionCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SurfaceOfRevolutionFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_Length_LinearValueType_0
          {$$ = new SurfaceOfRevolutionFeatureDefinitionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceOfRevolutionFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceOfRevolutionFeatureDefinition_SurfaceOfRevolutionFeatureDefinitionType :
          SurfaceOfRevolutionFeatureDefinitionSTART
          y_SurfaceOfRevolutionFeatureDefinitionType
          SurfaceOfRevolutionFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "SurfaceOfRevolutionFeatureDefinition";
          }
        ;

y_SurfaceOfRevolutionFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_SurfaceOfRevolutionMeasurementDeterminationType
          {$$ = new SurfaceOfRevolutionFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceOfRevolutionFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceOfRevolutionFeatureItem_SurfaceOfRevolutionFeatureItemType :
          SurfaceOfRevolutionFeatureItemSTART
          y_SurfaceOfRevolutionFeatureItemType
          SurfaceOfRevolutionFeatureItemEND
          {$$ = $2;
           $$->printElement = "SurfaceOfRevolutionFeatureItem";
          }
        ;

y_SurfaceOfRevolutionFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_SweepMeasurementRange_SweepType_0 y_SweepFull_SweepType_0
          y_Length_MeasuredLinearValueType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new SurfaceOfRevolutionFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceOfRevolutionFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceOfRevolutionFeatureMeasurement_SurfaceOfRevolutionFeatureMeasurementType :
          SurfaceOfRevolutionFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new SurfaceOfRevolutionFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "SurfaceOfRevolutionFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad SurfaceOfRevolutionFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | SurfaceOfRevolutionFeatureMeasurementSTART
          y_SurfaceOfRevolutionFeatureMeasurementType
          SurfaceOfRevolutionFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "SurfaceOfRevolutionFeatureMeasurement";
          }
        ;

y_SurfaceOfRevolutionFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Axis_AxisType y_Sweep_SweepType_0
          y_ReferenceFeatureNominalId_QIFReferenceFullType_0
          y_Constructed_SurfaceOfRevolutionConstructionMethodType_0
          {$$ = new SurfaceOfRevolutionFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceOfRevolutionFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceOfRevolutionFeatureNominal_SurfaceOfRevolutionFeatureNominalType :
          SurfaceOfRevolutionFeatureNominalSTART
          y_SurfaceOfRevolutionFeatureNominalType
          SurfaceOfRevolutionFeatureNominalEND
          {$$ = $2;
           $$->printElement = "SurfaceOfRevolutionFeatureNominal";
          }
        ;

y_SurfaceOfRevolutionMeasurementDeterminationType :
          ENDITEM
          y_SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair
          {$$ = new SurfaceOfRevolutionMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair :
          y_Checked_SurfaceOfRevolutionCheckedFeatureType
          {$$ = new SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionMeasurementDeterminationTypeType = SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->SurfaceOfRevolutionMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionMeasurementDeterminationTypeType = SurfaceOfRevolutionMeasurementDeterminationTypeChoicePair::SetE;
           $$->SurfaceOfRevolutionMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_SurfaceOfRevolutionPointSamplingStrategyEnumType :
          DATASTRING
          {$$ = new SurfaceOfRevolutionPointSamplingStrategyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad SurfaceOfRevolutionPointSamplingStrategyEnumType value");
          }
        ;

y_SurfaceOfRevolutionPointSamplingStrategyType :
          ENDITEM y_SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair
          {$$ = new SurfaceOfRevolutionPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_SurfaceOfRevolutionPointSamplingStrategyEnumType
          {$$ = new SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionPointSamplingStrategyTypeType = SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->SurfaceOfRevolutionPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceOfRevolutionPointSamplingStrategyTypeType = SurfaceOfRevolutionPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->SurfaceOfRevolutionPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_SurfaceOfRevolutionRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new SurfaceOfRevolutionRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_SurfaceOfRevolutionTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseSurfaceOfRevolution_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new SurfaceOfRevolutionTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_SurfacePointsSpeed_TimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | SurfacePointsSpeedSTART y_TimeValueType SurfacePointsSpeedEND
          {$$ = $2;}
        ;

y_SurfaceProfileCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_ProfileCharacte_1067_ProfileCharacte_1067_Type_0
          y_OffsetZone_XmlBoolean_0 y_VariableAngle_XmlBoolean_0
          y_SecondCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_ThirdCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_FourthCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_OrientationOnly_XmlBoolean_0 y_Extent_ExtentType_0
          {$$ = new SurfaceProfileCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileCharacteristicDefinition_SurfaceProfileCharacteristicDefinitionType :
          SurfaceProfileCharacteristicDefinitionSTART
          y_SurfaceProfileCharacteristicDefinitionType
          SurfaceProfileCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileCharacteristicDefinition";
          }
        ;

y_SurfaceProfileCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SurfaceProfileCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileCharacteristicItem_SurfaceProfileCharacteristicItemType :
          SurfaceProfileCharacteristicItemSTART
          y_SurfaceProfileCharacteristicItemType
          SurfaceProfileCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileCharacteristicItem";
          }
        ;

y_SurfaceProfileCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_WorstPositiveDeviation_LinearValueType_0
          y_WorstNegativeDeviation_LinearValueType_0
          y_PointDeviations_PointDeviationsType_0 y_DatumsOk_XmlBoolean_0
          y_DRFTransformActualId_QIFReferenceType_0
          y_SecondCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_ThirdCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_FourthCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          {$$ = new SurfaceProfileCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileCharacteristicMeasurement_SurfaceProfileCharacteristicMeasurementType :
          SurfaceProfileCharacteristicMeasurementSTART
          y_SurfaceProfileCharacteristicMeasurementType
          SurfaceProfileCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileCharacteristicMeasurement";
          }
        ;

y_SurfaceProfileCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          {$$ = new SurfaceProfileCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileCharacteristicNominal_SurfaceProfileCharacteristicNominalType :
          SurfaceProfileCharacteristicNominalSTART
          y_SurfaceProfileCharacteristicNominalType
          SurfaceProfileCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileCharacteristicNominal";
          }
        ;

y_SurfaceProfileCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_WorstPositiveDeviationStats_StatsLinearType_0
          y_WorstNegativeDeviationStats_StatsLinearType_0
          y_PointDeviationsStats_PointDeviationsStatsEvalType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_CompositeSegmentsStats_CompositeSegmentsProfileStatsEvalType_0
          {$$ = new SurfaceProfileCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
          }
        ;

y_SurfaceProfileCharacteristicStats_SurfaceProfileCharacteristicStatsEvalType :
          SurfaceProfileCharacteristicStatsSTART
          y_SurfaceProfileCharacteristicStatsEvalType
          SurfaceProfileCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileCharacteristicStats";
          }
        ;

y_SurfaceProfileN_1071_SurfaceProfileN_1071_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_SurfaceProfileN_1071_Type
          {$$ = $1;}
        ;

y_SurfaceProfileN_1071_Type :
          y_SurfaceProfileN_1071_TypeChoicePair
          {$$ = new SurfaceProfileN_1071_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SurfaceProfileN_1071_TypeChoicePair :
          y_ToPointOuterDisposition_LinearValueType
          {$$ = new SurfaceProfileN_1071_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceProfileN_1071_TypeType = SurfaceProfileN_1071_TypeChoicePair::ToPointOuterDispositionE;
           $$->SurfaceProfileN_1071_TypeValue.ToPointOuterDisposition = $1;
          }
        | y_ToPointUnequallyDisposedZone_LinearValueType
          {$$ = new SurfaceProfileN_1071_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->SurfaceProfileN_1071_TypeType = SurfaceProfileN_1071_TypeChoicePair::ToPointUnequallyDisposedZoneE;
           $$->SurfaceProfileN_1071_TypeValue.ToPointUnequallyDisposedZone = $1;
          }
        ;

y_SurfaceProfileNonUniformCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_ProfileCharacte_1067_ProfileCharacte_1067_Type_0
          y_OffsetZone_XmlBoolean_0 y_VariableAngle_XmlBoolean_0
          y_SecondCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_ThirdCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_FourthCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_OrientationOnly_XmlBoolean_0
          y_ToPointToleranceValue_LinearValueType
          y_SurfaceProfileN_1071_SurfaceProfileN_1071_Type_0
          {$$ = new SurfaceProfileNonUniformCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           if ($32) yyUnrefMap.erase($32);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileNonUniformCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileNonUniformCharacteristicDefinition_SurfaceProfileNonUniformCharacteristicDefinitionType :
          SurfaceProfileNonUniformCharacteristicDefinitionSTART
          y_SurfaceProfileNonUniformCharacteristicDefinitionType
          SurfaceProfileNonUniformCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileNonUniformCharacteristicDefinition";
          }
        ;

y_SurfaceProfileNonUniformCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SurfaceProfileNonUniformCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileNonUniformCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileNonUniformCharacteristicItem_SurfaceProfileNonUniformCharacteristicItemType :
          SurfaceProfileNonUniformCharacteristicItemSTART
          y_SurfaceProfileNonUniformCharacteristicItemType
          SurfaceProfileNonUniformCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileNonUniformCharacteristicItem";
          }
        ;

y_SurfaceProfileNonUniformCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_WorstPositiveDeviation_LinearValueType_0
          y_WorstNegativeDeviation_LinearValueType_0
          y_PointDeviations_PointDeviationsType_0 y_DatumsOk_XmlBoolean_0
          y_DRFTransformActualId_QIFReferenceType_0
          y_SecondCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_ThirdCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          y_FourthCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0
          {$$ = new SurfaceProfileNonUniformCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileNonUniformCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileNonUniformCharacteristicMeasurement_SurfaceProfileNonUniformCharacteristicMeasurementType :
          SurfaceProfileNonUniformCharacteristicMeasurementSTART
          y_SurfaceProfileNonUniformCharacteristicMeasurementType
          SurfaceProfileNonUniformCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileNonUniformCharacteristicMeasurement";
          }
        ;

y_SurfaceProfileNonUniformCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          {$$ = new SurfaceProfileNonUniformCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceProfileNonUniformCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceProfileNonUniformCharacteristicNominal_SurfaceProfileNonUniformCharacteristicNominalType :
          SurfaceProfileNonUniformCharacteristicNominalSTART
          y_SurfaceProfileNonUniformCharacteristicNominalType
          SurfaceProfileNonUniformCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileNonUniformCharacteristicNominal";
          }
        ;

y_SurfaceProfileNonUniformCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_WorstPositiveDeviationStats_StatsLinearType_0
          y_WorstNegativeDeviationStats_StatsLinearType_0
          y_PointDeviationsStats_PointDeviationsStatsEvalType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_CompositeSegmentsStats_CompositeSegmentsProfileStatsEvalType_0
          {$$ = new SurfaceProfileNonUniformCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
          }
        ;

y_SurfaceProfileNonUniformCharacteristicStats_SurfaceProfileNonUniformCharacteristicStatsEvalType :
          SurfaceProfileNonUniformCharacteristicStatsSTART
          y_SurfaceProfileNonUniformCharacteristicStatsEvalType
          SurfaceProfileNonUniformCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SurfaceProfileNonUniformCharacteristicStats";
          }
        ;

y_SurfaceSetType :
          y_LiztAttributePair ENDITEM y_LiztSurface_substituteType_1_u
          {$$ = new SurfaceSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceSetType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceSet_SurfaceSetType_0 :
          /* empty */
          {$$ = 0;}
        | SurfaceSetSTART y_SurfaceSetType SurfaceSetEND
          {$$ = $2;}
        ;

y_SurfaceTextureCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0 y_RoughnessAverage_LinearValueType
          {$$ = new SurfaceTextureCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceTextureCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceTextureCharacteristicDefinition_SurfaceTextureCharacteristicDefinitionType :
          SurfaceTextureCharacteristicDefinitionSTART
          y_SurfaceTextureCharacteristicDefinitionType
          SurfaceTextureCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SurfaceTextureCharacteristicDefinition";
          }
        ;

y_SurfaceTextureCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SurfaceTextureCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceTextureCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceTextureCharacteristicItem_SurfaceTextureCharacteristicItemType :
          SurfaceTextureCharacteristicItemSTART
          y_SurfaceTextureCharacteristicItemType
          SurfaceTextureCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SurfaceTextureCharacteristicItem";
          }
        ;

y_SurfaceTextureCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_RoughnessAverageValue_MeasuredLinearValueType_0
          {$$ = new SurfaceTextureCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceTextureCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceTextureCharacteristicMeasurement_SurfaceTextureCharacteristicMeasurementType :
          SurfaceTextureCharacteristicMeasurementSTART
          y_SurfaceTextureCharacteristicMeasurementType
          SurfaceTextureCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SurfaceTextureCharacteristicMeasurement";
          }
        ;

y_SurfaceTextureCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_Obtention_RoughnessObtentionEnumType_0
          y_Applicability_RoughnessApplicabilityEnumType_0
          y_MinimumMaterialRemoval_XmlToken_0 y_ProductionMethod_XmlToken_0
          y_Cutoff_LinearValueType_0
          y_SecondaryRoughnessParameter_LinearValueType_0
          y_DirectionOfLay_RoughnessLayEnumType_0
          y_OtherSurfaceParameter_XmlToken_0
          {$$ = new SurfaceTextureCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SurfaceTextureCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SurfaceTextureCharacteristicNominal_SurfaceTextureCharacteristicNominalType :
          SurfaceTextureCharacteristicNominalSTART
          y_SurfaceTextureCharacteristicNominalType
          SurfaceTextureCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SurfaceTextureCharacteristicNominal";
          }
        ;

y_SurfaceTextureCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_RoughnessAverageValueStats_StatsWithTolLinearType_0
          {$$ = new SurfaceTextureCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_SurfaceTextureCharacteristicStats_SurfaceTextureCharacteristicStatsEvalType :
          SurfaceTextureCharacteristicStatsSTART
          y_SurfaceTextureCharacteristicStatsEvalType
          SurfaceTextureCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SurfaceTextureCharacteristicStats";
          }
        ;

y_Surface_ElementReferenceType :
          SurfaceSTART y_ElementReferenceType SurfaceEND
          {$$ = $2;}
        ;

y_Surface_SurfaceCoreType :
          SurfaceSTART y_SurfaceCoreType SurfaceEND
          {$$ = $2;}
        ;

y_Surface_substituteType :
          y_Cone23_Cone23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Cylinder23_Cylinder23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Extrude23_Extrude23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Nurbs23_Nurbs23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Offset23_Offset23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Plane23_Plane23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Revolution23_Revolution23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Ruled23_Ruled23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Sphere23_Sphere23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Spline23_Spline23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_Torus23_Torus23Type
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_SustainedDataRate_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | SustainedDataRateSTART y_UserDefinedUnitValueType
          SustainedDataRateEND
          {$$ = $2;}
        ;

y_SweepFull_SweepType_0 :
          /* empty */
          {$$ = 0;}
        | SweepFullSTART y_SweepType SweepFullEND
          {$$ = $2;}
        ;

y_SweepMeasurementRange_SweepType_0 :
          /* empty */
          {$$ = 0;}
        | SweepMeasurementRangeSTART y_SweepType SweepMeasurementRangeEND
          {$$ = $2;}
        ;

y_SweepType :
          ENDITEM y_DirBeg_UnitVectorType y_DomainAngle_AngleRangeType
          {$$ = new SweepType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Sweep_SweepType :
          SweepSTART y_SweepType SweepEND
          {$$ = $2;}
        ;

y_Sweep_SweepType_0 :
          /* empty */
          {$$ = 0;}
        | SweepSTART y_SweepType SweepEND
          {$$ = $2;}
        ;

y_Symbol_DualNestingIndexFilterSymbolEnumType :
          SymbolSTART ENDITEM {yyReadData = 1;}
          y_DualNestingIndexFilterSymbolEnumType SymbolEND
          {$$ = $4;}
        ;

y_Symbol_SingleNestingIndexFilterSymbolEnumType :
          SymbolSTART ENDITEM {yyReadData = 1;}
          y_SingleNestingIndexFilterSymbolEnumType SymbolEND
          {$$ = $4;}
        ;

y_Symbol_WeldContourSymbolEnumType :
          SymbolSTART ENDITEM {yyReadData = 1;} y_WeldContourSymbolEnumType
          SymbolEND
          {$$ = $4;}
        ;

y_Symbol_WeldMainSymbolEnumType :
          SymbolSTART ENDITEM {yyReadData = 1;} y_WeldMainSymbolEnumType
          SymbolEND
          {$$ = $4;}
        ;

y_Symbol_WeldSupplementarySymbolEnumType :
          SymbolSTART ENDITEM {yyReadData = 1;}
          y_WeldSupplementarySymbolEnumType SymbolEND
          {$$ = $4;}
        ;

y_SymmetryCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          y_SecondCompositeSegmentSymmetryDefinition_CompositeSegmentSymmetryDefinitionType_0
          y_ThirdCompositeSegmentSymmetryDefinition_CompositeSegmentSymmetryDefinitionType_0
          {$$ = new SymmetryCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SymmetryCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_SymmetryCharacteristicDefinition_SymmetryCharacteristicDefinitionType :
          SymmetryCharacteristicDefinitionSTART
          y_SymmetryCharacteristicDefinitionType
          SymmetryCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "SymmetryCharacteristicDefinition";
          }
        ;

y_SymmetryCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new SymmetryCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SymmetryCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_SymmetryCharacteristicItem_SymmetryCharacteristicItemType :
          SymmetryCharacteristicItemSTART y_SymmetryCharacteristicItemType
          SymmetryCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "SymmetryCharacteristicItem";
          }
        ;

y_SymmetryCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          y_ZoneDataSet_ZoneDataSetType_0 y_DatumsOk_XmlBoolean_0
          y_SecondCompositeSegmentSymmetryMeasurement_CompositeSegmentSymmetryMeasurementType_0
          y_ThirdCompositeSegmentSymmetryMeasurement_CompositeSegmentSymmetryMeasurementType_0
          {$$ = new SymmetryCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SymmetryCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_SymmetryCharacteristicMeasurement_SymmetryCharacteristicMeasurementType :
          SymmetryCharacteristicMeasurementSTART
          y_SymmetryCharacteristicMeasurementType
          SymmetryCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "SymmetryCharacteristicMeasurement";
          }
        ;

y_SymmetryCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new SymmetryCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad SymmetryCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_SymmetryCharacteristicNominal_SymmetryCharacteristicNominalType :
          SymmetryCharacteristicNominalSTART
          y_SymmetryCharacteristicNominalType
          SymmetryCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "SymmetryCharacteristicNominal";
          }
        ;

y_SymmetryCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_DatumsOkStats_StatsPassFailType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_CompositeSegmentsStats_CompositeSegmentsSymmetryStatsEvalType_0
          {$$ = new SymmetryCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
          }
        ;

y_SymmetryCharacteristicStats_SymmetryCharacteristicStatsEvalType :
          SymmetryCharacteristicStatsSTART
          y_SymmetryCharacteristicStatsEvalType
          SymmetryCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "SymmetryCharacteristicStats";
          }
        ;

y_TDistribution_StatsMeasuredDecimalType :
          TDistributionSTART y_StatsMeasuredDecimalType TDistributionEND
          {$$ = $2;
           $$->printElement = "TDistribution";
          }
        ;

y_TableErrorsType :
          ENDITEM y_AxialError_LinearValueType
          y_RadialError_LinearValueType y_TangentialError_LinearValueType
          {$$ = new TableErrorsType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TableErrors_TableErrorsType :
          TableErrorsSTART y_TableErrorsType TableErrorsEND
          {$$ = $2;}
        ;

y_TableRadius_LinearValueType :
          TableRadiusSTART y_LinearValueType TableRadiusEND
          {$$ = $2;}
        ;

y_Tail_FrameWeldSymbolTailType_0 :
          /* empty */
          {$$ = 0;}
        | TailSTART y_FrameWeldSymbolTailType TailEND
          {$$ = $2;}
        ;

y_TangentFeature_BaseFeatureType :
          TangentFeatureSTART y_BaseFeatureType TangentFeatureEND
          {$$ = $2;}
        ;

y_TangentFeature_SequencedBaseFeatureType :
          TangentFeatureSTART y_SequencedBaseFeatureType TangentFeatureEND
          {$$ = $2;
           $$->printElement = "TangentFeature";
          }
        ;

y_TangentPlane_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | TangentPlaneSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          TangentPlaneEND
          {$$ = $4;}
        ;

y_TangentThrough_CircleTangentThroughType :
          TangentThroughSTART y_CircleTangentThroughType TangentThroughEND
          {$$ = $2;
           $$->printElement = "TangentThrough";
          }
        ;

y_TangentThrough_LineTangentThroughType :
          TangentThroughSTART y_LineTangentThroughType TangentThroughEND
          {$$ = $2;
           $$->printElement = "TangentThrough";
          }
        ;

y_TangentThrough_PlaneTangentThroughType :
          TangentThroughSTART y_PlaneTangentThroughType TangentThroughEND
          {$$ = $2;
           $$->printElement = "TangentThrough";
          }
        ;

y_Tangent_CircleTangentType :
          TangentSTART y_CircleTangentType TangentEND
          {$$ = $2;
           $$->printElement = "Tangent";
          }
        ;

y_TangentialError_LinearValueType :
          TangentialErrorSTART y_LinearValueType TangentialErrorEND
          {$$ = $2;}
        ;

y_TaperAngle_AngularValueType :
          TaperAngleSTART y_AngularValueType TaperAngleEND
          {$$ = $2;}
        ;

y_TaperAngle_MeasuredAngularValueType :
          TaperAngleSTART y_MeasuredAngularValueType TaperAngleEND
          {$$ = $2;}
        ;

y_TaperAngle_MeasuredAngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | TaperAngleSTART y_MeasuredAngularValueType TaperAngleEND
          {$$ = $2;}
        ;

y_TargetDualValue_LinearDualValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetDualValueSTART y_LinearDualValueType TargetDualValueEND
          {$$ = $2;}
        ;

y_TargetMirrorEnumType :
          DATASTRING
          {$$ = new TargetMirrorEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad TargetMirrorEnumType value");
          }
        ;

y_TargetMirror_TargetMirrorEnumType_0 :
          /* empty */
          {$$ = 0;}
        | TargetMirrorSTART ENDITEM {yyReadData = 1;}
          y_TargetMirrorEnumType TargetMirrorEND
          {$$ = $4;}
        ;

y_TargetValue_AngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_AngularValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_AreaValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_AreaValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_ForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_ForceValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_LinearValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_MassValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_MassValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_PressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_PressureValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_SpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_SpeedValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_TemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_TemperatureValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_TimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | TargetValueSTART y_TimeValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetValue_UserDefinedUnitValueType :
          TargetValueSTART y_UserDefinedUnitValueType TargetValueEND
          {$$ = $2;}
        ;

y_TargetZoneId_QIFReferenceFullType_0 :
          /* empty */
          {$$ = 0;}
        | TargetZoneIdSTART y_QIFReferenceFullType TargetZoneIdEND
          {$$ = $2;}
        ;

y_TelephoneNumber_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | TelephoneNumberSTART ENDITEM {yyReadData = 1;} y_XmlToken
          TelephoneNumberEND
          {$$ = $4;}
        ;

y_TelexNumber_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | TelexNumberSTART ENDITEM {yyReadData = 1;} y_XmlToken
          TelexNumberEND
          {$$ = $4;}
        ;

y_TemperatureAbsoluteLinearity_MeasuredTemperatureValueType :
          TemperatureAbsoluteLinearitySTART y_MeasuredTemperatureValueType
          TemperatureAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_TemperatureChar_1072_TemperatureChar_1072_Type :
          y_TemperatureChar_1072_Type
          {$$ = $1;}
        ;

y_TemperatureChar_1072_Type :
          y_TemperatureChar_1072_TypeChoicePair
          {$$ = new TemperatureChar_1072_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_TemperatureChar_1072_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new TemperatureChar_1072_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TemperatureChar_1072_TypeType = TemperatureChar_1072_TypeChoicePair::NonToleranceE;
           $$->TemperatureChar_1072_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_TemperatureToleranceType
          {$$ = new TemperatureChar_1072_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TemperatureChar_1072_TypeType = TemperatureChar_1072_TypeChoicePair::ToleranceE;
           $$->TemperatureChar_1072_TypeValue.Tolerance = $1;
          }
        ;

y_TemperatureCompensationEnumType :
          DATASTRING
          {$$ = new TemperatureCompensationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad TemperatureCompensationEnumType value");
          }
        ;

y_TemperatureCompensationEnum_TemperatureCompensationEnumType :
          TemperatureCompensationEnumSTART ENDITEM {yyReadData = 1;}
          y_TemperatureCompensationEnumType TemperatureCompensationEnumEND
          {$$ = $4;}
        ;

y_TemperatureCompensationType :
          ENDITEM y_TemperatureCompensationTypeChoicePair
          {$$ = new TemperatureCompensationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TemperatureCompensationTypeChoicePair :
          y_OtherTemperatureCompensation_XmlString
          {$$ = new TemperatureCompensationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TemperatureCompensationTypeType = TemperatureCompensationTypeChoicePair::OtherTemperatureCompensationE;
           $$->TemperatureCompensationTypeValue.OtherTemperatureCompensation = $1;
          }
        | y_TemperatureCompensationEnum_TemperatureCompensationEnumType
          {$$ = new TemperatureCompensationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TemperatureCompensationTypeType = TemperatureCompensationTypeChoicePair::TemperatureCompensationEnumE;
           $$->TemperatureCompensationTypeValue.TemperatureCompensationEnum = $1;
          }
        ;

y_TemperatureCompensation_TemperatureCompensationType_0 :
          /* empty */
          {$$ = 0;}
        | TemperatureCompensationSTART y_TemperatureCompensationType
          TemperatureCompensationEND
          {$$ = $2;}
        ;

y_TemperatureControlMax_TemperatureType :
          TemperatureControlMaxSTART y_TemperatureType
          TemperatureControlMaxEND
          {$$ = $2;}
        ;

y_TemperatureControlMin_TemperatureType :
          TemperatureControlMinSTART y_TemperatureType
          TemperatureControlMinEND
          {$$ = $2;}
        ;

y_TemperatureCriterion_CriterionTemperatureType_0 :
          /* empty */
          {$$ = 0;}
        | TemperatureCriterionSTART y_CriterionTemperatureType
          TemperatureCriterionEND
          {$$ = $2;
           $$->printElement = "TemperatureCriterion";
          }
        ;

y_TemperatureLimit_TemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | TemperatureLimitSTART y_TemperatureValueType TemperatureLimitEND
          {$$ = $2;}
        ;

y_TemperatureMeasurement_MeasuredTemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | TemperatureMeasurementSTART y_MeasuredTemperatureValueType
          TemperatureMeasurementEND
          {$$ = $2;}
        ;

y_TemperatureRangeMax_TemperatureType :
          TemperatureRangeMaxSTART y_TemperatureType TemperatureRangeMaxEND
          {$$ = $2;}
        ;

y_TemperatureRangeMin_TemperatureType :
          TemperatureRangeMinSTART y_TemperatureType TemperatureRangeMinEND
          {$$ = $2;}
        ;

y_TemperatureStability_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | TemperatureStabilitySTART y_UserDefinedUnitValueType
          TemperatureStabilityEND
          {$$ = $2;}
        ;

y_TemperatureStatsSummaries_SummariesStatisticsTemperatureType_0 :
          /* empty */
          {$$ = 0;}
        | TemperatureStatsSummariesSTART
          y_SummariesStatisticsTemperatureType TemperatureStatsSummariesEND
          {$$ = $2;}
        ;

y_TemperatureStatsSummary_SummaryStatisticsTemperatureType :
          TemperatureStatsSummarySTART y_SummaryStatisticsTemperatureType
          TemperatureStatsSummaryEND
          {$$ = $2;
           $$->printElement = "TemperatureStatsSummary";
          }
        ;

y_TemperatureTole_1024_TemperatureTole_1024_Type :
          y_TemperatureTole_1024_Type
          {$$ = $1;}
        ;

y_TemperatureTole_1024_Type :
          y_TemperatureTole_1024_TypeChoicePair
          {$$ = new TemperatureTole_1024_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_TemperatureTole_1024_TypeChoicePair :
          y_MinValue_TemperatureValueType
          {$$ = new TemperatureTole_1024_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TemperatureTole_1024_TypeType = TemperatureTole_1024_TypeChoicePair::MinValueE;
           $$->TemperatureTole_1024_TypeValue.MinValue = $1;
          }
        | y_TemperatureTole_1039_TemperatureTole_1039_Type
          {$$ = new TemperatureTole_1024_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TemperatureTole_1024_TypeType = TemperatureTole_1024_TypeChoicePair::TemperatureTole_1039E;
           $$->TemperatureTole_1024_TypeValue.TemperatureTole_1039 = $1;
          }
        ;

y_TemperatureTole_1039_TemperatureTole_1039_Type :
          y_TemperatureTole_1039_Type
          {$$ = $1;}
        ;

y_TemperatureTole_1039_Type :
          y_MaxValue_TemperatureValueType y_MinValue_TemperatureValueType_0
          {$$ = new TemperatureTole_1039_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TemperatureToleranceType :
          ENDITEM y_TemperatureTole_1024_TemperatureTole_1024_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new TemperatureToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TemperatureType :
          ENDITEM y_Attributes_AttributesType_0
          y_Temperature_TemperatureValueType y_TimeStamp_XmlDateTime_0
          {$$ = new TemperatureType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TemperatureUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new TemperatureUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TemperatureUnit_TemperatureUnitType :
          TemperatureUnitSTART y_TemperatureUnitType TemperatureUnitEND
          {$$ = $2;}
        ;

y_TemperatureUnit_TemperatureUnitType_0 :
          /* empty */
          {$$ = 0;}
        | TemperatureUnitSTART y_TemperatureUnitType TemperatureUnitEND
          {$$ = $2;}
        ;

y_TemperatureValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new TemperatureValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new TemperatureValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TemperatureValueType attributes");
             }
           delete $1;
          }
        ;

y_Temperature_TemperatureType :
          TemperatureSTART y_TemperatureType TemperatureEND
          {$$ = $2;}
        ;

y_Temperature_TemperatureValueType :
          TemperatureSTART y_TemperatureValueType TemperatureEND
          {$$ = $2;}
        ;

y_TemperaturesType :
          y_LiztAttributePair ENDITEM y_LiztTemperature_TemperatureType_1_u
          {$$ = new TemperaturesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TemperaturesType attributes");
             }
           delete $1;
          }
        ;

y_Temperatures_TemperaturesType_0 :
          /* empty */
          {$$ = 0;}
        | TemperaturesSTART y_TemperaturesType TemperaturesEND
          {$$ = $2;}
        ;

y_TensileYieldStress_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | TensileYieldStressSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          TensileYieldStressEND
          {$$ = $4;}
        ;

y_TerminationPoint_PointSimpleType :
          TerminationPointSTART y_PointSimpleType TerminationPointEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_TestAndPlanElementType :
          ENDITEM y_BooleanExpression_substituteType
          y_PlanElement_substituteType
          {$$ = new TestAndPlanElementType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_TextHidden_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | TextHiddenSTART ENDITEM {yyReadData = 1;} y_XmlString
          TextHiddenEND
          {$$ = $4;}
        ;

y_TextInstructionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_TextInstruction_XmlString
          {$$ = new TextInstructionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TextInstructionType attributes");
             }
           delete $1;
          }
        ;

y_TextInstruction_TextInstructionType :
          TextInstructionSTART y_TextInstructionType TextInstructionEND
          {$$ = $2;
           $$->printElement = "TextInstruction";
          }
        ;

y_TextInstruction_XmlString :
          TextInstructionSTART ENDITEM {yyReadData = 1;} y_XmlString
          TextInstructionEND
          {$$ = $4;}
        ;

y_TextSpecification_XmlString :
          TextSpecificationSTART ENDITEM {yyReadData = 1;} y_XmlString
          TextSpecificationEND
          {$$ = $4;}
        ;

y_TextThreadSpecificationType :
          y_LiztAttributePair ENDITEM y_TextSpecification_XmlString
          {$$ = new TextThreadSpecificationType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TextThreadSpecificationType attributes");
             }
           delete $1;
          }
        ;

y_TextThreadSpecification_TextThreadSpecificationType :
          TextThreadSpecificationSTART y_TextThreadSpecificationType
          TextThreadSpecificationEND
          {$$ = $2;}
        ;

y_TextType :
          ENDITEM y_Data_XmlString y_XY_Point2dSimpleType
          {$$ = new TextType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Text_TextType :
          TextSTART y_TextType TextEND
          {$$ = $2;}
        ;

y_Text_XmlString :
          TextSTART ENDITEM {yyReadData = 1;} y_XmlString TextEND
          {$$ = $4;}
        ;

y_Text_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | TextSTART ENDITEM {yyReadData = 1;} y_XmlString TextEND
          {$$ = $4;}
        ;

y_TextsType :
          y_LiztAttributePair ENDITEM y_LiztText_TextType_1_u
          {$$ = new TextsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TextsType attributes");
             }
           delete $1;
          }
        ;

y_Texts_TextsType_0 :
          /* empty */
          {$$ = 0;}
        | TextsSTART y_TextsType TextsEND
          {$$ = $2;}
        ;

y_ThenFittingAlgorithm_SubstituteFeatureAlgorithmType_0 :
          /* empty */
          {$$ = 0;}
        | ThenFittingAlgorithmSTART y_SubstituteFeatureAlgorithmType
          ThenFittingAlgorithmEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_CirclePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_CirclePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_CircularArcPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_CircularArcPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_ConePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_ConePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_ConicalSegmentPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_ConicalSegmentPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_CylinderPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_CylinderPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_CylindricalSegmentPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_CylindricalSegmentPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_EllipsePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_EllipsePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_EllipticalArcPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_EllipticalArcPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_ElongatedCirclePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_ElongatedCirclePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_ElongatedCylinderPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_ElongatedCylinderPointSamplingStrategyType ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_ExtrudedCrossSectionPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_ExtrudedCrossSectionPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_LinePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_LinePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_OppositeAngledLinesPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_OppositeAngledLinesPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_OppositeAngledPlanesPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_OppositeAngledPlanesPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_OppositeParallelLinesPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_OppositeParallelLinesPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_OppositeParallelPlanesPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_OppositeParallelPlanesPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_PlanePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_PlanePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_PointDefinedCurvePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_PointDefinedCurvePointSamplingStrategyType ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_PointDefinedSurfacePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_PointDefinedSurfacePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_PointPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_PointPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_SpherePointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_SpherePointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_SphericalSegmentPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_SphericalSegmentPointSamplingStrategyType ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_SurfaceOfRevolutionPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART
          y_SurfaceOfRevolutionPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_ToroidalSegmentPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_ToroidalSegmentPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointStrategy_TorusPointSamplingStrategyType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointStrategySTART y_TorusPointSamplingStrategyType
          ThenPointStrategyEND
          {$$ = $2;}
        ;

y_ThenPointsType :
          ENDITEM y_ThenPointsType_1212_ThenPointsType_1212_Type_0
          {$$ = new ThenPointsType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThenPointsType_1212_ThenPointsType_1212_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ThenPointsType_1212_Type
          {$$ = $1;}
        ;

y_ThenPointsType_1212_Type :
          y_ThenPointsType_1212_TypeChoicePair
          {$$ = new ThenPointsType_1212_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ThenPointsType_1212_TypeChoicePair :
          y_MinPointDensity_PositiveDecimalType
          {$$ = new ThenPointsType_1212_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThenPointsType_1212_TypeType = ThenPointsType_1212_TypeChoicePair::MinPointDensityE;
           $$->ThenPointsType_1212_TypeValue.MinPointDensity = $1;
          }
        | y_MinPoints_XmlUnsignedInt
          {$$ = new ThenPointsType_1212_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThenPointsType_1212_TypeType = ThenPointsType_1212_TypeChoicePair::MinPointsE;
           $$->ThenPointsType_1212_TypeValue.MinPoints = $1;
          }
        | y_NumberOfPoints_XmlUnsignedInt
          {$$ = new ThenPointsType_1212_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThenPointsType_1212_TypeType = ThenPointsType_1212_TypeChoicePair::NumberOfPointsE;
           $$->ThenPointsType_1212_TypeValue.NumberOfPoints = $1;
          }
        | y_PointDensity_PositiveDecimalType
          {$$ = new ThenPointsType_1212_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThenPointsType_1212_TypeType = ThenPointsType_1212_TypeChoicePair::PointDensityE;
           $$->ThenPointsType_1212_TypeValue.PointDensity = $1;
          }
        ;

y_ThenPoints_ThenPointsType :
          ThenPointsSTART ENDWHOLEITEM
          {$$ = new ThenPointsType();
           yyUnrefMap[$$] = $$;
          }
        | ThenPointsSTART y_ThenPointsType ThenPointsEND
          {$$ = $2;}
        ;

y_ThenPoints_ThenPointsType_0 :
          /* empty */
          {$$ = 0;}
        | ThenPointsSTART ENDWHOLEITEM
          {$$ = new ThenPointsType();
           yyUnrefMap[$$] = $$;
          }
        | ThenPointsSTART y_ThenPointsType ThenPointsEND
          {$$ = $2;}
        ;

y_TheodoliteMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new TheodoliteMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TheodoliteMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_TheodoliteMeasureFeatureMethod_TheodoliteMeasureFeatureMethodType :
          TheodoliteMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new TheodoliteMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "TheodoliteMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad TheodoliteMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        | TheodoliteMeasureFeatureMethodSTART
          y_TheodoliteMeasureFeatureMethodType
          TheodoliteMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "TheodoliteMeasureFeatureMethod";
          }
        ;

y_TheodoliteType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_LongitudinalTrackingSpeed_SpeedValueType_0
          y_LateralTrackingSpeed_SpeedValueType_0
          y_Magnification_XmlDecimal_0
          y_FieldOfViewDiameter_LinearValueType_0
          y_ApertureSize_LinearValueType_0
          y_MaxFocusDistance_LinearValueType_0
          y_AngularAccuracy_AngularValueType_0
          y_MaxTiltCompensation_AngularValueType_0
          y_ChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType_0
          y_MinFocusDistance_LinearValueType_0
          y_EffectiveDiameterOfObjective_LinearValueType_0
          y_StadiaBaseConstant_UserDefinedUnitValueType_0
          y_StadiaRateConstant_UserDefinedUnitValueType_0
          y_MinPowerSupplyVoltage_UserDefinedUnitValueType_0
          y_MaxPowerSupplyVoltage_UserDefinedUnitValueType_0
          y_Laser_LaserType_0
          {$$ = new TheodoliteType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           if ($32) yyUnrefMap.erase($32);
           if ($33) yyUnrefMap.erase($33);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TheodoliteType attributes");
             }
           delete $1;
          }
        ;

y_Theodolite_TheodoliteType :
          TheodoliteSTART y_TheodoliteType TheodoliteEND
          {$$ = $2;
           $$->printElement = "Theodolite";
          }
        ;

y_ThermalConductivity_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | ThermalConductivitySTART ENDITEM {yyReadData = 1;} y_XmlDouble
          ThermalConductivityEND
          {$$ = $4;}
        ;

y_ThermalExpansion_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | ThermalExpansionSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          ThermalExpansionEND
          {$$ = $4;}
        ;

y_ThicknessCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new ThicknessCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThicknessCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ThicknessCharacteristicDefinition_ThicknessCharacteristicDefinitionType :
          ThicknessCharacteristicDefinitionSTART
          y_ThicknessCharacteristicDefinitionType
          ThicknessCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ThicknessCharacteristicDefinition";
          }
        ;

y_ThicknessCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ThicknessCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThicknessCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ThicknessCharacteristicItem_ThicknessCharacteristicItemType :
          ThicknessCharacteristicItemSTART
          y_ThicknessCharacteristicItemType ThicknessCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ThicknessCharacteristicItem";
          }
        ;

y_ThicknessCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new ThicknessCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThicknessCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ThicknessCharacteristicMeasurement_ThicknessCharacteristicMeasurementType :
          ThicknessCharacteristicMeasurementSTART
          y_ThicknessCharacteristicMeasurementType
          ThicknessCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ThicknessCharacteristicMeasurement";
          }
        ;

y_ThicknessCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new ThicknessCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThicknessCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ThicknessCharacteristicNominal_ThicknessCharacteristicNominalType :
          ThicknessCharacteristicNominalSTART
          y_ThicknessCharacteristicNominalType
          ThicknessCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ThicknessCharacteristicNominal";
          }
        ;

y_ThicknessCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new ThicknessCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_ThicknessCharacteristicStats_ThicknessCharacteristicStatsEvalType :
          ThicknessCharacteristicStatsSTART
          y_ThicknessCharacteristicStatsEvalType
          ThicknessCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ThicknessCharacteristicStats";
          }
        ;

y_ThirdAxis_UserDefinedAxisType :
          ThirdAxisSTART y_UserDefinedAxisType ThirdAxisEND
          {$$ = $2;
           $$->printElement = "ThirdAxis";
          }
        ;

y_ThirdCompositeSegmentPositionDefinition_CompositeSegmentPositionDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentPositionDefinitionSTART
          y_CompositeSegmentPositionDefinitionType
          ThirdCompositeSegmentPositionDefinitionEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentPositionDefinition";
          }
        ;

y_ThirdCompositeSegmentPositionMeasurement_CompositeSegmentPositionMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentPositionMeasurementSTART
          y_CompositeSegmentPositionMeasurementType
          ThirdCompositeSegmentPositionMeasurementEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentPositionMeasurement";
          }
        ;

y_ThirdCompositeSegmentPositionStats_CompositeSegmentPositionStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentPositionStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentPositionStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ThirdCompositeSegmentPositionStats";
          }
        | ThirdCompositeSegmentPositionStatsSTART
          y_CompositeSegmentPositionStatsEvalType
          ThirdCompositeSegmentPositionStatsEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentPositionStats";
          }
        ;

y_ThirdCompositeSegmentProfileDefinition_CompositeSegmentProfileDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentProfileDefinitionSTART
          y_CompositeSegmentProfileDefinitionType
          ThirdCompositeSegmentProfileDefinitionEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentProfileDefinition";
          }
        ;

y_ThirdCompositeSegmentProfileMeasurement_CompositeSegmentProfileMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentProfileMeasurementSTART
          y_CompositeSegmentProfileMeasurementType
          ThirdCompositeSegmentProfileMeasurementEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentProfileMeasurement";
          }
        ;

y_ThirdCompositeSegmentProfileStats_CompositeSegmentProfileStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentProfileStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentProfileStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ThirdCompositeSegmentProfileStats";
          }
        | ThirdCompositeSegmentProfileStatsSTART
          y_CompositeSegmentProfileStatsEvalType
          ThirdCompositeSegmentProfileStatsEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentProfileStats";
          }
        ;

y_ThirdCompositeSegmentSymmetryDefinition_CompositeSegmentSymmetryDefinitionType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentSymmetryDefinitionSTART
          y_CompositeSegmentSymmetryDefinitionType
          ThirdCompositeSegmentSymmetryDefinitionEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentSymmetryDefinition";
          }
        ;

y_ThirdCompositeSegmentSymmetryMeasurement_CompositeSegmentSymmetryMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentSymmetryMeasurementSTART
          y_CompositeSegmentSymmetryMeasurementType
          ThirdCompositeSegmentSymmetryMeasurementEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentSymmetryMeasurement";
          }
        ;

y_ThirdCompositeSegmentSymmetryStats_CompositeSegmentSymmetryStatsEvalType_0 :
          /* empty */
          {$$ = 0;}
        | ThirdCompositeSegmentSymmetryStatsSTART ENDWHOLEITEM
          {$$ = new CompositeSegmentSymmetryStatsEvalType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "ThirdCompositeSegmentSymmetryStats";
          }
        | ThirdCompositeSegmentSymmetryStatsSTART
          y_CompositeSegmentSymmetryStatsEvalType
          ThirdCompositeSegmentSymmetryStatsEND
          {$$ = $2;
           $$->printElement = "ThirdCompositeSegmentSymmetryStats";
          }
        ;

y_ThisInstanceQPId_QPIdType_0 :
          /* empty */
          {$$ = 0;}
        | ThisInstanceQPIdSTART ENDITEM {yyReadData = 1;} y_QPIdType
          ThisInstanceQPIdEND
          {$$ = $4;}
        ;

y_ThisResultsInstanceQPId_QPIdType_0 :
          /* empty */
          {$$ = 0;}
        | ThisResultsInstanceQPIdSTART ENDITEM {yyReadData = 1;} y_QPIdType
          ThisResultsInstanceQPIdEND
          {$$ = $4;}
        ;

y_ThisStatisticalStudyResultsInstanceQPId_QPIdType_0 :
          /* empty */
          {$$ = 0;}
        | ThisStatisticalStudyResultsInstanceQPIdSTART ENDITEM {yyReadData
          = 1;} y_QPIdType ThisStatisticalStudyResultsInstanceQPIdEND
          {$$ = $4;}
        ;

y_ThreadCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_ThreadSpecificationId_QIFReferenceType
          {$$ = new ThreadCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ThreadCharacteristicDefinition_ThreadCharacteristicDefinitionType :
          ThreadCharacteristicDefinitionSTART
          y_ThreadCharacteristicDefinitionType
          ThreadCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ThreadCharacteristicDefinition";
          }
        ;

y_ThreadCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ThreadCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ThreadCharacteristicItem_ThreadCharacteristicItemType :
          ThreadCharacteristicItemSTART y_ThreadCharacteristicItemType
          ThreadCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ThreadCharacteristicItem";
          }
        ;

y_ThreadCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_PitchDiameter_MeasuredLinearValueType_0
          y_FunctionalSize_MeasuredLinearValueType_0
          {$$ = new ThreadCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ThreadCharacteristicMeasurement_ThreadCharacteristicMeasurementType :
          ThreadCharacteristicMeasurementSTART
          y_ThreadCharacteristicMeasurementType
          ThreadCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ThreadCharacteristicMeasurement";
          }
        ;

y_ThreadCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new ThreadCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ThreadCharacteristicNominal_ThreadCharacteristicNominalType :
          ThreadCharacteristicNominalSTART
          y_ThreadCharacteristicNominalType ThreadCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ThreadCharacteristicNominal";
          }
        ;

y_ThreadCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ThreadStats_StatsPassFailType_0
          y_PitchDiameterStats_StatsLinearType_0
          y_FunctionalSizeStats_StatsLinearType_0
          {$$ = new ThreadCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
          }
        ;

y_ThreadCharacteristicStats_ThreadCharacteristicStatsEvalType :
          ThreadCharacteristicStatsSTART
          y_ThreadCharacteristicStatsEvalType ThreadCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ThreadCharacteristicStats";
          }
        ;

y_ThreadClassEnumType :
          DATASTRING
          {$$ = new ThreadClassEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ThreadClassEnumType value");
          }
        ;

y_ThreadClassEnum_ThreadClassEnumType :
          ThreadClassEnumSTART ENDITEM {yyReadData = 1;}
          y_ThreadClassEnumType ThreadClassEnumEND
          {$$ = $4;}
        ;

y_ThreadClassType :
          ENDITEM y_ThreadClassTypeChoicePair
          {$$ = new ThreadClassType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThreadClassTypeChoicePair :
          y_OtherThreadClass_XmlString
          {$$ = new ThreadClassTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadClassTypeType = ThreadClassTypeChoicePair::OtherThreadClassE;
           $$->ThreadClassTypeValue.OtherThreadClass = $1;
          }
        | y_ThreadClassEnum_ThreadClassEnumType
          {$$ = new ThreadClassTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadClassTypeType = ThreadClassTypeChoicePair::ThreadClassEnumE;
           $$->ThreadClassTypeValue.ThreadClassEnum = $1;
          }
        ;

y_ThreadDensity_SpecifiedDecimalType :
          ThreadDensitySTART y_SpecifiedDecimalType ThreadDensityEND
          {$$ = $2;}
        ;

y_ThreadLeadDistance_LinearValueType :
          ThreadLeadDistanceSTART y_LinearValueType ThreadLeadDistanceEND
          {$$ = $2;}
        ;

y_ThreadLeadStarts_NaturalType :
          ThreadLeadStartsSTART ENDITEM {yyReadData = 1;} y_NaturalType
          ThreadLeadStartsEND
          {$$ = $4;}
        ;

y_ThreadLengthEngagement_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ThreadLengthEngagementSTART y_LinearValueType
          ThreadLengthEngagementEND
          {$$ = $2;}
        ;

y_ThreadPitch_LinearValueType :
          ThreadPitchSTART y_LinearValueType ThreadPitchEND
          {$$ = $2;}
        ;

y_ThreadSeriesEnumType :
          DATASTRING
          {$$ = new ThreadSeriesEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ThreadSeriesEnumType value");
          }
        ;

y_ThreadSeriesEnum_ThreadSeriesEnumType :
          ThreadSeriesEnumSTART ENDITEM {yyReadData = 1;}
          y_ThreadSeriesEnumType ThreadSeriesEnumEND
          {$$ = $4;}
        ;

y_ThreadSeriesType :
          ENDITEM y_ThreadSeriesTypeChoicePair
          {$$ = new ThreadSeriesType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThreadSeriesTypeChoicePair :
          y_OtherThreadSeries_XmlString
          {$$ = new ThreadSeriesTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadSeriesTypeType = ThreadSeriesTypeChoicePair::OtherThreadSeriesE;
           $$->ThreadSeriesTypeValue.OtherThreadSeries = $1;
          }
        | y_ThreadSeriesEnum_ThreadSeriesEnumType
          {$$ = new ThreadSeriesTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadSeriesTypeType = ThreadSeriesTypeChoicePair::ThreadSeriesEnumE;
           $$->ThreadSeriesTypeValue.ThreadSeriesEnum = $1;
          }
        ;

y_ThreadSeries_ThreadSeriesType :
          ThreadSeriesSTART y_ThreadSeriesType ThreadSeriesEND
          {$$ = $2;}
        ;

y_ThreadSpecificationId_QIFReferenceType :
          ThreadSpecificationIdSTART y_QIFReferenceType
          ThreadSpecificationIdEND
          {$$ = $2;}
        ;

y_ThreadSpecificationType :
          ENDITEM y_ThreadSpecificationTypeChoicePair
          {$$ = new ThreadSpecificationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThreadSpecificationTypeChoicePair :
          y_MultiLeadSpecification_MultiLeadThreadSpecificationType
          {$$ = new ThreadSpecificationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadSpecificationTypeType = ThreadSpecificationTypeChoicePair::MultiLeadSpecificationE;
           $$->ThreadSpecificationTypeValue.MultiLeadSpecification = $1;
          }
        | y_SingleLeadSpecification_SingleLeadThreadSpecificationType
          {$$ = new ThreadSpecificationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadSpecificationTypeType = ThreadSpecificationTypeChoicePair::SingleLeadSpecificationE;
           $$->ThreadSpecificationTypeValue.SingleLeadSpecification = $1;
          }
        | y_TextThreadSpecification_TextThreadSpecificationType
          {$$ = new ThreadSpecificationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadSpecificationTypeType = ThreadSpecificationTypeChoicePair::TextThreadSpecificationE;
           $$->ThreadSpecificationTypeValue.TextThreadSpecification = $1;
          }
        ;

y_ThreadSpecification_ThreadSpecificationType :
          ThreadSpecificationSTART y_ThreadSpecificationType
          ThreadSpecificationEND
          {$$ = $2;}
        ;

y_ThreadSpecificationsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | ThreadSpecificationsCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt ThreadSpecificationsCountEND
          {$$ = $4;}
        ;

y_ThreadSpecificationsType :
          y_LiztAttributePair ENDITEM
          y_LiztThreadSpecification_ThreadSpecificationType_1_u
          {$$ = new ThreadSpecificationsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadSpecificationsType attributes");
             }
           delete $1;
          }
        ;

y_ThreadSpecifications_ThreadSpecificationsType_0 :
          /* empty */
          {$$ = 0;}
        | ThreadSpecificationsSTART y_ThreadSpecificationsType
          ThreadSpecificationsEND
          {$$ = $2;}
        ;

y_ThreadStats_StatsPassFailType_0 :
          /* empty */
          {$$ = 0;}
        | ThreadStatsSTART y_StatsPassFailType ThreadStatsEND
          {$$ = $2;
           $$->printElement = "ThreadStats";
          }
        ;

y_ThreadToleranceClass_ThreadClassType :
          ThreadToleranceClassSTART y_ThreadClassType
          ThreadToleranceClassEND
          {$$ = $2;}
        ;

y_ThreadedFeatureBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_6_u_Check
          {$$ = new ThreadedFeatureBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadedFeatureBestFitType attributes");
             }
           delete $1;
          }
        ;

y_ThreadedFeatureCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new ThreadedFeatureCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ThreadedFeatureCheckedFeatureType :
          ENDITEM y_CheckDetails_ThreadedFeatureCheckedType_0
          {$$ = new ThreadedFeatureCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThreadedFeatureCheckedType :
          ENDITEM y_ThreadedFeatureCheckedTypeChoicePair
          {$$ = new ThreadedFeatureCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThreadedFeatureCheckedTypeChoicePair :
          y_Constructed_ThreadedFeatureConstructionMethodType
          {$$ = new ThreadedFeatureCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureCheckedTypeType = ThreadedFeatureCheckedTypeChoicePair::ConstructedE;
           $$->ThreadedFeatureCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new ThreadedFeatureCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureCheckedTypeType = ThreadedFeatureCheckedTypeChoicePair::MeasuredE;
           $$->ThreadedFeatureCheckedTypeValue.Measured = $1;
          }
        ;

y_ThreadedFeatureConstructionMethodType :
          ENDITEM y_ThreadedFeatureConstructionMethodTypeChoicePair
          {$$ = new ThreadedFeatureConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThreadedFeatureConstructionMethodTypeChoicePair :
          y_BestFit_ThreadedFeatureBestFitType
          {$$ = new ThreadedFeatureConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureConstructionMethodTypeType = ThreadedFeatureConstructionMethodTypeChoicePair::BestFitE;
           $$->ThreadedFeatureConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_ThreadedFeatureCastType
          {$$ = new ThreadedFeatureConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureConstructionMethodTypeType = ThreadedFeatureConstructionMethodTypeChoicePair::CastE;
           $$->ThreadedFeatureConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_ThreadedFeatureCopyType
          {$$ = new ThreadedFeatureConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureConstructionMethodTypeType = ThreadedFeatureConstructionMethodTypeChoicePair::CopyE;
           $$->ThreadedFeatureConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromCylinder_ThreadedFeatureFromCylinderType
          {$$ = new ThreadedFeatureConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureConstructionMethodTypeType = ThreadedFeatureConstructionMethodTypeChoicePair::FromCylinderE;
           $$->ThreadedFeatureConstructionMethodTypeValue.FromCylinder = $1;
          }
        | y_Recompensated_ThreadedFeatureRecompType
          {$$ = new ThreadedFeatureConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureConstructionMethodTypeType = ThreadedFeatureConstructionMethodTypeChoicePair::RecompensatedE;
           $$->ThreadedFeatureConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_ThreadedFeatureTransformType
          {$$ = new ThreadedFeatureConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureConstructionMethodTypeType = ThreadedFeatureConstructionMethodTypeChoicePair::TransformE;
           $$->ThreadedFeatureConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_ThreadedFeatureCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseThreadedFeature_BaseFeatureType
          {$$ = new ThreadedFeatureCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ThreadedFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_ThreadSpecificationId_QIFReferenceType
          y_Length_LinearValueType_0 y_Bottom_BottomType_0
          {$$ = new ThreadedFeatureDefinitionType($3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadedFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ThreadedFeatureDefinition_ThreadedFeatureDefinitionType :
          ThreadedFeatureDefinitionSTART y_ThreadedFeatureDefinitionType
          ThreadedFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "ThreadedFeatureDefinition";
          }
        ;

y_ThreadedFeatureFromCylinderType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseCylinder_BaseFeatureType y_Offset_LinearValueType_0
          {$$ = new ThreadedFeatureFromCylinderType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ThreadedFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_ThreadedFeatureMeasurementDeterminationType
          {$$ = new ThreadedFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadedFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_ThreadedFeatureItem_ThreadedFeatureItemType :
          ThreadedFeatureItemSTART y_ThreadedFeatureItemType
          ThreadedFeatureItemEND
          {$$ = $2;
           $$->printElement = "ThreadedFeatureItem";
          }
        ;

y_ThreadedFeatureMeasurementDeterminationType :
          ENDITEM y_ThreadedFeatureMeasurementDeterminationTypeChoicePair
          {$$ = new ThreadedFeatureMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ThreadedFeatureMeasurementDeterminationTypeChoicePair :
          y_Checked_ThreadedFeatureCheckedFeatureType
          {$$ = new ThreadedFeatureMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureMeasurementDeterminationTypeType = ThreadedFeatureMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->ThreadedFeatureMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new ThreadedFeatureMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ThreadedFeatureMeasurementDeterminationTypeType = ThreadedFeatureMeasurementDeterminationTypeChoicePair::SetE;
           $$->ThreadedFeatureMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_ThreadedFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0 y_Axis_MeasuredAxisType_0
          y_PitchDiameter_MeasuredLinearValueType_0
          y_FunctionalSize_MeasuredLinearValueType_0
          y_Length_MeasuredLinearValueType_0
          {$$ = new ThreadedFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadedFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ThreadedFeatureMeasurement_ThreadedFeatureMeasurementType :
          ThreadedFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new ThreadedFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ThreadedFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ThreadedFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | ThreadedFeatureMeasurementSTART y_ThreadedFeatureMeasurementType
          ThreadedFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "ThreadedFeatureMeasurement";
          }
        ;

y_ThreadedFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Axis_AxisType
          y_Constructed_ThreadedFeatureConstructionMethodType_0
          {$$ = new ThreadedFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ThreadedFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_ThreadedFeatureNominal_ThreadedFeatureNominalType :
          ThreadedFeatureNominalSTART y_ThreadedFeatureNominalType
          ThreadedFeatureNominalEND
          {$$ = $2;
           $$->printElement = "ThreadedFeatureNominal";
          }
        ;

y_ThreadedFeatureRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new ThreadedFeatureRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ThreadedFeatureTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseThreadedFeature_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new ThreadedFeatureTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Through_PlaneThroughType :
          ThroughSTART y_PlaneThroughType ThroughEND
          {$$ = $2;
           $$->printElement = "Through";
          }
        ;

y_TimeAbsoluteLinearity_MeasuredTimeValueType :
          TimeAbsoluteLinearitySTART y_MeasuredTimeValueType
          TimeAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_TimeCharacteris_1073_TimeCharacteris_1073_Type :
          y_TimeCharacteris_1073_Type
          {$$ = $1;}
        ;

y_TimeCharacteris_1073_Type :
          y_TimeCharacteris_1073_TypeChoicePair
          {$$ = new TimeCharacteris_1073_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_TimeCharacteris_1073_TypeChoicePair :
          y_NonTolerance_NonToleranceEnumType
          {$$ = new TimeCharacteris_1073_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TimeCharacteris_1073_TypeType = TimeCharacteris_1073_TypeChoicePair::NonToleranceE;
           $$->TimeCharacteris_1073_TypeValue.NonTolerance = $1;
          }
        | y_Tolerance_TimeToleranceType
          {$$ = new TimeCharacteris_1073_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TimeCharacteris_1073_TypeType = TimeCharacteris_1073_TypeChoicePair::ToleranceE;
           $$->TimeCharacteris_1073_TypeValue.Tolerance = $1;
          }
        ;

y_TimeCreated_XmlDateTime_0 :
          /* empty */
          {$$ = 0;}
        | TimeCreatedSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          TimeCreatedEND
          {$$ = $4;}
        ;

y_TimeCriterion_CriterionTimeType_0 :
          /* empty */
          {$$ = 0;}
        | TimeCriterionSTART y_CriterionTimeType TimeCriterionEND
          {$$ = $2;
           $$->printElement = "TimeCriterion";
          }
        ;

y_TimeDescriptionEnumType :
          DATASTRING
          {$$ = new TimeDescriptionEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad TimeDescriptionEnumType value");
          }
        ;

y_TimeDescriptionEnum_TimeDescriptionEnumType :
          TimeDescriptionEnumSTART ENDITEM {yyReadData = 1;}
          y_TimeDescriptionEnumType TimeDescriptionEnumEND
          {$$ = $4;}
        ;

y_TimeDescriptionType :
          ENDITEM y_TimeDescriptionTypeChoicePair
          {$$ = new TimeDescriptionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TimeDescriptionTypeChoicePair :
          y_OtherTimeDescription_XmlString
          {$$ = new TimeDescriptionTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TimeDescriptionTypeType = TimeDescriptionTypeChoicePair::OtherTimeDescriptionE;
           $$->TimeDescriptionTypeValue.OtherTimeDescription = $1;
          }
        | y_TimeDescriptionEnum_TimeDescriptionEnumType
          {$$ = new TimeDescriptionTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TimeDescriptionTypeType = TimeDescriptionTypeChoicePair::TimeDescriptionEnumE;
           $$->TimeDescriptionTypeValue.TimeDescriptionEnum = $1;
          }
        ;

y_TimeDescription_TimeDescriptionType_0 :
          /* empty */
          {$$ = 0;}
        | TimeDescriptionSTART y_TimeDescriptionType TimeDescriptionEND
          {$$ = $2;}
        ;

y_TimeLimit_TimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | TimeLimitSTART y_TimeValueType TimeLimitEND
          {$$ = $2;}
        ;

y_TimeMeasurement_MeasuredTimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | TimeMeasurementSTART y_MeasuredTimeValueType TimeMeasurementEND
          {$$ = $2;}
        ;

y_TimeOccurred_XmlDateTime_0 :
          /* empty */
          {$$ = 0;}
        | TimeOccurredSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          TimeOccurredEND
          {$$ = $4;}
        ;

y_TimeStamp_XmlDateTime :
          TimeStampSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          TimeStampEND
          {$$ = $4;}
        ;

y_TimeStamp_XmlDateTime_0 :
          /* empty */
          {$$ = 0;}
        | TimeStampSTART ENDITEM {yyReadData = 1;} y_XmlDateTime
          TimeStampEND
          {$$ = $4;}
        ;

y_TimeStamps_ListDateTimeType :
          TimeStampsSTART y_ListDateTimeType TimeStampsEND
          {$$ = $2;}
        ;

y_TimeStatsSummaries_SummariesStatisticsTimeType_0 :
          /* empty */
          {$$ = 0;}
        | TimeStatsSummariesSTART y_SummariesStatisticsTimeType
          TimeStatsSummariesEND
          {$$ = $2;}
        ;

y_TimeStatsSummary_SummaryStatisticsTimeType :
          TimeStatsSummarySTART y_SummaryStatisticsTimeType
          TimeStatsSummaryEND
          {$$ = $2;
           $$->printElement = "TimeStatsSummary";
          }
        ;

y_TimeToleranceTy_1025_TimeToleranceTy_1025_Type :
          y_TimeToleranceTy_1025_Type
          {$$ = $1;}
        ;

y_TimeToleranceTy_1025_Type :
          y_TimeToleranceTy_1025_TypeChoicePair
          {$$ = new TimeToleranceTy_1025_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_TimeToleranceTy_1025_TypeChoicePair :
          y_MinValue_TimeValueType
          {$$ = new TimeToleranceTy_1025_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TimeToleranceTy_1025_TypeType = TimeToleranceTy_1025_TypeChoicePair::MinValueE;
           $$->TimeToleranceTy_1025_TypeValue.MinValue = $1;
          }
        | y_TimeToleranceTy_1040_TimeToleranceTy_1040_Type
          {$$ = new TimeToleranceTy_1025_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TimeToleranceTy_1025_TypeType = TimeToleranceTy_1025_TypeChoicePair::TimeToleranceTy_1040E;
           $$->TimeToleranceTy_1025_TypeValue.TimeToleranceTy_1040 = $1;
          }
        ;

y_TimeToleranceTy_1040_TimeToleranceTy_1040_Type :
          y_TimeToleranceTy_1040_Type
          {$$ = $1;}
        ;

y_TimeToleranceTy_1040_Type :
          y_MaxValue_TimeValueType y_MinValue_TimeValueType_0
          {$$ = new TimeToleranceTy_1040_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TimeToleranceType :
          ENDITEM y_TimeToleranceTy_1025_TimeToleranceTy_1025_Type
          y_DefinedAsLimit_XmlBoolean y_Attributes_AttributesType_0
          {$$ = new TimeToleranceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TimeUnitType :
          ENDITEM y_SIUnitName_XmlToken_0 y_UnitName_XmlToken
          y_UnitConversion_UnitConversionType_0
          {$$ = new TimeUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TimeUnit_TimeUnitType :
          TimeUnitSTART y_TimeUnitType TimeUnitEND
          {$$ = $2;}
        ;

y_TimeUnit_TimeUnitType_0 :
          /* empty */
          {$$ = 0;}
        | TimeUnitSTART y_TimeUnitType TimeUnitEND
          {$$ = $2;}
        ;

y_TimeValueType :
          ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new TimeValueType($3);
           yyUnrefMap[$$] = $$;
           free($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new TimeValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TimeValueType attributes");
             }
           delete $1;
          }
        ;

y_TimesType :
          ENDITEM y_LiztArithmeticExpression_substituteType_2_u_Check
          {$$ = new TimesType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Times_TimesType :
          TimesSTART y_TimesType TimesEND
          {$$ = $2;
           $$->printElement = "Times";
          }
        ;

y_TipEndDiameter_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | TipEndDiameterSTART y_LinearValueType TipEndDiameterEND
          {$$ = $2;}
        ;

y_TipEndGeometryEnumType :
          DATASTRING
          {$$ = new TipEndGeometryEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad TipEndGeometryEnumType value");
          }
        ;

y_TipEndGeometryEnum_TipEndGeometryEnumType :
          TipEndGeometryEnumSTART ENDITEM {yyReadData = 1;}
          y_TipEndGeometryEnumType TipEndGeometryEnumEND
          {$$ = $4;}
        ;

y_TipEndGeometryType :
          ENDITEM y_TipEndGeometryTypeChoicePair
          {$$ = new TipEndGeometryType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TipEndGeometryTypeChoicePair :
          y_OtherTipEndGeometry_XmlString
          {$$ = new TipEndGeometryTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TipEndGeometryTypeType = TipEndGeometryTypeChoicePair::OtherTipEndGeometryE;
           $$->TipEndGeometryTypeValue.OtherTipEndGeometry = $1;
          }
        | y_TipEndGeometryEnum_TipEndGeometryEnumType
          {$$ = new TipEndGeometryTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TipEndGeometryTypeType = TipEndGeometryTypeChoicePair::TipEndGeometryEnumE;
           $$->TipEndGeometryTypeValue.TipEndGeometryEnum = $1;
          }
        ;

y_TipEndGeometry_TipEndGeometryType_0 :
          /* empty */
          {$$ = 0;}
        | TipEndGeometrySTART y_TipEndGeometryType TipEndGeometryEND
          {$$ = $2;}
        ;

y_TipEndLocation_PointType :
          TipEndLocationSTART y_PointType TipEndLocationEND
          {$$ = $2;}
        ;

y_TipEndMaterial_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | TipEndMaterialSTART ENDITEM {yyReadData = 1;} y_XmlString
          TipEndMaterialEND
          {$$ = $4;}
        ;

y_TipId_QIFReferenceType :
          TipIdSTART y_QIFReferenceType TipIdEND
          {$$ = $2;}
        ;

y_TipId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | TipIdSTART y_QIFReferenceType TipIdEND
          {$$ = $2;}
        ;

y_TipIds_ListQIFReferenceType :
          TipIdsSTART y_ListQIFReferenceType TipIdsEND
          {$$ = $2;}
        ;

y_Title_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | TitleSTART ENDITEM {yyReadData = 1;} y_XmlString TitleEND
          {$$ = $4;}
        ;

y_ToCurveZoneId_QIFReferenceFullType :
          ToCurveZoneIdSTART y_QIFReferenceFullType ToCurveZoneIdEND
          {$$ = $2;}
        ;

y_ToPointOuterDisposition_LinearValueType :
          ToPointOuterDispositionSTART y_LinearValueType
          ToPointOuterDispositionEND
          {$$ = $2;}
        ;

y_ToPointToleranceValue_LinearValueType :
          ToPointToleranceValueSTART y_LinearValueType
          ToPointToleranceValueEND
          {$$ = $2;}
        ;

y_ToPointToleranceValue_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ToPointToleranceValueSTART y_LinearValueType
          ToPointToleranceValueEND
          {$$ = $2;}
        ;

y_ToPointUnequallyDisposedZone_LinearValueType :
          ToPointUnequallyDisposedZoneSTART y_LinearValueType
          ToPointUnequallyDisposedZoneEND
          {$$ = $2;}
        ;

y_ToPointZoneId_QIFReferenceFullType :
          ToPointZoneIdSTART y_QIFReferenceFullType ToPointZoneIdEND
          {$$ = $2;}
        ;

y_TokenConstantType :
          y_LiztAttributePair
          {$$ = new TokenConstantType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TokenConstantType attributes");
             }
           delete $1;
          }
        ;

y_TokenConstant_TokenConstantType :
          TokenConstantSTART y_TokenConstantType ENDWHOLEITEM
          {$$ = $2;
           $$->printElement = "TokenConstant";
          }
        ;

y_TokenEqualType :
          ENDITEM y_LiztTokenExpression_substituteType_2_2_Check
          {$$ = new TokenEqualType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TokenEqual_TokenEqualType :
          TokenEqualSTART y_TokenEqualType TokenEqualEND
          {$$ = $2;
           $$->printElement = "TokenEqual";
          }
        ;

y_TokenExpression_substituteType :
          y_TokenConstant_TokenConstantType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TokenParameterValue_TokenParameterValueType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_TokenParameterValueType :
          ENDITEM y_Parameter_XmlToken y_ObjectId_QIFReferenceFullType
          {$$ = new TokenParameterValueType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_TokenParameterValue_TokenParameterValueType :
          TokenParameterValueSTART y_TokenParameterValueType
          TokenParameterValueEND
          {$$ = $2;
           $$->printElement = "TokenParameterValue";
          }
        ;

y_ToleranceDefinitionsType :
          y_LiztAttributePair ENDITEM
          y_LiztToleranceDefinitionsTypeChoicePair
          {$$ = new ToleranceDefinitionsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToleranceDefinitionsType attributes");
             }
           delete $1;
          }
        ;

y_ToleranceDefinitionsTypeChoicePair :
          y_AngularTolerance_AngularToleranceDefinitionType
          {$$ = new ToleranceDefinitionsTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToleranceDefinitionsTypeType = ToleranceDefinitionsTypeChoicePair::AngularToleranceE;
           $$->ToleranceDefinitionsTypeValue.AngularTolerance = $1;
          }
        | y_LinearTolerance_LinearToleranceDefinitionType
          {$$ = new ToleranceDefinitionsTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToleranceDefinitionsTypeType = ToleranceDefinitionsTypeChoicePair::LinearToleranceE;
           $$->ToleranceDefinitionsTypeValue.LinearTolerance = $1;
          }
        ;

y_ToleranceDualValue_LinearDualValueType_0 :
          /* empty */
          {$$ = 0;}
        | ToleranceDualValueSTART y_LinearDualValueType
          ToleranceDualValueEND
          {$$ = $2;}
        ;

y_ToleranceValuePerUnit_LinearValueType :
          ToleranceValuePerUnitSTART y_LinearValueType
          ToleranceValuePerUnitEND
          {$$ = $2;}
        ;

y_ToleranceValue_LinearValueType :
          ToleranceValueSTART y_LinearValueType ToleranceValueEND
          {$$ = $2;}
        ;

y_ToleranceZonePe_1026_ToleranceZonePe_1026_Type :
          y_ToleranceZonePe_1026_Type
          {$$ = $1;}
        ;

y_ToleranceZonePe_1026_Type :
          y_ToleranceZonePe_1026_TypeChoicePair
          {$$ = new ToleranceZonePe_1026_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ToleranceZonePe_1026_TypeChoicePair :
          y_CircularUnitArea_CircularUnitAreaType
          {$$ = new ToleranceZonePe_1026_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToleranceZonePe_1026_TypeType = ToleranceZonePe_1026_TypeChoicePair::CircularUnitAreaE;
           $$->ToleranceZonePe_1026_TypeValue.CircularUnitArea = $1;
          }
        | y_RectangularUnitArea_RectangularUnitAreaType
          {$$ = new ToleranceZonePe_1026_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToleranceZonePe_1026_TypeType = ToleranceZonePe_1026_TypeChoicePair::RectangularUnitAreaE;
           $$->ToleranceZonePe_1026_TypeValue.RectangularUnitArea = $1;
          }
        ;

y_ToleranceZonePerUnitAngleType :
          ENDITEM y_ToleranceValuePerUnit_LinearValueType
          y_UnitAngle_AngularValueType
          {$$ = new ToleranceZonePerUnitAngleType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ToleranceZonePerUnitAngle_ToleranceZonePerUnitAngleType :
          ToleranceZonePerUnitAngleSTART y_ToleranceZonePerUnitAngleType
          ToleranceZonePerUnitAngleEND
          {$$ = $2;}
        ;

y_ToleranceZonePerUnitArcLength_ToleranceZonePerUnitLengthType :
          ToleranceZonePerUnitArcLengthSTART
          y_ToleranceZonePerUnitLengthType ToleranceZonePerUnitArcLengthEND
          {$$ = $2;}
        ;

y_ToleranceZonePerUnitAreaType :
          ENDITEM y_ToleranceValuePerUnit_LinearValueType
          y_ToleranceZonePe_1026_ToleranceZonePe_1026_Type
          {$$ = new ToleranceZonePerUnitAreaType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType :
          ToleranceZonePerUnitAreaSTART y_ToleranceZonePerUnitAreaType
          ToleranceZonePerUnitAreaEND
          {$$ = $2;}
        ;

y_ToleranceZonePerUnitArea_ToleranceZonePerUnitAreaType_0 :
          /* empty */
          {$$ = 0;}
        | ToleranceZonePerUnitAreaSTART y_ToleranceZonePerUnitAreaType
          ToleranceZonePerUnitAreaEND
          {$$ = $2;}
        ;

y_ToleranceZonePerUnitLengthType :
          ENDITEM y_ToleranceValuePerUnit_LinearValueType
          y_UnitLength_LinearValueType
          {$$ = new ToleranceZonePerUnitLengthType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType :
          ToleranceZonePerUnitLengthSTART y_ToleranceZonePerUnitLengthType
          ToleranceZonePerUnitLengthEND
          {$$ = $2;}
        ;

y_ToleranceZonePerUnitLength_ToleranceZonePerUnitLengthType_0 :
          /* empty */
          {$$ = 0;}
        | ToleranceZonePerUnitLengthSTART y_ToleranceZonePerUnitLengthType
          ToleranceZonePerUnitLengthEND
          {$$ = $2;}
        ;

y_ToleranceZonePerUnitPolarAreaType :
          ENDITEM y_ToleranceValuePerUnit_LinearValueType
          y_UnitAngle_AngularValueType y_UnitLength_LinearValueType
          {$$ = new ToleranceZonePerUnitPolarAreaType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ToleranceZonePerUnitPolarArea_ToleranceZonePerUnitPolarAreaType :
          ToleranceZonePerUnitPolarAreaSTART
          y_ToleranceZonePerUnitPolarAreaType
          ToleranceZonePerUnitPolarAreaEND
          {$$ = $2;}
        ;

y_Tolerance_AngularToleranceType :
          ToleranceSTART y_AngularToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_AreaToleranceType :
          ToleranceSTART y_AreaToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_ForceToleranceType :
          ToleranceSTART y_ForceToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_LinearToleranceType :
          ToleranceSTART y_LinearToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_MassToleranceType :
          ToleranceSTART y_MassToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_PressureToleranceType :
          ToleranceSTART y_PressureToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_SpeedToleranceType :
          ToleranceSTART y_SpeedToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_TemperatureToleranceType :
          ToleranceSTART y_TemperatureToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_Tolerance_TimeToleranceType :
          ToleranceSTART y_TimeToleranceType ToleranceEND
          {$$ = $2;}
        ;

y_ToolIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ToolIdsSTART y_ArrayReferenceType ToolIdsEND
          {$$ = $2;}
        ;

y_ToolWithCCDCameraSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_ChargeCoupledDeviceCameraSensor_ChargeCoupledDeviceCameraSensorType
          {$$ = new ToolWithCCDCameraSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithCCDCameraSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithCCDCameraSensor_ToolWithCCDCameraSensorType :
          ToolWithCCDCameraSensorSTART y_ToolWithCCDCameraSensorType
          ToolWithCCDCameraSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithCCDCameraSensor";
          }
        ;

y_ToolWithCapacitiveSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_CapacitiveSensor_CapacitiveSensorType
          {$$ = new ToolWithCapacitiveSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithCapacitiveSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithCapacitiveSensor_ToolWithCapacitiveSensorType :
          ToolWithCapacitiveSensorSTART y_ToolWithCapacitiveSensorType
          ToolWithCapacitiveSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithCapacitiveSensor";
          }
        ;

y_ToolWithComplexTactileProbeSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_ComplexTactileProbeSensor_ComplexTactileProbeSensorType
          {$$ = new ToolWithComplexTactileProbeSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithComplexTactileProbeSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithComplexTactileProbeSensor_ToolWithComplexTactileProbeSensorType :
          ToolWithComplexTactileProbeSensorSTART
          y_ToolWithComplexTactileProbeSensorType
          ToolWithComplexTactileProbeSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithComplexTactileProbeSensor";
          }
        ;

y_ToolWithConfocalChromaticSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_ConfocalChromaticSensor_ConfocalChromaticSensorType
          {$$ = new ToolWithConfocalChromaticSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithConfocalChromaticSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithConfocalChromaticSensor_ToolWithConfocalChromaticSensorType :
          ToolWithConfocalChromaticSensorSTART
          y_ToolWithConfocalChromaticSensorType
          ToolWithConfocalChromaticSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithConfocalChromaticSensor";
          }
        ;

y_ToolWithDVRTSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_DVRTSensor_DifferentialVariableReluctanceTransducerSensorType
          {$$ = new ToolWithDVRTSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithDVRTSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithDVRTSensor_ToolWithDVRTSensorType :
          ToolWithDVRTSensorSTART y_ToolWithDVRTSensorType
          ToolWithDVRTSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithDVRTSensor";
          }
        ;

y_ToolWithDetachableSensorsType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_SensorIds_ArrayReferenceType_0
          {$$ = new ToolWithDetachableSensorsType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithDetachableSensorsType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithDetachableSensors_ToolWithDetachableSensorsType :
          ToolWithDetachableSensorsSTART y_ToolWithDetachableSensorsType
          ToolWithDetachableSensorsEND
          {$$ = $2;
           $$->printElement = "ToolWithDetachableSensors";
          }
        ;

y_ToolWithDrawWireSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_DrawWireSensor_DrawWireSensorType
          {$$ = new ToolWithDrawWireSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithDrawWireSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithDrawWireSensor_ToolWithDrawWireSensorType :
          ToolWithDrawWireSensorSTART y_ToolWithDrawWireSensorType
          ToolWithDrawWireSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithDrawWireSensor";
          }
        ;

y_ToolWithEddyCurrentSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_EddyCurrentSensor_EddyCurrentSensorType
          {$$ = new ToolWithEddyCurrentSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithEddyCurrentSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithEddyCurrentSensor_ToolWithEddyCurrentSensorType :
          ToolWithEddyCurrentSensorSTART y_ToolWithEddyCurrentSensorType
          ToolWithEddyCurrentSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithEddyCurrentSensor";
          }
        ;

y_ToolWithLVDTSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_LVDTSensor_LinearVariableDifferentialTransformerSensorType
          {$$ = new ToolWithLVDTSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithLVDTSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithLVDTSensor_ToolWithLVDTSensorType :
          ToolWithLVDTSensorSTART y_ToolWithLVDTSensorType
          ToolWithLVDTSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithLVDTSensor";
          }
        ;

y_ToolWithLaserTriangulationSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_LaserTriangulationSensor_LaserTriangulationSensorType
          {$$ = new ToolWithLaserTriangulationSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithLaserTriangulationSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithLaserTriangulationSensor_ToolWithLaserTriangulationSensorType :
          ToolWithLaserTriangulationSensorSTART
          y_ToolWithLaserTriangulationSensorType
          ToolWithLaserTriangulationSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithLaserTriangulationSensor";
          }
        ;

y_ToolWithMagnetoInductiveSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_MagnetoInductiveSensor_MagnetoInductiveSensorType
          {$$ = new ToolWithMagnetoInductiveSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithMagnetoInductiveSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithMagnetoInductiveSensor_ToolWithMagnetoInductiveSensorType :
          ToolWithMagnetoInductiveSensorSTART
          y_ToolWithMagnetoInductiveSensorType
          ToolWithMagnetoInductiveSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithMagnetoInductiveSensor";
          }
        ;

y_ToolWithSimpleTactileProbeSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_SimpleTactileProbeSensor_SimpleTactileProbeSensorType
          {$$ = new ToolWithSimpleTactileProbeSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithSimpleTactileProbeSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithSimpleTactileProbeSensor_ToolWithSimpleTactileProbeSensorType :
          ToolWithSimpleTactileProbeSensorSTART
          y_ToolWithSimpleTactileProbeSensorType
          ToolWithSimpleTactileProbeSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithSimpleTactileProbeSensor";
          }
        ;

y_ToolWithStructuredLightSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_StructuredLightSensor_StructuredLightSensorType
          {$$ = new ToolWithStructuredLightSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithStructuredLightSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithStructuredLightSensor_ToolWithStructuredLightSensorType :
          ToolWithStructuredLightSensorSTART
          y_ToolWithStructuredLightSensorType
          ToolWithStructuredLightSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithStructuredLightSensor";
          }
        ;

y_ToolWithUltrasonicSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0
          y_UltrasonicSensor_UltrasonicSensorType
          {$$ = new ToolWithUltrasonicSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolWithUltrasonicSensorType attributes");
             }
           delete $1;
          }
        ;

y_ToolWithUltrasonicSensor_ToolWithUltrasonicSensorType :
          ToolWithUltrasonicSensorSTART y_ToolWithUltrasonicSensorType
          ToolWithUltrasonicSensorEND
          {$$ = $2;
           $$->printElement = "ToolWithUltrasonicSensor";
          }
        ;

y_Tool_substituteType :
          y_ToolWithCCDCameraSensor_ToolWithCCDCameraSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithCapacitiveSensor_ToolWithCapacitiveSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithComplexTactileProbeSensor_ToolWithComplexTactileProbeSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithConfocalChromaticSensor_ToolWithConfocalChromaticSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithDVRTSensor_ToolWithDVRTSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithDetachableSensors_ToolWithDetachableSensorsType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithDrawWireSensor_ToolWithDrawWireSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithEddyCurrentSensor_ToolWithEddyCurrentSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithLVDTSensor_ToolWithLVDTSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithLaserTriangulationSensor_ToolWithLaserTriangulationSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithMagnetoInductiveSensor_ToolWithMagnetoInductiveSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithSimpleTactileProbeSensor_ToolWithSimpleTactileProbeSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithStructuredLightSensor_ToolWithStructuredLightSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ToolWithUltrasonicSensor_ToolWithUltrasonicSensorType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ToolingBallSpeed_TimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | ToolingBallSpeedSTART y_TimeValueType ToolingBallSpeedEND
          {$$ = $2;}
        ;

y_ToolsType :
          y_LiztAttributePair ENDITEM y_LiztTool_substituteType_1_u
          {$$ = new ToolsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToolsType attributes");
             }
           delete $1;
          }
        ;

y_Tools_ToolsType_0 :
          /* empty */
          {$$ = 0;}
        | ToolsSTART y_ToolsType ToolsEND
          {$$ = $2;}
        ;

y_TopologyEnumType :
          DATASTRING
          {$$ = new TopologyEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad TopologyEnumType value");
          }
        ;

y_TopologySetType :
          ENDITEM y_VertexSet_VertexSetType_0 y_EdgeSet_EdgeSetType_0
          y_LoopSet_LoopSetType_0 y_FaceSet_FaceSetType_0
          y_ShellSet_ShellSetType_0 y_BodySet_BodySetType_0
          y_PointCloudSet_PointCloudSetType_0
          {$$ = new TopologySetType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_TopologySet_TopologySetType_0 :
          /* empty */
          {$$ = 0;}
        | TopologySetSTART ENDWHOLEITEM
          {$$ = new TopologySetType();
           yyUnrefMap[$$] = $$;
          }
        | TopologySetSTART y_TopologySetType TopologySetEND
          {$$ = $2;}
        ;

y_Topology_TopologyEnumType_0 :
          /* empty */
          {$$ = 0;}
        | TopologySTART ENDITEM {yyReadData = 1;} y_TopologyEnumType
          TopologyEND
          {$$ = $4;}
        ;

y_ToroidalSegmentBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_9_u_Check
          {$$ = new ToroidalSegmentBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidalSegmentBestFitType attributes");
             }
           delete $1;
          }
        ;

y_ToroidalSegmentCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new ToroidalSegmentCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ToroidalSegmentCheckedFeatureType :
          ENDITEM y_CheckDetails_ToroidalSegmentCheckedType_0
          {$$ = new ToroidalSegmentCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ToroidalSegmentCheckedType :
          ENDITEM y_ToroidalSegmentCheckedTypeChoicePair
          {$$ = new ToroidalSegmentCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ToroidalSegmentCheckedTypeChoicePair :
          y_Constructed_ToroidalSegmentConstructionMethodType
          {$$ = new ToroidalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentCheckedTypeType = ToroidalSegmentCheckedTypeChoicePair::ConstructedE;
           $$->ToroidalSegmentCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new ToroidalSegmentCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentCheckedTypeType = ToroidalSegmentCheckedTypeChoicePair::MeasuredE;
           $$->ToroidalSegmentCheckedTypeValue.Measured = $1;
          }
        ;

y_ToroidalSegmentConstructionMethodType :
          ENDITEM y_ToroidalSegmentConstructionMethodTypeChoicePair
          {$$ = new ToroidalSegmentConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ToroidalSegmentConstructionMethodTypeChoicePair :
          y_BestFit_ToroidalSegmentBestFitType
          {$$ = new ToroidalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentConstructionMethodTypeType = ToroidalSegmentConstructionMethodTypeChoicePair::BestFitE;
           $$->ToroidalSegmentConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_ToroidalSegmentCastType
          {$$ = new ToroidalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentConstructionMethodTypeType = ToroidalSegmentConstructionMethodTypeChoicePair::CastE;
           $$->ToroidalSegmentConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_ToroidalSegmentCopyType
          {$$ = new ToroidalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentConstructionMethodTypeType = ToroidalSegmentConstructionMethodTypeChoicePair::CopyE;
           $$->ToroidalSegmentConstructionMethodTypeValue.Copy = $1;
          }
        | y_Recompensated_ToroidalSegmentRecompType
          {$$ = new ToroidalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentConstructionMethodTypeType = ToroidalSegmentConstructionMethodTypeChoicePair::RecompensatedE;
           $$->ToroidalSegmentConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_ToroidalSegmentTransformType
          {$$ = new ToroidalSegmentConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentConstructionMethodTypeType = ToroidalSegmentConstructionMethodTypeChoicePair::TransformE;
           $$->ToroidalSegmentConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_ToroidalSegmentCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseToroidalSegment_BaseFeatureType
          {$$ = new ToroidalSegmentCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ToroidalSegmentFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_MinorDiameter_LinearValueType y_MajorDiameter_LinearValueType
          {$$ = new ToroidalSegmentFeatureDefinitionType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidalSegmentFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ToroidalSegmentFeatureDefinition_ToroidalSegmentFeatureDefinitionType :
          ToroidalSegmentFeatureDefinitionSTART
          y_ToroidalSegmentFeatureDefinitionType
          ToroidalSegmentFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "ToroidalSegmentFeatureDefinition";
          }
        ;

y_ToroidalSegmentFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_ToroidalSegmentMeasurementDeterminationType
          {$$ = new ToroidalSegmentFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidalSegmentFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_ToroidalSegmentFeatureItem_ToroidalSegmentFeatureItemType :
          ToroidalSegmentFeatureItemSTART y_ToroidalSegmentFeatureItemType
          ToroidalSegmentFeatureItemEND
          {$$ = $2;
           $$->printElement = "ToroidalSegmentFeatureItem";
          }
        ;

y_ToroidalSegmentFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0
          y_AxisVector_MeasuredUnitVectorType_0
          y_MinorDiameter_MeasuredLinearValueType_0
          y_MajorDiameter_MeasuredLinearValueType_0
          y_LatitudeLongitudeSweepMeasurementRange_OrientedLatitudeLongitudeSweepType_0
          y_LatitudeLongitudeSweepFull_OrientedLatitudeLongitudeSweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new ToroidalSegmentFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidalSegmentFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ToroidalSegmentFeatureMeasurement_ToroidalSegmentFeatureMeasurementType :
          ToroidalSegmentFeatureMeasurementSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new ToroidalSegmentFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "ToroidalSegmentFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad ToroidalSegmentFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | ToroidalSegmentFeatureMeasurementSTART
          y_ToroidalSegmentFeatureMeasurementType
          ToroidalSegmentFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "ToroidalSegmentFeatureMeasurement";
          }
        ;

y_ToroidalSegmentFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Location_PointType y_AxisVector_UnitVectorType
          y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType
          y_Constructed_ToroidalSegmentConstructionMethodType_0
          {$$ = new ToroidalSegmentFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidalSegmentFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_ToroidalSegmentFeatureNominal_ToroidalSegmentFeatureNominalType :
          ToroidalSegmentFeatureNominalSTART
          y_ToroidalSegmentFeatureNominalType
          ToroidalSegmentFeatureNominalEND
          {$$ = $2;
           $$->printElement = "ToroidalSegmentFeatureNominal";
          }
        ;

y_ToroidalSegmentMeasurementDeterminationType :
          ENDITEM y_ToroidalSegmentMeasurementDeterminationTypeChoicePair
          {$$ = new ToroidalSegmentMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ToroidalSegmentMeasurementDeterminationTypeChoicePair :
          y_Checked_ToroidalSegmentCheckedFeatureType
          {$$ = new ToroidalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentMeasurementDeterminationTypeType = ToroidalSegmentMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->ToroidalSegmentMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new ToroidalSegmentMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentMeasurementDeterminationTypeType = ToroidalSegmentMeasurementDeterminationTypeChoicePair::SetE;
           $$->ToroidalSegmentMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_ToroidalSegmentPointSamplingStrategyType :
          ENDITEM y_ToroidalSegmentPointSamplingStrategyTypeChoicePair
          {$$ = new ToroidalSegmentPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_ToroidalSegmentPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_SurfaceOfRevolutionPointSamplingStrategyEnumType
          {$$ = new ToroidalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentPointSamplingStrategyTypeType = ToroidalSegmentPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->ToroidalSegmentPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new ToroidalSegmentPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ToroidalSegmentPointSamplingStrategyTypeType = ToroidalSegmentPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->ToroidalSegmentPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_ToroidalSegmentRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new ToroidalSegmentRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_ToroidalSegmentTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseToroidalSegment_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new ToroidalSegmentTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ToroidicityCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          {$$ = new ToroidicityCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidicityCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_ToroidicityCharacteristicDefinition_ToroidicityCharacteristicDefinitionType :
          ToroidicityCharacteristicDefinitionSTART
          y_ToroidicityCharacteristicDefinitionType
          ToroidicityCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "ToroidicityCharacteristicDefinition";
          }
        ;

y_ToroidicityCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new ToroidicityCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidicityCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_ToroidicityCharacteristicItem_ToroidicityCharacteristicItemType :
          ToroidicityCharacteristicItemSTART
          y_ToroidicityCharacteristicItemType
          ToroidicityCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "ToroidicityCharacteristicItem";
          }
        ;

y_ToroidicityCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new ToroidicityCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidicityCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_ToroidicityCharacteristicMeasurement_ToroidicityCharacteristicMeasurementType :
          ToroidicityCharacteristicMeasurementSTART
          y_ToroidicityCharacteristicMeasurementType
          ToroidicityCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "ToroidicityCharacteristicMeasurement";
          }
        ;

y_ToroidicityCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new ToroidicityCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ToroidicityCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_ToroidicityCharacteristicNominal_ToroidicityCharacteristicNominalType :
          ToroidicityCharacteristicNominalSTART
          y_ToroidicityCharacteristicNominalType
          ToroidicityCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "ToroidicityCharacteristicNominal";
          }
        ;

y_ToroidicityCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          {$$ = new ToroidicityCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
          }
        ;

y_ToroidicityCharacteristicStats_ToroidicityCharacteristicStatsEvalType :
          ToroidicityCharacteristicStatsSTART
          y_ToroidicityCharacteristicStatsEvalType
          ToroidicityCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "ToroidicityCharacteristicStats";
          }
        ;

y_Torus23CoreType :
          ENDITEM y_DiameterMinor_XmlDouble y_DiameterMajor_XmlDouble
          y_Axis_AxisType
          y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType
          {$$ = new Torus23CoreType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        | y_LiztAttributePair ENDITEM y_DiameterMinor_XmlDouble
          y_DiameterMajor_XmlDouble y_Axis_AxisType
          y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType
          {$$ = new Torus23CoreType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Torus23CoreType attributes");
             }
           delete $1;
          }
        ;

y_Torus23Core_Torus23CoreType :
          Torus23CoreSTART y_Torus23CoreType Torus23CoreEND
          {$$ = $2;
           $$->printElement = "Torus23Core";
          }
        ;

y_Torus23Type :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Torus23Core_Torus23CoreType y_Transform_ElementReferenceType_0
          {$$ = new Torus23Type($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad Torus23Type attributes");
             }
           delete $1;
          }
        ;

y_Torus23_Torus23Type :
          Torus23START y_Torus23Type Torus23END
          {$$ = $2;
           $$->printElement = "Torus23";
          }
        ;

y_TorusBestFitType :
          y_LiztAttributePair ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_LiztBaseFeature_SequencedBaseFeatureType_9_u_Check
          {$$ = new TorusBestFitType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TorusBestFitType attributes");
             }
           delete $1;
          }
        ;

y_TorusCastType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeature_BaseFeatureType
          {$$ = new TorusCastType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_TorusCheckedFeatureType :
          ENDITEM y_CheckDetails_TorusCheckedType_0
          {$$ = new TorusCheckedFeatureType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TorusCheckedType :
          ENDITEM y_TorusCheckedTypeChoicePair
          {$$ = new TorusCheckedType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TorusCheckedTypeChoicePair :
          y_Constructed_TorusConstructionMethodType
          {$$ = new TorusCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusCheckedTypeType = TorusCheckedTypeChoicePair::ConstructedE;
           $$->TorusCheckedTypeValue.Constructed = $1;
          }
        | y_Measured_MeasuredFeatureType
          {$$ = new TorusCheckedTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusCheckedTypeType = TorusCheckedTypeChoicePair::MeasuredE;
           $$->TorusCheckedTypeValue.Measured = $1;
          }
        ;

y_TorusConstructionMethodType :
          ENDITEM y_TorusConstructionMethodTypeChoicePair
          {$$ = new TorusConstructionMethodType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TorusConstructionMethodTypeChoicePair :
          y_BestFit_TorusBestFitType
          {$$ = new TorusConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusConstructionMethodTypeType = TorusConstructionMethodTypeChoicePair::BestFitE;
           $$->TorusConstructionMethodTypeValue.BestFit = $1;
          }
        | y_Cast_TorusCastType
          {$$ = new TorusConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusConstructionMethodTypeType = TorusConstructionMethodTypeChoicePair::CastE;
           $$->TorusConstructionMethodTypeValue.Cast = $1;
          }
        | y_Copy_TorusCopyType
          {$$ = new TorusConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusConstructionMethodTypeType = TorusConstructionMethodTypeChoicePair::CopyE;
           $$->TorusConstructionMethodTypeValue.Copy = $1;
          }
        | y_FromScan_TorusFromScanType
          {$$ = new TorusConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusConstructionMethodTypeType = TorusConstructionMethodTypeChoicePair::FromScanE;
           $$->TorusConstructionMethodTypeValue.FromScan = $1;
          }
        | y_Recompensated_TorusRecompType
          {$$ = new TorusConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusConstructionMethodTypeType = TorusConstructionMethodTypeChoicePair::RecompensatedE;
           $$->TorusConstructionMethodTypeValue.Recompensated = $1;
          }
        | y_Transform_TorusTransformType
          {$$ = new TorusConstructionMethodTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusConstructionMethodTypeType = TorusConstructionMethodTypeChoicePair::TransformE;
           $$->TorusConstructionMethodTypeValue.Transform = $1;
          }
        ;

y_TorusCopyType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseTorus_BaseFeatureType
          {$$ = new TorusCopyType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_TorusFeatureDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_InternalExternal_InternalExternalEnumType
          y_MinorDiameter_LinearValueType y_MajorDiameter_LinearValueType
          {$$ = new TorusFeatureDefinitionType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TorusFeatureDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_TorusFeatureDefinition_TorusFeatureDefinitionType :
          TorusFeatureDefinitionSTART y_TorusFeatureDefinitionType
          TorusFeatureDefinitionEND
          {$$ = $2;
           $$->printElement = "TorusFeatureDefinition";
          }
        ;

y_TorusFeatureItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureNominalId_QIFReferenceFullType
          y_ParentFeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken
          y_UUID_QPIdType_0 y_NotableEventIds_ArrayReferenceType_0
          y_CoordinateSystemId_QIFReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_DeterminationMode_TorusMeasurementDeterminationType
          {$$ = new TorusFeatureItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TorusFeatureItemType attributes");
             }
           delete $1;
          }
        ;

y_TorusFeatureItem_TorusFeatureItemType :
          TorusFeatureItemSTART y_TorusFeatureItemType TorusFeatureItemEND
          {$$ = $2;
           $$->printElement = "TorusFeatureItem";
          }
        ;

y_TorusFeatureMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_FeatureItemId_QIFReferenceType_0 y_FeatureName_XmlToken_0
          y_TimeStamp_XmlDateTime_0
          y_ActualComponentId_QIFReferenceFullType_0
          y_ManufacturingProcessId_QIFReferenceFullType_0
          y_MeasurementDeviceIds_ArrayReferenceFullType_0
          y_ActualTransformId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ProxyMeasurementId_QIFReferenceType_0
          y_Location_MeasuredPointType_0
          y_AxisVector_MeasuredUnitVectorType_0
          y_MinorDiameter_MeasuredLinearValueType_0
          y_MajorDiameter_MeasuredLinearValueType_0
          y_LatitudeLongitudeSweepMeasurementRange_OrientedLatitudeLongitudeSweepType_0
          y_LatitudeLongitudeSweepFull_OrientedLatitudeLongitudeSweepType_0
          y_Form_MeasuredLinearValueType_0
          {$$ = new TorusFeatureMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TorusFeatureMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_TorusFeatureMeasurement_TorusFeatureMeasurementType :
          TorusFeatureMeasurementSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new TorusFeatureMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "TorusFeatureMeasurement";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad TorusFeatureMeasurementType attributes");
             }
           delete $2;
          }
        | TorusFeatureMeasurementSTART y_TorusFeatureMeasurementType
          TorusFeatureMeasurementEND
          {$$ = $2;
           $$->printElement = "TorusFeatureMeasurement";
          }
        ;

y_TorusFeatureNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Name_XmlToken_0 y_UUID_QPIdType_0
          y_FeatureDefinitionId_QIFReferenceType
          y_ParentFeatureNominalId_QIFReferenceType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0
          y_PointList_PointListType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_Location_PointType y_AxisVector_UnitVectorType
          y_LatitudeLongitudeSweep_LatitudeLongitudeSweepType_0
          y_Constructed_TorusConstructionMethodType_0
          {$$ = new TorusFeatureNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TorusFeatureNominalType attributes");
             }
           delete $1;
          }
        ;

y_TorusFeatureNominal_TorusFeatureNominalType :
          TorusFeatureNominalSTART y_TorusFeatureNominalType
          TorusFeatureNominalEND
          {$$ = $2;
           $$->printElement = "TorusFeatureNominal";
          }
        ;

y_TorusFromScanType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_SurfaceFeature_BaseFeatureType y_SearchRadius_LinearValueType
          {$$ = new TorusFromScanType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TorusMeasurementDeterminationType :
          ENDITEM y_TorusMeasurementDeterminationTypeChoicePair
          {$$ = new TorusMeasurementDeterminationType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TorusMeasurementDeterminationTypeChoicePair :
          y_Checked_TorusCheckedFeatureType
          {$$ = new TorusMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusMeasurementDeterminationTypeType = TorusMeasurementDeterminationTypeChoicePair::CheckedE;
           $$->TorusMeasurementDeterminationTypeValue.Checked = $1;
          }
        | y_Set_SetFeatureType
          {$$ = new TorusMeasurementDeterminationTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusMeasurementDeterminationTypeType = TorusMeasurementDeterminationTypeChoicePair::SetE;
           $$->TorusMeasurementDeterminationTypeValue.Set = $1;
          }
        ;

y_TorusPointSamplingStrategyType :
          ENDITEM y_TorusPointSamplingStrategyTypeChoicePair
          {$$ = new TorusPointSamplingStrategyType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TorusPointSamplingStrategyTypeChoicePair :
          y_PointSamplingStrategyEnum_SurfaceOfRevolutionPointSamplingStrategyEnumType
          {$$ = new TorusPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusPointSamplingStrategyTypeType = TorusPointSamplingStrategyTypeChoicePair::PointSamplingStrategyEnumE;
           $$->TorusPointSamplingStrategyTypeValue.PointSamplingStrategyEnum = $1;
          }
        | y_UserDefinedStrategy_XmlToken
          {$$ = new TorusPointSamplingStrategyTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TorusPointSamplingStrategyTypeType = TorusPointSamplingStrategyTypeChoicePair::UserDefinedStrategyE;
           $$->TorusPointSamplingStrategyTypeValue.UserDefinedStrategy = $1;
          }
        ;

y_TorusRecompType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseFeaturePointList_BaseFeaturePointListType
          {$$ = new TorusRecompType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_TorusTransformType :
          ENDITEM y_NominalsCalculated_XmlBoolean_0
          y_BaseTorus_BaseFeatureType
          y_Transformation_TransformationReferenceType
          {$$ = new TorusTransformType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TotalMagnification_XmlDecimal_0 :
          /* empty */
          {$$ = 0;}
        | TotalMagnificationSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          TotalMagnificationEND
          {$$ = $4;}
        ;

y_TotalNumber_StatsNonNegativeIntegerType :
          TotalNumberSTART y_StatsNonNegativeIntegerType TotalNumberEND
          {$$ = $2;
           $$->printElement = "TotalNumber";
          }
        ;

y_TotalRunoutCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_GeometricCharac_1057_GeometricCharac_1057_Type_0
          y_DirectionFeature_DirectionFeatureType_0
          y_CollectionPlane_CollectionPlaneType_0
          y_IntersectionPlane_IntersectionPlaneType_0
          y_OrientationPlane_OrientationPlaneType_0
          y_ToleranceValue_LinearValueType
          y_ToleranceDualValue_LinearDualValueType_0
          y_DatumReferenceFrameId_QIFReferenceFullType_0
          {$$ = new TotalRunoutCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TotalRunoutCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_TotalRunoutCharacteristicDefinition_TotalRunoutCharacteristicDefinitionType :
          TotalRunoutCharacteristicDefinitionSTART
          y_TotalRunoutCharacteristicDefinitionType
          TotalRunoutCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "TotalRunoutCharacteristicDefinition";
          }
        ;

y_TotalRunoutCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new TotalRunoutCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TotalRunoutCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_TotalRunoutCharacteristicItem_TotalRunoutCharacteristicItemType :
          TotalRunoutCharacteristicItemSTART
          y_TotalRunoutCharacteristicItemType
          TotalRunoutCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "TotalRunoutCharacteristicItem";
          }
        ;

y_TotalRunoutCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0 y_DatumsOk_XmlBoolean_0
          {$$ = new TotalRunoutCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TotalRunoutCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_TotalRunoutCharacteristicMeasurement_TotalRunoutCharacteristicMeasurementType :
          TotalRunoutCharacteristicMeasurementSTART
          y_TotalRunoutCharacteristicMeasurementType
          TotalRunoutCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "TotalRunoutCharacteristicMeasurement";
          }
        ;

y_TotalRunoutCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          {$$ = new TotalRunoutCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TotalRunoutCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_TotalRunoutCharacteristicNominal_TotalRunoutCharacteristicNominalType :
          TotalRunoutCharacteristicNominalSTART
          y_TotalRunoutCharacteristicNominalType
          TotalRunoutCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "TotalRunoutCharacteristicNominal";
          }
        ;

y_TotalRunoutCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_ValueStats_StatsWithTolLinearType_0
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          y_CapabilityCalculationMethod_OneSidedCapabilityCalculationEnumType_0
          y_DatumsOkStats_StatsPassFailType_0
          {$$ = new TotalRunoutCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
          }
        ;

y_TotalRunoutCharacteristicStats_TotalRunoutCharacteristicStatsEvalType :
          TotalRunoutCharacteristicStatsSTART
          y_TotalRunoutCharacteristicStatsEvalType
          TotalRunoutCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "TotalRunoutCharacteristicStats";
          }
        ;

y_TotalVariation_StatsMeasuredDecimalType :
          TotalVariationSTART y_StatsMeasuredDecimalType TotalVariationEND
          {$$ = $2;
           $$->printElement = "TotalVariation";
          }
        ;

y_Town_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | TownSTART ENDITEM {yyReadData = 1;} y_XmlToken TownEND
          {$$ = $4;}
        ;

y_Traceability_ActualProductTraceabilityType_0 :
          /* empty */
          {$$ = 0;}
        | TraceabilitySTART ENDWHOLEITEM
          {$$ = new ActualProductTraceabilityType();
           yyUnrefMap[$$] = $$;
          }
        | TraceabilitySTART y_ActualProductTraceabilityType TraceabilityEND
          {$$ = $2;}
        ;

y_Traceability_InspectionTraceabilityType_0 :
          /* empty */
          {$$ = 0;}
        | TraceabilitySTART ENDWHOLEITEM
          {$$ = new InspectionTraceabilityType();
           yyUnrefMap[$$] = $$;
          }
        | TraceabilitySTART y_InspectionTraceabilityType TraceabilityEND
          {$$ = $2;}
        ;

y_Traceability_ProductTraceabilityType_0 :
          /* empty */
          {$$ = 0;}
        | TraceabilitySTART ENDWHOLEITEM
          {$$ = new ProductTraceabilityType();
           yyUnrefMap[$$] = $$;
          }
        | TraceabilitySTART y_ProductTraceabilityType TraceabilityEND
          {$$ = $2;}
        ;

y_TrailingZeroDimensionalCharacteristicDisplayGroupType :
          ENDITEM y_DimensionalCharacteristicValueTarget_XmlBoolean_0
          y_DimensionalCharacteristicValueLimits_XmlBoolean_0
          y_DimensionalCharacteristicIds_ArrayReferenceFullType
          {$$ = new TrailingZeroDimensionalCharacteristicDisplayGroupType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_TrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType :
          TrailingZeroDimensionalCharacteristicDisplayGroupSTART
          y_TrailingZeroDimensionalCharacteristicDisplayGroupType
          TrailingZeroDimensionalCharacteristicDisplayGroupEND
          {$$ = $2;}
        ;

y_TrailingZeroDimensionalCharacteristicDisplayGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztTrailingZeroDimensionalCharacteristicDisplayGroup_TrailingZeroDimensionalCharacteristicDisplayGroupType_1_u
          {$$ = new TrailingZeroDimensionalCharacteristicDisplayGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TrailingZeroDimensionalCharacteristicDisplayGroupsType attributes");
             }
           delete $1;
          }
        ;

y_TrailingZeroDimensionalCharacteristicDisplayGroups_TrailingZeroDimensionalCharacteristicDisplayGroupsType_0 :
          /* empty */
          {$$ = 0;}
        | TrailingZeroDimensionalCharacteristicDisplayGroupsSTART
          y_TrailingZeroDimensionalCharacteristicDisplayGroupsType
          TrailingZeroDimensionalCharacteristicDisplayGroupsEND
          {$$ = $2;}
        ;

y_TrailingZeroDisplayType :
          ENDITEM y_DimensionalCharacteristicValueTarget_XmlBoolean_0
          y_DimensionalCharacteristicValueLimits_XmlBoolean_0
          y_GeometricCharacteristicValue_XmlBoolean_0
          y_TrailingZeroDimensionalCharacteristicDisplayGroups_TrailingZeroDimensionalCharacteristicDisplayGroupsType_0
          y_TrailingZeroGeometricCharacteristicDisplayGroups_TrailingZeroGeometricCharacteristicDisplayGroupsType_0
          {$$ = new TrailingZeroDisplayType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_TrailingZeroDisplay_TrailingZeroDisplayType_0 :
          /* empty */
          {$$ = 0;}
        | TrailingZeroDisplaySTART ENDWHOLEITEM
          {$$ = new TrailingZeroDisplayType();
           yyUnrefMap[$$] = $$;
          }
        | TrailingZeroDisplaySTART y_TrailingZeroDisplayType
          TrailingZeroDisplayEND
          {$$ = $2;}
        ;

y_TrailingZeroGeometricCharacteristicDisplayGroupType :
          ENDITEM y_GeometricCharacteristicValue_XmlBoolean
          y_GeometricCharacteristicIds_ArrayReferenceFullType
          {$$ = new TrailingZeroGeometricCharacteristicDisplayGroupType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_TrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType :
          TrailingZeroGeometricCharacteristicDisplayGroupSTART
          y_TrailingZeroGeometricCharacteristicDisplayGroupType
          TrailingZeroGeometricCharacteristicDisplayGroupEND
          {$$ = $2;}
        ;

y_TrailingZeroGeometricCharacteristicDisplayGroupsType :
          y_LiztAttributePair ENDITEM
          y_LiztTrailingZeroGeometricCharacteristicDisplayGroup_TrailingZeroGeometricCharacteristicDisplayGroupType_1_u
          {$$ = new TrailingZeroGeometricCharacteristicDisplayGroupsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TrailingZeroGeometricCharacteristicDisplayGroupsType attributes");
             }
           delete $1;
          }
        ;

y_TrailingZeroGeometricCharacteristicDisplayGroups_TrailingZeroGeometricCharacteristicDisplayGroupsType_0 :
          /* empty */
          {$$ = 0;}
        | TrailingZeroGeometricCharacteristicDisplayGroupsSTART
          y_TrailingZeroGeometricCharacteristicDisplayGroupsType
          TrailingZeroGeometricCharacteristicDisplayGroupsEND
          {$$ = $2;}
        ;

y_TranformId_QIFReferenceType :
          TranformIdSTART y_QIFReferenceType TranformIdEND
          {$$ = $2;}
        ;

y_TransformId_QIFReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | TransformIdSTART y_QIFReferenceType TransformIdEND
          {$$ = $2;}
        ;

y_TransformInstanceType :
          y_LiztAttributePair ENDITEM y_Rotation_TransformRotationType_0
          y_Origin_PointSimpleType_0 y_Attributes_AttributesType_0
          y_Name_XmlToken_0
          {$$ = new TransformInstanceType($3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TransformInstanceType attributes");
             }
           delete $1;
          }
        ;

y_TransformListType :
          y_LiztAttributePair ENDITEM
          y_LiztTransform_TransformInstanceType_1_u
          {$$ = new TransformListType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TransformListType attributes");
             }
           delete $1;
          }
        ;

y_TransformMatrixType :
          ENDITEM y_Rotation_TransformRotationType_0
          y_Origin_PointSimpleType_0
          {$$ = new TransformMatrixType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM y_Rotation_TransformRotationType_0
          y_Origin_PointSimpleType_0
          {$$ = new TransformMatrixType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TransformMatrixType attributes");
             }
           delete $1;
          }
        ;

y_TransformRotationType :
          ENDITEM y_XDirection_UnitVectorSimpleType
          y_YDirection_UnitVectorSimpleType
          y_ZDirection_UnitVectorSimpleType
          {$$ = new TransformRotationType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Transform_CircleTransformType :
          TransformSTART y_CircleTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_CircularArcTransformType :
          TransformSTART y_CircularArcTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ConeTransformType :
          TransformSTART y_ConeTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ConicalSegmentTransformType :
          TransformSTART y_ConicalSegmentTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_CylinderTransformType :
          TransformSTART y_CylinderTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_CylindricalSegmentTransformType :
          TransformSTART y_CylindricalSegmentTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_EdgePointTransformType :
          TransformSTART y_EdgePointTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ElementReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | TransformSTART y_ElementReferenceType TransformEND
          {$$ = $2;}
        ;

y_Transform_EllipseTransformType :
          TransformSTART y_EllipseTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_EllipticalArcTransformType :
          TransformSTART y_EllipticalArcTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ElongatedCircleTransformType :
          TransformSTART y_ElongatedCircleTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ElongatedCylinderTransformType :
          TransformSTART y_ElongatedCylinderTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ExtrudedCrossSectionTransformType :
          TransformSTART y_ExtrudedCrossSectionTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_LineTransformType :
          TransformSTART y_LineTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_OppositeAngledLinesTransformType :
          TransformSTART y_OppositeAngledLinesTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_OppositeAngledPlanesTransformType :
          TransformSTART y_OppositeAngledPlanesTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_OppositeParallelLinesTransformType :
          TransformSTART y_OppositeParallelLinesTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_OppositeParallelPlanesTransformType :
          TransformSTART y_OppositeParallelPlanesTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_PlaneTransformType :
          TransformSTART y_PlaneTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_PointDefinedCurveTransformType :
          TransformSTART y_PointDefinedCurveTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_PointDefinedSurfaceTransformType :
          TransformSTART y_PointDefinedSurfaceTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_PointFeatureTransformType :
          TransformSTART y_PointFeatureTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_SphereTransformType :
          TransformSTART y_SphereTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_SphericalSegmentTransformType :
          TransformSTART y_SphericalSegmentTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_SurfaceOfRevolutionTransformType :
          TransformSTART y_SurfaceOfRevolutionTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ThreadedFeatureTransformType :
          TransformSTART y_ThreadedFeatureTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_ToroidalSegmentTransformType :
          TransformSTART y_ToroidalSegmentTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_TorusTransformType :
          TransformSTART y_TorusTransformType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_Transform_TransformInstanceType :
          TransformSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new TransformInstanceType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "Transform";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad TransformInstanceType attributes");
             }
           delete $2;
          }
        | TransformSTART y_TransformInstanceType TransformEND
          {$$ = $2;
           $$->printElement = "Transform";
          }
        ;

y_TransformationReferenceType :
          ENDITEM y_ReferencedComponent_ReferencedComponentEnumType
          y_CoordinateSystemId_QIFReferenceFullType
          y_SequenceNumber_NaturalType
          {$$ = new TransformationReferenceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Transformation_TransformationReferenceType :
          TransformationSTART y_TransformationReferenceType
          TransformationEND
          {$$ = $2;}
        ;

y_TransformsCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | TransformsCountSTART ENDITEM {yyReadData = 1;} y_XmlUnsignedInt
          TransformsCountEND
          {$$ = $4;}
        ;

y_Transforms_TransformListType_0 :
          /* empty */
          {$$ = 0;}
        | TransformsSTART y_TransformListType TransformsEND
          {$$ = $2;}
        ;

y_Translate_ExplodedViewTranslateType :
          TranslateSTART y_ExplodedViewTranslateType TranslateEND
          {$$ = $2;}
        ;

y_TransparencyType :
          DATASTRING
          {$$ = new TransparencyType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad TransparencyType value");
          }
        ;

y_Transparency_TransparencyType_0 :
          /* empty */
          {$$ = 0;}
        | TransparencySTART ENDITEM {yyReadData = 1;} y_TransparencyType
          TransparencyEND
          {$$ = $4;}
        ;

y_TrendGrouping_CriterionIntegerType :
          TrendGroupingSTART y_CriterionIntegerType TrendGroupingEND
          {$$ = $2;}
        ;

y_TriangleVertexNormalType :
          y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new TriangleVertexNormalType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TriangleVertexNormalType attributes");
             }
           delete $1;
          }
        | y_TriangleVertexNormalType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TrianglesBinary_ArrayBinaryType :
          TrianglesBinarySTART y_ArrayBinaryType TrianglesBinaryEND
          {$$ = $2;}
        ;

y_TrianglesColorBinary_ArrayBinaryType :
          TrianglesColorBinarySTART y_ArrayBinaryType
          TrianglesColorBinaryEND
          {$$ = $2;}
        ;

y_TrianglesColor_ArrayUnsignedByteType :
          TrianglesColorSTART y_ArrayUnsignedByteType TrianglesColorEND
          {$$ = $2;}
        ;

y_TrianglesHiddenBinary_ArrayBinaryType :
          TrianglesHiddenBinarySTART y_ArrayBinaryType
          TrianglesHiddenBinaryEND
          {$$ = $2;}
        ;

y_TrianglesHidden_ArrayIntType :
          TrianglesHiddenSTART y_ArrayIntType TrianglesHiddenEND
          {$$ = $2;}
        ;

y_TrianglesVisibleBinary_ArrayBinaryType :
          TrianglesVisibleBinarySTART y_ArrayBinaryType
          TrianglesVisibleBinaryEND
          {$$ = $2;}
        ;

y_TrianglesVisible_ArrayIntType :
          TrianglesVisibleSTART y_ArrayIntType TrianglesVisibleEND
          {$$ = $2;}
        ;

y_Triangles_ArrayI3Type :
          TrianglesSTART y_ArrayI3Type TrianglesEND
          {$$ = $2;}
        ;

y_Triangles_ArrayIntType :
          TrianglesSTART y_ArrayIntType TrianglesEND
          {$$ = $2;}
        ;

y_Triangulation2dType :
          ENDITEM y_Triangulation2d_1233_Triangulation2d_1233_Type
          y_Triangulation2d_1234_Triangulation2d_1234_Type
          {$$ = new Triangulation2dType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Triangulation2d_1233_Triangulation2d_1233_Type :
          y_Triangulation2d_1233_Type
          {$$ = $1;}
        ;

y_Triangulation2d_1233_Type :
          y_Triangulation2d_1233_TypeChoicePair
          {$$ = new Triangulation2d_1233_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Triangulation2d_1233_TypeChoicePair :
          y_VerticesBinary_ArrayBinaryType
          {$$ = new Triangulation2d_1233_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Triangulation2d_1233_TypeType = Triangulation2d_1233_TypeChoicePair::VerticesBinaryE;
           $$->Triangulation2d_1233_TypeValue.VerticesBinary = $1;
          }
        | y_Vertices_ArrayPoint2dType
          {$$ = new Triangulation2d_1233_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Triangulation2d_1233_TypeType = Triangulation2d_1233_TypeChoicePair::VerticesE;
           $$->Triangulation2d_1233_TypeValue.Vertices = $1;
          }
        ;

y_Triangulation2d_1234_Triangulation2d_1234_Type :
          y_Triangulation2d_1234_Type
          {$$ = $1;}
        ;

y_Triangulation2d_1234_Type :
          y_Triangulation2d_1234_TypeChoicePair
          {$$ = new Triangulation2d_1234_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_Triangulation2d_1234_TypeChoicePair :
          y_TrianglesBinary_ArrayBinaryType
          {$$ = new Triangulation2d_1234_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Triangulation2d_1234_TypeType = Triangulation2d_1234_TypeChoicePair::TrianglesBinaryE;
           $$->Triangulation2d_1234_TypeValue.TrianglesBinary = $1;
          }
        | y_TrianglesColorBinary_ArrayBinaryType
          {$$ = new Triangulation2d_1234_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Triangulation2d_1234_TypeType = Triangulation2d_1234_TypeChoicePair::TrianglesColorBinaryE;
           $$->Triangulation2d_1234_TypeValue.TrianglesColorBinary = $1;
          }
        | y_TrianglesColor_ArrayUnsignedByteType
          {$$ = new Triangulation2d_1234_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Triangulation2d_1234_TypeType = Triangulation2d_1234_TypeChoicePair::TrianglesColorE;
           $$->Triangulation2d_1234_TypeValue.TrianglesColor = $1;
          }
        | y_Triangles_ArrayI3Type
          {$$ = new Triangulation2d_1234_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->Triangulation2d_1234_TypeType = Triangulation2d_1234_TypeChoicePair::TrianglesE;
           $$->Triangulation2d_1234_TypeValue.Triangles = $1;
          }
        ;

y_Triangulation_Triangulation2dType :
          TriangulationSTART y_Triangulation2dType TriangulationEND
          {$$ = $2;}
        ;

y_TwentyLinearValuesType :
          y_LiztAttributePair ENDITEM
          y_LiztLinearValue_LinearValueType_20_20_Check
          {$$ = new TwentyLinearValuesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad TwentyLinearValuesType attributes");
             }
           delete $1;
          }
        ;

y_TwiceStandardDeviationFar_LinearValueType :
          TwiceStandardDeviationFarSTART y_LinearValueType
          TwiceStandardDeviationFarEND
          {$$ = $2;}
        ;

y_TwiceStandardDeviationMiddle_LinearValueType :
          TwiceStandardDeviationMiddleSTART y_LinearValueType
          TwiceStandardDeviationMiddleEND
          {$$ = $2;}
        ;

y_TwiceStandardDeviationNear_LinearValueType :
          TwiceStandardDeviationNearSTART y_LinearValueType
          TwiceStandardDeviationNearEND
          {$$ = $2;}
        ;

y_TwiceStandardDeviation_LinearValueType :
          TwiceStandardDeviationSTART y_LinearValueType
          TwiceStandardDeviationEND
          {$$ = $2;}
        ;

y_TwoThirdsGrouping_CriterionOutOfType :
          TwoThirdsGroupingSTART y_CriterionOutOfType TwoThirdsGroupingEND
          {$$ = $2;}
        ;

y_TypeOfCoordinatesType :
          ENDITEM y_TypeOfCoordinatesTypeChoicePair
          {$$ = new TypeOfCoordinatesType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TypeOfCoordinatesTypeChoicePair :
          y_CoordinateEnum_CoordinateEnumType
          {$$ = new TypeOfCoordinatesTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TypeOfCoordinatesTypeType = TypeOfCoordinatesTypeChoicePair::CoordinateEnumE;
           $$->TypeOfCoordinatesTypeValue.CoordinateEnum = $1;
          }
        | y_OtherCoordinate_XmlString
          {$$ = new TypeOfCoordinatesTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TypeOfCoordinatesTypeType = TypeOfCoordinatesTypeChoicePair::OtherCoordinateE;
           $$->TypeOfCoordinatesTypeValue.OtherCoordinate = $1;
          }
        ;

y_TypeOfCoordinates_TypeOfCoordinatesType :
          TypeOfCoordinatesSTART y_TypeOfCoordinatesType
          TypeOfCoordinatesEND
          {$$ = $2;}
        ;

y_TypeOfLinearVariableDifferentialTransformer_LinearVariableDifferentialTransformerEnumType_0 :
          /* empty */
          {$$ = 0;}
        | TypeOfLinearVariableDifferentialTransformerSTART ENDITEM
          {yyReadData = 1;} y_LinearVariableDifferentialTransformerEnumType
          TypeOfLinearVariableDifferentialTransformerEND
          {$$ = $4;}
        ;

y_TypeOfScaleEnumType :
          DATASTRING
          {$$ = new TypeOfScaleEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad TypeOfScaleEnumType value");
          }
        ;

y_TypeOfScaleEnum_TypeOfScaleEnumType :
          TypeOfScaleEnumSTART ENDITEM {yyReadData = 1;}
          y_TypeOfScaleEnumType TypeOfScaleEnumEND
          {$$ = $4;}
        ;

y_TypeOfScaleType :
          ENDITEM y_TypeOfScaleTypeChoicePair
          {$$ = new TypeOfScaleType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_TypeOfScaleTypeChoicePair :
          y_OtherTypeOfScale_XmlString
          {$$ = new TypeOfScaleTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TypeOfScaleTypeType = TypeOfScaleTypeChoicePair::OtherTypeOfScaleE;
           $$->TypeOfScaleTypeValue.OtherTypeOfScale = $1;
          }
        | y_TypeOfScaleEnum_TypeOfScaleEnumType
          {$$ = new TypeOfScaleTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->TypeOfScaleTypeType = TypeOfScaleTypeChoicePair::TypeOfScaleEnumE;
           $$->TypeOfScaleTypeValue.TypeOfScaleEnum = $1;
          }
        ;

y_TypeOfScale_TypeOfScaleType_0 :
          /* empty */
          {$$ = 0;}
        | TypeOfScaleSTART y_TypeOfScaleType TypeOfScaleEND
          {$$ = $2;}
        ;

y_TypeOfSummary_StatsValuesEnumType :
          TypeOfSummarySTART ENDITEM {yyReadData = 1;}
          y_StatsValuesEnumType TypeOfSummaryEND
          {$$ = $4;}
        ;

y_TypeOfTest_NonDestructiveTestingEnumType :
          TypeOfTestSTART ENDITEM {yyReadData = 1;}
          y_NonDestructiveTestingEnumType TypeOfTestEND
          {$$ = $4;}
        ;

y_Type_ProductDataQualityAreaType :
          TypeSTART y_ProductDataQualityAreaType TypeEND
          {$$ = $2;}
        ;

y_URI_XmlAnyURI :
          URISTART ENDITEM {yyReadData = 1;} y_XmlAnyURI URIEND
          {$$ = $4;}
        ;

y_URI_XmlAnyURI_0 :
          /* empty */
          {$$ = 0;}
        | URISTART ENDITEM {yyReadData = 1;} y_XmlAnyURI URIEND
          {$$ = $4;}
        ;

y_UUID_QPIdType_0 :
          /* empty */
          {$$ = 0;}
        | UUIDSTART ENDITEM {yyReadData = 1;} y_QPIdType UUIDEND
          {$$ = $4;}
        ;

y_UltimateTensileStress_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | UltimateTensileStressSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          UltimateTensileStressEND
          {$$ = $4;}
        ;

y_UltrasonicSensorType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_ProtectionClass_XmlString_0
          y_LinearityError_XmlString_0 y_Repeatability_LinearValueType_0
          y_Sensitivity_XmlDecimal_0 y_Resolution_LinearValueType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_SamplingFrequency_UserDefinedUnitValueType_0
          y_AppliedFrequency_UserDefinedUnitValueType_0
          y_MaxResponseTime_TimeValueType_0
          y_ShockTolerance_UserDefinedUnitValueType_0
          y_VibrationTolerance_UserDefinedUnitValueType_0
          y_MinPowerSupplyVoltage_UserDefinedUnitValueType_0
          y_MaxPowerSupplyVoltage_UserDefinedUnitValueType_0
          {$$ = new UltrasonicSensorType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UltrasonicSensorType attributes");
             }
           delete $1;
          }
        ;

y_UltrasonicSensor_UltrasonicSensorType :
          UltrasonicSensorSTART y_UltrasonicSensorType UltrasonicSensorEND
          {$$ = $2;
           $$->printElement = "UltrasonicSensor";
          }
        ;

y_UnEqualLegLength_WeldFilletUnequalLegLengthType :
          UnEqualLegLengthSTART y_WeldFilletUnequalLegLengthType
          UnEqualLegLengthEND
          {$$ = $2;}
        ;

y_UnequallyDisposedZone_LinearValueType :
          UnequallyDisposedZoneSTART y_LinearValueType
          UnequallyDisposedZoneEND
          {$$ = $2;}
        ;

y_UniformScaleType :
          ENDITEM y_ScaleFactor_XmlDecimal
          {$$ = new UniformScaleType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UniformScale_UniformScaleType :
          UniformScaleSTART y_UniformScaleType UniformScaleEND
          {$$ = $2;}
        ;

y_UnitAngle_AngularValueType :
          UnitAngleSTART y_AngularValueType UnitAngleEND
          {$$ = $2;}
        ;

y_UnitConversionType :
          ENDITEM y_Factor_PositiveDecimalType y_Offset_XmlDecimal_0
          {$$ = new UnitConversionType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UnitConversion_UnitConversionType_0 :
          /* empty */
          {$$ = 0;}
        | UnitConversionSTART y_UnitConversionType UnitConversionEND
          {$$ = $2;}
        ;

y_UnitLength_LinearValueType :
          UnitLengthSTART y_LinearValueType UnitLengthEND
          {$$ = $2;}
        ;

y_UnitName_XmlToken :
          UnitNameSTART ENDITEM {yyReadData = 1;} y_XmlToken UnitNameEND
          {$$ = $4;}
        ;

y_UnitVector2dSimpleType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new UnitVector2dSimpleType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_UnitVector2dSimpleType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UnitVectorSimpleType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new UnitVectorSimpleType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_UnitVectorSimpleType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UnitVectorType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new UnitVectorType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new UnitVectorType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UnitVectorType attributes");
             }
           delete $1;
          }
        | y_UnitVectorType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UnitedOrContinuousFeature_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | UnitedOrContinuousFeatureSTART ENDITEM {yyReadData = 1;}
          y_XmlBoolean UnitedOrContinuousFeatureEND
          {$$ = $4;}
        ;

y_Units_OtherUnitsType_0 :
          /* empty */
          {$$ = 0;}
        | UnitsSTART y_LiztAttributePair ENDWHOLEITEM
          {$$ = new OtherUnitsType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad OtherUnitsType attributes");
             }
           delete $2;
          }
        | UnitsSTART y_OtherUnitsType UnitsEND
          {$$ = $2;}
        ;

y_UniversalLengthMeasureFeatureMethodType :
          y_LiztAttributePair ENDITEM
          y_ChosenResourceIds_ArrayReferenceType_0
          y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          {$$ = new UniversalLengthMeasureFeatureMethodType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UniversalLengthMeasureFeatureMethodType attributes");
             }
           delete $1;
          }
        ;

y_UniversalLengthMeasureFeatureMethod_UniversalLengthMeasureFeatureMethodType :
          UniversalLengthMeasureFeatureMethodSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new UniversalLengthMeasureFeatureMethodType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "UniversalLengthMeasureFeatureMethod";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad UniversalLengthMeasureFeatureMethodType attributes");
             }
           delete $2;
          }
        | UniversalLengthMeasureFeatureMethodSTART
          y_UniversalLengthMeasureFeatureMethodType
          UniversalLengthMeasureFeatureMethodEND
          {$$ = $2;
           $$->printElement = "UniversalLengthMeasureFeatureMethod";
          }
        ;

y_UniversalLengthMeasuringType :
          y_LiztAttributePair ENDITEM y_Name_XmlToken
          y_Description_XmlString_0 y_Manufacturer_XmlString_0
          y_ModelNumber_XmlString_0 y_SerialNumber_XmlString_0
          y_Mass_MassValueType_0 y_Size_CartesianWorkingVolumeType_0
          y_MeasurementReso_1241_MeasurementReso_1241_Type_0
          y_Attributes_AttributesType_0 y_Calibrations_CalibrationsType_0
          y_EnvironmentalRange_EnvironmentalRangeType_0
          y_Resolution_substituteType_0 y_WorkingVolume_substituteType_0
          y_EffectiveWorkingVolume_substituteType_0
          y_TemperatureCompensation_TemperatureCompensationType_0
          y_MinMeasuringDistance_LinearValueType_0
          y_MaxMeasuringDistance_LinearValueType_0
          y_MeasuringForce_ForceValueType_0 y_Accuracy_LinearErrorType_0
          y_Repeatability_LinearValueType_0 y_ToolIds_ArrayReferenceType_0
          y_MaxWorkpieceWeight_MassValueType_0
          {$$ = new UniversalLengthMeasuringType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UniversalLengthMeasuringType attributes");
             }
           delete $1;
          }
        ;

y_UniversalLengthMeasuring_UniversalLengthMeasuringType :
          UniversalLengthMeasuringSTART y_UniversalLengthMeasuringType
          UniversalLengthMeasuringEND
          {$$ = $2;
           $$->printElement = "UniversalLengthMeasuring";
          }
        ;

y_UnnumberedPlanElementsType :
          y_LiztAttributePair ENDITEM y_LiztPlanElement_substituteType_1_u
          {$$ = new UnnumberedPlanElementsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UnnumberedPlanElementsType attributes");
             }
           delete $1;
          }
        ;

y_UnorderedActionGroupType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
          y_Steps_UnnumberedPlanElementsType
          {$$ = new UnorderedActionGroupType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_UnorderedActionGroup_UnorderedActionGroupType :
          UnorderedActionGroupSTART y_UnorderedActionGroupType
          UnorderedActionGroupEND
          {$$ = $2;
           $$->printElement = "UnorderedActionGroup";
          }
        ;

y_UnorderedPlanRoot_UnorderedActionGroupType :
          UnorderedPlanRootSTART y_UnorderedActionGroupType
          UnorderedPlanRootEND
          {$$ = $2;
           $$->printElement = "UnorderedPlanRoot";
          }
        ;

y_UpperConfidenceLimit_StatsMeasuredDecimalType :
          UpperConfidenceLimitSTART y_StatsMeasuredDecimalType
          UpperConfidenceLimitEND
          {$$ = $2;
           $$->printElement = "UpperConfidenceLimit";
          }
        ;

y_UpperControlLimitRange_StatsMeasuredDecimalType :
          UpperControlLimitRangeSTART y_StatsMeasuredDecimalType
          UpperControlLimitRangeEND
          {$$ = $2;
           $$->printElement = "UpperControlLimitRange";
          }
        ;

y_UpperControlLimit_StatsMeasuredDecimalType :
          UpperControlLimitSTART y_StatsMeasuredDecimalType
          UpperControlLimitEND
          {$$ = $2;
           $$->printElement = "UpperControlLimit";
          }
        ;

y_UpperPoint_Point2dSimpleType :
          UpperPointSTART y_Point2dSimpleType UpperPointEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_UserDataBinary_BinaryDataType :
          UserDataBinarySTART y_BinaryDataType UserDataBinaryEND
          {$$ = $2;}
        ;

y_UserDataXML_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | UserDataXMLSTART ENDITEM {yyReadData = 1;} y_XmlString
          UserDataXMLEND
          {$$ = $4;}
        ;

y_UserDefinedAngu_1137_Type :
          y_UserDefinedAngu_1137_TypeChoicePair
          {$$ = new UserDefinedAngu_1137_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedAngu_1137_TypeChoicePair :
          y_MinDeviationStats_StatsAngularType
          {$$ = new UserDefinedAngu_1137_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedAngu_1137_TypeType = UserDefinedAngu_1137_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedAngu_1137_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsAngularType
          {$$ = new UserDefinedAngu_1137_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedAngu_1137_TypeType = UserDefinedAngu_1137_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedAngu_1137_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedAngu_1158_UserDefinedAngu_1158_Type
          {$$ = new UserDefinedAngu_1137_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedAngu_1137_TypeType = UserDefinedAngu_1137_TypeChoicePair::UserDefinedAngu_1158E;
           $$->UserDefinedAngu_1137_TypeValue.UserDefinedAngu_1158 = $1;
          }
        | y_UserDefinedAngu_1159_UserDefinedAngu_1159_Type
          {$$ = new UserDefinedAngu_1137_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedAngu_1137_TypeType = UserDefinedAngu_1137_TypeChoicePair::UserDefinedAngu_1159E;
           $$->UserDefinedAngu_1137_TypeValue.UserDefinedAngu_1159 = $1;
          }
        | y_UserDefinedAngu_1160_UserDefinedAngu_1160_Type
          {$$ = new UserDefinedAngu_1137_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedAngu_1137_TypeType = UserDefinedAngu_1137_TypeChoicePair::UserDefinedAngu_1160E;
           $$->UserDefinedAngu_1137_TypeValue.UserDefinedAngu_1160 = $1;
          }
        | y_UserDefinedAngu_1161_UserDefinedAngu_1161_Type
          {$$ = new UserDefinedAngu_1137_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedAngu_1137_TypeType = UserDefinedAngu_1137_TypeChoicePair::UserDefinedAngu_1161E;
           $$->UserDefinedAngu_1137_TypeValue.UserDefinedAngu_1161 = $1;
          }
        ;

y_UserDefinedAngu_1137_UserDefinedAngu_1137_Type :
          y_UserDefinedAngu_1137_Type
          {$$ = $1;}
        ;

y_UserDefinedAngu_1158_Type :
          y_ValueStats_StatsWithTolAngularType
          y_MaxValueStats_StatsAngularType_0
          y_MinValueStats_StatsAngularType_0
          {$$ = new UserDefinedAngu_1158_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedAngu_1158_UserDefinedAngu_1158_Type :
          y_UserDefinedAngu_1158_Type
          {$$ = $1;}
        ;

y_UserDefinedAngu_1159_Type :
          y_MaxValueStats_StatsAngularType
          y_MinValueStats_StatsAngularType_0
          {$$ = new UserDefinedAngu_1159_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedAngu_1159_UserDefinedAngu_1159_Type :
          y_UserDefinedAngu_1159_Type
          {$$ = $1;}
        ;

y_UserDefinedAngu_1160_Type :
          y_DeviationStats_StatsWithTolAngularType
          y_MaxDeviationStats_StatsAngularType_0
          y_MinDeviationStats_StatsAngularType_0
          {$$ = new UserDefinedAngu_1160_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedAngu_1160_UserDefinedAngu_1160_Type :
          y_UserDefinedAngu_1160_Type
          {$$ = $1;}
        ;

y_UserDefinedAngu_1161_Type :
          y_MaxDeviationStats_StatsAngularType
          y_MinDeviationStats_StatsAngularType_0
          {$$ = new UserDefinedAngu_1161_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedAngu_1161_UserDefinedAngu_1161_Type :
          y_UserDefinedAngu_1161_Type
          {$$ = $1;}
        ;

y_UserDefinedAngularCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_AngularCharacte_1045_AngularCharacte_1045_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedAngularCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAngularCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAngularCharacteristicDefinition_UserDefinedAngularCharacteristicDefinitionType :
          UserDefinedAngularCharacteristicDefinitionSTART
          y_UserDefinedAngularCharacteristicDefinitionType
          UserDefinedAngularCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedAngularCharacteristicDefinition";
          }
        ;

y_UserDefinedAngularCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedAngularCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAngularCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAngularCharacteristicItem_UserDefinedAngularCharacteristicItemType :
          UserDefinedAngularCharacteristicItemSTART
          y_UserDefinedAngularCharacteristicItemType
          UserDefinedAngularCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedAngularCharacteristicItem";
          }
        ;

y_UserDefinedAngularCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredAngularValueType_0
          y_MaxValue_MeasuredAngularValueType_0
          y_MinValue_MeasuredAngularValueType_0
          {$$ = new UserDefinedAngularCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAngularCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAngularCharacteristicMeasurement_UserDefinedAngularCharacteristicMeasurementType :
          UserDefinedAngularCharacteristicMeasurementSTART
          y_UserDefinedAngularCharacteristicMeasurementType
          UserDefinedAngularCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedAngularCharacteristicMeasurement";
          }
        ;

y_UserDefinedAngularCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_AngularValueType_0
          {$$ = new UserDefinedAngularCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAngularCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAngularCharacteristicNominal_UserDefinedAngularCharacteristicNominalType :
          UserDefinedAngularCharacteristicNominalSTART
          y_UserDefinedAngularCharacteristicNominalType
          UserDefinedAngularCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedAngularCharacteristicNominal";
          }
        ;

y_UserDefinedAngularCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedAngu_1137_UserDefinedAngu_1137_Type
          {$$ = new UserDefinedAngularCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedAngularCharacteristicStats_UserDefinedAngularCharacteristicStatsEvalType :
          UserDefinedAngularCharacteristicStatsSTART
          y_UserDefinedAngularCharacteristicStatsEvalType
          UserDefinedAngularCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedAngularCharacteristicStats";
          }
        ;

y_UserDefinedAreaCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_AreaCharacteris_1047_AreaCharacteris_1047_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedAreaCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAreaCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAreaCharacteristicDefinition_UserDefinedAreaCharacteristicDefinitionType :
          UserDefinedAreaCharacteristicDefinitionSTART
          y_UserDefinedAreaCharacteristicDefinitionType
          UserDefinedAreaCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedAreaCharacteristicDefinition";
          }
        ;

y_UserDefinedAreaCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedAreaCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAreaCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAreaCharacteristicItem_UserDefinedAreaCharacteristicItemType :
          UserDefinedAreaCharacteristicItemSTART
          y_UserDefinedAreaCharacteristicItemType
          UserDefinedAreaCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedAreaCharacteristicItem";
          }
        ;

y_UserDefinedAreaCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredAreaValueType_0
          y_MaxValue_MeasuredAreaValueType_0
          y_MinValue_MeasuredAreaValueType_0
          {$$ = new UserDefinedAreaCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAreaCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAreaCharacteristicMeasurement_UserDefinedAreaCharacteristicMeasurementType :
          UserDefinedAreaCharacteristicMeasurementSTART
          y_UserDefinedAreaCharacteristicMeasurementType
          UserDefinedAreaCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedAreaCharacteristicMeasurement";
          }
        ;

y_UserDefinedAreaCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_AreaValueType_0
          {$$ = new UserDefinedAreaCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAreaCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAreaCharacteristicNominal_UserDefinedAreaCharacteristicNominalType :
          UserDefinedAreaCharacteristicNominalSTART
          y_UserDefinedAreaCharacteristicNominalType
          UserDefinedAreaCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedAreaCharacteristicNominal";
          }
        ;

y_UserDefinedAreaCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedArea_1138_UserDefinedArea_1138_Type
          {$$ = new UserDefinedAreaCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedAreaCharacteristicStats_UserDefinedAreaCharacteristicStatsEvalType :
          UserDefinedAreaCharacteristicStatsSTART
          y_UserDefinedAreaCharacteristicStatsEvalType
          UserDefinedAreaCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedAreaCharacteristicStats";
          }
        ;

y_UserDefinedArea_1138_Type :
          y_UserDefinedArea_1138_TypeChoicePair
          {$$ = new UserDefinedArea_1138_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedArea_1138_TypeChoicePair :
          y_MinDeviationStats_StatsAreaType
          {$$ = new UserDefinedArea_1138_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedArea_1138_TypeType = UserDefinedArea_1138_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedArea_1138_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsAreaType
          {$$ = new UserDefinedArea_1138_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedArea_1138_TypeType = UserDefinedArea_1138_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedArea_1138_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedArea_1162_UserDefinedArea_1162_Type
          {$$ = new UserDefinedArea_1138_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedArea_1138_TypeType = UserDefinedArea_1138_TypeChoicePair::UserDefinedArea_1162E;
           $$->UserDefinedArea_1138_TypeValue.UserDefinedArea_1162 = $1;
          }
        | y_UserDefinedArea_1163_UserDefinedArea_1163_Type
          {$$ = new UserDefinedArea_1138_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedArea_1138_TypeType = UserDefinedArea_1138_TypeChoicePair::UserDefinedArea_1163E;
           $$->UserDefinedArea_1138_TypeValue.UserDefinedArea_1163 = $1;
          }
        | y_UserDefinedArea_1164_UserDefinedArea_1164_Type
          {$$ = new UserDefinedArea_1138_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedArea_1138_TypeType = UserDefinedArea_1138_TypeChoicePair::UserDefinedArea_1164E;
           $$->UserDefinedArea_1138_TypeValue.UserDefinedArea_1164 = $1;
          }
        | y_UserDefinedArea_1165_UserDefinedArea_1165_Type
          {$$ = new UserDefinedArea_1138_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedArea_1138_TypeType = UserDefinedArea_1138_TypeChoicePair::UserDefinedArea_1165E;
           $$->UserDefinedArea_1138_TypeValue.UserDefinedArea_1165 = $1;
          }
        ;

y_UserDefinedArea_1138_UserDefinedArea_1138_Type :
          y_UserDefinedArea_1138_Type
          {$$ = $1;}
        ;

y_UserDefinedArea_1162_Type :
          y_ValueStats_StatsWithTolAreaType y_MaxValueStats_StatsAreaType_0
          y_MinValueStats_StatsAreaType_0
          {$$ = new UserDefinedArea_1162_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedArea_1162_UserDefinedArea_1162_Type :
          y_UserDefinedArea_1162_Type
          {$$ = $1;}
        ;

y_UserDefinedArea_1163_Type :
          y_MaxValueStats_StatsAreaType y_MinValueStats_StatsAreaType_0
          {$$ = new UserDefinedArea_1163_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedArea_1163_UserDefinedArea_1163_Type :
          y_UserDefinedArea_1163_Type
          {$$ = $1;}
        ;

y_UserDefinedArea_1164_Type :
          y_DeviationStats_StatsWithTolAreaType
          y_MaxDeviationStats_StatsAreaType_0
          y_MinDeviationStats_StatsAreaType_0
          {$$ = new UserDefinedArea_1164_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedArea_1164_UserDefinedArea_1164_Type :
          y_UserDefinedArea_1164_Type
          {$$ = $1;}
        ;

y_UserDefinedArea_1165_Type :
          y_MaxDeviationStats_StatsAreaType
          y_MinDeviationStats_StatsAreaType_0
          {$$ = new UserDefinedArea_1165_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedArea_1165_UserDefinedArea_1165_Type :
          y_UserDefinedArea_1165_Type
          {$$ = $1;}
        ;

y_UserDefinedAttributeCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0 y_WhatToMeasure_XmlString
          {$$ = new UserDefinedAttributeCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAttributeCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAttributeCharacteristicDefinition_UserDefinedAttributeCharacteristicDefinitionType :
          UserDefinedAttributeCharacteristicDefinitionSTART
          y_UserDefinedAttributeCharacteristicDefinitionType
          UserDefinedAttributeCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedAttributeCharacteristicDefinition";
          }
        ;

y_UserDefinedAttributeCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedAttributeCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAttributeCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAttributeCharacteristicItem_UserDefinedAttributeCharacteristicItemType :
          UserDefinedAttributeCharacteristicItemSTART
          y_UserDefinedAttributeCharacteristicItemType
          UserDefinedAttributeCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedAttributeCharacteristicItem";
          }
        ;

y_UserDefinedAttributeCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0 y_Value_XmlString_0
          {$$ = new UserDefinedAttributeCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAttributeCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAttributeCharacteristicMeasurement_UserDefinedAttributeCharacteristicMeasurementType :
          UserDefinedAttributeCharacteristicMeasurementSTART
          y_UserDefinedAttributeCharacteristicMeasurementType
          UserDefinedAttributeCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedAttributeCharacteristicMeasurement";
          }
        ;

y_UserDefinedAttributeCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_PassValues_StringValuesType_0 y_FailValues_StringValuesType_0
          {$$ = new UserDefinedAttributeCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedAttributeCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedAttributeCharacteristicNominal_UserDefinedAttributeCharacteristicNominalType :
          UserDefinedAttributeCharacteristicNominalSTART
          y_UserDefinedAttributeCharacteristicNominalType
          UserDefinedAttributeCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedAttributeCharacteristicNominal";
          }
        ;

y_UserDefinedAttributeCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_AttributeStats_StatsPassFailType_0
          {$$ = new UserDefinedAttributeCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedAttributeCharacteristicStats_UserDefinedAttributeCharacteristicStatsEvalType :
          UserDefinedAttributeCharacteristicStatsSTART
          y_UserDefinedAttributeCharacteristicStatsEvalType
          UserDefinedAttributeCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedAttributeCharacteristicStats";
          }
        ;

y_UserDefinedAxisType :
          ENDITEM y_Axis_substituteType y_Attributes_AttributesType_0
          y_AxisName_XmlToken
          {$$ = new UserDefinedAxisType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_UserDefinedForc_1139_Type :
          y_UserDefinedForc_1139_TypeChoicePair
          {$$ = new UserDefinedForc_1139_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedForc_1139_TypeChoicePair :
          y_MinDeviationStats_StatsForceType
          {$$ = new UserDefinedForc_1139_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedForc_1139_TypeType = UserDefinedForc_1139_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedForc_1139_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsForceType
          {$$ = new UserDefinedForc_1139_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedForc_1139_TypeType = UserDefinedForc_1139_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedForc_1139_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedForc_1166_UserDefinedForc_1166_Type
          {$$ = new UserDefinedForc_1139_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedForc_1139_TypeType = UserDefinedForc_1139_TypeChoicePair::UserDefinedForc_1166E;
           $$->UserDefinedForc_1139_TypeValue.UserDefinedForc_1166 = $1;
          }
        | y_UserDefinedForc_1167_UserDefinedForc_1167_Type
          {$$ = new UserDefinedForc_1139_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedForc_1139_TypeType = UserDefinedForc_1139_TypeChoicePair::UserDefinedForc_1167E;
           $$->UserDefinedForc_1139_TypeValue.UserDefinedForc_1167 = $1;
          }
        | y_UserDefinedForc_1168_UserDefinedForc_1168_Type
          {$$ = new UserDefinedForc_1139_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedForc_1139_TypeType = UserDefinedForc_1139_TypeChoicePair::UserDefinedForc_1168E;
           $$->UserDefinedForc_1139_TypeValue.UserDefinedForc_1168 = $1;
          }
        | y_UserDefinedForc_1169_UserDefinedForc_1169_Type
          {$$ = new UserDefinedForc_1139_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedForc_1139_TypeType = UserDefinedForc_1139_TypeChoicePair::UserDefinedForc_1169E;
           $$->UserDefinedForc_1139_TypeValue.UserDefinedForc_1169 = $1;
          }
        ;

y_UserDefinedForc_1139_UserDefinedForc_1139_Type :
          y_UserDefinedForc_1139_Type
          {$$ = $1;}
        ;

y_UserDefinedForc_1166_Type :
          y_ValueStats_StatsWithTolForceType
          y_MaxValueStats_StatsForceType_0 y_MinValueStats_StatsForceType_0
          {$$ = new UserDefinedForc_1166_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedForc_1166_UserDefinedForc_1166_Type :
          y_UserDefinedForc_1166_Type
          {$$ = $1;}
        ;

y_UserDefinedForc_1167_Type :
          y_MaxValueStats_StatsForceType y_MinValueStats_StatsForceType_0
          {$$ = new UserDefinedForc_1167_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedForc_1167_UserDefinedForc_1167_Type :
          y_UserDefinedForc_1167_Type
          {$$ = $1;}
        ;

y_UserDefinedForc_1168_Type :
          y_DeviationStats_StatsWithTolForceType
          y_MaxDeviationStats_StatsForceType_0
          y_MinDeviationStats_StatsForceType_0
          {$$ = new UserDefinedForc_1168_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedForc_1168_UserDefinedForc_1168_Type :
          y_UserDefinedForc_1168_Type
          {$$ = $1;}
        ;

y_UserDefinedForc_1169_Type :
          y_MaxDeviationStats_StatsForceType
          y_MinDeviationStats_StatsForceType_0
          {$$ = new UserDefinedForc_1169_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedForc_1169_UserDefinedForc_1169_Type :
          y_UserDefinedForc_1169_Type
          {$$ = $1;}
        ;

y_UserDefinedForceCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_ForceCharacteri_1056_ForceCharacteri_1056_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedForceCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedForceCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedForceCharacteristicDefinition_UserDefinedForceCharacteristicDefinitionType :
          UserDefinedForceCharacteristicDefinitionSTART
          y_UserDefinedForceCharacteristicDefinitionType
          UserDefinedForceCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedForceCharacteristicDefinition";
          }
        ;

y_UserDefinedForceCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedForceCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedForceCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedForceCharacteristicItem_UserDefinedForceCharacteristicItemType :
          UserDefinedForceCharacteristicItemSTART
          y_UserDefinedForceCharacteristicItemType
          UserDefinedForceCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedForceCharacteristicItem";
          }
        ;

y_UserDefinedForceCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredForceValueType_0
          y_MaxValue_MeasuredForceValueType_0
          y_MinValue_MeasuredForceValueType_0
          {$$ = new UserDefinedForceCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedForceCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedForceCharacteristicMeasurement_UserDefinedForceCharacteristicMeasurementType :
          UserDefinedForceCharacteristicMeasurementSTART
          y_UserDefinedForceCharacteristicMeasurementType
          UserDefinedForceCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedForceCharacteristicMeasurement";
          }
        ;

y_UserDefinedForceCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_ForceValueType_0
          {$$ = new UserDefinedForceCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedForceCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedForceCharacteristicNominal_UserDefinedForceCharacteristicNominalType :
          UserDefinedForceCharacteristicNominalSTART
          y_UserDefinedForceCharacteristicNominalType
          UserDefinedForceCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedForceCharacteristicNominal";
          }
        ;

y_UserDefinedForceCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedForc_1139_UserDefinedForc_1139_Type
          {$$ = new UserDefinedForceCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedForceCharacteristicStats_UserDefinedForceCharacteristicStatsEvalType :
          UserDefinedForceCharacteristicStatsSTART
          y_UserDefinedForceCharacteristicStatsEvalType
          UserDefinedForceCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedForceCharacteristicStats";
          }
        ;

y_UserDefinedLine_1140_Type :
          y_UserDefinedLine_1140_TypeChoicePair
          {$$ = new UserDefinedLine_1140_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedLine_1140_TypeChoicePair :
          y_MinDeviationStats_StatsLinearType
          {$$ = new UserDefinedLine_1140_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedLine_1140_TypeType = UserDefinedLine_1140_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedLine_1140_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsLinearType
          {$$ = new UserDefinedLine_1140_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedLine_1140_TypeType = UserDefinedLine_1140_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedLine_1140_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedLine_1170_UserDefinedLine_1170_Type
          {$$ = new UserDefinedLine_1140_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedLine_1140_TypeType = UserDefinedLine_1140_TypeChoicePair::UserDefinedLine_1170E;
           $$->UserDefinedLine_1140_TypeValue.UserDefinedLine_1170 = $1;
          }
        | y_UserDefinedLine_1171_UserDefinedLine_1171_Type
          {$$ = new UserDefinedLine_1140_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedLine_1140_TypeType = UserDefinedLine_1140_TypeChoicePair::UserDefinedLine_1171E;
           $$->UserDefinedLine_1140_TypeValue.UserDefinedLine_1171 = $1;
          }
        | y_UserDefinedLine_1172_UserDefinedLine_1172_Type
          {$$ = new UserDefinedLine_1140_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedLine_1140_TypeType = UserDefinedLine_1140_TypeChoicePair::UserDefinedLine_1172E;
           $$->UserDefinedLine_1140_TypeValue.UserDefinedLine_1172 = $1;
          }
        | y_UserDefinedLine_1173_UserDefinedLine_1173_Type
          {$$ = new UserDefinedLine_1140_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedLine_1140_TypeType = UserDefinedLine_1140_TypeChoicePair::UserDefinedLine_1173E;
           $$->UserDefinedLine_1140_TypeValue.UserDefinedLine_1173 = $1;
          }
        ;

y_UserDefinedLine_1140_UserDefinedLine_1140_Type :
          y_UserDefinedLine_1140_Type
          {$$ = $1;}
        ;

y_UserDefinedLine_1170_Type :
          y_ValueStats_StatsWithTolLinearType
          y_MaxValueStats_StatsLinearType_0
          y_MinValueStats_StatsLinearType_0
          {$$ = new UserDefinedLine_1170_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedLine_1170_UserDefinedLine_1170_Type :
          y_UserDefinedLine_1170_Type
          {$$ = $1;}
        ;

y_UserDefinedLine_1171_Type :
          y_MaxValueStats_StatsLinearType y_MinValueStats_StatsLinearType_0
          {$$ = new UserDefinedLine_1171_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedLine_1171_UserDefinedLine_1171_Type :
          y_UserDefinedLine_1171_Type
          {$$ = $1;}
        ;

y_UserDefinedLine_1172_Type :
          y_DeviationStats_StatsWithTolLinearType
          y_MaxDeviationStats_StatsLinearType_0
          y_MinDeviationStats_StatsLinearType_0
          {$$ = new UserDefinedLine_1172_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedLine_1172_UserDefinedLine_1172_Type :
          y_UserDefinedLine_1172_Type
          {$$ = $1;}
        ;

y_UserDefinedLine_1173_Type :
          y_MaxDeviationStats_StatsLinearType
          y_MinDeviationStats_StatsLinearType_0
          {$$ = new UserDefinedLine_1173_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedLine_1173_UserDefinedLine_1173_Type :
          y_UserDefinedLine_1173_Type
          {$$ = $1;}
        ;

y_UserDefinedLinearCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedLinearCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedLinearCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedLinearCharacteristicDefinition_UserDefinedLinearCharacteristicDefinitionType :
          UserDefinedLinearCharacteristicDefinitionSTART
          y_UserDefinedLinearCharacteristicDefinitionType
          UserDefinedLinearCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedLinearCharacteristicDefinition";
          }
        ;

y_UserDefinedLinearCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedLinearCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedLinearCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedLinearCharacteristicItem_UserDefinedLinearCharacteristicItemType :
          UserDefinedLinearCharacteristicItemSTART
          y_UserDefinedLinearCharacteristicItemType
          UserDefinedLinearCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedLinearCharacteristicItem";
          }
        ;

y_UserDefinedLinearCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new UserDefinedLinearCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedLinearCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedLinearCharacteristicMeasurement_UserDefinedLinearCharacteristicMeasurementType :
          UserDefinedLinearCharacteristicMeasurementSTART
          y_UserDefinedLinearCharacteristicMeasurementType
          UserDefinedLinearCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedLinearCharacteristicMeasurement";
          }
        ;

y_UserDefinedLinearCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new UserDefinedLinearCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedLinearCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedLinearCharacteristicNominal_UserDefinedLinearCharacteristicNominalType :
          UserDefinedLinearCharacteristicNominalSTART
          y_UserDefinedLinearCharacteristicNominalType
          UserDefinedLinearCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedLinearCharacteristicNominal";
          }
        ;

y_UserDefinedLinearCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedLine_1140_UserDefinedLine_1140_Type
          {$$ = new UserDefinedLinearCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedLinearCharacteristicStats_UserDefinedLinearCharacteristicStatsEvalType :
          UserDefinedLinearCharacteristicStatsSTART
          y_UserDefinedLinearCharacteristicStatsEvalType
          UserDefinedLinearCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedLinearCharacteristicStats";
          }
        ;

y_UserDefinedMassCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_MassCharacteris_1063_MassCharacteris_1063_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedMassCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedMassCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedMassCharacteristicDefinition_UserDefinedMassCharacteristicDefinitionType :
          UserDefinedMassCharacteristicDefinitionSTART
          y_UserDefinedMassCharacteristicDefinitionType
          UserDefinedMassCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedMassCharacteristicDefinition";
          }
        ;

y_UserDefinedMassCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedMassCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedMassCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedMassCharacteristicItem_UserDefinedMassCharacteristicItemType :
          UserDefinedMassCharacteristicItemSTART
          y_UserDefinedMassCharacteristicItemType
          UserDefinedMassCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedMassCharacteristicItem";
          }
        ;

y_UserDefinedMassCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredMassValueType_0
          y_MaxValue_MeasuredMassValueType_0
          y_MinValue_MeasuredMassValueType_0
          {$$ = new UserDefinedMassCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedMassCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedMassCharacteristicMeasurement_UserDefinedMassCharacteristicMeasurementType :
          UserDefinedMassCharacteristicMeasurementSTART
          y_UserDefinedMassCharacteristicMeasurementType
          UserDefinedMassCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedMassCharacteristicMeasurement";
          }
        ;

y_UserDefinedMassCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_MassValueType_0
          {$$ = new UserDefinedMassCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedMassCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedMassCharacteristicNominal_UserDefinedMassCharacteristicNominalType :
          UserDefinedMassCharacteristicNominalSTART
          y_UserDefinedMassCharacteristicNominalType
          UserDefinedMassCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedMassCharacteristicNominal";
          }
        ;

y_UserDefinedMassCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedMass_1141_UserDefinedMass_1141_Type
          {$$ = new UserDefinedMassCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedMassCharacteristicStats_UserDefinedMassCharacteristicStatsEvalType :
          UserDefinedMassCharacteristicStatsSTART
          y_UserDefinedMassCharacteristicStatsEvalType
          UserDefinedMassCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedMassCharacteristicStats";
          }
        ;

y_UserDefinedMass_1141_Type :
          y_UserDefinedMass_1141_TypeChoicePair
          {$$ = new UserDefinedMass_1141_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedMass_1141_TypeChoicePair :
          y_MinDeviationStats_StatsMassType
          {$$ = new UserDefinedMass_1141_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedMass_1141_TypeType = UserDefinedMass_1141_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedMass_1141_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsMassType
          {$$ = new UserDefinedMass_1141_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedMass_1141_TypeType = UserDefinedMass_1141_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedMass_1141_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedMass_1174_UserDefinedMass_1174_Type
          {$$ = new UserDefinedMass_1141_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedMass_1141_TypeType = UserDefinedMass_1141_TypeChoicePair::UserDefinedMass_1174E;
           $$->UserDefinedMass_1141_TypeValue.UserDefinedMass_1174 = $1;
          }
        | y_UserDefinedMass_1175_UserDefinedMass_1175_Type
          {$$ = new UserDefinedMass_1141_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedMass_1141_TypeType = UserDefinedMass_1141_TypeChoicePair::UserDefinedMass_1175E;
           $$->UserDefinedMass_1141_TypeValue.UserDefinedMass_1175 = $1;
          }
        | y_UserDefinedMass_1176_UserDefinedMass_1176_Type
          {$$ = new UserDefinedMass_1141_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedMass_1141_TypeType = UserDefinedMass_1141_TypeChoicePair::UserDefinedMass_1176E;
           $$->UserDefinedMass_1141_TypeValue.UserDefinedMass_1176 = $1;
          }
        | y_UserDefinedMass_1177_UserDefinedMass_1177_Type
          {$$ = new UserDefinedMass_1141_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedMass_1141_TypeType = UserDefinedMass_1141_TypeChoicePair::UserDefinedMass_1177E;
           $$->UserDefinedMass_1141_TypeValue.UserDefinedMass_1177 = $1;
          }
        ;

y_UserDefinedMass_1141_UserDefinedMass_1141_Type :
          y_UserDefinedMass_1141_Type
          {$$ = $1;}
        ;

y_UserDefinedMass_1174_Type :
          y_ValueStats_StatsWithTolMassType y_MaxValueStats_StatsMassType_0
          y_MinValueStats_StatsMassType_0
          {$$ = new UserDefinedMass_1174_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedMass_1174_UserDefinedMass_1174_Type :
          y_UserDefinedMass_1174_Type
          {$$ = $1;}
        ;

y_UserDefinedMass_1175_Type :
          y_MaxValueStats_StatsMassType y_MinValueStats_StatsMassType_0
          {$$ = new UserDefinedMass_1175_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedMass_1175_UserDefinedMass_1175_Type :
          y_UserDefinedMass_1175_Type
          {$$ = $1;}
        ;

y_UserDefinedMass_1176_Type :
          y_DeviationStats_StatsWithTolMassType
          y_MaxDeviationStats_StatsMassType_0
          y_MinDeviationStats_StatsMassType_0
          {$$ = new UserDefinedMass_1176_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedMass_1176_UserDefinedMass_1176_Type :
          y_UserDefinedMass_1176_Type
          {$$ = $1;}
        ;

y_UserDefinedMass_1177_Type :
          y_MaxDeviationStats_StatsMassType
          y_MinDeviationStats_StatsMassType_0
          {$$ = new UserDefinedMass_1177_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedMass_1177_UserDefinedMass_1177_Type :
          y_UserDefinedMass_1177_Type
          {$$ = $1;}
        ;

y_UserDefinedPres_1142_Type :
          y_UserDefinedPres_1142_TypeChoicePair
          {$$ = new UserDefinedPres_1142_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedPres_1142_TypeChoicePair :
          y_MinDeviationStats_StatsPressureType
          {$$ = new UserDefinedPres_1142_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedPres_1142_TypeType = UserDefinedPres_1142_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedPres_1142_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsPressureType
          {$$ = new UserDefinedPres_1142_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedPres_1142_TypeType = UserDefinedPres_1142_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedPres_1142_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedPres_1178_UserDefinedPres_1178_Type
          {$$ = new UserDefinedPres_1142_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedPres_1142_TypeType = UserDefinedPres_1142_TypeChoicePair::UserDefinedPres_1178E;
           $$->UserDefinedPres_1142_TypeValue.UserDefinedPres_1178 = $1;
          }
        | y_UserDefinedPres_1179_UserDefinedPres_1179_Type
          {$$ = new UserDefinedPres_1142_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedPres_1142_TypeType = UserDefinedPres_1142_TypeChoicePair::UserDefinedPres_1179E;
           $$->UserDefinedPres_1142_TypeValue.UserDefinedPres_1179 = $1;
          }
        | y_UserDefinedPres_1180_UserDefinedPres_1180_Type
          {$$ = new UserDefinedPres_1142_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedPres_1142_TypeType = UserDefinedPres_1142_TypeChoicePair::UserDefinedPres_1180E;
           $$->UserDefinedPres_1142_TypeValue.UserDefinedPres_1180 = $1;
          }
        | y_UserDefinedPres_1181_UserDefinedPres_1181_Type
          {$$ = new UserDefinedPres_1142_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedPres_1142_TypeType = UserDefinedPres_1142_TypeChoicePair::UserDefinedPres_1181E;
           $$->UserDefinedPres_1142_TypeValue.UserDefinedPres_1181 = $1;
          }
        ;

y_UserDefinedPres_1142_UserDefinedPres_1142_Type :
          y_UserDefinedPres_1142_Type
          {$$ = $1;}
        ;

y_UserDefinedPres_1178_Type :
          y_ValueStats_StatsWithTolPressureType
          y_MaxValueStats_StatsPressureType_0
          y_MinValueStats_StatsPressureType_0
          {$$ = new UserDefinedPres_1178_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedPres_1178_UserDefinedPres_1178_Type :
          y_UserDefinedPres_1178_Type
          {$$ = $1;}
        ;

y_UserDefinedPres_1179_Type :
          y_MaxValueStats_StatsPressureType
          y_MinValueStats_StatsPressureType_0
          {$$ = new UserDefinedPres_1179_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedPres_1179_UserDefinedPres_1179_Type :
          y_UserDefinedPres_1179_Type
          {$$ = $1;}
        ;

y_UserDefinedPres_1180_Type :
          y_DeviationStats_StatsWithTolPressureType
          y_MaxDeviationStats_StatsPressureType_0
          y_MinDeviationStats_StatsPressureType_0
          {$$ = new UserDefinedPres_1180_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedPres_1180_UserDefinedPres_1180_Type :
          y_UserDefinedPres_1180_Type
          {$$ = $1;}
        ;

y_UserDefinedPres_1181_Type :
          y_MaxDeviationStats_StatsPressureType
          y_MinDeviationStats_StatsPressureType_0
          {$$ = new UserDefinedPres_1181_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedPres_1181_UserDefinedPres_1181_Type :
          y_UserDefinedPres_1181_Type
          {$$ = $1;}
        ;

y_UserDefinedPressureCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_PressureCharact_1066_PressureCharact_1066_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedPressureCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedPressureCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedPressureCharacteristicDefinition_UserDefinedPressureCharacteristicDefinitionType :
          UserDefinedPressureCharacteristicDefinitionSTART
          y_UserDefinedPressureCharacteristicDefinitionType
          UserDefinedPressureCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedPressureCharacteristicDefinition";
          }
        ;

y_UserDefinedPressureCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedPressureCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedPressureCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedPressureCharacteristicItem_UserDefinedPressureCharacteristicItemType :
          UserDefinedPressureCharacteristicItemSTART
          y_UserDefinedPressureCharacteristicItemType
          UserDefinedPressureCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedPressureCharacteristicItem";
          }
        ;

y_UserDefinedPressureCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredPressureValueType_0
          y_MaxValue_MeasuredPressureValueType_0
          y_MinValue_MeasuredPressureValueType_0
          {$$ = new UserDefinedPressureCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedPressureCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedPressureCharacteristicMeasurement_UserDefinedPressureCharacteristicMeasurementType :
          UserDefinedPressureCharacteristicMeasurementSTART
          y_UserDefinedPressureCharacteristicMeasurementType
          UserDefinedPressureCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedPressureCharacteristicMeasurement";
          }
        ;

y_UserDefinedPressureCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_PressureValueType_0
          {$$ = new UserDefinedPressureCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedPressureCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedPressureCharacteristicNominal_UserDefinedPressureCharacteristicNominalType :
          UserDefinedPressureCharacteristicNominalSTART
          y_UserDefinedPressureCharacteristicNominalType
          UserDefinedPressureCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedPressureCharacteristicNominal";
          }
        ;

y_UserDefinedPressureCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedPres_1142_UserDefinedPres_1142_Type
          {$$ = new UserDefinedPressureCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedPressureCharacteristicStats_UserDefinedPressureCharacteristicStatsEvalType :
          UserDefinedPressureCharacteristicStatsSTART
          y_UserDefinedPressureCharacteristicStatsEvalType
          UserDefinedPressureCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedPressureCharacteristicStats";
          }
        ;

y_UserDefinedReso_1243_Type :
          y_UserDefinedReso_1243_TypeChoicePair
          {$$ = new UserDefinedReso_1243_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedReso_1243_TypeChoicePair :
          y_ABCResolution_ABCResolutionType
          {$$ = new UserDefinedReso_1243_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedReso_1243_TypeType = UserDefinedReso_1243_TypeChoicePair::ABCResolutionE;
           $$->UserDefinedReso_1243_TypeValue.ABCResolution = $1;
          }
        | y_UserDefinedReso_1246_UserDefinedReso_1246_Type
          {$$ = new UserDefinedReso_1243_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedReso_1243_TypeType = UserDefinedReso_1243_TypeChoicePair::UserDefinedReso_1246E;
           $$->UserDefinedReso_1243_TypeValue.UserDefinedReso_1246 = $1;
          }
        ;

y_UserDefinedReso_1243_UserDefinedReso_1243_Type :
          y_UserDefinedReso_1243_Type
          {$$ = $1;}
        ;

y_UserDefinedReso_1246_Type :
          y_CombinedUserDefinedResolution_CombinedUserDefinedResolutionType
          y_ABCResolution_ABCResolutionType
          {$$ = new UserDefinedReso_1246_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedReso_1246_UserDefinedReso_1246_Type :
          y_UserDefinedReso_1246_Type
          {$$ = $1;}
        ;

y_UserDefinedResolutionType :
          ENDITEM y_UserDefinedReso_1243_UserDefinedReso_1243_Type
          {$$ = new UserDefinedResolutionType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedResolution_UserDefinedResolutionType :
          UserDefinedResolutionSTART y_UserDefinedResolutionType
          UserDefinedResolutionEND
          {$$ = $2;
           $$->printElement = "UserDefinedResolution";
          }
        ;

y_UserDefinedSpee_1143_Type :
          y_UserDefinedSpee_1143_TypeChoicePair
          {$$ = new UserDefinedSpee_1143_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedSpee_1143_TypeChoicePair :
          y_MinDeviationStats_StatsSpeedType
          {$$ = new UserDefinedSpee_1143_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedSpee_1143_TypeType = UserDefinedSpee_1143_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedSpee_1143_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsSpeedType
          {$$ = new UserDefinedSpee_1143_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedSpee_1143_TypeType = UserDefinedSpee_1143_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedSpee_1143_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedSpee_1182_UserDefinedSpee_1182_Type
          {$$ = new UserDefinedSpee_1143_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedSpee_1143_TypeType = UserDefinedSpee_1143_TypeChoicePair::UserDefinedSpee_1182E;
           $$->UserDefinedSpee_1143_TypeValue.UserDefinedSpee_1182 = $1;
          }
        | y_UserDefinedSpee_1183_UserDefinedSpee_1183_Type
          {$$ = new UserDefinedSpee_1143_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedSpee_1143_TypeType = UserDefinedSpee_1143_TypeChoicePair::UserDefinedSpee_1183E;
           $$->UserDefinedSpee_1143_TypeValue.UserDefinedSpee_1183 = $1;
          }
        | y_UserDefinedSpee_1184_UserDefinedSpee_1184_Type
          {$$ = new UserDefinedSpee_1143_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedSpee_1143_TypeType = UserDefinedSpee_1143_TypeChoicePair::UserDefinedSpee_1184E;
           $$->UserDefinedSpee_1143_TypeValue.UserDefinedSpee_1184 = $1;
          }
        | y_UserDefinedSpee_1185_UserDefinedSpee_1185_Type
          {$$ = new UserDefinedSpee_1143_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedSpee_1143_TypeType = UserDefinedSpee_1143_TypeChoicePair::UserDefinedSpee_1185E;
           $$->UserDefinedSpee_1143_TypeValue.UserDefinedSpee_1185 = $1;
          }
        ;

y_UserDefinedSpee_1143_UserDefinedSpee_1143_Type :
          y_UserDefinedSpee_1143_Type
          {$$ = $1;}
        ;

y_UserDefinedSpee_1182_Type :
          y_ValueStats_StatsWithTolSpeedType
          y_MaxValueStats_StatsSpeedType_0 y_MinValueStats_StatsSpeedType_0
          {$$ = new UserDefinedSpee_1182_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedSpee_1182_UserDefinedSpee_1182_Type :
          y_UserDefinedSpee_1182_Type
          {$$ = $1;}
        ;

y_UserDefinedSpee_1183_Type :
          y_MaxValueStats_StatsSpeedType y_MinValueStats_StatsSpeedType_0
          {$$ = new UserDefinedSpee_1183_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedSpee_1183_UserDefinedSpee_1183_Type :
          y_UserDefinedSpee_1183_Type
          {$$ = $1;}
        ;

y_UserDefinedSpee_1184_Type :
          y_DeviationStats_StatsWithTolSpeedType
          y_MaxDeviationStats_StatsSpeedType_0
          y_MinDeviationStats_StatsSpeedType_0
          {$$ = new UserDefinedSpee_1184_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedSpee_1184_UserDefinedSpee_1184_Type :
          y_UserDefinedSpee_1184_Type
          {$$ = $1;}
        ;

y_UserDefinedSpee_1185_Type :
          y_MaxDeviationStats_StatsSpeedType
          y_MinDeviationStats_StatsSpeedType_0
          {$$ = new UserDefinedSpee_1185_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedSpee_1185_UserDefinedSpee_1185_Type :
          y_UserDefinedSpee_1185_Type
          {$$ = $1;}
        ;

y_UserDefinedSpeedCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_SpeedCharacteri_1068_SpeedCharacteri_1068_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedSpeedCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedSpeedCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedSpeedCharacteristicDefinition_UserDefinedSpeedCharacteristicDefinitionType :
          UserDefinedSpeedCharacteristicDefinitionSTART
          y_UserDefinedSpeedCharacteristicDefinitionType
          UserDefinedSpeedCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedSpeedCharacteristicDefinition";
          }
        ;

y_UserDefinedSpeedCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedSpeedCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedSpeedCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedSpeedCharacteristicItem_UserDefinedSpeedCharacteristicItemType :
          UserDefinedSpeedCharacteristicItemSTART
          y_UserDefinedSpeedCharacteristicItemType
          UserDefinedSpeedCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedSpeedCharacteristicItem";
          }
        ;

y_UserDefinedSpeedCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredSpeedValueType_0
          y_MaxValue_MeasuredSpeedValueType_0
          y_MinValue_MeasuredSpeedValueType_0
          {$$ = new UserDefinedSpeedCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedSpeedCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedSpeedCharacteristicMeasurement_UserDefinedSpeedCharacteristicMeasurementType :
          UserDefinedSpeedCharacteristicMeasurementSTART
          y_UserDefinedSpeedCharacteristicMeasurementType
          UserDefinedSpeedCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedSpeedCharacteristicMeasurement";
          }
        ;

y_UserDefinedSpeedCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_SpeedValueType_0
          {$$ = new UserDefinedSpeedCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedSpeedCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedSpeedCharacteristicNominal_UserDefinedSpeedCharacteristicNominalType :
          UserDefinedSpeedCharacteristicNominalSTART
          y_UserDefinedSpeedCharacteristicNominalType
          UserDefinedSpeedCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedSpeedCharacteristicNominal";
          }
        ;

y_UserDefinedSpeedCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedSpee_1143_UserDefinedSpee_1143_Type
          {$$ = new UserDefinedSpeedCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedSpeedCharacteristicStats_UserDefinedSpeedCharacteristicStatsEvalType :
          UserDefinedSpeedCharacteristicStatsSTART
          y_UserDefinedSpeedCharacteristicStatsEvalType
          UserDefinedSpeedCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedSpeedCharacteristicStats";
          }
        ;

y_UserDefinedStrategy_XmlToken :
          UserDefinedStrategySTART ENDITEM {yyReadData = 1;} y_XmlToken
          UserDefinedStrategyEND
          {$$ = $4;}
        ;

y_UserDefinedTemp_1144_Type :
          y_UserDefinedTemp_1144_TypeChoicePair
          {$$ = new UserDefinedTemp_1144_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedTemp_1144_TypeChoicePair :
          y_MinDeviationStats_StatsTemperatureType
          {$$ = new UserDefinedTemp_1144_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTemp_1144_TypeType = UserDefinedTemp_1144_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedTemp_1144_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsTemperatureType
          {$$ = new UserDefinedTemp_1144_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTemp_1144_TypeType = UserDefinedTemp_1144_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedTemp_1144_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedTemp_1186_UserDefinedTemp_1186_Type
          {$$ = new UserDefinedTemp_1144_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTemp_1144_TypeType = UserDefinedTemp_1144_TypeChoicePair::UserDefinedTemp_1186E;
           $$->UserDefinedTemp_1144_TypeValue.UserDefinedTemp_1186 = $1;
          }
        | y_UserDefinedTemp_1187_UserDefinedTemp_1187_Type
          {$$ = new UserDefinedTemp_1144_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTemp_1144_TypeType = UserDefinedTemp_1144_TypeChoicePair::UserDefinedTemp_1187E;
           $$->UserDefinedTemp_1144_TypeValue.UserDefinedTemp_1187 = $1;
          }
        | y_UserDefinedTemp_1188_UserDefinedTemp_1188_Type
          {$$ = new UserDefinedTemp_1144_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTemp_1144_TypeType = UserDefinedTemp_1144_TypeChoicePair::UserDefinedTemp_1188E;
           $$->UserDefinedTemp_1144_TypeValue.UserDefinedTemp_1188 = $1;
          }
        | y_UserDefinedTemp_1189_UserDefinedTemp_1189_Type
          {$$ = new UserDefinedTemp_1144_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTemp_1144_TypeType = UserDefinedTemp_1144_TypeChoicePair::UserDefinedTemp_1189E;
           $$->UserDefinedTemp_1144_TypeValue.UserDefinedTemp_1189 = $1;
          }
        ;

y_UserDefinedTemp_1144_UserDefinedTemp_1144_Type :
          y_UserDefinedTemp_1144_Type
          {$$ = $1;}
        ;

y_UserDefinedTemp_1186_Type :
          y_ValueStats_StatsWithTolTemperatureType
          y_MaxValueStats_StatsTemperatureType_0
          y_MinValueStats_StatsTemperatureType_0
          {$$ = new UserDefinedTemp_1186_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedTemp_1186_UserDefinedTemp_1186_Type :
          y_UserDefinedTemp_1186_Type
          {$$ = $1;}
        ;

y_UserDefinedTemp_1187_Type :
          y_MaxValueStats_StatsTemperatureType
          y_MinValueStats_StatsTemperatureType_0
          {$$ = new UserDefinedTemp_1187_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedTemp_1187_UserDefinedTemp_1187_Type :
          y_UserDefinedTemp_1187_Type
          {$$ = $1;}
        ;

y_UserDefinedTemp_1188_Type :
          y_DeviationStats_StatsWithTolTemperatureType
          y_MaxDeviationStats_StatsTemperatureType_0
          y_MinDeviationStats_StatsTemperatureType_0
          {$$ = new UserDefinedTemp_1188_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedTemp_1188_UserDefinedTemp_1188_Type :
          y_UserDefinedTemp_1188_Type
          {$$ = $1;}
        ;

y_UserDefinedTemp_1189_Type :
          y_MaxDeviationStats_StatsTemperatureType
          y_MinDeviationStats_StatsTemperatureType_0
          {$$ = new UserDefinedTemp_1189_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedTemp_1189_UserDefinedTemp_1189_Type :
          y_UserDefinedTemp_1189_Type
          {$$ = $1;}
        ;

y_UserDefinedTemperatureCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_TemperatureChar_1072_TemperatureChar_1072_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedTemperatureCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTemperatureCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTemperatureCharacteristicDefinition_UserDefinedTemperatureCharacteristicDefinitionType :
          UserDefinedTemperatureCharacteristicDefinitionSTART
          y_UserDefinedTemperatureCharacteristicDefinitionType
          UserDefinedTemperatureCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedTemperatureCharacteristicDefinition";
          }
        ;

y_UserDefinedTemperatureCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedTemperatureCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTemperatureCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTemperatureCharacteristicItem_UserDefinedTemperatureCharacteristicItemType :
          UserDefinedTemperatureCharacteristicItemSTART
          y_UserDefinedTemperatureCharacteristicItemType
          UserDefinedTemperatureCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedTemperatureCharacteristicItem";
          }
        ;

y_UserDefinedTemperatureCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredTemperatureValueType_0
          y_MaxValue_MeasuredTemperatureValueType_0
          y_MinValue_MeasuredTemperatureValueType_0
          {$$ = new UserDefinedTemperatureCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTemperatureCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTemperatureCharacteristicMeasurement_UserDefinedTemperatureCharacteristicMeasurementType :
          UserDefinedTemperatureCharacteristicMeasurementSTART
          y_UserDefinedTemperatureCharacteristicMeasurementType
          UserDefinedTemperatureCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedTemperatureCharacteristicMeasurement";
          }
        ;

y_UserDefinedTemperatureCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_TemperatureValueType_0
          {$$ = new UserDefinedTemperatureCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTemperatureCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTemperatureCharacteristicNominal_UserDefinedTemperatureCharacteristicNominalType :
          UserDefinedTemperatureCharacteristicNominalSTART
          y_UserDefinedTemperatureCharacteristicNominalType
          UserDefinedTemperatureCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedTemperatureCharacteristicNominal";
          }
        ;

y_UserDefinedTemperatureCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedTemp_1144_UserDefinedTemp_1144_Type
          {$$ = new UserDefinedTemperatureCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedTemperatureCharacteristicStats_UserDefinedTemperatureCharacteristicStatsEvalType :
          UserDefinedTemperatureCharacteristicStatsSTART
          y_UserDefinedTemperatureCharacteristicStatsEvalType
          UserDefinedTemperatureCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedTemperatureCharacteristicStats";
          }
        ;

y_UserDefinedTimeCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_TimeCharacteris_1073_TimeCharacteris_1073_Type
          y_WhatToMeasure_XmlString
          {$$ = new UserDefinedTimeCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTimeCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTimeCharacteristicDefinition_UserDefinedTimeCharacteristicDefinitionType :
          UserDefinedTimeCharacteristicDefinitionSTART
          y_UserDefinedTimeCharacteristicDefinitionType
          UserDefinedTimeCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedTimeCharacteristicDefinition";
          }
        ;

y_UserDefinedTimeCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedTimeCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTimeCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTimeCharacteristicItem_UserDefinedTimeCharacteristicItemType :
          UserDefinedTimeCharacteristicItemSTART
          y_UserDefinedTimeCharacteristicItemType
          UserDefinedTimeCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedTimeCharacteristicItem";
          }
        ;

y_UserDefinedTimeCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredTimeValueType_0
          y_MaxValue_MeasuredTimeValueType_0
          y_MinValue_MeasuredTimeValueType_0
          {$$ = new UserDefinedTimeCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTimeCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTimeCharacteristicMeasurement_UserDefinedTimeCharacteristicMeasurementType :
          UserDefinedTimeCharacteristicMeasurementSTART
          y_UserDefinedTimeCharacteristicMeasurementType
          UserDefinedTimeCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedTimeCharacteristicMeasurement";
          }
        ;

y_UserDefinedTimeCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_TimeValueType_0
          {$$ = new UserDefinedTimeCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedTimeCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedTimeCharacteristicNominal_UserDefinedTimeCharacteristicNominalType :
          UserDefinedTimeCharacteristicNominalSTART
          y_UserDefinedTimeCharacteristicNominalType
          UserDefinedTimeCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedTimeCharacteristicNominal";
          }
        ;

y_UserDefinedTimeCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedTime_1145_UserDefinedTime_1145_Type
          {$$ = new UserDefinedTimeCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedTimeCharacteristicStats_UserDefinedTimeCharacteristicStatsEvalType :
          UserDefinedTimeCharacteristicStatsSTART
          y_UserDefinedTimeCharacteristicStatsEvalType
          UserDefinedTimeCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedTimeCharacteristicStats";
          }
        ;

y_UserDefinedTime_1145_Type :
          y_UserDefinedTime_1145_TypeChoicePair
          {$$ = new UserDefinedTime_1145_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedTime_1145_TypeChoicePair :
          y_MinDeviationStats_StatsTimeType
          {$$ = new UserDefinedTime_1145_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTime_1145_TypeType = UserDefinedTime_1145_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedTime_1145_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsTimeType
          {$$ = new UserDefinedTime_1145_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTime_1145_TypeType = UserDefinedTime_1145_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedTime_1145_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedTime_1190_UserDefinedTime_1190_Type
          {$$ = new UserDefinedTime_1145_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTime_1145_TypeType = UserDefinedTime_1145_TypeChoicePair::UserDefinedTime_1190E;
           $$->UserDefinedTime_1145_TypeValue.UserDefinedTime_1190 = $1;
          }
        | y_UserDefinedTime_1191_UserDefinedTime_1191_Type
          {$$ = new UserDefinedTime_1145_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTime_1145_TypeType = UserDefinedTime_1145_TypeChoicePair::UserDefinedTime_1191E;
           $$->UserDefinedTime_1145_TypeValue.UserDefinedTime_1191 = $1;
          }
        | y_UserDefinedTime_1192_UserDefinedTime_1192_Type
          {$$ = new UserDefinedTime_1145_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTime_1145_TypeType = UserDefinedTime_1145_TypeChoicePair::UserDefinedTime_1192E;
           $$->UserDefinedTime_1145_TypeValue.UserDefinedTime_1192 = $1;
          }
        | y_UserDefinedTime_1193_UserDefinedTime_1193_Type
          {$$ = new UserDefinedTime_1145_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedTime_1145_TypeType = UserDefinedTime_1145_TypeChoicePair::UserDefinedTime_1193E;
           $$->UserDefinedTime_1145_TypeValue.UserDefinedTime_1193 = $1;
          }
        ;

y_UserDefinedTime_1145_UserDefinedTime_1145_Type :
          y_UserDefinedTime_1145_Type
          {$$ = $1;}
        ;

y_UserDefinedTime_1190_Type :
          y_ValueStats_StatsWithTolTimeType y_MaxValueStats_StatsTimeType_0
          y_MinValueStats_StatsTimeType_0
          {$$ = new UserDefinedTime_1190_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedTime_1190_UserDefinedTime_1190_Type :
          y_UserDefinedTime_1190_Type
          {$$ = $1;}
        ;

y_UserDefinedTime_1191_Type :
          y_MaxValueStats_StatsTimeType y_MinValueStats_StatsTimeType_0
          {$$ = new UserDefinedTime_1191_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedTime_1191_UserDefinedTime_1191_Type :
          y_UserDefinedTime_1191_Type
          {$$ = $1;}
        ;

y_UserDefinedTime_1192_Type :
          y_DeviationStats_StatsWithTolTimeType
          y_MaxDeviationStats_StatsTimeType_0
          y_MinDeviationStats_StatsTimeType_0
          {$$ = new UserDefinedTime_1192_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedTime_1192_UserDefinedTime_1192_Type :
          y_UserDefinedTime_1192_Type
          {$$ = $1;}
        ;

y_UserDefinedTime_1193_Type :
          y_MaxDeviationStats_StatsTimeType
          y_MinDeviationStats_StatsTimeType_0
          {$$ = new UserDefinedTime_1193_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedTime_1193_UserDefinedTime_1193_Type :
          y_UserDefinedTime_1193_Type
          {$$ = $1;}
        ;

y_UserDefinedUnitAbsoluteLinearity_MeasuredUserDefinedUnitValueType :
          UserDefinedUnitAbsoluteLinearitySTART
          y_MeasuredUserDefinedUnitValueType
          UserDefinedUnitAbsoluteLinearityEND
          {$$ = $2;}
        ;

y_UserDefinedUnitCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new UserDefinedUnitCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedUnitCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedUnitCharacteristicDefinition_UserDefinedUnitCharacteristicDefinitionType :
          UserDefinedUnitCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new UserDefinedUnitCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "UserDefinedUnitCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad UserDefinedUnitCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | UserDefinedUnitCharacteristicDefinitionSTART
          y_UserDefinedUnitCharacteristicDefinitionType
          UserDefinedUnitCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "UserDefinedUnitCharacteristicDefinition";
          }
        ;

y_UserDefinedUnitCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new UserDefinedUnitCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedUnitCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedUnitCharacteristicItem_UserDefinedUnitCharacteristicItemType :
          UserDefinedUnitCharacteristicItemSTART
          y_UserDefinedUnitCharacteristicItemType
          UserDefinedUnitCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "UserDefinedUnitCharacteristicItem";
          }
        ;

y_UserDefinedUnitCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredUserDefinedUnitValueType_0
          y_MaxValue_MeasuredUserDefinedUnitValueType_0
          y_MinValue_MeasuredUserDefinedUnitValueType_0
          {$$ = new UserDefinedUnitCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedUnitCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedUnitCharacteristicMeasurement_UserDefinedUnitCharacteristicMeasurementType :
          UserDefinedUnitCharacteristicMeasurementSTART
          y_UserDefinedUnitCharacteristicMeasurementType
          UserDefinedUnitCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "UserDefinedUnitCharacteristicMeasurement";
          }
        ;

y_UserDefinedUnitCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_UserDefinedUnitValueType
          y_UserDefinedUnit_1074_UserDefinedUnit_1074_Type
          y_DefinedAsLimit_XmlBoolean
          {$$ = new UserDefinedUnitCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedUnitCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedUnitCharacteristicNominal_UserDefinedUnitCharacteristicNominalType :
          UserDefinedUnitCharacteristicNominalSTART
          y_UserDefinedUnitCharacteristicNominalType
          UserDefinedUnitCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "UserDefinedUnitCharacteristicNominal";
          }
        ;

y_UserDefinedUnitCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_UserDefinedUnit_1146_UserDefinedUnit_1146_Type
          {$$ = new UserDefinedUnitCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_UserDefinedUnitCharacteristicStats_UserDefinedUnitCharacteristicStatsEvalType :
          UserDefinedUnitCharacteristicStatsSTART
          y_UserDefinedUnitCharacteristicStatsEvalType
          UserDefinedUnitCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "UserDefinedUnitCharacteristicStats";
          }
        ;

y_UserDefinedUnitCriterion_CriterionUserDefinedUnitType :
          UserDefinedUnitCriterionSTART y_CriterionUserDefinedUnitType
          UserDefinedUnitCriterionEND
          {$$ = $2;
           $$->printElement = "UserDefinedUnitCriterion";
          }
        ;

y_UserDefinedUnitLimit_UserDefinedUnitValueType :
          UserDefinedUnitLimitSTART y_UserDefinedUnitValueType
          UserDefinedUnitLimitEND
          {$$ = $2;}
        ;

y_UserDefinedUnitMeasurement_MeasuredUserDefinedUnitValueType :
          UserDefinedUnitMeasurementSTART
          y_MeasuredUserDefinedUnitValueType UserDefinedUnitMeasurementEND
          {$$ = $2;}
        ;

y_UserDefinedUnitStatsSummaries_SummariesStatisticsUserDefinedUnitType_0 :
          /* empty */
          {$$ = 0;}
        | UserDefinedUnitStatsSummariesSTART
          y_SummariesStatisticsUserDefinedUnitType
          UserDefinedUnitStatsSummariesEND
          {$$ = $2;}
        ;

y_UserDefinedUnitStatsSummary_SummaryStatisticsUserDefinedUnitType :
          UserDefinedUnitStatsSummarySTART
          y_SummaryStatisticsUserDefinedUnitType
          UserDefinedUnitStatsSummaryEND
          {$$ = $2;
           $$->printElement = "UserDefinedUnitStatsSummary";
          }
        ;

y_UserDefinedUnitType :
          ENDITEM y_WhatIsMeasured_XmlString y_UnitName_XmlToken
          y_StandardName_XmlString_0
          {$$ = new UserDefinedUnitType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_UserDefinedUnitValueType :
          y_LiztAttributePair ENDITEM {yyReadData = 1;} DATASTRING
          {$$ = new UserDefinedUnitValueType($4);
           yyUnrefMap[$$] = $$;
           free($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedUnitValueType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedUnit_1074_Type :
          y_UserDefinedUnit_1074_TypeChoicePair
          {$$ = new UserDefinedUnit_1074_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedUnit_1074_TypeChoicePair :
          y_MinValue_UserDefinedUnitValueType
          {$$ = new UserDefinedUnit_1074_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1074_TypeType = UserDefinedUnit_1074_TypeChoicePair::MinValueE;
           $$->UserDefinedUnit_1074_TypeValue.MinValue = $1;
          }
        | y_UserDefinedUnit_1089_UserDefinedUnit_1089_Type
          {$$ = new UserDefinedUnit_1074_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1074_TypeType = UserDefinedUnit_1074_TypeChoicePair::UserDefinedUnit_1089E;
           $$->UserDefinedUnit_1074_TypeValue.UserDefinedUnit_1089 = $1;
          }
        ;

y_UserDefinedUnit_1074_UserDefinedUnit_1074_Type :
          y_UserDefinedUnit_1074_Type
          {$$ = $1;}
        ;

y_UserDefinedUnit_1089_Type :
          y_MaxValue_UserDefinedUnitValueType
          y_MinValue_UserDefinedUnitValueType_0
          {$$ = new UserDefinedUnit_1089_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedUnit_1089_UserDefinedUnit_1089_Type :
          y_UserDefinedUnit_1089_Type
          {$$ = $1;}
        ;

y_UserDefinedUnit_1146_Type :
          y_UserDefinedUnit_1146_TypeChoicePair
          {$$ = new UserDefinedUnit_1146_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_UserDefinedUnit_1146_TypeChoicePair :
          y_MinDeviationStats_StatsUserDefinedUnitType
          {$$ = new UserDefinedUnit_1146_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1146_TypeType = UserDefinedUnit_1146_TypeChoicePair::MinDeviationStatsE;
           $$->UserDefinedUnit_1146_TypeValue.MinDeviationStats = $1;
          }
        | y_MinValueStats_StatsUserDefinedUnitType
          {$$ = new UserDefinedUnit_1146_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1146_TypeType = UserDefinedUnit_1146_TypeChoicePair::MinValueStatsE;
           $$->UserDefinedUnit_1146_TypeValue.MinValueStats = $1;
          }
        | y_UserDefinedUnit_1194_UserDefinedUnit_1194_Type
          {$$ = new UserDefinedUnit_1146_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1146_TypeType = UserDefinedUnit_1146_TypeChoicePair::UserDefinedUnit_1194E;
           $$->UserDefinedUnit_1146_TypeValue.UserDefinedUnit_1194 = $1;
          }
        | y_UserDefinedUnit_1195_UserDefinedUnit_1195_Type
          {$$ = new UserDefinedUnit_1146_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1146_TypeType = UserDefinedUnit_1146_TypeChoicePair::UserDefinedUnit_1195E;
           $$->UserDefinedUnit_1146_TypeValue.UserDefinedUnit_1195 = $1;
          }
        | y_UserDefinedUnit_1196_UserDefinedUnit_1196_Type
          {$$ = new UserDefinedUnit_1146_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1146_TypeType = UserDefinedUnit_1146_TypeChoicePair::UserDefinedUnit_1196E;
           $$->UserDefinedUnit_1146_TypeValue.UserDefinedUnit_1196 = $1;
          }
        | y_UserDefinedUnit_1197_UserDefinedUnit_1197_Type
          {$$ = new UserDefinedUnit_1146_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->UserDefinedUnit_1146_TypeType = UserDefinedUnit_1146_TypeChoicePair::UserDefinedUnit_1197E;
           $$->UserDefinedUnit_1146_TypeValue.UserDefinedUnit_1197 = $1;
          }
        ;

y_UserDefinedUnit_1146_UserDefinedUnit_1146_Type :
          y_UserDefinedUnit_1146_Type
          {$$ = $1;}
        ;

y_UserDefinedUnit_1194_Type :
          y_ValueStats_StatsWithTolUserDefinedUnitType
          y_MaxValueStats_StatsUserDefinedUnitType_0
          y_MinValueStats_StatsUserDefinedUnitType_0
          {$$ = new UserDefinedUnit_1194_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedUnit_1194_UserDefinedUnit_1194_Type :
          y_UserDefinedUnit_1194_Type
          {$$ = $1;}
        ;

y_UserDefinedUnit_1195_Type :
          y_MaxValueStats_StatsUserDefinedUnitType
          y_MinValueStats_StatsUserDefinedUnitType_0
          {$$ = new UserDefinedUnit_1195_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedUnit_1195_UserDefinedUnit_1195_Type :
          y_UserDefinedUnit_1195_Type
          {$$ = $1;}
        ;

y_UserDefinedUnit_1196_Type :
          y_DeviationStats_StatsWithTolUserDefinedUnitType
          y_MaxDeviationStats_StatsUserDefinedUnitType_0
          y_MinDeviationStats_StatsUserDefinedUnitType_0
          {$$ = new UserDefinedUnit_1196_Type($1, $2, $3);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_UserDefinedUnit_1196_UserDefinedUnit_1196_Type :
          y_UserDefinedUnit_1196_Type
          {$$ = $1;}
        ;

y_UserDefinedUnit_1197_Type :
          y_MaxDeviationStats_StatsUserDefinedUnitType
          y_MinDeviationStats_StatsUserDefinedUnitType_0
          {$$ = new UserDefinedUnit_1197_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_UserDefinedUnit_1197_UserDefinedUnit_1197_Type :
          y_UserDefinedUnit_1197_Type
          {$$ = $1;}
        ;

y_UserDefinedUnit_UserDefinedUnitType :
          UserDefinedUnitSTART y_UserDefinedUnitType UserDefinedUnitEND
          {$$ = $2;}
        ;

y_UserDefinedUnitsType :
          y_LiztAttributePair ENDITEM
          y_LiztUserDefinedUnit_UserDefinedUnitType_1_u
          {$$ = new UserDefinedUnitsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad UserDefinedUnitsType attributes");
             }
           delete $1;
          }
        ;

y_UserDefinedUnits_UserDefinedUnitsType_0 :
          /* empty */
          {$$ = 0;}
        | UserDefinedUnitsSTART y_UserDefinedUnitsType UserDefinedUnitsEND
          {$$ = $2;}
        ;

y_UserDefinedWorkingVolumeId_QIFReferenceType :
          UserDefinedWorkingVolumeIdSTART y_QIFReferenceType
          UserDefinedWorkingVolumeIdEND
          {$$ = $2;}
        ;

y_UserDefinedWorkingVolumeType :
          ENDITEM y_FirstAxis_UserDefinedAxisType
          y_SecondAxis_UserDefinedAxisType y_ThirdAxis_UserDefinedAxisType
          {$$ = new UserDefinedWorkingVolumeType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_UserDefinedWorkingVolume_UserDefinedWorkingVolumeType :
          UserDefinedWorkingVolumeSTART y_UserDefinedWorkingVolumeType
          UserDefinedWorkingVolumeEND
          {$$ = $2;
           $$->printElement = "UserDefinedWorkingVolume";
          }
        ;

y_Val_XmlDecimal :
          ValSTART ENDITEM {yyReadData = 1;} y_XmlDecimal ValEND
          {$$ = $4;}
        ;

y_ValidationBodyType :
          ENDITEM y_Area_XmlDouble_0 y_Centroid_PointSimpleType_0
          y_Volume_XmlDouble_0 y_Box_BoundingBoxAxisAlignedType_0
          y_FacePoints_ValidationPointsType_0
          y_EdgePoints_ValidationPointsType_0
          {$$ = new ValidationBodyType($2, $3, $4, $5, $6, $7);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
          }
        ;

y_ValidationCountsType :
          ENDITEM y_ExternalQIFReferencesCount_XmlUnsignedInt_0
          y_DatumDefinitionsCount_XmlUnsignedInt_0
          y_DatumTargetDefinitionsCount_XmlUnsignedInt_0
          y_TransformsCount_XmlUnsignedInt_0
          y_CoordinateSystemsCount_XmlUnsignedInt_0
          y_DatumReferenceFramesCount_XmlUnsignedInt_0
          y_MeasurementResourcesCount_XmlUnsignedInt_0
          y_ThreadSpecificationsCount_XmlUnsignedInt_0
          y_ProductGeometrySetCount_XmlUnsignedInt_0
          y_ProductTopologySetCount_XmlUnsignedInt_0
          y_ProductNoteSetCount_XmlUnsignedInt_0
          y_ProductNoteFlagSetCount_XmlUnsignedInt_0
          y_ProductPartNoteSetCount_XmlUnsignedInt_0
          y_ProductViewSetCount_XmlUnsignedInt_0
          y_ProductLayerSetCount_XmlUnsignedInt_0
          y_ProductCoordinateSystemSetCount_XmlUnsignedInt_0
          y_ProductVisualizationSetCount_XmlUnsignedInt_0
          y_ProductAuxiliarySetCount_XmlUnsignedInt_0
          y_ProductPartSetCount_XmlUnsignedInt_0
          y_ProductAssemblySetCount_XmlUnsignedInt_0
          y_ProductComponentSetCount_XmlUnsignedInt_0
          y_ProductAsmPathsCount_XmlUnsignedInt_0
          y_FeatureDefinitionsCount_XmlUnsignedInt_0
          y_FeatureNominalsCount_XmlUnsignedInt_0
          y_FeatureItemsCount_XmlUnsignedInt_0
          y_CharacteristicDefinitionsCount_XmlUnsignedInt_0
          y_DefaultCharacteristicDefinitionsCount_XmlUnsignedInt_0
          y_DefaultToleranceDefinitionsCount_XmlUnsignedInt_0
          y_CharacteristicNominalsCount_XmlUnsignedInt_0
          y_CharacteristicItemsCount_XmlUnsignedInt_0
          y_CharacteristicGroupsCount_XmlUnsignedInt_0
          y_WeldSymbolSetCount_XmlUnsignedInt_0
          y_MeasurementsPlanPresent_XmlBoolean_0
          y_MeasurementsResultsCount_XmlUnsignedInt_0
          y_StatisticalStudyPlansCount_XmlUnsignedInt_0
          y_StatisticalStudiesResultsCount_XmlUnsignedInt_0
          y_CorrectiveActionPlansCount_XmlUnsignedInt_0
          y_ManufacturingProcessTraceabilitiesCount_XmlUnsignedInt_0
          y_FeatureRulesCount_XmlUnsignedInt_0
          y_DMESelectionRulesCount_XmlUnsignedInt_0
          y_SignaturePresent_XmlBoolean_0
          {$$ = new ValidationCountsType($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           if ($21) yyUnrefMap.erase($21);
           if ($22) yyUnrefMap.erase($22);
           if ($23) yyUnrefMap.erase($23);
           if ($24) yyUnrefMap.erase($24);
           if ($25) yyUnrefMap.erase($25);
           if ($26) yyUnrefMap.erase($26);
           if ($27) yyUnrefMap.erase($27);
           if ($28) yyUnrefMap.erase($28);
           if ($29) yyUnrefMap.erase($29);
           if ($30) yyUnrefMap.erase($30);
           if ($31) yyUnrefMap.erase($31);
           if ($32) yyUnrefMap.erase($32);
           if ($33) yyUnrefMap.erase($33);
           if ($34) yyUnrefMap.erase($34);
           if ($35) yyUnrefMap.erase($35);
           if ($36) yyUnrefMap.erase($36);
           if ($37) yyUnrefMap.erase($37);
           if ($38) yyUnrefMap.erase($38);
           if ($39) yyUnrefMap.erase($39);
           if ($40) yyUnrefMap.erase($40);
           if ($41) yyUnrefMap.erase($41);
           if ($42) yyUnrefMap.erase($42);
          }
        ;

y_ValidationCounts_ValidationCountsType_0 :
          /* empty */
          {$$ = 0;}
        | ValidationCountsSTART ENDWHOLEITEM
          {$$ = new ValidationCountsType();
           yyUnrefMap[$$] = $$;
          }
        | ValidationCountsSTART y_ValidationCountsType ValidationCountsEND
          {$$ = $2;}
        ;

y_ValidationEdgeType :
          ENDITEM y_Length_XmlDouble_0 y_Centroid_PointSimpleType_0
          y_Box_BoundingBoxAxisAlignedType_0
          y_Points_ValidationPointsType_0
          {$$ = new ValidationEdgeType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_ValidationFaceType :
          ENDITEM y_Area_XmlDouble_0 y_Centroid_PointSimpleType_0
          y_Box_BoundingBoxAxisAlignedType_0
          y_Points_ValidationPointsType_0
          {$$ = new ValidationFaceType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_ValidationPartAssemblyInstanceType :
          ENDITEM y_AsmPathId_QIFReferenceType y_Centroid_PointSimpleType_0
          y_Box_BoundingBoxAxisAlignedType_0
          {$$ = new ValidationPartAssemblyInstanceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ValidationPartAssemblyInstancesType :
          y_LiztAttributePair ENDITEM
          y_LiztInstance_ValidationPartAssemblyInstanceType_1_u
          {$$ = new ValidationPartAssemblyInstancesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ValidationPartAssemblyInstancesType attributes");
             }
           delete $1;
          }
        ;

y_ValidationPartAssemblyType :
          ENDITEM y_Area_XmlDouble_0 y_Centroid_PointSimpleType_0
          y_Volume_XmlDouble_0 y_Box_BoundingBoxAxisAlignedType_0
          y_FacePoints_ValidationPointsType_0
          y_EdgePoints_ValidationPointsType_0
          y_Instances_ValidationPartAssemblyInstancesType_0
          {$$ = new ValidationPartAssemblyType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_ValidationPoint_1003_Type :
          y_ValidationPoint_1003_TypeChoicePair
          {$$ = new ValidationPoint_1003_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ValidationPoint_1003_TypeChoicePair :
          y_PointsBinary_ArrayBinaryType
          {$$ = new ValidationPoint_1003_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ValidationPoint_1003_TypeType = ValidationPoint_1003_TypeChoicePair::PointsBinaryE;
           $$->ValidationPoint_1003_TypeValue.PointsBinary = $1;
          }
        | y_Points_ArrayPointType
          {$$ = new ValidationPoint_1003_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ValidationPoint_1003_TypeType = ValidationPoint_1003_TypeChoicePair::PointsE;
           $$->ValidationPoint_1003_TypeValue.Points = $1;
          }
        ;

y_ValidationPoint_1003_ValidationPoint_1003_Type :
          y_ValidationPoint_1003_Type
          {$$ = $1;}
        ;

y_ValidationPoint_1004_Type :
          y_ValidationPoint_1004_TypeChoicePair
          {$$ = new ValidationPoint_1004_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_ValidationPoint_1004_TypeChoicePair :
          y_DirectionsBinary_ArrayBinaryType
          {$$ = new ValidationPoint_1004_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ValidationPoint_1004_TypeType = ValidationPoint_1004_TypeChoicePair::DirectionsBinaryE;
           $$->ValidationPoint_1004_TypeValue.DirectionsBinary = $1;
          }
        | y_Directions_ArrayUnitVectorType
          {$$ = new ValidationPoint_1004_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->ValidationPoint_1004_TypeType = ValidationPoint_1004_TypeChoicePair::DirectionsE;
           $$->ValidationPoint_1004_TypeValue.Directions = $1;
          }
        ;

y_ValidationPoint_1004_ValidationPoint_1004_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_ValidationPoint_1004_Type
          {$$ = $1;}
        ;

y_ValidationPointsType :
          ENDITEM y_ValidationPoint_1003_ValidationPoint_1003_Type
          y_ValidationPoint_1004_ValidationPoint_1004_Type_0
          {$$ = new ValidationPointsType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_Validation_ValidationBodyType_0 :
          /* empty */
          {$$ = 0;}
        | ValidationSTART ENDWHOLEITEM
          {$$ = new ValidationBodyType();
           yyUnrefMap[$$] = $$;
          }
        | ValidationSTART y_ValidationBodyType ValidationEND
          {$$ = $2;}
        ;

y_Validation_ValidationEdgeType_0 :
          /* empty */
          {$$ = 0;}
        | ValidationSTART ENDWHOLEITEM
          {$$ = new ValidationEdgeType();
           yyUnrefMap[$$] = $$;
          }
        | ValidationSTART y_ValidationEdgeType ValidationEND
          {$$ = $2;}
        ;

y_Validation_ValidationFaceType_0 :
          /* empty */
          {$$ = 0;}
        | ValidationSTART ENDWHOLEITEM
          {$$ = new ValidationFaceType();
           yyUnrefMap[$$] = $$;
          }
        | ValidationSTART y_ValidationFaceType ValidationEND
          {$$ = $2;}
        ;

y_Validation_ValidationPartAssemblyType_0 :
          /* empty */
          {$$ = 0;}
        | ValidationSTART ENDWHOLEITEM
          {$$ = new ValidationPartAssemblyType();
           yyUnrefMap[$$] = $$;
          }
        | ValidationSTART y_ValidationPartAssemblyType ValidationEND
          {$$ = $2;}
        ;

y_ValueStats_StatsWithTolAngularType :
          ValueStatsSTART y_StatsWithTolAngularType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolAreaType :
          ValueStatsSTART y_StatsWithTolAreaType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolForceType :
          ValueStatsSTART y_StatsWithTolForceType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolLinearType :
          ValueStatsSTART y_StatsWithTolLinearType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolLinearType_0 :
          /* empty */
          {$$ = 0;}
        | ValueStatsSTART y_StatsWithTolLinearType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolMassType :
          ValueStatsSTART y_StatsWithTolMassType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolPressureType :
          ValueStatsSTART y_StatsWithTolPressureType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolSpeedType :
          ValueStatsSTART y_StatsWithTolSpeedType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolTemperatureType :
          ValueStatsSTART y_StatsWithTolTemperatureType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolTimeType :
          ValueStatsSTART y_StatsWithTolTimeType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_ValueStats_StatsWithTolUserDefinedUnitType :
          ValueStatsSTART y_StatsWithTolUserDefinedUnitType ValueStatsEND
          {$$ = $2;
           $$->printElement = "ValueStats";
          }
        ;

y_Value_D4Type :
          ValueSTART y_D4Type ValueEND
          {$$ = $2;
           $2->D4TypeCheck();
           if ($2->bad)
             return yyerror("bad D4Type value");
          }
        ;

y_Value_LinearValueType :
          ValueSTART y_LinearValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredAngularValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredAngularValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredAreaValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredAreaValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredDecimalType :
          ValueSTART y_MeasuredDecimalType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredForceValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredForceValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredLinearValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredMassValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredMassValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredPressureValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredPressureValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredSpeedValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredSpeedValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredTemperatureValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredTemperatureValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredTimeValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredTimeValueType ValueEND
          {$$ = $2;}
        ;

y_Value_MeasuredUserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART y_MeasuredUserDefinedUnitValueType ValueEND
          {$$ = $2;}
        ;

y_Value_QPIdType :
          ValueSTART ENDITEM {yyReadData = 1;} y_QPIdType ValueEND
          {$$ = $4;}
        ;

y_Value_XmlNonNegativeInteger :
          ValueSTART ENDITEM {yyReadData = 1;} y_XmlNonNegativeInteger
          ValueEND
          {$$ = $4;}
        ;

y_Value_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | ValueSTART ENDITEM {yyReadData = 1;} y_XmlString ValueEND
          {$$ = $4;}
        ;

y_Values_ListTokenType :
          ValuesSTART y_ListTokenType ValuesEND
          {$$ = $2;}
        ;

y_Values_SubgroupDecimalArrayType :
          ValuesSTART y_SubgroupDecimalArrayType ValuesEND
          {$$ = $2;}
        ;

y_Values_SubgroupIntegerArrayType :
          ValuesSTART y_SubgroupIntegerArrayType ValuesEND
          {$$ = $2;}
        ;

y_VariableAngle_XmlBoolean_0 :
          /* empty */
          {$$ = 0;}
        | VariableAngleSTART ENDITEM {yyReadData = 1;} y_XmlBoolean
          VariableAngleEND
          {$$ = $4;}
        ;

y_VariableDeclarationType :
          ENDITEM y_Name_XmlID y_Val_XmlDecimal
          {$$ = new VariableDeclarationType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_VariableName_XmlIDREF :
          VariableNameSTART ENDITEM {yyReadData = 1;} y_XmlIDREF
          VariableNameEND
          {$$ = $4;}
        ;

y_VariableSetType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0 y_VariableName_XmlIDREF
          y_ArithmeticExpression_substituteType
          {$$ = new VariableSetType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_VariableSet_VariableSetType :
          VariableSetSTART y_VariableSetType VariableSetEND
          {$$ = $2;
           $$->printElement = "VariableSet";
          }
        ;

y_VariableValueType :
          ENDITEM y_VariableName_XmlIDREF
          {$$ = new VariableValueType($2);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_VariableValue_VariableValueType :
          VariableValueSTART y_VariableValueType VariableValueEND
          {$$ = $2;
           $$->printElement = "VariableValue";
          }
        ;

y_Variable_VariableDeclarationType :
          VariableSTART y_VariableDeclarationType VariableEND
          {$$ = $2;}
        ;

y_VectorSimpleType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new VectorSimpleType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_VectorSimpleType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_VectorType :
          ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new VectorType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
          }
        | y_LiztAttributePair ENDITEM {yyReadDataList = 1;} y_XmlDouble
          {$$ = new VectorType($4);
           yyUnrefMap[$$] = $$;
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad VectorType attributes");
             }
           delete $1;
          }
        | y_VectorType y_XmlDouble
          {$$ = $1;
           $$->push_back($2);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_Vector_MeasuredUnitVectorType :
          VectorSTART y_MeasuredUnitVectorType VectorEND
          {$$ = $2;}
        ;

y_Vector_UnitVectorType :
          VectorSTART y_UnitVectorType VectorEND
          {$$ = $2;}
        ;

y_Vector_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | VectorSTART y_UnitVectorType VectorEND
          {$$ = $2;}
        ;

y_VendorName_XmlToken :
          VendorNameSTART ENDITEM {yyReadData = 1;} y_XmlToken
          VendorNameEND
          {$$ = $4;}
        ;

y_VersionBaseType :
          ENDITEM y_TimeCreated_XmlDateTime_0 y_SignOffs_SignOffsType_0
          {$$ = new VersionBaseType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_VersionHistoryType :
          y_LiztAttributePair ENDITEM
          y_LiztEarlierVersion_VersionReferenceType_1_u
          {$$ = new VersionHistoryType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad VersionHistoryType attributes");
             }
           delete $1;
          }
        ;

y_VersionHistory_VersionHistoryType_0 :
          /* empty */
          {$$ = 0;}
        | VersionHistorySTART y_VersionHistoryType VersionHistoryEND
          {$$ = $2;}
        ;

y_VersionReferenceType :
          ENDITEM y_TimeCreated_XmlDateTime_0 y_SignOffs_SignOffsType_0
          y_QPIdReference_QPIdReferenceType_0
          {$$ = new VersionReferenceType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_VersionType :
          ENDITEM y_TimeCreated_XmlDateTime_0 y_SignOffs_SignOffsType_0
          y_ThisInstanceQPId_QPIdType_0
          {$$ = new VersionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_Version_VersionBaseType_0 :
          /* empty */
          {$$ = 0;}
        | VersionSTART ENDWHOLEITEM
          {$$ = new VersionBaseType();
           yyUnrefMap[$$] = $$;
          }
        | VersionSTART y_VersionBaseType VersionEND
          {$$ = $2;}
        ;

y_Version_VersionType_0 :
          /* empty */
          {$$ = 0;}
        | VersionSTART ENDWHOLEITEM
          {$$ = new VersionType();
           yyUnrefMap[$$] = $$;
           $$->printElement = "Version";
          }
        | VersionSTART y_VersionType VersionEND
          {$$ = $2;
           $$->printElement = "Version";
          }
        ;

y_Version_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | VersionSTART ENDITEM {yyReadData = 1;} y_XmlString VersionEND
          {$$ = $4;}
        ;

y_Version_XmlToken_0 :
          /* empty */
          {$$ = 0;}
        | VersionSTART ENDITEM {yyReadData = 1;} y_XmlToken VersionEND
          {$$ = $4;}
        ;

y_VertexBeg_ElementReferenceType :
          VertexBegSTART y_ElementReferenceType VertexBegEND
          {$$ = $2;}
        ;

y_VertexEnd_ElementReferenceType :
          VertexEndSTART y_ElementReferenceType VertexEndEND
          {$$ = $2;}
        ;

y_VertexId_QIFReferenceFullType :
          VertexIdSTART y_QIFReferenceFullType VertexIdEND
          {$$ = $2;}
        ;

y_VertexIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | VertexIdsSTART y_ArrayReferenceType VertexIdsEND
          {$$ = $2;}
        ;

y_VertexSetType :
          y_LiztAttributePair ENDITEM y_LiztVertex_VertexType_1_u
          {$$ = new VertexSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad VertexSetType attributes");
             }
           delete $1;
          }
        ;

y_VertexSet_VertexSetType_0 :
          /* empty */
          {$$ = 0;}
        | VertexSetSTART y_VertexSetType VertexSetEND
          {$$ = $2;}
        ;

y_VertexType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Point_ElementReferenceType
          {$$ = new VertexType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad VertexType attributes");
             }
           delete $1;
          }
        ;

y_Vertex_MeasuredPointType_0 :
          /* empty */
          {$$ = 0;}
        | VertexSTART y_MeasuredPointType VertexEND
          {$$ = $2;}
        ;

y_Vertex_PointType_0 :
          /* empty */
          {$$ = 0;}
        | VertexSTART y_PointType VertexEND
          {$$ = $2;}
        ;

y_Vertex_VertexType :
          VertexSTART y_VertexType VertexEND
          {$$ = $2;
           $$->printElement = "Vertex";
          }
        ;

y_VerticalFieldOfView_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | VerticalFieldOfViewSTART y_LinearValueType VerticalFieldOfViewEND
          {$$ = $2;}
        ;

y_VerticesBinary_ArrayBinaryType :
          VerticesBinarySTART y_ArrayBinaryType VerticesBinaryEND
          {$$ = $2;}
        ;

y_Vertices_ArrayPoint2dType :
          VerticesSTART y_ArrayPoint2dType VerticesEND
          {$$ = $2;}
        ;

y_Vertices_ArrayPointType :
          VerticesSTART y_ArrayPointType VerticesEND
          {$$ = $2;}
        ;

y_Vertices_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | VerticesSTART y_ArrayReferenceType VerticesEND
          {$$ = $2;}
        ;

y_VibrationTolerance_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | VibrationToleranceSTART y_UserDefinedUnitValueType
          VibrationToleranceEND
          {$$ = $2;}
        ;

y_VideoInstructionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_ExternalFile_ExternalFileReferenceType
          {$$ = new VideoInstructionType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad VideoInstructionType attributes");
             }
           delete $1;
          }
        ;

y_VideoInstruction_VideoInstructionType :
          VideoInstructionSTART y_VideoInstructionType VideoInstructionEND
          {$$ = $2;
           $$->printElement = "VideoInstruction";
          }
        ;

y_ViewId_QIFReferenceFullType :
          ViewIdSTART y_QIFReferenceFullType ViewIdEND
          {$$ = $2;}
        ;

y_ViewIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | ViewIdsSTART y_ArrayReferenceType ViewIdsEND
          {$$ = $2;}
        ;

y_ViewPlaneOrigin_PointSimpleType :
          ViewPlaneOriginSTART y_PointSimpleType ViewPlaneOriginEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_ViewSetType :
          ENDITEM y_CameraSet_CameraSetType_0
          y_SavedViewSet_SavedViewSetType_0
          y_AnnotationViewSet_AnnotationViewSetType_0
          y_SimplifiedRepresentationSet_SimplifiedRepresentationSetType_0
          y_ExplodedViewSet_ExplodedViewSetType_0
          y_DisplayStyleSet_DisplayStyleSetType_0
          y_ZoneSectionSet_ZoneSectionSetType_0
          y_HatchStyleSet_HatchStyleSetType_0
          {$$ = new ViewSetType($2, $3, $4, $5, $6, $7, $8, $9);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
          }
        ;

y_ViewSet_ViewSetType_0 :
          /* empty */
          {$$ = 0;}
        | ViewSetSTART ENDWHOLEITEM
          {$$ = new ViewSetType();
           yyUnrefMap[$$] = $$;
          }
        | ViewSetSTART y_ViewSetType ViewSetEND
          {$$ = $2;}
        ;

y_View_XmlString :
          ViewSTART ENDITEM {yyReadData = 1;} y_XmlString ViewEND
          {$$ = $4;}
        ;

y_VirtualMeasurementType :
          y_LiztAttributePair
          {$$ = new VirtualMeasurementType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad VirtualMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_VirtualMeasurement_VirtualMeasurementType_0 :
          /* empty */
          {$$ = 0;}
        | VirtualMeasurementSTART y_VirtualMeasurementType ENDWHOLEITEM
          {$$ = $2;}
        ;

y_VisualizationSetType :
          ENDITEM y_Fonts_FontsType
          y_TrailingZeroDisplay_TrailingZeroDisplayType_0
          y_PMIDisplaySet_PMIDisplaySetType
          {$$ = new VisualizationSetType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_VisualizationSet_VisualizationSetType_0 :
          /* empty */
          {$$ = 0;}
        | VisualizationSetSTART y_VisualizationSetType VisualizationSetEND
          {$$ = $2;}
        ;

y_Volume_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | VolumeSTART ENDITEM {yyReadData = 1;} y_XmlDouble VolumeEND
          {$$ = $4;}
        ;

y_VolumetricPerformanceTestType :
          ENDITEM y_DeviationsFromCalibration_TwentyLinearValuesType
          y_TwiceStandardDeviation_LinearValueType
          {$$ = new VolumetricPerformanceTestType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_VolumetricPerformanceTest_VolumetricPerformanceTestType_0 :
          /* empty */
          {$$ = 0;}
        | VolumetricPerformanceTestSTART y_VolumetricPerformanceTestType
          VolumetricPerformanceTestEND
          {$$ = $2;}
        ;

y_VolumetricPerformance_LinearValueType :
          VolumetricPerformanceSTART y_LinearValueType
          VolumetricPerformanceEND
          {$$ = $2;}
        ;

y_VolumetricUncertainty_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | VolumetricUncertaintySTART y_LinearValueType
          VolumetricUncertaintyEND
          {$$ = $2;}
        ;

y_Weights_ArrayDoubleType_0 :
          /* empty */
          {$$ = 0;}
        | WeightsSTART y_ArrayDoubleType WeightsEND
          {$$ = $2;}
        ;

y_WeldBevelCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldBevelCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldBevelCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldBevelCharacteristicDefinition_WeldBevelCharacteristicDefinitionType :
          WeldBevelCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldBevelCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldBevelCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldBevelCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldBevelCharacteristicDefinitionSTART
          y_WeldBevelCharacteristicDefinitionType
          WeldBevelCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldBevelCharacteristicDefinition";
          }
        ;

y_WeldBevelCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldBevelCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldBevelCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldBevelCharacteristicItem_WeldBevelCharacteristicItemType :
          WeldBevelCharacteristicItemSTART
          y_WeldBevelCharacteristicItemType WeldBevelCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldBevelCharacteristicItem";
          }
        ;

y_WeldBevelCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldBevelCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldBevelCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldBevelCharacteristicMeasurement_WeldBevelCharacteristicMeasurementType :
          WeldBevelCharacteristicMeasurementSTART
          y_WeldBevelCharacteristicMeasurementType
          WeldBevelCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldBevelCharacteristicMeasurement";
          }
        ;

y_WeldBevelCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldBevelCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldBevelCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldBevelCharacteristicNominal_WeldBevelCharacteristicNominalType :
          WeldBevelCharacteristicNominalSTART
          y_WeldBevelCharacteristicNominalType
          WeldBevelCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldBevelCharacteristicNominal";
          }
        ;

y_WeldBevelCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldBevelCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldBevelCharacteristicStats_WeldBevelCharacteristicStatsEvalType :
          WeldBevelCharacteristicStatsSTART
          y_WeldBevelCharacteristicStatsEvalType
          WeldBevelCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldBevelCharacteristicStats";
          }
        ;

y_WeldCharacteristicDefinitionIds_ArrayReferenceFullType :
          WeldCharacteristicDefinitionIdsSTART y_ArrayReferenceFullType
          WeldCharacteristicDefinitionIdsEND
          {$$ = $2;}
        ;

y_WeldCharacteristicItemIds_ArrayReferenceType :
          WeldCharacteristicItemIdsSTART y_ArrayReferenceType
          WeldCharacteristicItemIdsEND
          {$$ = $2;}
        ;

y_WeldCharacteristicMeasurementIds_ArrayReferenceType :
          WeldCharacteristicMeasurementIdsSTART y_ArrayReferenceType
          WeldCharacteristicMeasurementIdsEND
          {$$ = $2;}
        ;

y_WeldCharacteristicNominalIds_ArrayReferenceFullType :
          WeldCharacteristicNominalIdsSTART y_ArrayReferenceFullType
          WeldCharacteristicNominalIdsEND
          {$$ = $2;}
        ;

y_WeldCompoundCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_WeldCharacteristicDefinitionIds_ArrayReferenceFullType
          {$$ = new WeldCompoundCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldCompoundCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldCompoundCharacteristicDefinition_WeldCompoundCharacteristicDefinitionType :
          WeldCompoundCharacteristicDefinitionSTART
          y_WeldCompoundCharacteristicDefinitionType
          WeldCompoundCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldCompoundCharacteristicDefinition";
          }
        ;

y_WeldCompoundCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          y_WeldCharacteristicItemIds_ArrayReferenceType
          {$$ = new WeldCompoundCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldCompoundCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldCompoundCharacteristicItem_WeldCompoundCharacteristicItemType :
          WeldCompoundCharacteristicItemSTART
          y_WeldCompoundCharacteristicItemType
          WeldCompoundCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldCompoundCharacteristicItem";
          }
        ;

y_WeldCompoundCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldCharacteristicMeasurementIds_ArrayReferenceType
          {$$ = new WeldCompoundCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldCompoundCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldCompoundCharacteristicMeasurement_WeldCompoundCharacteristicMeasurementType :
          WeldCompoundCharacteristicMeasurementSTART
          y_WeldCompoundCharacteristicMeasurementType
          WeldCompoundCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldCompoundCharacteristicMeasurement";
          }
        ;

y_WeldCompoundCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldCharacteristicNominalIds_ArrayReferenceFullType
          {$$ = new WeldCompoundCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldCompoundCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldCompoundCharacteristicNominal_WeldCompoundCharacteristicNominalType :
          WeldCompoundCharacteristicNominalSTART
          y_WeldCompoundCharacteristicNominalType
          WeldCompoundCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldCompoundCharacteristicNominal";
          }
        ;

y_WeldCompoundCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldCompoundCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldCompoundCharacteristicStats_WeldCompoundCharacteristicStatsEvalType :
          WeldCompoundCharacteristicStatsSTART
          y_WeldCompoundCharacteristicStatsEvalType
          WeldCompoundCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldCompoundCharacteristicStats";
          }
        ;

y_WeldContourSymbolEnumType :
          DATASTRING
          {$$ = new WeldContourSymbolEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad WeldContourSymbolEnumType value");
          }
        ;

y_WeldContourSymbolType :
          ENDITEM y_Origin_Point2dSimpleType
          y_Symbol_WeldContourSymbolEnumType
          {$$ = new WeldContourSymbolType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldEdgeCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldEdgeCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldEdgeCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldEdgeCharacteristicDefinition_WeldEdgeCharacteristicDefinitionType :
          WeldEdgeCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldEdgeCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldEdgeCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldEdgeCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldEdgeCharacteristicDefinitionSTART
          y_WeldEdgeCharacteristicDefinitionType
          WeldEdgeCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldEdgeCharacteristicDefinition";
          }
        ;

y_WeldEdgeCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldEdgeCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldEdgeCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldEdgeCharacteristicItem_WeldEdgeCharacteristicItemType :
          WeldEdgeCharacteristicItemSTART y_WeldEdgeCharacteristicItemType
          WeldEdgeCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldEdgeCharacteristicItem";
          }
        ;

y_WeldEdgeCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_LocationSignificance_LocationSignificanceOneSidesEnumType
          y_SideParameters_WeldOneSideParametersExtendSizeType_0
          {$$ = new WeldEdgeCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldEdgeCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldEdgeCharacteristicMeasurement_WeldEdgeCharacteristicMeasurementType :
          WeldEdgeCharacteristicMeasurementSTART
          y_WeldEdgeCharacteristicMeasurementType
          WeldEdgeCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldEdgeCharacteristicMeasurement";
          }
        ;

y_WeldEdgeCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_LocationSignificance_LocationSignificanceOneSidesEnumType
          y_SideParameters_WeldOneSideParametersExtendSizeType_0
          {$$ = new WeldEdgeCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldEdgeCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldEdgeCharacteristicNominal_WeldEdgeCharacteristicNominalType :
          WeldEdgeCharacteristicNominalSTART
          y_WeldEdgeCharacteristicNominalType
          WeldEdgeCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldEdgeCharacteristicNominal";
          }
        ;

y_WeldEdgeCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldEdgeCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldEdgeCharacteristicStats_WeldEdgeCharacteristicStatsEvalType :
          WeldEdgeCharacteristicStatsSTART
          y_WeldEdgeCharacteristicStatsEvalType
          WeldEdgeCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldEdgeCharacteristicStats";
          }
        ;

y_WeldFilletBothSidesType :
          ENDITEM y_ArrowSide_WeldFilletOneSideInBothSidesType_0
          y_OtherSide_WeldFilletOneSideInBothSidesType_0
          y_Staggered_XmlBoolean_0
          {$$ = new WeldFilletBothSidesType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_WeldFilletChara_1075_Type :
          y_WeldFilletChara_1075_TypeChoicePair
          {$$ = new WeldFilletChara_1075_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_WeldFilletChara_1075_TypeChoicePair :
          y_BothSides_WeldFilletBothSidesType
          {$$ = new WeldFilletChara_1075_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldFilletChara_1075_TypeType = WeldFilletChara_1075_TypeChoicePair::BothSidesE;
           $$->WeldFilletChara_1075_TypeValue.BothSides = $1;
          }
        | y_OneSide_WeldFilletOneSideType
          {$$ = new WeldFilletChara_1075_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldFilletChara_1075_TypeType = WeldFilletChara_1075_TypeChoicePair::OneSideE;
           $$->WeldFilletChara_1075_TypeValue.OneSide = $1;
          }
        ;

y_WeldFilletChara_1075_WeldFilletChara_1075_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_WeldFilletChara_1075_Type
          {$$ = $1;}
        ;

y_WeldFilletChara_1076_Type :
          y_WeldFilletChara_1076_TypeChoicePair
          {$$ = new WeldFilletChara_1076_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_WeldFilletChara_1076_TypeChoicePair :
          y_BothSides_WeldFilletBothSidesType
          {$$ = new WeldFilletChara_1076_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldFilletChara_1076_TypeType = WeldFilletChara_1076_TypeChoicePair::BothSidesE;
           $$->WeldFilletChara_1076_TypeValue.BothSides = $1;
          }
        | y_OneSide_WeldFilletOneSideType
          {$$ = new WeldFilletChara_1076_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldFilletChara_1076_TypeType = WeldFilletChara_1076_TypeChoicePair::OneSideE;
           $$->WeldFilletChara_1076_TypeValue.OneSide = $1;
          }
        ;

y_WeldFilletChara_1076_WeldFilletChara_1076_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_WeldFilletChara_1076_Type
          {$$ = $1;}
        ;

y_WeldFilletCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldFilletCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFilletCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldFilletCharacteristicDefinition_WeldFilletCharacteristicDefinitionType :
          WeldFilletCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldFilletCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldFilletCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldFilletCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldFilletCharacteristicDefinitionSTART
          y_WeldFilletCharacteristicDefinitionType
          WeldFilletCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldFilletCharacteristicDefinition";
          }
        ;

y_WeldFilletCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldFilletCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFilletCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldFilletCharacteristicItem_WeldFilletCharacteristicItemType :
          WeldFilletCharacteristicItemSTART
          y_WeldFilletCharacteristicItemType
          WeldFilletCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldFilletCharacteristicItem";
          }
        ;

y_WeldFilletCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_LocationSignificance_LocationSignificanceAllEnumType
          y_WeldFilletChara_1075_WeldFilletChara_1075_Type_0
          {$$ = new WeldFilletCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFilletCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldFilletCharacteristicMeasurement_WeldFilletCharacteristicMeasurementType :
          WeldFilletCharacteristicMeasurementSTART
          y_WeldFilletCharacteristicMeasurementType
          WeldFilletCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldFilletCharacteristicMeasurement";
          }
        ;

y_WeldFilletCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_LocationSignificance_LocationSignificanceAllEnumType
          y_WeldFilletChara_1076_WeldFilletChara_1076_Type_0
          {$$ = new WeldFilletCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFilletCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldFilletCharacteristicNominal_WeldFilletCharacteristicNominalType :
          WeldFilletCharacteristicNominalSTART
          y_WeldFilletCharacteristicNominalType
          WeldFilletCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldFilletCharacteristicNominal";
          }
        ;

y_WeldFilletCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldFilletCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldFilletCharacteristicStats_WeldFilletCharacteristicStatsEvalType :
          WeldFilletCharacteristicStatsSTART
          y_WeldFilletCharacteristicStatsEvalType
          WeldFilletCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldFilletCharacteristicStats";
          }
        ;

y_WeldFilletEqualLegLengthType :
          ENDITEM y_Size_FractionType_0
          y_LengthOfEachWeld_LinearValueType_0 y_Pitch_LinearValueType_0
          {$$ = new WeldFilletEqualLegLengthType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_WeldFilletOneSi_1077_Type :
          y_WeldFilletOneSi_1077_TypeChoicePair
          {$$ = new WeldFilletOneSi_1077_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_WeldFilletOneSi_1077_TypeChoicePair :
          y_EqualLegLength_WeldFilletEqualLegLengthType
          {$$ = new WeldFilletOneSi_1077_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldFilletOneSi_1077_TypeType = WeldFilletOneSi_1077_TypeChoicePair::EqualLegLengthE;
           $$->WeldFilletOneSi_1077_TypeValue.EqualLegLength = $1;
          }
        | y_UnEqualLegLength_WeldFilletUnequalLegLengthType
          {$$ = new WeldFilletOneSi_1077_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldFilletOneSi_1077_TypeType = WeldFilletOneSi_1077_TypeChoicePair::UnEqualLegLengthE;
           $$->WeldFilletOneSi_1077_TypeValue.UnEqualLegLength = $1;
          }
        ;

y_WeldFilletOneSi_1077_WeldFilletOneSi_1077_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_WeldFilletOneSi_1077_Type
          {$$ = $1;}
        ;

y_WeldFilletOneSideInBothSidesType :
          ENDITEM y_Finishing_WeldFinishingType_0 y_Size_FractionType_0
          y_LengthOfEachWeld_LinearValueType_0 y_Pitch_LinearValueType_0
          {$$ = new WeldFilletOneSideInBothSidesType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_WeldFilletOneSideType :
          ENDITEM y_Finishing_WeldFinishingType_0
          y_WeldFilletOneSi_1077_WeldFilletOneSi_1077_Type_0
          {$$ = new WeldFilletOneSideType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldFilletUnequalLegLengthType :
          ENDITEM y_FirstLegLength_FractionType
          y_SecondLegLength_FractionType
          {$$ = new WeldFilletUnequalLegLengthType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldFinishingDesignatorEnumType :
          DATASTRING
          {$$ = new WeldFinishingDesignatorEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad WeldFinishingDesignatorEnumType value");
          }
        ;

y_WeldFinishingType :
          ENDITEM y_ContourSymbol_WeldContourSymbolEnumType
          y_FinishingDesignator_WeldFinishingDesignatorEnumType_0
          {$$ = new WeldFinishingType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldFlareBevelCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldFlareBevelCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareBevelCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareBevelCharacteristicDefinition_WeldFlareBevelCharacteristicDefinitionType :
          WeldFlareBevelCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldFlareBevelCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldFlareBevelCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldFlareBevelCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldFlareBevelCharacteristicDefinitionSTART
          y_WeldFlareBevelCharacteristicDefinitionType
          WeldFlareBevelCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldFlareBevelCharacteristicDefinition";
          }
        ;

y_WeldFlareBevelCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldFlareBevelCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareBevelCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareBevelCharacteristicItem_WeldFlareBevelCharacteristicItemType :
          WeldFlareBevelCharacteristicItemSTART
          y_WeldFlareBevelCharacteristicItemType
          WeldFlareBevelCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldFlareBevelCharacteristicItem";
          }
        ;

y_WeldFlareBevelCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldFlareBevelCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareBevelCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareBevelCharacteristicMeasurement_WeldFlareBevelCharacteristicMeasurementType :
          WeldFlareBevelCharacteristicMeasurementSTART
          y_WeldFlareBevelCharacteristicMeasurementType
          WeldFlareBevelCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldFlareBevelCharacteristicMeasurement";
          }
        ;

y_WeldFlareBevelCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldFlareBevelCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareBevelCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareBevelCharacteristicNominal_WeldFlareBevelCharacteristicNominalType :
          WeldFlareBevelCharacteristicNominalSTART
          y_WeldFlareBevelCharacteristicNominalType
          WeldFlareBevelCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldFlareBevelCharacteristicNominal";
          }
        ;

y_WeldFlareBevelCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldFlareBevelCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldFlareBevelCharacteristicStats_WeldFlareBevelCharacteristicStatsEvalType :
          WeldFlareBevelCharacteristicStatsSTART
          y_WeldFlareBevelCharacteristicStatsEvalType
          WeldFlareBevelCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldFlareBevelCharacteristicStats";
          }
        ;

y_WeldFlareVCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldFlareVCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareVCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareVCharacteristicDefinition_WeldFlareVCharacteristicDefinitionType :
          WeldFlareVCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldFlareVCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldFlareVCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldFlareVCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldFlareVCharacteristicDefinitionSTART
          y_WeldFlareVCharacteristicDefinitionType
          WeldFlareVCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldFlareVCharacteristicDefinition";
          }
        ;

y_WeldFlareVCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldFlareVCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareVCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareVCharacteristicItem_WeldFlareVCharacteristicItemType :
          WeldFlareVCharacteristicItemSTART
          y_WeldFlareVCharacteristicItemType
          WeldFlareVCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldFlareVCharacteristicItem";
          }
        ;

y_WeldFlareVCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldFlareVCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareVCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareVCharacteristicMeasurement_WeldFlareVCharacteristicMeasurementType :
          WeldFlareVCharacteristicMeasurementSTART
          y_WeldFlareVCharacteristicMeasurementType
          WeldFlareVCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldFlareVCharacteristicMeasurement";
          }
        ;

y_WeldFlareVCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldFlareVCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldFlareVCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldFlareVCharacteristicNominal_WeldFlareVCharacteristicNominalType :
          WeldFlareVCharacteristicNominalSTART
          y_WeldFlareVCharacteristicNominalType
          WeldFlareVCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldFlareVCharacteristicNominal";
          }
        ;

y_WeldFlareVCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldFlareVCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldFlareVCharacteristicStats_WeldFlareVCharacteristicStatsEvalType :
          WeldFlareVCharacteristicStatsSTART
          y_WeldFlareVCharacteristicStatsEvalType
          WeldFlareVCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldFlareVCharacteristicStats";
          }
        ;

y_WeldGrooveBothSidesExtendedType :
          ENDITEM y_ArrowSideParameters_WeldGrooveOneSideParametersType_0
          y_OtherSideParameters_WeldGrooveOneSideParametersType_0
          y_Spacer_XmlBoolean_0
          {$$ = new WeldGrooveBothSidesExtendedType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_WeldGrooveChara_1078_Type :
          y_WeldGrooveChara_1078_TypeChoicePair
          {$$ = new WeldGrooveChara_1078_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_WeldGrooveChara_1078_TypeChoicePair :
          y_BothSides_WeldGrooveBothSidesExtendedType
          {$$ = new WeldGrooveChara_1078_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldGrooveChara_1078_TypeType = WeldGrooveChara_1078_TypeChoicePair::BothSidesE;
           $$->WeldGrooveChara_1078_TypeValue.BothSides = $1;
          }
        | y_OneSide_WeldGrooveOneSideType
          {$$ = new WeldGrooveChara_1078_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldGrooveChara_1078_TypeType = WeldGrooveChara_1078_TypeChoicePair::OneSideE;
           $$->WeldGrooveChara_1078_TypeValue.OneSide = $1;
          }
        ;

y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_WeldGrooveChara_1078_Type
          {$$ = $1;}
        ;

y_WeldGrooveChara_1079_Type :
          y_WeldGrooveChara_1079_TypeChoicePair
          {$$ = new WeldGrooveChara_1079_Type($1);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_WeldGrooveChara_1079_TypeChoicePair :
          y_BothSides_WeldGrooveBothSidesExtendedType
          {$$ = new WeldGrooveChara_1079_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldGrooveChara_1079_TypeType = WeldGrooveChara_1079_TypeChoicePair::BothSidesE;
           $$->WeldGrooveChara_1079_TypeValue.BothSides = $1;
          }
        | y_OneSide_WeldGrooveOneSideType
          {$$ = new WeldGrooveChara_1079_TypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WeldGrooveChara_1079_TypeType = WeldGrooveChara_1079_TypeChoicePair::OneSideE;
           $$->WeldGrooveChara_1079_TypeValue.OneSide = $1;
          }
        ;

y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0 :
          /* empty */
          {$$ = 0;}
        | y_WeldGrooveChara_1079_Type
          {$$ = $1;}
        ;

y_WeldGrooveOneSi_1080_Type :
          y_SideParameters_WeldGrooveOneSideParametersType_0
          y_SupplementarySymbol_WeldSupplementarySymbolEnumType_0
          {$$ = new WeldGrooveOneSi_1080_Type($1, $2);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
          }
        ;

y_WeldGrooveOneSi_1080_WeldGrooveOneSi_1080_Type :
          y_WeldGrooveOneSi_1080_Type
          {$$ = $1;}
        ;

y_WeldGrooveOneSideParametersType :
          ENDITEM y_Finishing_WeldFinishingType_0 y_Size_FractionType_0
          y_Groove_FractionType_0 y_Angle_AngularValueType_0
          y_RootOpening_FractionType_0 y_Length_LinearValueType_0
          y_Pitch_LinearValueType_0
          {$$ = new WeldGrooveOneSideParametersType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldGrooveOneSideType :
          ENDITEM
          y_LocationSignificance_LocationSignificanceOneSidesEnumType
          y_WeldGrooveOneSi_1080_WeldGrooveOneSi_1080_Type
          {$$ = new WeldGrooveOneSideType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldJCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldJCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldJCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldJCharacteristicDefinition_WeldJCharacteristicDefinitionType :
          WeldJCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldJCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldJCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldJCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldJCharacteristicDefinitionSTART
          y_WeldJCharacteristicDefinitionType
          WeldJCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldJCharacteristicDefinition";
          }
        ;

y_WeldJCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldJCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldJCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldJCharacteristicItem_WeldJCharacteristicItemType :
          WeldJCharacteristicItemSTART y_WeldJCharacteristicItemType
          WeldJCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldJCharacteristicItem";
          }
        ;

y_WeldJCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldJCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldJCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldJCharacteristicMeasurement_WeldJCharacteristicMeasurementType :
          WeldJCharacteristicMeasurementSTART
          y_WeldJCharacteristicMeasurementType
          WeldJCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldJCharacteristicMeasurement";
          }
        ;

y_WeldJCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldJCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldJCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldJCharacteristicNominal_WeldJCharacteristicNominalType :
          WeldJCharacteristicNominalSTART y_WeldJCharacteristicNominalType
          WeldJCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldJCharacteristicNominal";
          }
        ;

y_WeldJCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldJCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldJCharacteristicStats_WeldJCharacteristicStatsEvalType :
          WeldJCharacteristicStatsSTART y_WeldJCharacteristicStatsEvalType
          WeldJCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldJCharacteristicStats";
          }
        ;

y_WeldMainSymbolEnumType :
          DATASTRING
          {$$ = new WeldMainSymbolEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad WeldMainSymbolEnumType value");
          }
        ;

y_WeldMainSymbolType :
          ENDITEM y_Origin_Point2dSimpleType
          y_Symbol_WeldMainSymbolEnumType
          {$$ = new WeldMainSymbolType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldNumber_NaturalType_0 :
          /* empty */
          {$$ = 0;}
        | WeldNumberSTART ENDITEM {yyReadData = 1;} y_NaturalType
          WeldNumberEND
          {$$ = $4;}
        ;

y_WeldOneSideParametersExtendSizeType :
          ENDITEM y_Finishing_WeldFinishingType_0 y_Size_FractionType_0
          {$$ = new WeldOneSideParametersExtendSizeType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldOneSideParametersExtendType :
          ENDITEM y_Finishing_WeldFinishingType_0 y_Size_FractionType_0
          y_Length_LinearValueType_0 y_Pitch_LinearValueType_0
          y_WeldNumber_NaturalType_0
          {$$ = new WeldOneSideParametersExtendType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_WeldPlugCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldPlugCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldPlugCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldPlugCharacteristicDefinition_WeldPlugCharacteristicDefinitionType :
          WeldPlugCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldPlugCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldPlugCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldPlugCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldPlugCharacteristicDefinitionSTART
          y_WeldPlugCharacteristicDefinitionType
          WeldPlugCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldPlugCharacteristicDefinition";
          }
        ;

y_WeldPlugCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldPlugCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldPlugCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldPlugCharacteristicItem_WeldPlugCharacteristicItemType :
          WeldPlugCharacteristicItemSTART y_WeldPlugCharacteristicItemType
          WeldPlugCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldPlugCharacteristicItem";
          }
        ;

y_WeldPlugCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_LocationSignificance_LocationSignificanceOneSidesEnumType
          y_SideParameters_WeldPlugOneSideParametersType_0
          {$$ = new WeldPlugCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldPlugCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldPlugCharacteristicMeasurement_WeldPlugCharacteristicMeasurementType :
          WeldPlugCharacteristicMeasurementSTART
          y_WeldPlugCharacteristicMeasurementType
          WeldPlugCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldPlugCharacteristicMeasurement";
          }
        ;

y_WeldPlugCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_LocationSignificance_LocationSignificanceOneSidesEnumType
          y_SideParameters_WeldPlugOneSideParametersType_0
          {$$ = new WeldPlugCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldPlugCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldPlugCharacteristicNominal_WeldPlugCharacteristicNominalType :
          WeldPlugCharacteristicNominalSTART
          y_WeldPlugCharacteristicNominalType
          WeldPlugCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldPlugCharacteristicNominal";
          }
        ;

y_WeldPlugCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldPlugCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldPlugCharacteristicStats_WeldPlugCharacteristicStatsEvalType :
          WeldPlugCharacteristicStatsSTART
          y_WeldPlugCharacteristicStatsEvalType
          WeldPlugCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldPlugCharacteristicStats";
          }
        ;

y_WeldPlugOneSideParametersType :
          ENDITEM y_Finishing_WeldFinishingType_0 y_Size_FractionType_0
          y_Length_LinearValueType_0 y_Pitch_LinearValueType_0
          y_WeldNumber_NaturalType_0 y_Angle_AngularValueType_0
          y_Depth_FractionType_0
          {$$ = new WeldPlugOneSideParametersType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldScarfCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldScarfCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldScarfCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldScarfCharacteristicDefinition_WeldScarfCharacteristicDefinitionType :
          WeldScarfCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldScarfCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldScarfCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldScarfCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldScarfCharacteristicDefinitionSTART
          y_WeldScarfCharacteristicDefinitionType
          WeldScarfCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldScarfCharacteristicDefinition";
          }
        ;

y_WeldScarfCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldScarfCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldScarfCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldScarfCharacteristicItem_WeldScarfCharacteristicItemType :
          WeldScarfCharacteristicItemSTART
          y_WeldScarfCharacteristicItemType WeldScarfCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldScarfCharacteristicItem";
          }
        ;

y_WeldScarfCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldScarfCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldScarfCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldScarfCharacteristicMeasurement_WeldScarfCharacteristicMeasurementType :
          WeldScarfCharacteristicMeasurementSTART
          y_WeldScarfCharacteristicMeasurementType
          WeldScarfCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldScarfCharacteristicMeasurement";
          }
        ;

y_WeldScarfCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldScarfCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldScarfCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldScarfCharacteristicNominal_WeldScarfCharacteristicNominalType :
          WeldScarfCharacteristicNominalSTART
          y_WeldScarfCharacteristicNominalType
          WeldScarfCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldScarfCharacteristicNominal";
          }
        ;

y_WeldScarfCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldScarfCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldScarfCharacteristicStats_WeldScarfCharacteristicStatsEvalType :
          WeldScarfCharacteristicStatsSTART
          y_WeldScarfCharacteristicStatsEvalType
          WeldScarfCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldScarfCharacteristicStats";
          }
        ;

y_WeldSeamCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldSeamCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSeamCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldSeamCharacteristicDefinition_WeldSeamCharacteristicDefinitionType :
          WeldSeamCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldSeamCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldSeamCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldSeamCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldSeamCharacteristicDefinitionSTART
          y_WeldSeamCharacteristicDefinitionType
          WeldSeamCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldSeamCharacteristicDefinition";
          }
        ;

y_WeldSeamCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldSeamCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSeamCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldSeamCharacteristicItem_WeldSeamCharacteristicItemType :
          WeldSeamCharacteristicItemSTART y_WeldSeamCharacteristicItemType
          WeldSeamCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldSeamCharacteristicItem";
          }
        ;

y_WeldSeamCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_LocationSignificance_LocationSignificanceSpotSeamEnumType
          y_SideParameters_WeldOneSideParametersExtendType_0
          {$$ = new WeldSeamCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSeamCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldSeamCharacteristicMeasurement_WeldSeamCharacteristicMeasurementType :
          WeldSeamCharacteristicMeasurementSTART
          y_WeldSeamCharacteristicMeasurementType
          WeldSeamCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldSeamCharacteristicMeasurement";
          }
        ;

y_WeldSeamCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_LocationSignificance_LocationSignificanceSpotSeamEnumType
          y_SideParameters_WeldOneSideParametersExtendType_0
          {$$ = new WeldSeamCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSeamCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldSeamCharacteristicNominal_WeldSeamCharacteristicNominalType :
          WeldSeamCharacteristicNominalSTART
          y_WeldSeamCharacteristicNominalType
          WeldSeamCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldSeamCharacteristicNominal";
          }
        ;

y_WeldSeamCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldSeamCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldSeamCharacteristicStats_WeldSeamCharacteristicStatsEvalType :
          WeldSeamCharacteristicStatsSTART
          y_WeldSeamCharacteristicStatsEvalType
          WeldSeamCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldSeamCharacteristicStats";
          }
        ;

y_WeldSlotCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldSlotCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSlotCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldSlotCharacteristicDefinition_WeldSlotCharacteristicDefinitionType :
          WeldSlotCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldSlotCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldSlotCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldSlotCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldSlotCharacteristicDefinitionSTART
          y_WeldSlotCharacteristicDefinitionType
          WeldSlotCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldSlotCharacteristicDefinition";
          }
        ;

y_WeldSlotCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldSlotCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSlotCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldSlotCharacteristicItem_WeldSlotCharacteristicItemType :
          WeldSlotCharacteristicItemSTART y_WeldSlotCharacteristicItemType
          WeldSlotCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldSlotCharacteristicItem";
          }
        ;

y_WeldSlotCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_LocationSignificance_LocationSignificanceOneSidesEnumType
          y_SideParameters_WeldPlugOneSideParametersType_0
          {$$ = new WeldSlotCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSlotCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldSlotCharacteristicMeasurement_WeldSlotCharacteristicMeasurementType :
          WeldSlotCharacteristicMeasurementSTART
          y_WeldSlotCharacteristicMeasurementType
          WeldSlotCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldSlotCharacteristicMeasurement";
          }
        ;

y_WeldSlotCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_LocationSignificance_LocationSignificanceOneSidesEnumType
          y_SideParameters_WeldPlugOneSideParametersType_0
          {$$ = new WeldSlotCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSlotCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldSlotCharacteristicNominal_WeldSlotCharacteristicNominalType :
          WeldSlotCharacteristicNominalSTART
          y_WeldSlotCharacteristicNominalType
          WeldSlotCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldSlotCharacteristicNominal";
          }
        ;

y_WeldSlotCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldSlotCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldSlotCharacteristicStats_WeldSlotCharacteristicStatsEvalType :
          WeldSlotCharacteristicStatsSTART
          y_WeldSlotCharacteristicStatsEvalType
          WeldSlotCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldSlotCharacteristicStats";
          }
        ;

y_WeldSpotCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldSpotCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSpotCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldSpotCharacteristicDefinition_WeldSpotCharacteristicDefinitionType :
          WeldSpotCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldSpotCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldSpotCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldSpotCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldSpotCharacteristicDefinitionSTART
          y_WeldSpotCharacteristicDefinitionType
          WeldSpotCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldSpotCharacteristicDefinition";
          }
        ;

y_WeldSpotCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldSpotCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSpotCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldSpotCharacteristicItem_WeldSpotCharacteristicItemType :
          WeldSpotCharacteristicItemSTART y_WeldSpotCharacteristicItemType
          WeldSpotCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldSpotCharacteristicItem";
          }
        ;

y_WeldSpotCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_LocationSignificance_LocationSignificanceSpotSeamEnumType
          y_SideParameters_WeldSpotOneSideParametersType_0
          y_Projection_XmlBoolean_0
          {$$ = new WeldSpotCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSpotCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldSpotCharacteristicMeasurement_WeldSpotCharacteristicMeasurementType :
          WeldSpotCharacteristicMeasurementSTART
          y_WeldSpotCharacteristicMeasurementType
          WeldSpotCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldSpotCharacteristicMeasurement";
          }
        ;

y_WeldSpotCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_LocationSignificance_LocationSignificanceSpotSeamEnumType
          y_SideParameters_WeldSpotOneSideParametersType_0
          y_Projection_XmlBoolean_0
          {$$ = new WeldSpotCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           if ($19) yyUnrefMap.erase($19);
           if ($20) yyUnrefMap.erase($20);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSpotCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldSpotCharacteristicNominal_WeldSpotCharacteristicNominalType :
          WeldSpotCharacteristicNominalSTART
          y_WeldSpotCharacteristicNominalType
          WeldSpotCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldSpotCharacteristicNominal";
          }
        ;

y_WeldSpotCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldSpotCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldSpotCharacteristicStats_WeldSpotCharacteristicStatsEvalType :
          WeldSpotCharacteristicStatsSTART
          y_WeldSpotCharacteristicStatsEvalType
          WeldSpotCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldSpotCharacteristicStats";
          }
        ;

y_WeldSpotOneSideParametersType :
          ENDITEM y_Finishing_WeldFinishingType_0 y_Size_FractionType_0
          y_Pitch_LinearValueType_0 y_WeldNumber_NaturalType_0
          {$$ = new WeldSpotOneSideParametersType($2, $3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
          }
        ;

y_WeldSquareCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldSquareCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSquareCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldSquareCharacteristicDefinition_WeldSquareCharacteristicDefinitionType :
          WeldSquareCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldSquareCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldSquareCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldSquareCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldSquareCharacteristicDefinitionSTART
          y_WeldSquareCharacteristicDefinitionType
          WeldSquareCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldSquareCharacteristicDefinition";
          }
        ;

y_WeldSquareCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldSquareCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSquareCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldSquareCharacteristicItem_WeldSquareCharacteristicItemType :
          WeldSquareCharacteristicItemSTART
          y_WeldSquareCharacteristicItemType
          WeldSquareCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldSquareCharacteristicItem";
          }
        ;

y_WeldSquareCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldSquareCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSquareCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldSquareCharacteristicMeasurement_WeldSquareCharacteristicMeasurementType :
          WeldSquareCharacteristicMeasurementSTART
          y_WeldSquareCharacteristicMeasurementType
          WeldSquareCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldSquareCharacteristicMeasurement";
          }
        ;

y_WeldSquareCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldSquareCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSquareCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldSquareCharacteristicNominal_WeldSquareCharacteristicNominalType :
          WeldSquareCharacteristicNominalSTART
          y_WeldSquareCharacteristicNominalType
          WeldSquareCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldSquareCharacteristicNominal";
          }
        ;

y_WeldSquareCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldSquareCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldSquareCharacteristicStats_WeldSquareCharacteristicStatsEvalType :
          WeldSquareCharacteristicStatsSTART
          y_WeldSquareCharacteristicStatsEvalType
          WeldSquareCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldSquareCharacteristicStats";
          }
        ;

y_WeldStats_StatsPassFailType_0 :
          /* empty */
          {$$ = 0;}
        | WeldStatsSTART y_StatsPassFailType WeldStatsEND
          {$$ = $2;
           $$->printElement = "WeldStats";
          }
        ;

y_WeldStudCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldStudCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldStudCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldStudCharacteristicDefinition_WeldStudCharacteristicDefinitionType :
          WeldStudCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldStudCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldStudCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldStudCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldStudCharacteristicDefinitionSTART
          y_WeldStudCharacteristicDefinitionType
          WeldStudCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldStudCharacteristicDefinition";
          }
        ;

y_WeldStudCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldStudCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldStudCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldStudCharacteristicItem_WeldStudCharacteristicItemType :
          WeldStudCharacteristicItemSTART y_WeldStudCharacteristicItemType
          WeldStudCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldStudCharacteristicItem";
          }
        ;

y_WeldStudCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_ArrowSideParameters_WeldOneSideParametersExtendType_0
          {$$ = new WeldStudCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldStudCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldStudCharacteristicMeasurement_WeldStudCharacteristicMeasurementType :
          WeldStudCharacteristicMeasurementSTART
          y_WeldStudCharacteristicMeasurementType
          WeldStudCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldStudCharacteristicMeasurement";
          }
        ;

y_WeldStudCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_ArrowSideParameters_WeldOneSideParametersExtendType_0
          {$$ = new WeldStudCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldStudCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldStudCharacteristicNominal_WeldStudCharacteristicNominalType :
          WeldStudCharacteristicNominalSTART
          y_WeldStudCharacteristicNominalType
          WeldStudCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldStudCharacteristicNominal";
          }
        ;

y_WeldStudCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldStudCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldStudCharacteristicStats_WeldStudCharacteristicStatsEvalType :
          WeldStudCharacteristicStatsSTART
          y_WeldStudCharacteristicStatsEvalType
          WeldStudCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldStudCharacteristicStats";
          }
        ;

y_WeldSupplementarySymbolEnumType :
          DATASTRING
          {$$ = new WeldSupplementarySymbolEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad WeldSupplementarySymbolEnumType value");
          }
        ;

y_WeldSupplementarySymbolType :
          ENDITEM y_Origin_Point2dSimpleType
          y_Symbol_WeldSupplementarySymbolEnumType
          {$$ = new WeldSupplementarySymbolType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldSurfacingCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldSurfacingCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSurfacingCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldSurfacingCharacteristicDefinition_WeldSurfacingCharacteristicDefinitionType :
          WeldSurfacingCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldSurfacingCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldSurfacingCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldSurfacingCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldSurfacingCharacteristicDefinitionSTART
          y_WeldSurfacingCharacteristicDefinitionType
          WeldSurfacingCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldSurfacingCharacteristicDefinition";
          }
        ;

y_WeldSurfacingCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldSurfacingCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSurfacingCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldSurfacingCharacteristicItem_WeldSurfacingCharacteristicItemType :
          WeldSurfacingCharacteristicItemSTART
          y_WeldSurfacingCharacteristicItemType
          WeldSurfacingCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldSurfacingCharacteristicItem";
          }
        ;

y_WeldSurfacingCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_ArrowSideParameters_WeldOneSideParametersExtendSizeType_0
          {$$ = new WeldSurfacingCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSurfacingCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldSurfacingCharacteristicMeasurement_WeldSurfacingCharacteristicMeasurementType :
          WeldSurfacingCharacteristicMeasurementSTART
          y_WeldSurfacingCharacteristicMeasurementType
          WeldSurfacingCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldSurfacingCharacteristicMeasurement";
          }
        ;

y_WeldSurfacingCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_ArrowSideParameters_WeldOneSideParametersExtendSizeType_0
          {$$ = new WeldSurfacingCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldSurfacingCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldSurfacingCharacteristicNominal_WeldSurfacingCharacteristicNominalType :
          WeldSurfacingCharacteristicNominalSTART
          y_WeldSurfacingCharacteristicNominalType
          WeldSurfacingCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldSurfacingCharacteristicNominal";
          }
        ;

y_WeldSurfacingCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldSurfacingCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldSurfacingCharacteristicStats_WeldSurfacingCharacteristicStatsEvalType :
          WeldSurfacingCharacteristicStatsSTART
          y_WeldSurfacingCharacteristicStatsEvalType
          WeldSurfacingCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldSurfacingCharacteristicStats";
          }
        ;

y_WeldSymbolSetCount_XmlUnsignedInt_0 :
          /* empty */
          {$$ = 0;}
        | WeldSymbolSetCountSTART ENDITEM {yyReadData = 1;}
          y_XmlUnsignedInt WeldSymbolSetCountEND
          {$$ = $4;}
        ;

y_WeldUCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldUCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldUCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldUCharacteristicDefinition_WeldUCharacteristicDefinitionType :
          WeldUCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldUCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldUCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldUCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldUCharacteristicDefinitionSTART
          y_WeldUCharacteristicDefinitionType
          WeldUCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldUCharacteristicDefinition";
          }
        ;

y_WeldUCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldUCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldUCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldUCharacteristicItem_WeldUCharacteristicItemType :
          WeldUCharacteristicItemSTART y_WeldUCharacteristicItemType
          WeldUCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldUCharacteristicItem";
          }
        ;

y_WeldUCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldUCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldUCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldUCharacteristicMeasurement_WeldUCharacteristicMeasurementType :
          WeldUCharacteristicMeasurementSTART
          y_WeldUCharacteristicMeasurementType
          WeldUCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldUCharacteristicMeasurement";
          }
        ;

y_WeldUCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldUCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldUCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldUCharacteristicNominal_WeldUCharacteristicNominalType :
          WeldUCharacteristicNominalSTART y_WeldUCharacteristicNominalType
          WeldUCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldUCharacteristicNominal";
          }
        ;

y_WeldUCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldUCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldUCharacteristicStats_WeldUCharacteristicStatsEvalType :
          WeldUCharacteristicStatsSTART y_WeldUCharacteristicStatsEvalType
          WeldUCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldUCharacteristicStats";
          }
        ;

y_WeldVCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          {$$ = new WeldVCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldVCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WeldVCharacteristicDefinition_WeldVCharacteristicDefinitionType :
          WeldVCharacteristicDefinitionSTART y_LiztAttributePair
          ENDWHOLEITEM
          {$$ = new WeldVCharacteristicDefinitionType();
           yyUnrefMap[$$] = $$;
           yyUnrefMap.erase($2);
           $$->printElement = "WeldVCharacteristicDefinition";
           if ($$->badAttributes($2))
             {
               delete $2;
               return yyerror("Bad WeldVCharacteristicDefinitionType attributes");
             }
           delete $2;
          }
        | WeldVCharacteristicDefinitionSTART
          y_WeldVCharacteristicDefinitionType
          WeldVCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WeldVCharacteristicDefinition";
          }
        ;

y_WeldVCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WeldVCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldVCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WeldVCharacteristicItem_WeldVCharacteristicItemType :
          WeldVCharacteristicItemSTART y_WeldVCharacteristicItemType
          WeldVCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WeldVCharacteristicItem";
          }
        ;

y_WeldVCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_WeldGrooveChara_1078_WeldGrooveChara_1078_Type_0
          {$$ = new WeldVCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldVCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WeldVCharacteristicMeasurement_WeldVCharacteristicMeasurementType :
          WeldVCharacteristicMeasurementSTART
          y_WeldVCharacteristicMeasurementType
          WeldVCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WeldVCharacteristicMeasurement";
          }
        ;

y_WeldVCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_AllAround_XmlBoolean_0 y_Field_XmlBoolean_0
          y_Specification_XmlToken_0 y_WeldingProcess_WeldingProcessType_0
          y_NonDestructiveTesting_ArrayNonDestructiveTestingType_0
          y_WeldGrooveChara_1079_WeldGrooveChara_1079_Type_0
          {$$ = new WeldVCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WeldVCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WeldVCharacteristicNominal_WeldVCharacteristicNominalType :
          WeldVCharacteristicNominalSTART y_WeldVCharacteristicNominalType
          WeldVCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WeldVCharacteristicNominal";
          }
        ;

y_WeldVCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_WeldStats_StatsPassFailType_0
          {$$ = new WeldVCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WeldVCharacteristicStats_WeldVCharacteristicStatsEvalType :
          WeldVCharacteristicStatsSTART y_WeldVCharacteristicStatsEvalType
          WeldVCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WeldVCharacteristicStats";
          }
        ;

y_WeldingProcessEnumType :
          DATASTRING
          {$$ = new WeldingProcessEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad WeldingProcessEnumType value");
          }
        ;

y_WeldingProcessSuffixEnumType :
          DATASTRING
          {$$ = new WeldingProcessSuffixEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad WeldingProcessSuffixEnumType value");
          }
        ;

y_WeldingProcessType :
          ENDITEM y_Process_WeldingProcessEnumType
          y_Suffix_WeldingProcessSuffixEnumType_0
          {$$ = new WeldingProcessType($2, $3);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
          }
        ;

y_WeldingProcess_WeldingProcessType_0 :
          /* empty */
          {$$ = 0;}
        | WeldingProcessSTART y_WeldingProcessType WeldingProcessEND
          {$$ = $2;}
        ;

y_WhatIsMeasured_XmlString :
          WhatIsMeasuredSTART ENDITEM {yyReadData = 1;} y_XmlString
          WhatIsMeasuredEND
          {$$ = $4;}
        ;

y_WhatToMeasure_XmlString :
          WhatToMeasureSTART ENDITEM {yyReadData = 1;} y_XmlString
          WhatToMeasureEND
          {$$ = $4;}
        ;

y_WhileActionGroupType :
          ENDITEM y_WorkInstructionIds_ArrayReferenceType_0
          y_Attributes_AttributesType_0
          y_MeasureActionGroupFunction_MeasureActionGroupFunctionType_0
          y_BooleanExpression_substituteType y_PlanElement_substituteType
          {$$ = new WhileActionGroupType($2, $3, $4, $5, $6);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
          }
        ;

y_WhileActionGroup_WhileActionGroupType :
          WhileActionGroupSTART y_WhileActionGroupType WhileActionGroupEND
          {$$ = $2;
           $$->printElement = "WhileActionGroup";
          }
        ;

y_WholePointSetId_PointSetReferenceWholeType :
          WholePointSetIdSTART y_PointSetReferenceWholeType
          WholePointSetIdEND
          {$$ = $2;
           $$->printElement = "WholePointSetId";
          }
        ;

y_WidthCharacteristicDefinitionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FreeState_XmlBoolean_0 y_StatisticalCharacteristic_XmlBoolean_0
          y_CommonZone_XmlBoolean_0 y_CommonTolerance_XmlBoolean_0
          y_MedianFeature_XmlBoolean_0 y_EnvelopeRequirement_XmlBoolean_0
          y_Independency_XmlBoolean_0
          y_UnitedOrContinuousFeature_XmlBoolean_0
          y_SeparateZone_XmlBoolean_0
          y_DimensionType_DimensionModifierEnumType_0
          y_DimensionModifiers_DimensionModifiersType_0
          y_LinearCharacter_1058_LinearCharacter_1058_Type
          {$$ = new WidthCharacteristicDefinitionType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           if ($18) yyUnrefMap.erase($18);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WidthCharacteristicDefinitionType attributes");
             }
           delete $1;
          }
        ;

y_WidthCharacteristicDefinition_WidthCharacteristicDefinitionType :
          WidthCharacteristicDefinitionSTART
          y_WidthCharacteristicDefinitionType
          WidthCharacteristicDefinitionEND
          {$$ = $2;
           $$->printElement = "WidthCharacteristicDefinition";
          }
        ;

y_WidthCharacteristicItemType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_FeatureItemIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_NotableEventIds_ArrayReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_CharacteristicNominalId_QIFReferenceFullType
          y_LocationOnDrawing_LocationOnDrawingType_0
          y_VirtualMeasurement_VirtualMeasurementType_0
          {$$ = new WidthCharacteristicItemType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WidthCharacteristicItemType attributes");
             }
           delete $1;
          }
        ;

y_WidthCharacteristicItem_WidthCharacteristicItemType :
          WidthCharacteristicItemSTART y_WidthCharacteristicItemType
          WidthCharacteristicItemEND
          {$$ = $2;
           $$->printElement = "WidthCharacteristicItem";
          }
        ;

y_WidthCharacteristicMeasurementType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0 y_Status_CharacteristicStatusType
          y_CharacteristicItemId_QIFReferenceType y_TimeStamp_XmlDateTime_0
          y_FeatureMeasurementIds_ArrayReferenceType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_ActualComponentId_QIFReferenceType_0
          y_MeasurementDeviceIds_ArrayReferenceType_0
          y_ManufacturingProcessId_QIFReferenceType_0
          y_NotedEventIds_ArrayReferenceType_0
          y_NonConformanceDesignator_XmlToken_0
          y_Value_MeasuredLinearValueType_0
          y_MaxValue_MeasuredLinearValueType_0
          y_MinValue_MeasuredLinearValueType_0
          {$$ = new WidthCharacteristicMeasurementType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           if ($15) yyUnrefMap.erase($15);
           if ($16) yyUnrefMap.erase($16);
           if ($17) yyUnrefMap.erase($17);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WidthCharacteristicMeasurementType attributes");
             }
           delete $1;
          }
        ;

y_WidthCharacteristicMeasurement_WidthCharacteristicMeasurementType :
          WidthCharacteristicMeasurementSTART
          y_WidthCharacteristicMeasurementType
          WidthCharacteristicMeasurementEND
          {$$ = $2;
           $$->printElement = "WidthCharacteristicMeasurement";
          }
        ;

y_WidthCharacteristicNominalType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_Description_XmlString_0
          y_CharacteristicDefinitionId_QIFReferenceType
          y_FeatureNominalIds_ArrayReferenceFullType_0
          y_SubstituteFeatureAlgorithm_SubstituteFeatureAlgorithmType_0
          y_FeatureZoneIds_ArrayReferenceFullType_0
          y_EntityInternalIds_ArrayReferenceFullType_0
          y_EntityExternalIds_ArrayReferenceFullType_0 y_Name_XmlToken_0
          y_CharacteristicDesignator_CharacteristicDesignatorType_0
          y_TargetValue_LinearValueType_0
          y_TargetDualValue_LinearDualValueType_0
          {$$ = new WidthCharacteristicNominalType($3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
           if ($9) yyUnrefMap.erase($9);
           if ($10) yyUnrefMap.erase($10);
           if ($11) yyUnrefMap.erase($11);
           if ($12) yyUnrefMap.erase($12);
           if ($13) yyUnrefMap.erase($13);
           if ($14) yyUnrefMap.erase($14);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WidthCharacteristicNominalType attributes");
             }
           delete $1;
          }
        ;

y_WidthCharacteristicNominal_WidthCharacteristicNominalType :
          WidthCharacteristicNominalSTART y_WidthCharacteristicNominalType
          WidthCharacteristicNominalEND
          {$$ = $2;
           $$->printElement = "WidthCharacteristicNominal";
          }
        ;

y_WidthCharacteristicStatsEvalType :
          ENDITEM y_Attributes_AttributesType_0
          y_CharacteristicS_1128_CharacteristicS_1128_Type_0
          y_CharacteristicS_1129_CharacteristicS_1129_Type_0
          y_Status_StatsEvalStatusType y_StudyIssues_StudyIssuesType_0
          y_DistributionTransformation_DistributionTransformationType_0
          y_LinearCharacter_1134_LinearCharacter_1134_Type
          {$$ = new WidthCharacteristicStatsEvalType($2, $3, $4, $5, $6, $7, $8);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           if ($6) yyUnrefMap.erase($6);
           if ($7) yyUnrefMap.erase($7);
           if ($8) yyUnrefMap.erase($8);
          }
        ;

y_WidthCharacteristicStats_WidthCharacteristicStatsEvalType :
          WidthCharacteristicStatsSTART y_WidthCharacteristicStatsEvalType
          WidthCharacteristicStatsEND
          {$$ = $2;
           $$->printElement = "WidthCharacteristicStats";
          }
        ;

y_WidthDirection_UnitVectorType :
          WidthDirectionSTART y_UnitVectorType WidthDirectionEND
          {$$ = $2;}
        ;

y_WidthMax_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | WidthMaxSTART y_MeasuredLinearValueType WidthMaxEND
          {$$ = $2;}
        ;

y_WidthMin_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | WidthMinSTART y_MeasuredLinearValueType WidthMinEND
          {$$ = $2;}
        ;

y_Width_LinearValueType :
          WidthSTART y_LinearValueType WidthEND
          {$$ = $2;}
        ;

y_Width_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | WidthSTART y_LinearValueType WidthEND
          {$$ = $2;}
        ;

y_Width_MeasuredLinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | WidthSTART y_MeasuredLinearValueType WidthEND
          {$$ = $2;}
        ;

y_Width_XmlDouble :
          WidthSTART ENDITEM {yyReadData = 1;} y_XmlDouble WidthEND
          {$$ = $4;}
        ;

y_WitnessLinesTyp_1235_Type :
          y_Segment1_LineSegment2dType y_ZextensionPoint1_PointSimpleType_0
          y_Segment2_LineSegment2dType y_ZextensionPoint2_PointSimpleType_0
          {$$ = new WitnessLinesTyp_1235_Type($1, $2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_WitnessLinesTyp_1235_WitnessLinesTyp_1235_Type :
          y_WitnessLinesTyp_1235_Type
          {$$ = $1;}
        ;

y_WitnessLinesTyp_1236_Type :
          y_BeginPoint_Point2dSimpleType y_EndPoint_Point2dSimpleType
          y_CircleCenter_Point2dSimpleType
          y_CircleRadius_DoublePositiveType
          {$$ = new WitnessLinesTyp_1236_Type($1, $2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_WitnessLinesTyp_1236_WitnessLinesTyp_1236_Type :
          y_WitnessLinesTyp_1236_Type
          {$$ = $1;}
        ;

y_WitnessLinesType :
          y_LiztAttributePair ENDITEM y_WitnessLinesTypeChoicePair
          {$$ = new WitnessLinesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WitnessLinesType attributes");
             }
           delete $1;
          }
        ;

y_WitnessLinesTypeChoicePair :
          y_WitnessLinesTyp_1235_WitnessLinesTyp_1235_Type
          {$$ = new WitnessLinesTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WitnessLinesTypeType = WitnessLinesTypeChoicePair::WitnessLinesTyp_1235E;
           $$->WitnessLinesTypeValue.WitnessLinesTyp_1235 = $1;
          }
        | y_WitnessLinesTyp_1236_WitnessLinesTyp_1236_Type
          {$$ = new WitnessLinesTypeChoicePair();
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
           $$->WitnessLinesTypeType = WitnessLinesTypeChoicePair::WitnessLinesTyp_1236E;
           $$->WitnessLinesTypeValue.WitnessLinesTyp_1236 = $1;
          }
        ;

y_WitnessLines_WitnessLinesType_0 :
          /* empty */
          {$$ = 0;}
        | WitnessLinesSTART y_WitnessLinesType WitnessLinesEND
          {$$ = $2;}
        ;

y_WorkInstructionIds_ArrayReferenceType_0 :
          /* empty */
          {$$ = 0;}
        | WorkInstructionIdsSTART y_ArrayReferenceType
          WorkInstructionIdsEND
          {$$ = $2;}
        ;

y_WorkInstruction_substituteType :
          y_DocumentFileInstruction_DocumentFileInstructionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ImageInstruction_ImageInstructionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_TextInstruction_TextInstructionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_VideoInstruction_VideoInstructionType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_WorkInstructionsType :
          y_LiztAttributePair ENDITEM
          y_LiztWorkInstruction_substituteType_1_u
          {$$ = new WorkInstructionsType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad WorkInstructionsType attributes");
             }
           delete $1;
          }
        ;

y_WorkInstructions_WorkInstructionsType_0 :
          /* empty */
          {$$ = 0;}
        | WorkInstructionsSTART y_WorkInstructionsType WorkInstructionsEND
          {$$ = $2;}
        ;

y_WorkingClosedShellSet_ClosedShellSetType :
          WorkingClosedShellSetSTART y_ClosedShellSetType
          WorkingClosedShellSetEND
          {$$ = $2;}
        ;

y_WorkingDistance_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | WorkingDistanceSTART y_LinearValueType WorkingDistanceEND
          {$$ = $2;}
        ;

y_WorkingVolume_substituteType_0 :
          /* empty */
          {$$ = 0;}
        | y_CartesianWorkingVolume_CartesianWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_ClosedShellSetWorkingVolume_ClosedShellSetWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_CylindricalWorkingVolume_CylindricalWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_SphericalWorkingVolume_SphericalWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        | y_UserDefinedWorkingVolume_UserDefinedWorkingVolumeType
          {$$ = $1;
           yyUnrefMap[$$] = $$;
           if ($1) yyUnrefMap.erase($1);
          }
        ;

y_WorstNegativeDeviationStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | WorstNegativeDeviationStatsSTART y_StatsLinearType
          WorstNegativeDeviationStatsEND
          {$$ = $2;
           $$->printElement = "WorstNegativeDeviationStats";
          }
        ;

y_WorstNegativeDeviation_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | WorstNegativeDeviationSTART y_LinearValueType
          WorstNegativeDeviationEND
          {$$ = $2;}
        ;

y_WorstPositiveDeviationStats_StatsLinearType_0 :
          /* empty */
          {$$ = 0;}
        | WorstPositiveDeviationStatsSTART y_StatsLinearType
          WorstPositiveDeviationStatsEND
          {$$ = $2;
           $$->printElement = "WorstPositiveDeviationStats";
          }
        ;

y_WorstPositiveDeviation_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | WorstPositiveDeviationSTART y_LinearValueType
          WorstPositiveDeviationEND
          {$$ = $2;}
        ;

y_XAxisDirection_CMMDirectionEnumType :
          XAxisDirectionSTART ENDITEM {yyReadData = 1;}
          y_CMMDirectionEnumType XAxisDirectionEND
          {$$ = $4;}
        ;

y_XAxisLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | XAxisLengthSTART y_LinearValueType XAxisLengthEND
          {$$ = $2;}
        ;

y_XAxisPitch_AngleFunctionDiscreteType :
          XAxisPitchSTART y_AngleFunctionDiscreteType XAxisPitchEND
          {$$ = $2;
           $$->printElement = "XAxisPitch";
          }
        ;

y_XAxisRoll_AngleFunctionDiscreteType :
          XAxisRollSTART y_AngleFunctionDiscreteType XAxisRollEND
          {$$ = $2;
           $$->printElement = "XAxisRoll";
          }
        ;

y_XAxisStraightnessY_LengthFunctionDiscreteType :
          XAxisStraightnessYSTART y_LengthFunctionDiscreteType
          XAxisStraightnessYEND
          {$$ = $2;
           $$->printElement = "XAxisStraightnessY";
          }
        ;

y_XAxisStraightnessZ_LengthFunctionDiscreteType :
          XAxisStraightnessZSTART y_LengthFunctionDiscreteType
          XAxisStraightnessZEND
          {$$ = $2;
           $$->printElement = "XAxisStraightnessZ";
          }
        ;

y_XAxisYaw_AngleFunctionDiscreteType :
          XAxisYawSTART y_AngleFunctionDiscreteType XAxisYawEND
          {$$ = $2;
           $$->printElement = "XAxisYaw";
          }
        ;

y_XDirection_UnitVectorSimpleType :
          XDirectionSTART y_UnitVectorSimpleType XDirectionEND
          {$$ = $2;
           $2->UnitVectorSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad UnitVectorSimpleType value");
          }
        ;

y_XIds_ArrayBinaryType :
          XIdsSTART y_ArrayBinaryType XIdsEND
          {$$ = $2;}
        ;

y_XIds_ListQIFReferenceSimpleType :
          XIdsSTART y_ListQIFReferenceSimpleType XIdsEND
          {$$ = $2;}
        ;

y_XLinearAccuracy_LinearValueType :
          XLinearAccuracySTART y_LinearValueType XLinearAccuracyEND
          {$$ = $2;}
        ;

y_XLinearity_LengthFunctionDiscreteType :
          XLinearitySTART y_LengthFunctionDiscreteType XLinearityEND
          {$$ = $2;
           $$->printElement = "XLinearity";
          }
        ;

y_XResolution_LinearValueType :
          XResolutionSTART y_LinearValueType XResolutionEND
          {$$ = $2;}
        ;

y_XScaleFactor_XmlDecimal :
          XScaleFactorSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          XScaleFactorEND
          {$$ = $4;}
        ;

y_XScale_MeasurementDeviceScaleType :
          XScaleSTART ENDWHOLEITEM
          {$$ = new MeasurementDeviceScaleType();
           yyUnrefMap[$$] = $$;
          }
        | XScaleSTART y_MeasurementDeviceScaleType XScaleEND
          {$$ = $2;}
        ;

y_XStiffness_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | XStiffnessSTART y_UserDefinedUnitValueType XStiffnessEND
          {$$ = $2;}
        ;

y_XYSquareness_XmlDouble :
          XYSquarenessSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          XYSquarenessEND
          {$$ = $4;}
        ;

y_XYZLinearSpecificationType :
          ENDITEM y_X_LinearValueType_0 y_Y_LinearValueType_0
          y_Z_LinearValueType_0
          {$$ = new XYZLinearSpecificationType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_XYZResolutionType :
          ENDITEM y_XResolution_LinearValueType
          y_YResolution_LinearValueType y_ZResolution_LinearValueType
          {$$ = new XYZResolutionType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_XYZResolution_XYZResolutionType :
          XYZResolutionSTART y_XYZResolutionType XYZResolutionEND
          {$$ = $2;}
        ;

y_XYZResolution_XYZResolutionType_0 :
          /* empty */
          {$$ = 0;}
        | XYZResolutionSTART y_XYZResolutionType XYZResolutionEND
          {$$ = $2;}
        ;

y_XYZ_PointSimpleType :
          XYZSTART y_PointSimpleType XYZEND
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_XYZ_PointType :
          XYZSTART y_PointType XYZEND
          {$$ = $2;}
        ;

y_XY_Point2dSimpleType :
          XYSTART y_Point2dSimpleType XYEND
          {$$ = $2;
           $2->Point2dSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad Point2dSimpleType value");
          }
        ;

y_XZSquareness_XmlDouble :
          XZSquarenessSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          XZSquarenessEND
          {$$ = $4;}
        ;

y_X_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | XSTART y_LinearValueType XEND
          {$$ = $2;}
        ;

y_XaxisDirection_UnitVectorType :
          XaxisDirectionSTART y_UnitVectorType XaxisDirectionEND
          {$$ = $2;}
        ;

y_Xaxis_XmlToken :
          XaxisSTART ENDITEM {yyReadData = 1;} y_XmlToken XaxisEND
          {$$ = $4;}
        ;

y_XsltFile_XmlAnyURI_0 :
          /* empty */
          {$$ = 0;}
        | XsltFileSTART ENDITEM {yyReadData = 1;} y_XmlAnyURI XsltFileEND
          {$$ = $4;}
        ;

y_YAxisDirection_CMMDirectionEnumType :
          YAxisDirectionSTART ENDITEM {yyReadData = 1;}
          y_CMMDirectionEnumType YAxisDirectionEND
          {$$ = $4;}
        ;

y_YAxisLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | YAxisLengthSTART y_LinearValueType YAxisLengthEND
          {$$ = $2;}
        ;

y_YAxisPitch_AngleFunctionDiscreteType :
          YAxisPitchSTART y_AngleFunctionDiscreteType YAxisPitchEND
          {$$ = $2;
           $$->printElement = "YAxisPitch";
          }
        ;

y_YAxisRoll_AngleFunctionDiscreteType :
          YAxisRollSTART y_AngleFunctionDiscreteType YAxisRollEND
          {$$ = $2;
           $$->printElement = "YAxisRoll";
          }
        ;

y_YAxisStraightnessX_LengthFunctionDiscreteType :
          YAxisStraightnessXSTART y_LengthFunctionDiscreteType
          YAxisStraightnessXEND
          {$$ = $2;
           $$->printElement = "YAxisStraightnessX";
          }
        ;

y_YAxisStraightnessZ_LengthFunctionDiscreteType :
          YAxisStraightnessZSTART y_LengthFunctionDiscreteType
          YAxisStraightnessZEND
          {$$ = $2;
           $$->printElement = "YAxisStraightnessZ";
          }
        ;

y_YAxisYaw_AngleFunctionDiscreteType :
          YAxisYawSTART y_AngleFunctionDiscreteType YAxisYawEND
          {$$ = $2;
           $$->printElement = "YAxisYaw";
          }
        ;

y_YDirection_UnitVectorSimpleType :
          YDirectionSTART y_UnitVectorSimpleType YDirectionEND
          {$$ = $2;
           $2->UnitVectorSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad UnitVectorSimpleType value");
          }
        ;

y_YLinearAccuracy_LinearValueType :
          YLinearAccuracySTART y_LinearValueType YLinearAccuracyEND
          {$$ = $2;}
        ;

y_YLinearity_LengthFunctionDiscreteType :
          YLinearitySTART y_LengthFunctionDiscreteType YLinearityEND
          {$$ = $2;
           $$->printElement = "YLinearity";
          }
        ;

y_YResolution_LinearValueType :
          YResolutionSTART y_LinearValueType YResolutionEND
          {$$ = $2;}
        ;

y_YScaleFactor_XmlDecimal :
          YScaleFactorSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          YScaleFactorEND
          {$$ = $4;}
        ;

y_YScale_MeasurementDeviceScaleType :
          YScaleSTART ENDWHOLEITEM
          {$$ = new MeasurementDeviceScaleType();
           yyUnrefMap[$$] = $$;
          }
        | YScaleSTART y_MeasurementDeviceScaleType YScaleEND
          {$$ = $2;}
        ;

y_YStiffness_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | YStiffnessSTART y_UserDefinedUnitValueType YStiffnessEND
          {$$ = $2;}
        ;

y_YZSquareness_XmlDouble :
          YZSquarenessSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          YZSquarenessEND
          {$$ = $4;}
        ;

y_Y_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | YSTART y_LinearValueType YEND
          {$$ = $2;}
        ;

y_YaxisDirection_UnitVectorType :
          YaxisDirectionSTART y_UnitVectorType YaxisDirectionEND
          {$$ = $2;}
        ;

y_Yaxis_XmlToken :
          YaxisSTART ENDITEM {yyReadData = 1;} y_XmlToken YaxisEND
          {$$ = $4;}
        ;

y_Year_XmlString_0 :
          /* empty */
          {$$ = 0;}
        | YearSTART ENDITEM {yyReadData = 1;} y_XmlString YearEND
          {$$ = $4;}
        ;

y_YoungsModulus_XmlDouble_0 :
          /* empty */
          {$$ = 0;}
        | YoungsModulusSTART ENDITEM {yyReadData = 1;} y_XmlDouble
          YoungsModulusEND
          {$$ = $4;}
        ;

y_ZAxisDirection_CMMDirectionEnumType :
          ZAxisDirectionSTART ENDITEM {yyReadData = 1;}
          y_CMMDirectionEnumType ZAxisDirectionEND
          {$$ = $4;}
        ;

y_ZAxisLength_LinearValueType :
          ZAxisLengthSTART y_LinearValueType ZAxisLengthEND
          {$$ = $2;}
        ;

y_ZAxisLength_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ZAxisLengthSTART y_LinearValueType ZAxisLengthEND
          {$$ = $2;}
        ;

y_ZAxisPitch_AngleFunctionDiscreteType :
          ZAxisPitchSTART y_AngleFunctionDiscreteType ZAxisPitchEND
          {$$ = $2;
           $$->printElement = "ZAxisPitch";
          }
        ;

y_ZAxisRoll_AngleFunctionDiscreteType :
          ZAxisRollSTART y_AngleFunctionDiscreteType ZAxisRollEND
          {$$ = $2;
           $$->printElement = "ZAxisRoll";
          }
        ;

y_ZAxisStraightnessX_LengthFunctionDiscreteType :
          ZAxisStraightnessXSTART y_LengthFunctionDiscreteType
          ZAxisStraightnessXEND
          {$$ = $2;
           $$->printElement = "ZAxisStraightnessX";
          }
        ;

y_ZAxisStraightnessY_LengthFunctionDiscreteType :
          ZAxisStraightnessYSTART y_LengthFunctionDiscreteType
          ZAxisStraightnessYEND
          {$$ = $2;
           $$->printElement = "ZAxisStraightnessY";
          }
        ;

y_ZAxisYaw_AngleFunctionDiscreteType :
          ZAxisYawSTART y_AngleFunctionDiscreteType ZAxisYawEND
          {$$ = $2;
           $$->printElement = "ZAxisYaw";
          }
        ;

y_ZDirection_UnitVectorSimpleType :
          ZDirectionSTART y_UnitVectorSimpleType ZDirectionEND
          {$$ = $2;
           $2->UnitVectorSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad UnitVectorSimpleType value");
          }
        ;

y_ZLinearAccuracy_LinearValueType :
          ZLinearAccuracySTART y_LinearValueType ZLinearAccuracyEND
          {$$ = $2;}
        ;

y_ZLinearity_LengthFunctionDiscreteType :
          ZLinearitySTART y_LengthFunctionDiscreteType ZLinearityEND
          {$$ = $2;
           $$->printElement = "ZLinearity";
          }
        ;

y_ZResolution_LinearValueType :
          ZResolutionSTART y_LinearValueType ZResolutionEND
          {$$ = $2;}
        ;

y_ZScaleFactor_XmlDecimal :
          ZScaleFactorSTART ENDITEM {yyReadData = 1;} y_XmlDecimal
          ZScaleFactorEND
          {$$ = $4;}
        ;

y_ZScale_MeasurementDeviceScaleType :
          ZScaleSTART ENDWHOLEITEM
          {$$ = new MeasurementDeviceScaleType();
           yyUnrefMap[$$] = $$;
          }
        | ZScaleSTART y_MeasurementDeviceScaleType ZScaleEND
          {$$ = $2;}
        ;

y_ZStiffness_UserDefinedUnitValueType_0 :
          /* empty */
          {$$ = 0;}
        | ZStiffnessSTART y_UserDefinedUnitValueType ZStiffnessEND
          {$$ = $2;}
        ;

y_Z_LinearValueType_0 :
          /* empty */
          {$$ = 0;}
        | ZSTART y_LinearValueType ZEND
          {$$ = $2;}
        ;

y_ZaxisDirection_UnitVectorType :
          ZaxisDirectionSTART y_UnitVectorType ZaxisDirectionEND
          {$$ = $2;}
        ;

y_Zaxis_XmlToken :
          ZaxisSTART ENDITEM {yyReadData = 1;} y_XmlToken ZaxisEND
          {$$ = $4;}
        ;

y_ZeroIndexDirection_UnitVectorType :
          ZeroIndexDirectionSTART y_UnitVectorType ZeroIndexDirectionEND
          {$$ = $2;}
        ;

y_ZextensionPoint1_PointSimpleType_0 :
          /* empty */
          {$$ = 0;}
        | ZextensionPoint1START y_PointSimpleType ZextensionPoint1END
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_ZextensionPoint2_PointSimpleType_0 :
          /* empty */
          {$$ = 0;}
        | ZextensionPoint2START y_PointSimpleType ZextensionPoint2END
          {$$ = $2;
           $2->PointSimpleTypeCheck();
           if ($2->bad)
             return yyerror("bad PointSimpleType value");
          }
        ;

y_ZoneAxis_MeasuredZoneAxisType :
          ZoneAxisSTART y_MeasuredZoneAxisType ZoneAxisEND
          {$$ = $2;
           $$->printElement = "ZoneAxis";
          }
        ;

y_ZoneDataSetType :
          y_LiztAttributePair ENDITEM y_LiztZoneData_ZoneDataType_1_u
          {$$ = new ZoneDataSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ZoneDataSetType attributes");
             }
           delete $1;
          }
        ;

y_ZoneDataSet_ZoneDataSetType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneDataSetSTART y_ZoneDataSetType ZoneDataSetEND
          {$$ = $2;}
        ;

y_ZoneDataType :
          ENDITEM y_FeatureItemId_QIFReferenceType y_Bonus_LinearValueType
          y_ReferenceLength_LinearValueType
          {$$ = new ZoneDataType($2, $3, $4);
           yyUnrefMap[$$] = $$;
           if ($2) yyUnrefMap.erase($2);
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
          }
        ;

y_ZoneData_ZoneDataType :
          ZoneDataSTART y_ZoneDataType ZoneDataEND
          {$$ = $2;}
        ;

y_ZoneDirection_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneDirectionSTART y_UnitVectorType ZoneDirectionEND
          {$$ = $2;}
        ;

y_ZoneLine_MeasuredZoneAxisType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneLineSTART y_MeasuredZoneAxisType ZoneLineEND
          {$$ = $2;
           $$->printElement = "ZoneLine";
          }
        ;

y_ZoneOrientationEnumType :
          DATASTRING
          {$$ = new ZoneOrientationEnumType($1);
           yyUnrefMap[$$] = $$;
           free($1);
           if ($$->bad)
             return yyerror("bad ZoneOrientationEnumType value");
          }
        ;

y_ZoneOrientationEnum_ZoneOrientationEnumType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneOrientationEnumSTART ENDITEM {yyReadData = 1;}
          y_ZoneOrientationEnumType ZoneOrientationEnumEND
          {$$ = $4;}
        ;

y_ZoneOrientationVector_UnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneOrientationVectorSTART y_UnitVectorType
          ZoneOrientationVectorEND
          {$$ = $2;}
        ;

y_ZoneOrientation_MeasuredUnitVectorType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneOrientationSTART y_MeasuredUnitVectorType ZoneOrientationEND
          {$$ = $2;}
        ;

y_ZonePlane_MeasuredPlaneType :
          ZonePlaneSTART y_MeasuredPlaneType ZonePlaneEND
          {$$ = $2;}
        ;

y_ZonePlane_MeasuredPlaneType_0 :
          /* empty */
          {$$ = 0;}
        | ZonePlaneSTART y_MeasuredPlaneType ZonePlaneEND
          {$$ = $2;}
        ;

y_ZonePoint_MeasuredPointType :
          ZonePointSTART y_MeasuredPointType ZonePointEND
          {$$ = $2;}
        ;

y_ZoneRadii_MeasuredZoneRadiiType :
          ZoneRadiiSTART y_MeasuredZoneRadiiType ZoneRadiiEND
          {$$ = $2;}
        ;

y_ZoneSectionId_QIFReferenceActiveType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneSectionIdSTART y_QIFReferenceActiveType ZoneSectionIdEND
          {$$ = $2;}
        ;

y_ZoneSectionPlaneType :
          y_LiztAttributePair ENDITEM y_Plane_PlaneXType
          y_SectionGroups_SectionGroupsType_0
          {$$ = new ZoneSectionPlaneType($3, $4);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ZoneSectionPlaneType attributes");
             }
           delete $1;
          }
        ;

y_ZoneSectionPlanesType :
          y_LiztAttributePair ENDITEM
          y_LiztSectionPlane_ZoneSectionPlaneType_1_u
          {$$ = new ZoneSectionPlanesType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ZoneSectionPlanesType attributes");
             }
           delete $1;
          }
        ;

y_ZoneSectionSetType :
          y_LiztAttributePair ENDITEM y_LiztZoneSection_ZoneSectionType_1_u
          {$$ = new ZoneSectionSetType($3);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ZoneSectionSetType attributes");
             }
           delete $1;
          }
        ;

y_ZoneSectionSet_ZoneSectionSetType_0 :
          /* empty */
          {$$ = 0;}
        | ZoneSectionSetSTART y_ZoneSectionSetType ZoneSectionSetEND
          {$$ = $2;}
        ;

y_ZoneSectionType :
          y_LiztAttributePair ENDITEM y_Attributes_AttributesType_0
          y_SectionPlanes_ZoneSectionPlanesType
          y_LogicalOperations_LogicalOperationsType_0
          {$$ = new ZoneSectionType($3, $4, $5);
           yyUnrefMap[$$] = $$;
           if ($3) yyUnrefMap.erase($3);
           if ($4) yyUnrefMap.erase($4);
           if ($5) yyUnrefMap.erase($5);
           yyUnrefMap.erase($1);
           if ($$->badAttributes($1))
             {
               delete $1;
               return yyerror("Bad ZoneSectionType attributes");
             }
           delete $1;
          }
        ;

y_ZoneSection_ZoneSectionType :
          ZoneSectionSTART y_ZoneSectionType ZoneSectionEND
          {$$ = $2;
           $$->printElement = "ZoneSection";
          }
        ;

y_ZoneShape_CoaxialityZoneShapeType :
          ZoneShapeSTART y_CoaxialityZoneShapeType ZoneShapeEND
          {$$ = $2;}
        ;

y_ZoneShape_ConcentricityZoneShapeType :
          ZoneShapeSTART y_ConcentricityZoneShapeType ZoneShapeEND
          {$$ = $2;}
        ;

y_ZoneShape_OrientationZoneShapeType :
          ZoneShapeSTART y_OrientationZoneShapeType ZoneShapeEND
          {$$ = $2;}
        ;

y_ZoneShape_PositionZoneShapeType :
          ZoneShapeSTART y_PositionZoneShapeType ZoneShapeEND
          {$$ = $2;}
        ;

y_ZoneShape_StraightnessZoneShapeType :
          ZoneShapeSTART y_StraightnessZoneShapeType ZoneShapeEND
          {$$ = $2;}
        ;

%%

/*********************************************************************/

/* yyerror

Returned Value: int (1)

Called By: yyparse

This:
1. deletes all entries in the yyUnrefMap.
2. clears the yyUnrefMap.
3. prints whatever string has been provided.
4. returns 1.

*/

int yyerror(      /* ARGUMENTS       */
 const char * s)  /* string to print */
{
  std::map<XmlSchemaInstanceBase *, XmlSchemaInstanceBase *>::iterator iter;

  if (strcmp(s, "bug: unreferenced memory exists"))
    { // get segmentation fault in for loop if unreferenced memory exists
      for (iter = yyUnrefMap.begin(); iter != yyUnrefMap.end(); iter++)
        {
          delete (iter->first);
        }
      yyUnrefMap.clear();
    }
  fflush(stdout);
  fprintf(stderr, "\n%s\n", s);
  return 1;
}

/*********************************************************************/
