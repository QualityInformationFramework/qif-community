<?xml version="1.0" encoding="UTF-8"?>
<!-- This document is part of QIF 3.0, an open, industry-wide standard -->
<!-- established by the Dimensional Metrology Standards Consortium.    -->
<!-- This document shall not be used in any manner to claim any        -->
<!-- proprietary rights to such information, such as rights to a       -->
<!-- patent, trademark, or copyright.                                  -->

<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://qifstandards.org/xsd/qif3"
  xmlns:t="http://qifstandards.org/xsd/qif3"
  targetNamespace="http://qifstandards.org/xsd/qif3"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="3.0.0">

  <xs:include schemaLocation="../QIFLibrary/PrimitivesPD.xsd"/>

  <xs:annotation>
    <xs:documentation>
      This schema file defines types that describe topological entities of
      the Boundary Representation (BREP) modeling approach. The file also
      contains the key/keyref pairs that constrain references among
      topological entities.
    </xs:documentation>
  </xs:annotation>

  <xs:complexType name="TopologySetType">
    <xs:annotation>
      <xs:documentation>
        The TopologySetType describes the main container for
        storing all topological entities presented in the CAD scene.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="VertexSet"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional VertexSet element is a collection of all model
            vertices.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="EdgeSet"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional EdgeSet element is a collection of all model
            edges.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="LoopSet"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional LoopSet element is a collection of all model
            loops.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="FaceSet"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional FaceSet element is a collection of all model
            faces.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="ShellSet"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional ShellSet element is a collection of all model
            shells.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="BodySet"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional BodySet element is a collection of all model
            bodies.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="PointCloudSet"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional PointCloudSet element is a collection of all model
            point clouds.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="TopologyBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        The TopologyBaseType is the abstract base type for all topology
        elements.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DrawableBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VertexSetType">
    <xs:annotation>
      <xs:documentation>
        The VertexSetType represents a container for storing all model
        vertices.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="Vertex"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each Vertex element is a model vertex.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of vertices in this set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VertexType">
    <xs:annotation>
      <xs:documentation>
        The VertexType is the b-rep vertex type - a topological entity.
        Each instance of VertexType lies at a point and is normally used to
        bound an edge.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TopologyBaseType">
        <xs:sequence>
          <xs:element name="Point"
            type="ElementReferenceType">
            <xs:annotation>
              <xs:documentation>
                The Point element is the identifier of a 3D point - the
                underlying geometry of the vertex.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="tolerance"
          type="xs:double">
          <xs:annotation>
            <xs:documentation>
              The optional tolerance attribute specifies the maximum
              distance from the vertex underlying geometry (3D point) to
              the ends of all the adjacent edges that are terminated in
              the neighborhood of this vertex. This value can be 
              defined only for the case of the tolerant body.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="EdgeSetType">
    <xs:annotation>
      <xs:documentation>
        The EdgeSetType represents a container for storing all model edges.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="Edge"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each Edge element is a model edge.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of edges in this set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ValidationEdgeType">
    <xs:annotation>
      <xs:documentation>
        The ValidationEdgeType defines a set of edge validation properties.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Length"
        type="xs:double"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Length element is the edge length.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Centroid"
        type="PointSimpleType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Centroid element is the edge center of mass.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Box"
        type="BoundingBoxAxisAlignedType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Box element is the edge bounding box.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Points"
        type="ValidationPointsType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Points element is a set of points that lie on the
            edge.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="EdgeType">
    <xs:annotation>
      <xs:documentation>
        The EdgeType is the b-rep edge type - a topological entity. It
        represents a bounded piece of a 3D curve.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TopologyBaseType">
        <xs:sequence>
          <xs:element name="Validation"
            type="ValidationEdgeType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional Validation element is a set of edge validation
                properties.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Curve"
            type="ElementReferenceType">
            <xs:annotation>
              <xs:documentation>
                The Curve element is the identifier of a 3D curve that is
                the underlying geometry of this edge.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="VertexBeg"
            type="ElementReferenceType">
            <xs:annotation>
              <xs:documentation>
                The VertexBeg element is the identifier of the vertex which
                bounds this edge at the beginning of the edge. The
                'underlying' parameter of VertexBeg must be less then the
                'underlying' parameter of VertexEnd. Or, in other words,
                the edge always follows the natural parameterization of the
                underlying 3D curve. If there is a need to pass an edge in
                the opposite (to the natural parameterization of the
                underlying curve) direction then the corresponding flag
                must be defined on the loop level.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="VertexEnd"
            type="ElementReferenceType">
            <xs:annotation>
              <xs:documentation>
                The VertexEnd element is the identifier of the vertex which
                bounds this edge at the end of the edge. The 'underlying'
                parameter of VertexEnd must be bigger then the 'underlying'
                parameter of VertexBeg. Or, in other words, the edge always
                follows the natural parameterization of the underlying 3D
                curve. If there is a need to pass an edge in the opposite
                (to the natural parameterization of the underlying curve)
                direction then the corresponding flag must be defined on
                the loop level.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="tolerance"
          type="xs:double">
          <xs:annotation>
            <xs:documentation>
              The optional tolerance attribute specifies the edge tolerance
              for the case of tolerant body.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LoopSetType">
    <xs:annotation>
      <xs:documentation>
        The LoopSetType represents a container for storing all model loops.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="LoopBase"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each LoopBase element is a model loop.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of loops in this set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="LoopBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        The LoopBaseType is the abstract base type for loops.
        A loop represents a circuit of edges bounding a face.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TopologyBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="LoopFormEnumType">
    <xs:annotation>
      <xs:documentation>
        The LoopBaseTypeType enumerates values that describe the loop type.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNKNOWN"/>
      <xs:enumeration value="OUTER"/>
      <xs:enumeration value="INNER"/>
      <xs:enumeration value="SLIT"/>
      <xs:enumeration value="VERTEX"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="CoEdgeType">
    <xs:annotation>
      <xs:documentation>
        The CoEdgeType represents the part of face trimming loop. A
        co-edge defines a parameter space curve (i.e. the projection
        of an underlying 3D Curve of an oriented Edge onto an
        underlying surface of a face).
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="EdgeOriented"
        type="EdgeOrientedType">
        <xs:annotation>
          <xs:documentation>
            The EdgeOriented element is a reference to edge with a
            given orientation.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Curve12"
        type="ElementReferenceType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Curve12 element is a reference to 2D curve.
            This is projection of underlying 3D Curve of an oriented Edge
            onto an underlying surface of a face.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CoEdgesType">
    <xs:annotation>
      <xs:documentation>
        The CoEdgesType is an array of co-edges.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="CoEdge"
        type="CoEdgeType"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each CoEdge element is a co-edge.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of co-edges in this array.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CoEdgeMeshType">
    <xs:annotation>
      <xs:documentation>
        The CoEdgeMeshType represents the part of mesh face trimming loop.
        A mesh co-edge defines a mesh curve (i.e. the projection of an
        underlying 3D Curve of an oriented Edge onto an underlying mesh
        surface of a mesh face).
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="EdgeOriented"
        type="EdgeOrientedType">
        <xs:annotation>
          <xs:documentation>
            The EdgeOriented element is a reference to edge with a
            given orientation.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CurveMesh"
        type="ElementReferenceType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional CurveMesh element is a reference to mesh curve.
            This is projection of underlying 3D Curve of an oriented Edge
            onto an underlying mesh surface of a mesh face.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CoEdgesMeshType">
    <xs:annotation>
      <xs:documentation>
        The CoEdgesMeshType is an array of mesh co-edges.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="CoEdgeMesh"
        type="CoEdgeMeshType"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each CoEdgeMesh element is a mesh co-edge.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of mesh co-edges in this
          array.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="LoopType">
    <xs:annotation>
      <xs:documentation>
        The LoopType is the b-rep parametric loop type - a topological
        entity. It is a circuit of edges bounding a face.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="LoopBaseType">
        <xs:sequence>
          <xs:element name="CoEdges"
            type="CoEdgesType">
            <xs:annotation>
              <xs:documentation>
                The CoEdges is an array of co-edges that forms loop.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="form"
          type="LoopFormEnumType"
          default="UNKNOWN">
          <xs:annotation>
            <xs:documentation>
              The optional form attribute specifies the loop type which can
              take one of the following values: 'UNKNOWN', 'OUTER', 'INNER'
              or 'SLIT'.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LoopMeshType">
    <xs:annotation>
      <xs:documentation>
        The LoopMeshType is the b-rep mesh loop type - a topological
        entity. It is a circuit of edges bounding a face.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="LoopBaseType">
        <xs:sequence>
          <xs:element name="CoEdgesMesh"
            type="CoEdgesMeshType">
            <xs:annotation>
              <xs:documentation>
                The CoEdgesMesh is an array of mesh co-edges that
                forms mesh loop.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="FaceSetType">
    <xs:annotation>
      <xs:documentation>
        The FaceSetType represents a container for storing all model faces.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="FaceBase"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each FaceBase element represents one face. The face may be
            parametric (Face) or mesh (FaceMesh).
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of faces in this set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ValidationFaceType">
    <xs:annotation>
      <xs:documentation>
        The ValidationFaceType defines a set of face validation properties.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Area"
        type="xs:double"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Area element is the face area.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Centroid"
        type="PointSimpleType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Centroid element is the face center of mass.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Box"
        type="BoundingBoxAxisAlignedType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Box element is the face bounding box.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Points"
        type="ValidationPointsType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional ValidationPointsType is a set of points that lie
            on the face.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="FaceBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        The FaceBaseType is the abstract base type for faces. A face
        represents a bounded portion of a geometric surface which can be
        defined as a parametric surface or a mesh surface.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TopologyBaseType">
        <xs:sequence>
          <xs:element name="Validation"
            type="ValidationFaceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional Validation element is a set of face validation
                properties.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="turned"
          type="xs:boolean"
          default="0">
          <xs:annotation>
            <xs:documentation>
              The optional turned attribute shows if the face
              orientation must be reversed from the orientation
              of the underlying surface. If the value is true, the face
              orientation must be opposite the surface orientation.
              If the value is false, the two orientations must be the
              same.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="FaceType">
    <xs:annotation>
      <xs:documentation>
        The FaceType is the b-rep face type - a bounded portion of a
        surface.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="FaceBaseType">
        <xs:sequence>
          <xs:element name="Surface"
            type="ElementReferenceType">
            <xs:annotation>
              <xs:documentation>
                The Surface element is the identifier of the underlying
                surface.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="LoopIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional LoopIds element is an array of identifiers of
                the face trimming contours. If the hasOuter attribute is
                true then the first id will point to the outer loop
                otherwise all ids will point to inner loops only.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="hasOuter"
          type="xs:boolean"
          default="1">
          <xs:annotation>
            <xs:documentation>
              The optional hasOuter attribute shows if the face has its
              outer loop explicitly represented in the loop array. If this
              attribute is false, the natural border of the underlying
              surface must be taken as the face outer loop.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="FaceMeshType">
    <xs:annotation>
      <xs:documentation>
        The FaceMeshType is the b-rep mesh face type. It is built on a mesh
        surface bounded by a set of closed triangulation paths (polylines
        formed from the triangle edges).
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="FaceBaseType">
        <xs:sequence>
          <xs:element name="Mesh"
            type="ElementReferenceType">
            <xs:annotation>
              <xs:documentation>
                The Mesh element is the identifier of the underlying mesh
                surface.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="LoopIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional LoopIds element is an array of identifiers of
                the face trimming contours. If the hasOuter attribute is
                true then the first id will point to the outer loop
                otherwise all ids will point to inner loops only.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:choice
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                This optional compositor provides a choice of the
                representation method for the face interior - a manifold
                sub-set of triangles of the underlying mesh surface bounded
                by the face loops.
              </xs:documentation>
            </xs:annotation>
            <xs:element name="Triangles"
              type="ArrayIntType">
              <xs:annotation>
                <xs:documentation>
                  The Triangles element is an array of triangle indexes of
                  the underlying mesh surface. All elements of this array
                  must be unique and must lie in the range [0, number of
                  triangles in the underlying mesh surface - 1].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TrianglesBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The TrianglesBinary element is a binary array of triangle
                  indexes of the underlying mesh surface. All elements of
                  this 32-bit integer array must be unique and must lie in
                  the range [0, number of triangles in the underlying mesh
                  surface - 1].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
          <xs:choice
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                This optional compositor provides a choice of the
                representation method for the visibility flags of the face
                interior triangles.
              </xs:documentation>
            </xs:annotation>
            <xs:element name="TrianglesVisible"
              type="ArrayIntType">
              <xs:annotation>
                <xs:documentation>
                  The TrianglesVisible element is an array of visible
                  triangle indices. All elements of this integer array must
                  be unique and must lie in the range [0, number of
                  triangles of the face interior triangles].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TrianglesVisibleBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The TrianglesVisibleBinary element is a binary array of
                  visible triangle indices. All elements of this integer
                  array must be unique and must lie in the range 
                  [0, number of triangles of the face interior triangles].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TrianglesHidden"
              type="ArrayIntType">
              <xs:annotation>
                <xs:documentation>
                  The TrianglesHidden element is an array of hidden
                  triangle indices. All elements of this integer array must
                  be unique and must lie in the range
                  [0, number of triangles of the face interior triangles].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TrianglesHiddenBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The TrianglesHiddenBinary element is a binary array of
                  hidden triangle indices. All elements of this integer
                  array must be unique and must lie in the range
                  [0, number of triangles of the face interior triangles].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
          <xs:choice
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                This optional compositor provides a choice of the
                representation method for the color property of the face
                interior triangles.
              </xs:documentation>
            </xs:annotation>
            <xs:element name="TrianglesColor"
              type="ArrayUnsignedByteType">
              <xs:annotation>
                <xs:documentation>
                  The TrianglesColor element is an array of unsigned byte
                  values which defines colors of the face interior
                  triangles. Each element of this array is a triplet of
                  unsigned byte numbers - the RGB color: the red-component,
                  the green-component and the blue-component. The number of
                  array elements corresponds to the number of triangles in
                  the face interior.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TrianglesColorBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The TrianglesColorBinary element is a binary array of
                  unsigned byte values which defines colors of the face
                  interior triangles. Each element of this array is a
                  triplet of unsigned byte numbers - the RGB color: the
                  red-component, the green-component and the
                  blue-component. The number of array elements corresponds
                  to the number of triangles in the face interior.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ShellSetType">
    <xs:annotation>
      <xs:documentation>
        The ShellSetType represents a container for storing all model
        shells.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="Shell"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each Shell element is a model shell.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of shells in this set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:simpleType name="ShellFormEnumType">
    <xs:annotation>
      <xs:documentation>
        The ShellFormEnumType enumerates values that describe the shell
        type.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="UNKNOWN"/>
      <xs:enumeration value="OUTER"/>
      <xs:enumeration value="INNER"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="ShellType">
    <xs:annotation>
      <xs:documentation>
        The ShellType is the b-rep shell type - a set of connected faces.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TopologyBaseType">
        <xs:sequence>
          <xs:element name="FaceIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional FaceIds element is an array of connected faces
                which form this shell.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="turned"
          type="xs:boolean"
          default="0">
          <xs:annotation>
            <xs:documentation>
              The optional turned attribute shows if the shell orientation
              must be reversed from the orientation of the component
              faces. If the value is true, the shell orientation must be
              opposite the faces orientation. If the value is false, the
              two orientations must be the same.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="closed"
          type="xs:boolean"
          default="0">
          <xs:annotation>
            <xs:documentation>
              The optional closed attribute shows if the shell is a closed
              one (there are no gaps or open contours).
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="form"
          type="ShellFormEnumType"
          default="UNKNOWN">
          <xs:annotation>
            <xs:documentation>
              The optional form attribute specifies the shell type which
              can take one of the following values: 'UNKNOWN', 'OUTER' or
              'INNER'.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BodySetType">
    <xs:annotation>
      <xs:documentation>
        The BodySetType represents a container for storing all model
        bodies.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="Body"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each Body element is a model body.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of bodies in this set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ValidationBodyType">
    <xs:annotation>
      <xs:documentation>
        The ValidationBodyType defines a set of body validation properties.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Area"
        type="xs:double"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Area element is the body area.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Centroid"
        type="PointSimpleType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The Centroid element is the body center of mass.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Volume"
        type="xs:double"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Volume element is the body volume.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Box"
        type="BoundingBoxAxisAlignedType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Box element is the body bounding box.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="FacePoints"
        type="ValidationPointsType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional FacePoints element is a set of points that lie on
            the body faces.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="EdgePoints"
        type="ValidationPointsType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional EdgesPoints element is a set of points that lie on
            the body edges.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="BodyType">
    <xs:annotation>
      <xs:documentation>
        The BodyType is the b-rep body type - a solid represented as a set
        of one outer and zero to many inner shells.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TopologyBaseType">
        <xs:sequence>
          <xs:element name="Validation"
            type="ValidationBodyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional Validation is a set of body validation
                properties.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Transform"
            type="ElementReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional Transform element is an identifier of the
                transformation matrix.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ShellIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ShellIds element is an array of shell
                identifiers participating in forming this body.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="FaceIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional FaceIds element is an array of face identifiers
                participating in forming this body.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="LoopIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional LoopIds element is an array of loop identifiers
                participating in forming this body.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="EdgeIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional EdgeIds element is an array of edge identifiers
                participating in forming this body.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="VertexIds"
            type="ArrayReferenceType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional VertexIds element is an array of vertex
                identifiers participating in forming this body.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="form"
          type="BodyFormEnumType"
          default="UNDEFINED">
          <xs:annotation>
            <xs:documentation>
              The optional form attribute specifies how the
              body is represented.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="materialIndex"
          type="NaturalType">
          <xs:annotation>
            <xs:documentation>
              The optional materialIndex attribute specifies a material
              index in the material library.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="BodyFormEnumType">
    <xs:annotation>
      <xs:documentation>
        The BodyFormEnumType enumerates values that describe the body
        form and can take the following values:
          TRIMMED_SURFACE - a one-face body which does not have any
             topology information (normally restored from legacy
             formats like IGES)
          UNDEFINED - undefined
          WIRE  - a body consisting entirely of wire regions
          SOLID - a body consisting entirely of solid regions
          SHEET - a body consisting entirely of sheet regions
          MIXED - a body containing some combination of regions
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="UNDEFINED"/>
      <xs:enumeration value="TRIMMED_SURFACE"/>
      <xs:enumeration value="WIRE"/>
      <xs:enumeration value="SOLID"/>
      <xs:enumeration value="SHEET"/>
      <xs:enumeration value="MIXED"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="PointCloudSetType">
    <xs:annotation>
      <xs:documentation>
        The PointCloudSetType represents a container for storing all model
        point clouds.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="PointCloud"
        maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="n"
      type="NaturalType"
      use="required">
      <xs:annotation>
        <xs:documentation>
          The required n attribute is the number of point clouds in this
          set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="PointCloudType">
    <xs:annotation>
      <xs:documentation>
        The PointCloudType describes a set of 3D points with optional
        normals.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TopologyBaseType">
        <xs:sequence>
          <xs:choice>
            <xs:annotation>
              <xs:documentation>
                This compositor provides a choice of the representation
                method for an array of 3D points.
              </xs:documentation>
            </xs:annotation>
            <xs:element name="Points"
              type="ArrayPointType">
              <xs:annotation>
                <xs:documentation>
                  The Points element is an array of 3D points.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="PointsBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The PointsBinary element is a binary array of 3D points.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
          <xs:choice
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                This optional compositor provides a choice of the
                representation method for an array of normals.
              </xs:documentation>
            </xs:annotation>
            <xs:element name="Normals"
              type="ArrayUnitVectorType">
              <xs:annotation>
                <xs:documentation>
                  The Normals element is an array of normals. The number of
                  elements in this array must equal the number of 3D points
                  in this point cloud.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="NormalsBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The NormalsBinary element is a binary array of normals.
                  The number of elements in this array must equal the
                  number of 3D points in this point cloud.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
          <xs:choice
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                This optional compositor provides a choice of the
                representation method for the visibility flags of the
                points.
              </xs:documentation>
            </xs:annotation>
            <xs:element name="PointsVisible"
              type="ArrayIntType">
              <xs:annotation>
                <xs:documentation>
                  The PointsVisible element is an array of visible point
                  indices. All elements of this integer array must be unique
                  and must lie in the range [0, number of points].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="PointsVisibleBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The PointsVisibleBinary element is a binary array of
                  visible point indices. All elements of this integer
                  array must be unique and must lie in the range
                  [0, number of points].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="PointsHidden"
              type="ArrayIntType">
              <xs:annotation>
                <xs:documentation>
                  The PointsHidden element is an array of hidden point
                  indices. All elements of this integer array must be
                  unique and must lie in the range [0, number of points].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="PointsHiddenBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The PointsHiddenBinary element is a binary array of
                  hidden point indices. All elements of this integer 
                  array must be unique and must lie in the range
                  [0, number of points].
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
          <xs:choice
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                This optional compositor provides a choice of the
                representation method for the color property of the points.
              </xs:documentation>
            </xs:annotation>
            <xs:element name="PointsColor"
              type="ArrayUnsignedByteType">
              <xs:annotation>
                <xs:documentation>
                  The PointsColor element is an array of unsigned byte
                  values which defines colors of the points. Each element
                  of this array is a triplet of unsigned byte numbers - the
                  RGB color: the red-component, the green-component and the
                  blue-component. The number of array elements corresponds
                  to the number of points.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="PointsColorBinary"
              type="ArrayBinaryType">
              <xs:annotation>
                <xs:documentation>
                  The PointsColorBinary element is a binary array of
                  unsigned byte values which defines colors of the points.
                  Each element of this array is a triplet of unsigned byte
                  numbers - the RGB color: the red-component, the
                  green-component and the blue-component. The number of
                  array elements corresponds to the number of points.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="TopologySet"
    type="TopologySetType">
    <xs:annotation>
      <xs:documentation>
        The TopologySet element is a collection of all topological entities
        presented in the CAD scene, divided by type in a number of sub-sets.
      </xs:documentation>
    </xs:annotation>

<!-- CONSTRAINTS (the key/keyref pairs for topological entities) -->

    <xs:key name="TopologySetVertexIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetVertexIdKey collects all ids of model vertices.
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:VertexSet/t:Vertex"/>
      <xs:field xpath="@id"/>
    </xs:key>

    <xs:keyref name="TopologySetBodyVertexKeyref"
      refer="TopologySetVertexIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetBodyVertexKeyref requires that vertices whose ids
          are specified in a body be presented in the vertex set
          (VertexSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:BodySet/t:Body/t:VertexIds/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>

    <xs:key name="TopologySetEdgeIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetEdgeIdKey collects all ids of model edges.
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:EdgeSet/t:Edge"/>
      <xs:field xpath="@id"/>
    </xs:key>

    <xs:keyref name="TopologySetBodyEdgeKeyref"
      refer="TopologySetEdgeIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetBodyEdgeKeyref requires that edges whose ids are
          specified in a body be presented in the edge set (EdgeSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:BodySet/t:Body/t:EdgeIds/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>

    <xs:key name="TopologySetLoopIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetLoopIdKey collects all ids of model loops
          (parametric and mesh).
        </xs:documentation>
      </xs:annotation>
      <xs:selector
        xpath="t:LoopSet/t:Loop
             | t:LoopSet/t:LoopMesh"/>
      <xs:field xpath="@id"/>
    </xs:key>

    <xs:keyref name="TopologySetBodyLoopKeyref"
      refer="TopologySetLoopIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetBodyLoopKeyref requires that loops whose ids are
          specified in a body be presented in the loop set (LoopSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:BodySet/t:Body/t:LoopIds/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>

    <xs:key name="TopologySetFaceIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetFaceIdKey collects all ids of model faces
          (parametric and mesh).
        </xs:documentation>
      </xs:annotation>
      <xs:selector
        xpath="t:FaceSet/t:Face
             | t:FaceSet/t:FaceMesh"/>
      <xs:field xpath="@id"/>
    </xs:key>

    <xs:keyref name="TopologySetBodyFaceKeyref"
      refer="TopologySetFaceIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetBodyFaceKeyref requires that faces whose ids are
          specified in a body be presented in the face set (FaceSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:BodySet/t:Body/t:FaceIds/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>

    <xs:key name="TopologySetShellIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetShellIdKey collects all ids of model shells.
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:ShellSet/t:Shell"/>
      <xs:field xpath="@id"/>
    </xs:key>

    <xs:keyref name="TopologySetBodyShellKeyref"
      refer="TopologySetShellIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetBodyShellKeyref requires that shells whose ids are
          specified in a body be presented in the shell set (ShellSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:BodySet/t:Body/t:ShellIds/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>

    <xs:keyref name="TopologySetShellFaceKeyref"
      refer="TopologySetFaceIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetShellFaceKeyref requires that faces whose ids are
          specified in a shell be presented in the face set (FaceSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="t:ShellSet/t:Shell/t:FaceIds/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>

    <xs:keyref name="TopologySetFaceLoopKeyref"
      refer="TopologySetLoopIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetFaceLoopKeyref requires that loops whose ids are
          specified in a face be presented in the loop set (LoopSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector
        xpath="t:FaceSet/t:Face/t:LoopIds/t:Id
             | t:FaceSet/t:FaceMesh/t:LoopIds/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>

    <xs:keyref name="TopologySetLoopEdgeKeyref"
      refer="TopologySetEdgeIdKey">
      <xs:annotation>
        <xs:documentation>
          The TopologySetLoopEdgeKeyref requires that edges whose ids are
          specified in a loop be presented in the edge set (EdgeSet).
        </xs:documentation>
      </xs:annotation>
      <xs:selector
        xpath="t:LoopSet/t:Loop/t:CoEdges/t:CoEdge/t:EdgeOriented/t:Id
             | t:LoopSet/t:LoopMesh/t:CoEdgesMesh/t:CoEdgeMesh
              /t:EdgeOriented/t:Id"/>
      <xs:field xpath="."/>
    </xs:keyref>
  </xs:element>

  <xs:element name="VertexSet"
    type="VertexSetType">
    <xs:annotation>
      <xs:documentation>
        The global VertexSet element is a collection of all model vertices.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Vertex"
    type="VertexType">
    <xs:annotation>
      <xs:documentation>
        The global Vertex element is a topological entity which lies at a
        3D point and normally is used to bound an edge.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="EdgeSet"
    type="EdgeSetType">
    <xs:annotation>
      <xs:documentation>
        The global EdgeSet element is a collection of all model edges.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Edge"
    type="EdgeType">
    <xs:annotation>
      <xs:documentation>
        The global Edge element is a topological entity which defines a
        bounded piece of a 3D curve.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="LoopSet"
    type="LoopSetType">
    <xs:annotation>
      <xs:documentation>
        The global LoopSet element is a collection of all model loops.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="LoopBase"
    type="LoopBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        The global LoopBase element is the head of a substitution group
        whose members define loops. Any element that is a member of the
        group may be substituted for the LoopBase element anywhere the
        LoopBase element may be used in an instance file.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Loop"
    type="LoopType"
    substitutionGroup="LoopBase">
    <xs:annotation>
      <xs:documentation>
        The global Loop element defines a loop as a circuit of parametric
        curves.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="LoopMesh"
    type="LoopMeshType"
    substitutionGroup="LoopBase">
    <xs:annotation>
      <xs:documentation>
        The global LoopMesh element defines a loop as a circuit of mesh
        curves.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="FaceSet"
    type="FaceSetType">
    <xs:annotation>
      <xs:documentation>
        The global FaceSet element is a collection of all model faces.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="FaceBase"
    type="FaceBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        The global FaceBase element is the head of a substitution group
        whose members define faces. Any element that is a member of the
        group may be substituted for the FaceBase element anywhere the
        FaceBase element may be used in an instance file.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Face"
    type="FaceType"
    substitutionGroup="FaceBase">
    <xs:annotation>
      <xs:documentation>
        The global Face element defines a face as a bounded portion of a
        parametric surface.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="FaceMesh"
    type="FaceMeshType"
    substitutionGroup="FaceBase">
    <xs:annotation>
      <xs:documentation>
        The global FaceMesh element defines a face as a bounded portion of
        a mesh surface.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ShellSet"
    type="ShellSetType">
    <xs:annotation>
      <xs:documentation>
        The global ShellSet element is a collection of all model shells.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Shell"
    type="ShellType">
    <xs:annotation>
      <xs:documentation>
        The global Shell element is a topological entity which represents a
        set of connected faces.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="BodySet"
    type="BodySetType">
    <xs:annotation>
      <xs:documentation>
        The global BodySet element is a collection of all model bodies.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Body"
    type="BodyType">
    <xs:annotation>
      <xs:documentation>
        The global Body element is the highest level topology structure in
        the boundary representation modeling approach. It is the parent for
        all topology elements which it contains.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="PointCloudSet"
    type="PointCloudSetType">
    <xs:annotation>
      <xs:documentation>
        The global PointCloudSet element is a collection of all model point
        clouds.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="PointCloud"
    type="PointCloudType">
    <xs:annotation>
      <xs:documentation>
        The global PointCloud element is a set of 3D points with optional
        normals.
      </xs:documentation>
    </xs:annotation>
  </xs:element>

</xs:schema>
