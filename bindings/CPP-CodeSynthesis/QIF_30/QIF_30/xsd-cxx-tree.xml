<?xml version="1.0" encoding="utf-8"?>
<ProjectSchemaDefinitions xmlns="clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:transformCallback="Microsoft.Cpp.Dev10.ConvertPropertyCallback">
  <Rule
    Name="CXX_Tree_Mapping_Rule"
    PageTemplate="tool"
    DisplayName="C++/Tree Mapping Rule"
    Order="200">
    <Rule.DataSource>
      <DataSource
        Persistence="ProjectFile"
        ItemType="CXX_Tree_Mapping_Rule" />
    </Rule.DataSource>
    <Rule.Categories>
      <Category
        Name="General">
        <Category.DisplayName>
          <sys:String>General</sys:String>
        </Category.DisplayName>
      </Category>
      <Category
        Name="Command Line"
        Subtype="CommandLine">
        <Category.DisplayName>
          <sys:String>Command Line</sys:String>
        </Category.DisplayName>
      </Category>
    </Rule.Categories>
    <StringListProperty
      Name="Inputs"
      Category="Command Line"
      IsRequired="true"
      Switch=" ">
      <StringListProperty.DataSource>
        <DataSource
          Persistence="ProjectFile"
          ItemType="CXX_Tree_Mapping_Rule"
          SourceType="Item" />
      </StringListProperty.DataSource>
    </StringListProperty>
    <BoolProperty
      Name="ProprietaryLicense"
      Subcategory="Licensing"
      HelpContext="0"
      DisplayName="Proprietary License"
      Description="Indicate that the generated code is licensed under a proprietary license instead of the GPL."
      Switch="--proprietary-license" />
    <BoolProperty
      Name="GenInline"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Inline"
      Description="Generate simple functions inline. This option triggers creation of the inline file."
      Switch="--generate-inline" />
    <BoolProperty
      Name="GenForward"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Forward"
      Description="Generate a separate header file with forward declarations for the types being generated."
      Switch="--generate-forward" />
    <BoolProperty
      Name="GenSerialization"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Serialization"
      Description="Generate serialization functions. Serialization functions convert the object model back to XML."
      Switch="--generate-serialization" />
    <BoolProperty
      Name="SupParsing"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Suppress Parsing"
      Description="Suppress generation of the parsing functions and constructors."
      Switch="--suppress-parsing" />
    <BoolProperty
      Name="GenPolymorphic"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Polymorphic"
      Description="Generate polymorphism-aware code. Specify this option if you use substitution groups or xsi:type."
      Switch="--generate-polymorphic" />
    <BoolProperty
      Name="PolymorphicTypeAll"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="All Types Polymorphic"
      Description="Indicate that all types should be treated as polymorphic."
      Switch="--polymorphic-type-all" />
    <BoolProperty
      Name="GenOstream"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Ostream"
      Description="Generate ostream insertion operators for generated types. This allows to easily print a fragment or the whole object model for debugging or logging."
      Switch="--generate-ostream" />
    <BoolProperty
      Name="GenDoxygen"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Doxygen"
      Description="Generate documentation comments suitable for extraction by the Doxygen documentation system."
      Switch="--generate-doxygen" />
    <BoolProperty
      Name="GenComparison"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Comparison"
      Description="Generate comparison operators for complex types."
      Switch="--generate-comparison" />
    <BoolProperty
      Name="GenDefaultCtor"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Default Constructors"
      Description="Generate default constructors even for types that have required members."
      Switch="--generate-default-ctor" />
    <BoolProperty
      Name="GenFromBaseCtor"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate From-Base Constructors"
      Description="Generate constructors that expect an instance of a base type followed by all required members."
      Switch="--generate-from-base-ctor" />
    <BoolProperty
      Name="GenDetach"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Detach"
      Description="Generate detach functions for required elements and attributes."
      Switch="--generate-detach" />
    <BoolProperty
      Name="GenWildcard"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Wildcard"
      Description="Generate accessors and modifiers as well as parsing and serialization code for XML Schema wildcards (any and anyAttribute)."
      Switch="--generate-wildcard" />
    <BoolProperty
      Name="GenElementType"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Element Types"
      Description="Generate types instead of parsing and serialization functions for root elements."
      Switch="--generate-element-type" />
    <BoolProperty
      Name="GenElementMap"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate Element Map"
      Description="Generate a root element map that allows uniform parsing and serialization of multiple root elements."
      Switch="--generate-element-map" />
    <BoolProperty
      Name="GenIntellisense"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Generate IntelliSense"
      Description="Generate workarounds for IntelliSense bugs in Visual Studio 2005 (8.0)."
      Switch="--generate-intellisense" />
    <StringProperty
      Name="OutDir"
      Subcategory="Output"
      HelpContext="0"
      DisplayName="Output Directory"
      Description="Output directory for the generated files"
      Switch="--output-dir [value]" />
    <StringProperty
      Name="HeaderSuffix"
      Subcategory="Output"
      HelpContext="0"
      DisplayName="C++ Header Suffix "
      Description="Generated C++ header file suffix"
      Switch="--hxx-suffix [value]" />
    <StringProperty
      Name="SourceSuffix"
      Subcategory="Output"
      HelpContext="0"
      DisplayName="C++ Source Suffix"
      Description="Generated C++ source file suffix"
      Switch="--cxx-suffix [value]" />
    <StringProperty
      Name="InlineSuffix"
      Subcategory="Output"
      HelpContext="0"
      DisplayName="C++ Inline Suffix"
      Description="Generated C++ inline file suffix"
      Switch="--ixx-suffix [value]" />
    <StringProperty
      Name="ForwardSuffix"
      Subcategory="Output"
      HelpContext="0"
      DisplayName="C++ Forward Declaration Suffix"
      Description="Generated C++ forward declaration file suffix"
      Switch="--fwd-suffix [value]" />
    <StringListProperty
      Name="NamespaceMap"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Namespace Map"
      Description="Map XML Schema namespaces to C++ namespaces by specifying a comma-separated list of mapping rules in the form &lt;xml-ns&gt;=&lt;cxx-ns&gt; where &lt;xml-ns&gt; stands for an XML Schema namespace and &lt;cxx-ns&gt; - for a C++ namespace."
      Separator=","
      Switch="--namespace-map [value]" />
    <StringListProperty
      Name="PolymorphicType"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Polymorphic Types"
      Description="Treat specified comma-separated list of types as roots of polymorphic type hierarchies."
      Separator=","
      Switch="--polymorphic-type [value]" />
    <StringListProperty
      Name="RootElement"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Root Element"
      Description="Treat only specified comma-separated list of elements as document roots."
      Separator=","
      Switch="--root-element [value]" />
    <StringProperty
      Name="ExportSymbol"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Export Symbol"
      Description="Insert the specified symbol in places where DLL export/import control statements (__declspec(dllexport/dllimport)) are necessary."
      Switch="--export-symbol [value]" />
    <StringProperty
      Name="HxxPrologue"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Header Prologue File"
      Description="Insert the contents of the file specified at the beginning of the header file."
      Switch="--hxx-prologue-file [value]" />
    <StringProperty
      Name="HxxEpilogue"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Header Epilogue File"
      Description="Insert the contents of the file specified at the end of the header file."
      Switch="--hxx-epilogue-file [value]" />
    <EnumProperty
      Name="CharType"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Char Type"
      Description="Character type to be used in the generated code.">
      <EnumValue
        Name="0"
        DisplayName="char" />
      <EnumValue
        Name="1"
        DisplayName="wchar_t"
        Switch="--char-type wchar_t" />
    </EnumProperty>
    <EnumProperty
      Name="CharEncoding"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Char Encoding"
      Description="Character encoding to be used bu the generated code.">
      <EnumValue
        Name="0"
        DisplayName="UTF-8 (char)/UTF-16 (wchar_t)" />
      <EnumValue
        Name="1"
        DisplayName="ISO-8859-1"
        Switch="--char-encoding iso8859-1" />
      <EnumValue
        Name="2"
        DisplayName="Xerces-C++ local code page"
        Switch="--char-encoding lcp" />
      <EnumValue
        Name="3"
        DisplayName="Custom encoding"
        Switch="--char-encoding custom" />
    </EnumProperty>
    <EnumProperty
      Name="TypeNaming"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Type Naming"
      Description="Specify the type naming convention that should be used in the generated code.">
      <EnumValue
        Name="0"
        DisplayName="K&amp;R" />
      <EnumValue
        Name="1"
        DisplayName="Java"
        Switch="--type-naming java" />
      <EnumValue
        Name="2"
        DisplayName="Upper Camel Case"
        Switch="--type-naming ucc" />
    </EnumProperty>
    <EnumProperty
      Name="FunctionNaming"
      Category="Code Generation"
      HelpContext="0"
      DisplayName="Function Naming"
      Description="Specify the function naming convention that should be used in the generated code.">
      <EnumValue
        Name="0"
        DisplayName="K&amp;R" />
      <EnumValue
        Name="1"
        DisplayName="Java"
        Switch="--function-naming java" />
      <EnumValue
        Name="2"
        DisplayName="Lower Camel Case"
        Switch="--function-naming lcc" />
    </EnumProperty>
    <StringProperty
      Name="CommandLineTemplate"
      DisplayName="Command Line"
      Visible="False"
      IncludeInCommandLine="False" />
    <DynamicEnumProperty
      Name="CXX_Tree_Mapping_RuleBeforeTargets"
      Category="General"
      EnumProvider="Targets"
      IncludeInCommandLine="False">
      <DynamicEnumProperty.DisplayName>
        <sys:String>Execute Before</sys:String>
      </DynamicEnumProperty.DisplayName>
      <DynamicEnumProperty.Description>
        <sys:String>Specifies the targets for the build customization to run before.</sys:String>
      </DynamicEnumProperty.Description>
      <DynamicEnumProperty.ProviderSettings>
        <NameValuePair
          Name="Exclude"
          Value="^CXX_Tree_Mapping_RuleBeforeTargets|^Compute" />
      </DynamicEnumProperty.ProviderSettings>
      <DynamicEnumProperty.DataSource>
        <DataSource
          Persistence="ProjectFile"
          HasConfigurationCondition="true" />
      </DynamicEnumProperty.DataSource>
    </DynamicEnumProperty>
    <DynamicEnumProperty
      Name="CXX_Tree_Mapping_RuleAfterTargets"
      Category="General"
      EnumProvider="Targets"
      IncludeInCommandLine="False">
      <DynamicEnumProperty.DisplayName>
        <sys:String>Execute After</sys:String>
      </DynamicEnumProperty.DisplayName>
      <DynamicEnumProperty.Description>
        <sys:String>Specifies the targets for the build customization to run after.</sys:String>
      </DynamicEnumProperty.Description>
      <DynamicEnumProperty.ProviderSettings>
        <NameValuePair
          Name="Exclude"
          Value="^CXX_Tree_Mapping_RuleAfterTargets|^Compute" />
      </DynamicEnumProperty.ProviderSettings>
      <DynamicEnumProperty.DataSource>
        <DataSource
          Persistence="ProjectFile"
          ItemType=""
          HasConfigurationCondition="true" />
      </DynamicEnumProperty.DataSource>
    </DynamicEnumProperty>
    <StringListProperty
      Name="Outputs"
      DisplayName="Outputs"
      Visible="False"
      IncludeInCommandLine="False" />
    <StringProperty
      Name="ExecutionDescription"
      DisplayName="Execution Description"
      Visible="False"
      IncludeInCommandLine="False" />
    <StringListProperty
      Name="AdditionalDependencies"
      DisplayName="Additional Dependencies"
      IncludeInCommandLine="False"
      Visible="true" />
    <StringProperty
      Subtype="AdditionalOptions"
      Name="AdditionalOptions"
      Category="Command Line">
      <StringProperty.DisplayName>
        <sys:String>Additional Options</sys:String>
      </StringProperty.DisplayName>
      <StringProperty.Description>
        <sys:String>Additional Options</sys:String>
      </StringProperty.Description>
    </StringProperty>
  </Rule>
  <ItemType
    Name="CXX_Tree_Mapping_Rule"
    DisplayName="C++/Tree Mapping Rule" />
  <FileExtension
    Name="*.xsd"
    ContentType="CXX_Tree_Mapping_Rule" />
  <ContentType
    Name="CXX_Tree_Mapping_Rule"
    DisplayName="C++/Tree Mapping Rule"
    ItemType="CXX_Tree_Mapping_Rule" />
</ProjectSchemaDefinitions>