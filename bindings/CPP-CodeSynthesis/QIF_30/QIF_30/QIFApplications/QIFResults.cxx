// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "QIFResults.hxx"

namespace xsd
{
  namespace qif30
  {
    // MeasurementResultsType
    //

    const MeasurementResultsType::Attributes_optional& MeasurementResultsType::
    Attributes () const
    {
      return this->Attributes_;
    }

    MeasurementResultsType::Attributes_optional& MeasurementResultsType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void MeasurementResultsType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void MeasurementResultsType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void MeasurementResultsType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }

    const MeasurementResultsType::InspectionTraceability_optional& MeasurementResultsType::
    InspectionTraceability () const
    {
      return this->InspectionTraceability_;
    }

    MeasurementResultsType::InspectionTraceability_optional& MeasurementResultsType::
    InspectionTraceability ()
    {
      return this->InspectionTraceability_;
    }

    void MeasurementResultsType::
    InspectionTraceability (const InspectionTraceability_type& x)
    {
      this->InspectionTraceability_.set (x);
    }

    void MeasurementResultsType::
    InspectionTraceability (const InspectionTraceability_optional& x)
    {
      this->InspectionTraceability_ = x;
    }

    void MeasurementResultsType::
    InspectionTraceability (::std::unique_ptr< InspectionTraceability_type > x)
    {
      this->InspectionTraceability_.set (std::move (x));
    }

    const MeasurementResultsType::ThisResultsInstanceQPId_optional& MeasurementResultsType::
    ThisResultsInstanceQPId () const
    {
      return this->ThisResultsInstanceQPId_;
    }

    MeasurementResultsType::ThisResultsInstanceQPId_optional& MeasurementResultsType::
    ThisResultsInstanceQPId ()
    {
      return this->ThisResultsInstanceQPId_;
    }

    void MeasurementResultsType::
    ThisResultsInstanceQPId (const ThisResultsInstanceQPId_type& x)
    {
      this->ThisResultsInstanceQPId_.set (x);
    }

    void MeasurementResultsType::
    ThisResultsInstanceQPId (const ThisResultsInstanceQPId_optional& x)
    {
      this->ThisResultsInstanceQPId_ = x;
    }

    void MeasurementResultsType::
    ThisResultsInstanceQPId (::std::unique_ptr< ThisResultsInstanceQPId_type > x)
    {
      this->ThisResultsInstanceQPId_.set (std::move (x));
    }

    const MeasurementResultsType::ExternalFileReferences_optional& MeasurementResultsType::
    ExternalFileReferences () const
    {
      return this->ExternalFileReferences_;
    }

    MeasurementResultsType::ExternalFileReferences_optional& MeasurementResultsType::
    ExternalFileReferences ()
    {
      return this->ExternalFileReferences_;
    }

    void MeasurementResultsType::
    ExternalFileReferences (const ExternalFileReferences_type& x)
    {
      this->ExternalFileReferences_.set (x);
    }

    void MeasurementResultsType::
    ExternalFileReferences (const ExternalFileReferences_optional& x)
    {
      this->ExternalFileReferences_ = x;
    }

    void MeasurementResultsType::
    ExternalFileReferences (::std::unique_ptr< ExternalFileReferences_type > x)
    {
      this->ExternalFileReferences_.set (std::move (x));
    }

    const MeasurementResultsType::MeasuredFeatures_optional& MeasurementResultsType::
    MeasuredFeatures () const
    {
      return this->MeasuredFeatures_;
    }

    MeasurementResultsType::MeasuredFeatures_optional& MeasurementResultsType::
    MeasuredFeatures ()
    {
      return this->MeasuredFeatures_;
    }

    void MeasurementResultsType::
    MeasuredFeatures (const MeasuredFeatures_type& x)
    {
      this->MeasuredFeatures_.set (x);
    }

    void MeasurementResultsType::
    MeasuredFeatures (const MeasuredFeatures_optional& x)
    {
      this->MeasuredFeatures_ = x;
    }

    void MeasurementResultsType::
    MeasuredFeatures (::std::unique_ptr< MeasuredFeatures_type > x)
    {
      this->MeasuredFeatures_.set (std::move (x));
    }

    const MeasurementResultsType::MeasuredPointSets_optional& MeasurementResultsType::
    MeasuredPointSets () const
    {
      return this->MeasuredPointSets_;
    }

    MeasurementResultsType::MeasuredPointSets_optional& MeasurementResultsType::
    MeasuredPointSets ()
    {
      return this->MeasuredPointSets_;
    }

    void MeasurementResultsType::
    MeasuredPointSets (const MeasuredPointSets_type& x)
    {
      this->MeasuredPointSets_.set (x);
    }

    void MeasurementResultsType::
    MeasuredPointSets (const MeasuredPointSets_optional& x)
    {
      this->MeasuredPointSets_ = x;
    }

    void MeasurementResultsType::
    MeasuredPointSets (::std::unique_ptr< MeasuredPointSets_type > x)
    {
      this->MeasuredPointSets_.set (std::move (x));
    }

    const MeasurementResultsType::MeasuredCharacteristics_optional& MeasurementResultsType::
    MeasuredCharacteristics () const
    {
      return this->MeasuredCharacteristics_;
    }

    MeasurementResultsType::MeasuredCharacteristics_optional& MeasurementResultsType::
    MeasuredCharacteristics ()
    {
      return this->MeasuredCharacteristics_;
    }

    void MeasurementResultsType::
    MeasuredCharacteristics (const MeasuredCharacteristics_type& x)
    {
      this->MeasuredCharacteristics_.set (x);
    }

    void MeasurementResultsType::
    MeasuredCharacteristics (const MeasuredCharacteristics_optional& x)
    {
      this->MeasuredCharacteristics_ = x;
    }

    void MeasurementResultsType::
    MeasuredCharacteristics (::std::unique_ptr< MeasuredCharacteristics_type > x)
    {
      this->MeasuredCharacteristics_.set (std::move (x));
    }

    const MeasurementResultsType::ActualTransforms_optional& MeasurementResultsType::
    ActualTransforms () const
    {
      return this->ActualTransforms_;
    }

    MeasurementResultsType::ActualTransforms_optional& MeasurementResultsType::
    ActualTransforms ()
    {
      return this->ActualTransforms_;
    }

    void MeasurementResultsType::
    ActualTransforms (const ActualTransforms_type& x)
    {
      this->ActualTransforms_.set (x);
    }

    void MeasurementResultsType::
    ActualTransforms (const ActualTransforms_optional& x)
    {
      this->ActualTransforms_ = x;
    }

    void MeasurementResultsType::
    ActualTransforms (::std::unique_ptr< ActualTransforms_type > x)
    {
      this->ActualTransforms_.set (std::move (x));
    }

    const MeasurementResultsType::CoordinateSystemActualTransformAssociations_optional& MeasurementResultsType::
    CoordinateSystemActualTransformAssociations () const
    {
      return this->CoordinateSystemActualTransformAssociations_;
    }

    MeasurementResultsType::CoordinateSystemActualTransformAssociations_optional& MeasurementResultsType::
    CoordinateSystemActualTransformAssociations ()
    {
      return this->CoordinateSystemActualTransformAssociations_;
    }

    void MeasurementResultsType::
    CoordinateSystemActualTransformAssociations (const CoordinateSystemActualTransformAssociations_type& x)
    {
      this->CoordinateSystemActualTransformAssociations_.set (x);
    }

    void MeasurementResultsType::
    CoordinateSystemActualTransformAssociations (const CoordinateSystemActualTransformAssociations_optional& x)
    {
      this->CoordinateSystemActualTransformAssociations_ = x;
    }

    void MeasurementResultsType::
    CoordinateSystemActualTransformAssociations (::std::unique_ptr< CoordinateSystemActualTransformAssociations_type > x)
    {
      this->CoordinateSystemActualTransformAssociations_.set (std::move (x));
    }

    const MeasurementResultsType::InspectionStatus_type& MeasurementResultsType::
    InspectionStatus () const
    {
      return this->InspectionStatus_.get ();
    }

    MeasurementResultsType::InspectionStatus_type& MeasurementResultsType::
    InspectionStatus ()
    {
      return this->InspectionStatus_.get ();
    }

    void MeasurementResultsType::
    InspectionStatus (const InspectionStatus_type& x)
    {
      this->InspectionStatus_.set (x);
    }

    void MeasurementResultsType::
    InspectionStatus (::std::unique_ptr< InspectionStatus_type > x)
    {
      this->InspectionStatus_.set (std::move (x));
    }

    const MeasurementResultsType::ActualComponentIds_optional& MeasurementResultsType::
    ActualComponentIds () const
    {
      return this->ActualComponentIds_;
    }

    MeasurementResultsType::ActualComponentIds_optional& MeasurementResultsType::
    ActualComponentIds ()
    {
      return this->ActualComponentIds_;
    }

    void MeasurementResultsType::
    ActualComponentIds (const ActualComponentIds_type& x)
    {
      this->ActualComponentIds_.set (x);
    }

    void MeasurementResultsType::
    ActualComponentIds (const ActualComponentIds_optional& x)
    {
      this->ActualComponentIds_ = x;
    }

    void MeasurementResultsType::
    ActualComponentIds (::std::unique_ptr< ActualComponentIds_type > x)
    {
      this->ActualComponentIds_.set (std::move (x));
    }

    const MeasurementResultsType::id_type& MeasurementResultsType::
    id () const
    {
      return this->id_.get ();
    }

    MeasurementResultsType::id_type& MeasurementResultsType::
    id ()
    {
      return this->id_.get ();
    }

    void MeasurementResultsType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void MeasurementResultsType::
    id (::std::unique_ptr< id_type > x)
    {
      this->id_.set (std::move (x));
    }


    // MeasurementResultsSetType
    //

    const MeasurementResultsSetType::MeasurementResults_sequence& MeasurementResultsSetType::
    MeasurementResults () const
    {
      return this->MeasurementResults_;
    }

    MeasurementResultsSetType::MeasurementResults_sequence& MeasurementResultsSetType::
    MeasurementResults ()
    {
      return this->MeasurementResults_;
    }

    void MeasurementResultsSetType::
    MeasurementResults (const MeasurementResults_sequence& s)
    {
      this->MeasurementResults_ = s;
    }

    const MeasurementResultsSetType::n_type& MeasurementResultsSetType::
    n () const
    {
      return this->n_.get ();
    }

    MeasurementResultsSetType::n_type& MeasurementResultsSetType::
    n ()
    {
      return this->n_.get ();
    }

    void MeasurementResultsSetType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void MeasurementResultsSetType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ResultsType
    //

    const ResultsType::Version_optional& ResultsType::
    Version () const
    {
      return this->Version_;
    }

    ResultsType::Version_optional& ResultsType::
    Version ()
    {
      return this->Version_;
    }

    void ResultsType::
    Version (const Version_type& x)
    {
      this->Version_.set (x);
    }

    void ResultsType::
    Version (const Version_optional& x)
    {
      this->Version_ = x;
    }

    void ResultsType::
    Version (::std::unique_ptr< Version_type > x)
    {
      this->Version_.set (std::move (x));
    }

    const ResultsType::MeasurementResultsSet_type& ResultsType::
    MeasurementResultsSet () const
    {
      return this->MeasurementResultsSet_.get ();
    }

    ResultsType::MeasurementResultsSet_type& ResultsType::
    MeasurementResultsSet ()
    {
      return this->MeasurementResultsSet_.get ();
    }

    void ResultsType::
    MeasurementResultsSet (const MeasurementResultsSet_type& x)
    {
      this->MeasurementResultsSet_.set (x);
    }

    void ResultsType::
    MeasurementResultsSet (::std::unique_ptr< MeasurementResultsSet_type > x)
    {
      this->MeasurementResultsSet_.set (std::move (x));
    }

    const ResultsType::ActualComponentSets_optional& ResultsType::
    ActualComponentSets () const
    {
      return this->ActualComponentSets_;
    }

    ResultsType::ActualComponentSets_optional& ResultsType::
    ActualComponentSets ()
    {
      return this->ActualComponentSets_;
    }

    void ResultsType::
    ActualComponentSets (const ActualComponentSets_type& x)
    {
      this->ActualComponentSets_.set (x);
    }

    void ResultsType::
    ActualComponentSets (const ActualComponentSets_optional& x)
    {
      this->ActualComponentSets_ = x;
    }

    void ResultsType::
    ActualComponentSets (::std::unique_ptr< ActualComponentSets_type > x)
    {
      this->ActualComponentSets_.set (std::move (x));
    }

    const ResultsType::InspectionTraceability_optional& ResultsType::
    InspectionTraceability () const
    {
      return this->InspectionTraceability_;
    }

    ResultsType::InspectionTraceability_optional& ResultsType::
    InspectionTraceability ()
    {
      return this->InspectionTraceability_;
    }

    void ResultsType::
    InspectionTraceability (const InspectionTraceability_type& x)
    {
      this->InspectionTraceability_.set (x);
    }

    void ResultsType::
    InspectionTraceability (const InspectionTraceability_optional& x)
    {
      this->InspectionTraceability_ = x;
    }

    void ResultsType::
    InspectionTraceability (::std::unique_ptr< InspectionTraceability_type > x)
    {
      this->InspectionTraceability_.set (std::move (x));
    }


    // ActualComponentSetsType
    //

    const ActualComponentSetsType::ActualComponentSet_sequence& ActualComponentSetsType::
    ActualComponentSet () const
    {
      return this->ActualComponentSet_;
    }

    ActualComponentSetsType::ActualComponentSet_sequence& ActualComponentSetsType::
    ActualComponentSet ()
    {
      return this->ActualComponentSet_;
    }

    void ActualComponentSetsType::
    ActualComponentSet (const ActualComponentSet_sequence& s)
    {
      this->ActualComponentSet_ = s;
    }

    const ActualComponentSetsType::n_type& ActualComponentSetsType::
    n () const
    {
      return this->n_.get ();
    }

    ActualComponentSetsType::n_type& ActualComponentSetsType::
    n ()
    {
      return this->n_.get ();
    }

    void ActualComponentSetsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ActualComponentSetsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ActualComponentSetType
    //

    const ActualComponentSetType::ActualComponent_sequence& ActualComponentSetType::
    ActualComponent () const
    {
      return this->ActualComponent_;
    }

    ActualComponentSetType::ActualComponent_sequence& ActualComponentSetType::
    ActualComponent ()
    {
      return this->ActualComponent_;
    }

    void ActualComponentSetType::
    ActualComponent (const ActualComponent_sequence& s)
    {
      this->ActualComponent_ = s;
    }

    const ActualComponentSetType::n_type& ActualComponentSetType::
    n () const
    {
      return this->n_.get ();
    }

    ActualComponentSetType::n_type& ActualComponentSetType::
    n ()
    {
      return this->n_.get ();
    }

    void ActualComponentSetType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ActualComponentSetType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ActualComponentType
    //

    const ActualComponentType::Attributes_optional& ActualComponentType::
    Attributes () const
    {
      return this->Attributes_;
    }

    ActualComponentType::Attributes_optional& ActualComponentType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void ActualComponentType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void ActualComponentType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void ActualComponentType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }

    const ActualComponentType::SerialNumber_optional& ActualComponentType::
    SerialNumber () const
    {
      return this->SerialNumber_;
    }

    ActualComponentType::SerialNumber_optional& ActualComponentType::
    SerialNumber ()
    {
      return this->SerialNumber_;
    }

    void ActualComponentType::
    SerialNumber (const SerialNumber_type& x)
    {
      this->SerialNumber_.set (x);
    }

    void ActualComponentType::
    SerialNumber (const SerialNumber_optional& x)
    {
      this->SerialNumber_ = x;
    }

    void ActualComponentType::
    SerialNumber (::std::unique_ptr< SerialNumber_type > x)
    {
      this->SerialNumber_.set (std::move (x));
    }

    const ActualComponentType::AdditionalChanges_optional& ActualComponentType::
    AdditionalChanges () const
    {
      return this->AdditionalChanges_;
    }

    ActualComponentType::AdditionalChanges_optional& ActualComponentType::
    AdditionalChanges ()
    {
      return this->AdditionalChanges_;
    }

    void ActualComponentType::
    AdditionalChanges (const AdditionalChanges_type& x)
    {
      this->AdditionalChanges_.set (x);
    }

    void ActualComponentType::
    AdditionalChanges (const AdditionalChanges_optional& x)
    {
      this->AdditionalChanges_ = x;
    }

    void ActualComponentType::
    AdditionalChanges (::std::unique_ptr< AdditionalChanges_type > x)
    {
      this->AdditionalChanges_.set (std::move (x));
    }

    const ActualComponentType::Status_type& ActualComponentType::
    Status () const
    {
      return this->Status_.get ();
    }

    ActualComponentType::Status_type& ActualComponentType::
    Status ()
    {
      return this->Status_.get ();
    }

    void ActualComponentType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void ActualComponentType::
    Status (::std::unique_ptr< Status_type > x)
    {
      this->Status_.set (std::move (x));
    }

    const ActualComponentType::Traceability_optional& ActualComponentType::
    Traceability () const
    {
      return this->Traceability_;
    }

    ActualComponentType::Traceability_optional& ActualComponentType::
    Traceability ()
    {
      return this->Traceability_;
    }

    void ActualComponentType::
    Traceability (const Traceability_type& x)
    {
      this->Traceability_.set (x);
    }

    void ActualComponentType::
    Traceability (const Traceability_optional& x)
    {
      this->Traceability_ = x;
    }

    void ActualComponentType::
    Traceability (::std::unique_ptr< Traceability_type > x)
    {
      this->Traceability_.set (std::move (x));
    }

    const ActualComponentType::AsmPathId_optional& ActualComponentType::
    AsmPathId () const
    {
      return this->AsmPathId_;
    }

    ActualComponentType::AsmPathId_optional& ActualComponentType::
    AsmPathId ()
    {
      return this->AsmPathId_;
    }

    void ActualComponentType::
    AsmPathId (const AsmPathId_type& x)
    {
      this->AsmPathId_.set (x);
    }

    void ActualComponentType::
    AsmPathId (const AsmPathId_optional& x)
    {
      this->AsmPathId_ = x;
    }

    void ActualComponentType::
    AsmPathId (::std::unique_ptr< AsmPathId_type > x)
    {
      this->AsmPathId_.set (std::move (x));
    }

    const ActualComponentType::id_type& ActualComponentType::
    id () const
    {
      return this->id_.get ();
    }

    ActualComponentType::id_type& ActualComponentType::
    id ()
    {
      return this->id_.get ();
    }

    void ActualComponentType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void ActualComponentType::
    id (::std::unique_ptr< id_type > x)
    {
      this->id_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif30
  {
    // MeasurementResultsType
    //

    MeasurementResultsType::
    MeasurementResultsType ()
    : ::xml_schema::type (),
      Attributes_ (this),
      InspectionTraceability_ (this),
      ThisResultsInstanceQPId_ (this),
      ExternalFileReferences_ (this),
      MeasuredFeatures_ (this),
      MeasuredPointSets_ (this),
      MeasuredCharacteristics_ (this),
      ActualTransforms_ (this),
      CoordinateSystemActualTransformAssociations_ (this),
      InspectionStatus_ (this),
      ActualComponentIds_ (this),
      id_ (this)
    {
    }

    MeasurementResultsType::
    MeasurementResultsType (const InspectionStatus_type& InspectionStatus,
                            const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      InspectionTraceability_ (this),
      ThisResultsInstanceQPId_ (this),
      ExternalFileReferences_ (this),
      MeasuredFeatures_ (this),
      MeasuredPointSets_ (this),
      MeasuredCharacteristics_ (this),
      ActualTransforms_ (this),
      CoordinateSystemActualTransformAssociations_ (this),
      InspectionStatus_ (InspectionStatus, this),
      ActualComponentIds_ (this),
      id_ (id, this)
    {
    }

    MeasurementResultsType::
    MeasurementResultsType (::std::unique_ptr< InspectionStatus_type > InspectionStatus,
                            const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      InspectionTraceability_ (this),
      ThisResultsInstanceQPId_ (this),
      ExternalFileReferences_ (this),
      MeasuredFeatures_ (this),
      MeasuredPointSets_ (this),
      MeasuredCharacteristics_ (this),
      ActualTransforms_ (this),
      CoordinateSystemActualTransformAssociations_ (this),
      InspectionStatus_ (std::move (InspectionStatus), this),
      ActualComponentIds_ (this),
      id_ (id, this)
    {
    }

    MeasurementResultsType::
    MeasurementResultsType (const MeasurementResultsType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      InspectionTraceability_ (x.InspectionTraceability_, f, this),
      ThisResultsInstanceQPId_ (x.ThisResultsInstanceQPId_, f, this),
      ExternalFileReferences_ (x.ExternalFileReferences_, f, this),
      MeasuredFeatures_ (x.MeasuredFeatures_, f, this),
      MeasuredPointSets_ (x.MeasuredPointSets_, f, this),
      MeasuredCharacteristics_ (x.MeasuredCharacteristics_, f, this),
      ActualTransforms_ (x.ActualTransforms_, f, this),
      CoordinateSystemActualTransformAssociations_ (x.CoordinateSystemActualTransformAssociations_, f, this),
      InspectionStatus_ (x.InspectionStatus_, f, this),
      ActualComponentIds_ (x.ActualComponentIds_, f, this),
      id_ (x.id_, f, this)
    {
    }

    MeasurementResultsType::
    MeasurementResultsType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      InspectionTraceability_ (this),
      ThisResultsInstanceQPId_ (this),
      ExternalFileReferences_ (this),
      MeasuredFeatures_ (this),
      MeasuredPointSets_ (this),
      MeasuredCharacteristics_ (this),
      ActualTransforms_ (this),
      CoordinateSystemActualTransformAssociations_ (this),
      InspectionStatus_ (this),
      ActualComponentIds_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MeasurementResultsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        // InspectionTraceability
        //
        if (n.name () == L"InspectionTraceability" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionTraceability_type > r (
            InspectionTraceability_traits::create (i, f, this));

          if (!this->InspectionTraceability_)
          {
            this->InspectionTraceability_.set (::std::move (r));
            continue;
          }
        }

        // ThisResultsInstanceQPId
        //
        if (n.name () == L"ThisResultsInstanceQPId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThisResultsInstanceQPId_type > r (
            ThisResultsInstanceQPId_traits::create (i, f, this));

          if (!this->ThisResultsInstanceQPId_)
          {
            this->ThisResultsInstanceQPId_.set (::std::move (r));
            continue;
          }
        }

        // ExternalFileReferences
        //
        if (n.name () == L"ExternalFileReferences" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ExternalFileReferences_type > r (
            ExternalFileReferences_traits::create (i, f, this));

          if (!this->ExternalFileReferences_)
          {
            this->ExternalFileReferences_.set (::std::move (r));
            continue;
          }
        }

        // MeasuredFeatures
        //
        if (n.name () == L"MeasuredFeatures" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasuredFeatures_type > r (
            MeasuredFeatures_traits::create (i, f, this));

          if (!this->MeasuredFeatures_)
          {
            this->MeasuredFeatures_.set (::std::move (r));
            continue;
          }
        }

        // MeasuredPointSets
        //
        if (n.name () == L"MeasuredPointSets" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasuredPointSets_type > r (
            MeasuredPointSets_traits::create (i, f, this));

          if (!this->MeasuredPointSets_)
          {
            this->MeasuredPointSets_.set (::std::move (r));
            continue;
          }
        }

        // MeasuredCharacteristics
        //
        if (n.name () == L"MeasuredCharacteristics" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasuredCharacteristics_type > r (
            MeasuredCharacteristics_traits::create (i, f, this));

          if (!this->MeasuredCharacteristics_)
          {
            this->MeasuredCharacteristics_.set (::std::move (r));
            continue;
          }
        }

        // ActualTransforms
        //
        if (n.name () == L"ActualTransforms" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ActualTransforms_type > r (
            ActualTransforms_traits::create (i, f, this));

          if (!this->ActualTransforms_)
          {
            this->ActualTransforms_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemActualTransformAssociations
        //
        if (n.name () == L"CoordinateSystemActualTransformAssociations" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemActualTransformAssociations_type > r (
            CoordinateSystemActualTransformAssociations_traits::create (i, f, this));

          if (!this->CoordinateSystemActualTransformAssociations_)
          {
            this->CoordinateSystemActualTransformAssociations_.set (::std::move (r));
            continue;
          }
        }

        // InspectionStatus
        //
        if (n.name () == L"InspectionStatus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionStatus_type > r (
            InspectionStatus_traits::create (i, f, this));

          if (!InspectionStatus_.present ())
          {
            this->InspectionStatus_.set (::std::move (r));
            continue;
          }
        }

        // ActualComponentIds
        //
        if (n.name () == L"ActualComponentIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ActualComponentIds_type > r (
            ActualComponentIds_traits::create (i, f, this));

          if (!this->ActualComponentIds_)
          {
            this->ActualComponentIds_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!InspectionStatus_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"InspectionStatus",
          L"http://qifstandards.org/xsd/qif3");
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    MeasurementResultsType* MeasurementResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeasurementResultsType (*this, f, c);
    }

    MeasurementResultsType& MeasurementResultsType::
    operator= (const MeasurementResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->InspectionTraceability_ = x.InspectionTraceability_;
        this->ThisResultsInstanceQPId_ = x.ThisResultsInstanceQPId_;
        this->ExternalFileReferences_ = x.ExternalFileReferences_;
        this->MeasuredFeatures_ = x.MeasuredFeatures_;
        this->MeasuredPointSets_ = x.MeasuredPointSets_;
        this->MeasuredCharacteristics_ = x.MeasuredCharacteristics_;
        this->ActualTransforms_ = x.ActualTransforms_;
        this->CoordinateSystemActualTransformAssociations_ = x.CoordinateSystemActualTransformAssociations_;
        this->InspectionStatus_ = x.InspectionStatus_;
        this->ActualComponentIds_ = x.ActualComponentIds_;
        this->id_ = x.id_;
      }

      return *this;
    }

    MeasurementResultsType::
    ~MeasurementResultsType ()
    {
    }

    // MeasurementResultsSetType
    //

    MeasurementResultsSetType::
    MeasurementResultsSetType ()
    : ::xml_schema::type (),
      MeasurementResults_ (this),
      n_ (this)
    {
    }

    MeasurementResultsSetType::
    MeasurementResultsSetType (const n_type& n)
    : ::xml_schema::type (),
      MeasurementResults_ (this),
      n_ (n, this)
    {
    }

    MeasurementResultsSetType::
    MeasurementResultsSetType (const MeasurementResultsSetType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MeasurementResults_ (x.MeasurementResults_, f, this),
      n_ (x.n_, f, this)
    {
    }

    MeasurementResultsSetType::
    MeasurementResultsSetType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MeasurementResults_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MeasurementResultsSetType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // MeasurementResults
        //
        if (n.name () == L"MeasurementResults" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementResults_type > r (
            MeasurementResults_traits::create (i, f, this));

          this->MeasurementResults_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    MeasurementResultsSetType* MeasurementResultsSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeasurementResultsSetType (*this, f, c);
    }

    MeasurementResultsSetType& MeasurementResultsSetType::
    operator= (const MeasurementResultsSetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->MeasurementResults_ = x.MeasurementResults_;
        this->n_ = x.n_;
      }

      return *this;
    }

    MeasurementResultsSetType::
    ~MeasurementResultsSetType ()
    {
    }

    // ResultsType
    //

    ResultsType::
    ResultsType ()
    : ::xml_schema::type (),
      Version_ (this),
      MeasurementResultsSet_ (this),
      ActualComponentSets_ (this),
      InspectionTraceability_ (this)
    {
    }

    ResultsType::
    ResultsType (const MeasurementResultsSet_type& MeasurementResultsSet)
    : ::xml_schema::type (),
      Version_ (this),
      MeasurementResultsSet_ (MeasurementResultsSet, this),
      ActualComponentSets_ (this),
      InspectionTraceability_ (this)
    {
    }

    ResultsType::
    ResultsType (::std::unique_ptr< MeasurementResultsSet_type > MeasurementResultsSet)
    : ::xml_schema::type (),
      Version_ (this),
      MeasurementResultsSet_ (std::move (MeasurementResultsSet), this),
      ActualComponentSets_ (this),
      InspectionTraceability_ (this)
    {
    }

    ResultsType::
    ResultsType (const ResultsType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Version_ (x.Version_, f, this),
      MeasurementResultsSet_ (x.MeasurementResultsSet_, f, this),
      ActualComponentSets_ (x.ActualComponentSets_, f, this),
      InspectionTraceability_ (x.InspectionTraceability_, f, this)
    {
    }

    ResultsType::
    ResultsType (const xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Version_ (this),
      MeasurementResultsSet_ (this),
      ActualComponentSets_ (this),
      InspectionTraceability_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ResultsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Version
        //
        if (n.name () == L"Version" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Version_type > r (
            Version_traits::create (i, f, this));

          if (!this->Version_)
          {
            this->Version_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementResultsSet
        //
        if (n.name () == L"MeasurementResultsSet" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementResultsSet_type > r (
            MeasurementResultsSet_traits::create (i, f, this));

          if (!MeasurementResultsSet_.present ())
          {
            this->MeasurementResultsSet_.set (::std::move (r));
            continue;
          }
        }

        // ActualComponentSets
        //
        if (n.name () == L"ActualComponentSets" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ActualComponentSets_type > r (
            ActualComponentSets_traits::create (i, f, this));

          if (!this->ActualComponentSets_)
          {
            this->ActualComponentSets_.set (::std::move (r));
            continue;
          }
        }

        // InspectionTraceability
        //
        if (n.name () == L"InspectionTraceability" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionTraceability_type > r (
            InspectionTraceability_traits::create (i, f, this));

          if (!this->InspectionTraceability_)
          {
            this->InspectionTraceability_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!MeasurementResultsSet_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"MeasurementResultsSet",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ResultsType* ResultsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ResultsType (*this, f, c);
    }

    ResultsType& ResultsType::
    operator= (const ResultsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Version_ = x.Version_;
        this->MeasurementResultsSet_ = x.MeasurementResultsSet_;
        this->ActualComponentSets_ = x.ActualComponentSets_;
        this->InspectionTraceability_ = x.InspectionTraceability_;
      }

      return *this;
    }

    ResultsType::
    ~ResultsType ()
    {
    }

    // ActualComponentSetsType
    //

    ActualComponentSetsType::
    ActualComponentSetsType ()
    : ::xml_schema::type (),
      ActualComponentSet_ (this),
      n_ (this)
    {
    }

    ActualComponentSetsType::
    ActualComponentSetsType (const n_type& n)
    : ::xml_schema::type (),
      ActualComponentSet_ (this),
      n_ (n, this)
    {
    }

    ActualComponentSetsType::
    ActualComponentSetsType (const ActualComponentSetsType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ActualComponentSet_ (x.ActualComponentSet_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ActualComponentSetsType::
    ActualComponentSetsType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ActualComponentSet_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ActualComponentSetsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ActualComponentSet
        //
        if (n.name () == L"ActualComponentSet" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ActualComponentSet_type > r (
            ActualComponentSet_traits::create (i, f, this));

          this->ActualComponentSet_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ActualComponentSetsType* ActualComponentSetsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualComponentSetsType (*this, f, c);
    }

    ActualComponentSetsType& ActualComponentSetsType::
    operator= (const ActualComponentSetsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ActualComponentSet_ = x.ActualComponentSet_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ActualComponentSetsType::
    ~ActualComponentSetsType ()
    {
    }

    // ActualComponentSetType
    //

    ActualComponentSetType::
    ActualComponentSetType ()
    : ::xml_schema::type (),
      ActualComponent_ (this),
      n_ (this)
    {
    }

    ActualComponentSetType::
    ActualComponentSetType (const n_type& n)
    : ::xml_schema::type (),
      ActualComponent_ (this),
      n_ (n, this)
    {
    }

    ActualComponentSetType::
    ActualComponentSetType (const ActualComponentSetType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ActualComponent_ (x.ActualComponent_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ActualComponentSetType::
    ActualComponentSetType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ActualComponent_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ActualComponentSetType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ActualComponent
        //
        if (n.name () == L"ActualComponent" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ActualComponent_type > r (
            ActualComponent_traits::create (i, f, this));

          this->ActualComponent_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ActualComponentSetType* ActualComponentSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualComponentSetType (*this, f, c);
    }

    ActualComponentSetType& ActualComponentSetType::
    operator= (const ActualComponentSetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ActualComponent_ = x.ActualComponent_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ActualComponentSetType::
    ~ActualComponentSetType ()
    {
    }

    // ActualComponentType
    //

    ActualComponentType::
    ActualComponentType ()
    : ::xml_schema::type (),
      Attributes_ (this),
      SerialNumber_ (this),
      AdditionalChanges_ (this),
      Status_ (this),
      Traceability_ (this),
      AsmPathId_ (this),
      id_ (this)
    {
    }

    ActualComponentType::
    ActualComponentType (const Status_type& Status,
                         const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      SerialNumber_ (this),
      AdditionalChanges_ (this),
      Status_ (Status, this),
      Traceability_ (this),
      AsmPathId_ (this),
      id_ (id, this)
    {
    }

    ActualComponentType::
    ActualComponentType (::std::unique_ptr< Status_type > Status,
                         const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      SerialNumber_ (this),
      AdditionalChanges_ (this),
      Status_ (std::move (Status), this),
      Traceability_ (this),
      AsmPathId_ (this),
      id_ (id, this)
    {
    }

    ActualComponentType::
    ActualComponentType (const ActualComponentType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      SerialNumber_ (x.SerialNumber_, f, this),
      AdditionalChanges_ (x.AdditionalChanges_, f, this),
      Status_ (x.Status_, f, this),
      Traceability_ (x.Traceability_, f, this),
      AsmPathId_ (x.AsmPathId_, f, this),
      id_ (x.id_, f, this)
    {
    }

    ActualComponentType::
    ActualComponentType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      SerialNumber_ (this),
      AdditionalChanges_ (this),
      Status_ (this),
      Traceability_ (this),
      AsmPathId_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ActualComponentType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        // SerialNumber
        //
        if (n.name () == L"SerialNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SerialNumber_type > r (
            SerialNumber_traits::create (i, f, this));

          if (!this->SerialNumber_)
          {
            this->SerialNumber_.set (::std::move (r));
            continue;
          }
        }

        // AdditionalChanges
        //
        if (n.name () == L"AdditionalChanges" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AdditionalChanges_type > r (
            AdditionalChanges_traits::create (i, f, this));

          if (!this->AdditionalChanges_)
          {
            this->AdditionalChanges_.set (::std::move (r));
            continue;
          }
        }

        // Status
        //
        if (n.name () == L"Status" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (::std::move (r));
            continue;
          }
        }

        // Traceability
        //
        if (n.name () == L"Traceability" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Traceability_type > r (
            Traceability_traits::create (i, f, this));

          if (!this->Traceability_)
          {
            this->Traceability_.set (::std::move (r));
            continue;
          }
        }

        // AsmPathId
        //
        if (n.name () == L"AsmPathId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AsmPathId_type > r (
            AsmPathId_traits::create (i, f, this));

          if (!this->AsmPathId_)
          {
            this->AsmPathId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Status",
          L"http://qifstandards.org/xsd/qif3");
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    ActualComponentType* ActualComponentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualComponentType (*this, f, c);
    }

    ActualComponentType& ActualComponentType::
    operator= (const ActualComponentType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->SerialNumber_ = x.SerialNumber_;
        this->AdditionalChanges_ = x.AdditionalChanges_;
        this->Status_ = x.Status_;
        this->Traceability_ = x.Traceability_;
        this->AsmPathId_ = x.AsmPathId_;
        this->id_ = x.id_;
      }

      return *this;
    }

    ActualComponentType::
    ~ActualComponentType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif30
  {
    void
    operator<< (xercesc::DOMElement& e, const MeasurementResultsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }

      // InspectionTraceability
      //
      if (i.InspectionTraceability ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionTraceability",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionTraceability ();
      }

      // ThisResultsInstanceQPId
      //
      if (i.ThisResultsInstanceQPId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThisResultsInstanceQPId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThisResultsInstanceQPId ();
      }

      // ExternalFileReferences
      //
      if (i.ExternalFileReferences ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ExternalFileReferences",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ExternalFileReferences ();
      }

      // MeasuredFeatures
      //
      if (i.MeasuredFeatures ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasuredFeatures",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasuredFeatures ();
      }

      // MeasuredPointSets
      //
      if (i.MeasuredPointSets ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasuredPointSets",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasuredPointSets ();
      }

      // MeasuredCharacteristics
      //
      if (i.MeasuredCharacteristics ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasuredCharacteristics",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasuredCharacteristics ();
      }

      // ActualTransforms
      //
      if (i.ActualTransforms ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ActualTransforms",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ActualTransforms ();
      }

      // CoordinateSystemActualTransformAssociations
      //
      if (i.CoordinateSystemActualTransformAssociations ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemActualTransformAssociations",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemActualTransformAssociations ();
      }

      // InspectionStatus
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionStatus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.InspectionStatus ();
      }

      // ActualComponentIds
      //
      if (i.ActualComponentIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ActualComponentIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ActualComponentIds ();
      }

      // id
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const MeasurementResultsSetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // MeasurementResults
      //
      for (MeasurementResultsSetType::MeasurementResults_const_iterator
           b (i.MeasurementResults ().begin ()), n (i.MeasurementResults ().end ());
           b != n; ++b)
      {
        const MeasurementResultsSetType::MeasurementResults_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementResults",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ResultsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Version
      //
      if (i.Version ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Version",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Version ();
      }

      // MeasurementResultsSet
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementResultsSet",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.MeasurementResultsSet ();
      }

      // ActualComponentSets
      //
      if (i.ActualComponentSets ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ActualComponentSets",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ActualComponentSets ();
      }

      // InspectionTraceability
      //
      if (i.InspectionTraceability ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionTraceability",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionTraceability ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ActualComponentSetsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ActualComponentSet
      //
      for (ActualComponentSetsType::ActualComponentSet_const_iterator
           b (i.ActualComponentSet ().begin ()), n (i.ActualComponentSet ().end ());
           b != n; ++b)
      {
        const ActualComponentSetsType::ActualComponentSet_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ActualComponentSet",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ActualComponentSetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ActualComponent
      //
      for (ActualComponentSetType::ActualComponent_const_iterator
           b (i.ActualComponent ().begin ()), n (i.ActualComponent ().end ());
           b != n; ++b)
      {
        const ActualComponentSetType::ActualComponent_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ActualComponent",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ActualComponentType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }

      // SerialNumber
      //
      if (i.SerialNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SerialNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SerialNumber ();
      }

      // AdditionalChanges
      //
      if (i.AdditionalChanges ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AdditionalChanges",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AdditionalChanges ();
      }

      // Status
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Status",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Status ();
      }

      // Traceability
      //
      if (i.Traceability ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Traceability",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Traceability ();
      }

      // AsmPathId
      //
      if (i.AsmPathId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AsmPathId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AsmPathId ();
      }

      // id
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

