// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CXX___QIFAPPLICATIONS_QIFRESULTS_HXX
#define CXX___QIFAPPLICATIONS_QIFRESULTS_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "..\\export.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< wchar_t, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< wchar_t > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< wchar_t > not_derived;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif30
  {
    class MeasurementResultsType;
    class MeasurementResultsSetType;
    class ResultsType;
    class ActualComponentSetsType;
    class ActualComponentSetType;
    class ActualComponentType;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../QIFLibrary/Traceability.hxx"

#include "../QIFLibrary/Characteristics.hxx"

#include "../QIFLibrary/Features.hxx"

namespace xsd
{
  namespace qif30
  {
    class QIF30_SYMBOL_DECL MeasurementResultsType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // InspectionTraceability
      //
      typedef ::xsd::qif30::InspectionTraceabilityType InspectionTraceability_type;
      typedef ::xsd::cxx::tree::optional< InspectionTraceability_type > InspectionTraceability_optional;
      typedef ::xsd::cxx::tree::traits< InspectionTraceability_type, wchar_t > InspectionTraceability_traits;

      const InspectionTraceability_optional&
      InspectionTraceability () const;

      InspectionTraceability_optional&
      InspectionTraceability ();

      void
      InspectionTraceability (const InspectionTraceability_type& x);

      void
      InspectionTraceability (const InspectionTraceability_optional& x);

      void
      InspectionTraceability (::std::unique_ptr< InspectionTraceability_type > p);

      // ThisResultsInstanceQPId
      //
      typedef ::xsd::qif30::QPIdType ThisResultsInstanceQPId_type;
      typedef ::xsd::cxx::tree::optional< ThisResultsInstanceQPId_type > ThisResultsInstanceQPId_optional;
      typedef ::xsd::cxx::tree::traits< ThisResultsInstanceQPId_type, wchar_t > ThisResultsInstanceQPId_traits;

      const ThisResultsInstanceQPId_optional&
      ThisResultsInstanceQPId () const;

      ThisResultsInstanceQPId_optional&
      ThisResultsInstanceQPId ();

      void
      ThisResultsInstanceQPId (const ThisResultsInstanceQPId_type& x);

      void
      ThisResultsInstanceQPId (const ThisResultsInstanceQPId_optional& x);

      void
      ThisResultsInstanceQPId (::std::unique_ptr< ThisResultsInstanceQPId_type > p);

      // ExternalFileReferences
      //
      typedef ::xsd::qif30::ExternalFileReferencesType ExternalFileReferences_type;
      typedef ::xsd::cxx::tree::optional< ExternalFileReferences_type > ExternalFileReferences_optional;
      typedef ::xsd::cxx::tree::traits< ExternalFileReferences_type, wchar_t > ExternalFileReferences_traits;

      const ExternalFileReferences_optional&
      ExternalFileReferences () const;

      ExternalFileReferences_optional&
      ExternalFileReferences ();

      void
      ExternalFileReferences (const ExternalFileReferences_type& x);

      void
      ExternalFileReferences (const ExternalFileReferences_optional& x);

      void
      ExternalFileReferences (::std::unique_ptr< ExternalFileReferences_type > p);

      // MeasuredFeatures
      //
      typedef ::xsd::qif30::FeatureMeasurementsType MeasuredFeatures_type;
      typedef ::xsd::cxx::tree::optional< MeasuredFeatures_type > MeasuredFeatures_optional;
      typedef ::xsd::cxx::tree::traits< MeasuredFeatures_type, wchar_t > MeasuredFeatures_traits;

      const MeasuredFeatures_optional&
      MeasuredFeatures () const;

      MeasuredFeatures_optional&
      MeasuredFeatures ();

      void
      MeasuredFeatures (const MeasuredFeatures_type& x);

      void
      MeasuredFeatures (const MeasuredFeatures_optional& x);

      void
      MeasuredFeatures (::std::unique_ptr< MeasuredFeatures_type > p);

      // MeasuredPointSets
      //
      typedef ::xsd::qif30::MeasuredPointSetsType MeasuredPointSets_type;
      typedef ::xsd::cxx::tree::optional< MeasuredPointSets_type > MeasuredPointSets_optional;
      typedef ::xsd::cxx::tree::traits< MeasuredPointSets_type, wchar_t > MeasuredPointSets_traits;

      const MeasuredPointSets_optional&
      MeasuredPointSets () const;

      MeasuredPointSets_optional&
      MeasuredPointSets ();

      void
      MeasuredPointSets (const MeasuredPointSets_type& x);

      void
      MeasuredPointSets (const MeasuredPointSets_optional& x);

      void
      MeasuredPointSets (::std::unique_ptr< MeasuredPointSets_type > p);

      // MeasuredCharacteristics
      //
      typedef ::xsd::qif30::MeasuredCharacteristicsType MeasuredCharacteristics_type;
      typedef ::xsd::cxx::tree::optional< MeasuredCharacteristics_type > MeasuredCharacteristics_optional;
      typedef ::xsd::cxx::tree::traits< MeasuredCharacteristics_type, wchar_t > MeasuredCharacteristics_traits;

      const MeasuredCharacteristics_optional&
      MeasuredCharacteristics () const;

      MeasuredCharacteristics_optional&
      MeasuredCharacteristics ();

      void
      MeasuredCharacteristics (const MeasuredCharacteristics_type& x);

      void
      MeasuredCharacteristics (const MeasuredCharacteristics_optional& x);

      void
      MeasuredCharacteristics (::std::unique_ptr< MeasuredCharacteristics_type > p);

      // ActualTransforms
      //
      typedef ::xsd::qif30::TransformListType ActualTransforms_type;
      typedef ::xsd::cxx::tree::optional< ActualTransforms_type > ActualTransforms_optional;
      typedef ::xsd::cxx::tree::traits< ActualTransforms_type, wchar_t > ActualTransforms_traits;

      const ActualTransforms_optional&
      ActualTransforms () const;

      ActualTransforms_optional&
      ActualTransforms ();

      void
      ActualTransforms (const ActualTransforms_type& x);

      void
      ActualTransforms (const ActualTransforms_optional& x);

      void
      ActualTransforms (::std::unique_ptr< ActualTransforms_type > p);

      // CoordinateSystemActualTransformAssociations
      //
      typedef ::xsd::qif30::CoordinateSystemActualTransformAssociationsType CoordinateSystemActualTransformAssociations_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemActualTransformAssociations_type > CoordinateSystemActualTransformAssociations_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemActualTransformAssociations_type, wchar_t > CoordinateSystemActualTransformAssociations_traits;

      const CoordinateSystemActualTransformAssociations_optional&
      CoordinateSystemActualTransformAssociations () const;

      CoordinateSystemActualTransformAssociations_optional&
      CoordinateSystemActualTransformAssociations ();

      void
      CoordinateSystemActualTransformAssociations (const CoordinateSystemActualTransformAssociations_type& x);

      void
      CoordinateSystemActualTransformAssociations (const CoordinateSystemActualTransformAssociations_optional& x);

      void
      CoordinateSystemActualTransformAssociations (::std::unique_ptr< CoordinateSystemActualTransformAssociations_type > p);

      // InspectionStatus
      //
      typedef ::xsd::qif30::InspectionStatusType InspectionStatus_type;
      typedef ::xsd::cxx::tree::traits< InspectionStatus_type, wchar_t > InspectionStatus_traits;

      const InspectionStatus_type&
      InspectionStatus () const;

      InspectionStatus_type&
      InspectionStatus ();

      void
      InspectionStatus (const InspectionStatus_type& x);

      void
      InspectionStatus (::std::unique_ptr< InspectionStatus_type > p);

      // ActualComponentIds
      //
      typedef ::xsd::qif30::ArrayReferenceType ActualComponentIds_type;
      typedef ::xsd::cxx::tree::optional< ActualComponentIds_type > ActualComponentIds_optional;
      typedef ::xsd::cxx::tree::traits< ActualComponentIds_type, wchar_t > ActualComponentIds_traits;

      const ActualComponentIds_optional&
      ActualComponentIds () const;

      ActualComponentIds_optional&
      ActualComponentIds ();

      void
      ActualComponentIds (const ActualComponentIds_type& x);

      void
      ActualComponentIds (const ActualComponentIds_optional& x);

      void
      ActualComponentIds (::std::unique_ptr< ActualComponentIds_type > p);

      // id
      //
      typedef ::xsd::qif30::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, wchar_t > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::unique_ptr< id_type > p);

      // Constructors.
      //
      MeasurementResultsType ();

      MeasurementResultsType (const InspectionStatus_type&,
                              const id_type&);

      MeasurementResultsType (::std::unique_ptr< InspectionStatus_type >,
                              const id_type&);

      MeasurementResultsType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      MeasurementResultsType (const MeasurementResultsType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual MeasurementResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasurementResultsType&
      operator= (const MeasurementResultsType& x);

      virtual 
      ~MeasurementResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      InspectionTraceability_optional InspectionTraceability_;
      ThisResultsInstanceQPId_optional ThisResultsInstanceQPId_;
      ExternalFileReferences_optional ExternalFileReferences_;
      MeasuredFeatures_optional MeasuredFeatures_;
      MeasuredPointSets_optional MeasuredPointSets_;
      MeasuredCharacteristics_optional MeasuredCharacteristics_;
      ActualTransforms_optional ActualTransforms_;
      CoordinateSystemActualTransformAssociations_optional CoordinateSystemActualTransformAssociations_;
      ::xsd::cxx::tree::one< InspectionStatus_type > InspectionStatus_;
      ActualComponentIds_optional ActualComponentIds_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class QIF30_SYMBOL_DECL MeasurementResultsSetType: public ::xml_schema::type
    {
      public:
      // MeasurementResults
      //
      typedef ::xsd::qif30::MeasurementResultsType MeasurementResults_type;
      typedef ::xsd::cxx::tree::sequence< MeasurementResults_type > MeasurementResults_sequence;
      typedef xsd::cxx::tree::sequence< MeasurementResults_type >::iterator MeasurementResults_iterator;
      typedef xsd::cxx::tree::sequence< MeasurementResults_type >::const_iterator MeasurementResults_const_iterator;
      typedef ::xsd::cxx::tree::traits< MeasurementResults_type, wchar_t > MeasurementResults_traits;

      const MeasurementResults_sequence&
      MeasurementResults () const;

      MeasurementResults_sequence&
      MeasurementResults ();

      void
      MeasurementResults (const MeasurementResults_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      MeasurementResultsSetType ();

      MeasurementResultsSetType (const n_type&);

      MeasurementResultsSetType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      MeasurementResultsSetType (const MeasurementResultsSetType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual MeasurementResultsSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      MeasurementResultsSetType&
      operator= (const MeasurementResultsSetType& x);

      virtual 
      ~MeasurementResultsSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      MeasurementResults_sequence MeasurementResults_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL ResultsType: public ::xml_schema::type
    {
      public:
      // Version
      //
      typedef ::xsd::qif30::VersionType Version_type;
      typedef ::xsd::cxx::tree::optional< Version_type > Version_optional;
      typedef ::xsd::cxx::tree::traits< Version_type, wchar_t > Version_traits;

      const Version_optional&
      Version () const;

      Version_optional&
      Version ();

      void
      Version (const Version_type& x);

      void
      Version (const Version_optional& x);

      void
      Version (::std::unique_ptr< Version_type > p);

      // MeasurementResultsSet
      //
      typedef ::xsd::qif30::MeasurementResultsSetType MeasurementResultsSet_type;
      typedef ::xsd::cxx::tree::traits< MeasurementResultsSet_type, wchar_t > MeasurementResultsSet_traits;

      const MeasurementResultsSet_type&
      MeasurementResultsSet () const;

      MeasurementResultsSet_type&
      MeasurementResultsSet ();

      void
      MeasurementResultsSet (const MeasurementResultsSet_type& x);

      void
      MeasurementResultsSet (::std::unique_ptr< MeasurementResultsSet_type > p);

      // ActualComponentSets
      //
      typedef ::xsd::qif30::ActualComponentSetsType ActualComponentSets_type;
      typedef ::xsd::cxx::tree::optional< ActualComponentSets_type > ActualComponentSets_optional;
      typedef ::xsd::cxx::tree::traits< ActualComponentSets_type, wchar_t > ActualComponentSets_traits;

      const ActualComponentSets_optional&
      ActualComponentSets () const;

      ActualComponentSets_optional&
      ActualComponentSets ();

      void
      ActualComponentSets (const ActualComponentSets_type& x);

      void
      ActualComponentSets (const ActualComponentSets_optional& x);

      void
      ActualComponentSets (::std::unique_ptr< ActualComponentSets_type > p);

      // InspectionTraceability
      //
      typedef ::xsd::qif30::InspectionTraceabilityType InspectionTraceability_type;
      typedef ::xsd::cxx::tree::optional< InspectionTraceability_type > InspectionTraceability_optional;
      typedef ::xsd::cxx::tree::traits< InspectionTraceability_type, wchar_t > InspectionTraceability_traits;

      const InspectionTraceability_optional&
      InspectionTraceability () const;

      InspectionTraceability_optional&
      InspectionTraceability ();

      void
      InspectionTraceability (const InspectionTraceability_type& x);

      void
      InspectionTraceability (const InspectionTraceability_optional& x);

      void
      InspectionTraceability (::std::unique_ptr< InspectionTraceability_type > p);

      // Constructors.
      //
      ResultsType ();

      ResultsType (const MeasurementResultsSet_type&);

      ResultsType (::std::unique_ptr< MeasurementResultsSet_type >);

      ResultsType (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ResultsType (const ResultsType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ResultsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ResultsType&
      operator= (const ResultsType& x);

      virtual 
      ~ResultsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Version_optional Version_;
      ::xsd::cxx::tree::one< MeasurementResultsSet_type > MeasurementResultsSet_;
      ActualComponentSets_optional ActualComponentSets_;
      InspectionTraceability_optional InspectionTraceability_;
    };

    class QIF30_SYMBOL_DECL ActualComponentSetsType: public ::xml_schema::type
    {
      public:
      // ActualComponentSet
      //
      typedef ::xsd::qif30::ActualComponentSetType ActualComponentSet_type;
      typedef ::xsd::cxx::tree::sequence< ActualComponentSet_type > ActualComponentSet_sequence;
      typedef xsd::cxx::tree::sequence< ActualComponentSet_type >::iterator ActualComponentSet_iterator;
      typedef xsd::cxx::tree::sequence< ActualComponentSet_type >::const_iterator ActualComponentSet_const_iterator;
      typedef ::xsd::cxx::tree::traits< ActualComponentSet_type, wchar_t > ActualComponentSet_traits;

      const ActualComponentSet_sequence&
      ActualComponentSet () const;

      ActualComponentSet_sequence&
      ActualComponentSet ();

      void
      ActualComponentSet (const ActualComponentSet_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      ActualComponentSetsType ();

      ActualComponentSetsType (const n_type&);

      ActualComponentSetsType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ActualComponentSetsType (const ActualComponentSetsType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ActualComponentSetsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualComponentSetsType&
      operator= (const ActualComponentSetsType& x);

      virtual 
      ~ActualComponentSetsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ActualComponentSet_sequence ActualComponentSet_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL ActualComponentSetType: public ::xml_schema::type
    {
      public:
      // ActualComponent
      //
      typedef ::xsd::qif30::ActualComponentType ActualComponent_type;
      typedef ::xsd::cxx::tree::sequence< ActualComponent_type > ActualComponent_sequence;
      typedef xsd::cxx::tree::sequence< ActualComponent_type >::iterator ActualComponent_iterator;
      typedef xsd::cxx::tree::sequence< ActualComponent_type >::const_iterator ActualComponent_const_iterator;
      typedef ::xsd::cxx::tree::traits< ActualComponent_type, wchar_t > ActualComponent_traits;

      const ActualComponent_sequence&
      ActualComponent () const;

      ActualComponent_sequence&
      ActualComponent ();

      void
      ActualComponent (const ActualComponent_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      ActualComponentSetType ();

      ActualComponentSetType (const n_type&);

      ActualComponentSetType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ActualComponentSetType (const ActualComponentSetType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ActualComponentSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualComponentSetType&
      operator= (const ActualComponentSetType& x);

      virtual 
      ~ActualComponentSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ActualComponent_sequence ActualComponent_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL ActualComponentType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // SerialNumber
      //
      typedef ::xml_schema::string SerialNumber_type;
      typedef ::xsd::cxx::tree::optional< SerialNumber_type > SerialNumber_optional;
      typedef ::xsd::cxx::tree::traits< SerialNumber_type, wchar_t > SerialNumber_traits;

      const SerialNumber_optional&
      SerialNumber () const;

      SerialNumber_optional&
      SerialNumber ();

      void
      SerialNumber (const SerialNumber_type& x);

      void
      SerialNumber (const SerialNumber_optional& x);

      void
      SerialNumber (::std::unique_ptr< SerialNumber_type > p);

      // AdditionalChanges
      //
      typedef ::xml_schema::string AdditionalChanges_type;
      typedef ::xsd::cxx::tree::optional< AdditionalChanges_type > AdditionalChanges_optional;
      typedef ::xsd::cxx::tree::traits< AdditionalChanges_type, wchar_t > AdditionalChanges_traits;

      const AdditionalChanges_optional&
      AdditionalChanges () const;

      AdditionalChanges_optional&
      AdditionalChanges ();

      void
      AdditionalChanges (const AdditionalChanges_type& x);

      void
      AdditionalChanges (const AdditionalChanges_optional& x);

      void
      AdditionalChanges (::std::unique_ptr< AdditionalChanges_type > p);

      // Status
      //
      typedef ::xsd::qif30::InspectionStatusType Status_type;
      typedef ::xsd::cxx::tree::traits< Status_type, wchar_t > Status_traits;

      const Status_type&
      Status () const;

      Status_type&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (::std::unique_ptr< Status_type > p);

      // Traceability
      //
      typedef ::xsd::qif30::ActualProductTraceabilityType Traceability_type;
      typedef ::xsd::cxx::tree::optional< Traceability_type > Traceability_optional;
      typedef ::xsd::cxx::tree::traits< Traceability_type, wchar_t > Traceability_traits;

      const Traceability_optional&
      Traceability () const;

      Traceability_optional&
      Traceability ();

      void
      Traceability (const Traceability_type& x);

      void
      Traceability (const Traceability_optional& x);

      void
      Traceability (::std::unique_ptr< Traceability_type > p);

      // AsmPathId
      //
      typedef ::xsd::qif30::QIFReferenceType AsmPathId_type;
      typedef ::xsd::cxx::tree::optional< AsmPathId_type > AsmPathId_optional;
      typedef ::xsd::cxx::tree::traits< AsmPathId_type, wchar_t > AsmPathId_traits;

      const AsmPathId_optional&
      AsmPathId () const;

      AsmPathId_optional&
      AsmPathId ();

      void
      AsmPathId (const AsmPathId_type& x);

      void
      AsmPathId (const AsmPathId_optional& x);

      void
      AsmPathId (::std::unique_ptr< AsmPathId_type > p);

      // id
      //
      typedef ::xsd::qif30::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, wchar_t > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::unique_ptr< id_type > p);

      // Constructors.
      //
      ActualComponentType ();

      ActualComponentType (const Status_type&,
                           const id_type&);

      ActualComponentType (::std::unique_ptr< Status_type >,
                           const id_type&);

      ActualComponentType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ActualComponentType (const ActualComponentType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ActualComponentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualComponentType&
      operator= (const ActualComponentType& x);

      virtual 
      ~ActualComponentType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      SerialNumber_optional SerialNumber_;
      AdditionalChanges_optional AdditionalChanges_;
      ::xsd::cxx::tree::one< Status_type > Status_;
      Traceability_optional Traceability_;
      AsmPathId_optional AsmPathId_;
      ::xsd::cxx::tree::one< id_type > id_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif30
  {
    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const MeasurementResultsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const MeasurementResultsSetType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ResultsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ActualComponentSetsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ActualComponentSetType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ActualComponentType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___QIFAPPLICATIONS_QIFRESULTS_HXX
