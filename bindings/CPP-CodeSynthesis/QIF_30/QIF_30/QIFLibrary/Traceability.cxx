// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Traceability.hxx"

namespace xsd
{
  namespace qif30
  {
    // InspectionProgramType
    //

    const InspectionProgramType::File_type& InspectionProgramType::
    File () const
    {
      return this->File_.get ();
    }

    InspectionProgramType::File_type& InspectionProgramType::
    File ()
    {
      return this->File_.get ();
    }

    void InspectionProgramType::
    File (const File_type& x)
    {
      this->File_.set (x);
    }

    void InspectionProgramType::
    File (::std::unique_ptr< File_type > x)
    {
      this->File_.set (std::move (x));
    }

    const InspectionProgramType::Description_optional& InspectionProgramType::
    Description () const
    {
      return this->Description_;
    }

    InspectionProgramType::Description_optional& InspectionProgramType::
    Description ()
    {
      return this->Description_;
    }

    void InspectionProgramType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void InspectionProgramType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void InspectionProgramType::
    Description (::std::unique_ptr< Description_type > x)
    {
      this->Description_.set (std::move (x));
    }

    const InspectionProgramType::FormalStandardId_type& InspectionProgramType::
    FormalStandardId () const
    {
      return this->FormalStandardId_.get ();
    }

    InspectionProgramType::FormalStandardId_type& InspectionProgramType::
    FormalStandardId ()
    {
      return this->FormalStandardId_.get ();
    }

    void InspectionProgramType::
    FormalStandardId (const FormalStandardId_type& x)
    {
      this->FormalStandardId_.set (x);
    }

    void InspectionProgramType::
    FormalStandardId (::std::unique_ptr< FormalStandardId_type > x)
    {
      this->FormalStandardId_.set (std::move (x));
    }

    const InspectionProgramType::Author_type& InspectionProgramType::
    Author () const
    {
      return this->Author_.get ();
    }

    InspectionProgramType::Author_type& InspectionProgramType::
    Author ()
    {
      return this->Author_.get ();
    }

    void InspectionProgramType::
    Author (const Author_type& x)
    {
      this->Author_.set (x);
    }

    void InspectionProgramType::
    Author (::std::unique_ptr< Author_type > x)
    {
      this->Author_.set (std::move (x));
    }


    // InspectionSoftwareItemsType
    //

    const InspectionSoftwareItemsType::InspectionProgramGenerationSoftware_optional& InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware () const
    {
      return this->InspectionProgramGenerationSoftware_;
    }

    InspectionSoftwareItemsType::InspectionProgramGenerationSoftware_optional& InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware ()
    {
      return this->InspectionProgramGenerationSoftware_;
    }

    void InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware (const InspectionProgramGenerationSoftware_type& x)
    {
      this->InspectionProgramGenerationSoftware_.set (x);
    }

    void InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware (const InspectionProgramGenerationSoftware_optional& x)
    {
      this->InspectionProgramGenerationSoftware_ = x;
    }

    void InspectionSoftwareItemsType::
    InspectionProgramGenerationSoftware (::std::unique_ptr< InspectionProgramGenerationSoftware_type > x)
    {
      this->InspectionProgramGenerationSoftware_.set (std::move (x));
    }

    const InspectionSoftwareItemsType::InspectionProgramExecutionSoftware_optional& InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware () const
    {
      return this->InspectionProgramExecutionSoftware_;
    }

    InspectionSoftwareItemsType::InspectionProgramExecutionSoftware_optional& InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware ()
    {
      return this->InspectionProgramExecutionSoftware_;
    }

    void InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware (const InspectionProgramExecutionSoftware_type& x)
    {
      this->InspectionProgramExecutionSoftware_.set (x);
    }

    void InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware (const InspectionProgramExecutionSoftware_optional& x)
    {
      this->InspectionProgramExecutionSoftware_ = x;
    }

    void InspectionSoftwareItemsType::
    InspectionProgramExecutionSoftware (::std::unique_ptr< InspectionProgramExecutionSoftware_type > x)
    {
      this->InspectionProgramExecutionSoftware_.set (std::move (x));
    }

    const InspectionSoftwareItemsType::AnalysisSoftware_optional& InspectionSoftwareItemsType::
    AnalysisSoftware () const
    {
      return this->AnalysisSoftware_;
    }

    InspectionSoftwareItemsType::AnalysisSoftware_optional& InspectionSoftwareItemsType::
    AnalysisSoftware ()
    {
      return this->AnalysisSoftware_;
    }

    void InspectionSoftwareItemsType::
    AnalysisSoftware (const AnalysisSoftware_type& x)
    {
      this->AnalysisSoftware_.set (x);
    }

    void InspectionSoftwareItemsType::
    AnalysisSoftware (const AnalysisSoftware_optional& x)
    {
      this->AnalysisSoftware_ = x;
    }

    void InspectionSoftwareItemsType::
    AnalysisSoftware (::std::unique_ptr< AnalysisSoftware_type > x)
    {
      this->AnalysisSoftware_.set (std::move (x));
    }

    const InspectionSoftwareItemsType::CADSoftware_optional& InspectionSoftwareItemsType::
    CADSoftware () const
    {
      return this->CADSoftware_;
    }

    InspectionSoftwareItemsType::CADSoftware_optional& InspectionSoftwareItemsType::
    CADSoftware ()
    {
      return this->CADSoftware_;
    }

    void InspectionSoftwareItemsType::
    CADSoftware (const CADSoftware_type& x)
    {
      this->CADSoftware_.set (x);
    }

    void InspectionSoftwareItemsType::
    CADSoftware (const CADSoftware_optional& x)
    {
      this->CADSoftware_ = x;
    }

    void InspectionSoftwareItemsType::
    CADSoftware (::std::unique_ptr< CADSoftware_type > x)
    {
      this->CADSoftware_.set (std::move (x));
    }

    const InspectionSoftwareItemsType::DMESoftware_optional& InspectionSoftwareItemsType::
    DMESoftware () const
    {
      return this->DMESoftware_;
    }

    InspectionSoftwareItemsType::DMESoftware_optional& InspectionSoftwareItemsType::
    DMESoftware ()
    {
      return this->DMESoftware_;
    }

    void InspectionSoftwareItemsType::
    DMESoftware (const DMESoftware_type& x)
    {
      this->DMESoftware_.set (x);
    }

    void InspectionSoftwareItemsType::
    DMESoftware (const DMESoftware_optional& x)
    {
      this->DMESoftware_ = x;
    }

    void InspectionSoftwareItemsType::
    DMESoftware (::std::unique_ptr< DMESoftware_type > x)
    {
      this->DMESoftware_.set (std::move (x));
    }


    // EnvironmentType
    //

    const EnvironmentType::Attributes_optional& EnvironmentType::
    Attributes () const
    {
      return this->Attributes_;
    }

    EnvironmentType::Attributes_optional& EnvironmentType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void EnvironmentType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void EnvironmentType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void EnvironmentType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }

    const EnvironmentType::ObjectTemperature_optional& EnvironmentType::
    ObjectTemperature () const
    {
      return this->ObjectTemperature_;
    }

    EnvironmentType::ObjectTemperature_optional& EnvironmentType::
    ObjectTemperature ()
    {
      return this->ObjectTemperature_;
    }

    void EnvironmentType::
    ObjectTemperature (const ObjectTemperature_type& x)
    {
      this->ObjectTemperature_.set (x);
    }

    void EnvironmentType::
    ObjectTemperature (const ObjectTemperature_optional& x)
    {
      this->ObjectTemperature_ = x;
    }

    void EnvironmentType::
    ObjectTemperature (::std::unique_ptr< ObjectTemperature_type > x)
    {
      this->ObjectTemperature_.set (std::move (x));
    }

    const EnvironmentType::AmbientTemperature_optional& EnvironmentType::
    AmbientTemperature () const
    {
      return this->AmbientTemperature_;
    }

    EnvironmentType::AmbientTemperature_optional& EnvironmentType::
    AmbientTemperature ()
    {
      return this->AmbientTemperature_;
    }

    void EnvironmentType::
    AmbientTemperature (const AmbientTemperature_type& x)
    {
      this->AmbientTemperature_.set (x);
    }

    void EnvironmentType::
    AmbientTemperature (const AmbientTemperature_optional& x)
    {
      this->AmbientTemperature_ = x;
    }

    void EnvironmentType::
    AmbientTemperature (::std::unique_ptr< AmbientTemperature_type > x)
    {
      this->AmbientTemperature_.set (std::move (x));
    }

    const EnvironmentType::RelativeHumidity_optional& EnvironmentType::
    RelativeHumidity () const
    {
      return this->RelativeHumidity_;
    }

    EnvironmentType::RelativeHumidity_optional& EnvironmentType::
    RelativeHumidity ()
    {
      return this->RelativeHumidity_;
    }

    void EnvironmentType::
    RelativeHumidity (const RelativeHumidity_type& x)
    {
      this->RelativeHumidity_.set (x);
    }

    void EnvironmentType::
    RelativeHumidity (const RelativeHumidity_optional& x)
    {
      this->RelativeHumidity_ = x;
    }

    void EnvironmentType::
    RelativeHumidity (::std::unique_ptr< RelativeHumidity_type > x)
    {
      this->RelativeHumidity_.set (std::move (x));
    }

    const EnvironmentType::DateAndTime_type& EnvironmentType::
    DateAndTime () const
    {
      return this->DateAndTime_.get ();
    }

    EnvironmentType::DateAndTime_type& EnvironmentType::
    DateAndTime ()
    {
      return this->DateAndTime_.get ();
    }

    void EnvironmentType::
    DateAndTime (const DateAndTime_type& x)
    {
      this->DateAndTime_.set (x);
    }

    void EnvironmentType::
    DateAndTime (::std::unique_ptr< DateAndTime_type > x)
    {
      this->DateAndTime_.set (std::move (x));
    }

    const EnvironmentType::TimeDescription_optional& EnvironmentType::
    TimeDescription () const
    {
      return this->TimeDescription_;
    }

    EnvironmentType::TimeDescription_optional& EnvironmentType::
    TimeDescription ()
    {
      return this->TimeDescription_;
    }

    void EnvironmentType::
    TimeDescription (const TimeDescription_type& x)
    {
      this->TimeDescription_.set (x);
    }

    void EnvironmentType::
    TimeDescription (const TimeDescription_optional& x)
    {
      this->TimeDescription_ = x;
    }

    void EnvironmentType::
    TimeDescription (::std::unique_ptr< TimeDescription_type > x)
    {
      this->TimeDescription_.set (std::move (x));
    }


    // EnvironmentsType
    //

    const EnvironmentsType::Environment_sequence& EnvironmentsType::
    Environment () const
    {
      return this->Environment_;
    }

    EnvironmentsType::Environment_sequence& EnvironmentsType::
    Environment ()
    {
      return this->Environment_;
    }

    void EnvironmentsType::
    Environment (const Environment_sequence& s)
    {
      this->Environment_ = s;
    }

    const EnvironmentsType::n_type& EnvironmentsType::
    n () const
    {
      return this->n_.get ();
    }

    EnvironmentsType::n_type& EnvironmentsType::
    n ()
    {
      return this->n_.get ();
    }

    void EnvironmentsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void EnvironmentsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // InspectionTraceabilityType
    //

    const InspectionTraceabilityType::InspectingOrganization_optional& InspectionTraceabilityType::
    InspectingOrganization () const
    {
      return this->InspectingOrganization_;
    }

    InspectionTraceabilityType::InspectingOrganization_optional& InspectionTraceabilityType::
    InspectingOrganization ()
    {
      return this->InspectingOrganization_;
    }

    void InspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_type& x)
    {
      this->InspectingOrganization_.set (x);
    }

    void InspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_optional& x)
    {
      this->InspectingOrganization_ = x;
    }

    void InspectionTraceabilityType::
    InspectingOrganization (::std::unique_ptr< InspectingOrganization_type > x)
    {
      this->InspectingOrganization_.set (std::move (x));
    }

    const InspectionTraceabilityType::CustomerOrganization_optional& InspectionTraceabilityType::
    CustomerOrganization () const
    {
      return this->CustomerOrganization_;
    }

    InspectionTraceabilityType::CustomerOrganization_optional& InspectionTraceabilityType::
    CustomerOrganization ()
    {
      return this->CustomerOrganization_;
    }

    void InspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_type& x)
    {
      this->CustomerOrganization_.set (x);
    }

    void InspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_optional& x)
    {
      this->CustomerOrganization_ = x;
    }

    void InspectionTraceabilityType::
    CustomerOrganization (::std::unique_ptr< CustomerOrganization_type > x)
    {
      this->CustomerOrganization_.set (std::move (x));
    }

    const InspectionTraceabilityType::SupplierCode_optional& InspectionTraceabilityType::
    SupplierCode () const
    {
      return this->SupplierCode_;
    }

    InspectionTraceabilityType::SupplierCode_optional& InspectionTraceabilityType::
    SupplierCode ()
    {
      return this->SupplierCode_;
    }

    void InspectionTraceabilityType::
    SupplierCode (const SupplierCode_type& x)
    {
      this->SupplierCode_.set (x);
    }

    void InspectionTraceabilityType::
    SupplierCode (const SupplierCode_optional& x)
    {
      this->SupplierCode_ = x;
    }

    void InspectionTraceabilityType::
    SupplierCode (::std::unique_ptr< SupplierCode_type > x)
    {
      this->SupplierCode_.set (std::move (x));
    }

    const InspectionTraceabilityType::PurchaseOrderNumber_optional& InspectionTraceabilityType::
    PurchaseOrderNumber () const
    {
      return this->PurchaseOrderNumber_;
    }

    InspectionTraceabilityType::PurchaseOrderNumber_optional& InspectionTraceabilityType::
    PurchaseOrderNumber ()
    {
      return this->PurchaseOrderNumber_;
    }

    void InspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_type& x)
    {
      this->PurchaseOrderNumber_.set (x);
    }

    void InspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_optional& x)
    {
      this->PurchaseOrderNumber_ = x;
    }

    void InspectionTraceabilityType::
    PurchaseOrderNumber (::std::unique_ptr< PurchaseOrderNumber_type > x)
    {
      this->PurchaseOrderNumber_.set (std::move (x));
    }

    const InspectionTraceabilityType::OrderNumber_optional& InspectionTraceabilityType::
    OrderNumber () const
    {
      return this->OrderNumber_;
    }

    InspectionTraceabilityType::OrderNumber_optional& InspectionTraceabilityType::
    OrderNumber ()
    {
      return this->OrderNumber_;
    }

    void InspectionTraceabilityType::
    OrderNumber (const OrderNumber_type& x)
    {
      this->OrderNumber_.set (x);
    }

    void InspectionTraceabilityType::
    OrderNumber (const OrderNumber_optional& x)
    {
      this->OrderNumber_ = x;
    }

    void InspectionTraceabilityType::
    OrderNumber (::std::unique_ptr< OrderNumber_type > x)
    {
      this->OrderNumber_.set (std::move (x));
    }

    const InspectionTraceabilityType::ReportNumber_optional& InspectionTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    InspectionTraceabilityType::ReportNumber_optional& InspectionTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void InspectionTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void InspectionTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void InspectionTraceabilityType::
    ReportNumber (::std::unique_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (std::move (x));
    }

    const InspectionTraceabilityType::InspectionScope_optional& InspectionTraceabilityType::
    InspectionScope () const
    {
      return this->InspectionScope_;
    }

    InspectionTraceabilityType::InspectionScope_optional& InspectionTraceabilityType::
    InspectionScope ()
    {
      return this->InspectionScope_;
    }

    void InspectionTraceabilityType::
    InspectionScope (const InspectionScope_type& x)
    {
      this->InspectionScope_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionScope (const InspectionScope_optional& x)
    {
      this->InspectionScope_ = x;
    }

    void InspectionTraceabilityType::
    InspectionScope (::std::unique_ptr< InspectionScope_type > x)
    {
      this->InspectionScope_.set (std::move (x));
    }

    const InspectionTraceabilityType::InspectionMode_optional& InspectionTraceabilityType::
    InspectionMode () const
    {
      return this->InspectionMode_;
    }

    InspectionTraceabilityType::InspectionMode_optional& InspectionTraceabilityType::
    InspectionMode ()
    {
      return this->InspectionMode_;
    }

    void InspectionTraceabilityType::
    InspectionMode (const InspectionMode_type& x)
    {
      this->InspectionMode_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionMode (const InspectionMode_optional& x)
    {
      this->InspectionMode_ = x;
    }

    void InspectionTraceabilityType::
    InspectionMode (::std::unique_ptr< InspectionMode_type > x)
    {
      this->InspectionMode_.set (std::move (x));
    }

    const InspectionTraceabilityType::PartialInspection_optional& InspectionTraceabilityType::
    PartialInspection () const
    {
      return this->PartialInspection_;
    }

    InspectionTraceabilityType::PartialInspection_optional& InspectionTraceabilityType::
    PartialInspection ()
    {
      return this->PartialInspection_;
    }

    void InspectionTraceabilityType::
    PartialInspection (const PartialInspection_type& x)
    {
      this->PartialInspection_.set (x);
    }

    void InspectionTraceabilityType::
    PartialInspection (const PartialInspection_optional& x)
    {
      this->PartialInspection_ = x;
    }

    void InspectionTraceabilityType::
    PartialInspection (::std::unique_ptr< PartialInspection_type > x)
    {
      this->PartialInspection_.set (std::move (x));
    }

    const InspectionTraceabilityType::NotableEvents_optional& InspectionTraceabilityType::
    NotableEvents () const
    {
      return this->NotableEvents_;
    }

    InspectionTraceabilityType::NotableEvents_optional& InspectionTraceabilityType::
    NotableEvents ()
    {
      return this->NotableEvents_;
    }

    void InspectionTraceabilityType::
    NotableEvents (const NotableEvents_type& x)
    {
      this->NotableEvents_.set (x);
    }

    void InspectionTraceabilityType::
    NotableEvents (const NotableEvents_optional& x)
    {
      this->NotableEvents_ = x;
    }

    void InspectionTraceabilityType::
    NotableEvents (::std::unique_ptr< NotableEvents_type > x)
    {
      this->NotableEvents_.set (std::move (x));
    }

    const InspectionTraceabilityType::NotedEvents_optional& InspectionTraceabilityType::
    NotedEvents () const
    {
      return this->NotedEvents_;
    }

    InspectionTraceabilityType::NotedEvents_optional& InspectionTraceabilityType::
    NotedEvents ()
    {
      return this->NotedEvents_;
    }

    void InspectionTraceabilityType::
    NotedEvents (const NotedEvents_type& x)
    {
      this->NotedEvents_.set (x);
    }

    void InspectionTraceabilityType::
    NotedEvents (const NotedEvents_optional& x)
    {
      this->NotedEvents_ = x;
    }

    void InspectionTraceabilityType::
    NotedEvents (::std::unique_ptr< NotedEvents_type > x)
    {
      this->NotedEvents_.set (std::move (x));
    }

    const InspectionTraceabilityType::InspectionStart_optional& InspectionTraceabilityType::
    InspectionStart () const
    {
      return this->InspectionStart_;
    }

    InspectionTraceabilityType::InspectionStart_optional& InspectionTraceabilityType::
    InspectionStart ()
    {
      return this->InspectionStart_;
    }

    void InspectionTraceabilityType::
    InspectionStart (const InspectionStart_type& x)
    {
      this->InspectionStart_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionStart (const InspectionStart_optional& x)
    {
      this->InspectionStart_ = x;
    }

    void InspectionTraceabilityType::
    InspectionStart (::std::unique_ptr< InspectionStart_type > x)
    {
      this->InspectionStart_.set (std::move (x));
    }

    const InspectionTraceabilityType::InspectionEnd_optional& InspectionTraceabilityType::
    InspectionEnd () const
    {
      return this->InspectionEnd_;
    }

    InspectionTraceabilityType::InspectionEnd_optional& InspectionTraceabilityType::
    InspectionEnd ()
    {
      return this->InspectionEnd_;
    }

    void InspectionTraceabilityType::
    InspectionEnd (const InspectionEnd_type& x)
    {
      this->InspectionEnd_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionEnd (const InspectionEnd_optional& x)
    {
      this->InspectionEnd_ = x;
    }

    void InspectionTraceabilityType::
    InspectionEnd (::std::unique_ptr< InspectionEnd_type > x)
    {
      this->InspectionEnd_.set (std::move (x));
    }

    const InspectionTraceabilityType::InspectionSoftwareItems_optional& InspectionTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    InspectionTraceabilityType::InspectionSoftwareItems_optional& InspectionTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void InspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void InspectionTraceabilityType::
    InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (std::move (x));
    }

    const InspectionTraceabilityType::InspectionProgram_optional& InspectionTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    InspectionTraceabilityType::InspectionProgram_optional& InspectionTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void InspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void InspectionTraceabilityType::
    InspectionProgram (::std::unique_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (std::move (x));
    }

    const InspectionTraceabilityType::InspectionOperator_optional& InspectionTraceabilityType::
    InspectionOperator () const
    {
      return this->InspectionOperator_;
    }

    InspectionTraceabilityType::InspectionOperator_optional& InspectionTraceabilityType::
    InspectionOperator ()
    {
      return this->InspectionOperator_;
    }

    void InspectionTraceabilityType::
    InspectionOperator (const InspectionOperator_type& x)
    {
      this->InspectionOperator_.set (x);
    }

    void InspectionTraceabilityType::
    InspectionOperator (const InspectionOperator_optional& x)
    {
      this->InspectionOperator_ = x;
    }

    void InspectionTraceabilityType::
    InspectionOperator (::std::unique_ptr< InspectionOperator_type > x)
    {
      this->InspectionOperator_.set (std::move (x));
    }

    const InspectionTraceabilityType::ReportPreparer_optional& InspectionTraceabilityType::
    ReportPreparer () const
    {
      return this->ReportPreparer_;
    }

    InspectionTraceabilityType::ReportPreparer_optional& InspectionTraceabilityType::
    ReportPreparer ()
    {
      return this->ReportPreparer_;
    }

    void InspectionTraceabilityType::
    ReportPreparer (const ReportPreparer_type& x)
    {
      this->ReportPreparer_.set (x);
    }

    void InspectionTraceabilityType::
    ReportPreparer (const ReportPreparer_optional& x)
    {
      this->ReportPreparer_ = x;
    }

    void InspectionTraceabilityType::
    ReportPreparer (::std::unique_ptr< ReportPreparer_type > x)
    {
      this->ReportPreparer_.set (std::move (x));
    }

    const InspectionTraceabilityType::ReportPreparationDate_optional& InspectionTraceabilityType::
    ReportPreparationDate () const
    {
      return this->ReportPreparationDate_;
    }

    InspectionTraceabilityType::ReportPreparationDate_optional& InspectionTraceabilityType::
    ReportPreparationDate ()
    {
      return this->ReportPreparationDate_;
    }

    void InspectionTraceabilityType::
    ReportPreparationDate (const ReportPreparationDate_type& x)
    {
      this->ReportPreparationDate_.set (x);
    }

    void InspectionTraceabilityType::
    ReportPreparationDate (const ReportPreparationDate_optional& x)
    {
      this->ReportPreparationDate_ = x;
    }

    void InspectionTraceabilityType::
    ReportPreparationDate (::std::unique_ptr< ReportPreparationDate_type > x)
    {
      this->ReportPreparationDate_.set (std::move (x));
    }

    const InspectionTraceabilityType::ReportType_optional& InspectionTraceabilityType::
    ReportType () const
    {
      return this->ReportType_;
    }

    InspectionTraceabilityType::ReportType_optional& InspectionTraceabilityType::
    ReportType ()
    {
      return this->ReportType_;
    }

    void InspectionTraceabilityType::
    ReportType (const ReportType_type& x)
    {
      this->ReportType_.set (x);
    }

    void InspectionTraceabilityType::
    ReportType (const ReportType_optional& x)
    {
      this->ReportType_ = x;
    }

    void InspectionTraceabilityType::
    ReportType (::std::unique_ptr< ReportType_type > x)
    {
      this->ReportType_.set (std::move (x));
    }

    const InspectionTraceabilityType::SecurityClassification_optional& InspectionTraceabilityType::
    SecurityClassification () const
    {
      return this->SecurityClassification_;
    }

    InspectionTraceabilityType::SecurityClassification_optional& InspectionTraceabilityType::
    SecurityClassification ()
    {
      return this->SecurityClassification_;
    }

    void InspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_type& x)
    {
      this->SecurityClassification_.set (x);
    }

    void InspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_optional& x)
    {
      this->SecurityClassification_ = x;
    }

    void InspectionTraceabilityType::
    SecurityClassification (::std::unique_ptr< SecurityClassification_type > x)
    {
      this->SecurityClassification_.set (std::move (x));
    }

    const InspectionTraceabilityType::PlantLocation_optional& InspectionTraceabilityType::
    PlantLocation () const
    {
      return this->PlantLocation_;
    }

    InspectionTraceabilityType::PlantLocation_optional& InspectionTraceabilityType::
    PlantLocation ()
    {
      return this->PlantLocation_;
    }

    void InspectionTraceabilityType::
    PlantLocation (const PlantLocation_type& x)
    {
      this->PlantLocation_.set (x);
    }

    void InspectionTraceabilityType::
    PlantLocation (const PlantLocation_optional& x)
    {
      this->PlantLocation_ = x;
    }

    void InspectionTraceabilityType::
    PlantLocation (::std::unique_ptr< PlantLocation_type > x)
    {
      this->PlantLocation_.set (std::move (x));
    }

    const InspectionTraceabilityType::ReferencedQIFPlanInstance_optional& InspectionTraceabilityType::
    ReferencedQIFPlanInstance () const
    {
      return this->ReferencedQIFPlanInstance_;
    }

    InspectionTraceabilityType::ReferencedQIFPlanInstance_optional& InspectionTraceabilityType::
    ReferencedQIFPlanInstance ()
    {
      return this->ReferencedQIFPlanInstance_;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x)
    {
      this->ReferencedQIFPlanInstance_.set (x);
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x)
    {
      this->ReferencedQIFPlanInstance_ = x;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlanInstance (::std::unique_ptr< ReferencedQIFPlanInstance_type > x)
    {
      this->ReferencedQIFPlanInstance_.set (std::move (x));
    }

    const InspectionTraceabilityType::ReferencedQIFPlan_optional& InspectionTraceabilityType::
    ReferencedQIFPlan () const
    {
      return this->ReferencedQIFPlan_;
    }

    InspectionTraceabilityType::ReferencedQIFPlan_optional& InspectionTraceabilityType::
    ReferencedQIFPlan ()
    {
      return this->ReferencedQIFPlan_;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_type& x)
    {
      this->ReferencedQIFPlan_.set (x);
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_optional& x)
    {
      this->ReferencedQIFPlan_ = x;
    }

    void InspectionTraceabilityType::
    ReferencedQIFPlan (::std::unique_ptr< ReferencedQIFPlan_type > x)
    {
      this->ReferencedQIFPlan_.set (std::move (x));
    }

    const InspectionTraceabilityType::ReferencedQIFPlan_type& InspectionTraceabilityType::
    ReferencedQIFPlan_default_value ()
    {
      return ReferencedQIFPlan_default_value_;
    }

    const InspectionTraceabilityType::Errors_optional& InspectionTraceabilityType::
    Errors () const
    {
      return this->Errors_;
    }

    InspectionTraceabilityType::Errors_optional& InspectionTraceabilityType::
    Errors ()
    {
      return this->Errors_;
    }

    void InspectionTraceabilityType::
    Errors (const Errors_type& x)
    {
      this->Errors_.set (x);
    }

    void InspectionTraceabilityType::
    Errors (const Errors_optional& x)
    {
      this->Errors_ = x;
    }

    void InspectionTraceabilityType::
    Errors (::std::unique_ptr< Errors_type > x)
    {
      this->Errors_.set (std::move (x));
    }

    const InspectionTraceabilityType::Attributes_optional& InspectionTraceabilityType::
    Attributes () const
    {
      return this->Attributes_;
    }

    InspectionTraceabilityType::Attributes_optional& InspectionTraceabilityType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void InspectionTraceabilityType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void InspectionTraceabilityType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void InspectionTraceabilityType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }


    // PreInspectionTraceabilityType
    //

    const PreInspectionTraceabilityType::InspectingOrganization_optional& PreInspectionTraceabilityType::
    InspectingOrganization () const
    {
      return this->InspectingOrganization_;
    }

    PreInspectionTraceabilityType::InspectingOrganization_optional& PreInspectionTraceabilityType::
    InspectingOrganization ()
    {
      return this->InspectingOrganization_;
    }

    void PreInspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_type& x)
    {
      this->InspectingOrganization_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectingOrganization (const InspectingOrganization_optional& x)
    {
      this->InspectingOrganization_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectingOrganization (::std::unique_ptr< InspectingOrganization_type > x)
    {
      this->InspectingOrganization_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::CustomerOrganization_optional& PreInspectionTraceabilityType::
    CustomerOrganization () const
    {
      return this->CustomerOrganization_;
    }

    PreInspectionTraceabilityType::CustomerOrganization_optional& PreInspectionTraceabilityType::
    CustomerOrganization ()
    {
      return this->CustomerOrganization_;
    }

    void PreInspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_type& x)
    {
      this->CustomerOrganization_.set (x);
    }

    void PreInspectionTraceabilityType::
    CustomerOrganization (const CustomerOrganization_optional& x)
    {
      this->CustomerOrganization_ = x;
    }

    void PreInspectionTraceabilityType::
    CustomerOrganization (::std::unique_ptr< CustomerOrganization_type > x)
    {
      this->CustomerOrganization_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::SupplierCode_optional& PreInspectionTraceabilityType::
    SupplierCode () const
    {
      return this->SupplierCode_;
    }

    PreInspectionTraceabilityType::SupplierCode_optional& PreInspectionTraceabilityType::
    SupplierCode ()
    {
      return this->SupplierCode_;
    }

    void PreInspectionTraceabilityType::
    SupplierCode (const SupplierCode_type& x)
    {
      this->SupplierCode_.set (x);
    }

    void PreInspectionTraceabilityType::
    SupplierCode (const SupplierCode_optional& x)
    {
      this->SupplierCode_ = x;
    }

    void PreInspectionTraceabilityType::
    SupplierCode (::std::unique_ptr< SupplierCode_type > x)
    {
      this->SupplierCode_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::PurchaseOrderNumber_optional& PreInspectionTraceabilityType::
    PurchaseOrderNumber () const
    {
      return this->PurchaseOrderNumber_;
    }

    PreInspectionTraceabilityType::PurchaseOrderNumber_optional& PreInspectionTraceabilityType::
    PurchaseOrderNumber ()
    {
      return this->PurchaseOrderNumber_;
    }

    void PreInspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_type& x)
    {
      this->PurchaseOrderNumber_.set (x);
    }

    void PreInspectionTraceabilityType::
    PurchaseOrderNumber (const PurchaseOrderNumber_optional& x)
    {
      this->PurchaseOrderNumber_ = x;
    }

    void PreInspectionTraceabilityType::
    PurchaseOrderNumber (::std::unique_ptr< PurchaseOrderNumber_type > x)
    {
      this->PurchaseOrderNumber_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::OrderNumber_optional& PreInspectionTraceabilityType::
    OrderNumber () const
    {
      return this->OrderNumber_;
    }

    PreInspectionTraceabilityType::OrderNumber_optional& PreInspectionTraceabilityType::
    OrderNumber ()
    {
      return this->OrderNumber_;
    }

    void PreInspectionTraceabilityType::
    OrderNumber (const OrderNumber_type& x)
    {
      this->OrderNumber_.set (x);
    }

    void PreInspectionTraceabilityType::
    OrderNumber (const OrderNumber_optional& x)
    {
      this->OrderNumber_ = x;
    }

    void PreInspectionTraceabilityType::
    OrderNumber (::std::unique_ptr< OrderNumber_type > x)
    {
      this->OrderNumber_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::AsmPathIds_optional& PreInspectionTraceabilityType::
    AsmPathIds () const
    {
      return this->AsmPathIds_;
    }

    PreInspectionTraceabilityType::AsmPathIds_optional& PreInspectionTraceabilityType::
    AsmPathIds ()
    {
      return this->AsmPathIds_;
    }

    void PreInspectionTraceabilityType::
    AsmPathIds (const AsmPathIds_type& x)
    {
      this->AsmPathIds_.set (x);
    }

    void PreInspectionTraceabilityType::
    AsmPathIds (const AsmPathIds_optional& x)
    {
      this->AsmPathIds_ = x;
    }

    void PreInspectionTraceabilityType::
    AsmPathIds (::std::unique_ptr< AsmPathIds_type > x)
    {
      this->AsmPathIds_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::ReportNumber_optional& PreInspectionTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    PreInspectionTraceabilityType::ReportNumber_optional& PreInspectionTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void PreInspectionTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void PreInspectionTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void PreInspectionTraceabilityType::
    ReportNumber (::std::unique_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::InspectionScope_optional& PreInspectionTraceabilityType::
    InspectionScope () const
    {
      return this->InspectionScope_;
    }

    PreInspectionTraceabilityType::InspectionScope_optional& PreInspectionTraceabilityType::
    InspectionScope ()
    {
      return this->InspectionScope_;
    }

    void PreInspectionTraceabilityType::
    InspectionScope (const InspectionScope_type& x)
    {
      this->InspectionScope_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionScope (const InspectionScope_optional& x)
    {
      this->InspectionScope_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionScope (::std::unique_ptr< InspectionScope_type > x)
    {
      this->InspectionScope_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::InspectionMode_optional& PreInspectionTraceabilityType::
    InspectionMode () const
    {
      return this->InspectionMode_;
    }

    PreInspectionTraceabilityType::InspectionMode_optional& PreInspectionTraceabilityType::
    InspectionMode ()
    {
      return this->InspectionMode_;
    }

    void PreInspectionTraceabilityType::
    InspectionMode (const InspectionMode_type& x)
    {
      this->InspectionMode_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionMode (const InspectionMode_optional& x)
    {
      this->InspectionMode_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionMode (::std::unique_ptr< InspectionMode_type > x)
    {
      this->InspectionMode_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::PartialInspection_optional& PreInspectionTraceabilityType::
    PartialInspection () const
    {
      return this->PartialInspection_;
    }

    PreInspectionTraceabilityType::PartialInspection_optional& PreInspectionTraceabilityType::
    PartialInspection ()
    {
      return this->PartialInspection_;
    }

    void PreInspectionTraceabilityType::
    PartialInspection (const PartialInspection_type& x)
    {
      this->PartialInspection_.set (x);
    }

    void PreInspectionTraceabilityType::
    PartialInspection (const PartialInspection_optional& x)
    {
      this->PartialInspection_ = x;
    }

    void PreInspectionTraceabilityType::
    PartialInspection (::std::unique_ptr< PartialInspection_type > x)
    {
      this->PartialInspection_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::NotableEvents_optional& PreInspectionTraceabilityType::
    NotableEvents () const
    {
      return this->NotableEvents_;
    }

    PreInspectionTraceabilityType::NotableEvents_optional& PreInspectionTraceabilityType::
    NotableEvents ()
    {
      return this->NotableEvents_;
    }

    void PreInspectionTraceabilityType::
    NotableEvents (const NotableEvents_type& x)
    {
      this->NotableEvents_.set (x);
    }

    void PreInspectionTraceabilityType::
    NotableEvents (const NotableEvents_optional& x)
    {
      this->NotableEvents_ = x;
    }

    void PreInspectionTraceabilityType::
    NotableEvents (::std::unique_ptr< NotableEvents_type > x)
    {
      this->NotableEvents_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::InspectionSoftwareItems_optional& PreInspectionTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    PreInspectionTraceabilityType::InspectionSoftwareItems_optional& PreInspectionTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void PreInspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::InspectionProgram_optional& PreInspectionTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    PreInspectionTraceabilityType::InspectionProgram_optional& PreInspectionTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void PreInspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void PreInspectionTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void PreInspectionTraceabilityType::
    InspectionProgram (::std::unique_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::SecurityClassification_optional& PreInspectionTraceabilityType::
    SecurityClassification () const
    {
      return this->SecurityClassification_;
    }

    PreInspectionTraceabilityType::SecurityClassification_optional& PreInspectionTraceabilityType::
    SecurityClassification ()
    {
      return this->SecurityClassification_;
    }

    void PreInspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_type& x)
    {
      this->SecurityClassification_.set (x);
    }

    void PreInspectionTraceabilityType::
    SecurityClassification (const SecurityClassification_optional& x)
    {
      this->SecurityClassification_ = x;
    }

    void PreInspectionTraceabilityType::
    SecurityClassification (::std::unique_ptr< SecurityClassification_type > x)
    {
      this->SecurityClassification_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::PlantLocation_optional& PreInspectionTraceabilityType::
    PlantLocation () const
    {
      return this->PlantLocation_;
    }

    PreInspectionTraceabilityType::PlantLocation_optional& PreInspectionTraceabilityType::
    PlantLocation ()
    {
      return this->PlantLocation_;
    }

    void PreInspectionTraceabilityType::
    PlantLocation (const PlantLocation_type& x)
    {
      this->PlantLocation_.set (x);
    }

    void PreInspectionTraceabilityType::
    PlantLocation (const PlantLocation_optional& x)
    {
      this->PlantLocation_ = x;
    }

    void PreInspectionTraceabilityType::
    PlantLocation (::std::unique_ptr< PlantLocation_type > x)
    {
      this->PlantLocation_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::ReferencedQIFPlanInstance_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance () const
    {
      return this->ReferencedQIFPlanInstance_;
    }

    PreInspectionTraceabilityType::ReferencedQIFPlanInstance_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance ()
    {
      return this->ReferencedQIFPlanInstance_;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x)
    {
      this->ReferencedQIFPlanInstance_.set (x);
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x)
    {
      this->ReferencedQIFPlanInstance_ = x;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlanInstance (::std::unique_ptr< ReferencedQIFPlanInstance_type > x)
    {
      this->ReferencedQIFPlanInstance_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::ReferencedQIFPlan_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlan () const
    {
      return this->ReferencedQIFPlan_;
    }

    PreInspectionTraceabilityType::ReferencedQIFPlan_optional& PreInspectionTraceabilityType::
    ReferencedQIFPlan ()
    {
      return this->ReferencedQIFPlan_;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_type& x)
    {
      this->ReferencedQIFPlan_.set (x);
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlan (const ReferencedQIFPlan_optional& x)
    {
      this->ReferencedQIFPlan_ = x;
    }

    void PreInspectionTraceabilityType::
    ReferencedQIFPlan (::std::unique_ptr< ReferencedQIFPlan_type > x)
    {
      this->ReferencedQIFPlan_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::ReferencedQIFPlan_type& PreInspectionTraceabilityType::
    ReferencedQIFPlan_default_value ()
    {
      return ReferencedQIFPlan_default_value_;
    }

    const PreInspectionTraceabilityType::FormalStandardId_type& PreInspectionTraceabilityType::
    FormalStandardId () const
    {
      return this->FormalStandardId_.get ();
    }

    PreInspectionTraceabilityType::FormalStandardId_type& PreInspectionTraceabilityType::
    FormalStandardId ()
    {
      return this->FormalStandardId_.get ();
    }

    void PreInspectionTraceabilityType::
    FormalStandardId (const FormalStandardId_type& x)
    {
      this->FormalStandardId_.set (x);
    }

    void PreInspectionTraceabilityType::
    FormalStandardId (::std::unique_ptr< FormalStandardId_type > x)
    {
      this->FormalStandardId_.set (std::move (x));
    }

    const PreInspectionTraceabilityType::Attributes_optional& PreInspectionTraceabilityType::
    Attributes () const
    {
      return this->Attributes_;
    }

    PreInspectionTraceabilityType::Attributes_optional& PreInspectionTraceabilityType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void PreInspectionTraceabilityType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void PreInspectionTraceabilityType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void PreInspectionTraceabilityType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }


    // ProductTraceabilityType
    //

    const ProductTraceabilityType::ReportNumber_optional& ProductTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    ProductTraceabilityType::ReportNumber_optional& ProductTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void ProductTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void ProductTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void ProductTraceabilityType::
    ReportNumber (::std::unique_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (std::move (x));
    }

    const ProductTraceabilityType::ManufacturingProcessId_optional& ProductTraceabilityType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    ProductTraceabilityType::ManufacturingProcessId_optional& ProductTraceabilityType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void ProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void ProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void ProductTraceabilityType::
    ManufacturingProcessId (::std::unique_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (std::move (x));
    }

    const ProductTraceabilityType::FixtureId_optional& ProductTraceabilityType::
    FixtureId () const
    {
      return this->FixtureId_;
    }

    ProductTraceabilityType::FixtureId_optional& ProductTraceabilityType::
    FixtureId ()
    {
      return this->FixtureId_;
    }

    void ProductTraceabilityType::
    FixtureId (const FixtureId_type& x)
    {
      this->FixtureId_.set (x);
    }

    void ProductTraceabilityType::
    FixtureId (const FixtureId_optional& x)
    {
      this->FixtureId_ = x;
    }

    void ProductTraceabilityType::
    FixtureId (::std::unique_ptr< FixtureId_type > x)
    {
      this->FixtureId_.set (std::move (x));
    }

    const ProductTraceabilityType::NotableEventIds_optional& ProductTraceabilityType::
    NotableEventIds () const
    {
      return this->NotableEventIds_;
    }

    ProductTraceabilityType::NotableEventIds_optional& ProductTraceabilityType::
    NotableEventIds ()
    {
      return this->NotableEventIds_;
    }

    void ProductTraceabilityType::
    NotableEventIds (const NotableEventIds_type& x)
    {
      this->NotableEventIds_.set (x);
    }

    void ProductTraceabilityType::
    NotableEventIds (const NotableEventIds_optional& x)
    {
      this->NotableEventIds_ = x;
    }

    void ProductTraceabilityType::
    NotableEventIds (::std::unique_ptr< NotableEventIds_type > x)
    {
      this->NotableEventIds_.set (std::move (x));
    }

    const ProductTraceabilityType::InspectionSoftwareItems_optional& ProductTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    ProductTraceabilityType::InspectionSoftwareItems_optional& ProductTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void ProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void ProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void ProductTraceabilityType::
    InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (std::move (x));
    }

    const ProductTraceabilityType::InspectionProgram_optional& ProductTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    ProductTraceabilityType::InspectionProgram_optional& ProductTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void ProductTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void ProductTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void ProductTraceabilityType::
    InspectionProgram (::std::unique_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (std::move (x));
    }

    const ProductTraceabilityType::MeasurementDeviceIds_optional& ProductTraceabilityType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    ProductTraceabilityType::MeasurementDeviceIds_optional& ProductTraceabilityType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void ProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void ProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void ProductTraceabilityType::
    MeasurementDeviceIds (::std::unique_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (std::move (x));
    }

    const ProductTraceabilityType::Attributes_optional& ProductTraceabilityType::
    Attributes () const
    {
      return this->Attributes_;
    }

    ProductTraceabilityType::Attributes_optional& ProductTraceabilityType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void ProductTraceabilityType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void ProductTraceabilityType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void ProductTraceabilityType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }


    // ActualProductTraceabilityType
    //

    const ActualProductTraceabilityType::SampleNumber_optional& ActualProductTraceabilityType::
    SampleNumber () const
    {
      return this->SampleNumber_;
    }

    ActualProductTraceabilityType::SampleNumber_optional& ActualProductTraceabilityType::
    SampleNumber ()
    {
      return this->SampleNumber_;
    }

    void ActualProductTraceabilityType::
    SampleNumber (const SampleNumber_type& x)
    {
      this->SampleNumber_.set (x);
    }

    void ActualProductTraceabilityType::
    SampleNumber (const SampleNumber_optional& x)
    {
      this->SampleNumber_ = x;
    }

    void ActualProductTraceabilityType::
    SampleNumber (::std::unique_ptr< SampleNumber_type > x)
    {
      this->SampleNumber_.set (std::move (x));
    }

    const ActualProductTraceabilityType::LotNumber_optional& ActualProductTraceabilityType::
    LotNumber () const
    {
      return this->LotNumber_;
    }

    ActualProductTraceabilityType::LotNumber_optional& ActualProductTraceabilityType::
    LotNumber ()
    {
      return this->LotNumber_;
    }

    void ActualProductTraceabilityType::
    LotNumber (const LotNumber_type& x)
    {
      this->LotNumber_.set (x);
    }

    void ActualProductTraceabilityType::
    LotNumber (const LotNumber_optional& x)
    {
      this->LotNumber_ = x;
    }

    void ActualProductTraceabilityType::
    LotNumber (::std::unique_ptr< LotNumber_type > x)
    {
      this->LotNumber_.set (std::move (x));
    }

    const ActualProductTraceabilityType::ReportNumber_optional& ActualProductTraceabilityType::
    ReportNumber () const
    {
      return this->ReportNumber_;
    }

    ActualProductTraceabilityType::ReportNumber_optional& ActualProductTraceabilityType::
    ReportNumber ()
    {
      return this->ReportNumber_;
    }

    void ActualProductTraceabilityType::
    ReportNumber (const ReportNumber_type& x)
    {
      this->ReportNumber_.set (x);
    }

    void ActualProductTraceabilityType::
    ReportNumber (const ReportNumber_optional& x)
    {
      this->ReportNumber_ = x;
    }

    void ActualProductTraceabilityType::
    ReportNumber (::std::unique_ptr< ReportNumber_type > x)
    {
      this->ReportNumber_.set (std::move (x));
    }

    const ActualProductTraceabilityType::ManufacturingProcessId_optional& ActualProductTraceabilityType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    ActualProductTraceabilityType::ManufacturingProcessId_optional& ActualProductTraceabilityType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void ActualProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void ActualProductTraceabilityType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void ActualProductTraceabilityType::
    ManufacturingProcessId (::std::unique_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (std::move (x));
    }

    const ActualProductTraceabilityType::FixtureId_optional& ActualProductTraceabilityType::
    FixtureId () const
    {
      return this->FixtureId_;
    }

    ActualProductTraceabilityType::FixtureId_optional& ActualProductTraceabilityType::
    FixtureId ()
    {
      return this->FixtureId_;
    }

    void ActualProductTraceabilityType::
    FixtureId (const FixtureId_type& x)
    {
      this->FixtureId_.set (x);
    }

    void ActualProductTraceabilityType::
    FixtureId (const FixtureId_optional& x)
    {
      this->FixtureId_ = x;
    }

    void ActualProductTraceabilityType::
    FixtureId (::std::unique_ptr< FixtureId_type > x)
    {
      this->FixtureId_.set (std::move (x));
    }

    const ActualProductTraceabilityType::NotableEventIds_optional& ActualProductTraceabilityType::
    NotableEventIds () const
    {
      return this->NotableEventIds_;
    }

    ActualProductTraceabilityType::NotableEventIds_optional& ActualProductTraceabilityType::
    NotableEventIds ()
    {
      return this->NotableEventIds_;
    }

    void ActualProductTraceabilityType::
    NotableEventIds (const NotableEventIds_type& x)
    {
      this->NotableEventIds_.set (x);
    }

    void ActualProductTraceabilityType::
    NotableEventIds (const NotableEventIds_optional& x)
    {
      this->NotableEventIds_ = x;
    }

    void ActualProductTraceabilityType::
    NotableEventIds (::std::unique_ptr< NotableEventIds_type > x)
    {
      this->NotableEventIds_.set (std::move (x));
    }

    const ActualProductTraceabilityType::NotedEventIds_optional& ActualProductTraceabilityType::
    NotedEventIds () const
    {
      return this->NotedEventIds_;
    }

    ActualProductTraceabilityType::NotedEventIds_optional& ActualProductTraceabilityType::
    NotedEventIds ()
    {
      return this->NotedEventIds_;
    }

    void ActualProductTraceabilityType::
    NotedEventIds (const NotedEventIds_type& x)
    {
      this->NotedEventIds_.set (x);
    }

    void ActualProductTraceabilityType::
    NotedEventIds (const NotedEventIds_optional& x)
    {
      this->NotedEventIds_ = x;
    }

    void ActualProductTraceabilityType::
    NotedEventIds (::std::unique_ptr< NotedEventIds_type > x)
    {
      this->NotedEventIds_.set (std::move (x));
    }

    const ActualProductTraceabilityType::InspectionStart_optional& ActualProductTraceabilityType::
    InspectionStart () const
    {
      return this->InspectionStart_;
    }

    ActualProductTraceabilityType::InspectionStart_optional& ActualProductTraceabilityType::
    InspectionStart ()
    {
      return this->InspectionStart_;
    }

    void ActualProductTraceabilityType::
    InspectionStart (const InspectionStart_type& x)
    {
      this->InspectionStart_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionStart (const InspectionStart_optional& x)
    {
      this->InspectionStart_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionStart (::std::unique_ptr< InspectionStart_type > x)
    {
      this->InspectionStart_.set (std::move (x));
    }

    const ActualProductTraceabilityType::InspectionEnd_optional& ActualProductTraceabilityType::
    InspectionEnd () const
    {
      return this->InspectionEnd_;
    }

    ActualProductTraceabilityType::InspectionEnd_optional& ActualProductTraceabilityType::
    InspectionEnd ()
    {
      return this->InspectionEnd_;
    }

    void ActualProductTraceabilityType::
    InspectionEnd (const InspectionEnd_type& x)
    {
      this->InspectionEnd_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionEnd (const InspectionEnd_optional& x)
    {
      this->InspectionEnd_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionEnd (::std::unique_ptr< InspectionEnd_type > x)
    {
      this->InspectionEnd_.set (std::move (x));
    }

    const ActualProductTraceabilityType::InspectionSoftwareItems_optional& ActualProductTraceabilityType::
    InspectionSoftwareItems () const
    {
      return this->InspectionSoftwareItems_;
    }

    ActualProductTraceabilityType::InspectionSoftwareItems_optional& ActualProductTraceabilityType::
    InspectionSoftwareItems ()
    {
      return this->InspectionSoftwareItems_;
    }

    void ActualProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_type& x)
    {
      this->InspectionSoftwareItems_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionSoftwareItems (const InspectionSoftwareItems_optional& x)
    {
      this->InspectionSoftwareItems_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > x)
    {
      this->InspectionSoftwareItems_.set (std::move (x));
    }

    const ActualProductTraceabilityType::InspectionProgram_optional& ActualProductTraceabilityType::
    InspectionProgram () const
    {
      return this->InspectionProgram_;
    }

    ActualProductTraceabilityType::InspectionProgram_optional& ActualProductTraceabilityType::
    InspectionProgram ()
    {
      return this->InspectionProgram_;
    }

    void ActualProductTraceabilityType::
    InspectionProgram (const InspectionProgram_type& x)
    {
      this->InspectionProgram_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionProgram (const InspectionProgram_optional& x)
    {
      this->InspectionProgram_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionProgram (::std::unique_ptr< InspectionProgram_type > x)
    {
      this->InspectionProgram_.set (std::move (x));
    }

    const ActualProductTraceabilityType::InspectionOperator_optional& ActualProductTraceabilityType::
    InspectionOperator () const
    {
      return this->InspectionOperator_;
    }

    ActualProductTraceabilityType::InspectionOperator_optional& ActualProductTraceabilityType::
    InspectionOperator ()
    {
      return this->InspectionOperator_;
    }

    void ActualProductTraceabilityType::
    InspectionOperator (const InspectionOperator_type& x)
    {
      this->InspectionOperator_.set (x);
    }

    void ActualProductTraceabilityType::
    InspectionOperator (const InspectionOperator_optional& x)
    {
      this->InspectionOperator_ = x;
    }

    void ActualProductTraceabilityType::
    InspectionOperator (::std::unique_ptr< InspectionOperator_type > x)
    {
      this->InspectionOperator_.set (std::move (x));
    }

    const ActualProductTraceabilityType::MeasurementDeviceIds_optional& ActualProductTraceabilityType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    ActualProductTraceabilityType::MeasurementDeviceIds_optional& ActualProductTraceabilityType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void ActualProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void ActualProductTraceabilityType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void ActualProductTraceabilityType::
    MeasurementDeviceIds (::std::unique_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (std::move (x));
    }

    const ActualProductTraceabilityType::ProductEnvironments_optional& ActualProductTraceabilityType::
    ProductEnvironments () const
    {
      return this->ProductEnvironments_;
    }

    ActualProductTraceabilityType::ProductEnvironments_optional& ActualProductTraceabilityType::
    ProductEnvironments ()
    {
      return this->ProductEnvironments_;
    }

    void ActualProductTraceabilityType::
    ProductEnvironments (const ProductEnvironments_type& x)
    {
      this->ProductEnvironments_.set (x);
    }

    void ActualProductTraceabilityType::
    ProductEnvironments (const ProductEnvironments_optional& x)
    {
      this->ProductEnvironments_ = x;
    }

    void ActualProductTraceabilityType::
    ProductEnvironments (::std::unique_ptr< ProductEnvironments_type > x)
    {
      this->ProductEnvironments_.set (std::move (x));
    }

    const ActualProductTraceabilityType::Errors_optional& ActualProductTraceabilityType::
    Errors () const
    {
      return this->Errors_;
    }

    ActualProductTraceabilityType::Errors_optional& ActualProductTraceabilityType::
    Errors ()
    {
      return this->Errors_;
    }

    void ActualProductTraceabilityType::
    Errors (const Errors_type& x)
    {
      this->Errors_.set (x);
    }

    void ActualProductTraceabilityType::
    Errors (const Errors_optional& x)
    {
      this->Errors_ = x;
    }

    void ActualProductTraceabilityType::
    Errors (::std::unique_ptr< Errors_type > x)
    {
      this->Errors_.set (std::move (x));
    }

    const ActualProductTraceabilityType::Attributes_optional& ActualProductTraceabilityType::
    Attributes () const
    {
      return this->Attributes_;
    }

    ActualProductTraceabilityType::Attributes_optional& ActualProductTraceabilityType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void ActualProductTraceabilityType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void ActualProductTraceabilityType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void ActualProductTraceabilityType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }


    // ProcessParameterType
    //

    const ProcessParameterType::ParameterType_type& ProcessParameterType::
    ParameterType () const
    {
      return this->ParameterType_.get ();
    }

    ProcessParameterType::ParameterType_type& ProcessParameterType::
    ParameterType ()
    {
      return this->ParameterType_.get ();
    }

    void ProcessParameterType::
    ParameterType (const ParameterType_type& x)
    {
      this->ParameterType_.set (x);
    }

    void ProcessParameterType::
    ParameterType (::std::unique_ptr< ParameterType_type > x)
    {
      this->ParameterType_.set (std::move (x));
    }

    const ProcessParameterType::ParameterValue_type& ProcessParameterType::
    ParameterValue () const
    {
      return this->ParameterValue_.get ();
    }

    ProcessParameterType::ParameterValue_type& ProcessParameterType::
    ParameterValue ()
    {
      return this->ParameterValue_.get ();
    }

    void ProcessParameterType::
    ParameterValue (const ParameterValue_type& x)
    {
      this->ParameterValue_.set (x);
    }

    void ProcessParameterType::
    ParameterValue (::std::unique_ptr< ParameterValue_type > x)
    {
      this->ParameterValue_.set (std::move (x));
    }


    // ProcessParametersType
    //

    const ProcessParametersType::Parameter_sequence& ProcessParametersType::
    Parameter () const
    {
      return this->Parameter_;
    }

    ProcessParametersType::Parameter_sequence& ProcessParametersType::
    Parameter ()
    {
      return this->Parameter_;
    }

    void ProcessParametersType::
    Parameter (const Parameter_sequence& s)
    {
      this->Parameter_ = s;
    }

    const ProcessParametersType::n_type& ProcessParametersType::
    n () const
    {
      return this->n_.get ();
    }

    ProcessParametersType::n_type& ProcessParametersType::
    n ()
    {
      return this->n_.get ();
    }

    void ProcessParametersType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ProcessParametersType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ManufacturingProcessTraceabilityType
    //

    const ManufacturingProcessTraceabilityType::Attributes_optional& ManufacturingProcessTraceabilityType::
    Attributes () const
    {
      return this->Attributes_;
    }

    ManufacturingProcessTraceabilityType::Attributes_optional& ManufacturingProcessTraceabilityType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void ManufacturingProcessTraceabilityType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::Description_optional& ManufacturingProcessTraceabilityType::
    Description () const
    {
      return this->Description_;
    }

    ManufacturingProcessTraceabilityType::Description_optional& ManufacturingProcessTraceabilityType::
    Description ()
    {
      return this->Description_;
    }

    void ManufacturingProcessTraceabilityType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Description (::std::unique_ptr< Description_type > x)
    {
      this->Description_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::Job_optional& ManufacturingProcessTraceabilityType::
    Job () const
    {
      return this->Job_;
    }

    ManufacturingProcessTraceabilityType::Job_optional& ManufacturingProcessTraceabilityType::
    Job ()
    {
      return this->Job_;
    }

    void ManufacturingProcessTraceabilityType::
    Job (const Job_type& x)
    {
      this->Job_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Job (const Job_optional& x)
    {
      this->Job_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Job (::std::unique_ptr< Job_type > x)
    {
      this->Job_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::Revision_optional& ManufacturingProcessTraceabilityType::
    Revision () const
    {
      return this->Revision_;
    }

    ManufacturingProcessTraceabilityType::Revision_optional& ManufacturingProcessTraceabilityType::
    Revision ()
    {
      return this->Revision_;
    }

    void ManufacturingProcessTraceabilityType::
    Revision (const Revision_type& x)
    {
      this->Revision_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Revision (const Revision_optional& x)
    {
      this->Revision_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Revision (::std::unique_ptr< Revision_type > x)
    {
      this->Revision_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::PreviousOperationId_optional& ManufacturingProcessTraceabilityType::
    PreviousOperationId () const
    {
      return this->PreviousOperationId_;
    }

    ManufacturingProcessTraceabilityType::PreviousOperationId_optional& ManufacturingProcessTraceabilityType::
    PreviousOperationId ()
    {
      return this->PreviousOperationId_;
    }

    void ManufacturingProcessTraceabilityType::
    PreviousOperationId (const PreviousOperationId_type& x)
    {
      this->PreviousOperationId_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    PreviousOperationId (const PreviousOperationId_optional& x)
    {
      this->PreviousOperationId_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    PreviousOperationId (::std::unique_ptr< PreviousOperationId_type > x)
    {
      this->PreviousOperationId_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::Path_optional& ManufacturingProcessTraceabilityType::
    Path () const
    {
      return this->Path_;
    }

    ManufacturingProcessTraceabilityType::Path_optional& ManufacturingProcessTraceabilityType::
    Path ()
    {
      return this->Path_;
    }

    void ManufacturingProcessTraceabilityType::
    Path (const Path_type& x)
    {
      this->Path_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Path (const Path_optional& x)
    {
      this->Path_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Path (::std::unique_ptr< Path_type > x)
    {
      this->Path_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::MachineManufacturerName_optional& ManufacturingProcessTraceabilityType::
    MachineManufacturerName () const
    {
      return this->MachineManufacturerName_;
    }

    ManufacturingProcessTraceabilityType::MachineManufacturerName_optional& ManufacturingProcessTraceabilityType::
    MachineManufacturerName ()
    {
      return this->MachineManufacturerName_;
    }

    void ManufacturingProcessTraceabilityType::
    MachineManufacturerName (const MachineManufacturerName_type& x)
    {
      this->MachineManufacturerName_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    MachineManufacturerName (const MachineManufacturerName_optional& x)
    {
      this->MachineManufacturerName_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    MachineManufacturerName (::std::unique_ptr< MachineManufacturerName_type > x)
    {
      this->MachineManufacturerName_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::MachineIdentifier_optional& ManufacturingProcessTraceabilityType::
    MachineIdentifier () const
    {
      return this->MachineIdentifier_;
    }

    ManufacturingProcessTraceabilityType::MachineIdentifier_optional& ManufacturingProcessTraceabilityType::
    MachineIdentifier ()
    {
      return this->MachineIdentifier_;
    }

    void ManufacturingProcessTraceabilityType::
    MachineIdentifier (const MachineIdentifier_type& x)
    {
      this->MachineIdentifier_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    MachineIdentifier (const MachineIdentifier_optional& x)
    {
      this->MachineIdentifier_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    MachineIdentifier (::std::unique_ptr< MachineIdentifier_type > x)
    {
      this->MachineIdentifier_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::OperatorIdentifier_optional& ManufacturingProcessTraceabilityType::
    OperatorIdentifier () const
    {
      return this->OperatorIdentifier_;
    }

    ManufacturingProcessTraceabilityType::OperatorIdentifier_optional& ManufacturingProcessTraceabilityType::
    OperatorIdentifier ()
    {
      return this->OperatorIdentifier_;
    }

    void ManufacturingProcessTraceabilityType::
    OperatorIdentifier (const OperatorIdentifier_type& x)
    {
      this->OperatorIdentifier_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    OperatorIdentifier (const OperatorIdentifier_optional& x)
    {
      this->OperatorIdentifier_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    OperatorIdentifier (::std::unique_ptr< OperatorIdentifier_type > x)
    {
      this->OperatorIdentifier_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::Shift_optional& ManufacturingProcessTraceabilityType::
    Shift () const
    {
      return this->Shift_;
    }

    ManufacturingProcessTraceabilityType::Shift_optional& ManufacturingProcessTraceabilityType::
    Shift ()
    {
      return this->Shift_;
    }

    void ManufacturingProcessTraceabilityType::
    Shift (const Shift_type& x)
    {
      this->Shift_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Shift (const Shift_optional& x)
    {
      this->Shift_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Shift (::std::unique_ptr< Shift_type > x)
    {
      this->Shift_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::Department_optional& ManufacturingProcessTraceabilityType::
    Department () const
    {
      return this->Department_;
    }

    ManufacturingProcessTraceabilityType::Department_optional& ManufacturingProcessTraceabilityType::
    Department ()
    {
      return this->Department_;
    }

    void ManufacturingProcessTraceabilityType::
    Department (const Department_type& x)
    {
      this->Department_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    Department (const Department_optional& x)
    {
      this->Department_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    Department (::std::unique_ptr< Department_type > x)
    {
      this->Department_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::ResponsibilityIdentifier_optional& ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier () const
    {
      return this->ResponsibilityIdentifier_;
    }

    ManufacturingProcessTraceabilityType::ResponsibilityIdentifier_optional& ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier ()
    {
      return this->ResponsibilityIdentifier_;
    }

    void ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier (const ResponsibilityIdentifier_type& x)
    {
      this->ResponsibilityIdentifier_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier (const ResponsibilityIdentifier_optional& x)
    {
      this->ResponsibilityIdentifier_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    ResponsibilityIdentifier (::std::unique_ptr< ResponsibilityIdentifier_type > x)
    {
      this->ResponsibilityIdentifier_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::PlantSector_optional& ManufacturingProcessTraceabilityType::
    PlantSector () const
    {
      return this->PlantSector_;
    }

    ManufacturingProcessTraceabilityType::PlantSector_optional& ManufacturingProcessTraceabilityType::
    PlantSector ()
    {
      return this->PlantSector_;
    }

    void ManufacturingProcessTraceabilityType::
    PlantSector (const PlantSector_type& x)
    {
      this->PlantSector_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    PlantSector (const PlantSector_optional& x)
    {
      this->PlantSector_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    PlantSector (::std::unique_ptr< PlantSector_type > x)
    {
      this->PlantSector_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::ProcessParameters_optional& ManufacturingProcessTraceabilityType::
    ProcessParameters () const
    {
      return this->ProcessParameters_;
    }

    ManufacturingProcessTraceabilityType::ProcessParameters_optional& ManufacturingProcessTraceabilityType::
    ProcessParameters ()
    {
      return this->ProcessParameters_;
    }

    void ManufacturingProcessTraceabilityType::
    ProcessParameters (const ProcessParameters_type& x)
    {
      this->ProcessParameters_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    ProcessParameters (const ProcessParameters_optional& x)
    {
      this->ProcessParameters_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    ProcessParameters (::std::unique_ptr< ProcessParameters_type > x)
    {
      this->ProcessParameters_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::AssociatedTraceabilityId_optional& ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId () const
    {
      return this->AssociatedTraceabilityId_;
    }

    ManufacturingProcessTraceabilityType::AssociatedTraceabilityId_optional& ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId ()
    {
      return this->AssociatedTraceabilityId_;
    }

    void ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId (const AssociatedTraceabilityId_type& x)
    {
      this->AssociatedTraceabilityId_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId (const AssociatedTraceabilityId_optional& x)
    {
      this->AssociatedTraceabilityId_ = x;
    }

    void ManufacturingProcessTraceabilityType::
    AssociatedTraceabilityId (::std::unique_ptr< AssociatedTraceabilityId_type > x)
    {
      this->AssociatedTraceabilityId_.set (std::move (x));
    }

    const ManufacturingProcessTraceabilityType::id_type& ManufacturingProcessTraceabilityType::
    id () const
    {
      return this->id_.get ();
    }

    ManufacturingProcessTraceabilityType::id_type& ManufacturingProcessTraceabilityType::
    id ()
    {
      return this->id_.get ();
    }

    void ManufacturingProcessTraceabilityType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void ManufacturingProcessTraceabilityType::
    id (::std::unique_ptr< id_type > x)
    {
      this->id_.set (std::move (x));
    }


    // ManufacturingProcessTraceabilitiesType
    //

    const ManufacturingProcessTraceabilitiesType::ManufacturingProcessTraceability_sequence& ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceability () const
    {
      return this->ManufacturingProcessTraceability_;
    }

    ManufacturingProcessTraceabilitiesType::ManufacturingProcessTraceability_sequence& ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceability ()
    {
      return this->ManufacturingProcessTraceability_;
    }

    void ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceability (const ManufacturingProcessTraceability_sequence& s)
    {
      this->ManufacturingProcessTraceability_ = s;
    }

    const ManufacturingProcessTraceabilitiesType::n_type& ManufacturingProcessTraceabilitiesType::
    n () const
    {
      return this->n_.get ();
    }

    ManufacturingProcessTraceabilitiesType::n_type& ManufacturingProcessTraceabilitiesType::
    n ()
    {
      return this->n_.get ();
    }

    void ManufacturingProcessTraceabilitiesType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ManufacturingProcessTraceabilitiesType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ErrorsType
    //

    const ErrorsType::Error_sequence& ErrorsType::
    Error () const
    {
      return this->Error_;
    }

    ErrorsType::Error_sequence& ErrorsType::
    Error ()
    {
      return this->Error_;
    }

    void ErrorsType::
    Error (const Error_sequence& s)
    {
      this->Error_ = s;
    }

    const ErrorsType::n_type& ErrorsType::
    n () const
    {
      return this->n_.get ();
    }

    ErrorsType::n_type& ErrorsType::
    n ()
    {
      return this->n_.get ();
    }

    void ErrorsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ErrorsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // PartialInspectionType
    //

    const PartialInspectionType::BaselineProductNumber_type& PartialInspectionType::
    BaselineProductNumber () const
    {
      return this->BaselineProductNumber_.get ();
    }

    PartialInspectionType::BaselineProductNumber_type& PartialInspectionType::
    BaselineProductNumber ()
    {
      return this->BaselineProductNumber_.get ();
    }

    void PartialInspectionType::
    BaselineProductNumber (const BaselineProductNumber_type& x)
    {
      this->BaselineProductNumber_.set (x);
    }

    void PartialInspectionType::
    BaselineProductNumber (::std::unique_ptr< BaselineProductNumber_type > x)
    {
      this->BaselineProductNumber_.set (std::move (x));
    }

    const PartialInspectionType::BaselineProductVersion_optional& PartialInspectionType::
    BaselineProductVersion () const
    {
      return this->BaselineProductVersion_;
    }

    PartialInspectionType::BaselineProductVersion_optional& PartialInspectionType::
    BaselineProductVersion ()
    {
      return this->BaselineProductVersion_;
    }

    void PartialInspectionType::
    BaselineProductVersion (const BaselineProductVersion_type& x)
    {
      this->BaselineProductVersion_.set (x);
    }

    void PartialInspectionType::
    BaselineProductVersion (const BaselineProductVersion_optional& x)
    {
      this->BaselineProductVersion_ = x;
    }

    void PartialInspectionType::
    BaselineProductVersion (::std::unique_ptr< BaselineProductVersion_type > x)
    {
      this->BaselineProductVersion_.set (std::move (x));
    }

    const PartialInspectionType::ReasonForPartialInspection_type& PartialInspectionType::
    ReasonForPartialInspection () const
    {
      return this->ReasonForPartialInspection_.get ();
    }

    PartialInspectionType::ReasonForPartialInspection_type& PartialInspectionType::
    ReasonForPartialInspection ()
    {
      return this->ReasonForPartialInspection_.get ();
    }

    void PartialInspectionType::
    ReasonForPartialInspection (const ReasonForPartialInspection_type& x)
    {
      this->ReasonForPartialInspection_.set (x);
    }

    void PartialInspectionType::
    ReasonForPartialInspection (::std::unique_ptr< ReasonForPartialInspection_type > x)
    {
      this->ReasonForPartialInspection_.set (std::move (x));
    }


    // TimeDescriptionEnumType
    //

    TimeDescriptionEnumType::
    TimeDescriptionEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_TimeDescriptionEnumType_literals_[v])
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const TimeDescriptionEnumType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    TimeDescriptionEnumType& TimeDescriptionEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_TimeDescriptionEnumType_literals_[v]);

      return *this;
    }


    // TimeDescriptionType
    //

    const TimeDescriptionType::TimeDescriptionEnum_optional& TimeDescriptionType::
    TimeDescriptionEnum () const
    {
      return this->TimeDescriptionEnum_;
    }

    TimeDescriptionType::TimeDescriptionEnum_optional& TimeDescriptionType::
    TimeDescriptionEnum ()
    {
      return this->TimeDescriptionEnum_;
    }

    void TimeDescriptionType::
    TimeDescriptionEnum (const TimeDescriptionEnum_type& x)
    {
      this->TimeDescriptionEnum_.set (x);
    }

    void TimeDescriptionType::
    TimeDescriptionEnum (const TimeDescriptionEnum_optional& x)
    {
      this->TimeDescriptionEnum_ = x;
    }

    void TimeDescriptionType::
    TimeDescriptionEnum (::std::unique_ptr< TimeDescriptionEnum_type > x)
    {
      this->TimeDescriptionEnum_.set (std::move (x));
    }

    const TimeDescriptionType::OtherTimeDescription_optional& TimeDescriptionType::
    OtherTimeDescription () const
    {
      return this->OtherTimeDescription_;
    }

    TimeDescriptionType::OtherTimeDescription_optional& TimeDescriptionType::
    OtherTimeDescription ()
    {
      return this->OtherTimeDescription_;
    }

    void TimeDescriptionType::
    OtherTimeDescription (const OtherTimeDescription_type& x)
    {
      this->OtherTimeDescription_.set (x);
    }

    void TimeDescriptionType::
    OtherTimeDescription (const OtherTimeDescription_optional& x)
    {
      this->OtherTimeDescription_ = x;
    }

    void TimeDescriptionType::
    OtherTimeDescription (::std::unique_ptr< OtherTimeDescription_type > x)
    {
      this->OtherTimeDescription_.set (std::move (x));
    }


    // InspectionModeEnumType
    //

    InspectionModeEnumType::
    InspectionModeEnumType ()
    : ::xml_schema::string ()
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (value v)
    : ::xml_schema::string (_xsd_InspectionModeEnumType_literals_[v])
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const InspectionModeEnumType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    InspectionModeEnumType& InspectionModeEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_InspectionModeEnumType_literals_[v]);

      return *this;
    }


    // InspectionScopeEnumType
    //

    InspectionScopeEnumType::
    InspectionScopeEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_InspectionScopeEnumType_literals_[v])
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const InspectionScopeEnumType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    InspectionScopeEnumType& InspectionScopeEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_InspectionScopeEnumType_literals_[v]);

      return *this;
    }


    // ValidationCountsType
    //

    const ValidationCountsType::ExternalQIFReferencesCount_optional& ValidationCountsType::
    ExternalQIFReferencesCount () const
    {
      return this->ExternalQIFReferencesCount_;
    }

    ValidationCountsType::ExternalQIFReferencesCount_optional& ValidationCountsType::
    ExternalQIFReferencesCount ()
    {
      return this->ExternalQIFReferencesCount_;
    }

    void ValidationCountsType::
    ExternalQIFReferencesCount (const ExternalQIFReferencesCount_type& x)
    {
      this->ExternalQIFReferencesCount_.set (x);
    }

    void ValidationCountsType::
    ExternalQIFReferencesCount (const ExternalQIFReferencesCount_optional& x)
    {
      this->ExternalQIFReferencesCount_ = x;
    }

    const ValidationCountsType::DatumDefinitionsCount_optional& ValidationCountsType::
    DatumDefinitionsCount () const
    {
      return this->DatumDefinitionsCount_;
    }

    ValidationCountsType::DatumDefinitionsCount_optional& ValidationCountsType::
    DatumDefinitionsCount ()
    {
      return this->DatumDefinitionsCount_;
    }

    void ValidationCountsType::
    DatumDefinitionsCount (const DatumDefinitionsCount_type& x)
    {
      this->DatumDefinitionsCount_.set (x);
    }

    void ValidationCountsType::
    DatumDefinitionsCount (const DatumDefinitionsCount_optional& x)
    {
      this->DatumDefinitionsCount_ = x;
    }

    const ValidationCountsType::DatumTargetDefinitionsCount_optional& ValidationCountsType::
    DatumTargetDefinitionsCount () const
    {
      return this->DatumTargetDefinitionsCount_;
    }

    ValidationCountsType::DatumTargetDefinitionsCount_optional& ValidationCountsType::
    DatumTargetDefinitionsCount ()
    {
      return this->DatumTargetDefinitionsCount_;
    }

    void ValidationCountsType::
    DatumTargetDefinitionsCount (const DatumTargetDefinitionsCount_type& x)
    {
      this->DatumTargetDefinitionsCount_.set (x);
    }

    void ValidationCountsType::
    DatumTargetDefinitionsCount (const DatumTargetDefinitionsCount_optional& x)
    {
      this->DatumTargetDefinitionsCount_ = x;
    }

    const ValidationCountsType::TransformsCount_optional& ValidationCountsType::
    TransformsCount () const
    {
      return this->TransformsCount_;
    }

    ValidationCountsType::TransformsCount_optional& ValidationCountsType::
    TransformsCount ()
    {
      return this->TransformsCount_;
    }

    void ValidationCountsType::
    TransformsCount (const TransformsCount_type& x)
    {
      this->TransformsCount_.set (x);
    }

    void ValidationCountsType::
    TransformsCount (const TransformsCount_optional& x)
    {
      this->TransformsCount_ = x;
    }

    const ValidationCountsType::CoordinateSystemsCount_optional& ValidationCountsType::
    CoordinateSystemsCount () const
    {
      return this->CoordinateSystemsCount_;
    }

    ValidationCountsType::CoordinateSystemsCount_optional& ValidationCountsType::
    CoordinateSystemsCount ()
    {
      return this->CoordinateSystemsCount_;
    }

    void ValidationCountsType::
    CoordinateSystemsCount (const CoordinateSystemsCount_type& x)
    {
      this->CoordinateSystemsCount_.set (x);
    }

    void ValidationCountsType::
    CoordinateSystemsCount (const CoordinateSystemsCount_optional& x)
    {
      this->CoordinateSystemsCount_ = x;
    }

    const ValidationCountsType::DatumReferenceFramesCount_optional& ValidationCountsType::
    DatumReferenceFramesCount () const
    {
      return this->DatumReferenceFramesCount_;
    }

    ValidationCountsType::DatumReferenceFramesCount_optional& ValidationCountsType::
    DatumReferenceFramesCount ()
    {
      return this->DatumReferenceFramesCount_;
    }

    void ValidationCountsType::
    DatumReferenceFramesCount (const DatumReferenceFramesCount_type& x)
    {
      this->DatumReferenceFramesCount_.set (x);
    }

    void ValidationCountsType::
    DatumReferenceFramesCount (const DatumReferenceFramesCount_optional& x)
    {
      this->DatumReferenceFramesCount_ = x;
    }

    const ValidationCountsType::MeasurementResourcesCount_optional& ValidationCountsType::
    MeasurementResourcesCount () const
    {
      return this->MeasurementResourcesCount_;
    }

    ValidationCountsType::MeasurementResourcesCount_optional& ValidationCountsType::
    MeasurementResourcesCount ()
    {
      return this->MeasurementResourcesCount_;
    }

    void ValidationCountsType::
    MeasurementResourcesCount (const MeasurementResourcesCount_type& x)
    {
      this->MeasurementResourcesCount_.set (x);
    }

    void ValidationCountsType::
    MeasurementResourcesCount (const MeasurementResourcesCount_optional& x)
    {
      this->MeasurementResourcesCount_ = x;
    }

    const ValidationCountsType::ThreadSpecificationsCount_optional& ValidationCountsType::
    ThreadSpecificationsCount () const
    {
      return this->ThreadSpecificationsCount_;
    }

    ValidationCountsType::ThreadSpecificationsCount_optional& ValidationCountsType::
    ThreadSpecificationsCount ()
    {
      return this->ThreadSpecificationsCount_;
    }

    void ValidationCountsType::
    ThreadSpecificationsCount (const ThreadSpecificationsCount_type& x)
    {
      this->ThreadSpecificationsCount_.set (x);
    }

    void ValidationCountsType::
    ThreadSpecificationsCount (const ThreadSpecificationsCount_optional& x)
    {
      this->ThreadSpecificationsCount_ = x;
    }

    const ValidationCountsType::ProductGeometrySetCount_optional& ValidationCountsType::
    ProductGeometrySetCount () const
    {
      return this->ProductGeometrySetCount_;
    }

    ValidationCountsType::ProductGeometrySetCount_optional& ValidationCountsType::
    ProductGeometrySetCount ()
    {
      return this->ProductGeometrySetCount_;
    }

    void ValidationCountsType::
    ProductGeometrySetCount (const ProductGeometrySetCount_type& x)
    {
      this->ProductGeometrySetCount_.set (x);
    }

    void ValidationCountsType::
    ProductGeometrySetCount (const ProductGeometrySetCount_optional& x)
    {
      this->ProductGeometrySetCount_ = x;
    }

    const ValidationCountsType::ProductTopologySetCount_optional& ValidationCountsType::
    ProductTopologySetCount () const
    {
      return this->ProductTopologySetCount_;
    }

    ValidationCountsType::ProductTopologySetCount_optional& ValidationCountsType::
    ProductTopologySetCount ()
    {
      return this->ProductTopologySetCount_;
    }

    void ValidationCountsType::
    ProductTopologySetCount (const ProductTopologySetCount_type& x)
    {
      this->ProductTopologySetCount_.set (x);
    }

    void ValidationCountsType::
    ProductTopologySetCount (const ProductTopologySetCount_optional& x)
    {
      this->ProductTopologySetCount_ = x;
    }

    const ValidationCountsType::ProductNoteSetCount_optional& ValidationCountsType::
    ProductNoteSetCount () const
    {
      return this->ProductNoteSetCount_;
    }

    ValidationCountsType::ProductNoteSetCount_optional& ValidationCountsType::
    ProductNoteSetCount ()
    {
      return this->ProductNoteSetCount_;
    }

    void ValidationCountsType::
    ProductNoteSetCount (const ProductNoteSetCount_type& x)
    {
      this->ProductNoteSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductNoteSetCount (const ProductNoteSetCount_optional& x)
    {
      this->ProductNoteSetCount_ = x;
    }

    const ValidationCountsType::ProductNoteFlagSetCount_optional& ValidationCountsType::
    ProductNoteFlagSetCount () const
    {
      return this->ProductNoteFlagSetCount_;
    }

    ValidationCountsType::ProductNoteFlagSetCount_optional& ValidationCountsType::
    ProductNoteFlagSetCount ()
    {
      return this->ProductNoteFlagSetCount_;
    }

    void ValidationCountsType::
    ProductNoteFlagSetCount (const ProductNoteFlagSetCount_type& x)
    {
      this->ProductNoteFlagSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductNoteFlagSetCount (const ProductNoteFlagSetCount_optional& x)
    {
      this->ProductNoteFlagSetCount_ = x;
    }

    const ValidationCountsType::ProductPartNoteSetCount_optional& ValidationCountsType::
    ProductPartNoteSetCount () const
    {
      return this->ProductPartNoteSetCount_;
    }

    ValidationCountsType::ProductPartNoteSetCount_optional& ValidationCountsType::
    ProductPartNoteSetCount ()
    {
      return this->ProductPartNoteSetCount_;
    }

    void ValidationCountsType::
    ProductPartNoteSetCount (const ProductPartNoteSetCount_type& x)
    {
      this->ProductPartNoteSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductPartNoteSetCount (const ProductPartNoteSetCount_optional& x)
    {
      this->ProductPartNoteSetCount_ = x;
    }

    const ValidationCountsType::ProductViewSetCount_optional& ValidationCountsType::
    ProductViewSetCount () const
    {
      return this->ProductViewSetCount_;
    }

    ValidationCountsType::ProductViewSetCount_optional& ValidationCountsType::
    ProductViewSetCount ()
    {
      return this->ProductViewSetCount_;
    }

    void ValidationCountsType::
    ProductViewSetCount (const ProductViewSetCount_type& x)
    {
      this->ProductViewSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductViewSetCount (const ProductViewSetCount_optional& x)
    {
      this->ProductViewSetCount_ = x;
    }

    const ValidationCountsType::ProductLayerSetCount_optional& ValidationCountsType::
    ProductLayerSetCount () const
    {
      return this->ProductLayerSetCount_;
    }

    ValidationCountsType::ProductLayerSetCount_optional& ValidationCountsType::
    ProductLayerSetCount ()
    {
      return this->ProductLayerSetCount_;
    }

    void ValidationCountsType::
    ProductLayerSetCount (const ProductLayerSetCount_type& x)
    {
      this->ProductLayerSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductLayerSetCount (const ProductLayerSetCount_optional& x)
    {
      this->ProductLayerSetCount_ = x;
    }

    const ValidationCountsType::ProductCoordinateSystemSetCount_optional& ValidationCountsType::
    ProductCoordinateSystemSetCount () const
    {
      return this->ProductCoordinateSystemSetCount_;
    }

    ValidationCountsType::ProductCoordinateSystemSetCount_optional& ValidationCountsType::
    ProductCoordinateSystemSetCount ()
    {
      return this->ProductCoordinateSystemSetCount_;
    }

    void ValidationCountsType::
    ProductCoordinateSystemSetCount (const ProductCoordinateSystemSetCount_type& x)
    {
      this->ProductCoordinateSystemSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductCoordinateSystemSetCount (const ProductCoordinateSystemSetCount_optional& x)
    {
      this->ProductCoordinateSystemSetCount_ = x;
    }

    const ValidationCountsType::ProductVisualizationSetCount_optional& ValidationCountsType::
    ProductVisualizationSetCount () const
    {
      return this->ProductVisualizationSetCount_;
    }

    ValidationCountsType::ProductVisualizationSetCount_optional& ValidationCountsType::
    ProductVisualizationSetCount ()
    {
      return this->ProductVisualizationSetCount_;
    }

    void ValidationCountsType::
    ProductVisualizationSetCount (const ProductVisualizationSetCount_type& x)
    {
      this->ProductVisualizationSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductVisualizationSetCount (const ProductVisualizationSetCount_optional& x)
    {
      this->ProductVisualizationSetCount_ = x;
    }

    const ValidationCountsType::ProductAuxiliarySetCount_optional& ValidationCountsType::
    ProductAuxiliarySetCount () const
    {
      return this->ProductAuxiliarySetCount_;
    }

    ValidationCountsType::ProductAuxiliarySetCount_optional& ValidationCountsType::
    ProductAuxiliarySetCount ()
    {
      return this->ProductAuxiliarySetCount_;
    }

    void ValidationCountsType::
    ProductAuxiliarySetCount (const ProductAuxiliarySetCount_type& x)
    {
      this->ProductAuxiliarySetCount_.set (x);
    }

    void ValidationCountsType::
    ProductAuxiliarySetCount (const ProductAuxiliarySetCount_optional& x)
    {
      this->ProductAuxiliarySetCount_ = x;
    }

    const ValidationCountsType::ProductPartSetCount_optional& ValidationCountsType::
    ProductPartSetCount () const
    {
      return this->ProductPartSetCount_;
    }

    ValidationCountsType::ProductPartSetCount_optional& ValidationCountsType::
    ProductPartSetCount ()
    {
      return this->ProductPartSetCount_;
    }

    void ValidationCountsType::
    ProductPartSetCount (const ProductPartSetCount_type& x)
    {
      this->ProductPartSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductPartSetCount (const ProductPartSetCount_optional& x)
    {
      this->ProductPartSetCount_ = x;
    }

    const ValidationCountsType::ProductAssemblySetCount_optional& ValidationCountsType::
    ProductAssemblySetCount () const
    {
      return this->ProductAssemblySetCount_;
    }

    ValidationCountsType::ProductAssemblySetCount_optional& ValidationCountsType::
    ProductAssemblySetCount ()
    {
      return this->ProductAssemblySetCount_;
    }

    void ValidationCountsType::
    ProductAssemblySetCount (const ProductAssemblySetCount_type& x)
    {
      this->ProductAssemblySetCount_.set (x);
    }

    void ValidationCountsType::
    ProductAssemblySetCount (const ProductAssemblySetCount_optional& x)
    {
      this->ProductAssemblySetCount_ = x;
    }

    const ValidationCountsType::ProductComponentSetCount_optional& ValidationCountsType::
    ProductComponentSetCount () const
    {
      return this->ProductComponentSetCount_;
    }

    ValidationCountsType::ProductComponentSetCount_optional& ValidationCountsType::
    ProductComponentSetCount ()
    {
      return this->ProductComponentSetCount_;
    }

    void ValidationCountsType::
    ProductComponentSetCount (const ProductComponentSetCount_type& x)
    {
      this->ProductComponentSetCount_.set (x);
    }

    void ValidationCountsType::
    ProductComponentSetCount (const ProductComponentSetCount_optional& x)
    {
      this->ProductComponentSetCount_ = x;
    }

    const ValidationCountsType::ProductAsmPathsCount_optional& ValidationCountsType::
    ProductAsmPathsCount () const
    {
      return this->ProductAsmPathsCount_;
    }

    ValidationCountsType::ProductAsmPathsCount_optional& ValidationCountsType::
    ProductAsmPathsCount ()
    {
      return this->ProductAsmPathsCount_;
    }

    void ValidationCountsType::
    ProductAsmPathsCount (const ProductAsmPathsCount_type& x)
    {
      this->ProductAsmPathsCount_.set (x);
    }

    void ValidationCountsType::
    ProductAsmPathsCount (const ProductAsmPathsCount_optional& x)
    {
      this->ProductAsmPathsCount_ = x;
    }

    const ValidationCountsType::FeatureDefinitionsCount_optional& ValidationCountsType::
    FeatureDefinitionsCount () const
    {
      return this->FeatureDefinitionsCount_;
    }

    ValidationCountsType::FeatureDefinitionsCount_optional& ValidationCountsType::
    FeatureDefinitionsCount ()
    {
      return this->FeatureDefinitionsCount_;
    }

    void ValidationCountsType::
    FeatureDefinitionsCount (const FeatureDefinitionsCount_type& x)
    {
      this->FeatureDefinitionsCount_.set (x);
    }

    void ValidationCountsType::
    FeatureDefinitionsCount (const FeatureDefinitionsCount_optional& x)
    {
      this->FeatureDefinitionsCount_ = x;
    }

    const ValidationCountsType::FeatureNominalsCount_optional& ValidationCountsType::
    FeatureNominalsCount () const
    {
      return this->FeatureNominalsCount_;
    }

    ValidationCountsType::FeatureNominalsCount_optional& ValidationCountsType::
    FeatureNominalsCount ()
    {
      return this->FeatureNominalsCount_;
    }

    void ValidationCountsType::
    FeatureNominalsCount (const FeatureNominalsCount_type& x)
    {
      this->FeatureNominalsCount_.set (x);
    }

    void ValidationCountsType::
    FeatureNominalsCount (const FeatureNominalsCount_optional& x)
    {
      this->FeatureNominalsCount_ = x;
    }

    const ValidationCountsType::FeatureItemsCount_optional& ValidationCountsType::
    FeatureItemsCount () const
    {
      return this->FeatureItemsCount_;
    }

    ValidationCountsType::FeatureItemsCount_optional& ValidationCountsType::
    FeatureItemsCount ()
    {
      return this->FeatureItemsCount_;
    }

    void ValidationCountsType::
    FeatureItemsCount (const FeatureItemsCount_type& x)
    {
      this->FeatureItemsCount_.set (x);
    }

    void ValidationCountsType::
    FeatureItemsCount (const FeatureItemsCount_optional& x)
    {
      this->FeatureItemsCount_ = x;
    }

    const ValidationCountsType::CharacteristicDefinitionsCount_optional& ValidationCountsType::
    CharacteristicDefinitionsCount () const
    {
      return this->CharacteristicDefinitionsCount_;
    }

    ValidationCountsType::CharacteristicDefinitionsCount_optional& ValidationCountsType::
    CharacteristicDefinitionsCount ()
    {
      return this->CharacteristicDefinitionsCount_;
    }

    void ValidationCountsType::
    CharacteristicDefinitionsCount (const CharacteristicDefinitionsCount_type& x)
    {
      this->CharacteristicDefinitionsCount_.set (x);
    }

    void ValidationCountsType::
    CharacteristicDefinitionsCount (const CharacteristicDefinitionsCount_optional& x)
    {
      this->CharacteristicDefinitionsCount_ = x;
    }

    const ValidationCountsType::DefaultCharacteristicDefinitionsCount_optional& ValidationCountsType::
    DefaultCharacteristicDefinitionsCount () const
    {
      return this->DefaultCharacteristicDefinitionsCount_;
    }

    ValidationCountsType::DefaultCharacteristicDefinitionsCount_optional& ValidationCountsType::
    DefaultCharacteristicDefinitionsCount ()
    {
      return this->DefaultCharacteristicDefinitionsCount_;
    }

    void ValidationCountsType::
    DefaultCharacteristicDefinitionsCount (const DefaultCharacteristicDefinitionsCount_type& x)
    {
      this->DefaultCharacteristicDefinitionsCount_.set (x);
    }

    void ValidationCountsType::
    DefaultCharacteristicDefinitionsCount (const DefaultCharacteristicDefinitionsCount_optional& x)
    {
      this->DefaultCharacteristicDefinitionsCount_ = x;
    }

    const ValidationCountsType::DefaultToleranceDefinitionsCount_optional& ValidationCountsType::
    DefaultToleranceDefinitionsCount () const
    {
      return this->DefaultToleranceDefinitionsCount_;
    }

    ValidationCountsType::DefaultToleranceDefinitionsCount_optional& ValidationCountsType::
    DefaultToleranceDefinitionsCount ()
    {
      return this->DefaultToleranceDefinitionsCount_;
    }

    void ValidationCountsType::
    DefaultToleranceDefinitionsCount (const DefaultToleranceDefinitionsCount_type& x)
    {
      this->DefaultToleranceDefinitionsCount_.set (x);
    }

    void ValidationCountsType::
    DefaultToleranceDefinitionsCount (const DefaultToleranceDefinitionsCount_optional& x)
    {
      this->DefaultToleranceDefinitionsCount_ = x;
    }

    const ValidationCountsType::CharacteristicNominalsCount_optional& ValidationCountsType::
    CharacteristicNominalsCount () const
    {
      return this->CharacteristicNominalsCount_;
    }

    ValidationCountsType::CharacteristicNominalsCount_optional& ValidationCountsType::
    CharacteristicNominalsCount ()
    {
      return this->CharacteristicNominalsCount_;
    }

    void ValidationCountsType::
    CharacteristicNominalsCount (const CharacteristicNominalsCount_type& x)
    {
      this->CharacteristicNominalsCount_.set (x);
    }

    void ValidationCountsType::
    CharacteristicNominalsCount (const CharacteristicNominalsCount_optional& x)
    {
      this->CharacteristicNominalsCount_ = x;
    }

    const ValidationCountsType::CharacteristicItemsCount_optional& ValidationCountsType::
    CharacteristicItemsCount () const
    {
      return this->CharacteristicItemsCount_;
    }

    ValidationCountsType::CharacteristicItemsCount_optional& ValidationCountsType::
    CharacteristicItemsCount ()
    {
      return this->CharacteristicItemsCount_;
    }

    void ValidationCountsType::
    CharacteristicItemsCount (const CharacteristicItemsCount_type& x)
    {
      this->CharacteristicItemsCount_.set (x);
    }

    void ValidationCountsType::
    CharacteristicItemsCount (const CharacteristicItemsCount_optional& x)
    {
      this->CharacteristicItemsCount_ = x;
    }

    const ValidationCountsType::CharacteristicGroupsCount_optional& ValidationCountsType::
    CharacteristicGroupsCount () const
    {
      return this->CharacteristicGroupsCount_;
    }

    ValidationCountsType::CharacteristicGroupsCount_optional& ValidationCountsType::
    CharacteristicGroupsCount ()
    {
      return this->CharacteristicGroupsCount_;
    }

    void ValidationCountsType::
    CharacteristicGroupsCount (const CharacteristicGroupsCount_type& x)
    {
      this->CharacteristicGroupsCount_.set (x);
    }

    void ValidationCountsType::
    CharacteristicGroupsCount (const CharacteristicGroupsCount_optional& x)
    {
      this->CharacteristicGroupsCount_ = x;
    }

    const ValidationCountsType::WeldSymbolSetCount_optional& ValidationCountsType::
    WeldSymbolSetCount () const
    {
      return this->WeldSymbolSetCount_;
    }

    ValidationCountsType::WeldSymbolSetCount_optional& ValidationCountsType::
    WeldSymbolSetCount ()
    {
      return this->WeldSymbolSetCount_;
    }

    void ValidationCountsType::
    WeldSymbolSetCount (const WeldSymbolSetCount_type& x)
    {
      this->WeldSymbolSetCount_.set (x);
    }

    void ValidationCountsType::
    WeldSymbolSetCount (const WeldSymbolSetCount_optional& x)
    {
      this->WeldSymbolSetCount_ = x;
    }

    const ValidationCountsType::MeasurementsPlanPresent_optional& ValidationCountsType::
    MeasurementsPlanPresent () const
    {
      return this->MeasurementsPlanPresent_;
    }

    ValidationCountsType::MeasurementsPlanPresent_optional& ValidationCountsType::
    MeasurementsPlanPresent ()
    {
      return this->MeasurementsPlanPresent_;
    }

    void ValidationCountsType::
    MeasurementsPlanPresent (const MeasurementsPlanPresent_type& x)
    {
      this->MeasurementsPlanPresent_.set (x);
    }

    void ValidationCountsType::
    MeasurementsPlanPresent (const MeasurementsPlanPresent_optional& x)
    {
      this->MeasurementsPlanPresent_ = x;
    }

    const ValidationCountsType::MeasurementsResultsCount_optional& ValidationCountsType::
    MeasurementsResultsCount () const
    {
      return this->MeasurementsResultsCount_;
    }

    ValidationCountsType::MeasurementsResultsCount_optional& ValidationCountsType::
    MeasurementsResultsCount ()
    {
      return this->MeasurementsResultsCount_;
    }

    void ValidationCountsType::
    MeasurementsResultsCount (const MeasurementsResultsCount_type& x)
    {
      this->MeasurementsResultsCount_.set (x);
    }

    void ValidationCountsType::
    MeasurementsResultsCount (const MeasurementsResultsCount_optional& x)
    {
      this->MeasurementsResultsCount_ = x;
    }

    const ValidationCountsType::StatisticalStudyPlansCount_optional& ValidationCountsType::
    StatisticalStudyPlansCount () const
    {
      return this->StatisticalStudyPlansCount_;
    }

    ValidationCountsType::StatisticalStudyPlansCount_optional& ValidationCountsType::
    StatisticalStudyPlansCount ()
    {
      return this->StatisticalStudyPlansCount_;
    }

    void ValidationCountsType::
    StatisticalStudyPlansCount (const StatisticalStudyPlansCount_type& x)
    {
      this->StatisticalStudyPlansCount_.set (x);
    }

    void ValidationCountsType::
    StatisticalStudyPlansCount (const StatisticalStudyPlansCount_optional& x)
    {
      this->StatisticalStudyPlansCount_ = x;
    }

    const ValidationCountsType::StatisticalStudiesResultsCount_optional& ValidationCountsType::
    StatisticalStudiesResultsCount () const
    {
      return this->StatisticalStudiesResultsCount_;
    }

    ValidationCountsType::StatisticalStudiesResultsCount_optional& ValidationCountsType::
    StatisticalStudiesResultsCount ()
    {
      return this->StatisticalStudiesResultsCount_;
    }

    void ValidationCountsType::
    StatisticalStudiesResultsCount (const StatisticalStudiesResultsCount_type& x)
    {
      this->StatisticalStudiesResultsCount_.set (x);
    }

    void ValidationCountsType::
    StatisticalStudiesResultsCount (const StatisticalStudiesResultsCount_optional& x)
    {
      this->StatisticalStudiesResultsCount_ = x;
    }

    const ValidationCountsType::CorrectiveActionPlansCount_optional& ValidationCountsType::
    CorrectiveActionPlansCount () const
    {
      return this->CorrectiveActionPlansCount_;
    }

    ValidationCountsType::CorrectiveActionPlansCount_optional& ValidationCountsType::
    CorrectiveActionPlansCount ()
    {
      return this->CorrectiveActionPlansCount_;
    }

    void ValidationCountsType::
    CorrectiveActionPlansCount (const CorrectiveActionPlansCount_type& x)
    {
      this->CorrectiveActionPlansCount_.set (x);
    }

    void ValidationCountsType::
    CorrectiveActionPlansCount (const CorrectiveActionPlansCount_optional& x)
    {
      this->CorrectiveActionPlansCount_ = x;
    }

    const ValidationCountsType::ManufacturingProcessTraceabilitiesCount_optional& ValidationCountsType::
    ManufacturingProcessTraceabilitiesCount () const
    {
      return this->ManufacturingProcessTraceabilitiesCount_;
    }

    ValidationCountsType::ManufacturingProcessTraceabilitiesCount_optional& ValidationCountsType::
    ManufacturingProcessTraceabilitiesCount ()
    {
      return this->ManufacturingProcessTraceabilitiesCount_;
    }

    void ValidationCountsType::
    ManufacturingProcessTraceabilitiesCount (const ManufacturingProcessTraceabilitiesCount_type& x)
    {
      this->ManufacturingProcessTraceabilitiesCount_.set (x);
    }

    void ValidationCountsType::
    ManufacturingProcessTraceabilitiesCount (const ManufacturingProcessTraceabilitiesCount_optional& x)
    {
      this->ManufacturingProcessTraceabilitiesCount_ = x;
    }

    const ValidationCountsType::FeatureRulesCount_optional& ValidationCountsType::
    FeatureRulesCount () const
    {
      return this->FeatureRulesCount_;
    }

    ValidationCountsType::FeatureRulesCount_optional& ValidationCountsType::
    FeatureRulesCount ()
    {
      return this->FeatureRulesCount_;
    }

    void ValidationCountsType::
    FeatureRulesCount (const FeatureRulesCount_type& x)
    {
      this->FeatureRulesCount_.set (x);
    }

    void ValidationCountsType::
    FeatureRulesCount (const FeatureRulesCount_optional& x)
    {
      this->FeatureRulesCount_ = x;
    }

    const ValidationCountsType::DMESelectionRulesCount_optional& ValidationCountsType::
    DMESelectionRulesCount () const
    {
      return this->DMESelectionRulesCount_;
    }

    ValidationCountsType::DMESelectionRulesCount_optional& ValidationCountsType::
    DMESelectionRulesCount ()
    {
      return this->DMESelectionRulesCount_;
    }

    void ValidationCountsType::
    DMESelectionRulesCount (const DMESelectionRulesCount_type& x)
    {
      this->DMESelectionRulesCount_.set (x);
    }

    void ValidationCountsType::
    DMESelectionRulesCount (const DMESelectionRulesCount_optional& x)
    {
      this->DMESelectionRulesCount_ = x;
    }

    const ValidationCountsType::SignaturePresent_optional& ValidationCountsType::
    SignaturePresent () const
    {
      return this->SignaturePresent_;
    }

    ValidationCountsType::SignaturePresent_optional& ValidationCountsType::
    SignaturePresent ()
    {
      return this->SignaturePresent_;
    }

    void ValidationCountsType::
    SignaturePresent (const SignaturePresent_type& x)
    {
      this->SignaturePresent_.set (x);
    }

    void ValidationCountsType::
    SignaturePresent (const SignaturePresent_optional& x)
    {
      this->SignaturePresent_ = x;
    }


    // ProductDataQualityAreaEnumType
    //

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ProductDataQualityAreaEnumType_literals_[v])
    {
    }

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (const ProductDataQualityAreaEnumType& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ProductDataQualityAreaEnumType& ProductDataQualityAreaEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ProductDataQualityAreaEnumType_literals_[v]);

      return *this;
    }


    // ProductDataQualityAreaType
    //

    const ProductDataQualityAreaType::AreaEnum_optional& ProductDataQualityAreaType::
    AreaEnum () const
    {
      return this->AreaEnum_;
    }

    ProductDataQualityAreaType::AreaEnum_optional& ProductDataQualityAreaType::
    AreaEnum ()
    {
      return this->AreaEnum_;
    }

    void ProductDataQualityAreaType::
    AreaEnum (const AreaEnum_type& x)
    {
      this->AreaEnum_.set (x);
    }

    void ProductDataQualityAreaType::
    AreaEnum (const AreaEnum_optional& x)
    {
      this->AreaEnum_ = x;
    }

    void ProductDataQualityAreaType::
    AreaEnum (::std::unique_ptr< AreaEnum_type > x)
    {
      this->AreaEnum_.set (std::move (x));
    }

    const ProductDataQualityAreaType::OtherArea_optional& ProductDataQualityAreaType::
    OtherArea () const
    {
      return this->OtherArea_;
    }

    ProductDataQualityAreaType::OtherArea_optional& ProductDataQualityAreaType::
    OtherArea ()
    {
      return this->OtherArea_;
    }

    void ProductDataQualityAreaType::
    OtherArea (const OtherArea_type& x)
    {
      this->OtherArea_.set (x);
    }

    void ProductDataQualityAreaType::
    OtherArea (const OtherArea_optional& x)
    {
      this->OtherArea_ = x;
    }

    void ProductDataQualityAreaType::
    OtherArea (::std::unique_ptr< OtherArea_type > x)
    {
      this->OtherArea_.set (std::move (x));
    }


    // ProductDataQualityCheckType
    //

    const ProductDataQualityCheckType::Type_type& ProductDataQualityCheckType::
    Type () const
    {
      return this->Type_.get ();
    }

    ProductDataQualityCheckType::Type_type& ProductDataQualityCheckType::
    Type ()
    {
      return this->Type_.get ();
    }

    void ProductDataQualityCheckType::
    Type (const Type_type& x)
    {
      this->Type_.set (x);
    }

    void ProductDataQualityCheckType::
    Type (::std::unique_ptr< Type_type > x)
    {
      this->Type_.set (std::move (x));
    }

    const ProductDataQualityCheckType::Description_type& ProductDataQualityCheckType::
    Description () const
    {
      return this->Description_.get ();
    }

    ProductDataQualityCheckType::Description_type& ProductDataQualityCheckType::
    Description ()
    {
      return this->Description_.get ();
    }

    void ProductDataQualityCheckType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void ProductDataQualityCheckType::
    Description (::std::unique_ptr< Description_type > x)
    {
      this->Description_.set (std::move (x));
    }

    const ProductDataQualityCheckType::Requirements_type& ProductDataQualityCheckType::
    Requirements () const
    {
      return this->Requirements_.get ();
    }

    ProductDataQualityCheckType::Requirements_type& ProductDataQualityCheckType::
    Requirements ()
    {
      return this->Requirements_.get ();
    }

    void ProductDataQualityCheckType::
    Requirements (const Requirements_type& x)
    {
      this->Requirements_.set (x);
    }

    void ProductDataQualityCheckType::
    Requirements (::std::unique_ptr< Requirements_type > x)
    {
      this->Requirements_.set (std::move (x));
    }

    const ProductDataQualityCheckType::SourceOfRequiredness_optional& ProductDataQualityCheckType::
    SourceOfRequiredness () const
    {
      return this->SourceOfRequiredness_;
    }

    ProductDataQualityCheckType::SourceOfRequiredness_optional& ProductDataQualityCheckType::
    SourceOfRequiredness ()
    {
      return this->SourceOfRequiredness_;
    }

    void ProductDataQualityCheckType::
    SourceOfRequiredness (const SourceOfRequiredness_type& x)
    {
      this->SourceOfRequiredness_.set (x);
    }

    void ProductDataQualityCheckType::
    SourceOfRequiredness (const SourceOfRequiredness_optional& x)
    {
      this->SourceOfRequiredness_ = x;
    }

    void ProductDataQualityCheckType::
    SourceOfRequiredness (::std::unique_ptr< SourceOfRequiredness_type > x)
    {
      this->SourceOfRequiredness_.set (std::move (x));
    }

    const ProductDataQualityCheckType::ApplicationTool_optional& ProductDataQualityCheckType::
    ApplicationTool () const
    {
      return this->ApplicationTool_;
    }

    ProductDataQualityCheckType::ApplicationTool_optional& ProductDataQualityCheckType::
    ApplicationTool ()
    {
      return this->ApplicationTool_;
    }

    void ProductDataQualityCheckType::
    ApplicationTool (const ApplicationTool_type& x)
    {
      this->ApplicationTool_.set (x);
    }

    void ProductDataQualityCheckType::
    ApplicationTool (const ApplicationTool_optional& x)
    {
      this->ApplicationTool_ = x;
    }

    void ProductDataQualityCheckType::
    ApplicationTool (::std::unique_ptr< ApplicationTool_type > x)
    {
      this->ApplicationTool_.set (std::move (x));
    }

    const ProductDataQualityCheckType::XsltFile_optional& ProductDataQualityCheckType::
    XsltFile () const
    {
      return this->XsltFile_;
    }

    ProductDataQualityCheckType::XsltFile_optional& ProductDataQualityCheckType::
    XsltFile ()
    {
      return this->XsltFile_;
    }

    void ProductDataQualityCheckType::
    XsltFile (const XsltFile_type& x)
    {
      this->XsltFile_.set (x);
    }

    void ProductDataQualityCheckType::
    XsltFile (const XsltFile_optional& x)
    {
      this->XsltFile_ = x;
    }

    void ProductDataQualityCheckType::
    XsltFile (::std::unique_ptr< XsltFile_type > x)
    {
      this->XsltFile_.set (std::move (x));
    }

    const ProductDataQualityCheckType::ResultStatement_type& ProductDataQualityCheckType::
    ResultStatement () const
    {
      return this->ResultStatement_.get ();
    }

    ProductDataQualityCheckType::ResultStatement_type& ProductDataQualityCheckType::
    ResultStatement ()
    {
      return this->ResultStatement_.get ();
    }

    void ProductDataQualityCheckType::
    ResultStatement (const ResultStatement_type& x)
    {
      this->ResultStatement_.set (x);
    }

    void ProductDataQualityCheckType::
    ResultStatement (::std::unique_ptr< ResultStatement_type > x)
    {
      this->ResultStatement_.set (std::move (x));
    }

    const ProductDataQualityCheckType::ResultStatus_type& ProductDataQualityCheckType::
    ResultStatus () const
    {
      return this->ResultStatus_.get ();
    }

    ProductDataQualityCheckType::ResultStatus_type& ProductDataQualityCheckType::
    ResultStatus ()
    {
      return this->ResultStatus_.get ();
    }

    void ProductDataQualityCheckType::
    ResultStatus (const ResultStatus_type& x)
    {
      this->ResultStatus_.set (x);
    }

    void ProductDataQualityCheckType::
    ResultStatus (::std::unique_ptr< ResultStatus_type > x)
    {
      this->ResultStatus_.set (std::move (x));
    }


    // CheckStatusEnumType
    //

    CheckStatusEnumType::
    CheckStatusEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    CheckStatusEnumType::
    CheckStatusEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CheckStatusEnumType_literals_[v])
    {
    }

    CheckStatusEnumType::
    CheckStatusEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CheckStatusEnumType::
    CheckStatusEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CheckStatusEnumType::
    CheckStatusEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CheckStatusEnumType::
    CheckStatusEnumType (const CheckStatusEnumType& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CheckStatusEnumType& CheckStatusEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CheckStatusEnumType_literals_[v]);

      return *this;
    }


    // ProductDataQualityChecksType
    //

    const ProductDataQualityChecksType::ProductDataQualityCheck_sequence& ProductDataQualityChecksType::
    ProductDataQualityCheck () const
    {
      return this->ProductDataQualityCheck_;
    }

    ProductDataQualityChecksType::ProductDataQualityCheck_sequence& ProductDataQualityChecksType::
    ProductDataQualityCheck ()
    {
      return this->ProductDataQualityCheck_;
    }

    void ProductDataQualityChecksType::
    ProductDataQualityCheck (const ProductDataQualityCheck_sequence& s)
    {
      this->ProductDataQualityCheck_ = s;
    }

    const ProductDataQualityChecksType::n_type& ProductDataQualityChecksType::
    n () const
    {
      return this->n_.get ();
    }

    ProductDataQualityChecksType::n_type& ProductDataQualityChecksType::
    n ()
    {
      return this->n_.get ();
    }

    void ProductDataQualityChecksType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ProductDataQualityChecksType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ProductDataQualityType
    //

    const ProductDataQualityType::ChecksPerformed_type& ProductDataQualityType::
    ChecksPerformed () const
    {
      return this->ChecksPerformed_.get ();
    }

    ProductDataQualityType::ChecksPerformed_type& ProductDataQualityType::
    ChecksPerformed ()
    {
      return this->ChecksPerformed_.get ();
    }

    void ProductDataQualityType::
    ChecksPerformed (const ChecksPerformed_type& x)
    {
      this->ChecksPerformed_.set (x);
    }

    const ProductDataQualityType::ChecksApproved_type& ProductDataQualityType::
    ChecksApproved () const
    {
      return this->ChecksApproved_.get ();
    }

    ProductDataQualityType::ChecksApproved_type& ProductDataQualityType::
    ChecksApproved ()
    {
      return this->ChecksApproved_.get ();
    }

    void ProductDataQualityType::
    ChecksApproved (const ChecksApproved_type& x)
    {
      this->ChecksApproved_.set (x);
    }

    const ProductDataQualityType::Declaration_type& ProductDataQualityType::
    Declaration () const
    {
      return this->Declaration_.get ();
    }

    ProductDataQualityType::Declaration_type& ProductDataQualityType::
    Declaration ()
    {
      return this->Declaration_.get ();
    }

    void ProductDataQualityType::
    Declaration (const Declaration_type& x)
    {
      this->Declaration_.set (x);
    }

    void ProductDataQualityType::
    Declaration (::std::unique_ptr< Declaration_type > x)
    {
      this->Declaration_.set (std::move (x));
    }

    const ProductDataQualityType::ProductDataQualityChecks_optional& ProductDataQualityType::
    ProductDataQualityChecks () const
    {
      return this->ProductDataQualityChecks_;
    }

    ProductDataQualityType::ProductDataQualityChecks_optional& ProductDataQualityType::
    ProductDataQualityChecks ()
    {
      return this->ProductDataQualityChecks_;
    }

    void ProductDataQualityType::
    ProductDataQualityChecks (const ProductDataQualityChecks_type& x)
    {
      this->ProductDataQualityChecks_.set (x);
    }

    void ProductDataQualityType::
    ProductDataQualityChecks (const ProductDataQualityChecks_optional& x)
    {
      this->ProductDataQualityChecks_ = x;
    }

    void ProductDataQualityType::
    ProductDataQualityChecks (::std::unique_ptr< ProductDataQualityChecks_type > x)
    {
      this->ProductDataQualityChecks_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif30
  {
    // InspectionProgramType
    //

    InspectionProgramType::
    InspectionProgramType ()
    : ::xml_schema::type (),
      File_ (this),
      Description_ (this),
      FormalStandardId_ (this),
      Author_ (this)
    {
    }

    InspectionProgramType::
    InspectionProgramType (const File_type& File,
                           const FormalStandardId_type& FormalStandardId,
                           const Author_type& Author)
    : ::xml_schema::type (),
      File_ (File, this),
      Description_ (this),
      FormalStandardId_ (FormalStandardId, this),
      Author_ (Author, this)
    {
    }

    InspectionProgramType::
    InspectionProgramType (::std::unique_ptr< File_type > File,
                           ::std::unique_ptr< FormalStandardId_type > FormalStandardId,
                           ::std::unique_ptr< Author_type > Author)
    : ::xml_schema::type (),
      File_ (std::move (File), this),
      Description_ (this),
      FormalStandardId_ (std::move (FormalStandardId), this),
      Author_ (std::move (Author), this)
    {
    }

    InspectionProgramType::
    InspectionProgramType (const InspectionProgramType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      File_ (x.File_, f, this),
      Description_ (x.Description_, f, this),
      FormalStandardId_ (x.FormalStandardId_, f, this),
      Author_ (x.Author_, f, this)
    {
    }

    InspectionProgramType::
    InspectionProgramType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      File_ (this),
      Description_ (this),
      FormalStandardId_ (this),
      Author_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void InspectionProgramType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // File
        //
        if (n.name () == L"File" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< File_type > r (
            File_traits::create (i, f, this));

          if (!File_.present ())
          {
            this->File_.set (::std::move (r));
            continue;
          }
        }

        // Description
        //
        if (n.name () == L"Description" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (::std::move (r));
            continue;
          }
        }

        // FormalStandardId
        //
        if (n.name () == L"FormalStandardId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FormalStandardId_type > r (
            FormalStandardId_traits::create (i, f, this));

          if (!FormalStandardId_.present ())
          {
            this->FormalStandardId_.set (::std::move (r));
            continue;
          }
        }

        // Author
        //
        if (n.name () == L"Author" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Author_type > r (
            Author_traits::create (i, f, this));

          if (!Author_.present ())
          {
            this->Author_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!File_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"File",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!FormalStandardId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"FormalStandardId",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!Author_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Author",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    InspectionProgramType* InspectionProgramType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionProgramType (*this, f, c);
    }

    InspectionProgramType& InspectionProgramType::
    operator= (const InspectionProgramType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->File_ = x.File_;
        this->Description_ = x.Description_;
        this->FormalStandardId_ = x.FormalStandardId_;
        this->Author_ = x.Author_;
      }

      return *this;
    }

    InspectionProgramType::
    ~InspectionProgramType ()
    {
    }

    // InspectionSoftwareItemsType
    //

    InspectionSoftwareItemsType::
    InspectionSoftwareItemsType ()
    : ::xml_schema::type (),
      InspectionProgramGenerationSoftware_ (this),
      InspectionProgramExecutionSoftware_ (this),
      AnalysisSoftware_ (this),
      CADSoftware_ (this),
      DMESoftware_ (this)
    {
    }

    InspectionSoftwareItemsType::
    InspectionSoftwareItemsType (const InspectionSoftwareItemsType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      InspectionProgramGenerationSoftware_ (x.InspectionProgramGenerationSoftware_, f, this),
      InspectionProgramExecutionSoftware_ (x.InspectionProgramExecutionSoftware_, f, this),
      AnalysisSoftware_ (x.AnalysisSoftware_, f, this),
      CADSoftware_ (x.CADSoftware_, f, this),
      DMESoftware_ (x.DMESoftware_, f, this)
    {
    }

    InspectionSoftwareItemsType::
    InspectionSoftwareItemsType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      InspectionProgramGenerationSoftware_ (this),
      InspectionProgramExecutionSoftware_ (this),
      AnalysisSoftware_ (this),
      CADSoftware_ (this),
      DMESoftware_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void InspectionSoftwareItemsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // InspectionProgramGenerationSoftware
        //
        if (n.name () == L"InspectionProgramGenerationSoftware" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionProgramGenerationSoftware_type > r (
            InspectionProgramGenerationSoftware_traits::create (i, f, this));

          if (!this->InspectionProgramGenerationSoftware_)
          {
            this->InspectionProgramGenerationSoftware_.set (::std::move (r));
            continue;
          }
        }

        // InspectionProgramExecutionSoftware
        //
        if (n.name () == L"InspectionProgramExecutionSoftware" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionProgramExecutionSoftware_type > r (
            InspectionProgramExecutionSoftware_traits::create (i, f, this));

          if (!this->InspectionProgramExecutionSoftware_)
          {
            this->InspectionProgramExecutionSoftware_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisSoftware
        //
        if (n.name () == L"AnalysisSoftware" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisSoftware_type > r (
            AnalysisSoftware_traits::create (i, f, this));

          if (!this->AnalysisSoftware_)
          {
            this->AnalysisSoftware_.set (::std::move (r));
            continue;
          }
        }

        // CADSoftware
        //
        if (n.name () == L"CADSoftware" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CADSoftware_type > r (
            CADSoftware_traits::create (i, f, this));

          if (!this->CADSoftware_)
          {
            this->CADSoftware_.set (::std::move (r));
            continue;
          }
        }

        // DMESoftware
        //
        if (n.name () == L"DMESoftware" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DMESoftware_type > r (
            DMESoftware_traits::create (i, f, this));

          if (!this->DMESoftware_)
          {
            this->DMESoftware_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    InspectionSoftwareItemsType* InspectionSoftwareItemsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionSoftwareItemsType (*this, f, c);
    }

    InspectionSoftwareItemsType& InspectionSoftwareItemsType::
    operator= (const InspectionSoftwareItemsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->InspectionProgramGenerationSoftware_ = x.InspectionProgramGenerationSoftware_;
        this->InspectionProgramExecutionSoftware_ = x.InspectionProgramExecutionSoftware_;
        this->AnalysisSoftware_ = x.AnalysisSoftware_;
        this->CADSoftware_ = x.CADSoftware_;
        this->DMESoftware_ = x.DMESoftware_;
      }

      return *this;
    }

    InspectionSoftwareItemsType::
    ~InspectionSoftwareItemsType ()
    {
    }

    // EnvironmentType
    //

    EnvironmentType::
    EnvironmentType ()
    : ::xml_schema::type (),
      Attributes_ (this),
      ObjectTemperature_ (this),
      AmbientTemperature_ (this),
      RelativeHumidity_ (this),
      DateAndTime_ (this),
      TimeDescription_ (this)
    {
    }

    EnvironmentType::
    EnvironmentType (const DateAndTime_type& DateAndTime)
    : ::xml_schema::type (),
      Attributes_ (this),
      ObjectTemperature_ (this),
      AmbientTemperature_ (this),
      RelativeHumidity_ (this),
      DateAndTime_ (DateAndTime, this),
      TimeDescription_ (this)
    {
    }

    EnvironmentType::
    EnvironmentType (const EnvironmentType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      ObjectTemperature_ (x.ObjectTemperature_, f, this),
      AmbientTemperature_ (x.AmbientTemperature_, f, this),
      RelativeHumidity_ (x.RelativeHumidity_, f, this),
      DateAndTime_ (x.DateAndTime_, f, this),
      TimeDescription_ (x.TimeDescription_, f, this)
    {
    }

    EnvironmentType::
    EnvironmentType (const xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      ObjectTemperature_ (this),
      AmbientTemperature_ (this),
      RelativeHumidity_ (this),
      DateAndTime_ (this),
      TimeDescription_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void EnvironmentType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        // ObjectTemperature
        //
        if (n.name () == L"ObjectTemperature" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ObjectTemperature_type > r (
            ObjectTemperature_traits::create (i, f, this));

          if (!this->ObjectTemperature_)
          {
            this->ObjectTemperature_.set (::std::move (r));
            continue;
          }
        }

        // AmbientTemperature
        //
        if (n.name () == L"AmbientTemperature" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AmbientTemperature_type > r (
            AmbientTemperature_traits::create (i, f, this));

          if (!this->AmbientTemperature_)
          {
            this->AmbientTemperature_.set (::std::move (r));
            continue;
          }
        }

        // RelativeHumidity
        //
        if (n.name () == L"RelativeHumidity" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< RelativeHumidity_type > r (
            RelativeHumidity_traits::create (i, f, this));

          if (!this->RelativeHumidity_)
          {
            this->RelativeHumidity_.set (::std::move (r));
            continue;
          }
        }

        // DateAndTime
        //
        if (n.name () == L"DateAndTime" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DateAndTime_type > r (
            DateAndTime_traits::create (i, f, this));

          if (!DateAndTime_.present ())
          {
            this->DateAndTime_.set (::std::move (r));
            continue;
          }
        }

        // TimeDescription
        //
        if (n.name () == L"TimeDescription" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TimeDescription_type > r (
            TimeDescription_traits::create (i, f, this));

          if (!this->TimeDescription_)
          {
            this->TimeDescription_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!DateAndTime_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"DateAndTime",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    EnvironmentType* EnvironmentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EnvironmentType (*this, f, c);
    }

    EnvironmentType& EnvironmentType::
    operator= (const EnvironmentType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->ObjectTemperature_ = x.ObjectTemperature_;
        this->AmbientTemperature_ = x.AmbientTemperature_;
        this->RelativeHumidity_ = x.RelativeHumidity_;
        this->DateAndTime_ = x.DateAndTime_;
        this->TimeDescription_ = x.TimeDescription_;
      }

      return *this;
    }

    EnvironmentType::
    ~EnvironmentType ()
    {
    }

    // EnvironmentsType
    //

    EnvironmentsType::
    EnvironmentsType ()
    : ::xml_schema::type (),
      Environment_ (this),
      n_ (this)
    {
    }

    EnvironmentsType::
    EnvironmentsType (const n_type& n)
    : ::xml_schema::type (),
      Environment_ (this),
      n_ (n, this)
    {
    }

    EnvironmentsType::
    EnvironmentsType (const EnvironmentsType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Environment_ (x.Environment_, f, this),
      n_ (x.n_, f, this)
    {
    }

    EnvironmentsType::
    EnvironmentsType (const xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Environment_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void EnvironmentsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Environment
        //
        if (n.name () == L"Environment" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Environment_type > r (
            Environment_traits::create (i, f, this));

          this->Environment_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    EnvironmentsType* EnvironmentsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EnvironmentsType (*this, f, c);
    }

    EnvironmentsType& EnvironmentsType::
    operator= (const EnvironmentsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Environment_ = x.Environment_;
        this->n_ = x.n_;
      }

      return *this;
    }

    EnvironmentsType::
    ~EnvironmentsType ()
    {
    }

    // InspectionTraceabilityType
    //

    const InspectionTraceabilityType::ReferencedQIFPlan_type InspectionTraceabilityType::ReferencedQIFPlan_default_value_ (
      L"ThisFile");

    InspectionTraceabilityType::
    InspectionTraceabilityType ()
    : ::xml_schema::type (),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      NotedEvents_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      ReportPreparer_ (this),
      ReportPreparationDate_ (this),
      ReportType_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      Errors_ (this),
      Attributes_ (this)
    {
    }

    InspectionTraceabilityType::
    InspectionTraceabilityType (const InspectionTraceabilityType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      InspectingOrganization_ (x.InspectingOrganization_, f, this),
      CustomerOrganization_ (x.CustomerOrganization_, f, this),
      SupplierCode_ (x.SupplierCode_, f, this),
      PurchaseOrderNumber_ (x.PurchaseOrderNumber_, f, this),
      OrderNumber_ (x.OrderNumber_, f, this),
      ReportNumber_ (x.ReportNumber_, f, this),
      InspectionScope_ (x.InspectionScope_, f, this),
      InspectionMode_ (x.InspectionMode_, f, this),
      PartialInspection_ (x.PartialInspection_, f, this),
      NotableEvents_ (x.NotableEvents_, f, this),
      NotedEvents_ (x.NotedEvents_, f, this),
      InspectionStart_ (x.InspectionStart_, f, this),
      InspectionEnd_ (x.InspectionEnd_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      InspectionOperator_ (x.InspectionOperator_, f, this),
      ReportPreparer_ (x.ReportPreparer_, f, this),
      ReportPreparationDate_ (x.ReportPreparationDate_, f, this),
      ReportType_ (x.ReportType_, f, this),
      SecurityClassification_ (x.SecurityClassification_, f, this),
      PlantLocation_ (x.PlantLocation_, f, this),
      ReferencedQIFPlanInstance_ (x.ReferencedQIFPlanInstance_, f, this),
      ReferencedQIFPlan_ (x.ReferencedQIFPlan_, f, this),
      Errors_ (x.Errors_, f, this),
      Attributes_ (x.Attributes_, f, this)
    {
    }

    InspectionTraceabilityType::
    InspectionTraceabilityType (const xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      NotedEvents_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      ReportPreparer_ (this),
      ReportPreparationDate_ (this),
      ReportType_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      Errors_ (this),
      Attributes_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void InspectionTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // InspectingOrganization
        //
        if (n.name () == L"InspectingOrganization" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectingOrganization_type > r (
            InspectingOrganization_traits::create (i, f, this));

          if (!this->InspectingOrganization_)
          {
            this->InspectingOrganization_.set (::std::move (r));
            continue;
          }
        }

        // CustomerOrganization
        //
        if (n.name () == L"CustomerOrganization" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CustomerOrganization_type > r (
            CustomerOrganization_traits::create (i, f, this));

          if (!this->CustomerOrganization_)
          {
            this->CustomerOrganization_.set (::std::move (r));
            continue;
          }
        }

        // SupplierCode
        //
        if (n.name () == L"SupplierCode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SupplierCode_type > r (
            SupplierCode_traits::create (i, f, this));

          if (!this->SupplierCode_)
          {
            this->SupplierCode_.set (::std::move (r));
            continue;
          }
        }

        // PurchaseOrderNumber
        //
        if (n.name () == L"PurchaseOrderNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PurchaseOrderNumber_type > r (
            PurchaseOrderNumber_traits::create (i, f, this));

          if (!this->PurchaseOrderNumber_)
          {
            this->PurchaseOrderNumber_.set (::std::move (r));
            continue;
          }
        }

        // OrderNumber
        //
        if (n.name () == L"OrderNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OrderNumber_type > r (
            OrderNumber_traits::create (i, f, this));

          if (!this->OrderNumber_)
          {
            this->OrderNumber_.set (::std::move (r));
            continue;
          }
        }

        // ReportNumber
        //
        if (n.name () == L"ReportNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (::std::move (r));
            continue;
          }
        }

        // InspectionScope
        //
        if (n.name () == L"InspectionScope" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionScope_type > r (
            InspectionScope_traits::create (i, f, this));

          if (!this->InspectionScope_)
          {
            this->InspectionScope_.set (::std::move (r));
            continue;
          }
        }

        // InspectionMode
        //
        if (n.name () == L"InspectionMode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionMode_type > r (
            InspectionMode_traits::create (i, f, this));

          if (!this->InspectionMode_)
          {
            this->InspectionMode_.set (::std::move (r));
            continue;
          }
        }

        // PartialInspection
        //
        if (n.name () == L"PartialInspection" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PartialInspection_type > r (
            PartialInspection_traits::create (i, f, this));

          if (!this->PartialInspection_)
          {
            this->PartialInspection_.set (::std::move (r));
            continue;
          }
        }

        // NotableEvents
        //
        if (n.name () == L"NotableEvents" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotableEvents_type > r (
            NotableEvents_traits::create (i, f, this));

          if (!this->NotableEvents_)
          {
            this->NotableEvents_.set (::std::move (r));
            continue;
          }
        }

        // NotedEvents
        //
        if (n.name () == L"NotedEvents" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotedEvents_type > r (
            NotedEvents_traits::create (i, f, this));

          if (!this->NotedEvents_)
          {
            this->NotedEvents_.set (::std::move (r));
            continue;
          }
        }

        // InspectionStart
        //
        if (n.name () == L"InspectionStart" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionStart_type > r (
            InspectionStart_traits::create (i, f, this));

          if (!this->InspectionStart_)
          {
            this->InspectionStart_.set (::std::move (r));
            continue;
          }
        }

        // InspectionEnd
        //
        if (n.name () == L"InspectionEnd" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionEnd_type > r (
            InspectionEnd_traits::create (i, f, this));

          if (!this->InspectionEnd_)
          {
            this->InspectionEnd_.set (::std::move (r));
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == L"InspectionSoftwareItems" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (::std::move (r));
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == L"InspectionProgram" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (::std::move (r));
            continue;
          }
        }

        // InspectionOperator
        //
        if (n.name () == L"InspectionOperator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionOperator_type > r (
            InspectionOperator_traits::create (i, f, this));

          if (!this->InspectionOperator_)
          {
            this->InspectionOperator_.set (::std::move (r));
            continue;
          }
        }

        // ReportPreparer
        //
        if (n.name () == L"ReportPreparer" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReportPreparer_type > r (
            ReportPreparer_traits::create (i, f, this));

          if (!this->ReportPreparer_)
          {
            this->ReportPreparer_.set (::std::move (r));
            continue;
          }
        }

        // ReportPreparationDate
        //
        if (n.name () == L"ReportPreparationDate" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReportPreparationDate_type > r (
            ReportPreparationDate_traits::create (i, f, this));

          if (!this->ReportPreparationDate_)
          {
            this->ReportPreparationDate_.set (::std::move (r));
            continue;
          }
        }

        // ReportType
        //
        if (n.name () == L"ReportType" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReportType_type > r (
            ReportType_traits::create (i, f, this));

          if (!this->ReportType_)
          {
            this->ReportType_.set (::std::move (r));
            continue;
          }
        }

        // SecurityClassification
        //
        if (n.name () == L"SecurityClassification" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecurityClassification_type > r (
            SecurityClassification_traits::create (i, f, this));

          if (!this->SecurityClassification_)
          {
            this->SecurityClassification_.set (::std::move (r));
            continue;
          }
        }

        // PlantLocation
        //
        if (n.name () == L"PlantLocation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PlantLocation_type > r (
            PlantLocation_traits::create (i, f, this));

          if (!this->PlantLocation_)
          {
            this->PlantLocation_.set (::std::move (r));
            continue;
          }
        }

        // ReferencedQIFPlanInstance
        //
        if (n.name () == L"ReferencedQIFPlanInstance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReferencedQIFPlanInstance_type > r (
            ReferencedQIFPlanInstance_traits::create (i, f, this));

          if (!this->ReferencedQIFPlanInstance_)
          {
            this->ReferencedQIFPlanInstance_.set (::std::move (r));
            continue;
          }
        }

        // ReferencedQIFPlan
        //
        if (n.name () == L"ReferencedQIFPlan" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReferencedQIFPlan_type > r (
            ReferencedQIFPlan_traits::create (i, f, this));

          if (!this->ReferencedQIFPlan_)
          {
            this->ReferencedQIFPlan_.set (::std::move (r));
            continue;
          }
        }

        // Errors
        //
        if (n.name () == L"Errors" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Errors_type > r (
            Errors_traits::create (i, f, this));

          if (!this->Errors_)
          {
            this->Errors_.set (::std::move (r));
            continue;
          }
        }

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    InspectionTraceabilityType* InspectionTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionTraceabilityType (*this, f, c);
    }

    InspectionTraceabilityType& InspectionTraceabilityType::
    operator= (const InspectionTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->InspectingOrganization_ = x.InspectingOrganization_;
        this->CustomerOrganization_ = x.CustomerOrganization_;
        this->SupplierCode_ = x.SupplierCode_;
        this->PurchaseOrderNumber_ = x.PurchaseOrderNumber_;
        this->OrderNumber_ = x.OrderNumber_;
        this->ReportNumber_ = x.ReportNumber_;
        this->InspectionScope_ = x.InspectionScope_;
        this->InspectionMode_ = x.InspectionMode_;
        this->PartialInspection_ = x.PartialInspection_;
        this->NotableEvents_ = x.NotableEvents_;
        this->NotedEvents_ = x.NotedEvents_;
        this->InspectionStart_ = x.InspectionStart_;
        this->InspectionEnd_ = x.InspectionEnd_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->InspectionOperator_ = x.InspectionOperator_;
        this->ReportPreparer_ = x.ReportPreparer_;
        this->ReportPreparationDate_ = x.ReportPreparationDate_;
        this->ReportType_ = x.ReportType_;
        this->SecurityClassification_ = x.SecurityClassification_;
        this->PlantLocation_ = x.PlantLocation_;
        this->ReferencedQIFPlanInstance_ = x.ReferencedQIFPlanInstance_;
        this->ReferencedQIFPlan_ = x.ReferencedQIFPlan_;
        this->Errors_ = x.Errors_;
        this->Attributes_ = x.Attributes_;
      }

      return *this;
    }

    InspectionTraceabilityType::
    ~InspectionTraceabilityType ()
    {
    }

    // PreInspectionTraceabilityType
    //

    const PreInspectionTraceabilityType::ReferencedQIFPlan_type PreInspectionTraceabilityType::ReferencedQIFPlan_default_value_ (
      L"ThisFile");

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType ()
    : ::xml_schema::type (),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      AsmPathIds_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      FormalStandardId_ (this),
      Attributes_ (this)
    {
    }

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (const FormalStandardId_type& FormalStandardId)
    : ::xml_schema::type (),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      AsmPathIds_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      FormalStandardId_ (FormalStandardId, this),
      Attributes_ (this)
    {
    }

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (::std::unique_ptr< FormalStandardId_type > FormalStandardId)
    : ::xml_schema::type (),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      AsmPathIds_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      FormalStandardId_ (std::move (FormalStandardId), this),
      Attributes_ (this)
    {
    }

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (const PreInspectionTraceabilityType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      InspectingOrganization_ (x.InspectingOrganization_, f, this),
      CustomerOrganization_ (x.CustomerOrganization_, f, this),
      SupplierCode_ (x.SupplierCode_, f, this),
      PurchaseOrderNumber_ (x.PurchaseOrderNumber_, f, this),
      OrderNumber_ (x.OrderNumber_, f, this),
      AsmPathIds_ (x.AsmPathIds_, f, this),
      ReportNumber_ (x.ReportNumber_, f, this),
      InspectionScope_ (x.InspectionScope_, f, this),
      InspectionMode_ (x.InspectionMode_, f, this),
      PartialInspection_ (x.PartialInspection_, f, this),
      NotableEvents_ (x.NotableEvents_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      SecurityClassification_ (x.SecurityClassification_, f, this),
      PlantLocation_ (x.PlantLocation_, f, this),
      ReferencedQIFPlanInstance_ (x.ReferencedQIFPlanInstance_, f, this),
      ReferencedQIFPlan_ (x.ReferencedQIFPlan_, f, this),
      FormalStandardId_ (x.FormalStandardId_, f, this),
      Attributes_ (x.Attributes_, f, this)
    {
    }

    PreInspectionTraceabilityType::
    PreInspectionTraceabilityType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      InspectingOrganization_ (this),
      CustomerOrganization_ (this),
      SupplierCode_ (this),
      PurchaseOrderNumber_ (this),
      OrderNumber_ (this),
      AsmPathIds_ (this),
      ReportNumber_ (this),
      InspectionScope_ (this),
      InspectionMode_ (this),
      PartialInspection_ (this),
      NotableEvents_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      SecurityClassification_ (this),
      PlantLocation_ (this),
      ReferencedQIFPlanInstance_ (this),
      ReferencedQIFPlan_ (this),
      FormalStandardId_ (this),
      Attributes_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PreInspectionTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // InspectingOrganization
        //
        if (n.name () == L"InspectingOrganization" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectingOrganization_type > r (
            InspectingOrganization_traits::create (i, f, this));

          if (!this->InspectingOrganization_)
          {
            this->InspectingOrganization_.set (::std::move (r));
            continue;
          }
        }

        // CustomerOrganization
        //
        if (n.name () == L"CustomerOrganization" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CustomerOrganization_type > r (
            CustomerOrganization_traits::create (i, f, this));

          if (!this->CustomerOrganization_)
          {
            this->CustomerOrganization_.set (::std::move (r));
            continue;
          }
        }

        // SupplierCode
        //
        if (n.name () == L"SupplierCode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SupplierCode_type > r (
            SupplierCode_traits::create (i, f, this));

          if (!this->SupplierCode_)
          {
            this->SupplierCode_.set (::std::move (r));
            continue;
          }
        }

        // PurchaseOrderNumber
        //
        if (n.name () == L"PurchaseOrderNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PurchaseOrderNumber_type > r (
            PurchaseOrderNumber_traits::create (i, f, this));

          if (!this->PurchaseOrderNumber_)
          {
            this->PurchaseOrderNumber_.set (::std::move (r));
            continue;
          }
        }

        // OrderNumber
        //
        if (n.name () == L"OrderNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OrderNumber_type > r (
            OrderNumber_traits::create (i, f, this));

          if (!this->OrderNumber_)
          {
            this->OrderNumber_.set (::std::move (r));
            continue;
          }
        }

        // AsmPathIds
        //
        if (n.name () == L"AsmPathIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AsmPathIds_type > r (
            AsmPathIds_traits::create (i, f, this));

          if (!this->AsmPathIds_)
          {
            this->AsmPathIds_.set (::std::move (r));
            continue;
          }
        }

        // ReportNumber
        //
        if (n.name () == L"ReportNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (::std::move (r));
            continue;
          }
        }

        // InspectionScope
        //
        if (n.name () == L"InspectionScope" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionScope_type > r (
            InspectionScope_traits::create (i, f, this));

          if (!this->InspectionScope_)
          {
            this->InspectionScope_.set (::std::move (r));
            continue;
          }
        }

        // InspectionMode
        //
        if (n.name () == L"InspectionMode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionMode_type > r (
            InspectionMode_traits::create (i, f, this));

          if (!this->InspectionMode_)
          {
            this->InspectionMode_.set (::std::move (r));
            continue;
          }
        }

        // PartialInspection
        //
        if (n.name () == L"PartialInspection" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PartialInspection_type > r (
            PartialInspection_traits::create (i, f, this));

          if (!this->PartialInspection_)
          {
            this->PartialInspection_.set (::std::move (r));
            continue;
          }
        }

        // NotableEvents
        //
        if (n.name () == L"NotableEvents" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotableEvents_type > r (
            NotableEvents_traits::create (i, f, this));

          if (!this->NotableEvents_)
          {
            this->NotableEvents_.set (::std::move (r));
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == L"InspectionSoftwareItems" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (::std::move (r));
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == L"InspectionProgram" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (::std::move (r));
            continue;
          }
        }

        // SecurityClassification
        //
        if (n.name () == L"SecurityClassification" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecurityClassification_type > r (
            SecurityClassification_traits::create (i, f, this));

          if (!this->SecurityClassification_)
          {
            this->SecurityClassification_.set (::std::move (r));
            continue;
          }
        }

        // PlantLocation
        //
        if (n.name () == L"PlantLocation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PlantLocation_type > r (
            PlantLocation_traits::create (i, f, this));

          if (!this->PlantLocation_)
          {
            this->PlantLocation_.set (::std::move (r));
            continue;
          }
        }

        // ReferencedQIFPlanInstance
        //
        if (n.name () == L"ReferencedQIFPlanInstance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReferencedQIFPlanInstance_type > r (
            ReferencedQIFPlanInstance_traits::create (i, f, this));

          if (!this->ReferencedQIFPlanInstance_)
          {
            this->ReferencedQIFPlanInstance_.set (::std::move (r));
            continue;
          }
        }

        // ReferencedQIFPlan
        //
        if (n.name () == L"ReferencedQIFPlan" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReferencedQIFPlan_type > r (
            ReferencedQIFPlan_traits::create (i, f, this));

          if (!this->ReferencedQIFPlan_)
          {
            this->ReferencedQIFPlan_.set (::std::move (r));
            continue;
          }
        }

        // FormalStandardId
        //
        if (n.name () == L"FormalStandardId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FormalStandardId_type > r (
            FormalStandardId_traits::create (i, f, this));

          if (!FormalStandardId_.present ())
          {
            this->FormalStandardId_.set (::std::move (r));
            continue;
          }
        }

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!FormalStandardId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"FormalStandardId",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    PreInspectionTraceabilityType* PreInspectionTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PreInspectionTraceabilityType (*this, f, c);
    }

    PreInspectionTraceabilityType& PreInspectionTraceabilityType::
    operator= (const PreInspectionTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->InspectingOrganization_ = x.InspectingOrganization_;
        this->CustomerOrganization_ = x.CustomerOrganization_;
        this->SupplierCode_ = x.SupplierCode_;
        this->PurchaseOrderNumber_ = x.PurchaseOrderNumber_;
        this->OrderNumber_ = x.OrderNumber_;
        this->AsmPathIds_ = x.AsmPathIds_;
        this->ReportNumber_ = x.ReportNumber_;
        this->InspectionScope_ = x.InspectionScope_;
        this->InspectionMode_ = x.InspectionMode_;
        this->PartialInspection_ = x.PartialInspection_;
        this->NotableEvents_ = x.NotableEvents_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->SecurityClassification_ = x.SecurityClassification_;
        this->PlantLocation_ = x.PlantLocation_;
        this->ReferencedQIFPlanInstance_ = x.ReferencedQIFPlanInstance_;
        this->ReferencedQIFPlan_ = x.ReferencedQIFPlan_;
        this->FormalStandardId_ = x.FormalStandardId_;
        this->Attributes_ = x.Attributes_;
      }

      return *this;
    }

    PreInspectionTraceabilityType::
    ~PreInspectionTraceabilityType ()
    {
    }

    // ProductTraceabilityType
    //

    ProductTraceabilityType::
    ProductTraceabilityType ()
    : ::xml_schema::type (),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      MeasurementDeviceIds_ (this),
      Attributes_ (this)
    {
    }

    ProductTraceabilityType::
    ProductTraceabilityType (const ProductTraceabilityType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ReportNumber_ (x.ReportNumber_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      FixtureId_ (x.FixtureId_, f, this),
      NotableEventIds_ (x.NotableEventIds_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      Attributes_ (x.Attributes_, f, this)
    {
    }

    ProductTraceabilityType::
    ProductTraceabilityType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      MeasurementDeviceIds_ (this),
      Attributes_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProductTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ReportNumber
        //
        if (n.name () == L"ReportNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (::std::move (r));
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == L"ManufacturingProcessId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (::std::move (r));
            continue;
          }
        }

        // FixtureId
        //
        if (n.name () == L"FixtureId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FixtureId_type > r (
            FixtureId_traits::create (i, f, this));

          if (!this->FixtureId_)
          {
            this->FixtureId_.set (::std::move (r));
            continue;
          }
        }

        // NotableEventIds
        //
        if (n.name () == L"NotableEventIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotableEventIds_type > r (
            NotableEventIds_traits::create (i, f, this));

          if (!this->NotableEventIds_)
          {
            this->NotableEventIds_.set (::std::move (r));
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == L"InspectionSoftwareItems" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (::std::move (r));
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == L"InspectionProgram" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == L"MeasurementDeviceIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (::std::move (r));
            continue;
          }
        }

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ProductTraceabilityType* ProductTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductTraceabilityType (*this, f, c);
    }

    ProductTraceabilityType& ProductTraceabilityType::
    operator= (const ProductTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ReportNumber_ = x.ReportNumber_;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
        this->FixtureId_ = x.FixtureId_;
        this->NotableEventIds_ = x.NotableEventIds_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->Attributes_ = x.Attributes_;
      }

      return *this;
    }

    ProductTraceabilityType::
    ~ProductTraceabilityType ()
    {
    }

    // ActualProductTraceabilityType
    //

    ActualProductTraceabilityType::
    ActualProductTraceabilityType ()
    : ::xml_schema::type (),
      SampleNumber_ (this),
      LotNumber_ (this),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      NotedEventIds_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      MeasurementDeviceIds_ (this),
      ProductEnvironments_ (this),
      Errors_ (this),
      Attributes_ (this)
    {
    }

    ActualProductTraceabilityType::
    ActualProductTraceabilityType (const ActualProductTraceabilityType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SampleNumber_ (x.SampleNumber_, f, this),
      LotNumber_ (x.LotNumber_, f, this),
      ReportNumber_ (x.ReportNumber_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      FixtureId_ (x.FixtureId_, f, this),
      NotableEventIds_ (x.NotableEventIds_, f, this),
      NotedEventIds_ (x.NotedEventIds_, f, this),
      InspectionStart_ (x.InspectionStart_, f, this),
      InspectionEnd_ (x.InspectionEnd_, f, this),
      InspectionSoftwareItems_ (x.InspectionSoftwareItems_, f, this),
      InspectionProgram_ (x.InspectionProgram_, f, this),
      InspectionOperator_ (x.InspectionOperator_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      ProductEnvironments_ (x.ProductEnvironments_, f, this),
      Errors_ (x.Errors_, f, this),
      Attributes_ (x.Attributes_, f, this)
    {
    }

    ActualProductTraceabilityType::
    ActualProductTraceabilityType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SampleNumber_ (this),
      LotNumber_ (this),
      ReportNumber_ (this),
      ManufacturingProcessId_ (this),
      FixtureId_ (this),
      NotableEventIds_ (this),
      NotedEventIds_ (this),
      InspectionStart_ (this),
      InspectionEnd_ (this),
      InspectionSoftwareItems_ (this),
      InspectionProgram_ (this),
      InspectionOperator_ (this),
      MeasurementDeviceIds_ (this),
      ProductEnvironments_ (this),
      Errors_ (this),
      Attributes_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ActualProductTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SampleNumber
        //
        if (n.name () == L"SampleNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SampleNumber_type > r (
            SampleNumber_traits::create (i, f, this));

          if (!this->SampleNumber_)
          {
            this->SampleNumber_.set (::std::move (r));
            continue;
          }
        }

        // LotNumber
        //
        if (n.name () == L"LotNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LotNumber_type > r (
            LotNumber_traits::create (i, f, this));

          if (!this->LotNumber_)
          {
            this->LotNumber_.set (::std::move (r));
            continue;
          }
        }

        // ReportNumber
        //
        if (n.name () == L"ReportNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReportNumber_type > r (
            ReportNumber_traits::create (i, f, this));

          if (!this->ReportNumber_)
          {
            this->ReportNumber_.set (::std::move (r));
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == L"ManufacturingProcessId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (::std::move (r));
            continue;
          }
        }

        // FixtureId
        //
        if (n.name () == L"FixtureId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FixtureId_type > r (
            FixtureId_traits::create (i, f, this));

          if (!this->FixtureId_)
          {
            this->FixtureId_.set (::std::move (r));
            continue;
          }
        }

        // NotableEventIds
        //
        if (n.name () == L"NotableEventIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotableEventIds_type > r (
            NotableEventIds_traits::create (i, f, this));

          if (!this->NotableEventIds_)
          {
            this->NotableEventIds_.set (::std::move (r));
            continue;
          }
        }

        // NotedEventIds
        //
        if (n.name () == L"NotedEventIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotedEventIds_type > r (
            NotedEventIds_traits::create (i, f, this));

          if (!this->NotedEventIds_)
          {
            this->NotedEventIds_.set (::std::move (r));
            continue;
          }
        }

        // InspectionStart
        //
        if (n.name () == L"InspectionStart" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionStart_type > r (
            InspectionStart_traits::create (i, f, this));

          if (!this->InspectionStart_)
          {
            this->InspectionStart_.set (::std::move (r));
            continue;
          }
        }

        // InspectionEnd
        //
        if (n.name () == L"InspectionEnd" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionEnd_type > r (
            InspectionEnd_traits::create (i, f, this));

          if (!this->InspectionEnd_)
          {
            this->InspectionEnd_.set (::std::move (r));
            continue;
          }
        }

        // InspectionSoftwareItems
        //
        if (n.name () == L"InspectionSoftwareItems" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionSoftwareItems_type > r (
            InspectionSoftwareItems_traits::create (i, f, this));

          if (!this->InspectionSoftwareItems_)
          {
            this->InspectionSoftwareItems_.set (::std::move (r));
            continue;
          }
        }

        // InspectionProgram
        //
        if (n.name () == L"InspectionProgram" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionProgram_type > r (
            InspectionProgram_traits::create (i, f, this));

          if (!this->InspectionProgram_)
          {
            this->InspectionProgram_.set (::std::move (r));
            continue;
          }
        }

        // InspectionOperator
        //
        if (n.name () == L"InspectionOperator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< InspectionOperator_type > r (
            InspectionOperator_traits::create (i, f, this));

          if (!this->InspectionOperator_)
          {
            this->InspectionOperator_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == L"MeasurementDeviceIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (::std::move (r));
            continue;
          }
        }

        // ProductEnvironments
        //
        if (n.name () == L"ProductEnvironments" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProductEnvironments_type > r (
            ProductEnvironments_traits::create (i, f, this));

          if (!this->ProductEnvironments_)
          {
            this->ProductEnvironments_.set (::std::move (r));
            continue;
          }
        }

        // Errors
        //
        if (n.name () == L"Errors" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Errors_type > r (
            Errors_traits::create (i, f, this));

          if (!this->Errors_)
          {
            this->Errors_.set (::std::move (r));
            continue;
          }
        }

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ActualProductTraceabilityType* ActualProductTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualProductTraceabilityType (*this, f, c);
    }

    ActualProductTraceabilityType& ActualProductTraceabilityType::
    operator= (const ActualProductTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->SampleNumber_ = x.SampleNumber_;
        this->LotNumber_ = x.LotNumber_;
        this->ReportNumber_ = x.ReportNumber_;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
        this->FixtureId_ = x.FixtureId_;
        this->NotableEventIds_ = x.NotableEventIds_;
        this->NotedEventIds_ = x.NotedEventIds_;
        this->InspectionStart_ = x.InspectionStart_;
        this->InspectionEnd_ = x.InspectionEnd_;
        this->InspectionSoftwareItems_ = x.InspectionSoftwareItems_;
        this->InspectionProgram_ = x.InspectionProgram_;
        this->InspectionOperator_ = x.InspectionOperator_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->ProductEnvironments_ = x.ProductEnvironments_;
        this->Errors_ = x.Errors_;
        this->Attributes_ = x.Attributes_;
      }

      return *this;
    }

    ActualProductTraceabilityType::
    ~ActualProductTraceabilityType ()
    {
    }

    // ProcessParameterType
    //

    ProcessParameterType::
    ProcessParameterType ()
    : ::xml_schema::type (),
      ParameterType_ (this),
      ParameterValue_ (this)
    {
    }

    ProcessParameterType::
    ProcessParameterType (const ParameterType_type& ParameterType,
                          const ParameterValue_type& ParameterValue)
    : ::xml_schema::type (),
      ParameterType_ (ParameterType, this),
      ParameterValue_ (ParameterValue, this)
    {
    }

    ProcessParameterType::
    ProcessParameterType (const ProcessParameterType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ParameterType_ (x.ParameterType_, f, this),
      ParameterValue_ (x.ParameterValue_, f, this)
    {
    }

    ProcessParameterType::
    ProcessParameterType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ParameterType_ (this),
      ParameterValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProcessParameterType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ParameterType
        //
        if (n.name () == L"ParameterType" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ParameterType_type > r (
            ParameterType_traits::create (i, f, this));

          if (!ParameterType_.present ())
          {
            this->ParameterType_.set (::std::move (r));
            continue;
          }
        }

        // ParameterValue
        //
        if (n.name () == L"ParameterValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ParameterValue_type > r (
            ParameterValue_traits::create (i, f, this));

          if (!ParameterValue_.present ())
          {
            this->ParameterValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ParameterType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ParameterType",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ParameterValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ParameterValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ProcessParameterType* ProcessParameterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProcessParameterType (*this, f, c);
    }

    ProcessParameterType& ProcessParameterType::
    operator= (const ProcessParameterType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ParameterType_ = x.ParameterType_;
        this->ParameterValue_ = x.ParameterValue_;
      }

      return *this;
    }

    ProcessParameterType::
    ~ProcessParameterType ()
    {
    }

    // ProcessParametersType
    //

    ProcessParametersType::
    ProcessParametersType ()
    : ::xml_schema::type (),
      Parameter_ (this),
      n_ (this)
    {
    }

    ProcessParametersType::
    ProcessParametersType (const n_type& n)
    : ::xml_schema::type (),
      Parameter_ (this),
      n_ (n, this)
    {
    }

    ProcessParametersType::
    ProcessParametersType (const ProcessParametersType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Parameter_ (x.Parameter_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ProcessParametersType::
    ProcessParametersType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Parameter_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProcessParametersType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Parameter
        //
        if (n.name () == L"Parameter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Parameter_type > r (
            Parameter_traits::create (i, f, this));

          this->Parameter_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ProcessParametersType* ProcessParametersType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProcessParametersType (*this, f, c);
    }

    ProcessParametersType& ProcessParametersType::
    operator= (const ProcessParametersType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Parameter_ = x.Parameter_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ProcessParametersType::
    ~ProcessParametersType ()
    {
    }

    // ManufacturingProcessTraceabilityType
    //

    ManufacturingProcessTraceabilityType::
    ManufacturingProcessTraceabilityType ()
    : ::xml_schema::type (),
      Attributes_ (this),
      Description_ (this),
      Job_ (this),
      Revision_ (this),
      PreviousOperationId_ (this),
      Path_ (this),
      MachineManufacturerName_ (this),
      MachineIdentifier_ (this),
      OperatorIdentifier_ (this),
      Shift_ (this),
      Department_ (this),
      ResponsibilityIdentifier_ (this),
      PlantSector_ (this),
      ProcessParameters_ (this),
      AssociatedTraceabilityId_ (this),
      id_ (this)
    {
    }

    ManufacturingProcessTraceabilityType::
    ManufacturingProcessTraceabilityType (const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      Description_ (this),
      Job_ (this),
      Revision_ (this),
      PreviousOperationId_ (this),
      Path_ (this),
      MachineManufacturerName_ (this),
      MachineIdentifier_ (this),
      OperatorIdentifier_ (this),
      Shift_ (this),
      Department_ (this),
      ResponsibilityIdentifier_ (this),
      PlantSector_ (this),
      ProcessParameters_ (this),
      AssociatedTraceabilityId_ (this),
      id_ (id, this)
    {
    }

    ManufacturingProcessTraceabilityType::
    ManufacturingProcessTraceabilityType (const ManufacturingProcessTraceabilityType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      Description_ (x.Description_, f, this),
      Job_ (x.Job_, f, this),
      Revision_ (x.Revision_, f, this),
      PreviousOperationId_ (x.PreviousOperationId_, f, this),
      Path_ (x.Path_, f, this),
      MachineManufacturerName_ (x.MachineManufacturerName_, f, this),
      MachineIdentifier_ (x.MachineIdentifier_, f, this),
      OperatorIdentifier_ (x.OperatorIdentifier_, f, this),
      Shift_ (x.Shift_, f, this),
      Department_ (x.Department_, f, this),
      ResponsibilityIdentifier_ (x.ResponsibilityIdentifier_, f, this),
      PlantSector_ (x.PlantSector_, f, this),
      ProcessParameters_ (x.ProcessParameters_, f, this),
      AssociatedTraceabilityId_ (x.AssociatedTraceabilityId_, f, this),
      id_ (x.id_, f, this)
    {
    }

    ManufacturingProcessTraceabilityType::
    ManufacturingProcessTraceabilityType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      Description_ (this),
      Job_ (this),
      Revision_ (this),
      PreviousOperationId_ (this),
      Path_ (this),
      MachineManufacturerName_ (this),
      MachineIdentifier_ (this),
      OperatorIdentifier_ (this),
      Shift_ (this),
      Department_ (this),
      ResponsibilityIdentifier_ (this),
      PlantSector_ (this),
      ProcessParameters_ (this),
      AssociatedTraceabilityId_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ManufacturingProcessTraceabilityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        // Description
        //
        if (n.name () == L"Description" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (::std::move (r));
            continue;
          }
        }

        // Job
        //
        if (n.name () == L"Job" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Job_type > r (
            Job_traits::create (i, f, this));

          if (!this->Job_)
          {
            this->Job_.set (::std::move (r));
            continue;
          }
        }

        // Revision
        //
        if (n.name () == L"Revision" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Revision_type > r (
            Revision_traits::create (i, f, this));

          if (!this->Revision_)
          {
            this->Revision_.set (::std::move (r));
            continue;
          }
        }

        // PreviousOperationId
        //
        if (n.name () == L"PreviousOperationId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PreviousOperationId_type > r (
            PreviousOperationId_traits::create (i, f, this));

          if (!this->PreviousOperationId_)
          {
            this->PreviousOperationId_.set (::std::move (r));
            continue;
          }
        }

        // Path
        //
        if (n.name () == L"Path" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Path_type > r (
            Path_traits::create (i, f, this));

          if (!this->Path_)
          {
            this->Path_.set (::std::move (r));
            continue;
          }
        }

        // MachineManufacturerName
        //
        if (n.name () == L"MachineManufacturerName" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MachineManufacturerName_type > r (
            MachineManufacturerName_traits::create (i, f, this));

          if (!this->MachineManufacturerName_)
          {
            this->MachineManufacturerName_.set (::std::move (r));
            continue;
          }
        }

        // MachineIdentifier
        //
        if (n.name () == L"MachineIdentifier" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MachineIdentifier_type > r (
            MachineIdentifier_traits::create (i, f, this));

          if (!this->MachineIdentifier_)
          {
            this->MachineIdentifier_.set (::std::move (r));
            continue;
          }
        }

        // OperatorIdentifier
        //
        if (n.name () == L"OperatorIdentifier" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OperatorIdentifier_type > r (
            OperatorIdentifier_traits::create (i, f, this));

          if (!this->OperatorIdentifier_)
          {
            this->OperatorIdentifier_.set (::std::move (r));
            continue;
          }
        }

        // Shift
        //
        if (n.name () == L"Shift" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Shift_type > r (
            Shift_traits::create (i, f, this));

          if (!this->Shift_)
          {
            this->Shift_.set (::std::move (r));
            continue;
          }
        }

        // Department
        //
        if (n.name () == L"Department" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Department_type > r (
            Department_traits::create (i, f, this));

          if (!this->Department_)
          {
            this->Department_.set (::std::move (r));
            continue;
          }
        }

        // ResponsibilityIdentifier
        //
        if (n.name () == L"ResponsibilityIdentifier" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ResponsibilityIdentifier_type > r (
            ResponsibilityIdentifier_traits::create (i, f, this));

          if (!this->ResponsibilityIdentifier_)
          {
            this->ResponsibilityIdentifier_.set (::std::move (r));
            continue;
          }
        }

        // PlantSector
        //
        if (n.name () == L"PlantSector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PlantSector_type > r (
            PlantSector_traits::create (i, f, this));

          if (!this->PlantSector_)
          {
            this->PlantSector_.set (::std::move (r));
            continue;
          }
        }

        // ProcessParameters
        //
        if (n.name () == L"ProcessParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProcessParameters_type > r (
            ProcessParameters_traits::create (i, f, this));

          if (!this->ProcessParameters_)
          {
            this->ProcessParameters_.set (::std::move (r));
            continue;
          }
        }

        // AssociatedTraceabilityId
        //
        if (n.name () == L"AssociatedTraceabilityId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AssociatedTraceabilityId_type > r (
            AssociatedTraceabilityId_traits::create (i, f, this));

          if (!this->AssociatedTraceabilityId_)
          {
            this->AssociatedTraceabilityId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    ManufacturingProcessTraceabilityType* ManufacturingProcessTraceabilityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ManufacturingProcessTraceabilityType (*this, f, c);
    }

    ManufacturingProcessTraceabilityType& ManufacturingProcessTraceabilityType::
    operator= (const ManufacturingProcessTraceabilityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->Description_ = x.Description_;
        this->Job_ = x.Job_;
        this->Revision_ = x.Revision_;
        this->PreviousOperationId_ = x.PreviousOperationId_;
        this->Path_ = x.Path_;
        this->MachineManufacturerName_ = x.MachineManufacturerName_;
        this->MachineIdentifier_ = x.MachineIdentifier_;
        this->OperatorIdentifier_ = x.OperatorIdentifier_;
        this->Shift_ = x.Shift_;
        this->Department_ = x.Department_;
        this->ResponsibilityIdentifier_ = x.ResponsibilityIdentifier_;
        this->PlantSector_ = x.PlantSector_;
        this->ProcessParameters_ = x.ProcessParameters_;
        this->AssociatedTraceabilityId_ = x.AssociatedTraceabilityId_;
        this->id_ = x.id_;
      }

      return *this;
    }

    ManufacturingProcessTraceabilityType::
    ~ManufacturingProcessTraceabilityType ()
    {
    }

    // ManufacturingProcessTraceabilitiesType
    //

    ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceabilitiesType ()
    : ::xml_schema::type (),
      ManufacturingProcessTraceability_ (this),
      n_ (this)
    {
    }

    ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceabilitiesType (const n_type& n)
    : ::xml_schema::type (),
      ManufacturingProcessTraceability_ (this),
      n_ (n, this)
    {
    }

    ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceabilitiesType (const ManufacturingProcessTraceabilitiesType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ManufacturingProcessTraceability_ (x.ManufacturingProcessTraceability_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ManufacturingProcessTraceabilitiesType::
    ManufacturingProcessTraceabilitiesType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ManufacturingProcessTraceability_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ManufacturingProcessTraceabilitiesType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ManufacturingProcessTraceability
        //
        if (n.name () == L"ManufacturingProcessTraceability" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ManufacturingProcessTraceability_type > r (
            ManufacturingProcessTraceability_traits::create (i, f, this));

          this->ManufacturingProcessTraceability_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ManufacturingProcessTraceabilitiesType* ManufacturingProcessTraceabilitiesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ManufacturingProcessTraceabilitiesType (*this, f, c);
    }

    ManufacturingProcessTraceabilitiesType& ManufacturingProcessTraceabilitiesType::
    operator= (const ManufacturingProcessTraceabilitiesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ManufacturingProcessTraceability_ = x.ManufacturingProcessTraceability_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ManufacturingProcessTraceabilitiesType::
    ~ManufacturingProcessTraceabilitiesType ()
    {
    }

    // ErrorsType
    //

    ErrorsType::
    ErrorsType ()
    : ::xml_schema::type (),
      Error_ (this),
      n_ (this)
    {
    }

    ErrorsType::
    ErrorsType (const n_type& n)
    : ::xml_schema::type (),
      Error_ (this),
      n_ (n, this)
    {
    }

    ErrorsType::
    ErrorsType (const ErrorsType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Error_ (x.Error_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ErrorsType::
    ErrorsType (const xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Error_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ErrorsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Error
        //
        if (n.name () == L"Error" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Error_type > r (
            Error_traits::create (i, f, this));

          this->Error_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ErrorsType* ErrorsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ErrorsType (*this, f, c);
    }

    ErrorsType& ErrorsType::
    operator= (const ErrorsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Error_ = x.Error_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ErrorsType::
    ~ErrorsType ()
    {
    }

    // PartialInspectionType
    //

    PartialInspectionType::
    PartialInspectionType ()
    : ::xml_schema::type (),
      BaselineProductNumber_ (this),
      BaselineProductVersion_ (this),
      ReasonForPartialInspection_ (this)
    {
    }

    PartialInspectionType::
    PartialInspectionType (const BaselineProductNumber_type& BaselineProductNumber,
                           const ReasonForPartialInspection_type& ReasonForPartialInspection)
    : ::xml_schema::type (),
      BaselineProductNumber_ (BaselineProductNumber, this),
      BaselineProductVersion_ (this),
      ReasonForPartialInspection_ (ReasonForPartialInspection, this)
    {
    }

    PartialInspectionType::
    PartialInspectionType (const PartialInspectionType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      BaselineProductNumber_ (x.BaselineProductNumber_, f, this),
      BaselineProductVersion_ (x.BaselineProductVersion_, f, this),
      ReasonForPartialInspection_ (x.ReasonForPartialInspection_, f, this)
    {
    }

    PartialInspectionType::
    PartialInspectionType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      BaselineProductNumber_ (this),
      BaselineProductVersion_ (this),
      ReasonForPartialInspection_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PartialInspectionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // BaselineProductNumber
        //
        if (n.name () == L"BaselineProductNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BaselineProductNumber_type > r (
            BaselineProductNumber_traits::create (i, f, this));

          if (!BaselineProductNumber_.present ())
          {
            this->BaselineProductNumber_.set (::std::move (r));
            continue;
          }
        }

        // BaselineProductVersion
        //
        if (n.name () == L"BaselineProductVersion" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BaselineProductVersion_type > r (
            BaselineProductVersion_traits::create (i, f, this));

          if (!this->BaselineProductVersion_)
          {
            this->BaselineProductVersion_.set (::std::move (r));
            continue;
          }
        }

        // ReasonForPartialInspection
        //
        if (n.name () == L"ReasonForPartialInspection" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReasonForPartialInspection_type > r (
            ReasonForPartialInspection_traits::create (i, f, this));

          if (!ReasonForPartialInspection_.present ())
          {
            this->ReasonForPartialInspection_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!BaselineProductNumber_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"BaselineProductNumber",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ReasonForPartialInspection_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ReasonForPartialInspection",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    PartialInspectionType* PartialInspectionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PartialInspectionType (*this, f, c);
    }

    PartialInspectionType& PartialInspectionType::
    operator= (const PartialInspectionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->BaselineProductNumber_ = x.BaselineProductNumber_;
        this->BaselineProductVersion_ = x.BaselineProductVersion_;
        this->ReasonForPartialInspection_ = x.ReasonForPartialInspection_;
      }

      return *this;
    }

    PartialInspectionType::
    ~PartialInspectionType ()
    {
    }

    // TimeDescriptionEnumType
    //

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_TimeDescriptionEnumType_convert ();
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_TimeDescriptionEnumType_convert ();
    }

    TimeDescriptionEnumType::
    TimeDescriptionEnumType (const ::std::wstring& s,
                             const xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_TimeDescriptionEnumType_convert ();
    }

    TimeDescriptionEnumType* TimeDescriptionEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeDescriptionEnumType (*this, f, c);
    }

    TimeDescriptionEnumType::value TimeDescriptionEnumType::
    _xsd_TimeDescriptionEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_TimeDescriptionEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_TimeDescriptionEnumType_indexes_,
                        _xsd_TimeDescriptionEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_TimeDescriptionEnumType_indexes_ + 3 || _xsd_TimeDescriptionEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const TimeDescriptionEnumType::
    _xsd_TimeDescriptionEnumType_literals_[3] =
    {
      L"INSPECTION_START",
      L"INSPECTION_END",
      L"INTERMEDIATE"
    };

    const TimeDescriptionEnumType::value TimeDescriptionEnumType::
    _xsd_TimeDescriptionEnumType_indexes_[3] =
    {
      ::xsd::qif30::TimeDescriptionEnumType::INSPECTION_END,
      ::xsd::qif30::TimeDescriptionEnumType::INSPECTION_START,
      ::xsd::qif30::TimeDescriptionEnumType::INTERMEDIATE
    };

    // TimeDescriptionType
    //

    TimeDescriptionType::
    TimeDescriptionType ()
    : ::xml_schema::type (),
      TimeDescriptionEnum_ (this),
      OtherTimeDescription_ (this)
    {
    }

    TimeDescriptionType::
    TimeDescriptionType (const TimeDescriptionType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      TimeDescriptionEnum_ (x.TimeDescriptionEnum_, f, this),
      OtherTimeDescription_ (x.OtherTimeDescription_, f, this)
    {
    }

    TimeDescriptionType::
    TimeDescriptionType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      TimeDescriptionEnum_ (this),
      OtherTimeDescription_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void TimeDescriptionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TimeDescriptionEnum
        //
        if (n.name () == L"TimeDescriptionEnum" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TimeDescriptionEnum_type > r (
            TimeDescriptionEnum_traits::create (i, f, this));

          if (!this->TimeDescriptionEnum_)
          {
            this->TimeDescriptionEnum_.set (::std::move (r));
            continue;
          }
        }

        // OtherTimeDescription
        //
        if (n.name () == L"OtherTimeDescription" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherTimeDescription_type > r (
            OtherTimeDescription_traits::create (i, f, this));

          if (!this->OtherTimeDescription_)
          {
            this->OtherTimeDescription_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    TimeDescriptionType* TimeDescriptionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeDescriptionType (*this, f, c);
    }

    TimeDescriptionType& TimeDescriptionType::
    operator= (const TimeDescriptionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->TimeDescriptionEnum_ = x.TimeDescriptionEnum_;
        this->OtherTimeDescription_ = x.OtherTimeDescription_;
      }

      return *this;
    }

    TimeDescriptionType::
    ~TimeDescriptionType ()
    {
    }

    // InspectionModeEnumType
    //

    InspectionModeEnumType::
    InspectionModeEnumType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_InspectionModeEnumType_convert ();
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_InspectionModeEnumType_convert ();
    }

    InspectionModeEnumType::
    InspectionModeEnumType (const ::std::wstring& s,
                            const xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_InspectionModeEnumType_convert ();
    }

    InspectionModeEnumType* InspectionModeEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionModeEnumType (*this, f, c);
    }

    InspectionModeEnumType::value InspectionModeEnumType::
    _xsd_InspectionModeEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_InspectionModeEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_InspectionModeEnumType_indexes_,
                        _xsd_InspectionModeEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_InspectionModeEnumType_indexes_ + 6 || _xsd_InspectionModeEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const InspectionModeEnumType::
    _xsd_InspectionModeEnumType_literals_[6] =
    {
      L"FAI_Full",
      L"FAI_Partial",
      L"100Percent",
      L"APQP",
      L"KPC",
      L"PPAP"
    };

    const InspectionModeEnumType::value InspectionModeEnumType::
    _xsd_InspectionModeEnumType_indexes_[6] =
    {
      ::xsd::qif30::InspectionModeEnumType::cxx_100Percent,
      ::xsd::qif30::InspectionModeEnumType::APQP,
      ::xsd::qif30::InspectionModeEnumType::FAI_Full,
      ::xsd::qif30::InspectionModeEnumType::FAI_Partial,
      ::xsd::qif30::InspectionModeEnumType::KPC,
      ::xsd::qif30::InspectionModeEnumType::PPAP
    };

    // InspectionScopeEnumType
    //

    InspectionScopeEnumType::
    InspectionScopeEnumType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_InspectionScopeEnumType_convert ();
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_InspectionScopeEnumType_convert ();
    }

    InspectionScopeEnumType::
    InspectionScopeEnumType (const ::std::wstring& s,
                             const xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_InspectionScopeEnumType_convert ();
    }

    InspectionScopeEnumType* InspectionScopeEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class InspectionScopeEnumType (*this, f, c);
    }

    InspectionScopeEnumType::value InspectionScopeEnumType::
    _xsd_InspectionScopeEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_InspectionScopeEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_InspectionScopeEnumType_indexes_,
                        _xsd_InspectionScopeEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_InspectionScopeEnumType_indexes_ + 2 || _xsd_InspectionScopeEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const InspectionScopeEnumType::
    _xsd_InspectionScopeEnumType_literals_[2] =
    {
      L"DETAIL",
      L"ASSEMBLY"
    };

    const InspectionScopeEnumType::value InspectionScopeEnumType::
    _xsd_InspectionScopeEnumType_indexes_[2] =
    {
      ::xsd::qif30::InspectionScopeEnumType::ASSEMBLY,
      ::xsd::qif30::InspectionScopeEnumType::DETAIL
    };

    // ValidationCountsType
    //

    ValidationCountsType::
    ValidationCountsType ()
    : ::xml_schema::type (),
      ExternalQIFReferencesCount_ (this),
      DatumDefinitionsCount_ (this),
      DatumTargetDefinitionsCount_ (this),
      TransformsCount_ (this),
      CoordinateSystemsCount_ (this),
      DatumReferenceFramesCount_ (this),
      MeasurementResourcesCount_ (this),
      ThreadSpecificationsCount_ (this),
      ProductGeometrySetCount_ (this),
      ProductTopologySetCount_ (this),
      ProductNoteSetCount_ (this),
      ProductNoteFlagSetCount_ (this),
      ProductPartNoteSetCount_ (this),
      ProductViewSetCount_ (this),
      ProductLayerSetCount_ (this),
      ProductCoordinateSystemSetCount_ (this),
      ProductVisualizationSetCount_ (this),
      ProductAuxiliarySetCount_ (this),
      ProductPartSetCount_ (this),
      ProductAssemblySetCount_ (this),
      ProductComponentSetCount_ (this),
      ProductAsmPathsCount_ (this),
      FeatureDefinitionsCount_ (this),
      FeatureNominalsCount_ (this),
      FeatureItemsCount_ (this),
      CharacteristicDefinitionsCount_ (this),
      DefaultCharacteristicDefinitionsCount_ (this),
      DefaultToleranceDefinitionsCount_ (this),
      CharacteristicNominalsCount_ (this),
      CharacteristicItemsCount_ (this),
      CharacteristicGroupsCount_ (this),
      WeldSymbolSetCount_ (this),
      MeasurementsPlanPresent_ (this),
      MeasurementsResultsCount_ (this),
      StatisticalStudyPlansCount_ (this),
      StatisticalStudiesResultsCount_ (this),
      CorrectiveActionPlansCount_ (this),
      ManufacturingProcessTraceabilitiesCount_ (this),
      FeatureRulesCount_ (this),
      DMESelectionRulesCount_ (this),
      SignaturePresent_ (this)
    {
    }

    ValidationCountsType::
    ValidationCountsType (const ValidationCountsType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ExternalQIFReferencesCount_ (x.ExternalQIFReferencesCount_, f, this),
      DatumDefinitionsCount_ (x.DatumDefinitionsCount_, f, this),
      DatumTargetDefinitionsCount_ (x.DatumTargetDefinitionsCount_, f, this),
      TransformsCount_ (x.TransformsCount_, f, this),
      CoordinateSystemsCount_ (x.CoordinateSystemsCount_, f, this),
      DatumReferenceFramesCount_ (x.DatumReferenceFramesCount_, f, this),
      MeasurementResourcesCount_ (x.MeasurementResourcesCount_, f, this),
      ThreadSpecificationsCount_ (x.ThreadSpecificationsCount_, f, this),
      ProductGeometrySetCount_ (x.ProductGeometrySetCount_, f, this),
      ProductTopologySetCount_ (x.ProductTopologySetCount_, f, this),
      ProductNoteSetCount_ (x.ProductNoteSetCount_, f, this),
      ProductNoteFlagSetCount_ (x.ProductNoteFlagSetCount_, f, this),
      ProductPartNoteSetCount_ (x.ProductPartNoteSetCount_, f, this),
      ProductViewSetCount_ (x.ProductViewSetCount_, f, this),
      ProductLayerSetCount_ (x.ProductLayerSetCount_, f, this),
      ProductCoordinateSystemSetCount_ (x.ProductCoordinateSystemSetCount_, f, this),
      ProductVisualizationSetCount_ (x.ProductVisualizationSetCount_, f, this),
      ProductAuxiliarySetCount_ (x.ProductAuxiliarySetCount_, f, this),
      ProductPartSetCount_ (x.ProductPartSetCount_, f, this),
      ProductAssemblySetCount_ (x.ProductAssemblySetCount_, f, this),
      ProductComponentSetCount_ (x.ProductComponentSetCount_, f, this),
      ProductAsmPathsCount_ (x.ProductAsmPathsCount_, f, this),
      FeatureDefinitionsCount_ (x.FeatureDefinitionsCount_, f, this),
      FeatureNominalsCount_ (x.FeatureNominalsCount_, f, this),
      FeatureItemsCount_ (x.FeatureItemsCount_, f, this),
      CharacteristicDefinitionsCount_ (x.CharacteristicDefinitionsCount_, f, this),
      DefaultCharacteristicDefinitionsCount_ (x.DefaultCharacteristicDefinitionsCount_, f, this),
      DefaultToleranceDefinitionsCount_ (x.DefaultToleranceDefinitionsCount_, f, this),
      CharacteristicNominalsCount_ (x.CharacteristicNominalsCount_, f, this),
      CharacteristicItemsCount_ (x.CharacteristicItemsCount_, f, this),
      CharacteristicGroupsCount_ (x.CharacteristicGroupsCount_, f, this),
      WeldSymbolSetCount_ (x.WeldSymbolSetCount_, f, this),
      MeasurementsPlanPresent_ (x.MeasurementsPlanPresent_, f, this),
      MeasurementsResultsCount_ (x.MeasurementsResultsCount_, f, this),
      StatisticalStudyPlansCount_ (x.StatisticalStudyPlansCount_, f, this),
      StatisticalStudiesResultsCount_ (x.StatisticalStudiesResultsCount_, f, this),
      CorrectiveActionPlansCount_ (x.CorrectiveActionPlansCount_, f, this),
      ManufacturingProcessTraceabilitiesCount_ (x.ManufacturingProcessTraceabilitiesCount_, f, this),
      FeatureRulesCount_ (x.FeatureRulesCount_, f, this),
      DMESelectionRulesCount_ (x.DMESelectionRulesCount_, f, this),
      SignaturePresent_ (x.SignaturePresent_, f, this)
    {
    }

    ValidationCountsType::
    ValidationCountsType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ExternalQIFReferencesCount_ (this),
      DatumDefinitionsCount_ (this),
      DatumTargetDefinitionsCount_ (this),
      TransformsCount_ (this),
      CoordinateSystemsCount_ (this),
      DatumReferenceFramesCount_ (this),
      MeasurementResourcesCount_ (this),
      ThreadSpecificationsCount_ (this),
      ProductGeometrySetCount_ (this),
      ProductTopologySetCount_ (this),
      ProductNoteSetCount_ (this),
      ProductNoteFlagSetCount_ (this),
      ProductPartNoteSetCount_ (this),
      ProductViewSetCount_ (this),
      ProductLayerSetCount_ (this),
      ProductCoordinateSystemSetCount_ (this),
      ProductVisualizationSetCount_ (this),
      ProductAuxiliarySetCount_ (this),
      ProductPartSetCount_ (this),
      ProductAssemblySetCount_ (this),
      ProductComponentSetCount_ (this),
      ProductAsmPathsCount_ (this),
      FeatureDefinitionsCount_ (this),
      FeatureNominalsCount_ (this),
      FeatureItemsCount_ (this),
      CharacteristicDefinitionsCount_ (this),
      DefaultCharacteristicDefinitionsCount_ (this),
      DefaultToleranceDefinitionsCount_ (this),
      CharacteristicNominalsCount_ (this),
      CharacteristicItemsCount_ (this),
      CharacteristicGroupsCount_ (this),
      WeldSymbolSetCount_ (this),
      MeasurementsPlanPresent_ (this),
      MeasurementsResultsCount_ (this),
      StatisticalStudyPlansCount_ (this),
      StatisticalStudiesResultsCount_ (this),
      CorrectiveActionPlansCount_ (this),
      ManufacturingProcessTraceabilitiesCount_ (this),
      FeatureRulesCount_ (this),
      DMESelectionRulesCount_ (this),
      SignaturePresent_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ValidationCountsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ExternalQIFReferencesCount
        //
        if (n.name () == L"ExternalQIFReferencesCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ExternalQIFReferencesCount_)
          {
            this->ExternalQIFReferencesCount_.set (ExternalQIFReferencesCount_traits::create (i, f, this));
            continue;
          }
        }

        // DatumDefinitionsCount
        //
        if (n.name () == L"DatumDefinitionsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DatumDefinitionsCount_)
          {
            this->DatumDefinitionsCount_.set (DatumDefinitionsCount_traits::create (i, f, this));
            continue;
          }
        }

        // DatumTargetDefinitionsCount
        //
        if (n.name () == L"DatumTargetDefinitionsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DatumTargetDefinitionsCount_)
          {
            this->DatumTargetDefinitionsCount_.set (DatumTargetDefinitionsCount_traits::create (i, f, this));
            continue;
          }
        }

        // TransformsCount
        //
        if (n.name () == L"TransformsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->TransformsCount_)
          {
            this->TransformsCount_.set (TransformsCount_traits::create (i, f, this));
            continue;
          }
        }

        // CoordinateSystemsCount
        //
        if (n.name () == L"CoordinateSystemsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CoordinateSystemsCount_)
          {
            this->CoordinateSystemsCount_.set (CoordinateSystemsCount_traits::create (i, f, this));
            continue;
          }
        }

        // DatumReferenceFramesCount
        //
        if (n.name () == L"DatumReferenceFramesCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DatumReferenceFramesCount_)
          {
            this->DatumReferenceFramesCount_.set (DatumReferenceFramesCount_traits::create (i, f, this));
            continue;
          }
        }

        // MeasurementResourcesCount
        //
        if (n.name () == L"MeasurementResourcesCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->MeasurementResourcesCount_)
          {
            this->MeasurementResourcesCount_.set (MeasurementResourcesCount_traits::create (i, f, this));
            continue;
          }
        }

        // ThreadSpecificationsCount
        //
        if (n.name () == L"ThreadSpecificationsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ThreadSpecificationsCount_)
          {
            this->ThreadSpecificationsCount_.set (ThreadSpecificationsCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductGeometrySetCount
        //
        if (n.name () == L"ProductGeometrySetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductGeometrySetCount_)
          {
            this->ProductGeometrySetCount_.set (ProductGeometrySetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductTopologySetCount
        //
        if (n.name () == L"ProductTopologySetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductTopologySetCount_)
          {
            this->ProductTopologySetCount_.set (ProductTopologySetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductNoteSetCount
        //
        if (n.name () == L"ProductNoteSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductNoteSetCount_)
          {
            this->ProductNoteSetCount_.set (ProductNoteSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductNoteFlagSetCount
        //
        if (n.name () == L"ProductNoteFlagSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductNoteFlagSetCount_)
          {
            this->ProductNoteFlagSetCount_.set (ProductNoteFlagSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductPartNoteSetCount
        //
        if (n.name () == L"ProductPartNoteSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductPartNoteSetCount_)
          {
            this->ProductPartNoteSetCount_.set (ProductPartNoteSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductViewSetCount
        //
        if (n.name () == L"ProductViewSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductViewSetCount_)
          {
            this->ProductViewSetCount_.set (ProductViewSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductLayerSetCount
        //
        if (n.name () == L"ProductLayerSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductLayerSetCount_)
          {
            this->ProductLayerSetCount_.set (ProductLayerSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductCoordinateSystemSetCount
        //
        if (n.name () == L"ProductCoordinateSystemSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductCoordinateSystemSetCount_)
          {
            this->ProductCoordinateSystemSetCount_.set (ProductCoordinateSystemSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductVisualizationSetCount
        //
        if (n.name () == L"ProductVisualizationSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductVisualizationSetCount_)
          {
            this->ProductVisualizationSetCount_.set (ProductVisualizationSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductAuxiliarySetCount
        //
        if (n.name () == L"ProductAuxiliarySetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductAuxiliarySetCount_)
          {
            this->ProductAuxiliarySetCount_.set (ProductAuxiliarySetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductPartSetCount
        //
        if (n.name () == L"ProductPartSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductPartSetCount_)
          {
            this->ProductPartSetCount_.set (ProductPartSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductAssemblySetCount
        //
        if (n.name () == L"ProductAssemblySetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductAssemblySetCount_)
          {
            this->ProductAssemblySetCount_.set (ProductAssemblySetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductComponentSetCount
        //
        if (n.name () == L"ProductComponentSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductComponentSetCount_)
          {
            this->ProductComponentSetCount_.set (ProductComponentSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // ProductAsmPathsCount
        //
        if (n.name () == L"ProductAsmPathsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ProductAsmPathsCount_)
          {
            this->ProductAsmPathsCount_.set (ProductAsmPathsCount_traits::create (i, f, this));
            continue;
          }
        }

        // FeatureDefinitionsCount
        //
        if (n.name () == L"FeatureDefinitionsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->FeatureDefinitionsCount_)
          {
            this->FeatureDefinitionsCount_.set (FeatureDefinitionsCount_traits::create (i, f, this));
            continue;
          }
        }

        // FeatureNominalsCount
        //
        if (n.name () == L"FeatureNominalsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->FeatureNominalsCount_)
          {
            this->FeatureNominalsCount_.set (FeatureNominalsCount_traits::create (i, f, this));
            continue;
          }
        }

        // FeatureItemsCount
        //
        if (n.name () == L"FeatureItemsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->FeatureItemsCount_)
          {
            this->FeatureItemsCount_.set (FeatureItemsCount_traits::create (i, f, this));
            continue;
          }
        }

        // CharacteristicDefinitionsCount
        //
        if (n.name () == L"CharacteristicDefinitionsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CharacteristicDefinitionsCount_)
          {
            this->CharacteristicDefinitionsCount_.set (CharacteristicDefinitionsCount_traits::create (i, f, this));
            continue;
          }
        }

        // DefaultCharacteristicDefinitionsCount
        //
        if (n.name () == L"DefaultCharacteristicDefinitionsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DefaultCharacteristicDefinitionsCount_)
          {
            this->DefaultCharacteristicDefinitionsCount_.set (DefaultCharacteristicDefinitionsCount_traits::create (i, f, this));
            continue;
          }
        }

        // DefaultToleranceDefinitionsCount
        //
        if (n.name () == L"DefaultToleranceDefinitionsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DefaultToleranceDefinitionsCount_)
          {
            this->DefaultToleranceDefinitionsCount_.set (DefaultToleranceDefinitionsCount_traits::create (i, f, this));
            continue;
          }
        }

        // CharacteristicNominalsCount
        //
        if (n.name () == L"CharacteristicNominalsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CharacteristicNominalsCount_)
          {
            this->CharacteristicNominalsCount_.set (CharacteristicNominalsCount_traits::create (i, f, this));
            continue;
          }
        }

        // CharacteristicItemsCount
        //
        if (n.name () == L"CharacteristicItemsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CharacteristicItemsCount_)
          {
            this->CharacteristicItemsCount_.set (CharacteristicItemsCount_traits::create (i, f, this));
            continue;
          }
        }

        // CharacteristicGroupsCount
        //
        if (n.name () == L"CharacteristicGroupsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CharacteristicGroupsCount_)
          {
            this->CharacteristicGroupsCount_.set (CharacteristicGroupsCount_traits::create (i, f, this));
            continue;
          }
        }

        // WeldSymbolSetCount
        //
        if (n.name () == L"WeldSymbolSetCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->WeldSymbolSetCount_)
          {
            this->WeldSymbolSetCount_.set (WeldSymbolSetCount_traits::create (i, f, this));
            continue;
          }
        }

        // MeasurementsPlanPresent
        //
        if (n.name () == L"MeasurementsPlanPresent" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->MeasurementsPlanPresent_)
          {
            this->MeasurementsPlanPresent_.set (MeasurementsPlanPresent_traits::create (i, f, this));
            continue;
          }
        }

        // MeasurementsResultsCount
        //
        if (n.name () == L"MeasurementsResultsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->MeasurementsResultsCount_)
          {
            this->MeasurementsResultsCount_.set (MeasurementsResultsCount_traits::create (i, f, this));
            continue;
          }
        }

        // StatisticalStudyPlansCount
        //
        if (n.name () == L"StatisticalStudyPlansCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->StatisticalStudyPlansCount_)
          {
            this->StatisticalStudyPlansCount_.set (StatisticalStudyPlansCount_traits::create (i, f, this));
            continue;
          }
        }

        // StatisticalStudiesResultsCount
        //
        if (n.name () == L"StatisticalStudiesResultsCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->StatisticalStudiesResultsCount_)
          {
            this->StatisticalStudiesResultsCount_.set (StatisticalStudiesResultsCount_traits::create (i, f, this));
            continue;
          }
        }

        // CorrectiveActionPlansCount
        //
        if (n.name () == L"CorrectiveActionPlansCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CorrectiveActionPlansCount_)
          {
            this->CorrectiveActionPlansCount_.set (CorrectiveActionPlansCount_traits::create (i, f, this));
            continue;
          }
        }

        // ManufacturingProcessTraceabilitiesCount
        //
        if (n.name () == L"ManufacturingProcessTraceabilitiesCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ManufacturingProcessTraceabilitiesCount_)
          {
            this->ManufacturingProcessTraceabilitiesCount_.set (ManufacturingProcessTraceabilitiesCount_traits::create (i, f, this));
            continue;
          }
        }

        // FeatureRulesCount
        //
        if (n.name () == L"FeatureRulesCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->FeatureRulesCount_)
          {
            this->FeatureRulesCount_.set (FeatureRulesCount_traits::create (i, f, this));
            continue;
          }
        }

        // DMESelectionRulesCount
        //
        if (n.name () == L"DMESelectionRulesCount" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DMESelectionRulesCount_)
          {
            this->DMESelectionRulesCount_.set (DMESelectionRulesCount_traits::create (i, f, this));
            continue;
          }
        }

        // SignaturePresent
        //
        if (n.name () == L"SignaturePresent" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->SignaturePresent_)
          {
            this->SignaturePresent_.set (SignaturePresent_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    ValidationCountsType* ValidationCountsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ValidationCountsType (*this, f, c);
    }

    ValidationCountsType& ValidationCountsType::
    operator= (const ValidationCountsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ExternalQIFReferencesCount_ = x.ExternalQIFReferencesCount_;
        this->DatumDefinitionsCount_ = x.DatumDefinitionsCount_;
        this->DatumTargetDefinitionsCount_ = x.DatumTargetDefinitionsCount_;
        this->TransformsCount_ = x.TransformsCount_;
        this->CoordinateSystemsCount_ = x.CoordinateSystemsCount_;
        this->DatumReferenceFramesCount_ = x.DatumReferenceFramesCount_;
        this->MeasurementResourcesCount_ = x.MeasurementResourcesCount_;
        this->ThreadSpecificationsCount_ = x.ThreadSpecificationsCount_;
        this->ProductGeometrySetCount_ = x.ProductGeometrySetCount_;
        this->ProductTopologySetCount_ = x.ProductTopologySetCount_;
        this->ProductNoteSetCount_ = x.ProductNoteSetCount_;
        this->ProductNoteFlagSetCount_ = x.ProductNoteFlagSetCount_;
        this->ProductPartNoteSetCount_ = x.ProductPartNoteSetCount_;
        this->ProductViewSetCount_ = x.ProductViewSetCount_;
        this->ProductLayerSetCount_ = x.ProductLayerSetCount_;
        this->ProductCoordinateSystemSetCount_ = x.ProductCoordinateSystemSetCount_;
        this->ProductVisualizationSetCount_ = x.ProductVisualizationSetCount_;
        this->ProductAuxiliarySetCount_ = x.ProductAuxiliarySetCount_;
        this->ProductPartSetCount_ = x.ProductPartSetCount_;
        this->ProductAssemblySetCount_ = x.ProductAssemblySetCount_;
        this->ProductComponentSetCount_ = x.ProductComponentSetCount_;
        this->ProductAsmPathsCount_ = x.ProductAsmPathsCount_;
        this->FeatureDefinitionsCount_ = x.FeatureDefinitionsCount_;
        this->FeatureNominalsCount_ = x.FeatureNominalsCount_;
        this->FeatureItemsCount_ = x.FeatureItemsCount_;
        this->CharacteristicDefinitionsCount_ = x.CharacteristicDefinitionsCount_;
        this->DefaultCharacteristicDefinitionsCount_ = x.DefaultCharacteristicDefinitionsCount_;
        this->DefaultToleranceDefinitionsCount_ = x.DefaultToleranceDefinitionsCount_;
        this->CharacteristicNominalsCount_ = x.CharacteristicNominalsCount_;
        this->CharacteristicItemsCount_ = x.CharacteristicItemsCount_;
        this->CharacteristicGroupsCount_ = x.CharacteristicGroupsCount_;
        this->WeldSymbolSetCount_ = x.WeldSymbolSetCount_;
        this->MeasurementsPlanPresent_ = x.MeasurementsPlanPresent_;
        this->MeasurementsResultsCount_ = x.MeasurementsResultsCount_;
        this->StatisticalStudyPlansCount_ = x.StatisticalStudyPlansCount_;
        this->StatisticalStudiesResultsCount_ = x.StatisticalStudiesResultsCount_;
        this->CorrectiveActionPlansCount_ = x.CorrectiveActionPlansCount_;
        this->ManufacturingProcessTraceabilitiesCount_ = x.ManufacturingProcessTraceabilitiesCount_;
        this->FeatureRulesCount_ = x.FeatureRulesCount_;
        this->DMESelectionRulesCount_ = x.DMESelectionRulesCount_;
        this->SignaturePresent_ = x.SignaturePresent_;
      }

      return *this;
    }

    ValidationCountsType::
    ~ValidationCountsType ()
    {
    }

    // ProductDataQualityAreaEnumType
    //

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ProductDataQualityAreaEnumType_convert ();
    }

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (const xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ProductDataQualityAreaEnumType_convert ();
    }

    ProductDataQualityAreaEnumType::
    ProductDataQualityAreaEnumType (const ::std::wstring& s,
                                    const xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ProductDataQualityAreaEnumType_convert ();
    }

    ProductDataQualityAreaEnumType* ProductDataQualityAreaEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductDataQualityAreaEnumType (*this, f, c);
    }

    ProductDataQualityAreaEnumType::value ProductDataQualityAreaEnumType::
    _xsd_ProductDataQualityAreaEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_ProductDataQualityAreaEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ProductDataQualityAreaEnumType_indexes_,
                        _xsd_ProductDataQualityAreaEnumType_indexes_ + 7,
                        *this,
                        c));

      if (i == _xsd_ProductDataQualityAreaEnumType_indexes_ + 7 || _xsd_ProductDataQualityAreaEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const ProductDataQualityAreaEnumType::
    _xsd_ProductDataQualityAreaEnumType_literals_[7] =
    {
      L"OVERALL",
      L"PRODUCT_GEOMETRIC_DATA",
      L"PRODUCT_MANUFACTURING_INFORMATION",
      L"BUSINESS_PRACTICE",
      L"DESIGN_PRACTICE",
      L"DERIVATIVE_COMPARE",
      L"UNDEFINED"
    };

    const ProductDataQualityAreaEnumType::value ProductDataQualityAreaEnumType::
    _xsd_ProductDataQualityAreaEnumType_indexes_[7] =
    {
      ::xsd::qif30::ProductDataQualityAreaEnumType::BUSINESS_PRACTICE,
      ::xsd::qif30::ProductDataQualityAreaEnumType::DERIVATIVE_COMPARE,
      ::xsd::qif30::ProductDataQualityAreaEnumType::DESIGN_PRACTICE,
      ::xsd::qif30::ProductDataQualityAreaEnumType::OVERALL,
      ::xsd::qif30::ProductDataQualityAreaEnumType::PRODUCT_GEOMETRIC_DATA,
      ::xsd::qif30::ProductDataQualityAreaEnumType::PRODUCT_MANUFACTURING_INFORMATION,
      ::xsd::qif30::ProductDataQualityAreaEnumType::UNDEFINED
    };

    // ProductDataQualityAreaType
    //

    ProductDataQualityAreaType::
    ProductDataQualityAreaType ()
    : ::xml_schema::type (),
      AreaEnum_ (this),
      OtherArea_ (this)
    {
    }

    ProductDataQualityAreaType::
    ProductDataQualityAreaType (const ProductDataQualityAreaType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AreaEnum_ (x.AreaEnum_, f, this),
      OtherArea_ (x.OtherArea_, f, this)
    {
    }

    ProductDataQualityAreaType::
    ProductDataQualityAreaType (const xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AreaEnum_ (this),
      OtherArea_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProductDataQualityAreaType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AreaEnum
        //
        if (n.name () == L"AreaEnum" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AreaEnum_type > r (
            AreaEnum_traits::create (i, f, this));

          if (!this->AreaEnum_)
          {
            this->AreaEnum_.set (::std::move (r));
            continue;
          }
        }

        // OtherArea
        //
        if (n.name () == L"OtherArea" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherArea_type > r (
            OtherArea_traits::create (i, f, this));

          if (!this->OtherArea_)
          {
            this->OtherArea_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ProductDataQualityAreaType* ProductDataQualityAreaType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductDataQualityAreaType (*this, f, c);
    }

    ProductDataQualityAreaType& ProductDataQualityAreaType::
    operator= (const ProductDataQualityAreaType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->AreaEnum_ = x.AreaEnum_;
        this->OtherArea_ = x.OtherArea_;
      }

      return *this;
    }

    ProductDataQualityAreaType::
    ~ProductDataQualityAreaType ()
    {
    }

    // ProductDataQualityCheckType
    //

    ProductDataQualityCheckType::
    ProductDataQualityCheckType ()
    : ::xml_schema::type (),
      Type_ (this),
      Description_ (this),
      Requirements_ (this),
      SourceOfRequiredness_ (this),
      ApplicationTool_ (this),
      XsltFile_ (this),
      ResultStatement_ (this),
      ResultStatus_ (this)
    {
    }

    ProductDataQualityCheckType::
    ProductDataQualityCheckType (const Type_type& Type,
                                 const Description_type& Description,
                                 const Requirements_type& Requirements,
                                 const ResultStatement_type& ResultStatement,
                                 const ResultStatus_type& ResultStatus)
    : ::xml_schema::type (),
      Type_ (Type, this),
      Description_ (Description, this),
      Requirements_ (Requirements, this),
      SourceOfRequiredness_ (this),
      ApplicationTool_ (this),
      XsltFile_ (this),
      ResultStatement_ (ResultStatement, this),
      ResultStatus_ (ResultStatus, this)
    {
    }

    ProductDataQualityCheckType::
    ProductDataQualityCheckType (::std::unique_ptr< Type_type > Type,
                                 const Description_type& Description,
                                 const Requirements_type& Requirements,
                                 const ResultStatement_type& ResultStatement,
                                 const ResultStatus_type& ResultStatus)
    : ::xml_schema::type (),
      Type_ (std::move (Type), this),
      Description_ (Description, this),
      Requirements_ (Requirements, this),
      SourceOfRequiredness_ (this),
      ApplicationTool_ (this),
      XsltFile_ (this),
      ResultStatement_ (ResultStatement, this),
      ResultStatus_ (ResultStatus, this)
    {
    }

    ProductDataQualityCheckType::
    ProductDataQualityCheckType (const ProductDataQualityCheckType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Type_ (x.Type_, f, this),
      Description_ (x.Description_, f, this),
      Requirements_ (x.Requirements_, f, this),
      SourceOfRequiredness_ (x.SourceOfRequiredness_, f, this),
      ApplicationTool_ (x.ApplicationTool_, f, this),
      XsltFile_ (x.XsltFile_, f, this),
      ResultStatement_ (x.ResultStatement_, f, this),
      ResultStatus_ (x.ResultStatus_, f, this)
    {
    }

    ProductDataQualityCheckType::
    ProductDataQualityCheckType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Type_ (this),
      Description_ (this),
      Requirements_ (this),
      SourceOfRequiredness_ (this),
      ApplicationTool_ (this),
      XsltFile_ (this),
      ResultStatement_ (this),
      ResultStatus_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProductDataQualityCheckType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Type
        //
        if (n.name () == L"Type" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Type_type > r (
            Type_traits::create (i, f, this));

          if (!Type_.present ())
          {
            this->Type_.set (::std::move (r));
            continue;
          }
        }

        // Description
        //
        if (n.name () == L"Description" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!Description_.present ())
          {
            this->Description_.set (::std::move (r));
            continue;
          }
        }

        // Requirements
        //
        if (n.name () == L"Requirements" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Requirements_type > r (
            Requirements_traits::create (i, f, this));

          if (!Requirements_.present ())
          {
            this->Requirements_.set (::std::move (r));
            continue;
          }
        }

        // SourceOfRequiredness
        //
        if (n.name () == L"SourceOfRequiredness" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SourceOfRequiredness_type > r (
            SourceOfRequiredness_traits::create (i, f, this));

          if (!this->SourceOfRequiredness_)
          {
            this->SourceOfRequiredness_.set (::std::move (r));
            continue;
          }
        }

        // ApplicationTool
        //
        if (n.name () == L"ApplicationTool" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ApplicationTool_type > r (
            ApplicationTool_traits::create (i, f, this));

          if (!this->ApplicationTool_)
          {
            this->ApplicationTool_.set (::std::move (r));
            continue;
          }
        }

        // XsltFile
        //
        if (n.name () == L"XsltFile" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< XsltFile_type > r (
            XsltFile_traits::create (i, f, this));

          if (!this->XsltFile_)
          {
            this->XsltFile_.set (::std::move (r));
            continue;
          }
        }

        // ResultStatement
        //
        if (n.name () == L"ResultStatement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ResultStatement_type > r (
            ResultStatement_traits::create (i, f, this));

          if (!ResultStatement_.present ())
          {
            this->ResultStatement_.set (::std::move (r));
            continue;
          }
        }

        // ResultStatus
        //
        if (n.name () == L"ResultStatus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ResultStatus_type > r (
            ResultStatus_traits::create (i, f, this));

          if (!ResultStatus_.present ())
          {
            this->ResultStatus_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Type_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Type",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!Description_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Description",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!Requirements_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Requirements",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ResultStatement_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ResultStatement",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ResultStatus_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ResultStatus",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ProductDataQualityCheckType* ProductDataQualityCheckType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductDataQualityCheckType (*this, f, c);
    }

    ProductDataQualityCheckType& ProductDataQualityCheckType::
    operator= (const ProductDataQualityCheckType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Type_ = x.Type_;
        this->Description_ = x.Description_;
        this->Requirements_ = x.Requirements_;
        this->SourceOfRequiredness_ = x.SourceOfRequiredness_;
        this->ApplicationTool_ = x.ApplicationTool_;
        this->XsltFile_ = x.XsltFile_;
        this->ResultStatement_ = x.ResultStatement_;
        this->ResultStatus_ = x.ResultStatus_;
      }

      return *this;
    }

    ProductDataQualityCheckType::
    ~ProductDataQualityCheckType ()
    {
    }

    // CheckStatusEnumType
    //

    CheckStatusEnumType::
    CheckStatusEnumType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CheckStatusEnumType_convert ();
    }

    CheckStatusEnumType::
    CheckStatusEnumType (const xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CheckStatusEnumType_convert ();
    }

    CheckStatusEnumType::
    CheckStatusEnumType (const ::std::wstring& s,
                         const xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CheckStatusEnumType_convert ();
    }

    CheckStatusEnumType* CheckStatusEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CheckStatusEnumType (*this, f, c);
    }

    CheckStatusEnumType::value CheckStatusEnumType::
    _xsd_CheckStatusEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_CheckStatusEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CheckStatusEnumType_indexes_,
                        _xsd_CheckStatusEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_CheckStatusEnumType_indexes_ + 3 || _xsd_CheckStatusEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const CheckStatusEnumType::
    _xsd_CheckStatusEnumType_literals_[3] =
    {
      L"PASS",
      L"FAIL",
      L"PENDING"
    };

    const CheckStatusEnumType::value CheckStatusEnumType::
    _xsd_CheckStatusEnumType_indexes_[3] =
    {
      ::xsd::qif30::CheckStatusEnumType::FAIL,
      ::xsd::qif30::CheckStatusEnumType::PASS,
      ::xsd::qif30::CheckStatusEnumType::PENDING
    };

    // ProductDataQualityChecksType
    //

    ProductDataQualityChecksType::
    ProductDataQualityChecksType ()
    : ::xml_schema::type (),
      ProductDataQualityCheck_ (this),
      n_ (this)
    {
    }

    ProductDataQualityChecksType::
    ProductDataQualityChecksType (const n_type& n)
    : ::xml_schema::type (),
      ProductDataQualityCheck_ (this),
      n_ (n, this)
    {
    }

    ProductDataQualityChecksType::
    ProductDataQualityChecksType (const ProductDataQualityChecksType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ProductDataQualityCheck_ (x.ProductDataQualityCheck_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ProductDataQualityChecksType::
    ProductDataQualityChecksType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ProductDataQualityCheck_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProductDataQualityChecksType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ProductDataQualityCheck
        //
        if (n.name () == L"ProductDataQualityCheck" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProductDataQualityCheck_type > r (
            ProductDataQualityCheck_traits::create (i, f, this));

          this->ProductDataQualityCheck_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ProductDataQualityChecksType* ProductDataQualityChecksType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductDataQualityChecksType (*this, f, c);
    }

    ProductDataQualityChecksType& ProductDataQualityChecksType::
    operator= (const ProductDataQualityChecksType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ProductDataQualityCheck_ = x.ProductDataQualityCheck_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ProductDataQualityChecksType::
    ~ProductDataQualityChecksType ()
    {
    }

    // ProductDataQualityType
    //

    ProductDataQualityType::
    ProductDataQualityType ()
    : ::xml_schema::type (),
      ChecksPerformed_ (this),
      ChecksApproved_ (this),
      Declaration_ (this),
      ProductDataQualityChecks_ (this)
    {
    }

    ProductDataQualityType::
    ProductDataQualityType (const ChecksPerformed_type& ChecksPerformed,
                            const ChecksApproved_type& ChecksApproved,
                            const Declaration_type& Declaration)
    : ::xml_schema::type (),
      ChecksPerformed_ (ChecksPerformed, this),
      ChecksApproved_ (ChecksApproved, this),
      Declaration_ (Declaration, this),
      ProductDataQualityChecks_ (this)
    {
    }

    ProductDataQualityType::
    ProductDataQualityType (const ProductDataQualityType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ChecksPerformed_ (x.ChecksPerformed_, f, this),
      ChecksApproved_ (x.ChecksApproved_, f, this),
      Declaration_ (x.Declaration_, f, this),
      ProductDataQualityChecks_ (x.ProductDataQualityChecks_, f, this)
    {
    }

    ProductDataQualityType::
    ProductDataQualityType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ChecksPerformed_ (this),
      ChecksApproved_ (this),
      Declaration_ (this),
      ProductDataQualityChecks_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ProductDataQualityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ChecksPerformed
        //
        if (n.name () == L"ChecksPerformed" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!ChecksPerformed_.present ())
          {
            this->ChecksPerformed_.set (ChecksPerformed_traits::create (i, f, this));
            continue;
          }
        }

        // ChecksApproved
        //
        if (n.name () == L"ChecksApproved" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!ChecksApproved_.present ())
          {
            this->ChecksApproved_.set (ChecksApproved_traits::create (i, f, this));
            continue;
          }
        }

        // Declaration
        //
        if (n.name () == L"Declaration" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Declaration_type > r (
            Declaration_traits::create (i, f, this));

          if (!Declaration_.present ())
          {
            this->Declaration_.set (::std::move (r));
            continue;
          }
        }

        // ProductDataQualityChecks
        //
        if (n.name () == L"ProductDataQualityChecks" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProductDataQualityChecks_type > r (
            ProductDataQualityChecks_traits::create (i, f, this));

          if (!this->ProductDataQualityChecks_)
          {
            this->ProductDataQualityChecks_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ChecksPerformed_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ChecksPerformed",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ChecksApproved_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ChecksApproved",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!Declaration_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Declaration",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ProductDataQualityType* ProductDataQualityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProductDataQualityType (*this, f, c);
    }

    ProductDataQualityType& ProductDataQualityType::
    operator= (const ProductDataQualityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ChecksPerformed_ = x.ChecksPerformed_;
        this->ChecksApproved_ = x.ChecksApproved_;
        this->Declaration_ = x.Declaration_;
        this->ProductDataQualityChecks_ = x.ProductDataQualityChecks_;
      }

      return *this;
    }

    ProductDataQualityType::
    ~ProductDataQualityType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif30
  {
    void
    operator<< (xercesc::DOMElement& e, const InspectionProgramType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // File
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"File",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.File ();
      }

      // Description
      //
      if (i.Description ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Description",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Description ();
      }

      // FormalStandardId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FormalStandardId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.FormalStandardId ();
      }

      // Author
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Author",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Author ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const InspectionSoftwareItemsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // InspectionProgramGenerationSoftware
      //
      if (i.InspectionProgramGenerationSoftware ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionProgramGenerationSoftware",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionProgramGenerationSoftware ();
      }

      // InspectionProgramExecutionSoftware
      //
      if (i.InspectionProgramExecutionSoftware ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionProgramExecutionSoftware",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionProgramExecutionSoftware ();
      }

      // AnalysisSoftware
      //
      if (i.AnalysisSoftware ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisSoftware",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisSoftware ();
      }

      // CADSoftware
      //
      if (i.CADSoftware ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CADSoftware",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CADSoftware ();
      }

      // DMESoftware
      //
      if (i.DMESoftware ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DMESoftware",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DMESoftware ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const EnvironmentType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }

      // ObjectTemperature
      //
      if (i.ObjectTemperature ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ObjectTemperature",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ObjectTemperature ();
      }

      // AmbientTemperature
      //
      if (i.AmbientTemperature ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AmbientTemperature",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AmbientTemperature ();
      }

      // RelativeHumidity
      //
      if (i.RelativeHumidity ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"RelativeHumidity",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.RelativeHumidity ();
      }

      // DateAndTime
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DateAndTime",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.DateAndTime ();
      }

      // TimeDescription
      //
      if (i.TimeDescription ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TimeDescription",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TimeDescription ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const EnvironmentsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Environment
      //
      for (EnvironmentsType::Environment_const_iterator
           b (i.Environment ().begin ()), n (i.Environment ().end ());
           b != n; ++b)
      {
        const EnvironmentsType::Environment_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Environment",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const InspectionTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // InspectingOrganization
      //
      if (i.InspectingOrganization ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectingOrganization",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectingOrganization ();
      }

      // CustomerOrganization
      //
      if (i.CustomerOrganization ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CustomerOrganization",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CustomerOrganization ();
      }

      // SupplierCode
      //
      if (i.SupplierCode ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SupplierCode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SupplierCode ();
      }

      // PurchaseOrderNumber
      //
      if (i.PurchaseOrderNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PurchaseOrderNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PurchaseOrderNumber ();
      }

      // OrderNumber
      //
      if (i.OrderNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OrderNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OrderNumber ();
      }

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReportNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReportNumber ();
      }

      // InspectionScope
      //
      if (i.InspectionScope ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionScope",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionScope ();
      }

      // InspectionMode
      //
      if (i.InspectionMode ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionMode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionMode ();
      }

      // PartialInspection
      //
      if (i.PartialInspection ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PartialInspection",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PartialInspection ();
      }

      // NotableEvents
      //
      if (i.NotableEvents ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotableEvents",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotableEvents ();
      }

      // NotedEvents
      //
      if (i.NotedEvents ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotedEvents",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotedEvents ();
      }

      // InspectionStart
      //
      if (i.InspectionStart ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionStart",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionStart ();
      }

      // InspectionEnd
      //
      if (i.InspectionEnd ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionEnd",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionEnd ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionSoftwareItems",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionProgram",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionProgram ();
      }

      // InspectionOperator
      //
      if (i.InspectionOperator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionOperator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionOperator ();
      }

      // ReportPreparer
      //
      if (i.ReportPreparer ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReportPreparer",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReportPreparer ();
      }

      // ReportPreparationDate
      //
      if (i.ReportPreparationDate ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReportPreparationDate",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReportPreparationDate ();
      }

      // ReportType
      //
      if (i.ReportType ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReportType",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReportType ();
      }

      // SecurityClassification
      //
      if (i.SecurityClassification ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecurityClassification",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecurityClassification ();
      }

      // PlantLocation
      //
      if (i.PlantLocation ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PlantLocation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PlantLocation ();
      }

      // ReferencedQIFPlanInstance
      //
      if (i.ReferencedQIFPlanInstance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReferencedQIFPlanInstance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReferencedQIFPlanInstance ();
      }

      // ReferencedQIFPlan
      //
      if (i.ReferencedQIFPlan ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReferencedQIFPlan",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReferencedQIFPlan ();
      }

      // Errors
      //
      if (i.Errors ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Errors",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Errors ();
      }

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PreInspectionTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // InspectingOrganization
      //
      if (i.InspectingOrganization ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectingOrganization",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectingOrganization ();
      }

      // CustomerOrganization
      //
      if (i.CustomerOrganization ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CustomerOrganization",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CustomerOrganization ();
      }

      // SupplierCode
      //
      if (i.SupplierCode ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SupplierCode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SupplierCode ();
      }

      // PurchaseOrderNumber
      //
      if (i.PurchaseOrderNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PurchaseOrderNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PurchaseOrderNumber ();
      }

      // OrderNumber
      //
      if (i.OrderNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OrderNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OrderNumber ();
      }

      // AsmPathIds
      //
      if (i.AsmPathIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AsmPathIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AsmPathIds ();
      }

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReportNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReportNumber ();
      }

      // InspectionScope
      //
      if (i.InspectionScope ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionScope",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionScope ();
      }

      // InspectionMode
      //
      if (i.InspectionMode ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionMode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionMode ();
      }

      // PartialInspection
      //
      if (i.PartialInspection ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PartialInspection",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PartialInspection ();
      }

      // NotableEvents
      //
      if (i.NotableEvents ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotableEvents",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotableEvents ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionSoftwareItems",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionProgram",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionProgram ();
      }

      // SecurityClassification
      //
      if (i.SecurityClassification ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecurityClassification",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecurityClassification ();
      }

      // PlantLocation
      //
      if (i.PlantLocation ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PlantLocation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PlantLocation ();
      }

      // ReferencedQIFPlanInstance
      //
      if (i.ReferencedQIFPlanInstance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReferencedQIFPlanInstance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReferencedQIFPlanInstance ();
      }

      // ReferencedQIFPlan
      //
      if (i.ReferencedQIFPlan ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReferencedQIFPlan",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReferencedQIFPlan ();
      }

      // FormalStandardId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FormalStandardId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.FormalStandardId ();
      }

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProductTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReportNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReportNumber ();
      }

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ManufacturingProcessId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ManufacturingProcessId ();
      }

      // FixtureId
      //
      if (i.FixtureId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FixtureId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FixtureId ();
      }

      // NotableEventIds
      //
      if (i.NotableEventIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotableEventIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotableEventIds ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionSoftwareItems",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionProgram",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionProgram ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDeviceIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ActualProductTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SampleNumber
      //
      if (i.SampleNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SampleNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SampleNumber ();
      }

      // LotNumber
      //
      if (i.LotNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LotNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.LotNumber ();
      }

      // ReportNumber
      //
      if (i.ReportNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReportNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReportNumber ();
      }

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ManufacturingProcessId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ManufacturingProcessId ();
      }

      // FixtureId
      //
      if (i.FixtureId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FixtureId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FixtureId ();
      }

      // NotableEventIds
      //
      if (i.NotableEventIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotableEventIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotableEventIds ();
      }

      // NotedEventIds
      //
      if (i.NotedEventIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotedEventIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotedEventIds ();
      }

      // InspectionStart
      //
      if (i.InspectionStart ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionStart",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionStart ();
      }

      // InspectionEnd
      //
      if (i.InspectionEnd ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionEnd",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionEnd ();
      }

      // InspectionSoftwareItems
      //
      if (i.InspectionSoftwareItems ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionSoftwareItems",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionSoftwareItems ();
      }

      // InspectionProgram
      //
      if (i.InspectionProgram ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionProgram",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionProgram ();
      }

      // InspectionOperator
      //
      if (i.InspectionOperator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"InspectionOperator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.InspectionOperator ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDeviceIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // ProductEnvironments
      //
      if (i.ProductEnvironments ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductEnvironments",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductEnvironments ();
      }

      // Errors
      //
      if (i.Errors ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Errors",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Errors ();
      }

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProcessParameterType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ParameterType
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ParameterType",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ParameterType ();
      }

      // ParameterValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ParameterValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ParameterValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProcessParametersType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Parameter
      //
      for (ProcessParametersType::Parameter_const_iterator
           b (i.Parameter ().begin ()), n (i.Parameter ().end ());
           b != n; ++b)
      {
        const ProcessParametersType::Parameter_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Parameter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ManufacturingProcessTraceabilityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }

      // Description
      //
      if (i.Description ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Description",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Description ();
      }

      // Job
      //
      if (i.Job ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Job",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Job ();
      }

      // Revision
      //
      if (i.Revision ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Revision",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Revision ();
      }

      // PreviousOperationId
      //
      if (i.PreviousOperationId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PreviousOperationId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PreviousOperationId ();
      }

      // Path
      //
      if (i.Path ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Path",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Path ();
      }

      // MachineManufacturerName
      //
      if (i.MachineManufacturerName ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MachineManufacturerName",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MachineManufacturerName ();
      }

      // MachineIdentifier
      //
      if (i.MachineIdentifier ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MachineIdentifier",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MachineIdentifier ();
      }

      // OperatorIdentifier
      //
      if (i.OperatorIdentifier ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OperatorIdentifier",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OperatorIdentifier ();
      }

      // Shift
      //
      if (i.Shift ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Shift",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Shift ();
      }

      // Department
      //
      if (i.Department ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Department",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Department ();
      }

      // ResponsibilityIdentifier
      //
      if (i.ResponsibilityIdentifier ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ResponsibilityIdentifier",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ResponsibilityIdentifier ();
      }

      // PlantSector
      //
      if (i.PlantSector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PlantSector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PlantSector ();
      }

      // ProcessParameters
      //
      if (i.ProcessParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProcessParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProcessParameters ();
      }

      // AssociatedTraceabilityId
      //
      if (i.AssociatedTraceabilityId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AssociatedTraceabilityId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AssociatedTraceabilityId ();
      }

      // id
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ManufacturingProcessTraceabilitiesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ManufacturingProcessTraceability
      //
      for (ManufacturingProcessTraceabilitiesType::ManufacturingProcessTraceability_const_iterator
           b (i.ManufacturingProcessTraceability ().begin ()), n (i.ManufacturingProcessTraceability ().end ());
           b != n; ++b)
      {
        const ManufacturingProcessTraceabilitiesType::ManufacturingProcessTraceability_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ManufacturingProcessTraceability",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ErrorsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Error
      //
      for (ErrorsType::Error_const_iterator
           b (i.Error ().begin ()), n (i.Error ().end ());
           b != n; ++b)
      {
        const ErrorsType::Error_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Error",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PartialInspectionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // BaselineProductNumber
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BaselineProductNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.BaselineProductNumber ();
      }

      // BaselineProductVersion
      //
      if (i.BaselineProductVersion ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BaselineProductVersion",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.BaselineProductVersion ();
      }

      // ReasonForPartialInspection
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReasonForPartialInspection",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ReasonForPartialInspection ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const TimeDescriptionEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const TimeDescriptionEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const TimeDescriptionEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const TimeDescriptionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // TimeDescriptionEnum
      //
      if (i.TimeDescriptionEnum ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TimeDescriptionEnum",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TimeDescriptionEnum ();
      }

      // OtherTimeDescription
      //
      if (i.OtherTimeDescription ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherTimeDescription",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherTimeDescription ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const InspectionModeEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const InspectionModeEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const InspectionModeEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const InspectionScopeEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const InspectionScopeEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const InspectionScopeEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const ValidationCountsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ExternalQIFReferencesCount
      //
      if (i.ExternalQIFReferencesCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ExternalQIFReferencesCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ExternalQIFReferencesCount ();
      }

      // DatumDefinitionsCount
      //
      if (i.DatumDefinitionsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumDefinitionsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumDefinitionsCount ();
      }

      // DatumTargetDefinitionsCount
      //
      if (i.DatumTargetDefinitionsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumTargetDefinitionsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumTargetDefinitionsCount ();
      }

      // TransformsCount
      //
      if (i.TransformsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TransformsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TransformsCount ();
      }

      // CoordinateSystemsCount
      //
      if (i.CoordinateSystemsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemsCount ();
      }

      // DatumReferenceFramesCount
      //
      if (i.DatumReferenceFramesCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumReferenceFramesCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumReferenceFramesCount ();
      }

      // MeasurementResourcesCount
      //
      if (i.MeasurementResourcesCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementResourcesCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementResourcesCount ();
      }

      // ThreadSpecificationsCount
      //
      if (i.ThreadSpecificationsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThreadSpecificationsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThreadSpecificationsCount ();
      }

      // ProductGeometrySetCount
      //
      if (i.ProductGeometrySetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductGeometrySetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductGeometrySetCount ();
      }

      // ProductTopologySetCount
      //
      if (i.ProductTopologySetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductTopologySetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductTopologySetCount ();
      }

      // ProductNoteSetCount
      //
      if (i.ProductNoteSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductNoteSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductNoteSetCount ();
      }

      // ProductNoteFlagSetCount
      //
      if (i.ProductNoteFlagSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductNoteFlagSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductNoteFlagSetCount ();
      }

      // ProductPartNoteSetCount
      //
      if (i.ProductPartNoteSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductPartNoteSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductPartNoteSetCount ();
      }

      // ProductViewSetCount
      //
      if (i.ProductViewSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductViewSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductViewSetCount ();
      }

      // ProductLayerSetCount
      //
      if (i.ProductLayerSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductLayerSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductLayerSetCount ();
      }

      // ProductCoordinateSystemSetCount
      //
      if (i.ProductCoordinateSystemSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductCoordinateSystemSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductCoordinateSystemSetCount ();
      }

      // ProductVisualizationSetCount
      //
      if (i.ProductVisualizationSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductVisualizationSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductVisualizationSetCount ();
      }

      // ProductAuxiliarySetCount
      //
      if (i.ProductAuxiliarySetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductAuxiliarySetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductAuxiliarySetCount ();
      }

      // ProductPartSetCount
      //
      if (i.ProductPartSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductPartSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductPartSetCount ();
      }

      // ProductAssemblySetCount
      //
      if (i.ProductAssemblySetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductAssemblySetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductAssemblySetCount ();
      }

      // ProductComponentSetCount
      //
      if (i.ProductComponentSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductComponentSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductComponentSetCount ();
      }

      // ProductAsmPathsCount
      //
      if (i.ProductAsmPathsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductAsmPathsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductAsmPathsCount ();
      }

      // FeatureDefinitionsCount
      //
      if (i.FeatureDefinitionsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureDefinitionsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureDefinitionsCount ();
      }

      // FeatureNominalsCount
      //
      if (i.FeatureNominalsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureNominalsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureNominalsCount ();
      }

      // FeatureItemsCount
      //
      if (i.FeatureItemsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureItemsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureItemsCount ();
      }

      // CharacteristicDefinitionsCount
      //
      if (i.CharacteristicDefinitionsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicDefinitionsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicDefinitionsCount ();
      }

      // DefaultCharacteristicDefinitionsCount
      //
      if (i.DefaultCharacteristicDefinitionsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DefaultCharacteristicDefinitionsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DefaultCharacteristicDefinitionsCount ();
      }

      // DefaultToleranceDefinitionsCount
      //
      if (i.DefaultToleranceDefinitionsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DefaultToleranceDefinitionsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DefaultToleranceDefinitionsCount ();
      }

      // CharacteristicNominalsCount
      //
      if (i.CharacteristicNominalsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicNominalsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicNominalsCount ();
      }

      // CharacteristicItemsCount
      //
      if (i.CharacteristicItemsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicItemsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicItemsCount ();
      }

      // CharacteristicGroupsCount
      //
      if (i.CharacteristicGroupsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicGroupsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicGroupsCount ();
      }

      // WeldSymbolSetCount
      //
      if (i.WeldSymbolSetCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldSymbolSetCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.WeldSymbolSetCount ();
      }

      // MeasurementsPlanPresent
      //
      if (i.MeasurementsPlanPresent ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementsPlanPresent",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementsPlanPresent ();
      }

      // MeasurementsResultsCount
      //
      if (i.MeasurementsResultsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementsResultsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementsResultsCount ();
      }

      // StatisticalStudyPlansCount
      //
      if (i.StatisticalStudyPlansCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"StatisticalStudyPlansCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.StatisticalStudyPlansCount ();
      }

      // StatisticalStudiesResultsCount
      //
      if (i.StatisticalStudiesResultsCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"StatisticalStudiesResultsCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.StatisticalStudiesResultsCount ();
      }

      // CorrectiveActionPlansCount
      //
      if (i.CorrectiveActionPlansCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CorrectiveActionPlansCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CorrectiveActionPlansCount ();
      }

      // ManufacturingProcessTraceabilitiesCount
      //
      if (i.ManufacturingProcessTraceabilitiesCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ManufacturingProcessTraceabilitiesCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ManufacturingProcessTraceabilitiesCount ();
      }

      // FeatureRulesCount
      //
      if (i.FeatureRulesCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureRulesCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureRulesCount ();
      }

      // DMESelectionRulesCount
      //
      if (i.DMESelectionRulesCount ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DMESelectionRulesCount",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DMESelectionRulesCount ();
      }

      // SignaturePresent
      //
      if (i.SignaturePresent ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SignaturePresent",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SignaturePresent ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProductDataQualityAreaEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const ProductDataQualityAreaEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ProductDataQualityAreaEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const ProductDataQualityAreaType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // AreaEnum
      //
      if (i.AreaEnum ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AreaEnum",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AreaEnum ();
      }

      // OtherArea
      //
      if (i.OtherArea ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherArea",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherArea ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProductDataQualityCheckType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Type
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Type",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Type ();
      }

      // Description
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Description",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Description ();
      }

      // Requirements
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Requirements",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Requirements ();
      }

      // SourceOfRequiredness
      //
      if (i.SourceOfRequiredness ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SourceOfRequiredness",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SourceOfRequiredness ();
      }

      // ApplicationTool
      //
      if (i.ApplicationTool ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ApplicationTool",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ApplicationTool ();
      }

      // XsltFile
      //
      if (i.XsltFile ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"XsltFile",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.XsltFile ();
      }

      // ResultStatement
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ResultStatement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ResultStatement ();
      }

      // ResultStatus
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ResultStatus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ResultStatus ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CheckStatusEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const CheckStatusEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CheckStatusEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const ProductDataQualityChecksType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ProductDataQualityCheck
      //
      for (ProductDataQualityChecksType::ProductDataQualityCheck_const_iterator
           b (i.ProductDataQualityCheck ().begin ()), n (i.ProductDataQualityCheck ().end ());
           b != n; ++b)
      {
        const ProductDataQualityChecksType::ProductDataQualityCheck_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductDataQualityCheck",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProductDataQualityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ChecksPerformed
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ChecksPerformed",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ChecksPerformed ();
      }

      // ChecksApproved
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ChecksApproved",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ChecksApproved ();
      }

      // Declaration
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Declaration",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Declaration ();
      }

      // ProductDataQualityChecks
      //
      if (i.ProductDataQualityChecks ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductDataQualityChecks",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductDataQualityChecks ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

