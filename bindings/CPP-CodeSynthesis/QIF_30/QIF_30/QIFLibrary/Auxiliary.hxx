// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CXX___QIFLIBRARY_AUXILIARY_HXX
#define CXX___QIFLIBRARY_AUXILIARY_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "..\\export.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< wchar_t, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< wchar_t > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< wchar_t > not_derived;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif30
  {
    class CoordinateSystemSetType;
    class CADCoordinateSystemType;
    class AuxiliarySetType;
    class AuxiliaryBaseType;
    class PointAuxiliaryType;
    class LineAuxiliaryType;
    class AuxiliaryPlaneBaseType;
    class PlaneReferenceType;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../QIFLibrary/PrimitivesPD.hxx"

namespace xsd
{
  namespace qif30
  {
    class QIF30_SYMBOL_DECL CoordinateSystemSetType: public ::xml_schema::type
    {
      public:
      // CoordinateSystem
      //
      typedef ::xsd::qif30::CADCoordinateSystemType CoordinateSystem_type;
      typedef ::xsd::cxx::tree::sequence< CoordinateSystem_type > CoordinateSystem_sequence;
      typedef xsd::cxx::tree::sequence< CoordinateSystem_type >::iterator CoordinateSystem_iterator;
      typedef xsd::cxx::tree::sequence< CoordinateSystem_type >::const_iterator CoordinateSystem_const_iterator;
      typedef ::xsd::cxx::tree::traits< CoordinateSystem_type, wchar_t > CoordinateSystem_traits;

      const CoordinateSystem_sequence&
      CoordinateSystem () const;

      CoordinateSystem_sequence&
      CoordinateSystem ();

      void
      CoordinateSystem (const CoordinateSystem_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      CoordinateSystemSetType ();

      CoordinateSystemSetType (const n_type&);

      CoordinateSystemSetType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CoordinateSystemSetType (const CoordinateSystemSetType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CoordinateSystemSetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CoordinateSystemSetType&
      operator= (const CoordinateSystemSetType& x);

      virtual 
      ~CoordinateSystemSetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      CoordinateSystem_sequence CoordinateSystem_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL CADCoordinateSystemType: public ::xsd::qif30::DrawableBaseType
    {
      public:
      // CoordinateSystemCore
      //
      typedef ::xsd::qif30::CoordinateSystemCoreType CoordinateSystemCore_type;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemCore_type, wchar_t > CoordinateSystemCore_traits;

      const CoordinateSystemCore_type&
      CoordinateSystemCore () const;

      CoordinateSystemCore_type&
      CoordinateSystemCore ();

      void
      CoordinateSystemCore (const CoordinateSystemCore_type& x);

      void
      CoordinateSystemCore (::std::unique_ptr< CoordinateSystemCore_type > p);

      // Constructors.
      //
      CADCoordinateSystemType ();

      CADCoordinateSystemType (const id_type&,
                               const CoordinateSystemCore_type&);

      CADCoordinateSystemType (const id_type&,
                               ::std::unique_ptr< CoordinateSystemCore_type >);

      CADCoordinateSystemType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      CADCoordinateSystemType (const CADCoordinateSystemType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual CADCoordinateSystemType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CADCoordinateSystemType&
      operator= (const CADCoordinateSystemType& x);

      virtual 
      ~CADCoordinateSystemType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< CoordinateSystemCore_type > CoordinateSystemCore_;
    };

    class QIF30_SYMBOL_DECL AuxiliarySetType: public ::xml_schema::type
    {
      public:
      // Auxiliary
      //
      typedef ::xsd::qif30::AuxiliaryBaseType Auxiliary_type;
      typedef ::xsd::cxx::tree::sequence< Auxiliary_type > Auxiliary_sequence;
      typedef xsd::cxx::tree::sequence< Auxiliary_type >::iterator Auxiliary_iterator;
      typedef xsd::cxx::tree::sequence< Auxiliary_type >::const_iterator Auxiliary_const_iterator;
      typedef ::xsd::cxx::tree::traits< Auxiliary_type, wchar_t > Auxiliary_traits;

      const Auxiliary_sequence&
      Auxiliary () const;

      Auxiliary_sequence&
      Auxiliary ();

      void
      Auxiliary (const Auxiliary_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      AuxiliarySetType ();

      AuxiliarySetType (const n_type&);

      AuxiliarySetType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      AuxiliarySetType (const AuxiliarySetType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual AuxiliarySetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AuxiliarySetType&
      operator= (const AuxiliarySetType& x);

      virtual 
      ~AuxiliarySetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Auxiliary_sequence Auxiliary_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL AuxiliaryBaseType: public ::xsd::qif30::DrawableBaseType
    {
      public:
      // Constructors.
      //
      AuxiliaryBaseType ();

      AuxiliaryBaseType (const id_type&);

      AuxiliaryBaseType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      AuxiliaryBaseType (const AuxiliaryBaseType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual AuxiliaryBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

#ifdef XSD_CXX11
      AuxiliaryBaseType&
      operator= (const AuxiliaryBaseType&) = default;
#endif

      virtual 
      ~AuxiliaryBaseType ();
    };

    class QIF30_SYMBOL_DECL PointAuxiliaryType: public ::xsd::qif30::AuxiliaryBaseType
    {
      public:
      // XYZ
      //
      typedef ::xsd::qif30::PointType XYZ_type;
      typedef ::xsd::cxx::tree::traits< XYZ_type, wchar_t > XYZ_traits;

      const XYZ_type&
      XYZ () const;

      XYZ_type&
      XYZ ();

      void
      XYZ (const XYZ_type& x);

      void
      XYZ (::std::unique_ptr< XYZ_type > p);

      // Constructors.
      //
      PointAuxiliaryType ();

      PointAuxiliaryType (const id_type&,
                          const XYZ_type&);

      PointAuxiliaryType (const id_type&,
                          ::std::unique_ptr< XYZ_type >);

      PointAuxiliaryType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      PointAuxiliaryType (const PointAuxiliaryType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual PointAuxiliaryType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PointAuxiliaryType&
      operator= (const PointAuxiliaryType& x);

      virtual 
      ~PointAuxiliaryType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< XYZ_type > XYZ_;
    };

    class QIF30_SYMBOL_DECL LineAuxiliaryType: public ::xsd::qif30::AuxiliaryBaseType
    {
      public:
      // StartPoint
      //
      typedef ::xsd::qif30::PointSimpleType StartPoint_type;
      typedef ::xsd::cxx::tree::traits< StartPoint_type, wchar_t > StartPoint_traits;

      const StartPoint_type&
      StartPoint () const;

      StartPoint_type&
      StartPoint ();

      void
      StartPoint (const StartPoint_type& x);

      void
      StartPoint (::std::unique_ptr< StartPoint_type > p);

      // EndPoint
      //
      typedef ::xsd::qif30::PointSimpleType EndPoint_type;
      typedef ::xsd::cxx::tree::traits< EndPoint_type, wchar_t > EndPoint_traits;

      const EndPoint_type&
      EndPoint () const;

      EndPoint_type&
      EndPoint ();

      void
      EndPoint (const EndPoint_type& x);

      void
      EndPoint (::std::unique_ptr< EndPoint_type > p);

      // LineStyle
      //
      typedef ::xsd::qif30::LineStyleType LineStyle_type;
      typedef ::xsd::cxx::tree::optional< LineStyle_type > LineStyle_optional;
      typedef ::xsd::cxx::tree::traits< LineStyle_type, wchar_t > LineStyle_traits;

      const LineStyle_optional&
      LineStyle () const;

      LineStyle_optional&
      LineStyle ();

      void
      LineStyle (const LineStyle_type& x);

      void
      LineStyle (const LineStyle_optional& x);

      void
      LineStyle (::std::unique_ptr< LineStyle_type > p);

      // Constructors.
      //
      LineAuxiliaryType ();

      LineAuxiliaryType (const id_type&,
                         const StartPoint_type&,
                         const EndPoint_type&);

      LineAuxiliaryType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      LineAuxiliaryType (const LineAuxiliaryType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual LineAuxiliaryType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineAuxiliaryType&
      operator= (const LineAuxiliaryType& x);

      virtual 
      ~LineAuxiliaryType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< StartPoint_type > StartPoint_;
      ::xsd::cxx::tree::one< EndPoint_type > EndPoint_;
      LineStyle_optional LineStyle_;
    };

    class QIF30_SYMBOL_DECL AuxiliaryPlaneBaseType: public ::xsd::qif30::AuxiliaryBaseType
    {
      public:
      // Plane
      //
      typedef ::xsd::qif30::PlaneType Plane_type;
      typedef ::xsd::cxx::tree::traits< Plane_type, wchar_t > Plane_traits;

      const Plane_type&
      Plane () const;

      Plane_type&
      Plane ();

      void
      Plane (const Plane_type& x);

      void
      Plane (::std::unique_ptr< Plane_type > p);

      // Constructors.
      //
      AuxiliaryPlaneBaseType ();

      AuxiliaryPlaneBaseType (const id_type&,
                              const Plane_type&);

      AuxiliaryPlaneBaseType (const id_type&,
                              ::std::unique_ptr< Plane_type >);

      AuxiliaryPlaneBaseType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      AuxiliaryPlaneBaseType (const AuxiliaryPlaneBaseType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual AuxiliaryPlaneBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      AuxiliaryPlaneBaseType&
      operator= (const AuxiliaryPlaneBaseType& x);

      virtual 
      ~AuxiliaryPlaneBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Plane_type > Plane_;
    };

    class QIF30_SYMBOL_DECL PlaneReferenceType: public ::xsd::qif30::AuxiliaryPlaneBaseType
    {
      public:
      // Constructors.
      //
      PlaneReferenceType ();

      PlaneReferenceType (const id_type&,
                          const Plane_type&);

      PlaneReferenceType (const id_type&,
                          ::std::unique_ptr< Plane_type >);

      PlaneReferenceType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      PlaneReferenceType (const PlaneReferenceType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual PlaneReferenceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      PlaneReferenceType&
      operator= (const PlaneReferenceType&) = default;
#endif

      virtual 
      ~PlaneReferenceType ();
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif30
  {
    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const CoordinateSystemSetType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const CADCoordinateSystemType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const AuxiliarySetType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const AuxiliaryBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const PointAuxiliaryType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const LineAuxiliaryType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const AuxiliaryPlaneBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const PlaneReferenceType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___QIFLIBRARY_AUXILIARY_HXX
