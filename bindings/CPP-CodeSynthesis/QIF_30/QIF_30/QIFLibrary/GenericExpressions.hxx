// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CXX___QIFLIBRARY_GENERIC_EXPRESSIONS_HXX
#define CXX___QIFLIBRARY_GENERIC_EXPRESSIONS_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "..\\export.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< wchar_t, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< wchar_t > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< wchar_t > not_derived;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif30
  {
    class BooleanExpressionBaseType;
    class NotType;
    class BinaryBooleanExpressionBaseType;
    class AndType;
    class OrType;
    class BooleanEqualType;
    class ConstantIsType;
    class ArithmeticComparisonBaseType;
    class ArithmeticEqualType;
    class GreaterThanType;
    class GreaterOrEqualType;
    class LessThanType;
    class LessOrEqualType;
    class TokenEqualType;
    class BooleanConstantEnumType;
    class ArithmeticExpressionBaseType;
    class ArithmeticConstantType;
    class NegateType;
    class BinaryArithmeticExpressionBaseType;
    class PolyadicArithmeticExpressionBaseType;
    class PlusType;
    class MaxType;
    class MinType;
    class MinusType;
    class TimesType;
    class DividedByType;
    class TokenExpressionBaseType;
    class TokenConstantType;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../QIFLibrary/Primitives.hxx"

namespace xsd
{
  namespace qif30
  {
    class QIF30_SYMBOL_DECL BooleanExpressionBaseType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      BooleanExpressionBaseType ();

      BooleanExpressionBaseType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      BooleanExpressionBaseType (const xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      BooleanExpressionBaseType (const ::std::wstring& s,
                                 const xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      BooleanExpressionBaseType (const BooleanExpressionBaseType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual BooleanExpressionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

#ifdef XSD_CXX11
      BooleanExpressionBaseType&
      operator= (const BooleanExpressionBaseType&) = default;
#endif

      virtual 
      ~BooleanExpressionBaseType ();
    };

    class QIF30_SYMBOL_DECL NotType: public ::xsd::qif30::BooleanExpressionBaseType
    {
      public:
      // BooleanExpression
      //
      typedef ::xsd::qif30::BooleanExpressionBaseType BooleanExpression_type;
      typedef ::xsd::cxx::tree::traits< BooleanExpression_type, wchar_t > BooleanExpression_traits;

      const BooleanExpression_type&
      BooleanExpression () const;

      BooleanExpression_type&
      BooleanExpression ();

      void
      BooleanExpression (const BooleanExpression_type& x);

      void
      BooleanExpression (::std::unique_ptr< BooleanExpression_type > p);

      // Constructors.
      //
      NotType ();

      NotType (const BooleanExpression_type&);

      NotType (::std::unique_ptr< BooleanExpression_type >);

      NotType (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      NotType (const NotType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual NotType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      NotType&
      operator= (const NotType& x);

      virtual 
      ~NotType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BooleanExpression_type > BooleanExpression_;
    };

    class QIF30_SYMBOL_DECL BinaryBooleanExpressionBaseType: public ::xsd::qif30::BooleanExpressionBaseType
    {
      public:
      // BooleanExpression
      //
      typedef ::xsd::qif30::BooleanExpressionBaseType BooleanExpression_type;
      typedef ::xsd::cxx::tree::sequence< BooleanExpression_type > BooleanExpression_sequence;
      typedef xsd::cxx::tree::sequence< BooleanExpression_type >::iterator BooleanExpression_iterator;
      typedef xsd::cxx::tree::sequence< BooleanExpression_type >::const_iterator BooleanExpression_const_iterator;
      typedef ::xsd::cxx::tree::traits< BooleanExpression_type, wchar_t > BooleanExpression_traits;

      const BooleanExpression_sequence&
      BooleanExpression () const;

      BooleanExpression_sequence&
      BooleanExpression ();

      void
      BooleanExpression (const BooleanExpression_sequence& s);

      // Constructors.
      //
      BinaryBooleanExpressionBaseType ();

      BinaryBooleanExpressionBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      BinaryBooleanExpressionBaseType (const BinaryBooleanExpressionBaseType& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

      virtual BinaryBooleanExpressionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      BinaryBooleanExpressionBaseType&
      operator= (const BinaryBooleanExpressionBaseType& x);

      virtual 
      ~BinaryBooleanExpressionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      BooleanExpression_sequence BooleanExpression_;
    };

    class QIF30_SYMBOL_DECL AndType: public ::xsd::qif30::BooleanExpressionBaseType
    {
      public:
      // BooleanExpression
      //
      typedef ::xsd::qif30::BooleanExpressionBaseType BooleanExpression_type;
      typedef ::xsd::cxx::tree::sequence< BooleanExpression_type > BooleanExpression_sequence;
      typedef xsd::cxx::tree::sequence< BooleanExpression_type >::iterator BooleanExpression_iterator;
      typedef xsd::cxx::tree::sequence< BooleanExpression_type >::const_iterator BooleanExpression_const_iterator;
      typedef ::xsd::cxx::tree::traits< BooleanExpression_type, wchar_t > BooleanExpression_traits;

      const BooleanExpression_sequence&
      BooleanExpression () const;

      BooleanExpression_sequence&
      BooleanExpression ();

      void
      BooleanExpression (const BooleanExpression_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      AndType ();

      AndType (const n_type&);

      AndType (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      AndType (const AndType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual AndType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AndType&
      operator= (const AndType& x);

      virtual 
      ~AndType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      BooleanExpression_sequence BooleanExpression_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL OrType: public ::xsd::qif30::BooleanExpressionBaseType
    {
      public:
      // BooleanExpression
      //
      typedef ::xsd::qif30::BooleanExpressionBaseType BooleanExpression_type;
      typedef ::xsd::cxx::tree::sequence< BooleanExpression_type > BooleanExpression_sequence;
      typedef xsd::cxx::tree::sequence< BooleanExpression_type >::iterator BooleanExpression_iterator;
      typedef xsd::cxx::tree::sequence< BooleanExpression_type >::const_iterator BooleanExpression_const_iterator;
      typedef ::xsd::cxx::tree::traits< BooleanExpression_type, wchar_t > BooleanExpression_traits;

      const BooleanExpression_sequence&
      BooleanExpression () const;

      BooleanExpression_sequence&
      BooleanExpression ();

      void
      BooleanExpression (const BooleanExpression_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      OrType ();

      OrType (const n_type&);

      OrType (const xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      OrType (const OrType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual OrType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      OrType&
      operator= (const OrType& x);

      virtual 
      ~OrType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      BooleanExpression_sequence BooleanExpression_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL BooleanEqualType: public ::xsd::qif30::BinaryBooleanExpressionBaseType
    {
      public:
      // Constructors.
      //
      BooleanEqualType ();

      BooleanEqualType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      BooleanEqualType (const BooleanEqualType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual BooleanEqualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      BooleanEqualType&
      operator= (const BooleanEqualType&) = default;
#endif

      virtual 
      ~BooleanEqualType ();
    };

    class QIF30_SYMBOL_DECL ConstantIsType: public ::xsd::qif30::BooleanExpressionBaseType
    {
      public:
      // val
      //
      typedef ::xsd::qif30::BooleanConstantEnumType val_type;
      typedef ::xsd::cxx::tree::traits< val_type, wchar_t > val_traits;

      const val_type&
      val () const;

      val_type&
      val ();

      void
      val (const val_type& x);

      void
      val (::std::unique_ptr< val_type > p);

      // Constructors.
      //
      ConstantIsType ();

      ConstantIsType (const val_type&);

      ConstantIsType (const xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ConstantIsType (const ConstantIsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ConstantIsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ConstantIsType&
      operator= (const ConstantIsType& x);

      virtual 
      ~ConstantIsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< val_type > val_;
    };

    class QIF30_SYMBOL_DECL ArithmeticComparisonBaseType: public ::xsd::qif30::BooleanExpressionBaseType
    {
      public:
      // ArithmeticExpression
      //
      typedef ::xsd::qif30::ArithmeticExpressionBaseType ArithmeticExpression_type;
      typedef ::xsd::cxx::tree::sequence< ArithmeticExpression_type > ArithmeticExpression_sequence;
      typedef xsd::cxx::tree::sequence< ArithmeticExpression_type >::iterator ArithmeticExpression_iterator;
      typedef xsd::cxx::tree::sequence< ArithmeticExpression_type >::const_iterator ArithmeticExpression_const_iterator;
      typedef ::xsd::cxx::tree::traits< ArithmeticExpression_type, wchar_t > ArithmeticExpression_traits;

      const ArithmeticExpression_sequence&
      ArithmeticExpression () const;

      ArithmeticExpression_sequence&
      ArithmeticExpression ();

      void
      ArithmeticExpression (const ArithmeticExpression_sequence& s);

      // Constructors.
      //
      ArithmeticComparisonBaseType ();

      ArithmeticComparisonBaseType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ArithmeticComparisonBaseType (const ArithmeticComparisonBaseType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ArithmeticComparisonBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      ArithmeticComparisonBaseType&
      operator= (const ArithmeticComparisonBaseType& x);

      virtual 
      ~ArithmeticComparisonBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ArithmeticExpression_sequence ArithmeticExpression_;
    };

    class QIF30_SYMBOL_DECL ArithmeticEqualType: public ::xsd::qif30::ArithmeticComparisonBaseType
    {
      public:
      // Constructors.
      //
      ArithmeticEqualType ();

      ArithmeticEqualType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ArithmeticEqualType (const ArithmeticEqualType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ArithmeticEqualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      ArithmeticEqualType&
      operator= (const ArithmeticEqualType&) = default;
#endif

      virtual 
      ~ArithmeticEqualType ();
    };

    class QIF30_SYMBOL_DECL GreaterThanType: public ::xsd::qif30::ArithmeticComparisonBaseType
    {
      public:
      // Constructors.
      //
      GreaterThanType ();

      GreaterThanType (const xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      GreaterThanType (const GreaterThanType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual GreaterThanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      GreaterThanType&
      operator= (const GreaterThanType&) = default;
#endif

      virtual 
      ~GreaterThanType ();
    };

    class QIF30_SYMBOL_DECL GreaterOrEqualType: public ::xsd::qif30::ArithmeticComparisonBaseType
    {
      public:
      // Constructors.
      //
      GreaterOrEqualType ();

      GreaterOrEqualType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      GreaterOrEqualType (const GreaterOrEqualType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual GreaterOrEqualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      GreaterOrEqualType&
      operator= (const GreaterOrEqualType&) = default;
#endif

      virtual 
      ~GreaterOrEqualType ();
    };

    class QIF30_SYMBOL_DECL LessThanType: public ::xsd::qif30::ArithmeticComparisonBaseType
    {
      public:
      // Constructors.
      //
      LessThanType ();

      LessThanType (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      LessThanType (const LessThanType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual LessThanType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      LessThanType&
      operator= (const LessThanType&) = default;
#endif

      virtual 
      ~LessThanType ();
    };

    class QIF30_SYMBOL_DECL LessOrEqualType: public ::xsd::qif30::ArithmeticComparisonBaseType
    {
      public:
      // Constructors.
      //
      LessOrEqualType ();

      LessOrEqualType (const xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      LessOrEqualType (const LessOrEqualType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual LessOrEqualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      LessOrEqualType&
      operator= (const LessOrEqualType&) = default;
#endif

      virtual 
      ~LessOrEqualType ();
    };

    class QIF30_SYMBOL_DECL TokenEqualType: public ::xsd::qif30::BooleanExpressionBaseType
    {
      public:
      // TokenExpression
      //
      typedef ::xsd::qif30::TokenExpressionBaseType TokenExpression_type;
      typedef ::xsd::cxx::tree::sequence< TokenExpression_type > TokenExpression_sequence;
      typedef xsd::cxx::tree::sequence< TokenExpression_type >::iterator TokenExpression_iterator;
      typedef xsd::cxx::tree::sequence< TokenExpression_type >::const_iterator TokenExpression_const_iterator;
      typedef ::xsd::cxx::tree::traits< TokenExpression_type, wchar_t > TokenExpression_traits;

      const TokenExpression_sequence&
      TokenExpression () const;

      TokenExpression_sequence&
      TokenExpression ();

      void
      TokenExpression (const TokenExpression_sequence& s);

      // Constructors.
      //
      TokenEqualType ();

      TokenEqualType (const xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      TokenEqualType (const TokenEqualType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual TokenEqualType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TokenEqualType&
      operator= (const TokenEqualType& x);

      virtual 
      ~TokenEqualType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      TokenExpression_sequence TokenExpression_;
    };

    class QIF30_SYMBOL_DECL BooleanConstantEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        QIF_TRUE,
        QIF_FALSE
      };

      BooleanConstantEnumType ();

      BooleanConstantEnumType (value v);

      BooleanConstantEnumType (const wchar_t* v);

      BooleanConstantEnumType (const ::std::wstring& v);

      BooleanConstantEnumType (const ::xml_schema::nmtoken& v);

      BooleanConstantEnumType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      BooleanConstantEnumType (const xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      BooleanConstantEnumType (const ::std::wstring& s,
                               const xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      BooleanConstantEnumType (const BooleanConstantEnumType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
      BooleanConstantEnumType&
      operator= (const BooleanConstantEnumType&) = default;
#endif

      virtual BooleanConstantEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      BooleanConstantEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_BooleanConstantEnumType_convert ();
      }

      protected:
      value
      _xsd_BooleanConstantEnumType_convert () const;

      public:
      static const wchar_t* const _xsd_BooleanConstantEnumType_literals_[2];
      static const value _xsd_BooleanConstantEnumType_indexes_[2];
    };

    class QIF30_SYMBOL_DECL ArithmeticExpressionBaseType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      ArithmeticExpressionBaseType ();

      ArithmeticExpressionBaseType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ArithmeticExpressionBaseType (const xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ArithmeticExpressionBaseType (const ::std::wstring& s,
                                    const xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ArithmeticExpressionBaseType (const ArithmeticExpressionBaseType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ArithmeticExpressionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

#ifdef XSD_CXX11
      ArithmeticExpressionBaseType&
      operator= (const ArithmeticExpressionBaseType&) = default;
#endif

      virtual 
      ~ArithmeticExpressionBaseType ();
    };

    class QIF30_SYMBOL_DECL ArithmeticConstantType: public ::xsd::qif30::ArithmeticExpressionBaseType
    {
      public:
      // val
      //
      typedef ::xml_schema::decimal val_type;
      typedef ::xsd::cxx::tree::traits< val_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > val_traits;

      const val_type&
      val () const;

      val_type&
      val ();

      void
      val (const val_type& x);

      // Constructors.
      //
      ArithmeticConstantType ();

      ArithmeticConstantType (const val_type&);

      ArithmeticConstantType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ArithmeticConstantType (const ArithmeticConstantType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ArithmeticConstantType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ArithmeticConstantType&
      operator= (const ArithmeticConstantType& x);

      virtual 
      ~ArithmeticConstantType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< val_type > val_;
    };

    class QIF30_SYMBOL_DECL NegateType: public ::xsd::qif30::ArithmeticExpressionBaseType
    {
      public:
      // ArithmeticExpression
      //
      typedef ::xsd::qif30::ArithmeticExpressionBaseType ArithmeticExpression_type;
      typedef ::xsd::cxx::tree::traits< ArithmeticExpression_type, wchar_t > ArithmeticExpression_traits;

      const ArithmeticExpression_type&
      ArithmeticExpression () const;

      ArithmeticExpression_type&
      ArithmeticExpression ();

      void
      ArithmeticExpression (const ArithmeticExpression_type& x);

      void
      ArithmeticExpression (::std::unique_ptr< ArithmeticExpression_type > p);

      // Constructors.
      //
      NegateType ();

      NegateType (const ArithmeticExpression_type&);

      NegateType (::std::unique_ptr< ArithmeticExpression_type >);

      NegateType (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      NegateType (const NegateType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual NegateType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      NegateType&
      operator= (const NegateType& x);

      virtual 
      ~NegateType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ArithmeticExpression_type > ArithmeticExpression_;
    };

    class QIF30_SYMBOL_DECL BinaryArithmeticExpressionBaseType: public ::xsd::qif30::ArithmeticExpressionBaseType
    {
      public:
      // ArithmeticExpression
      //
      typedef ::xsd::qif30::ArithmeticExpressionBaseType ArithmeticExpression_type;
      typedef ::xsd::cxx::tree::sequence< ArithmeticExpression_type > ArithmeticExpression_sequence;
      typedef xsd::cxx::tree::sequence< ArithmeticExpression_type >::iterator ArithmeticExpression_iterator;
      typedef xsd::cxx::tree::sequence< ArithmeticExpression_type >::const_iterator ArithmeticExpression_const_iterator;
      typedef ::xsd::cxx::tree::traits< ArithmeticExpression_type, wchar_t > ArithmeticExpression_traits;

      const ArithmeticExpression_sequence&
      ArithmeticExpression () const;

      ArithmeticExpression_sequence&
      ArithmeticExpression ();

      void
      ArithmeticExpression (const ArithmeticExpression_sequence& s);

      // Constructors.
      //
      BinaryArithmeticExpressionBaseType ();

      BinaryArithmeticExpressionBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      BinaryArithmeticExpressionBaseType (const BinaryArithmeticExpressionBaseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual BinaryArithmeticExpressionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      BinaryArithmeticExpressionBaseType&
      operator= (const BinaryArithmeticExpressionBaseType& x);

      virtual 
      ~BinaryArithmeticExpressionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ArithmeticExpression_sequence ArithmeticExpression_;
    };

    class QIF30_SYMBOL_DECL PolyadicArithmeticExpressionBaseType: public ::xsd::qif30::ArithmeticExpressionBaseType
    {
      public:
      // ArithmeticExpression
      //
      typedef ::xsd::qif30::ArithmeticExpressionBaseType ArithmeticExpression_type;
      typedef ::xsd::cxx::tree::sequence< ArithmeticExpression_type > ArithmeticExpression_sequence;
      typedef xsd::cxx::tree::sequence< ArithmeticExpression_type >::iterator ArithmeticExpression_iterator;
      typedef xsd::cxx::tree::sequence< ArithmeticExpression_type >::const_iterator ArithmeticExpression_const_iterator;
      typedef ::xsd::cxx::tree::traits< ArithmeticExpression_type, wchar_t > ArithmeticExpression_traits;

      const ArithmeticExpression_sequence&
      ArithmeticExpression () const;

      ArithmeticExpression_sequence&
      ArithmeticExpression ();

      void
      ArithmeticExpression (const ArithmeticExpression_sequence& s);

      // Constructors.
      //
      PolyadicArithmeticExpressionBaseType ();

      PolyadicArithmeticExpressionBaseType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      PolyadicArithmeticExpressionBaseType (const PolyadicArithmeticExpressionBaseType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual PolyadicArithmeticExpressionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      PolyadicArithmeticExpressionBaseType&
      operator= (const PolyadicArithmeticExpressionBaseType& x);

      virtual 
      ~PolyadicArithmeticExpressionBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ArithmeticExpression_sequence ArithmeticExpression_;
    };

    class QIF30_SYMBOL_DECL PlusType: public ::xsd::qif30::PolyadicArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      PlusType ();

      PlusType (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      PlusType (const PlusType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual PlusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      PlusType&
      operator= (const PlusType&) = default;
#endif

      virtual 
      ~PlusType ();
    };

    class QIF30_SYMBOL_DECL MaxType: public ::xsd::qif30::PolyadicArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      MaxType ();

      MaxType (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      MaxType (const MaxType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual MaxType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      MaxType&
      operator= (const MaxType&) = default;
#endif

      virtual 
      ~MaxType ();
    };

    class QIF30_SYMBOL_DECL MinType: public ::xsd::qif30::PolyadicArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      MinType ();

      MinType (const xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      MinType (const MinType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

      virtual MinType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      MinType&
      operator= (const MinType&) = default;
#endif

      virtual 
      ~MinType ();
    };

    class QIF30_SYMBOL_DECL MinusType: public ::xsd::qif30::BinaryArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      MinusType ();

      MinusType (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      MinusType (const MinusType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual MinusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      MinusType&
      operator= (const MinusType&) = default;
#endif

      virtual 
      ~MinusType ();
    };

    class QIF30_SYMBOL_DECL TimesType: public ::xsd::qif30::PolyadicArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      TimesType ();

      TimesType (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      TimesType (const TimesType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual TimesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      TimesType&
      operator= (const TimesType&) = default;
#endif

      virtual 
      ~TimesType ();
    };

    class QIF30_SYMBOL_DECL DividedByType: public ::xsd::qif30::BinaryArithmeticExpressionBaseType
    {
      public:
      // Constructors.
      //
      DividedByType ();

      DividedByType (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      DividedByType (const DividedByType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual DividedByType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      DividedByType&
      operator= (const DividedByType&) = default;
#endif

      virtual 
      ~DividedByType ();
    };

    class QIF30_SYMBOL_DECL TokenExpressionBaseType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      TokenExpressionBaseType ();

      TokenExpressionBaseType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TokenExpressionBaseType (const xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TokenExpressionBaseType (const ::std::wstring& s,
                               const xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TokenExpressionBaseType (const TokenExpressionBaseType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual TokenExpressionBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

#ifdef XSD_CXX11
      TokenExpressionBaseType&
      operator= (const TokenExpressionBaseType&) = default;
#endif

      virtual 
      ~TokenExpressionBaseType ();
    };

    class QIF30_SYMBOL_DECL TokenConstantType: public ::xsd::qif30::TokenExpressionBaseType
    {
      public:
      // val
      //
      typedef ::xml_schema::token val_type;
      typedef ::xsd::cxx::tree::traits< val_type, wchar_t > val_traits;

      const val_type&
      val () const;

      val_type&
      val ();

      void
      val (const val_type& x);

      void
      val (::std::unique_ptr< val_type > p);

      // Constructors.
      //
      TokenConstantType ();

      TokenConstantType (const val_type&);

      TokenConstantType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      TokenConstantType (const TokenConstantType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual TokenConstantType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TokenConstantType&
      operator= (const TokenConstantType& x);

      virtual 
      ~TokenConstantType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< val_type > val_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif30
  {
    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const BooleanExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const BooleanExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const BooleanExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const NotType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const BinaryBooleanExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const AndType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const OrType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const BooleanEqualType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ConstantIsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ArithmeticComparisonBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ArithmeticEqualType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const GreaterThanType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const GreaterOrEqualType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const LessThanType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const LessOrEqualType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const TokenEqualType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const BooleanConstantEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const BooleanConstantEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const BooleanConstantEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ArithmeticExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const ArithmeticExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const ArithmeticExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ArithmeticConstantType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const NegateType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const BinaryArithmeticExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const PolyadicArithmeticExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const PlusType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const MaxType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const MinType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const MinusType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const TimesType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const DividedByType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const TokenExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const TokenExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const TokenExpressionBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const TokenConstantType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___QIFLIBRARY_GENERIC_EXPRESSIONS_HXX
