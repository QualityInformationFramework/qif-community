// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Characteristics.hxx"

namespace xsd
{
  namespace qif30
  {
    // CharacteristicBaseType
    //

    const CharacteristicBaseType::Attributes_optional& CharacteristicBaseType::
    Attributes () const
    {
      return this->Attributes_;
    }

    CharacteristicBaseType::Attributes_optional& CharacteristicBaseType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void CharacteristicBaseType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void CharacteristicBaseType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void CharacteristicBaseType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }

    const CharacteristicBaseType::Description_optional& CharacteristicBaseType::
    Description () const
    {
      return this->Description_;
    }

    CharacteristicBaseType::Description_optional& CharacteristicBaseType::
    Description ()
    {
      return this->Description_;
    }

    void CharacteristicBaseType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void CharacteristicBaseType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void CharacteristicBaseType::
    Description (::std::unique_ptr< Description_type > x)
    {
      this->Description_.set (std::move (x));
    }

    const CharacteristicBaseType::id_type& CharacteristicBaseType::
    id () const
    {
      return this->id_.get ();
    }

    CharacteristicBaseType::id_type& CharacteristicBaseType::
    id ()
    {
      return this->id_.get ();
    }

    void CharacteristicBaseType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void CharacteristicBaseType::
    id (::std::unique_ptr< id_type > x)
    {
      this->id_.set (std::move (x));
    }


    // CharacteristicItemBaseType
    //

    const CharacteristicItemBaseType::Name_optional& CharacteristicItemBaseType::
    Name () const
    {
      return this->Name_;
    }

    CharacteristicItemBaseType::Name_optional& CharacteristicItemBaseType::
    Name ()
    {
      return this->Name_;
    }

    void CharacteristicItemBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicItemBaseType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void CharacteristicItemBaseType::
    Name (::std::unique_ptr< Name_type > x)
    {
      this->Name_.set (std::move (x));
    }

    const CharacteristicItemBaseType::CharacteristicDesignator_optional& CharacteristicItemBaseType::
    CharacteristicDesignator () const
    {
      return this->CharacteristicDesignator_;
    }

    CharacteristicItemBaseType::CharacteristicDesignator_optional& CharacteristicItemBaseType::
    CharacteristicDesignator ()
    {
      return this->CharacteristicDesignator_;
    }

    void CharacteristicItemBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_type& x)
    {
      this->CharacteristicDesignator_.set (x);
    }

    void CharacteristicItemBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_optional& x)
    {
      this->CharacteristicDesignator_ = x;
    }

    void CharacteristicItemBaseType::
    CharacteristicDesignator (::std::unique_ptr< CharacteristicDesignator_type > x)
    {
      this->CharacteristicDesignator_.set (std::move (x));
    }

    const CharacteristicItemBaseType::FeatureItemIds_optional& CharacteristicItemBaseType::
    FeatureItemIds () const
    {
      return this->FeatureItemIds_;
    }

    CharacteristicItemBaseType::FeatureItemIds_optional& CharacteristicItemBaseType::
    FeatureItemIds ()
    {
      return this->FeatureItemIds_;
    }

    void CharacteristicItemBaseType::
    FeatureItemIds (const FeatureItemIds_type& x)
    {
      this->FeatureItemIds_.set (x);
    }

    void CharacteristicItemBaseType::
    FeatureItemIds (const FeatureItemIds_optional& x)
    {
      this->FeatureItemIds_ = x;
    }

    void CharacteristicItemBaseType::
    FeatureItemIds (::std::unique_ptr< FeatureItemIds_type > x)
    {
      this->FeatureItemIds_.set (std::move (x));
    }

    const CharacteristicItemBaseType::SubstituteFeatureAlgorithm_optional& CharacteristicItemBaseType::
    SubstituteFeatureAlgorithm () const
    {
      return this->SubstituteFeatureAlgorithm_;
    }

    CharacteristicItemBaseType::SubstituteFeatureAlgorithm_optional& CharacteristicItemBaseType::
    SubstituteFeatureAlgorithm ()
    {
      return this->SubstituteFeatureAlgorithm_;
    }

    void CharacteristicItemBaseType::
    SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x)
    {
      this->SubstituteFeatureAlgorithm_.set (x);
    }

    void CharacteristicItemBaseType::
    SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x)
    {
      this->SubstituteFeatureAlgorithm_ = x;
    }

    void CharacteristicItemBaseType::
    SubstituteFeatureAlgorithm (::std::unique_ptr< SubstituteFeatureAlgorithm_type > x)
    {
      this->SubstituteFeatureAlgorithm_.set (std::move (x));
    }

    const CharacteristicItemBaseType::NotableEventIds_optional& CharacteristicItemBaseType::
    NotableEventIds () const
    {
      return this->NotableEventIds_;
    }

    CharacteristicItemBaseType::NotableEventIds_optional& CharacteristicItemBaseType::
    NotableEventIds ()
    {
      return this->NotableEventIds_;
    }

    void CharacteristicItemBaseType::
    NotableEventIds (const NotableEventIds_type& x)
    {
      this->NotableEventIds_.set (x);
    }

    void CharacteristicItemBaseType::
    NotableEventIds (const NotableEventIds_optional& x)
    {
      this->NotableEventIds_ = x;
    }

    void CharacteristicItemBaseType::
    NotableEventIds (::std::unique_ptr< NotableEventIds_type > x)
    {
      this->NotableEventIds_.set (std::move (x));
    }

    const CharacteristicItemBaseType::MeasurementDeviceIds_optional& CharacteristicItemBaseType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    CharacteristicItemBaseType::MeasurementDeviceIds_optional& CharacteristicItemBaseType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void CharacteristicItemBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void CharacteristicItemBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void CharacteristicItemBaseType::
    MeasurementDeviceIds (::std::unique_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (std::move (x));
    }

    const CharacteristicItemBaseType::CharacteristicNominalId_type& CharacteristicItemBaseType::
    CharacteristicNominalId () const
    {
      return this->CharacteristicNominalId_.get ();
    }

    CharacteristicItemBaseType::CharacteristicNominalId_type& CharacteristicItemBaseType::
    CharacteristicNominalId ()
    {
      return this->CharacteristicNominalId_.get ();
    }

    void CharacteristicItemBaseType::
    CharacteristicNominalId (const CharacteristicNominalId_type& x)
    {
      this->CharacteristicNominalId_.set (x);
    }

    void CharacteristicItemBaseType::
    CharacteristicNominalId (::std::unique_ptr< CharacteristicNominalId_type > x)
    {
      this->CharacteristicNominalId_.set (std::move (x));
    }

    const CharacteristicItemBaseType::LocationOnDrawing_optional& CharacteristicItemBaseType::
    LocationOnDrawing () const
    {
      return this->LocationOnDrawing_;
    }

    CharacteristicItemBaseType::LocationOnDrawing_optional& CharacteristicItemBaseType::
    LocationOnDrawing ()
    {
      return this->LocationOnDrawing_;
    }

    void CharacteristicItemBaseType::
    LocationOnDrawing (const LocationOnDrawing_type& x)
    {
      this->LocationOnDrawing_.set (x);
    }

    void CharacteristicItemBaseType::
    LocationOnDrawing (const LocationOnDrawing_optional& x)
    {
      this->LocationOnDrawing_ = x;
    }

    void CharacteristicItemBaseType::
    LocationOnDrawing (::std::unique_ptr< LocationOnDrawing_type > x)
    {
      this->LocationOnDrawing_.set (std::move (x));
    }

    const CharacteristicItemBaseType::VirtualMeasurement_optional& CharacteristicItemBaseType::
    VirtualMeasurement () const
    {
      return this->VirtualMeasurement_;
    }

    CharacteristicItemBaseType::VirtualMeasurement_optional& CharacteristicItemBaseType::
    VirtualMeasurement ()
    {
      return this->VirtualMeasurement_;
    }

    void CharacteristicItemBaseType::
    VirtualMeasurement (const VirtualMeasurement_type& x)
    {
      this->VirtualMeasurement_.set (x);
    }

    void CharacteristicItemBaseType::
    VirtualMeasurement (const VirtualMeasurement_optional& x)
    {
      this->VirtualMeasurement_ = x;
    }

    void CharacteristicItemBaseType::
    VirtualMeasurement (::std::unique_ptr< VirtualMeasurement_type > x)
    {
      this->VirtualMeasurement_.set (std::move (x));
    }


    // CriticalityLevelEnumType
    //

    CriticalityLevelEnumType::
    CriticalityLevelEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CriticalityLevelEnumType_literals_[v])
    {
    }

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (const CriticalityLevelEnumType& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CriticalityLevelEnumType& CriticalityLevelEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CriticalityLevelEnumType_literals_[v]);

      return *this;
    }


    // CriticalityAreaEnumType
    //

    CriticalityAreaEnumType::
    CriticalityAreaEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CriticalityAreaEnumType_literals_[v])
    {
    }

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (const CriticalityAreaEnumType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CriticalityAreaEnumType& CriticalityAreaEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CriticalityAreaEnumType_literals_[v]);

      return *this;
    }


    // CriticalityType
    //

    const CriticalityType::LevelEnum_optional& CriticalityType::
    LevelEnum () const
    {
      return this->LevelEnum_;
    }

    CriticalityType::LevelEnum_optional& CriticalityType::
    LevelEnum ()
    {
      return this->LevelEnum_;
    }

    void CriticalityType::
    LevelEnum (const LevelEnum_type& x)
    {
      this->LevelEnum_.set (x);
    }

    void CriticalityType::
    LevelEnum (const LevelEnum_optional& x)
    {
      this->LevelEnum_ = x;
    }

    void CriticalityType::
    LevelEnum (::std::unique_ptr< LevelEnum_type > x)
    {
      this->LevelEnum_.set (std::move (x));
    }

    const CriticalityType::OtherLevel_optional& CriticalityType::
    OtherLevel () const
    {
      return this->OtherLevel_;
    }

    CriticalityType::OtherLevel_optional& CriticalityType::
    OtherLevel ()
    {
      return this->OtherLevel_;
    }

    void CriticalityType::
    OtherLevel (const OtherLevel_type& x)
    {
      this->OtherLevel_.set (x);
    }

    void CriticalityType::
    OtherLevel (const OtherLevel_optional& x)
    {
      this->OtherLevel_ = x;
    }

    void CriticalityType::
    OtherLevel (::std::unique_ptr< OtherLevel_type > x)
    {
      this->OtherLevel_.set (std::move (x));
    }

    const CriticalityType::AreaEnum_optional& CriticalityType::
    AreaEnum () const
    {
      return this->AreaEnum_;
    }

    CriticalityType::AreaEnum_optional& CriticalityType::
    AreaEnum ()
    {
      return this->AreaEnum_;
    }

    void CriticalityType::
    AreaEnum (const AreaEnum_type& x)
    {
      this->AreaEnum_.set (x);
    }

    void CriticalityType::
    AreaEnum (const AreaEnum_optional& x)
    {
      this->AreaEnum_ = x;
    }

    void CriticalityType::
    AreaEnum (::std::unique_ptr< AreaEnum_type > x)
    {
      this->AreaEnum_.set (std::move (x));
    }

    const CriticalityType::OtherArea_optional& CriticalityType::
    OtherArea () const
    {
      return this->OtherArea_;
    }

    CriticalityType::OtherArea_optional& CriticalityType::
    OtherArea ()
    {
      return this->OtherArea_;
    }

    void CriticalityType::
    OtherArea (const OtherArea_type& x)
    {
      this->OtherArea_.set (x);
    }

    void CriticalityType::
    OtherArea (const OtherArea_optional& x)
    {
      this->OtherArea_ = x;
    }

    void CriticalityType::
    OtherArea (::std::unique_ptr< OtherArea_type > x)
    {
      this->OtherArea_.set (std::move (x));
    }


    // CharacteristicBalloonLocationEnumType
    //

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CharacteristicBalloonLocationEnumType_literals_[v])
    {
    }

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (const CharacteristicBalloonLocationEnumType& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CharacteristicBalloonLocationEnumType& CharacteristicBalloonLocationEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CharacteristicBalloonLocationEnumType_literals_[v]);

      return *this;
    }


    // CharacteristicBalloonStyleEnumType
    //

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CharacteristicBalloonStyleEnumType_literals_[v])
    {
    }

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (const CharacteristicBalloonStyleEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CharacteristicBalloonStyleEnumType& CharacteristicBalloonStyleEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CharacteristicBalloonStyleEnumType_literals_[v]);

      return *this;
    }


    // CharacteristicBalloonType
    //

    const CharacteristicBalloonType::BalloonLocation_type& CharacteristicBalloonType::
    BalloonLocation () const
    {
      return this->BalloonLocation_.get ();
    }

    CharacteristicBalloonType::BalloonLocation_type& CharacteristicBalloonType::
    BalloonLocation ()
    {
      return this->BalloonLocation_.get ();
    }

    void CharacteristicBalloonType::
    BalloonLocation (const BalloonLocation_type& x)
    {
      this->BalloonLocation_.set (x);
    }

    void CharacteristicBalloonType::
    BalloonLocation (::std::unique_ptr< BalloonLocation_type > x)
    {
      this->BalloonLocation_.set (std::move (x));
    }

    const CharacteristicBalloonType::BalloonStyle_type& CharacteristicBalloonType::
    BalloonStyle () const
    {
      return this->BalloonStyle_.get ();
    }

    CharacteristicBalloonType::BalloonStyle_type& CharacteristicBalloonType::
    BalloonStyle ()
    {
      return this->BalloonStyle_.get ();
    }

    void CharacteristicBalloonType::
    BalloonStyle (const BalloonStyle_type& x)
    {
      this->BalloonStyle_.set (x);
    }

    void CharacteristicBalloonType::
    BalloonStyle (::std::unique_ptr< BalloonStyle_type > x)
    {
      this->BalloonStyle_.set (std::move (x));
    }


    // CharacteristicDesignatorType
    //

    const CharacteristicDesignatorType::Designator_type& CharacteristicDesignatorType::
    Designator () const
    {
      return this->Designator_.get ();
    }

    CharacteristicDesignatorType::Designator_type& CharacteristicDesignatorType::
    Designator ()
    {
      return this->Designator_.get ();
    }

    void CharacteristicDesignatorType::
    Designator (const Designator_type& x)
    {
      this->Designator_.set (x);
    }

    void CharacteristicDesignatorType::
    Designator (::std::unique_ptr< Designator_type > x)
    {
      this->Designator_.set (std::move (x));
    }

    const CharacteristicDesignatorType::UUID_optional& CharacteristicDesignatorType::
    UUID () const
    {
      return this->UUID_;
    }

    CharacteristicDesignatorType::UUID_optional& CharacteristicDesignatorType::
    UUID ()
    {
      return this->UUID_;
    }

    void CharacteristicDesignatorType::
    UUID (const UUID_type& x)
    {
      this->UUID_.set (x);
    }

    void CharacteristicDesignatorType::
    UUID (const UUID_optional& x)
    {
      this->UUID_ = x;
    }

    void CharacteristicDesignatorType::
    UUID (::std::unique_ptr< UUID_type > x)
    {
      this->UUID_.set (std::move (x));
    }

    const CharacteristicDesignatorType::Criticality_optional& CharacteristicDesignatorType::
    Criticality () const
    {
      return this->Criticality_;
    }

    CharacteristicDesignatorType::Criticality_optional& CharacteristicDesignatorType::
    Criticality ()
    {
      return this->Criticality_;
    }

    void CharacteristicDesignatorType::
    Criticality (const Criticality_type& x)
    {
      this->Criticality_.set (x);
    }

    void CharacteristicDesignatorType::
    Criticality (const Criticality_optional& x)
    {
      this->Criticality_ = x;
    }

    void CharacteristicDesignatorType::
    Criticality (::std::unique_ptr< Criticality_type > x)
    {
      this->Criticality_.set (std::move (x));
    }

    const CharacteristicDesignatorType::Balloon_optional& CharacteristicDesignatorType::
    Balloon () const
    {
      return this->Balloon_;
    }

    CharacteristicDesignatorType::Balloon_optional& CharacteristicDesignatorType::
    Balloon ()
    {
      return this->Balloon_;
    }

    void CharacteristicDesignatorType::
    Balloon (const Balloon_type& x)
    {
      this->Balloon_.set (x);
    }

    void CharacteristicDesignatorType::
    Balloon (const Balloon_optional& x)
    {
      this->Balloon_ = x;
    }

    void CharacteristicDesignatorType::
    Balloon (::std::unique_ptr< Balloon_type > x)
    {
      this->Balloon_.set (std::move (x));
    }


    // LocationOnDrawingType
    //

    const LocationOnDrawingType::DrawingId_optional& LocationOnDrawingType::
    DrawingId () const
    {
      return this->DrawingId_;
    }

    LocationOnDrawingType::DrawingId_optional& LocationOnDrawingType::
    DrawingId ()
    {
      return this->DrawingId_;
    }

    void LocationOnDrawingType::
    DrawingId (const DrawingId_type& x)
    {
      this->DrawingId_.set (x);
    }

    void LocationOnDrawingType::
    DrawingId (const DrawingId_optional& x)
    {
      this->DrawingId_ = x;
    }

    void LocationOnDrawingType::
    DrawingId (::std::unique_ptr< DrawingId_type > x)
    {
      this->DrawingId_.set (std::move (x));
    }

    const LocationOnDrawingType::SheetNumber_optional& LocationOnDrawingType::
    SheetNumber () const
    {
      return this->SheetNumber_;
    }

    LocationOnDrawingType::SheetNumber_optional& LocationOnDrawingType::
    SheetNumber ()
    {
      return this->SheetNumber_;
    }

    void LocationOnDrawingType::
    SheetNumber (const SheetNumber_type& x)
    {
      this->SheetNumber_.set (x);
    }

    void LocationOnDrawingType::
    SheetNumber (const SheetNumber_optional& x)
    {
      this->SheetNumber_ = x;
    }

    void LocationOnDrawingType::
    SheetNumber (::std::unique_ptr< SheetNumber_type > x)
    {
      this->SheetNumber_.set (std::move (x));
    }

    const LocationOnDrawingType::DrawingZone_optional& LocationOnDrawingType::
    DrawingZone () const
    {
      return this->DrawingZone_;
    }

    LocationOnDrawingType::DrawingZone_optional& LocationOnDrawingType::
    DrawingZone ()
    {
      return this->DrawingZone_;
    }

    void LocationOnDrawingType::
    DrawingZone (const DrawingZone_type& x)
    {
      this->DrawingZone_.set (x);
    }

    void LocationOnDrawingType::
    DrawingZone (const DrawingZone_optional& x)
    {
      this->DrawingZone_ = x;
    }

    void LocationOnDrawingType::
    DrawingZone (::std::unique_ptr< DrawingZone_type > x)
    {
      this->DrawingZone_.set (std::move (x));
    }

    const LocationOnDrawingType::ModelId_optional& LocationOnDrawingType::
    ModelId () const
    {
      return this->ModelId_;
    }

    LocationOnDrawingType::ModelId_optional& LocationOnDrawingType::
    ModelId ()
    {
      return this->ModelId_;
    }

    void LocationOnDrawingType::
    ModelId (const ModelId_type& x)
    {
      this->ModelId_.set (x);
    }

    void LocationOnDrawingType::
    ModelId (const ModelId_optional& x)
    {
      this->ModelId_ = x;
    }

    void LocationOnDrawingType::
    ModelId (::std::unique_ptr< ModelId_type > x)
    {
      this->ModelId_.set (std::move (x));
    }

    const LocationOnDrawingType::View_optional& LocationOnDrawingType::
    View () const
    {
      return this->View_;
    }

    LocationOnDrawingType::View_optional& LocationOnDrawingType::
    View ()
    {
      return this->View_;
    }

    void LocationOnDrawingType::
    View (const View_type& x)
    {
      this->View_.set (x);
    }

    void LocationOnDrawingType::
    View (const View_optional& x)
    {
      this->View_ = x;
    }

    void LocationOnDrawingType::
    View (::std::unique_ptr< View_type > x)
    {
      this->View_.set (std::move (x));
    }

    const LocationOnDrawingType::ViewId_optional& LocationOnDrawingType::
    ViewId () const
    {
      return this->ViewId_;
    }

    LocationOnDrawingType::ViewId_optional& LocationOnDrawingType::
    ViewId ()
    {
      return this->ViewId_;
    }

    void LocationOnDrawingType::
    ViewId (const ViewId_type& x)
    {
      this->ViewId_.set (x);
    }

    void LocationOnDrawingType::
    ViewId (const ViewId_optional& x)
    {
      this->ViewId_ = x;
    }

    void LocationOnDrawingType::
    ViewId (::std::unique_ptr< ViewId_type > x)
    {
      this->ViewId_.set (std::move (x));
    }


    // CharacteristicDefinitionBaseType
    //

    const CharacteristicDefinitionBaseType::Name_optional& CharacteristicDefinitionBaseType::
    Name () const
    {
      return this->Name_;
    }

    CharacteristicDefinitionBaseType::Name_optional& CharacteristicDefinitionBaseType::
    Name ()
    {
      return this->Name_;
    }

    void CharacteristicDefinitionBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void CharacteristicDefinitionBaseType::
    Name (::std::unique_ptr< Name_type > x)
    {
      this->Name_.set (std::move (x));
    }

    const CharacteristicDefinitionBaseType::CharacteristicDesignator_optional& CharacteristicDefinitionBaseType::
    CharacteristicDesignator () const
    {
      return this->CharacteristicDesignator_;
    }

    CharacteristicDefinitionBaseType::CharacteristicDesignator_optional& CharacteristicDefinitionBaseType::
    CharacteristicDesignator ()
    {
      return this->CharacteristicDesignator_;
    }

    void CharacteristicDefinitionBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_type& x)
    {
      this->CharacteristicDesignator_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_optional& x)
    {
      this->CharacteristicDesignator_ = x;
    }

    void CharacteristicDefinitionBaseType::
    CharacteristicDesignator (::std::unique_ptr< CharacteristicDesignator_type > x)
    {
      this->CharacteristicDesignator_.set (std::move (x));
    }

    const CharacteristicDefinitionBaseType::FreeState_optional& CharacteristicDefinitionBaseType::
    FreeState () const
    {
      return this->FreeState_;
    }

    CharacteristicDefinitionBaseType::FreeState_optional& CharacteristicDefinitionBaseType::
    FreeState ()
    {
      return this->FreeState_;
    }

    void CharacteristicDefinitionBaseType::
    FreeState (const FreeState_type& x)
    {
      this->FreeState_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    FreeState (const FreeState_optional& x)
    {
      this->FreeState_ = x;
    }

    const CharacteristicDefinitionBaseType::StatisticalCharacteristic_optional& CharacteristicDefinitionBaseType::
    StatisticalCharacteristic () const
    {
      return this->StatisticalCharacteristic_;
    }

    CharacteristicDefinitionBaseType::StatisticalCharacteristic_optional& CharacteristicDefinitionBaseType::
    StatisticalCharacteristic ()
    {
      return this->StatisticalCharacteristic_;
    }

    void CharacteristicDefinitionBaseType::
    StatisticalCharacteristic (const StatisticalCharacteristic_type& x)
    {
      this->StatisticalCharacteristic_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    StatisticalCharacteristic (const StatisticalCharacteristic_optional& x)
    {
      this->StatisticalCharacteristic_ = x;
    }

    const CharacteristicDefinitionBaseType::CommonZone_optional& CharacteristicDefinitionBaseType::
    CommonZone () const
    {
      return this->CommonZone_;
    }

    CharacteristicDefinitionBaseType::CommonZone_optional& CharacteristicDefinitionBaseType::
    CommonZone ()
    {
      return this->CommonZone_;
    }

    void CharacteristicDefinitionBaseType::
    CommonZone (const CommonZone_type& x)
    {
      this->CommonZone_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    CommonZone (const CommonZone_optional& x)
    {
      this->CommonZone_ = x;
    }

    const CharacteristicDefinitionBaseType::CommonTolerance_optional& CharacteristicDefinitionBaseType::
    CommonTolerance () const
    {
      return this->CommonTolerance_;
    }

    CharacteristicDefinitionBaseType::CommonTolerance_optional& CharacteristicDefinitionBaseType::
    CommonTolerance ()
    {
      return this->CommonTolerance_;
    }

    void CharacteristicDefinitionBaseType::
    CommonTolerance (const CommonTolerance_type& x)
    {
      this->CommonTolerance_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    CommonTolerance (const CommonTolerance_optional& x)
    {
      this->CommonTolerance_ = x;
    }

    const CharacteristicDefinitionBaseType::MedianFeature_optional& CharacteristicDefinitionBaseType::
    MedianFeature () const
    {
      return this->MedianFeature_;
    }

    CharacteristicDefinitionBaseType::MedianFeature_optional& CharacteristicDefinitionBaseType::
    MedianFeature ()
    {
      return this->MedianFeature_;
    }

    void CharacteristicDefinitionBaseType::
    MedianFeature (const MedianFeature_type& x)
    {
      this->MedianFeature_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    MedianFeature (const MedianFeature_optional& x)
    {
      this->MedianFeature_ = x;
    }

    const CharacteristicDefinitionBaseType::EnvelopeRequirement_optional& CharacteristicDefinitionBaseType::
    EnvelopeRequirement () const
    {
      return this->EnvelopeRequirement_;
    }

    CharacteristicDefinitionBaseType::EnvelopeRequirement_optional& CharacteristicDefinitionBaseType::
    EnvelopeRequirement ()
    {
      return this->EnvelopeRequirement_;
    }

    void CharacteristicDefinitionBaseType::
    EnvelopeRequirement (const EnvelopeRequirement_type& x)
    {
      this->EnvelopeRequirement_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    EnvelopeRequirement (const EnvelopeRequirement_optional& x)
    {
      this->EnvelopeRequirement_ = x;
    }

    const CharacteristicDefinitionBaseType::Independency_optional& CharacteristicDefinitionBaseType::
    Independency () const
    {
      return this->Independency_;
    }

    CharacteristicDefinitionBaseType::Independency_optional& CharacteristicDefinitionBaseType::
    Independency ()
    {
      return this->Independency_;
    }

    void CharacteristicDefinitionBaseType::
    Independency (const Independency_type& x)
    {
      this->Independency_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    Independency (const Independency_optional& x)
    {
      this->Independency_ = x;
    }

    const CharacteristicDefinitionBaseType::UnitedOrContinuousFeature_optional& CharacteristicDefinitionBaseType::
    UnitedOrContinuousFeature () const
    {
      return this->UnitedOrContinuousFeature_;
    }

    CharacteristicDefinitionBaseType::UnitedOrContinuousFeature_optional& CharacteristicDefinitionBaseType::
    UnitedOrContinuousFeature ()
    {
      return this->UnitedOrContinuousFeature_;
    }

    void CharacteristicDefinitionBaseType::
    UnitedOrContinuousFeature (const UnitedOrContinuousFeature_type& x)
    {
      this->UnitedOrContinuousFeature_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    UnitedOrContinuousFeature (const UnitedOrContinuousFeature_optional& x)
    {
      this->UnitedOrContinuousFeature_ = x;
    }

    const CharacteristicDefinitionBaseType::SeparateZone_optional& CharacteristicDefinitionBaseType::
    SeparateZone () const
    {
      return this->SeparateZone_;
    }

    CharacteristicDefinitionBaseType::SeparateZone_optional& CharacteristicDefinitionBaseType::
    SeparateZone ()
    {
      return this->SeparateZone_;
    }

    void CharacteristicDefinitionBaseType::
    SeparateZone (const SeparateZone_type& x)
    {
      this->SeparateZone_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    SeparateZone (const SeparateZone_optional& x)
    {
      this->SeparateZone_ = x;
    }


    // CharacteristicNominalBaseType
    //

    const CharacteristicNominalBaseType::CharacteristicDefinitionId_type& CharacteristicNominalBaseType::
    CharacteristicDefinitionId () const
    {
      return this->CharacteristicDefinitionId_.get ();
    }

    CharacteristicNominalBaseType::CharacteristicDefinitionId_type& CharacteristicNominalBaseType::
    CharacteristicDefinitionId ()
    {
      return this->CharacteristicDefinitionId_.get ();
    }

    void CharacteristicNominalBaseType::
    CharacteristicDefinitionId (const CharacteristicDefinitionId_type& x)
    {
      this->CharacteristicDefinitionId_.set (x);
    }

    void CharacteristicNominalBaseType::
    CharacteristicDefinitionId (::std::unique_ptr< CharacteristicDefinitionId_type > x)
    {
      this->CharacteristicDefinitionId_.set (std::move (x));
    }

    const CharacteristicNominalBaseType::FeatureNominalIds_optional& CharacteristicNominalBaseType::
    FeatureNominalIds () const
    {
      return this->FeatureNominalIds_;
    }

    CharacteristicNominalBaseType::FeatureNominalIds_optional& CharacteristicNominalBaseType::
    FeatureNominalIds ()
    {
      return this->FeatureNominalIds_;
    }

    void CharacteristicNominalBaseType::
    FeatureNominalIds (const FeatureNominalIds_type& x)
    {
      this->FeatureNominalIds_.set (x);
    }

    void CharacteristicNominalBaseType::
    FeatureNominalIds (const FeatureNominalIds_optional& x)
    {
      this->FeatureNominalIds_ = x;
    }

    void CharacteristicNominalBaseType::
    FeatureNominalIds (::std::unique_ptr< FeatureNominalIds_type > x)
    {
      this->FeatureNominalIds_.set (std::move (x));
    }

    const CharacteristicNominalBaseType::SubstituteFeatureAlgorithm_optional& CharacteristicNominalBaseType::
    SubstituteFeatureAlgorithm () const
    {
      return this->SubstituteFeatureAlgorithm_;
    }

    CharacteristicNominalBaseType::SubstituteFeatureAlgorithm_optional& CharacteristicNominalBaseType::
    SubstituteFeatureAlgorithm ()
    {
      return this->SubstituteFeatureAlgorithm_;
    }

    void CharacteristicNominalBaseType::
    SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x)
    {
      this->SubstituteFeatureAlgorithm_.set (x);
    }

    void CharacteristicNominalBaseType::
    SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x)
    {
      this->SubstituteFeatureAlgorithm_ = x;
    }

    void CharacteristicNominalBaseType::
    SubstituteFeatureAlgorithm (::std::unique_ptr< SubstituteFeatureAlgorithm_type > x)
    {
      this->SubstituteFeatureAlgorithm_.set (std::move (x));
    }

    const CharacteristicNominalBaseType::FeatureZoneIds_optional& CharacteristicNominalBaseType::
    FeatureZoneIds () const
    {
      return this->FeatureZoneIds_;
    }

    CharacteristicNominalBaseType::FeatureZoneIds_optional& CharacteristicNominalBaseType::
    FeatureZoneIds ()
    {
      return this->FeatureZoneIds_;
    }

    void CharacteristicNominalBaseType::
    FeatureZoneIds (const FeatureZoneIds_type& x)
    {
      this->FeatureZoneIds_.set (x);
    }

    void CharacteristicNominalBaseType::
    FeatureZoneIds (const FeatureZoneIds_optional& x)
    {
      this->FeatureZoneIds_ = x;
    }

    void CharacteristicNominalBaseType::
    FeatureZoneIds (::std::unique_ptr< FeatureZoneIds_type > x)
    {
      this->FeatureZoneIds_.set (std::move (x));
    }

    const CharacteristicNominalBaseType::EntityInternalIds_optional& CharacteristicNominalBaseType::
    EntityInternalIds () const
    {
      return this->EntityInternalIds_;
    }

    CharacteristicNominalBaseType::EntityInternalIds_optional& CharacteristicNominalBaseType::
    EntityInternalIds ()
    {
      return this->EntityInternalIds_;
    }

    void CharacteristicNominalBaseType::
    EntityInternalIds (const EntityInternalIds_type& x)
    {
      this->EntityInternalIds_.set (x);
    }

    void CharacteristicNominalBaseType::
    EntityInternalIds (const EntityInternalIds_optional& x)
    {
      this->EntityInternalIds_ = x;
    }

    void CharacteristicNominalBaseType::
    EntityInternalIds (::std::unique_ptr< EntityInternalIds_type > x)
    {
      this->EntityInternalIds_.set (std::move (x));
    }

    const CharacteristicNominalBaseType::EntityExternalIds_optional& CharacteristicNominalBaseType::
    EntityExternalIds () const
    {
      return this->EntityExternalIds_;
    }

    CharacteristicNominalBaseType::EntityExternalIds_optional& CharacteristicNominalBaseType::
    EntityExternalIds ()
    {
      return this->EntityExternalIds_;
    }

    void CharacteristicNominalBaseType::
    EntityExternalIds (const EntityExternalIds_type& x)
    {
      this->EntityExternalIds_.set (x);
    }

    void CharacteristicNominalBaseType::
    EntityExternalIds (const EntityExternalIds_optional& x)
    {
      this->EntityExternalIds_ = x;
    }

    void CharacteristicNominalBaseType::
    EntityExternalIds (::std::unique_ptr< EntityExternalIds_type > x)
    {
      this->EntityExternalIds_.set (std::move (x));
    }

    const CharacteristicNominalBaseType::Name_optional& CharacteristicNominalBaseType::
    Name () const
    {
      return this->Name_;
    }

    CharacteristicNominalBaseType::Name_optional& CharacteristicNominalBaseType::
    Name ()
    {
      return this->Name_;
    }

    void CharacteristicNominalBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicNominalBaseType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void CharacteristicNominalBaseType::
    Name (::std::unique_ptr< Name_type > x)
    {
      this->Name_.set (std::move (x));
    }

    const CharacteristicNominalBaseType::CharacteristicDesignator_optional& CharacteristicNominalBaseType::
    CharacteristicDesignator () const
    {
      return this->CharacteristicDesignator_;
    }

    CharacteristicNominalBaseType::CharacteristicDesignator_optional& CharacteristicNominalBaseType::
    CharacteristicDesignator ()
    {
      return this->CharacteristicDesignator_;
    }

    void CharacteristicNominalBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_type& x)
    {
      this->CharacteristicDesignator_.set (x);
    }

    void CharacteristicNominalBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_optional& x)
    {
      this->CharacteristicDesignator_ = x;
    }

    void CharacteristicNominalBaseType::
    CharacteristicDesignator (::std::unique_ptr< CharacteristicDesignator_type > x)
    {
      this->CharacteristicDesignator_.set (std::move (x));
    }


    // CharacteristicMeasurementBaseType
    //

    const CharacteristicMeasurementBaseType::Status_type& CharacteristicMeasurementBaseType::
    Status () const
    {
      return this->Status_.get ();
    }

    CharacteristicMeasurementBaseType::Status_type& CharacteristicMeasurementBaseType::
    Status ()
    {
      return this->Status_.get ();
    }

    void CharacteristicMeasurementBaseType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    Status (::std::unique_ptr< Status_type > x)
    {
      this->Status_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::CharacteristicItemId_type& CharacteristicMeasurementBaseType::
    CharacteristicItemId () const
    {
      return this->CharacteristicItemId_.get ();
    }

    CharacteristicMeasurementBaseType::CharacteristicItemId_type& CharacteristicMeasurementBaseType::
    CharacteristicItemId ()
    {
      return this->CharacteristicItemId_.get ();
    }

    void CharacteristicMeasurementBaseType::
    CharacteristicItemId (const CharacteristicItemId_type& x)
    {
      this->CharacteristicItemId_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    CharacteristicItemId (::std::unique_ptr< CharacteristicItemId_type > x)
    {
      this->CharacteristicItemId_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::TimeStamp_optional& CharacteristicMeasurementBaseType::
    TimeStamp () const
    {
      return this->TimeStamp_;
    }

    CharacteristicMeasurementBaseType::TimeStamp_optional& CharacteristicMeasurementBaseType::
    TimeStamp ()
    {
      return this->TimeStamp_;
    }

    void CharacteristicMeasurementBaseType::
    TimeStamp (const TimeStamp_type& x)
    {
      this->TimeStamp_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    TimeStamp (const TimeStamp_optional& x)
    {
      this->TimeStamp_ = x;
    }

    void CharacteristicMeasurementBaseType::
    TimeStamp (::std::unique_ptr< TimeStamp_type > x)
    {
      this->TimeStamp_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::FeatureMeasurementIds_optional& CharacteristicMeasurementBaseType::
    FeatureMeasurementIds () const
    {
      return this->FeatureMeasurementIds_;
    }

    CharacteristicMeasurementBaseType::FeatureMeasurementIds_optional& CharacteristicMeasurementBaseType::
    FeatureMeasurementIds ()
    {
      return this->FeatureMeasurementIds_;
    }

    void CharacteristicMeasurementBaseType::
    FeatureMeasurementIds (const FeatureMeasurementIds_type& x)
    {
      this->FeatureMeasurementIds_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    FeatureMeasurementIds (const FeatureMeasurementIds_optional& x)
    {
      this->FeatureMeasurementIds_ = x;
    }

    void CharacteristicMeasurementBaseType::
    FeatureMeasurementIds (::std::unique_ptr< FeatureMeasurementIds_type > x)
    {
      this->FeatureMeasurementIds_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::SubstituteFeatureAlgorithm_optional& CharacteristicMeasurementBaseType::
    SubstituteFeatureAlgorithm () const
    {
      return this->SubstituteFeatureAlgorithm_;
    }

    CharacteristicMeasurementBaseType::SubstituteFeatureAlgorithm_optional& CharacteristicMeasurementBaseType::
    SubstituteFeatureAlgorithm ()
    {
      return this->SubstituteFeatureAlgorithm_;
    }

    void CharacteristicMeasurementBaseType::
    SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_type& x)
    {
      this->SubstituteFeatureAlgorithm_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    SubstituteFeatureAlgorithm (const SubstituteFeatureAlgorithm_optional& x)
    {
      this->SubstituteFeatureAlgorithm_ = x;
    }

    void CharacteristicMeasurementBaseType::
    SubstituteFeatureAlgorithm (::std::unique_ptr< SubstituteFeatureAlgorithm_type > x)
    {
      this->SubstituteFeatureAlgorithm_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::ActualComponentId_optional& CharacteristicMeasurementBaseType::
    ActualComponentId () const
    {
      return this->ActualComponentId_;
    }

    CharacteristicMeasurementBaseType::ActualComponentId_optional& CharacteristicMeasurementBaseType::
    ActualComponentId ()
    {
      return this->ActualComponentId_;
    }

    void CharacteristicMeasurementBaseType::
    ActualComponentId (const ActualComponentId_type& x)
    {
      this->ActualComponentId_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    ActualComponentId (const ActualComponentId_optional& x)
    {
      this->ActualComponentId_ = x;
    }

    void CharacteristicMeasurementBaseType::
    ActualComponentId (::std::unique_ptr< ActualComponentId_type > x)
    {
      this->ActualComponentId_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::MeasurementDeviceIds_optional& CharacteristicMeasurementBaseType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    CharacteristicMeasurementBaseType::MeasurementDeviceIds_optional& CharacteristicMeasurementBaseType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void CharacteristicMeasurementBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void CharacteristicMeasurementBaseType::
    MeasurementDeviceIds (::std::unique_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::ManufacturingProcessId_optional& CharacteristicMeasurementBaseType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    CharacteristicMeasurementBaseType::ManufacturingProcessId_optional& CharacteristicMeasurementBaseType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void CharacteristicMeasurementBaseType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void CharacteristicMeasurementBaseType::
    ManufacturingProcessId (::std::unique_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::NotedEventIds_optional& CharacteristicMeasurementBaseType::
    NotedEventIds () const
    {
      return this->NotedEventIds_;
    }

    CharacteristicMeasurementBaseType::NotedEventIds_optional& CharacteristicMeasurementBaseType::
    NotedEventIds ()
    {
      return this->NotedEventIds_;
    }

    void CharacteristicMeasurementBaseType::
    NotedEventIds (const NotedEventIds_type& x)
    {
      this->NotedEventIds_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    NotedEventIds (const NotedEventIds_optional& x)
    {
      this->NotedEventIds_ = x;
    }

    void CharacteristicMeasurementBaseType::
    NotedEventIds (::std::unique_ptr< NotedEventIds_type > x)
    {
      this->NotedEventIds_.set (std::move (x));
    }

    const CharacteristicMeasurementBaseType::NonConformanceDesignator_optional& CharacteristicMeasurementBaseType::
    NonConformanceDesignator () const
    {
      return this->NonConformanceDesignator_;
    }

    CharacteristicMeasurementBaseType::NonConformanceDesignator_optional& CharacteristicMeasurementBaseType::
    NonConformanceDesignator ()
    {
      return this->NonConformanceDesignator_;
    }

    void CharacteristicMeasurementBaseType::
    NonConformanceDesignator (const NonConformanceDesignator_type& x)
    {
      this->NonConformanceDesignator_.set (x);
    }

    void CharacteristicMeasurementBaseType::
    NonConformanceDesignator (const NonConformanceDesignator_optional& x)
    {
      this->NonConformanceDesignator_ = x;
    }

    void CharacteristicMeasurementBaseType::
    NonConformanceDesignator (::std::unique_ptr< NonConformanceDesignator_type > x)
    {
      this->NonConformanceDesignator_.set (std::move (x));
    }


    // AssociatedTolerancedFeatureSpecificationElementEnumType
    //

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_literals_[v])
    {
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (const AssociatedTolerancedFeatureSpecificationElementEnumType& v,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType& AssociatedTolerancedFeatureSpecificationElementEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_literals_[v]);

      return *this;
    }


    // ReferenceFeatureAssociationSpecificationElementEnumType
    //

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ReferenceFeatureAssociationSpecificationElementEnumType_literals_[v])
    {
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (const ReferenceFeatureAssociationSpecificationElementEnumType& v,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ReferenceFeatureAssociationSpecificationElementEnumType& ReferenceFeatureAssociationSpecificationElementEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ReferenceFeatureAssociationSpecificationElementEnumType_literals_[v]);

      return *this;
    }


    // ReferenceFeatureAssociationSpecificationParameterEnumType
    //

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_literals_[v])
    {
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (const ReferenceFeatureAssociationSpecificationParameterEnumType& v,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType& ReferenceFeatureAssociationSpecificationParameterEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_literals_[v]);

      return *this;
    }


    // SingleNestingIndexFilterSymbolEnumType
    //

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_SingleNestingIndexFilterSymbolEnumType_literals_[v])
    {
    }

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (const SingleNestingIndexFilterSymbolEnumType& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    SingleNestingIndexFilterSymbolEnumType& SingleNestingIndexFilterSymbolEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_SingleNestingIndexFilterSymbolEnumType_literals_[v]);

      return *this;
    }


    // SingleNestingIndexFilterType
    //

    const SingleNestingIndexFilterType::Symbol_type& SingleNestingIndexFilterType::
    Symbol () const
    {
      return this->Symbol_.get ();
    }

    SingleNestingIndexFilterType::Symbol_type& SingleNestingIndexFilterType::
    Symbol ()
    {
      return this->Symbol_.get ();
    }

    void SingleNestingIndexFilterType::
    Symbol (const Symbol_type& x)
    {
      this->Symbol_.set (x);
    }

    void SingleNestingIndexFilterType::
    Symbol (::std::unique_ptr< Symbol_type > x)
    {
      this->Symbol_.set (std::move (x));
    }

    const SingleNestingIndexFilterType::NestingIndex_type& SingleNestingIndexFilterType::
    NestingIndex () const
    {
      return this->NestingIndex_.get ();
    }

    SingleNestingIndexFilterType::NestingIndex_type& SingleNestingIndexFilterType::
    NestingIndex ()
    {
      return this->NestingIndex_.get ();
    }

    void SingleNestingIndexFilterType::
    NestingIndex (const NestingIndex_type& x)
    {
      this->NestingIndex_.set (x);
    }

    void SingleNestingIndexFilterType::
    NestingIndex (::std::unique_ptr< NestingIndex_type > x)
    {
      this->NestingIndex_.set (std::move (x));
    }

    const SingleNestingIndexFilterType::SecondDirectionNestingIndex_optional& SingleNestingIndexFilterType::
    SecondDirectionNestingIndex () const
    {
      return this->SecondDirectionNestingIndex_;
    }

    SingleNestingIndexFilterType::SecondDirectionNestingIndex_optional& SingleNestingIndexFilterType::
    SecondDirectionNestingIndex ()
    {
      return this->SecondDirectionNestingIndex_;
    }

    void SingleNestingIndexFilterType::
    SecondDirectionNestingIndex (const SecondDirectionNestingIndex_type& x)
    {
      this->SecondDirectionNestingIndex_.set (x);
    }

    void SingleNestingIndexFilterType::
    SecondDirectionNestingIndex (const SecondDirectionNestingIndex_optional& x)
    {
      this->SecondDirectionNestingIndex_ = x;
    }

    void SingleNestingIndexFilterType::
    SecondDirectionNestingIndex (::std::unique_ptr< SecondDirectionNestingIndex_type > x)
    {
      this->SecondDirectionNestingIndex_.set (std::move (x));
    }


    // DualNestingIndexFilterSymbolEnumType
    //

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_DualNestingIndexFilterSymbolEnumType_literals_[v])
    {
    }

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (const DualNestingIndexFilterSymbolEnumType& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    DualNestingIndexFilterSymbolEnumType& DualNestingIndexFilterSymbolEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_DualNestingIndexFilterSymbolEnumType_literals_[v]);

      return *this;
    }


    // DualNestingIndexFilterType
    //

    const DualNestingIndexFilterType::Symbol_type& DualNestingIndexFilterType::
    Symbol () const
    {
      return this->Symbol_.get ();
    }

    DualNestingIndexFilterType::Symbol_type& DualNestingIndexFilterType::
    Symbol ()
    {
      return this->Symbol_.get ();
    }

    void DualNestingIndexFilterType::
    Symbol (const Symbol_type& x)
    {
      this->Symbol_.set (x);
    }

    void DualNestingIndexFilterType::
    Symbol (::std::unique_ptr< Symbol_type > x)
    {
      this->Symbol_.set (std::move (x));
    }

    const DualNestingIndexFilterType::FirstNestingIndex_optional& DualNestingIndexFilterType::
    FirstNestingIndex () const
    {
      return this->FirstNestingIndex_;
    }

    DualNestingIndexFilterType::FirstNestingIndex_optional& DualNestingIndexFilterType::
    FirstNestingIndex ()
    {
      return this->FirstNestingIndex_;
    }

    void DualNestingIndexFilterType::
    FirstNestingIndex (const FirstNestingIndex_type& x)
    {
      this->FirstNestingIndex_.set (x);
    }

    void DualNestingIndexFilterType::
    FirstNestingIndex (const FirstNestingIndex_optional& x)
    {
      this->FirstNestingIndex_ = x;
    }

    void DualNestingIndexFilterType::
    FirstNestingIndex (::std::unique_ptr< FirstNestingIndex_type > x)
    {
      this->FirstNestingIndex_.set (std::move (x));
    }

    const DualNestingIndexFilterType::SecondNestingIndex_optional& DualNestingIndexFilterType::
    SecondNestingIndex () const
    {
      return this->SecondNestingIndex_;
    }

    DualNestingIndexFilterType::SecondNestingIndex_optional& DualNestingIndexFilterType::
    SecondNestingIndex ()
    {
      return this->SecondNestingIndex_;
    }

    void DualNestingIndexFilterType::
    SecondNestingIndex (const SecondNestingIndex_type& x)
    {
      this->SecondNestingIndex_.set (x);
    }

    void DualNestingIndexFilterType::
    SecondNestingIndex (const SecondNestingIndex_optional& x)
    {
      this->SecondNestingIndex_ = x;
    }

    void DualNestingIndexFilterType::
    SecondNestingIndex (::std::unique_ptr< SecondNestingIndex_type > x)
    {
      this->SecondNestingIndex_.set (std::move (x));
    }

    const DualNestingIndexFilterType::SecondDirectionFirstNestingIndex_optional& DualNestingIndexFilterType::
    SecondDirectionFirstNestingIndex () const
    {
      return this->SecondDirectionFirstNestingIndex_;
    }

    DualNestingIndexFilterType::SecondDirectionFirstNestingIndex_optional& DualNestingIndexFilterType::
    SecondDirectionFirstNestingIndex ()
    {
      return this->SecondDirectionFirstNestingIndex_;
    }

    void DualNestingIndexFilterType::
    SecondDirectionFirstNestingIndex (const SecondDirectionFirstNestingIndex_type& x)
    {
      this->SecondDirectionFirstNestingIndex_.set (x);
    }

    void DualNestingIndexFilterType::
    SecondDirectionFirstNestingIndex (const SecondDirectionFirstNestingIndex_optional& x)
    {
      this->SecondDirectionFirstNestingIndex_ = x;
    }

    void DualNestingIndexFilterType::
    SecondDirectionFirstNestingIndex (::std::unique_ptr< SecondDirectionFirstNestingIndex_type > x)
    {
      this->SecondDirectionFirstNestingIndex_.set (std::move (x));
    }

    const DualNestingIndexFilterType::SecondDirectionSecondNestingIndex_optional& DualNestingIndexFilterType::
    SecondDirectionSecondNestingIndex () const
    {
      return this->SecondDirectionSecondNestingIndex_;
    }

    DualNestingIndexFilterType::SecondDirectionSecondNestingIndex_optional& DualNestingIndexFilterType::
    SecondDirectionSecondNestingIndex ()
    {
      return this->SecondDirectionSecondNestingIndex_;
    }

    void DualNestingIndexFilterType::
    SecondDirectionSecondNestingIndex (const SecondDirectionSecondNestingIndex_type& x)
    {
      this->SecondDirectionSecondNestingIndex_.set (x);
    }

    void DualNestingIndexFilterType::
    SecondDirectionSecondNestingIndex (const SecondDirectionSecondNestingIndex_optional& x)
    {
      this->SecondDirectionSecondNestingIndex_ = x;
    }

    void DualNestingIndexFilterType::
    SecondDirectionSecondNestingIndex (::std::unique_ptr< SecondDirectionSecondNestingIndex_type > x)
    {
      this->SecondDirectionSecondNestingIndex_.set (std::move (x));
    }


    // FilterType
    //

    const FilterType::SingleNestingIndexFilter_optional& FilterType::
    SingleNestingIndexFilter () const
    {
      return this->SingleNestingIndexFilter_;
    }

    FilterType::SingleNestingIndexFilter_optional& FilterType::
    SingleNestingIndexFilter ()
    {
      return this->SingleNestingIndexFilter_;
    }

    void FilterType::
    SingleNestingIndexFilter (const SingleNestingIndexFilter_type& x)
    {
      this->SingleNestingIndexFilter_.set (x);
    }

    void FilterType::
    SingleNestingIndexFilter (const SingleNestingIndexFilter_optional& x)
    {
      this->SingleNestingIndexFilter_ = x;
    }

    void FilterType::
    SingleNestingIndexFilter (::std::unique_ptr< SingleNestingIndexFilter_type > x)
    {
      this->SingleNestingIndexFilter_.set (std::move (x));
    }

    const FilterType::DualNestingIndexFilter_optional& FilterType::
    DualNestingIndexFilter () const
    {
      return this->DualNestingIndexFilter_;
    }

    FilterType::DualNestingIndexFilter_optional& FilterType::
    DualNestingIndexFilter ()
    {
      return this->DualNestingIndexFilter_;
    }

    void FilterType::
    DualNestingIndexFilter (const DualNestingIndexFilter_type& x)
    {
      this->DualNestingIndexFilter_.set (x);
    }

    void FilterType::
    DualNestingIndexFilter (const DualNestingIndexFilter_optional& x)
    {
      this->DualNestingIndexFilter_ = x;
    }

    void FilterType::
    DualNestingIndexFilter (::std::unique_ptr< DualNestingIndexFilter_type > x)
    {
      this->DualNestingIndexFilter_.set (std::move (x));
    }


    // ReferenceFeatureAssociationSpecificationElementType
    //

    const ReferenceFeatureAssociationSpecificationElementType::Filter_optional& ReferenceFeatureAssociationSpecificationElementType::
    Filter () const
    {
      return this->Filter_;
    }

    ReferenceFeatureAssociationSpecificationElementType::Filter_optional& ReferenceFeatureAssociationSpecificationElementType::
    Filter ()
    {
      return this->Filter_;
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    Filter (const Filter_type& x)
    {
      this->Filter_.set (x);
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    Filter (const Filter_optional& x)
    {
      this->Filter_ = x;
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    Filter (::std::unique_ptr< Filter_type > x)
    {
      this->Filter_.set (std::move (x));
    }

    const ReferenceFeatureAssociationSpecificationElementType::Association_type& ReferenceFeatureAssociationSpecificationElementType::
    Association () const
    {
      return this->Association_.get ();
    }

    ReferenceFeatureAssociationSpecificationElementType::Association_type& ReferenceFeatureAssociationSpecificationElementType::
    Association ()
    {
      return this->Association_.get ();
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    Association (const Association_type& x)
    {
      this->Association_.set (x);
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    Association (::std::unique_ptr< Association_type > x)
    {
      this->Association_.set (std::move (x));
    }

    const ReferenceFeatureAssociationSpecificationElementType::Parameter_type& ReferenceFeatureAssociationSpecificationElementType::
    Parameter () const
    {
      return this->Parameter_.get ();
    }

    ReferenceFeatureAssociationSpecificationElementType::Parameter_type& ReferenceFeatureAssociationSpecificationElementType::
    Parameter ()
    {
      return this->Parameter_.get ();
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    Parameter (const Parameter_type& x)
    {
      this->Parameter_.set (x);
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    Parameter (::std::unique_ptr< Parameter_type > x)
    {
      this->Parameter_.set (std::move (x));
    }


    // GeometricCharacteristicDefinitionBaseType
    //

    const GeometricCharacteristicDefinitionBaseType::AssociatedTolerancedFeatureSpecificationElement_optional& GeometricCharacteristicDefinitionBaseType::
    AssociatedTolerancedFeatureSpecificationElement () const
    {
      return this->AssociatedTolerancedFeatureSpecificationElement_;
    }

    GeometricCharacteristicDefinitionBaseType::AssociatedTolerancedFeatureSpecificationElement_optional& GeometricCharacteristicDefinitionBaseType::
    AssociatedTolerancedFeatureSpecificationElement ()
    {
      return this->AssociatedTolerancedFeatureSpecificationElement_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    AssociatedTolerancedFeatureSpecificationElement (const AssociatedTolerancedFeatureSpecificationElement_type& x)
    {
      this->AssociatedTolerancedFeatureSpecificationElement_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    AssociatedTolerancedFeatureSpecificationElement (const AssociatedTolerancedFeatureSpecificationElement_optional& x)
    {
      this->AssociatedTolerancedFeatureSpecificationElement_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    AssociatedTolerancedFeatureSpecificationElement (::std::unique_ptr< AssociatedTolerancedFeatureSpecificationElement_type > x)
    {
      this->AssociatedTolerancedFeatureSpecificationElement_.set (std::move (x));
    }

    const GeometricCharacteristicDefinitionBaseType::ReferenceFeatureAssociationSpecificationElement_optional& GeometricCharacteristicDefinitionBaseType::
    ReferenceFeatureAssociationSpecificationElement () const
    {
      return this->ReferenceFeatureAssociationSpecificationElement_;
    }

    GeometricCharacteristicDefinitionBaseType::ReferenceFeatureAssociationSpecificationElement_optional& GeometricCharacteristicDefinitionBaseType::
    ReferenceFeatureAssociationSpecificationElement ()
    {
      return this->ReferenceFeatureAssociationSpecificationElement_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    ReferenceFeatureAssociationSpecificationElement (const ReferenceFeatureAssociationSpecificationElement_type& x)
    {
      this->ReferenceFeatureAssociationSpecificationElement_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    ReferenceFeatureAssociationSpecificationElement (const ReferenceFeatureAssociationSpecificationElement_optional& x)
    {
      this->ReferenceFeatureAssociationSpecificationElement_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    ReferenceFeatureAssociationSpecificationElement (::std::unique_ptr< ReferenceFeatureAssociationSpecificationElement_type > x)
    {
      this->ReferenceFeatureAssociationSpecificationElement_.set (std::move (x));
    }

    const GeometricCharacteristicDefinitionBaseType::DirectionFeature_optional& GeometricCharacteristicDefinitionBaseType::
    DirectionFeature () const
    {
      return this->DirectionFeature_;
    }

    GeometricCharacteristicDefinitionBaseType::DirectionFeature_optional& GeometricCharacteristicDefinitionBaseType::
    DirectionFeature ()
    {
      return this->DirectionFeature_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    DirectionFeature (const DirectionFeature_type& x)
    {
      this->DirectionFeature_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    DirectionFeature (const DirectionFeature_optional& x)
    {
      this->DirectionFeature_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    DirectionFeature (::std::unique_ptr< DirectionFeature_type > x)
    {
      this->DirectionFeature_.set (std::move (x));
    }

    const GeometricCharacteristicDefinitionBaseType::CollectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    CollectionPlane () const
    {
      return this->CollectionPlane_;
    }

    GeometricCharacteristicDefinitionBaseType::CollectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    CollectionPlane ()
    {
      return this->CollectionPlane_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    CollectionPlane (const CollectionPlane_type& x)
    {
      this->CollectionPlane_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    CollectionPlane (const CollectionPlane_optional& x)
    {
      this->CollectionPlane_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    CollectionPlane (::std::unique_ptr< CollectionPlane_type > x)
    {
      this->CollectionPlane_.set (std::move (x));
    }

    const GeometricCharacteristicDefinitionBaseType::IntersectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane () const
    {
      return this->IntersectionPlane_;
    }

    GeometricCharacteristicDefinitionBaseType::IntersectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane ()
    {
      return this->IntersectionPlane_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane (const IntersectionPlane_type& x)
    {
      this->IntersectionPlane_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane (const IntersectionPlane_optional& x)
    {
      this->IntersectionPlane_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane (::std::unique_ptr< IntersectionPlane_type > x)
    {
      this->IntersectionPlane_.set (std::move (x));
    }

    const GeometricCharacteristicDefinitionBaseType::OrientationPlane_optional& GeometricCharacteristicDefinitionBaseType::
    OrientationPlane () const
    {
      return this->OrientationPlane_;
    }

    GeometricCharacteristicDefinitionBaseType::OrientationPlane_optional& GeometricCharacteristicDefinitionBaseType::
    OrientationPlane ()
    {
      return this->OrientationPlane_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    OrientationPlane (const OrientationPlane_type& x)
    {
      this->OrientationPlane_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    OrientationPlane (const OrientationPlane_optional& x)
    {
      this->OrientationPlane_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    OrientationPlane (::std::unique_ptr< OrientationPlane_type > x)
    {
      this->OrientationPlane_.set (std::move (x));
    }


    // GeometricCharacteristicNominalBaseType
    //


    // GeometricCharacteristicMeasurementBaseType
    //

    const GeometricCharacteristicMeasurementBaseType::Value_optional& GeometricCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    GeometricCharacteristicMeasurementBaseType::Value_optional& GeometricCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void GeometricCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void GeometricCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void GeometricCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const GeometricCharacteristicMeasurementBaseType::MaxValue_optional& GeometricCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    GeometricCharacteristicMeasurementBaseType::MaxValue_optional& GeometricCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void GeometricCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void GeometricCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void GeometricCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const GeometricCharacteristicMeasurementBaseType::MinValue_optional& GeometricCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    GeometricCharacteristicMeasurementBaseType::MinValue_optional& GeometricCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void GeometricCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void GeometricCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void GeometricCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // GeometricCharacteristicItemBaseType
    //


    // DimensionalCharacteristicDefinitionBaseType
    //

    const DimensionalCharacteristicDefinitionBaseType::DimensionType_optional& DimensionalCharacteristicDefinitionBaseType::
    DimensionType () const
    {
      return this->DimensionType_;
    }

    DimensionalCharacteristicDefinitionBaseType::DimensionType_optional& DimensionalCharacteristicDefinitionBaseType::
    DimensionType ()
    {
      return this->DimensionType_;
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionType (const DimensionType_type& x)
    {
      this->DimensionType_.set (x);
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionType (const DimensionType_optional& x)
    {
      this->DimensionType_ = x;
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionType (::std::unique_ptr< DimensionType_type > x)
    {
      this->DimensionType_.set (std::move (x));
    }

    const DimensionalCharacteristicDefinitionBaseType::DimensionModifiers_optional& DimensionalCharacteristicDefinitionBaseType::
    DimensionModifiers () const
    {
      return this->DimensionModifiers_;
    }

    DimensionalCharacteristicDefinitionBaseType::DimensionModifiers_optional& DimensionalCharacteristicDefinitionBaseType::
    DimensionModifiers ()
    {
      return this->DimensionModifiers_;
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionModifiers (const DimensionModifiers_type& x)
    {
      this->DimensionModifiers_.set (x);
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionModifiers (const DimensionModifiers_optional& x)
    {
      this->DimensionModifiers_ = x;
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionModifiers (::std::unique_ptr< DimensionModifiers_type > x)
    {
      this->DimensionModifiers_.set (std::move (x));
    }


    // DimensionalCharacteristicNominalBaseType
    //


    // DimensionalCharacteristicMeasurementBaseType
    //


    // DimensionalCharacteristicItemBaseType
    //


    // CoordinateCharacteristicDefinitionBaseType
    //


    // CoordinateCharacteristicNominalBaseType
    //


    // CoordinateCharacteristicMeasurementBaseType
    //

    const CoordinateCharacteristicMeasurementBaseType::TypeOfCoordinates_type& CoordinateCharacteristicMeasurementBaseType::
    TypeOfCoordinates () const
    {
      return this->TypeOfCoordinates_.get ();
    }

    CoordinateCharacteristicMeasurementBaseType::TypeOfCoordinates_type& CoordinateCharacteristicMeasurementBaseType::
    TypeOfCoordinates ()
    {
      return this->TypeOfCoordinates_.get ();
    }

    void CoordinateCharacteristicMeasurementBaseType::
    TypeOfCoordinates (const TypeOfCoordinates_type& x)
    {
      this->TypeOfCoordinates_.set (x);
    }

    void CoordinateCharacteristicMeasurementBaseType::
    TypeOfCoordinates (::std::unique_ptr< TypeOfCoordinates_type > x)
    {
      this->TypeOfCoordinates_.set (std::move (x));
    }


    // CoordinateCharacteristicItemBaseType
    //


    // UserDefinedAttributeCharacteristicDefinitionType
    //

    const UserDefinedAttributeCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAttributeCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedAttributeCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAttributeCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedAttributeCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedAttributeCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedAttributeCharacteristicNominalType
    //

    const UserDefinedAttributeCharacteristicNominalType::PassValues_optional& UserDefinedAttributeCharacteristicNominalType::
    PassValues () const
    {
      return this->PassValues_;
    }

    UserDefinedAttributeCharacteristicNominalType::PassValues_optional& UserDefinedAttributeCharacteristicNominalType::
    PassValues ()
    {
      return this->PassValues_;
    }

    void UserDefinedAttributeCharacteristicNominalType::
    PassValues (const PassValues_type& x)
    {
      this->PassValues_.set (x);
    }

    void UserDefinedAttributeCharacteristicNominalType::
    PassValues (const PassValues_optional& x)
    {
      this->PassValues_ = x;
    }

    void UserDefinedAttributeCharacteristicNominalType::
    PassValues (::std::unique_ptr< PassValues_type > x)
    {
      this->PassValues_.set (std::move (x));
    }

    const UserDefinedAttributeCharacteristicNominalType::FailValues_optional& UserDefinedAttributeCharacteristicNominalType::
    FailValues () const
    {
      return this->FailValues_;
    }

    UserDefinedAttributeCharacteristicNominalType::FailValues_optional& UserDefinedAttributeCharacteristicNominalType::
    FailValues ()
    {
      return this->FailValues_;
    }

    void UserDefinedAttributeCharacteristicNominalType::
    FailValues (const FailValues_type& x)
    {
      this->FailValues_.set (x);
    }

    void UserDefinedAttributeCharacteristicNominalType::
    FailValues (const FailValues_optional& x)
    {
      this->FailValues_ = x;
    }

    void UserDefinedAttributeCharacteristicNominalType::
    FailValues (::std::unique_ptr< FailValues_type > x)
    {
      this->FailValues_.set (std::move (x));
    }


    // UserDefinedAttributeCharacteristicMeasurementType
    //

    const UserDefinedAttributeCharacteristicMeasurementType::Value_optional& UserDefinedAttributeCharacteristicMeasurementType::
    Value () const
    {
      return this->Value_;
    }

    UserDefinedAttributeCharacteristicMeasurementType::Value_optional& UserDefinedAttributeCharacteristicMeasurementType::
    Value ()
    {
      return this->Value_;
    }

    void UserDefinedAttributeCharacteristicMeasurementType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void UserDefinedAttributeCharacteristicMeasurementType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void UserDefinedAttributeCharacteristicMeasurementType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }


    // UserDefinedAttributeCharacteristicItemType
    //


    // StringValuesType
    //

    const StringValuesType::StringValue_sequence& StringValuesType::
    StringValue () const
    {
      return this->StringValue_;
    }

    StringValuesType::StringValue_sequence& StringValuesType::
    StringValue ()
    {
      return this->StringValue_;
    }

    void StringValuesType::
    StringValue (const StringValue_sequence& s)
    {
      this->StringValue_ = s;
    }

    const StringValuesType::n_type& StringValuesType::
    n () const
    {
      return this->n_.get ();
    }

    StringValuesType::n_type& StringValuesType::
    n ()
    {
      return this->n_.get ();
    }

    void StringValuesType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void StringValuesType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // LinearCharacteristicDefinitionBaseType
    //

    const LinearCharacteristicDefinitionBaseType::Tolerance_optional& LinearCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    LinearCharacteristicDefinitionBaseType::Tolerance_optional& LinearCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void LinearCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void LinearCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void LinearCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const LinearCharacteristicDefinitionBaseType::NonTolerance_optional& LinearCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    LinearCharacteristicDefinitionBaseType::NonTolerance_optional& LinearCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void LinearCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void LinearCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void LinearCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // UserDefinedLinearCharacteristicDefinitionType
    //

    const UserDefinedLinearCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedLinearCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // LinearCharacteristicNominalBaseType
    //

    const LinearCharacteristicNominalBaseType::TargetValue_optional& LinearCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    LinearCharacteristicNominalBaseType::TargetValue_optional& LinearCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void LinearCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void LinearCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void LinearCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }

    const LinearCharacteristicNominalBaseType::TargetDualValue_optional& LinearCharacteristicNominalBaseType::
    TargetDualValue () const
    {
      return this->TargetDualValue_;
    }

    LinearCharacteristicNominalBaseType::TargetDualValue_optional& LinearCharacteristicNominalBaseType::
    TargetDualValue ()
    {
      return this->TargetDualValue_;
    }

    void LinearCharacteristicNominalBaseType::
    TargetDualValue (const TargetDualValue_type& x)
    {
      this->TargetDualValue_.set (x);
    }

    void LinearCharacteristicNominalBaseType::
    TargetDualValue (const TargetDualValue_optional& x)
    {
      this->TargetDualValue_ = x;
    }

    void LinearCharacteristicNominalBaseType::
    TargetDualValue (::std::unique_ptr< TargetDualValue_type > x)
    {
      this->TargetDualValue_.set (std::move (x));
    }


    // UserDefinedLinearCharacteristicNominalType
    //


    // LinearCharacteristicMeasurementBaseType
    //

    const LinearCharacteristicMeasurementBaseType::Value_optional& LinearCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    LinearCharacteristicMeasurementBaseType::Value_optional& LinearCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void LinearCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void LinearCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void LinearCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const LinearCharacteristicMeasurementBaseType::MaxValue_optional& LinearCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    LinearCharacteristicMeasurementBaseType::MaxValue_optional& LinearCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void LinearCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void LinearCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void LinearCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const LinearCharacteristicMeasurementBaseType::MinValue_optional& LinearCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    LinearCharacteristicMeasurementBaseType::MinValue_optional& LinearCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void LinearCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void LinearCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void LinearCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // UserDefinedLinearCharacteristicMeasurementType
    //


    // LinearCharacteristicItemBaseType
    //


    // UserDefinedLinearCharacteristicItemType
    //


    // AngularCharacteristicDefinitionBaseType
    //

    const AngularCharacteristicDefinitionBaseType::Tolerance_optional& AngularCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    AngularCharacteristicDefinitionBaseType::Tolerance_optional& AngularCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void AngularCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void AngularCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void AngularCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const AngularCharacteristicDefinitionBaseType::NonTolerance_optional& AngularCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    AngularCharacteristicDefinitionBaseType::NonTolerance_optional& AngularCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void AngularCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void AngularCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void AngularCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // UserDefinedAngularCharacteristicDefinitionType
    //

    const UserDefinedAngularCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedAngularCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // AngularCharacteristicNominalBaseType
    //

    const AngularCharacteristicNominalBaseType::TargetValue_optional& AngularCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    AngularCharacteristicNominalBaseType::TargetValue_optional& AngularCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void AngularCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void AngularCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void AngularCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // UserDefinedAngularCharacteristicNominalType
    //


    // AngularCharacteristicMeasurementBaseType
    //

    const AngularCharacteristicMeasurementBaseType::Value_optional& AngularCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    AngularCharacteristicMeasurementBaseType::Value_optional& AngularCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void AngularCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void AngularCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void AngularCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const AngularCharacteristicMeasurementBaseType::MaxValue_optional& AngularCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    AngularCharacteristicMeasurementBaseType::MaxValue_optional& AngularCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void AngularCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void AngularCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void AngularCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const AngularCharacteristicMeasurementBaseType::MinValue_optional& AngularCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    AngularCharacteristicMeasurementBaseType::MinValue_optional& AngularCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void AngularCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void AngularCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void AngularCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // UserDefinedAngularCharacteristicMeasurementType
    //


    // AngularCharacteristicItemBaseType
    //


    // UserDefinedAngularCharacteristicItemType
    //


    // TemperatureCharacteristicDefinitionBaseType
    //

    const TemperatureCharacteristicDefinitionBaseType::Tolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    TemperatureCharacteristicDefinitionBaseType::Tolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void TemperatureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const TemperatureCharacteristicDefinitionBaseType::NonTolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    TemperatureCharacteristicDefinitionBaseType::NonTolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void TemperatureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // TemperatureCharacteristicNominalBaseType
    //

    const TemperatureCharacteristicNominalBaseType::TargetValue_optional& TemperatureCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    TemperatureCharacteristicNominalBaseType::TargetValue_optional& TemperatureCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void TemperatureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void TemperatureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void TemperatureCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // TemperatureCharacteristicMeasurementBaseType
    //

    const TemperatureCharacteristicMeasurementBaseType::Value_optional& TemperatureCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    TemperatureCharacteristicMeasurementBaseType::Value_optional& TemperatureCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void TemperatureCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void TemperatureCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void TemperatureCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const TemperatureCharacteristicMeasurementBaseType::MaxValue_optional& TemperatureCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    TemperatureCharacteristicMeasurementBaseType::MaxValue_optional& TemperatureCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void TemperatureCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void TemperatureCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void TemperatureCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const TemperatureCharacteristicMeasurementBaseType::MinValue_optional& TemperatureCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    TemperatureCharacteristicMeasurementBaseType::MinValue_optional& TemperatureCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void TemperatureCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void TemperatureCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void TemperatureCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // TemperatureCharacteristicItemBaseType
    //


    // UserDefinedTemperatureCharacteristicDefinitionType
    //

    const UserDefinedTemperatureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedTemperatureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedTemperatureCharacteristicNominalType
    //


    // UserDefinedTemperatureCharacteristicMeasurementType
    //


    // UserDefinedTemperatureCharacteristicItemType
    //


    // AreaCharacteristicDefinitionBaseType
    //

    const AreaCharacteristicDefinitionBaseType::Tolerance_optional& AreaCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    AreaCharacteristicDefinitionBaseType::Tolerance_optional& AreaCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void AreaCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void AreaCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void AreaCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const AreaCharacteristicDefinitionBaseType::NonTolerance_optional& AreaCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    AreaCharacteristicDefinitionBaseType::NonTolerance_optional& AreaCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void AreaCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void AreaCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void AreaCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // AreaCharacteristicNominalBaseType
    //

    const AreaCharacteristicNominalBaseType::TargetValue_optional& AreaCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    AreaCharacteristicNominalBaseType::TargetValue_optional& AreaCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void AreaCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void AreaCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void AreaCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // AreaCharacteristicMeasurementBaseType
    //

    const AreaCharacteristicMeasurementBaseType::Value_optional& AreaCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    AreaCharacteristicMeasurementBaseType::Value_optional& AreaCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void AreaCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void AreaCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void AreaCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const AreaCharacteristicMeasurementBaseType::MaxValue_optional& AreaCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    AreaCharacteristicMeasurementBaseType::MaxValue_optional& AreaCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void AreaCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void AreaCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void AreaCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const AreaCharacteristicMeasurementBaseType::MinValue_optional& AreaCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    AreaCharacteristicMeasurementBaseType::MinValue_optional& AreaCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void AreaCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void AreaCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void AreaCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // AreaCharacteristicItemBaseType
    //


    // UserDefinedAreaCharacteristicDefinitionType
    //

    const UserDefinedAreaCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedAreaCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedAreaCharacteristicNominalType
    //


    // UserDefinedAreaCharacteristicMeasurementType
    //


    // UserDefinedAreaCharacteristicItemType
    //


    // ForceCharacteristicDefinitionBaseType
    //

    const ForceCharacteristicDefinitionBaseType::Tolerance_optional& ForceCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    ForceCharacteristicDefinitionBaseType::Tolerance_optional& ForceCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void ForceCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void ForceCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void ForceCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const ForceCharacteristicDefinitionBaseType::NonTolerance_optional& ForceCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    ForceCharacteristicDefinitionBaseType::NonTolerance_optional& ForceCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void ForceCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void ForceCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void ForceCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // ForceCharacteristicNominalBaseType
    //

    const ForceCharacteristicNominalBaseType::TargetValue_optional& ForceCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    ForceCharacteristicNominalBaseType::TargetValue_optional& ForceCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void ForceCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void ForceCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void ForceCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // ForceCharacteristicMeasurementBaseType
    //

    const ForceCharacteristicMeasurementBaseType::Value_optional& ForceCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    ForceCharacteristicMeasurementBaseType::Value_optional& ForceCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void ForceCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void ForceCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void ForceCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const ForceCharacteristicMeasurementBaseType::MaxValue_optional& ForceCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    ForceCharacteristicMeasurementBaseType::MaxValue_optional& ForceCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void ForceCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void ForceCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void ForceCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const ForceCharacteristicMeasurementBaseType::MinValue_optional& ForceCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    ForceCharacteristicMeasurementBaseType::MinValue_optional& ForceCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void ForceCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void ForceCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void ForceCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // ForceCharacteristicItemBaseType
    //


    // UserDefinedForceCharacteristicDefinitionType
    //

    const UserDefinedForceCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedForceCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedForceCharacteristicNominalType
    //


    // UserDefinedForceCharacteristicMeasurementType
    //


    // UserDefinedForceCharacteristicItemType
    //


    // MassCharacteristicDefinitionBaseType
    //

    const MassCharacteristicDefinitionBaseType::Tolerance_optional& MassCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    MassCharacteristicDefinitionBaseType::Tolerance_optional& MassCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void MassCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void MassCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void MassCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const MassCharacteristicDefinitionBaseType::NonTolerance_optional& MassCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    MassCharacteristicDefinitionBaseType::NonTolerance_optional& MassCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void MassCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void MassCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void MassCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // MassCharacteristicNominalBaseType
    //

    const MassCharacteristicNominalBaseType::TargetValue_optional& MassCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    MassCharacteristicNominalBaseType::TargetValue_optional& MassCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void MassCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void MassCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void MassCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // MassCharacteristicMeasurementBaseType
    //

    const MassCharacteristicMeasurementBaseType::Value_optional& MassCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    MassCharacteristicMeasurementBaseType::Value_optional& MassCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void MassCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void MassCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void MassCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const MassCharacteristicMeasurementBaseType::MaxValue_optional& MassCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    MassCharacteristicMeasurementBaseType::MaxValue_optional& MassCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void MassCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void MassCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void MassCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const MassCharacteristicMeasurementBaseType::MinValue_optional& MassCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    MassCharacteristicMeasurementBaseType::MinValue_optional& MassCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void MassCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void MassCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void MassCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // MassCharacteristicItemBaseType
    //


    // UserDefinedMassCharacteristicDefinitionType
    //

    const UserDefinedMassCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedMassCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedMassCharacteristicNominalType
    //


    // UserDefinedMassCharacteristicMeasurementType
    //


    // UserDefinedMassCharacteristicItemType
    //


    // PressureCharacteristicDefinitionBaseType
    //

    const PressureCharacteristicDefinitionBaseType::Tolerance_optional& PressureCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    PressureCharacteristicDefinitionBaseType::Tolerance_optional& PressureCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void PressureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void PressureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void PressureCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const PressureCharacteristicDefinitionBaseType::NonTolerance_optional& PressureCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    PressureCharacteristicDefinitionBaseType::NonTolerance_optional& PressureCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void PressureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void PressureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void PressureCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // PressureCharacteristicNominalBaseType
    //

    const PressureCharacteristicNominalBaseType::TargetValue_optional& PressureCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    PressureCharacteristicNominalBaseType::TargetValue_optional& PressureCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void PressureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void PressureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void PressureCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // PressureCharacteristicMeasurementBaseType
    //

    const PressureCharacteristicMeasurementBaseType::Value_optional& PressureCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    PressureCharacteristicMeasurementBaseType::Value_optional& PressureCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void PressureCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void PressureCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void PressureCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const PressureCharacteristicMeasurementBaseType::MaxValue_optional& PressureCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    PressureCharacteristicMeasurementBaseType::MaxValue_optional& PressureCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void PressureCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void PressureCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void PressureCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const PressureCharacteristicMeasurementBaseType::MinValue_optional& PressureCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    PressureCharacteristicMeasurementBaseType::MinValue_optional& PressureCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void PressureCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void PressureCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void PressureCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // PressureCharacteristicItemBaseType
    //


    // UserDefinedPressureCharacteristicDefinitionType
    //

    const UserDefinedPressureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedPressureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedPressureCharacteristicNominalType
    //


    // UserDefinedPressureCharacteristicMeasurementType
    //


    // UserDefinedPressureCharacteristicItemType
    //


    // SpeedCharacteristicDefinitionBaseType
    //

    const SpeedCharacteristicDefinitionBaseType::Tolerance_optional& SpeedCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    SpeedCharacteristicDefinitionBaseType::Tolerance_optional& SpeedCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void SpeedCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void SpeedCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void SpeedCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const SpeedCharacteristicDefinitionBaseType::NonTolerance_optional& SpeedCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    SpeedCharacteristicDefinitionBaseType::NonTolerance_optional& SpeedCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void SpeedCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void SpeedCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void SpeedCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // SpeedCharacteristicNominalBaseType
    //

    const SpeedCharacteristicNominalBaseType::TargetValue_optional& SpeedCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    SpeedCharacteristicNominalBaseType::TargetValue_optional& SpeedCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void SpeedCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void SpeedCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void SpeedCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // SpeedCharacteristicMeasurementBaseType
    //

    const SpeedCharacteristicMeasurementBaseType::Value_optional& SpeedCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    SpeedCharacteristicMeasurementBaseType::Value_optional& SpeedCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void SpeedCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void SpeedCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void SpeedCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const SpeedCharacteristicMeasurementBaseType::MaxValue_optional& SpeedCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    SpeedCharacteristicMeasurementBaseType::MaxValue_optional& SpeedCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void SpeedCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void SpeedCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void SpeedCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const SpeedCharacteristicMeasurementBaseType::MinValue_optional& SpeedCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    SpeedCharacteristicMeasurementBaseType::MinValue_optional& SpeedCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void SpeedCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void SpeedCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void SpeedCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // SpeedCharacteristicItemBaseType
    //


    // UserDefinedSpeedCharacteristicDefinitionType
    //

    const UserDefinedSpeedCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedSpeedCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedSpeedCharacteristicNominalType
    //


    // UserDefinedSpeedCharacteristicMeasurementType
    //


    // UserDefinedSpeedCharacteristicItemType
    //


    // TimeCharacteristicDefinitionBaseType
    //

    const TimeCharacteristicDefinitionBaseType::Tolerance_optional& TimeCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    TimeCharacteristicDefinitionBaseType::Tolerance_optional& TimeCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void TimeCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void TimeCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void TimeCharacteristicDefinitionBaseType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const TimeCharacteristicDefinitionBaseType::NonTolerance_optional& TimeCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    TimeCharacteristicDefinitionBaseType::NonTolerance_optional& TimeCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void TimeCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void TimeCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void TimeCharacteristicDefinitionBaseType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // TimeCharacteristicNominalBaseType
    //

    const TimeCharacteristicNominalBaseType::TargetValue_optional& TimeCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    TimeCharacteristicNominalBaseType::TargetValue_optional& TimeCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void TimeCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void TimeCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void TimeCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // TimeCharacteristicMeasurementBaseType
    //

    const TimeCharacteristicMeasurementBaseType::Value_optional& TimeCharacteristicMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    TimeCharacteristicMeasurementBaseType::Value_optional& TimeCharacteristicMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void TimeCharacteristicMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void TimeCharacteristicMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void TimeCharacteristicMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const TimeCharacteristicMeasurementBaseType::MaxValue_optional& TimeCharacteristicMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    TimeCharacteristicMeasurementBaseType::MaxValue_optional& TimeCharacteristicMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void TimeCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void TimeCharacteristicMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void TimeCharacteristicMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const TimeCharacteristicMeasurementBaseType::MinValue_optional& TimeCharacteristicMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    TimeCharacteristicMeasurementBaseType::MinValue_optional& TimeCharacteristicMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void TimeCharacteristicMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void TimeCharacteristicMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void TimeCharacteristicMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // TimeCharacteristicItemBaseType
    //


    // UserDefinedTimeCharacteristicDefinitionType
    //

    const UserDefinedTimeCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedTimeCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure (::std::unique_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (std::move (x));
    }


    // UserDefinedTimeCharacteristicNominalType
    //


    // UserDefinedTimeCharacteristicMeasurementType
    //


    // UserDefinedTimeCharacteristicItemType
    //


    // UserDefinedUnitCharacteristicDefinitionType
    //


    // UserDefinedUnitCharacteristicNominalType
    //

    const UserDefinedUnitCharacteristicNominalType::TargetValue_type& UserDefinedUnitCharacteristicNominalType::
    TargetValue () const
    {
      return this->TargetValue_.get ();
    }

    UserDefinedUnitCharacteristicNominalType::TargetValue_type& UserDefinedUnitCharacteristicNominalType::
    TargetValue ()
    {
      return this->TargetValue_.get ();
    }

    void UserDefinedUnitCharacteristicNominalType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void UserDefinedUnitCharacteristicNominalType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }

    const UserDefinedUnitCharacteristicNominalType::MaxValue_optional& UserDefinedUnitCharacteristicNominalType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    UserDefinedUnitCharacteristicNominalType::MaxValue_optional& UserDefinedUnitCharacteristicNominalType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void UserDefinedUnitCharacteristicNominalType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const UserDefinedUnitCharacteristicNominalType::MinValue_optional& UserDefinedUnitCharacteristicNominalType::
    MinValue () const
    {
      return this->MinValue_;
    }

    UserDefinedUnitCharacteristicNominalType::MinValue_optional& UserDefinedUnitCharacteristicNominalType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void UserDefinedUnitCharacteristicNominalType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }

    const UserDefinedUnitCharacteristicNominalType::DefinedAsLimit_type& UserDefinedUnitCharacteristicNominalType::
    DefinedAsLimit () const
    {
      return this->DefinedAsLimit_.get ();
    }

    UserDefinedUnitCharacteristicNominalType::DefinedAsLimit_type& UserDefinedUnitCharacteristicNominalType::
    DefinedAsLimit ()
    {
      return this->DefinedAsLimit_.get ();
    }

    void UserDefinedUnitCharacteristicNominalType::
    DefinedAsLimit (const DefinedAsLimit_type& x)
    {
      this->DefinedAsLimit_.set (x);
    }


    // UserDefinedUnitCharacteristicMeasurementType
    //

    const UserDefinedUnitCharacteristicMeasurementType::Value_optional& UserDefinedUnitCharacteristicMeasurementType::
    Value () const
    {
      return this->Value_;
    }

    UserDefinedUnitCharacteristicMeasurementType::Value_optional& UserDefinedUnitCharacteristicMeasurementType::
    Value ()
    {
      return this->Value_;
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const UserDefinedUnitCharacteristicMeasurementType::MaxValue_optional& UserDefinedUnitCharacteristicMeasurementType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    UserDefinedUnitCharacteristicMeasurementType::MaxValue_optional& UserDefinedUnitCharacteristicMeasurementType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const UserDefinedUnitCharacteristicMeasurementType::MinValue_optional& UserDefinedUnitCharacteristicMeasurementType::
    MinValue () const
    {
      return this->MinValue_;
    }

    UserDefinedUnitCharacteristicMeasurementType::MinValue_optional& UserDefinedUnitCharacteristicMeasurementType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // UserDefinedUnitCharacteristicItemType
    //


    // CompositeSegmentDefinitionBaseType
    //

    const CompositeSegmentDefinitionBaseType::DatumReferenceFrameId_optional& CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_;
    }

    CompositeSegmentDefinitionBaseType::DatumReferenceFrameId_optional& CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_;
    }

    void CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_optional& x)
    {
      this->DatumReferenceFrameId_ = x;
    }

    void CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId (::std::unique_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (std::move (x));
    }

    const CompositeSegmentDefinitionBaseType::ToleranceValue_type& CompositeSegmentDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    CompositeSegmentDefinitionBaseType::ToleranceValue_type& CompositeSegmentDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void CompositeSegmentDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void CompositeSegmentDefinitionBaseType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const CompositeSegmentDefinitionBaseType::ToleranceDualValue_optional& CompositeSegmentDefinitionBaseType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    CompositeSegmentDefinitionBaseType::ToleranceDualValue_optional& CompositeSegmentDefinitionBaseType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void CompositeSegmentDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void CompositeSegmentDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void CompositeSegmentDefinitionBaseType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const CompositeSegmentDefinitionBaseType::CharacteristicDesignator_optional& CompositeSegmentDefinitionBaseType::
    CharacteristicDesignator () const
    {
      return this->CharacteristicDesignator_;
    }

    CompositeSegmentDefinitionBaseType::CharacteristicDesignator_optional& CompositeSegmentDefinitionBaseType::
    CharacteristicDesignator ()
    {
      return this->CharacteristicDesignator_;
    }

    void CompositeSegmentDefinitionBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_type& x)
    {
      this->CharacteristicDesignator_.set (x);
    }

    void CompositeSegmentDefinitionBaseType::
    CharacteristicDesignator (const CharacteristicDesignator_optional& x)
    {
      this->CharacteristicDesignator_ = x;
    }

    void CompositeSegmentDefinitionBaseType::
    CharacteristicDesignator (::std::unique_ptr< CharacteristicDesignator_type > x)
    {
      this->CharacteristicDesignator_.set (std::move (x));
    }


    // CompositeSegmentMeasurementBaseType
    //

    const CompositeSegmentMeasurementBaseType::Value_optional& CompositeSegmentMeasurementBaseType::
    Value () const
    {
      return this->Value_;
    }

    CompositeSegmentMeasurementBaseType::Value_optional& CompositeSegmentMeasurementBaseType::
    Value ()
    {
      return this->Value_;
    }

    void CompositeSegmentMeasurementBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void CompositeSegmentMeasurementBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void CompositeSegmentMeasurementBaseType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const CompositeSegmentMeasurementBaseType::MaxValue_optional& CompositeSegmentMeasurementBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    CompositeSegmentMeasurementBaseType::MaxValue_optional& CompositeSegmentMeasurementBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void CompositeSegmentMeasurementBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void CompositeSegmentMeasurementBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void CompositeSegmentMeasurementBaseType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const CompositeSegmentMeasurementBaseType::MinValue_optional& CompositeSegmentMeasurementBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    CompositeSegmentMeasurementBaseType::MinValue_optional& CompositeSegmentMeasurementBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void CompositeSegmentMeasurementBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void CompositeSegmentMeasurementBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void CompositeSegmentMeasurementBaseType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }

    const CompositeSegmentMeasurementBaseType::Status_type& CompositeSegmentMeasurementBaseType::
    Status () const
    {
      return this->Status_.get ();
    }

    CompositeSegmentMeasurementBaseType::Status_type& CompositeSegmentMeasurementBaseType::
    Status ()
    {
      return this->Status_.get ();
    }

    void CompositeSegmentMeasurementBaseType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void CompositeSegmentMeasurementBaseType::
    Status (::std::unique_ptr< Status_type > x)
    {
      this->Status_.set (std::move (x));
    }

    const CompositeSegmentMeasurementBaseType::DRFTransformActualId_optional& CompositeSegmentMeasurementBaseType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    CompositeSegmentMeasurementBaseType::DRFTransformActualId_optional& CompositeSegmentMeasurementBaseType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void CompositeSegmentMeasurementBaseType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void CompositeSegmentMeasurementBaseType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void CompositeSegmentMeasurementBaseType::
    DRFTransformActualId (::std::unique_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (std::move (x));
    }

    const CompositeSegmentMeasurementBaseType::ZoneDataSet_optional& CompositeSegmentMeasurementBaseType::
    ZoneDataSet () const
    {
      return this->ZoneDataSet_;
    }

    CompositeSegmentMeasurementBaseType::ZoneDataSet_optional& CompositeSegmentMeasurementBaseType::
    ZoneDataSet ()
    {
      return this->ZoneDataSet_;
    }

    void CompositeSegmentMeasurementBaseType::
    ZoneDataSet (const ZoneDataSet_type& x)
    {
      this->ZoneDataSet_.set (x);
    }

    void CompositeSegmentMeasurementBaseType::
    ZoneDataSet (const ZoneDataSet_optional& x)
    {
      this->ZoneDataSet_ = x;
    }

    void CompositeSegmentMeasurementBaseType::
    ZoneDataSet (::std::unique_ptr< ZoneDataSet_type > x)
    {
      this->ZoneDataSet_.set (std::move (x));
    }


    // CompositeSegmentPositionDefinitionType
    //

    const CompositeSegmentPositionDefinitionType::MaterialCondition_type& CompositeSegmentPositionDefinitionType::
    MaterialCondition () const
    {
      return this->MaterialCondition_.get ();
    }

    CompositeSegmentPositionDefinitionType::MaterialCondition_type& CompositeSegmentPositionDefinitionType::
    MaterialCondition ()
    {
      return this->MaterialCondition_.get ();
    }

    void CompositeSegmentPositionDefinitionType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void CompositeSegmentPositionDefinitionType::
    MaterialCondition (::std::unique_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (std::move (x));
    }

    const CompositeSegmentPositionDefinitionType::ZoneShape_type& CompositeSegmentPositionDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    CompositeSegmentPositionDefinitionType::ZoneShape_type& CompositeSegmentPositionDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void CompositeSegmentPositionDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void CompositeSegmentPositionDefinitionType::
    ZoneShape (::std::unique_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (std::move (x));
    }

    const CompositeSegmentPositionDefinitionType::MaximumToleranceValue_optional& CompositeSegmentPositionDefinitionType::
    MaximumToleranceValue () const
    {
      return this->MaximumToleranceValue_;
    }

    CompositeSegmentPositionDefinitionType::MaximumToleranceValue_optional& CompositeSegmentPositionDefinitionType::
    MaximumToleranceValue ()
    {
      return this->MaximumToleranceValue_;
    }

    void CompositeSegmentPositionDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_type& x)
    {
      this->MaximumToleranceValue_.set (x);
    }

    void CompositeSegmentPositionDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_optional& x)
    {
      this->MaximumToleranceValue_ = x;
    }

    void CompositeSegmentPositionDefinitionType::
    MaximumToleranceValue (::std::unique_ptr< MaximumToleranceValue_type > x)
    {
      this->MaximumToleranceValue_.set (std::move (x));
    }

    const CompositeSegmentPositionDefinitionType::ProjectedToleranceZone_optional& CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone () const
    {
      return this->ProjectedToleranceZone_;
    }

    CompositeSegmentPositionDefinitionType::ProjectedToleranceZone_optional& CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone ()
    {
      return this->ProjectedToleranceZone_;
    }

    void CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone (const ProjectedToleranceZone_type& x)
    {
      this->ProjectedToleranceZone_.set (x);
    }

    void CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone (const ProjectedToleranceZone_optional& x)
    {
      this->ProjectedToleranceZone_ = x;
    }

    void CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone (::std::unique_ptr< ProjectedToleranceZone_type > x)
    {
      this->ProjectedToleranceZone_.set (std::move (x));
    }


    // CompositeSegmentPositionMeasurementType
    //


    // CompositeSegmentProfileDefinitionType
    //

    const CompositeSegmentProfileDefinitionType::OuterDisposition_optional& CompositeSegmentProfileDefinitionType::
    OuterDisposition () const
    {
      return this->OuterDisposition_;
    }

    CompositeSegmentProfileDefinitionType::OuterDisposition_optional& CompositeSegmentProfileDefinitionType::
    OuterDisposition ()
    {
      return this->OuterDisposition_;
    }

    void CompositeSegmentProfileDefinitionType::
    OuterDisposition (const OuterDisposition_type& x)
    {
      this->OuterDisposition_.set (x);
    }

    void CompositeSegmentProfileDefinitionType::
    OuterDisposition (const OuterDisposition_optional& x)
    {
      this->OuterDisposition_ = x;
    }

    void CompositeSegmentProfileDefinitionType::
    OuterDisposition (::std::unique_ptr< OuterDisposition_type > x)
    {
      this->OuterDisposition_.set (std::move (x));
    }


    // CompositeSegmentProfileMeasurementType
    //


    // CompositeSegmentSymmetryDefinitionType
    //


    // CompositeSegmentSymmetryMeasurementType
    //


    // OriginReferenceType
    //

    const OriginReferenceType::FeatureNominalId_optional& OriginReferenceType::
    FeatureNominalId () const
    {
      return this->FeatureNominalId_;
    }

    OriginReferenceType::FeatureNominalId_optional& OriginReferenceType::
    FeatureNominalId ()
    {
      return this->FeatureNominalId_;
    }

    void OriginReferenceType::
    FeatureNominalId (const FeatureNominalId_type& x)
    {
      this->FeatureNominalId_.set (x);
    }

    void OriginReferenceType::
    FeatureNominalId (const FeatureNominalId_optional& x)
    {
      this->FeatureNominalId_ = x;
    }

    void OriginReferenceType::
    FeatureNominalId (::std::unique_ptr< FeatureNominalId_type > x)
    {
      this->FeatureNominalId_.set (std::move (x));
    }

    const OriginReferenceType::ReferencedComponent_optional& OriginReferenceType::
    ReferencedComponent () const
    {
      return this->ReferencedComponent_;
    }

    OriginReferenceType::ReferencedComponent_optional& OriginReferenceType::
    ReferencedComponent ()
    {
      return this->ReferencedComponent_;
    }

    void OriginReferenceType::
    ReferencedComponent (const ReferencedComponent_type& x)
    {
      this->ReferencedComponent_.set (x);
    }

    void OriginReferenceType::
    ReferencedComponent (const ReferencedComponent_optional& x)
    {
      this->ReferencedComponent_ = x;
    }

    void OriginReferenceType::
    ReferencedComponent (::std::unique_ptr< ReferencedComponent_type > x)
    {
      this->ReferencedComponent_.set (std::move (x));
    }

    const OriginReferenceType::DatumDefinitionId_optional& OriginReferenceType::
    DatumDefinitionId () const
    {
      return this->DatumDefinitionId_;
    }

    OriginReferenceType::DatumDefinitionId_optional& OriginReferenceType::
    DatumDefinitionId ()
    {
      return this->DatumDefinitionId_;
    }

    void OriginReferenceType::
    DatumDefinitionId (const DatumDefinitionId_type& x)
    {
      this->DatumDefinitionId_.set (x);
    }

    void OriginReferenceType::
    DatumDefinitionId (const DatumDefinitionId_optional& x)
    {
      this->DatumDefinitionId_ = x;
    }

    void OriginReferenceType::
    DatumDefinitionId (::std::unique_ptr< DatumDefinitionId_type > x)
    {
      this->DatumDefinitionId_.set (std::move (x));
    }


    // SurfaceTextureCharacteristicDefinitionType
    //

    const SurfaceTextureCharacteristicDefinitionType::RoughnessAverage_type& SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage () const
    {
      return this->RoughnessAverage_.get ();
    }

    SurfaceTextureCharacteristicDefinitionType::RoughnessAverage_type& SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage ()
    {
      return this->RoughnessAverage_.get ();
    }

    void SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage (const RoughnessAverage_type& x)
    {
      this->RoughnessAverage_.set (x);
    }

    void SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage (::std::unique_ptr< RoughnessAverage_type > x)
    {
      this->RoughnessAverage_.set (std::move (x));
    }


    // RoughnessLayEnumType
    //

    RoughnessLayEnumType::
    RoughnessLayEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    RoughnessLayEnumType::
    RoughnessLayEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_RoughnessLayEnumType_literals_[v])
    {
    }

    RoughnessLayEnumType::
    RoughnessLayEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessLayEnumType::
    RoughnessLayEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessLayEnumType::
    RoughnessLayEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessLayEnumType::
    RoughnessLayEnumType (const RoughnessLayEnumType& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    RoughnessLayEnumType& RoughnessLayEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_RoughnessLayEnumType_literals_[v]);

      return *this;
    }


    // RoughnessObtentionEnumType
    //

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_RoughnessObtentionEnumType_literals_[v])
    {
    }

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (const RoughnessObtentionEnumType& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    RoughnessObtentionEnumType& RoughnessObtentionEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_RoughnessObtentionEnumType_literals_[v]);

      return *this;
    }


    // RoughnessApplicabilityEnumType
    //

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_RoughnessApplicabilityEnumType_literals_[v])
    {
    }

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (const RoughnessApplicabilityEnumType& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    RoughnessApplicabilityEnumType& RoughnessApplicabilityEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_RoughnessApplicabilityEnumType_literals_[v]);

      return *this;
    }


    // SurfaceTextureCharacteristicNominalType
    //

    const SurfaceTextureCharacteristicNominalType::Obtention_optional& SurfaceTextureCharacteristicNominalType::
    Obtention () const
    {
      return this->Obtention_;
    }

    SurfaceTextureCharacteristicNominalType::Obtention_optional& SurfaceTextureCharacteristicNominalType::
    Obtention ()
    {
      return this->Obtention_;
    }

    void SurfaceTextureCharacteristicNominalType::
    Obtention (const Obtention_type& x)
    {
      this->Obtention_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    Obtention (const Obtention_optional& x)
    {
      this->Obtention_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    Obtention (::std::unique_ptr< Obtention_type > x)
    {
      this->Obtention_.set (std::move (x));
    }

    const SurfaceTextureCharacteristicNominalType::Obtention_type& SurfaceTextureCharacteristicNominalType::
    Obtention_default_value ()
    {
      return Obtention_default_value_;
    }

    const SurfaceTextureCharacteristicNominalType::Applicability_optional& SurfaceTextureCharacteristicNominalType::
    Applicability () const
    {
      return this->Applicability_;
    }

    SurfaceTextureCharacteristicNominalType::Applicability_optional& SurfaceTextureCharacteristicNominalType::
    Applicability ()
    {
      return this->Applicability_;
    }

    void SurfaceTextureCharacteristicNominalType::
    Applicability (const Applicability_type& x)
    {
      this->Applicability_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    Applicability (const Applicability_optional& x)
    {
      this->Applicability_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    Applicability (::std::unique_ptr< Applicability_type > x)
    {
      this->Applicability_.set (std::move (x));
    }

    const SurfaceTextureCharacteristicNominalType::Applicability_type& SurfaceTextureCharacteristicNominalType::
    Applicability_default_value ()
    {
      return Applicability_default_value_;
    }

    const SurfaceTextureCharacteristicNominalType::MinimumMaterialRemoval_optional& SurfaceTextureCharacteristicNominalType::
    MinimumMaterialRemoval () const
    {
      return this->MinimumMaterialRemoval_;
    }

    SurfaceTextureCharacteristicNominalType::MinimumMaterialRemoval_optional& SurfaceTextureCharacteristicNominalType::
    MinimumMaterialRemoval ()
    {
      return this->MinimumMaterialRemoval_;
    }

    void SurfaceTextureCharacteristicNominalType::
    MinimumMaterialRemoval (const MinimumMaterialRemoval_type& x)
    {
      this->MinimumMaterialRemoval_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    MinimumMaterialRemoval (const MinimumMaterialRemoval_optional& x)
    {
      this->MinimumMaterialRemoval_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    MinimumMaterialRemoval (::std::unique_ptr< MinimumMaterialRemoval_type > x)
    {
      this->MinimumMaterialRemoval_.set (std::move (x));
    }

    const SurfaceTextureCharacteristicNominalType::ProductionMethod_optional& SurfaceTextureCharacteristicNominalType::
    ProductionMethod () const
    {
      return this->ProductionMethod_;
    }

    SurfaceTextureCharacteristicNominalType::ProductionMethod_optional& SurfaceTextureCharacteristicNominalType::
    ProductionMethod ()
    {
      return this->ProductionMethod_;
    }

    void SurfaceTextureCharacteristicNominalType::
    ProductionMethod (const ProductionMethod_type& x)
    {
      this->ProductionMethod_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    ProductionMethod (const ProductionMethod_optional& x)
    {
      this->ProductionMethod_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    ProductionMethod (::std::unique_ptr< ProductionMethod_type > x)
    {
      this->ProductionMethod_.set (std::move (x));
    }

    const SurfaceTextureCharacteristicNominalType::Cutoff_optional& SurfaceTextureCharacteristicNominalType::
    Cutoff () const
    {
      return this->Cutoff_;
    }

    SurfaceTextureCharacteristicNominalType::Cutoff_optional& SurfaceTextureCharacteristicNominalType::
    Cutoff ()
    {
      return this->Cutoff_;
    }

    void SurfaceTextureCharacteristicNominalType::
    Cutoff (const Cutoff_type& x)
    {
      this->Cutoff_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    Cutoff (const Cutoff_optional& x)
    {
      this->Cutoff_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    Cutoff (::std::unique_ptr< Cutoff_type > x)
    {
      this->Cutoff_.set (std::move (x));
    }

    const SurfaceTextureCharacteristicNominalType::SecondaryRoughnessParameter_optional& SurfaceTextureCharacteristicNominalType::
    SecondaryRoughnessParameter () const
    {
      return this->SecondaryRoughnessParameter_;
    }

    SurfaceTextureCharacteristicNominalType::SecondaryRoughnessParameter_optional& SurfaceTextureCharacteristicNominalType::
    SecondaryRoughnessParameter ()
    {
      return this->SecondaryRoughnessParameter_;
    }

    void SurfaceTextureCharacteristicNominalType::
    SecondaryRoughnessParameter (const SecondaryRoughnessParameter_type& x)
    {
      this->SecondaryRoughnessParameter_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    SecondaryRoughnessParameter (const SecondaryRoughnessParameter_optional& x)
    {
      this->SecondaryRoughnessParameter_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    SecondaryRoughnessParameter (::std::unique_ptr< SecondaryRoughnessParameter_type > x)
    {
      this->SecondaryRoughnessParameter_.set (std::move (x));
    }

    const SurfaceTextureCharacteristicNominalType::DirectionOfLay_optional& SurfaceTextureCharacteristicNominalType::
    DirectionOfLay () const
    {
      return this->DirectionOfLay_;
    }

    SurfaceTextureCharacteristicNominalType::DirectionOfLay_optional& SurfaceTextureCharacteristicNominalType::
    DirectionOfLay ()
    {
      return this->DirectionOfLay_;
    }

    void SurfaceTextureCharacteristicNominalType::
    DirectionOfLay (const DirectionOfLay_type& x)
    {
      this->DirectionOfLay_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    DirectionOfLay (const DirectionOfLay_optional& x)
    {
      this->DirectionOfLay_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    DirectionOfLay (::std::unique_ptr< DirectionOfLay_type > x)
    {
      this->DirectionOfLay_.set (std::move (x));
    }

    const SurfaceTextureCharacteristicNominalType::OtherSurfaceParameter_optional& SurfaceTextureCharacteristicNominalType::
    OtherSurfaceParameter () const
    {
      return this->OtherSurfaceParameter_;
    }

    SurfaceTextureCharacteristicNominalType::OtherSurfaceParameter_optional& SurfaceTextureCharacteristicNominalType::
    OtherSurfaceParameter ()
    {
      return this->OtherSurfaceParameter_;
    }

    void SurfaceTextureCharacteristicNominalType::
    OtherSurfaceParameter (const OtherSurfaceParameter_type& x)
    {
      this->OtherSurfaceParameter_.set (x);
    }

    void SurfaceTextureCharacteristicNominalType::
    OtherSurfaceParameter (const OtherSurfaceParameter_optional& x)
    {
      this->OtherSurfaceParameter_ = x;
    }

    void SurfaceTextureCharacteristicNominalType::
    OtherSurfaceParameter (::std::unique_ptr< OtherSurfaceParameter_type > x)
    {
      this->OtherSurfaceParameter_.set (std::move (x));
    }


    // SurfaceTextureCharacteristicMeasurementType
    //

    const SurfaceTextureCharacteristicMeasurementType::RoughnessAverageValue_optional& SurfaceTextureCharacteristicMeasurementType::
    RoughnessAverageValue () const
    {
      return this->RoughnessAverageValue_;
    }

    SurfaceTextureCharacteristicMeasurementType::RoughnessAverageValue_optional& SurfaceTextureCharacteristicMeasurementType::
    RoughnessAverageValue ()
    {
      return this->RoughnessAverageValue_;
    }

    void SurfaceTextureCharacteristicMeasurementType::
    RoughnessAverageValue (const RoughnessAverageValue_type& x)
    {
      this->RoughnessAverageValue_.set (x);
    }

    void SurfaceTextureCharacteristicMeasurementType::
    RoughnessAverageValue (const RoughnessAverageValue_optional& x)
    {
      this->RoughnessAverageValue_ = x;
    }

    void SurfaceTextureCharacteristicMeasurementType::
    RoughnessAverageValue (::std::unique_ptr< RoughnessAverageValue_type > x)
    {
      this->RoughnessAverageValue_.set (std::move (x));
    }


    // SurfaceTextureCharacteristicItemType
    //


    // OrientationDiametricalZoneType
    //

    const OrientationDiametricalZoneType::ZoneOrientationVector_optional& OrientationDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    OrientationDiametricalZoneType::ZoneOrientationVector_optional& OrientationDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void OrientationDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void OrientationDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void OrientationDiametricalZoneType::
    ZoneOrientationVector (::std::unique_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (std::move (x));
    }


    // OrientationPlanarZoneType
    //

    const OrientationPlanarZoneType::ZoneOrientationVector_optional& OrientationPlanarZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    OrientationPlanarZoneType::ZoneOrientationVector_optional& OrientationPlanarZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void OrientationPlanarZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void OrientationPlanarZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void OrientationPlanarZoneType::
    ZoneOrientationVector (::std::unique_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (std::move (x));
    }


    // OrientationZoneShapeType
    //

    const OrientationZoneShapeType::DiametricalZone_optional& OrientationZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    OrientationZoneShapeType::DiametricalZone_optional& OrientationZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void OrientationZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void OrientationZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void OrientationZoneShapeType::
    DiametricalZone (::std::unique_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (std::move (x));
    }

    const OrientationZoneShapeType::PlanarZone_optional& OrientationZoneShapeType::
    PlanarZone () const
    {
      return this->PlanarZone_;
    }

    OrientationZoneShapeType::PlanarZone_optional& OrientationZoneShapeType::
    PlanarZone ()
    {
      return this->PlanarZone_;
    }

    void OrientationZoneShapeType::
    PlanarZone (const PlanarZone_type& x)
    {
      this->PlanarZone_.set (x);
    }

    void OrientationZoneShapeType::
    PlanarZone (const PlanarZone_optional& x)
    {
      this->PlanarZone_ = x;
    }

    void OrientationZoneShapeType::
    PlanarZone (::std::unique_ptr< PlanarZone_type > x)
    {
      this->PlanarZone_.set (std::move (x));
    }


    // OrientationCharacteristicItemBaseType
    //


    // OrientationCharacteristicDefinitionBaseType
    //

    const OrientationCharacteristicDefinitionBaseType::ToleranceValue_type& OrientationCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    OrientationCharacteristicDefinitionBaseType::ToleranceValue_type& OrientationCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void OrientationCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::ToleranceDualValue_optional& OrientationCharacteristicDefinitionBaseType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    OrientationCharacteristicDefinitionBaseType::ToleranceDualValue_optional& OrientationCharacteristicDefinitionBaseType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void OrientationCharacteristicDefinitionBaseType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_;
    }

    OrientationCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_optional& x)
    {
      this->DatumReferenceFrameId_ = x;
    }

    void OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::unique_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::MaterialCondition_type& OrientationCharacteristicDefinitionBaseType::
    MaterialCondition () const
    {
      return this->MaterialCondition_.get ();
    }

    OrientationCharacteristicDefinitionBaseType::MaterialCondition_type& OrientationCharacteristicDefinitionBaseType::
    MaterialCondition ()
    {
      return this->MaterialCondition_.get ();
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaterialCondition (::std::unique_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::SizeCharacteristicDefinitionId_optional& OrientationCharacteristicDefinitionBaseType::
    SizeCharacteristicDefinitionId () const
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    OrientationCharacteristicDefinitionBaseType::SizeCharacteristicDefinitionId_optional& OrientationCharacteristicDefinitionBaseType::
    SizeCharacteristicDefinitionId ()
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_type& x)
    {
      this->SizeCharacteristicDefinitionId_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_optional& x)
    {
      this->SizeCharacteristicDefinitionId_ = x;
    }

    void OrientationCharacteristicDefinitionBaseType::
    SizeCharacteristicDefinitionId (::std::unique_ptr< SizeCharacteristicDefinitionId_type > x)
    {
      this->SizeCharacteristicDefinitionId_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::ZoneShape_type& OrientationCharacteristicDefinitionBaseType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    OrientationCharacteristicDefinitionBaseType::ZoneShape_type& OrientationCharacteristicDefinitionBaseType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void OrientationCharacteristicDefinitionBaseType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    ZoneShape (::std::unique_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::TangentPlane_optional& OrientationCharacteristicDefinitionBaseType::
    TangentPlane () const
    {
      return this->TangentPlane_;
    }

    OrientationCharacteristicDefinitionBaseType::TangentPlane_optional& OrientationCharacteristicDefinitionBaseType::
    TangentPlane ()
    {
      return this->TangentPlane_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    TangentPlane (const TangentPlane_type& x)
    {
      this->TangentPlane_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    TangentPlane (const TangentPlane_optional& x)
    {
      this->TangentPlane_ = x;
    }

    const OrientationCharacteristicDefinitionBaseType::MaximumToleranceValue_optional& OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue () const
    {
      return this->MaximumToleranceValue_;
    }

    OrientationCharacteristicDefinitionBaseType::MaximumToleranceValue_optional& OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue ()
    {
      return this->MaximumToleranceValue_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue (const MaximumToleranceValue_type& x)
    {
      this->MaximumToleranceValue_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue (const MaximumToleranceValue_optional& x)
    {
      this->MaximumToleranceValue_ = x;
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue (::std::unique_ptr< MaximumToleranceValue_type > x)
    {
      this->MaximumToleranceValue_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::ProjectedToleranceZoneValue_optional& OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue () const
    {
      return this->ProjectedToleranceZoneValue_;
    }

    OrientationCharacteristicDefinitionBaseType::ProjectedToleranceZoneValue_optional& OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue ()
    {
      return this->ProjectedToleranceZoneValue_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_type& x)
    {
      this->ProjectedToleranceZoneValue_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_optional& x)
    {
      this->ProjectedToleranceZoneValue_ = x;
    }

    void OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue (::std::unique_ptr< ProjectedToleranceZoneValue_type > x)
    {
      this->ProjectedToleranceZoneValue_.set (std::move (x));
    }

    const OrientationCharacteristicDefinitionBaseType::EachRadialElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachRadialElement () const
    {
      return this->EachRadialElement_;
    }

    OrientationCharacteristicDefinitionBaseType::EachRadialElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachRadialElement ()
    {
      return this->EachRadialElement_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachRadialElement (const EachRadialElement_type& x)
    {
      this->EachRadialElement_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachRadialElement (const EachRadialElement_optional& x)
    {
      this->EachRadialElement_ = x;
    }

    const OrientationCharacteristicDefinitionBaseType::EachElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachElement () const
    {
      return this->EachElement_;
    }

    OrientationCharacteristicDefinitionBaseType::EachElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachElement ()
    {
      return this->EachElement_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachElement (const EachElement_type& x)
    {
      this->EachElement_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachElement (const EachElement_optional& x)
    {
      this->EachElement_ = x;
    }


    // OrientationCharacteristicNominalBaseType
    //


    // OrientationCharacteristicMeasurementBaseType
    //

    const OrientationCharacteristicMeasurementBaseType::DatumsOk_optional& OrientationCharacteristicMeasurementBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    OrientationCharacteristicMeasurementBaseType::DatumsOk_optional& OrientationCharacteristicMeasurementBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void OrientationCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void OrientationCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }

    const OrientationCharacteristicMeasurementBaseType::Bonus_optional& OrientationCharacteristicMeasurementBaseType::
    Bonus () const
    {
      return this->Bonus_;
    }

    OrientationCharacteristicMeasurementBaseType::Bonus_optional& OrientationCharacteristicMeasurementBaseType::
    Bonus ()
    {
      return this->Bonus_;
    }

    void OrientationCharacteristicMeasurementBaseType::
    Bonus (const Bonus_type& x)
    {
      this->Bonus_.set (x);
    }

    void OrientationCharacteristicMeasurementBaseType::
    Bonus (const Bonus_optional& x)
    {
      this->Bonus_ = x;
    }

    void OrientationCharacteristicMeasurementBaseType::
    Bonus (::std::unique_ptr< Bonus_type > x)
    {
      this->Bonus_.set (std::move (x));
    }

    const OrientationCharacteristicMeasurementBaseType::ReferenceLength_optional& OrientationCharacteristicMeasurementBaseType::
    ReferenceLength () const
    {
      return this->ReferenceLength_;
    }

    OrientationCharacteristicMeasurementBaseType::ReferenceLength_optional& OrientationCharacteristicMeasurementBaseType::
    ReferenceLength ()
    {
      return this->ReferenceLength_;
    }

    void OrientationCharacteristicMeasurementBaseType::
    ReferenceLength (const ReferenceLength_type& x)
    {
      this->ReferenceLength_.set (x);
    }

    void OrientationCharacteristicMeasurementBaseType::
    ReferenceLength (const ReferenceLength_optional& x)
    {
      this->ReferenceLength_ = x;
    }

    void OrientationCharacteristicMeasurementBaseType::
    ReferenceLength (::std::unique_ptr< ReferenceLength_type > x)
    {
      this->ReferenceLength_.set (std::move (x));
    }

    const OrientationCharacteristicMeasurementBaseType::DRFTransformActualId_optional& OrientationCharacteristicMeasurementBaseType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    OrientationCharacteristicMeasurementBaseType::DRFTransformActualId_optional& OrientationCharacteristicMeasurementBaseType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void OrientationCharacteristicMeasurementBaseType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void OrientationCharacteristicMeasurementBaseType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void OrientationCharacteristicMeasurementBaseType::
    DRFTransformActualId (::std::unique_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (std::move (x));
    }


    // AngularityCharacteristicItemType
    //


    // AngularityCharacteristicDefinitionType
    //


    // AngularityCharacteristicNominalType
    //

    const AngularityCharacteristicNominalType::Angle_optional& AngularityCharacteristicNominalType::
    Angle () const
    {
      return this->Angle_;
    }

    AngularityCharacteristicNominalType::Angle_optional& AngularityCharacteristicNominalType::
    Angle ()
    {
      return this->Angle_;
    }

    void AngularityCharacteristicNominalType::
    Angle (const Angle_type& x)
    {
      this->Angle_.set (x);
    }

    void AngularityCharacteristicNominalType::
    Angle (const Angle_optional& x)
    {
      this->Angle_ = x;
    }

    void AngularityCharacteristicNominalType::
    Angle (::std::unique_ptr< Angle_type > x)
    {
      this->Angle_.set (std::move (x));
    }


    // AngularityCharacteristicMeasurementType
    //


    // PerpendicularityCharacteristicItemType
    //


    // PerpendicularityCharacteristicDefinitionType
    //


    // PerpendicularityCharacteristicNominalType
    //


    // PerpendicularityCharacteristicMeasurementType
    //


    // ParallelismCharacteristicItemType
    //


    // ParallelismCharacteristicDefinitionType
    //


    // ParallelismCharacteristicNominalType
    //


    // ParallelismCharacteristicMeasurementType
    //


    // FormCharacteristicDefinitionBaseType
    //


    // FormCharacteristicNominalBaseType
    //


    // FormCharacteristicMeasurementBaseType
    //


    // FormCharacteristicItemBaseType
    //


    // StraightnessDiametricalZoneType
    //


    // StraightnessNonDiametricalZoneType
    //

    const StraightnessNonDiametricalZoneType::ZoneOrientationVector_optional& StraightnessNonDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    StraightnessNonDiametricalZoneType::ZoneOrientationVector_optional& StraightnessNonDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void StraightnessNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void StraightnessNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void StraightnessNonDiametricalZoneType::
    ZoneOrientationVector (::std::unique_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (std::move (x));
    }


    // StraightnessZoneShapeType
    //

    const StraightnessZoneShapeType::DiametricalZone_optional& StraightnessZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    StraightnessZoneShapeType::DiametricalZone_optional& StraightnessZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void StraightnessZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void StraightnessZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void StraightnessZoneShapeType::
    DiametricalZone (::std::unique_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (std::move (x));
    }

    const StraightnessZoneShapeType::NonDiametricalZone_optional& StraightnessZoneShapeType::
    NonDiametricalZone () const
    {
      return this->NonDiametricalZone_;
    }

    StraightnessZoneShapeType::NonDiametricalZone_optional& StraightnessZoneShapeType::
    NonDiametricalZone ()
    {
      return this->NonDiametricalZone_;
    }

    void StraightnessZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_type& x)
    {
      this->NonDiametricalZone_.set (x);
    }

    void StraightnessZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_optional& x)
    {
      this->NonDiametricalZone_ = x;
    }

    void StraightnessZoneShapeType::
    NonDiametricalZone (::std::unique_ptr< NonDiametricalZone_type > x)
    {
      this->NonDiametricalZone_.set (std::move (x));
    }


    // StraightnessCharacteristicItemType
    //


    // StraightnessCharacteristicDefinitionType
    //

    const StraightnessCharacteristicDefinitionType::ToleranceValue_optional& StraightnessCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    StraightnessCharacteristicDefinitionType::ToleranceValue_optional& StraightnessCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const StraightnessCharacteristicDefinitionType::ToleranceDualValue_optional& StraightnessCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    StraightnessCharacteristicDefinitionType::ToleranceDualValue_optional& StraightnessCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const StraightnessCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength () const
    {
      return this->ToleranceZonePerUnitLength_;
    }

    StraightnessCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength ()
    {
      return this->ToleranceZonePerUnitLength_;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_type& x)
    {
      this->ToleranceZonePerUnitLength_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_optional& x)
    {
      this->ToleranceZonePerUnitLength_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (::std::unique_ptr< ToleranceZonePerUnitLength_type > x)
    {
      this->ToleranceZonePerUnitLength_.set (std::move (x));
    }

    const StraightnessCharacteristicDefinitionType::MaterialCondition_optional& StraightnessCharacteristicDefinitionType::
    MaterialCondition () const
    {
      return this->MaterialCondition_;
    }

    StraightnessCharacteristicDefinitionType::MaterialCondition_optional& StraightnessCharacteristicDefinitionType::
    MaterialCondition ()
    {
      return this->MaterialCondition_;
    }

    void StraightnessCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_optional& x)
    {
      this->MaterialCondition_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    MaterialCondition (::std::unique_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (std::move (x));
    }

    const StraightnessCharacteristicDefinitionType::SizeCharacteristicDefinitionId_optional& StraightnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId () const
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    StraightnessCharacteristicDefinitionType::SizeCharacteristicDefinitionId_optional& StraightnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId ()
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    void StraightnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_type& x)
    {
      this->SizeCharacteristicDefinitionId_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_optional& x)
    {
      this->SizeCharacteristicDefinitionId_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (::std::unique_ptr< SizeCharacteristicDefinitionId_type > x)
    {
      this->SizeCharacteristicDefinitionId_.set (std::move (x));
    }

    const StraightnessCharacteristicDefinitionType::ZoneShape_type& StraightnessCharacteristicDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    StraightnessCharacteristicDefinitionType::ZoneShape_type& StraightnessCharacteristicDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void StraightnessCharacteristicDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    ZoneShape (::std::unique_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (std::move (x));
    }

    const StraightnessCharacteristicDefinitionType::MaximumToleranceValue_optional& StraightnessCharacteristicDefinitionType::
    MaximumToleranceValue () const
    {
      return this->MaximumToleranceValue_;
    }

    StraightnessCharacteristicDefinitionType::MaximumToleranceValue_optional& StraightnessCharacteristicDefinitionType::
    MaximumToleranceValue ()
    {
      return this->MaximumToleranceValue_;
    }

    void StraightnessCharacteristicDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_type& x)
    {
      this->MaximumToleranceValue_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_optional& x)
    {
      this->MaximumToleranceValue_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    MaximumToleranceValue (::std::unique_ptr< MaximumToleranceValue_type > x)
    {
      this->MaximumToleranceValue_.set (std::move (x));
    }


    // StraightnessCharacteristicNominalType
    //

    const StraightnessCharacteristicNominalType::DirectionCurveId_optional& StraightnessCharacteristicNominalType::
    DirectionCurveId () const
    {
      return this->DirectionCurveId_;
    }

    StraightnessCharacteristicNominalType::DirectionCurveId_optional& StraightnessCharacteristicNominalType::
    DirectionCurveId ()
    {
      return this->DirectionCurveId_;
    }

    void StraightnessCharacteristicNominalType::
    DirectionCurveId (const DirectionCurveId_type& x)
    {
      this->DirectionCurveId_.set (x);
    }

    void StraightnessCharacteristicNominalType::
    DirectionCurveId (const DirectionCurveId_optional& x)
    {
      this->DirectionCurveId_ = x;
    }

    void StraightnessCharacteristicNominalType::
    DirectionCurveId (::std::unique_ptr< DirectionCurveId_type > x)
    {
      this->DirectionCurveId_.set (std::move (x));
    }


    // StraightnessCharacteristicMeasurementType
    //

    const StraightnessCharacteristicMeasurementType::Bonus_optional& StraightnessCharacteristicMeasurementType::
    Bonus () const
    {
      return this->Bonus_;
    }

    StraightnessCharacteristicMeasurementType::Bonus_optional& StraightnessCharacteristicMeasurementType::
    Bonus ()
    {
      return this->Bonus_;
    }

    void StraightnessCharacteristicMeasurementType::
    Bonus (const Bonus_type& x)
    {
      this->Bonus_.set (x);
    }

    void StraightnessCharacteristicMeasurementType::
    Bonus (const Bonus_optional& x)
    {
      this->Bonus_ = x;
    }

    void StraightnessCharacteristicMeasurementType::
    Bonus (::std::unique_ptr< Bonus_type > x)
    {
      this->Bonus_.set (std::move (x));
    }

    const StraightnessCharacteristicMeasurementType::MaxStraightness_optional& StraightnessCharacteristicMeasurementType::
    MaxStraightness () const
    {
      return this->MaxStraightness_;
    }

    StraightnessCharacteristicMeasurementType::MaxStraightness_optional& StraightnessCharacteristicMeasurementType::
    MaxStraightness ()
    {
      return this->MaxStraightness_;
    }

    void StraightnessCharacteristicMeasurementType::
    MaxStraightness (const MaxStraightness_type& x)
    {
      this->MaxStraightness_.set (x);
    }

    void StraightnessCharacteristicMeasurementType::
    MaxStraightness (const MaxStraightness_optional& x)
    {
      this->MaxStraightness_ = x;
    }

    void StraightnessCharacteristicMeasurementType::
    MaxStraightness (::std::unique_ptr< MaxStraightness_type > x)
    {
      this->MaxStraightness_.set (std::move (x));
    }

    const StraightnessCharacteristicMeasurementType::ZoneOrientation_optional& StraightnessCharacteristicMeasurementType::
    ZoneOrientation () const
    {
      return this->ZoneOrientation_;
    }

    StraightnessCharacteristicMeasurementType::ZoneOrientation_optional& StraightnessCharacteristicMeasurementType::
    ZoneOrientation ()
    {
      return this->ZoneOrientation_;
    }

    void StraightnessCharacteristicMeasurementType::
    ZoneOrientation (const ZoneOrientation_type& x)
    {
      this->ZoneOrientation_.set (x);
    }

    void StraightnessCharacteristicMeasurementType::
    ZoneOrientation (const ZoneOrientation_optional& x)
    {
      this->ZoneOrientation_ = x;
    }

    void StraightnessCharacteristicMeasurementType::
    ZoneOrientation (::std::unique_ptr< ZoneOrientation_type > x)
    {
      this->ZoneOrientation_.set (std::move (x));
    }

    const StraightnessCharacteristicMeasurementType::ZoneLine_optional& StraightnessCharacteristicMeasurementType::
    ZoneLine () const
    {
      return this->ZoneLine_;
    }

    StraightnessCharacteristicMeasurementType::ZoneLine_optional& StraightnessCharacteristicMeasurementType::
    ZoneLine ()
    {
      return this->ZoneLine_;
    }

    void StraightnessCharacteristicMeasurementType::
    ZoneLine (const ZoneLine_type& x)
    {
      this->ZoneLine_.set (x);
    }

    void StraightnessCharacteristicMeasurementType::
    ZoneLine (const ZoneLine_optional& x)
    {
      this->ZoneLine_ = x;
    }

    void StraightnessCharacteristicMeasurementType::
    ZoneLine (::std::unique_ptr< ZoneLine_type > x)
    {
      this->ZoneLine_.set (std::move (x));
    }


    // FlatnessCharacteristicItemType
    //


    // FlatnessCharacteristicDefinitionType
    //

    const FlatnessCharacteristicDefinitionType::ToleranceValue_optional& FlatnessCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    FlatnessCharacteristicDefinitionType::ToleranceValue_optional& FlatnessCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const FlatnessCharacteristicDefinitionType::ToleranceDualValue_optional& FlatnessCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    FlatnessCharacteristicDefinitionType::ToleranceDualValue_optional& FlatnessCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const FlatnessCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea () const
    {
      return this->ToleranceZonePerUnitArea_;
    }

    FlatnessCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea ()
    {
      return this->ToleranceZonePerUnitArea_;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_type& x)
    {
      this->ToleranceZonePerUnitArea_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_optional& x)
    {
      this->ToleranceZonePerUnitArea_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (::std::unique_ptr< ToleranceZonePerUnitArea_type > x)
    {
      this->ToleranceZonePerUnitArea_.set (std::move (x));
    }

    const FlatnessCharacteristicDefinitionType::MaterialCondition_optional& FlatnessCharacteristicDefinitionType::
    MaterialCondition () const
    {
      return this->MaterialCondition_;
    }

    FlatnessCharacteristicDefinitionType::MaterialCondition_optional& FlatnessCharacteristicDefinitionType::
    MaterialCondition ()
    {
      return this->MaterialCondition_;
    }

    void FlatnessCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_optional& x)
    {
      this->MaterialCondition_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    MaterialCondition (::std::unique_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (std::move (x));
    }

    const FlatnessCharacteristicDefinitionType::SizeCharacteristicDefinitionId_optional& FlatnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId () const
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    FlatnessCharacteristicDefinitionType::SizeCharacteristicDefinitionId_optional& FlatnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId ()
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    void FlatnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_type& x)
    {
      this->SizeCharacteristicDefinitionId_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_optional& x)
    {
      this->SizeCharacteristicDefinitionId_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (::std::unique_ptr< SizeCharacteristicDefinitionId_type > x)
    {
      this->SizeCharacteristicDefinitionId_.set (std::move (x));
    }

    const FlatnessCharacteristicDefinitionType::MaximumToleranceValue_optional& FlatnessCharacteristicDefinitionType::
    MaximumToleranceValue () const
    {
      return this->MaximumToleranceValue_;
    }

    FlatnessCharacteristicDefinitionType::MaximumToleranceValue_optional& FlatnessCharacteristicDefinitionType::
    MaximumToleranceValue ()
    {
      return this->MaximumToleranceValue_;
    }

    void FlatnessCharacteristicDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_type& x)
    {
      this->MaximumToleranceValue_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_optional& x)
    {
      this->MaximumToleranceValue_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    MaximumToleranceValue (::std::unique_ptr< MaximumToleranceValue_type > x)
    {
      this->MaximumToleranceValue_.set (std::move (x));
    }

    const FlatnessCharacteristicDefinitionType::NotConvex_optional& FlatnessCharacteristicDefinitionType::
    NotConvex () const
    {
      return this->NotConvex_;
    }

    FlatnessCharacteristicDefinitionType::NotConvex_optional& FlatnessCharacteristicDefinitionType::
    NotConvex ()
    {
      return this->NotConvex_;
    }

    void FlatnessCharacteristicDefinitionType::
    NotConvex (const NotConvex_type& x)
    {
      this->NotConvex_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    NotConvex (const NotConvex_optional& x)
    {
      this->NotConvex_ = x;
    }


    // FlatnessCharacteristicNominalType
    //


    // FlatnessCharacteristicMeasurementType
    //

    const FlatnessCharacteristicMeasurementType::Bonus_optional& FlatnessCharacteristicMeasurementType::
    Bonus () const
    {
      return this->Bonus_;
    }

    FlatnessCharacteristicMeasurementType::Bonus_optional& FlatnessCharacteristicMeasurementType::
    Bonus ()
    {
      return this->Bonus_;
    }

    void FlatnessCharacteristicMeasurementType::
    Bonus (const Bonus_type& x)
    {
      this->Bonus_.set (x);
    }

    void FlatnessCharacteristicMeasurementType::
    Bonus (const Bonus_optional& x)
    {
      this->Bonus_ = x;
    }

    void FlatnessCharacteristicMeasurementType::
    Bonus (::std::unique_ptr< Bonus_type > x)
    {
      this->Bonus_.set (std::move (x));
    }

    const FlatnessCharacteristicMeasurementType::MaxFlatness_optional& FlatnessCharacteristicMeasurementType::
    MaxFlatness () const
    {
      return this->MaxFlatness_;
    }

    FlatnessCharacteristicMeasurementType::MaxFlatness_optional& FlatnessCharacteristicMeasurementType::
    MaxFlatness ()
    {
      return this->MaxFlatness_;
    }

    void FlatnessCharacteristicMeasurementType::
    MaxFlatness (const MaxFlatness_type& x)
    {
      this->MaxFlatness_.set (x);
    }

    void FlatnessCharacteristicMeasurementType::
    MaxFlatness (const MaxFlatness_optional& x)
    {
      this->MaxFlatness_ = x;
    }

    void FlatnessCharacteristicMeasurementType::
    MaxFlatness (::std::unique_ptr< MaxFlatness_type > x)
    {
      this->MaxFlatness_.set (std::move (x));
    }

    const FlatnessCharacteristicMeasurementType::ZonePlane_optional& FlatnessCharacteristicMeasurementType::
    ZonePlane () const
    {
      return this->ZonePlane_;
    }

    FlatnessCharacteristicMeasurementType::ZonePlane_optional& FlatnessCharacteristicMeasurementType::
    ZonePlane ()
    {
      return this->ZonePlane_;
    }

    void FlatnessCharacteristicMeasurementType::
    ZonePlane (const ZonePlane_type& x)
    {
      this->ZonePlane_.set (x);
    }

    void FlatnessCharacteristicMeasurementType::
    ZonePlane (const ZonePlane_optional& x)
    {
      this->ZonePlane_ = x;
    }

    void FlatnessCharacteristicMeasurementType::
    ZonePlane (::std::unique_ptr< ZonePlane_type > x)
    {
      this->ZonePlane_.set (std::move (x));
    }


    // CircularityCharacteristicItemType
    //


    // CircularityCharacteristicDefinitionType
    //

    const CircularityCharacteristicDefinitionType::ToleranceValue_optional& CircularityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    CircularityCharacteristicDefinitionType::ToleranceValue_optional& CircularityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const CircularityCharacteristicDefinitionType::ToleranceDualValue_optional& CircularityCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    CircularityCharacteristicDefinitionType::ToleranceDualValue_optional& CircularityCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const CircularityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle () const
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    CircularityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle ()
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_type& x)
    {
      this->ToleranceZonePerUnitAngle_.set (x);
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_optional& x)
    {
      this->ToleranceZonePerUnitAngle_ = x;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (::std::unique_ptr< ToleranceZonePerUnitAngle_type > x)
    {
      this->ToleranceZonePerUnitAngle_.set (std::move (x));
    }

    const CircularityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength () const
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    CircularityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength ()
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_type& x)
    {
      this->ToleranceZonePerUnitArcLength_.set (x);
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_optional& x)
    {
      this->ToleranceZonePerUnitArcLength_ = x;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (::std::unique_ptr< ToleranceZonePerUnitArcLength_type > x)
    {
      this->ToleranceZonePerUnitArcLength_.set (std::move (x));
    }


    // CircularityCharacteristicNominalType
    //

    const CircularityCharacteristicNominalType::ProfileCurveId_optional& CircularityCharacteristicNominalType::
    ProfileCurveId () const
    {
      return this->ProfileCurveId_;
    }

    CircularityCharacteristicNominalType::ProfileCurveId_optional& CircularityCharacteristicNominalType::
    ProfileCurveId ()
    {
      return this->ProfileCurveId_;
    }

    void CircularityCharacteristicNominalType::
    ProfileCurveId (const ProfileCurveId_type& x)
    {
      this->ProfileCurveId_.set (x);
    }

    void CircularityCharacteristicNominalType::
    ProfileCurveId (const ProfileCurveId_optional& x)
    {
      this->ProfileCurveId_ = x;
    }

    void CircularityCharacteristicNominalType::
    ProfileCurveId (::std::unique_ptr< ProfileCurveId_type > x)
    {
      this->ProfileCurveId_.set (std::move (x));
    }


    // CircularityCharacteristicMeasurementType
    //

    const CircularityCharacteristicMeasurementType::MaxCircularity_optional& CircularityCharacteristicMeasurementType::
    MaxCircularity () const
    {
      return this->MaxCircularity_;
    }

    CircularityCharacteristicMeasurementType::MaxCircularity_optional& CircularityCharacteristicMeasurementType::
    MaxCircularity ()
    {
      return this->MaxCircularity_;
    }

    void CircularityCharacteristicMeasurementType::
    MaxCircularity (const MaxCircularity_type& x)
    {
      this->MaxCircularity_.set (x);
    }

    void CircularityCharacteristicMeasurementType::
    MaxCircularity (const MaxCircularity_optional& x)
    {
      this->MaxCircularity_ = x;
    }

    void CircularityCharacteristicMeasurementType::
    MaxCircularity (::std::unique_ptr< MaxCircularity_type > x)
    {
      this->MaxCircularity_.set (std::move (x));
    }

    const CircularityCharacteristicMeasurementType::ZoneRadii_optional& CircularityCharacteristicMeasurementType::
    ZoneRadii () const
    {
      return this->ZoneRadii_;
    }

    CircularityCharacteristicMeasurementType::ZoneRadii_optional& CircularityCharacteristicMeasurementType::
    ZoneRadii ()
    {
      return this->ZoneRadii_;
    }

    void CircularityCharacteristicMeasurementType::
    ZoneRadii (const ZoneRadii_type& x)
    {
      this->ZoneRadii_.set (x);
    }

    void CircularityCharacteristicMeasurementType::
    ZoneRadii (const ZoneRadii_optional& x)
    {
      this->ZoneRadii_ = x;
    }

    void CircularityCharacteristicMeasurementType::
    ZoneRadii (::std::unique_ptr< ZoneRadii_type > x)
    {
      this->ZoneRadii_.set (std::move (x));
    }

    const CircularityCharacteristicMeasurementType::ZonePlane_optional& CircularityCharacteristicMeasurementType::
    ZonePlane () const
    {
      return this->ZonePlane_;
    }

    CircularityCharacteristicMeasurementType::ZonePlane_optional& CircularityCharacteristicMeasurementType::
    ZonePlane ()
    {
      return this->ZonePlane_;
    }

    void CircularityCharacteristicMeasurementType::
    ZonePlane (const ZonePlane_type& x)
    {
      this->ZonePlane_.set (x);
    }

    void CircularityCharacteristicMeasurementType::
    ZonePlane (const ZonePlane_optional& x)
    {
      this->ZonePlane_ = x;
    }

    void CircularityCharacteristicMeasurementType::
    ZonePlane (::std::unique_ptr< ZonePlane_type > x)
    {
      this->ZonePlane_.set (std::move (x));
    }


    // ConicityCharacteristicItemType
    //


    // ConicityCharacteristicDefinitionType
    //

    const ConicityCharacteristicDefinitionType::ToleranceValue_type& ConicityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    ConicityCharacteristicDefinitionType::ToleranceValue_type& ConicityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void ConicityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void ConicityCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const ConicityCharacteristicDefinitionType::ToleranceDualValue_optional& ConicityCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    ConicityCharacteristicDefinitionType::ToleranceDualValue_optional& ConicityCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void ConicityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void ConicityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void ConicityCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }


    // ConicityCharacteristicNominalType
    //


    // ConicityCharacteristicMeasurementType
    //


    // CylindricityCharacteristicItemType
    //


    // CylindricityCharacteristicDefinitionType
    //

    const CylindricityCharacteristicDefinitionType::ToleranceValue_optional& CylindricityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceValue_optional& CylindricityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const CylindricityCharacteristicDefinitionType::ToleranceDualValue_optional& CylindricityCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceDualValue_optional& CylindricityCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle () const
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle ()
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_type& x)
    {
      this->ToleranceZonePerUnitAngle_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_optional& x)
    {
      this->ToleranceZonePerUnitAngle_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (::std::unique_ptr< ToleranceZonePerUnitAngle_type > x)
    {
      this->ToleranceZonePerUnitAngle_.set (std::move (x));
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength () const
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength ()
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_type& x)
    {
      this->ToleranceZonePerUnitArcLength_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_optional& x)
    {
      this->ToleranceZonePerUnitArcLength_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (::std::unique_ptr< ToleranceZonePerUnitArcLength_type > x)
    {
      this->ToleranceZonePerUnitArcLength_.set (std::move (x));
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitPolarArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea () const
    {
      return this->ToleranceZonePerUnitPolarArea_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitPolarArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea ()
    {
      return this->ToleranceZonePerUnitPolarArea_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea (const ToleranceZonePerUnitPolarArea_type& x)
    {
      this->ToleranceZonePerUnitPolarArea_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea (const ToleranceZonePerUnitPolarArea_optional& x)
    {
      this->ToleranceZonePerUnitPolarArea_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea (::std::unique_ptr< ToleranceZonePerUnitPolarArea_type > x)
    {
      this->ToleranceZonePerUnitPolarArea_.set (std::move (x));
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea () const
    {
      return this->ToleranceZonePerUnitArea_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea ()
    {
      return this->ToleranceZonePerUnitArea_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_type& x)
    {
      this->ToleranceZonePerUnitArea_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_optional& x)
    {
      this->ToleranceZonePerUnitArea_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (::std::unique_ptr< ToleranceZonePerUnitArea_type > x)
    {
      this->ToleranceZonePerUnitArea_.set (std::move (x));
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength () const
    {
      return this->ToleranceZonePerUnitLength_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength ()
    {
      return this->ToleranceZonePerUnitLength_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_type& x)
    {
      this->ToleranceZonePerUnitLength_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_optional& x)
    {
      this->ToleranceZonePerUnitLength_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (::std::unique_ptr< ToleranceZonePerUnitLength_type > x)
    {
      this->ToleranceZonePerUnitLength_.set (std::move (x));
    }


    // CylindricityCharacteristicNominalType
    //


    // CylindricityCharacteristicMeasurementType
    //

    const CylindricityCharacteristicMeasurementType::MaxCylindricity_optional& CylindricityCharacteristicMeasurementType::
    MaxCylindricity () const
    {
      return this->MaxCylindricity_;
    }

    CylindricityCharacteristicMeasurementType::MaxCylindricity_optional& CylindricityCharacteristicMeasurementType::
    MaxCylindricity ()
    {
      return this->MaxCylindricity_;
    }

    void CylindricityCharacteristicMeasurementType::
    MaxCylindricity (const MaxCylindricity_type& x)
    {
      this->MaxCylindricity_.set (x);
    }

    void CylindricityCharacteristicMeasurementType::
    MaxCylindricity (const MaxCylindricity_optional& x)
    {
      this->MaxCylindricity_ = x;
    }

    void CylindricityCharacteristicMeasurementType::
    MaxCylindricity (::std::unique_ptr< MaxCylindricity_type > x)
    {
      this->MaxCylindricity_.set (std::move (x));
    }

    const CylindricityCharacteristicMeasurementType::ZoneRadii_optional& CylindricityCharacteristicMeasurementType::
    ZoneRadii () const
    {
      return this->ZoneRadii_;
    }

    CylindricityCharacteristicMeasurementType::ZoneRadii_optional& CylindricityCharacteristicMeasurementType::
    ZoneRadii ()
    {
      return this->ZoneRadii_;
    }

    void CylindricityCharacteristicMeasurementType::
    ZoneRadii (const ZoneRadii_type& x)
    {
      this->ZoneRadii_.set (x);
    }

    void CylindricityCharacteristicMeasurementType::
    ZoneRadii (const ZoneRadii_optional& x)
    {
      this->ZoneRadii_ = x;
    }

    void CylindricityCharacteristicMeasurementType::
    ZoneRadii (::std::unique_ptr< ZoneRadii_type > x)
    {
      this->ZoneRadii_.set (std::move (x));
    }

    const CylindricityCharacteristicMeasurementType::ZoneAxis_optional& CylindricityCharacteristicMeasurementType::
    ZoneAxis () const
    {
      return this->ZoneAxis_;
    }

    CylindricityCharacteristicMeasurementType::ZoneAxis_optional& CylindricityCharacteristicMeasurementType::
    ZoneAxis ()
    {
      return this->ZoneAxis_;
    }

    void CylindricityCharacteristicMeasurementType::
    ZoneAxis (const ZoneAxis_type& x)
    {
      this->ZoneAxis_.set (x);
    }

    void CylindricityCharacteristicMeasurementType::
    ZoneAxis (const ZoneAxis_optional& x)
    {
      this->ZoneAxis_ = x;
    }

    void CylindricityCharacteristicMeasurementType::
    ZoneAxis (::std::unique_ptr< ZoneAxis_type > x)
    {
      this->ZoneAxis_.set (std::move (x));
    }


    // EllipticityCharacteristicItemType
    //


    // EllipticityCharacteristicDefinitionType
    //

    const EllipticityCharacteristicDefinitionType::ToleranceValue_type& EllipticityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    EllipticityCharacteristicDefinitionType::ToleranceValue_type& EllipticityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void EllipticityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void EllipticityCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const EllipticityCharacteristicDefinitionType::ToleranceDualValue_optional& EllipticityCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    EllipticityCharacteristicDefinitionType::ToleranceDualValue_optional& EllipticityCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void EllipticityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void EllipticityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void EllipticityCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }


    // EllipticityCharacteristicNominalType
    //


    // EllipticityCharacteristicMeasurementType
    //


    // SphericityCharacteristicItemType
    //


    // SphericityCharacteristicDefinitionType
    //

    const SphericityCharacteristicDefinitionType::ToleranceValue_type& SphericityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    SphericityCharacteristicDefinitionType::ToleranceValue_type& SphericityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void SphericityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void SphericityCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const SphericityCharacteristicDefinitionType::ToleranceDualValue_optional& SphericityCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    SphericityCharacteristicDefinitionType::ToleranceDualValue_optional& SphericityCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void SphericityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void SphericityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void SphericityCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }


    // SphericityCharacteristicNominalType
    //


    // SphericityCharacteristicMeasurementType
    //

    const SphericityCharacteristicMeasurementType::ZoneRadii_optional& SphericityCharacteristicMeasurementType::
    ZoneRadii () const
    {
      return this->ZoneRadii_;
    }

    SphericityCharacteristicMeasurementType::ZoneRadii_optional& SphericityCharacteristicMeasurementType::
    ZoneRadii ()
    {
      return this->ZoneRadii_;
    }

    void SphericityCharacteristicMeasurementType::
    ZoneRadii (const ZoneRadii_type& x)
    {
      this->ZoneRadii_.set (x);
    }

    void SphericityCharacteristicMeasurementType::
    ZoneRadii (const ZoneRadii_optional& x)
    {
      this->ZoneRadii_ = x;
    }

    void SphericityCharacteristicMeasurementType::
    ZoneRadii (::std::unique_ptr< ZoneRadii_type > x)
    {
      this->ZoneRadii_.set (std::move (x));
    }

    const SphericityCharacteristicMeasurementType::ZonePoint_optional& SphericityCharacteristicMeasurementType::
    ZonePoint () const
    {
      return this->ZonePoint_;
    }

    SphericityCharacteristicMeasurementType::ZonePoint_optional& SphericityCharacteristicMeasurementType::
    ZonePoint ()
    {
      return this->ZonePoint_;
    }

    void SphericityCharacteristicMeasurementType::
    ZonePoint (const ZonePoint_type& x)
    {
      this->ZonePoint_.set (x);
    }

    void SphericityCharacteristicMeasurementType::
    ZonePoint (const ZonePoint_optional& x)
    {
      this->ZonePoint_ = x;
    }

    void SphericityCharacteristicMeasurementType::
    ZonePoint (::std::unique_ptr< ZonePoint_type > x)
    {
      this->ZonePoint_.set (std::move (x));
    }


    // ToroidicityCharacteristicItemType
    //


    // ToroidicityCharacteristicDefinitionType
    //

    const ToroidicityCharacteristicDefinitionType::ToleranceValue_type& ToroidicityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    ToroidicityCharacteristicDefinitionType::ToleranceValue_type& ToroidicityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void ToroidicityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void ToroidicityCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const ToroidicityCharacteristicDefinitionType::ToleranceDualValue_optional& ToroidicityCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    ToroidicityCharacteristicDefinitionType::ToleranceDualValue_optional& ToroidicityCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void ToroidicityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void ToroidicityCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void ToroidicityCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }


    // ToroidicityCharacteristicNominalType
    //


    // ToroidicityCharacteristicMeasurementType
    //


    // OtherFormCharacteristicItemType
    //


    // OtherFormCharacteristicDefinitionType
    //

    const OtherFormCharacteristicDefinitionType::ToleranceValue_type& OtherFormCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    OtherFormCharacteristicDefinitionType::ToleranceValue_type& OtherFormCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void OtherFormCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void OtherFormCharacteristicDefinitionType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const OtherFormCharacteristicDefinitionType::ToleranceDualValue_optional& OtherFormCharacteristicDefinitionType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    OtherFormCharacteristicDefinitionType::ToleranceDualValue_optional& OtherFormCharacteristicDefinitionType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void OtherFormCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void OtherFormCharacteristicDefinitionType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void OtherFormCharacteristicDefinitionType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }


    // OtherFormCharacteristicNominalType
    //


    // OtherFormCharacteristicMeasurementType
    //


    // LocationCharacteristicItemBaseType
    //


    // LocationCharacteristicDefinitionBaseType
    //

    const LocationCharacteristicDefinitionBaseType::ToleranceValue_type& LocationCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    LocationCharacteristicDefinitionBaseType::ToleranceValue_type& LocationCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void LocationCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void LocationCharacteristicDefinitionBaseType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const LocationCharacteristicDefinitionBaseType::ToleranceDualValue_optional& LocationCharacteristicDefinitionBaseType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    LocationCharacteristicDefinitionBaseType::ToleranceDualValue_optional& LocationCharacteristicDefinitionBaseType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void LocationCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void LocationCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void LocationCharacteristicDefinitionBaseType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const LocationCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_;
    }

    LocationCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_;
    }

    void LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_optional& x)
    {
      this->DatumReferenceFrameId_ = x;
    }

    void LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::unique_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (std::move (x));
    }


    // LocationCharacteristicNominalBaseType
    //


    // LocationCharacteristicMeasurementBaseType
    //

    const LocationCharacteristicMeasurementBaseType::ZoneDataSet_optional& LocationCharacteristicMeasurementBaseType::
    ZoneDataSet () const
    {
      return this->ZoneDataSet_;
    }

    LocationCharacteristicMeasurementBaseType::ZoneDataSet_optional& LocationCharacteristicMeasurementBaseType::
    ZoneDataSet ()
    {
      return this->ZoneDataSet_;
    }

    void LocationCharacteristicMeasurementBaseType::
    ZoneDataSet (const ZoneDataSet_type& x)
    {
      this->ZoneDataSet_.set (x);
    }

    void LocationCharacteristicMeasurementBaseType::
    ZoneDataSet (const ZoneDataSet_optional& x)
    {
      this->ZoneDataSet_ = x;
    }

    void LocationCharacteristicMeasurementBaseType::
    ZoneDataSet (::std::unique_ptr< ZoneDataSet_type > x)
    {
      this->ZoneDataSet_.set (std::move (x));
    }

    const LocationCharacteristicMeasurementBaseType::DatumsOk_optional& LocationCharacteristicMeasurementBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    LocationCharacteristicMeasurementBaseType::DatumsOk_optional& LocationCharacteristicMeasurementBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void LocationCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void LocationCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }


    // PositionCharacteristicItemType
    //


    // PositionSphericalZoneType
    //

    const PositionSphericalZoneType::Dimensionality_optional& PositionSphericalZoneType::
    Dimensionality () const
    {
      return this->Dimensionality_;
    }

    PositionSphericalZoneType::Dimensionality_optional& PositionSphericalZoneType::
    Dimensionality ()
    {
      return this->Dimensionality_;
    }

    void PositionSphericalZoneType::
    Dimensionality (const Dimensionality_type& x)
    {
      this->Dimensionality_.set (x);
    }

    void PositionSphericalZoneType::
    Dimensionality (const Dimensionality_optional& x)
    {
      this->Dimensionality_ = x;
    }

    void PositionSphericalZoneType::
    Dimensionality (::std::unique_ptr< Dimensionality_type > x)
    {
      this->Dimensionality_.set (std::move (x));
    }

    const PositionSphericalZoneType::Dimensionality_type& PositionSphericalZoneType::
    Dimensionality_default_value ()
    {
      return Dimensionality_default_value_;
    }


    // PositionDiametricalZoneType
    //

    const PositionDiametricalZoneType::Dimensionality_optional& PositionDiametricalZoneType::
    Dimensionality () const
    {
      return this->Dimensionality_;
    }

    PositionDiametricalZoneType::Dimensionality_optional& PositionDiametricalZoneType::
    Dimensionality ()
    {
      return this->Dimensionality_;
    }

    void PositionDiametricalZoneType::
    Dimensionality (const Dimensionality_type& x)
    {
      this->Dimensionality_.set (x);
    }

    void PositionDiametricalZoneType::
    Dimensionality (const Dimensionality_optional& x)
    {
      this->Dimensionality_ = x;
    }

    void PositionDiametricalZoneType::
    Dimensionality (::std::unique_ptr< Dimensionality_type > x)
    {
      this->Dimensionality_.set (std::move (x));
    }

    const PositionDiametricalZoneType::ZoneOrientationVector_optional& PositionDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    PositionDiametricalZoneType::ZoneOrientationVector_optional& PositionDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void PositionDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void PositionDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void PositionDiametricalZoneType::
    ZoneOrientationVector (::std::unique_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (std::move (x));
    }

    const PositionDiametricalZoneType::ElongatedZone_optional& PositionDiametricalZoneType::
    ElongatedZone () const
    {
      return this->ElongatedZone_;
    }

    PositionDiametricalZoneType::ElongatedZone_optional& PositionDiametricalZoneType::
    ElongatedZone ()
    {
      return this->ElongatedZone_;
    }

    void PositionDiametricalZoneType::
    ElongatedZone (const ElongatedZone_type& x)
    {
      this->ElongatedZone_.set (x);
    }

    void PositionDiametricalZoneType::
    ElongatedZone (const ElongatedZone_optional& x)
    {
      this->ElongatedZone_ = x;
    }


    // PositionNonDiametricalZoneType
    //

    const PositionNonDiametricalZoneType::Dimensionality_optional& PositionNonDiametricalZoneType::
    Dimensionality () const
    {
      return this->Dimensionality_;
    }

    PositionNonDiametricalZoneType::Dimensionality_optional& PositionNonDiametricalZoneType::
    Dimensionality ()
    {
      return this->Dimensionality_;
    }

    void PositionNonDiametricalZoneType::
    Dimensionality (const Dimensionality_type& x)
    {
      this->Dimensionality_.set (x);
    }

    void PositionNonDiametricalZoneType::
    Dimensionality (const Dimensionality_optional& x)
    {
      this->Dimensionality_ = x;
    }

    void PositionNonDiametricalZoneType::
    Dimensionality (::std::unique_ptr< Dimensionality_type > x)
    {
      this->Dimensionality_.set (std::move (x));
    }

    const PositionNonDiametricalZoneType::ZoneOrientationVector_optional& PositionNonDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    PositionNonDiametricalZoneType::ZoneOrientationVector_optional& PositionNonDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationVector (::std::unique_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (std::move (x));
    }

    const PositionNonDiametricalZoneType::BoundaryZone_optional& PositionNonDiametricalZoneType::
    BoundaryZone () const
    {
      return this->BoundaryZone_;
    }

    PositionNonDiametricalZoneType::BoundaryZone_optional& PositionNonDiametricalZoneType::
    BoundaryZone ()
    {
      return this->BoundaryZone_;
    }

    void PositionNonDiametricalZoneType::
    BoundaryZone (const BoundaryZone_type& x)
    {
      this->BoundaryZone_.set (x);
    }

    void PositionNonDiametricalZoneType::
    BoundaryZone (const BoundaryZone_optional& x)
    {
      this->BoundaryZone_ = x;
    }

    const PositionNonDiametricalZoneType::ZoneOrientationEnum_optional& PositionNonDiametricalZoneType::
    ZoneOrientationEnum () const
    {
      return this->ZoneOrientationEnum_;
    }

    PositionNonDiametricalZoneType::ZoneOrientationEnum_optional& PositionNonDiametricalZoneType::
    ZoneOrientationEnum ()
    {
      return this->ZoneOrientationEnum_;
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationEnum (const ZoneOrientationEnum_type& x)
    {
      this->ZoneOrientationEnum_.set (x);
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationEnum (const ZoneOrientationEnum_optional& x)
    {
      this->ZoneOrientationEnum_ = x;
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationEnum (::std::unique_ptr< ZoneOrientationEnum_type > x)
    {
      this->ZoneOrientationEnum_.set (std::move (x));
    }

    const PositionNonDiametricalZoneType::CoordinateSystemId_optional& PositionNonDiametricalZoneType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    PositionNonDiametricalZoneType::CoordinateSystemId_optional& PositionNonDiametricalZoneType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void PositionNonDiametricalZoneType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void PositionNonDiametricalZoneType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void PositionNonDiametricalZoneType::
    CoordinateSystemId (::std::unique_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (std::move (x));
    }


    // PositionZoneShapeType
    //

    const PositionZoneShapeType::SphericalZone_optional& PositionZoneShapeType::
    SphericalZone () const
    {
      return this->SphericalZone_;
    }

    PositionZoneShapeType::SphericalZone_optional& PositionZoneShapeType::
    SphericalZone ()
    {
      return this->SphericalZone_;
    }

    void PositionZoneShapeType::
    SphericalZone (const SphericalZone_type& x)
    {
      this->SphericalZone_.set (x);
    }

    void PositionZoneShapeType::
    SphericalZone (const SphericalZone_optional& x)
    {
      this->SphericalZone_ = x;
    }

    void PositionZoneShapeType::
    SphericalZone (::std::unique_ptr< SphericalZone_type > x)
    {
      this->SphericalZone_.set (std::move (x));
    }

    const PositionZoneShapeType::DiametricalZone_optional& PositionZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    PositionZoneShapeType::DiametricalZone_optional& PositionZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void PositionZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void PositionZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void PositionZoneShapeType::
    DiametricalZone (::std::unique_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (std::move (x));
    }

    const PositionZoneShapeType::NonDiametricalZone_optional& PositionZoneShapeType::
    NonDiametricalZone () const
    {
      return this->NonDiametricalZone_;
    }

    PositionZoneShapeType::NonDiametricalZone_optional& PositionZoneShapeType::
    NonDiametricalZone ()
    {
      return this->NonDiametricalZone_;
    }

    void PositionZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_type& x)
    {
      this->NonDiametricalZone_.set (x);
    }

    void PositionZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_optional& x)
    {
      this->NonDiametricalZone_ = x;
    }

    void PositionZoneShapeType::
    NonDiametricalZone (::std::unique_ptr< NonDiametricalZone_type > x)
    {
      this->NonDiametricalZone_.set (std::move (x));
    }


    // PositionCharacteristicDefinitionType
    //

    const PositionCharacteristicDefinitionType::MaterialCondition_type& PositionCharacteristicDefinitionType::
    MaterialCondition () const
    {
      return this->MaterialCondition_.get ();
    }

    PositionCharacteristicDefinitionType::MaterialCondition_type& PositionCharacteristicDefinitionType::
    MaterialCondition ()
    {
      return this->MaterialCondition_.get ();
    }

    void PositionCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    MaterialCondition (::std::unique_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::SizeCharacteristicDefinitionId_optional& PositionCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId () const
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    PositionCharacteristicDefinitionType::SizeCharacteristicDefinitionId_optional& PositionCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId ()
    {
      return this->SizeCharacteristicDefinitionId_;
    }

    void PositionCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_type& x)
    {
      this->SizeCharacteristicDefinitionId_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (const SizeCharacteristicDefinitionId_optional& x)
    {
      this->SizeCharacteristicDefinitionId_ = x;
    }

    void PositionCharacteristicDefinitionType::
    SizeCharacteristicDefinitionId (::std::unique_ptr< SizeCharacteristicDefinitionId_type > x)
    {
      this->SizeCharacteristicDefinitionId_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::ZoneShape_type& PositionCharacteristicDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    PositionCharacteristicDefinitionType::ZoneShape_type& PositionCharacteristicDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void PositionCharacteristicDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ZoneShape (::std::unique_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::MaximumToleranceValue_optional& PositionCharacteristicDefinitionType::
    MaximumToleranceValue () const
    {
      return this->MaximumToleranceValue_;
    }

    PositionCharacteristicDefinitionType::MaximumToleranceValue_optional& PositionCharacteristicDefinitionType::
    MaximumToleranceValue ()
    {
      return this->MaximumToleranceValue_;
    }

    void PositionCharacteristicDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_type& x)
    {
      this->MaximumToleranceValue_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    MaximumToleranceValue (const MaximumToleranceValue_optional& x)
    {
      this->MaximumToleranceValue_ = x;
    }

    void PositionCharacteristicDefinitionType::
    MaximumToleranceValue (::std::unique_ptr< MaximumToleranceValue_type > x)
    {
      this->MaximumToleranceValue_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::ProjectedToleranceZoneValue_optional& PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue () const
    {
      return this->ProjectedToleranceZoneValue_;
    }

    PositionCharacteristicDefinitionType::ProjectedToleranceZoneValue_optional& PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue ()
    {
      return this->ProjectedToleranceZoneValue_;
    }

    void PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_type& x)
    {
      this->ProjectedToleranceZoneValue_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_optional& x)
    {
      this->ProjectedToleranceZoneValue_ = x;
    }

    void PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue (::std::unique_ptr< ProjectedToleranceZoneValue_type > x)
    {
      this->ProjectedToleranceZoneValue_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::SecondCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition () const
    {
      return this->SecondCompositeSegmentPositionDefinition_;
    }

    PositionCharacteristicDefinitionType::SecondCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition ()
    {
      return this->SecondCompositeSegmentPositionDefinition_;
    }

    void PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition (const SecondCompositeSegmentPositionDefinition_type& x)
    {
      this->SecondCompositeSegmentPositionDefinition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition (const SecondCompositeSegmentPositionDefinition_optional& x)
    {
      this->SecondCompositeSegmentPositionDefinition_ = x;
    }

    void PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition (::std::unique_ptr< SecondCompositeSegmentPositionDefinition_type > x)
    {
      this->SecondCompositeSegmentPositionDefinition_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::ThirdCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition () const
    {
      return this->ThirdCompositeSegmentPositionDefinition_;
    }

    PositionCharacteristicDefinitionType::ThirdCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition ()
    {
      return this->ThirdCompositeSegmentPositionDefinition_;
    }

    void PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition (const ThirdCompositeSegmentPositionDefinition_type& x)
    {
      this->ThirdCompositeSegmentPositionDefinition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition (const ThirdCompositeSegmentPositionDefinition_optional& x)
    {
      this->ThirdCompositeSegmentPositionDefinition_ = x;
    }

    void PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition (::std::unique_ptr< ThirdCompositeSegmentPositionDefinition_type > x)
    {
      this->ThirdCompositeSegmentPositionDefinition_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::FourthCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition () const
    {
      return this->FourthCompositeSegmentPositionDefinition_;
    }

    PositionCharacteristicDefinitionType::FourthCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition ()
    {
      return this->FourthCompositeSegmentPositionDefinition_;
    }

    void PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition (const FourthCompositeSegmentPositionDefinition_type& x)
    {
      this->FourthCompositeSegmentPositionDefinition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition (const FourthCompositeSegmentPositionDefinition_optional& x)
    {
      this->FourthCompositeSegmentPositionDefinition_ = x;
    }

    void PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition (::std::unique_ptr< FourthCompositeSegmentPositionDefinition_type > x)
    {
      this->FourthCompositeSegmentPositionDefinition_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::ToPointToleranceValue_optional& PositionCharacteristicDefinitionType::
    ToPointToleranceValue () const
    {
      return this->ToPointToleranceValue_;
    }

    PositionCharacteristicDefinitionType::ToPointToleranceValue_optional& PositionCharacteristicDefinitionType::
    ToPointToleranceValue ()
    {
      return this->ToPointToleranceValue_;
    }

    void PositionCharacteristicDefinitionType::
    ToPointToleranceValue (const ToPointToleranceValue_type& x)
    {
      this->ToPointToleranceValue_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ToPointToleranceValue (const ToPointToleranceValue_optional& x)
    {
      this->ToPointToleranceValue_ = x;
    }

    void PositionCharacteristicDefinitionType::
    ToPointToleranceValue (::std::unique_ptr< ToPointToleranceValue_type > x)
    {
      this->ToPointToleranceValue_.set (std::move (x));
    }

    const PositionCharacteristicDefinitionType::OrientationOnly_optional& PositionCharacteristicDefinitionType::
    OrientationOnly () const
    {
      return this->OrientationOnly_;
    }

    PositionCharacteristicDefinitionType::OrientationOnly_optional& PositionCharacteristicDefinitionType::
    OrientationOnly ()
    {
      return this->OrientationOnly_;
    }

    void PositionCharacteristicDefinitionType::
    OrientationOnly (const OrientationOnly_type& x)
    {
      this->OrientationOnly_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    OrientationOnly (const OrientationOnly_optional& x)
    {
      this->OrientationOnly_ = x;
    }


    // PositionCharacteristicNominalType
    //

    const PositionCharacteristicNominalType::CoordinateMethod_optional& PositionCharacteristicNominalType::
    CoordinateMethod () const
    {
      return this->CoordinateMethod_;
    }

    PositionCharacteristicNominalType::CoordinateMethod_optional& PositionCharacteristicNominalType::
    CoordinateMethod ()
    {
      return this->CoordinateMethod_;
    }

    void PositionCharacteristicNominalType::
    CoordinateMethod (const CoordinateMethod_type& x)
    {
      this->CoordinateMethod_.set (x);
    }

    void PositionCharacteristicNominalType::
    CoordinateMethod (const CoordinateMethod_optional& x)
    {
      this->CoordinateMethod_ = x;
    }

    void PositionCharacteristicNominalType::
    CoordinateMethod (::std::unique_ptr< CoordinateMethod_type > x)
    {
      this->CoordinateMethod_.set (std::move (x));
    }


    // PositionCharacteristicMeasurementType
    //

    const PositionCharacteristicMeasurementType::Bonus_optional& PositionCharacteristicMeasurementType::
    Bonus () const
    {
      return this->Bonus_;
    }

    PositionCharacteristicMeasurementType::Bonus_optional& PositionCharacteristicMeasurementType::
    Bonus ()
    {
      return this->Bonus_;
    }

    void PositionCharacteristicMeasurementType::
    Bonus (const Bonus_type& x)
    {
      this->Bonus_.set (x);
    }

    void PositionCharacteristicMeasurementType::
    Bonus (const Bonus_optional& x)
    {
      this->Bonus_ = x;
    }

    void PositionCharacteristicMeasurementType::
    Bonus (::std::unique_ptr< Bonus_type > x)
    {
      this->Bonus_.set (std::move (x));
    }

    const PositionCharacteristicMeasurementType::DRFTransformActualId_optional& PositionCharacteristicMeasurementType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    PositionCharacteristicMeasurementType::DRFTransformActualId_optional& PositionCharacteristicMeasurementType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void PositionCharacteristicMeasurementType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void PositionCharacteristicMeasurementType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void PositionCharacteristicMeasurementType::
    DRFTransformActualId (::std::unique_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (std::move (x));
    }

    const PositionCharacteristicMeasurementType::SecondCompositeSegmentPositionMeasurement_optional& PositionCharacteristicMeasurementType::
    SecondCompositeSegmentPositionMeasurement () const
    {
      return this->SecondCompositeSegmentPositionMeasurement_;
    }

    PositionCharacteristicMeasurementType::SecondCompositeSegmentPositionMeasurement_optional& PositionCharacteristicMeasurementType::
    SecondCompositeSegmentPositionMeasurement ()
    {
      return this->SecondCompositeSegmentPositionMeasurement_;
    }

    void PositionCharacteristicMeasurementType::
    SecondCompositeSegmentPositionMeasurement (const SecondCompositeSegmentPositionMeasurement_type& x)
    {
      this->SecondCompositeSegmentPositionMeasurement_.set (x);
    }

    void PositionCharacteristicMeasurementType::
    SecondCompositeSegmentPositionMeasurement (const SecondCompositeSegmentPositionMeasurement_optional& x)
    {
      this->SecondCompositeSegmentPositionMeasurement_ = x;
    }

    void PositionCharacteristicMeasurementType::
    SecondCompositeSegmentPositionMeasurement (::std::unique_ptr< SecondCompositeSegmentPositionMeasurement_type > x)
    {
      this->SecondCompositeSegmentPositionMeasurement_.set (std::move (x));
    }

    const PositionCharacteristicMeasurementType::ThirdCompositeSegmentPositionMeasurement_optional& PositionCharacteristicMeasurementType::
    ThirdCompositeSegmentPositionMeasurement () const
    {
      return this->ThirdCompositeSegmentPositionMeasurement_;
    }

    PositionCharacteristicMeasurementType::ThirdCompositeSegmentPositionMeasurement_optional& PositionCharacteristicMeasurementType::
    ThirdCompositeSegmentPositionMeasurement ()
    {
      return this->ThirdCompositeSegmentPositionMeasurement_;
    }

    void PositionCharacteristicMeasurementType::
    ThirdCompositeSegmentPositionMeasurement (const ThirdCompositeSegmentPositionMeasurement_type& x)
    {
      this->ThirdCompositeSegmentPositionMeasurement_.set (x);
    }

    void PositionCharacteristicMeasurementType::
    ThirdCompositeSegmentPositionMeasurement (const ThirdCompositeSegmentPositionMeasurement_optional& x)
    {
      this->ThirdCompositeSegmentPositionMeasurement_ = x;
    }

    void PositionCharacteristicMeasurementType::
    ThirdCompositeSegmentPositionMeasurement (::std::unique_ptr< ThirdCompositeSegmentPositionMeasurement_type > x)
    {
      this->ThirdCompositeSegmentPositionMeasurement_.set (std::move (x));
    }

    const PositionCharacteristicMeasurementType::FourthCompositeSegmentPositionMeasurement_optional& PositionCharacteristicMeasurementType::
    FourthCompositeSegmentPositionMeasurement () const
    {
      return this->FourthCompositeSegmentPositionMeasurement_;
    }

    PositionCharacteristicMeasurementType::FourthCompositeSegmentPositionMeasurement_optional& PositionCharacteristicMeasurementType::
    FourthCompositeSegmentPositionMeasurement ()
    {
      return this->FourthCompositeSegmentPositionMeasurement_;
    }

    void PositionCharacteristicMeasurementType::
    FourthCompositeSegmentPositionMeasurement (const FourthCompositeSegmentPositionMeasurement_type& x)
    {
      this->FourthCompositeSegmentPositionMeasurement_.set (x);
    }

    void PositionCharacteristicMeasurementType::
    FourthCompositeSegmentPositionMeasurement (const FourthCompositeSegmentPositionMeasurement_optional& x)
    {
      this->FourthCompositeSegmentPositionMeasurement_ = x;
    }

    void PositionCharacteristicMeasurementType::
    FourthCompositeSegmentPositionMeasurement (::std::unique_ptr< FourthCompositeSegmentPositionMeasurement_type > x)
    {
      this->FourthCompositeSegmentPositionMeasurement_.set (std::move (x));
    }


    // AngleCharacteristicItemType
    //


    // AngleCharacteristicDefinitionType
    //


    // AngleCharacteristicNominalType
    //


    // AngleCharacteristicMeasurementType
    //


    // AngleFromCharacteristicItemType
    //


    // AngleFromCharacteristicDefinitionType
    //


    // AngleFromCharacteristicNominalType
    //

    const AngleFromCharacteristicNominalType::OriginReference_optional& AngleFromCharacteristicNominalType::
    OriginReference () const
    {
      return this->OriginReference_;
    }

    AngleFromCharacteristicNominalType::OriginReference_optional& AngleFromCharacteristicNominalType::
    OriginReference ()
    {
      return this->OriginReference_;
    }

    void AngleFromCharacteristicNominalType::
    OriginReference (const OriginReference_type& x)
    {
      this->OriginReference_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    OriginReference (const OriginReference_optional& x)
    {
      this->OriginReference_ = x;
    }

    void AngleFromCharacteristicNominalType::
    OriginReference (::std::unique_ptr< OriginReference_type > x)
    {
      this->OriginReference_.set (std::move (x));
    }

    const AngleFromCharacteristicNominalType::AnalysisVector_optional& AngleFromCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleFromCharacteristicNominalType::AnalysisVector_optional& AngleFromCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleFromCharacteristicNominalType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }

    const AngleFromCharacteristicNominalType::AnalysisMode_type& AngleFromCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    AngleFromCharacteristicNominalType::AnalysisMode_type& AngleFromCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void AngleFromCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    AnalysisMode (::std::unique_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (std::move (x));
    }

    const AngleFromCharacteristicNominalType::CoordinateSystemId_optional& AngleFromCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    AngleFromCharacteristicNominalType::CoordinateSystemId_optional& AngleFromCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void AngleFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void AngleFromCharacteristicNominalType::
    CoordinateSystemId (::std::unique_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (std::move (x));
    }

    const AngleFromCharacteristicNominalType::MeasurementDirective_optional& AngleFromCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    AngleFromCharacteristicNominalType::MeasurementDirective_optional& AngleFromCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void AngleFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void AngleFromCharacteristicNominalType::
    MeasurementDirective (::std::unique_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (std::move (x));
    }

    const AngleFromCharacteristicNominalType::Vertex_optional& AngleFromCharacteristicNominalType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleFromCharacteristicNominalType::Vertex_optional& AngleFromCharacteristicNominalType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleFromCharacteristicNominalType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleFromCharacteristicNominalType::
    Vertex (::std::unique_ptr< Vertex_type > x)
    {
      this->Vertex_.set (std::move (x));
    }


    // AngleFromCharacteristicMeasurementType
    //

    const AngleFromCharacteristicMeasurementType::AnalysisVector_optional& AngleFromCharacteristicMeasurementType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleFromCharacteristicMeasurementType::AnalysisVector_optional& AngleFromCharacteristicMeasurementType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleFromCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleFromCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleFromCharacteristicMeasurementType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }

    const AngleFromCharacteristicMeasurementType::Vertex_optional& AngleFromCharacteristicMeasurementType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleFromCharacteristicMeasurementType::Vertex_optional& AngleFromCharacteristicMeasurementType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleFromCharacteristicMeasurementType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleFromCharacteristicMeasurementType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleFromCharacteristicMeasurementType::
    Vertex (::std::unique_ptr< Vertex_type > x)
    {
      this->Vertex_.set (std::move (x));
    }


    // AngleBetweenCharacteristicItemType
    //


    // AngleBetweenCharacteristicDefinitionType
    //


    // AngleBetweenCharacteristicNominalType
    //

    const AngleBetweenCharacteristicNominalType::FeatureNominalPairs_optional& AngleBetweenCharacteristicNominalType::
    FeatureNominalPairs () const
    {
      return this->FeatureNominalPairs_;
    }

    AngleBetweenCharacteristicNominalType::FeatureNominalPairs_optional& AngleBetweenCharacteristicNominalType::
    FeatureNominalPairs ()
    {
      return this->FeatureNominalPairs_;
    }

    void AngleBetweenCharacteristicNominalType::
    FeatureNominalPairs (const FeatureNominalPairs_type& x)
    {
      this->FeatureNominalPairs_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    FeatureNominalPairs (const FeatureNominalPairs_optional& x)
    {
      this->FeatureNominalPairs_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    FeatureNominalPairs (::std::unique_ptr< FeatureNominalPairs_type > x)
    {
      this->FeatureNominalPairs_.set (std::move (x));
    }

    const AngleBetweenCharacteristicNominalType::AnalysisVector_optional& AngleBetweenCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleBetweenCharacteristicNominalType::AnalysisVector_optional& AngleBetweenCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }

    const AngleBetweenCharacteristicNominalType::AnalysisMode_type& AngleBetweenCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    AngleBetweenCharacteristicNominalType::AnalysisMode_type& AngleBetweenCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisMode (::std::unique_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (std::move (x));
    }

    const AngleBetweenCharacteristicNominalType::CoordinateSystemId_optional& AngleBetweenCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    AngleBetweenCharacteristicNominalType::CoordinateSystemId_optional& AngleBetweenCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void AngleBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    CoordinateSystemId (::std::unique_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (std::move (x));
    }

    const AngleBetweenCharacteristicNominalType::MeasurementDirective_optional& AngleBetweenCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    AngleBetweenCharacteristicNominalType::MeasurementDirective_optional& AngleBetweenCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void AngleBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    MeasurementDirective (::std::unique_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (std::move (x));
    }

    const AngleBetweenCharacteristicNominalType::Vertex_optional& AngleBetweenCharacteristicNominalType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleBetweenCharacteristicNominalType::Vertex_optional& AngleBetweenCharacteristicNominalType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleBetweenCharacteristicNominalType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    Vertex (::std::unique_ptr< Vertex_type > x)
    {
      this->Vertex_.set (std::move (x));
    }


    // AngleBetweenCharacteristicMeasurementType
    //

    const AngleBetweenCharacteristicMeasurementType::AnalysisVector_optional& AngleBetweenCharacteristicMeasurementType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleBetweenCharacteristicMeasurementType::AnalysisVector_optional& AngleBetweenCharacteristicMeasurementType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleBetweenCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleBetweenCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleBetweenCharacteristicMeasurementType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }

    const AngleBetweenCharacteristicMeasurementType::Vertex_optional& AngleBetweenCharacteristicMeasurementType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleBetweenCharacteristicMeasurementType::Vertex_optional& AngleBetweenCharacteristicMeasurementType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleBetweenCharacteristicMeasurementType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleBetweenCharacteristicMeasurementType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleBetweenCharacteristicMeasurementType::
    Vertex (::std::unique_ptr< Vertex_type > x)
    {
      this->Vertex_.set (std::move (x));
    }


    // LinearCoordinateCharacteristicItemType
    //


    // LinearCoordinateCharacteristicDefinitionType
    //

    const LinearCoordinateCharacteristicDefinitionType::Tolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    LinearCoordinateCharacteristicDefinitionType::Tolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void LinearCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const LinearCoordinateCharacteristicDefinitionType::NonTolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    LinearCoordinateCharacteristicDefinitionType::NonTolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void LinearCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // LinearCoordinateCharacteristicNominalType
    //

    const LinearCoordinateCharacteristicNominalType::TargetValue_optional& LinearCoordinateCharacteristicNominalType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    LinearCoordinateCharacteristicNominalType::TargetValue_optional& LinearCoordinateCharacteristicNominalType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void LinearCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void LinearCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void LinearCoordinateCharacteristicNominalType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }

    const LinearCoordinateCharacteristicNominalType::Direction_type& LinearCoordinateCharacteristicNominalType::
    Direction () const
    {
      return this->Direction_.get ();
    }

    LinearCoordinateCharacteristicNominalType::Direction_type& LinearCoordinateCharacteristicNominalType::
    Direction ()
    {
      return this->Direction_.get ();
    }

    void LinearCoordinateCharacteristicNominalType::
    Direction (const Direction_type& x)
    {
      this->Direction_.set (x);
    }

    void LinearCoordinateCharacteristicNominalType::
    Direction (::std::unique_ptr< Direction_type > x)
    {
      this->Direction_.set (std::move (x));
    }

    const LinearCoordinateCharacteristicNominalType::CoordinateSystemId_optional& LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    LinearCoordinateCharacteristicNominalType::CoordinateSystemId_optional& LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId (::std::unique_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (std::move (x));
    }


    // LinearCoordinateCharacteristicMeasurementType
    //

    const LinearCoordinateCharacteristicMeasurementType::Value_optional& LinearCoordinateCharacteristicMeasurementType::
    Value () const
    {
      return this->Value_;
    }

    LinearCoordinateCharacteristicMeasurementType::Value_optional& LinearCoordinateCharacteristicMeasurementType::
    Value ()
    {
      return this->Value_;
    }

    void LinearCoordinateCharacteristicMeasurementType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void LinearCoordinateCharacteristicMeasurementType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void LinearCoordinateCharacteristicMeasurementType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const LinearCoordinateCharacteristicMeasurementType::MaxValue_optional& LinearCoordinateCharacteristicMeasurementType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    LinearCoordinateCharacteristicMeasurementType::MaxValue_optional& LinearCoordinateCharacteristicMeasurementType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void LinearCoordinateCharacteristicMeasurementType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void LinearCoordinateCharacteristicMeasurementType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void LinearCoordinateCharacteristicMeasurementType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const LinearCoordinateCharacteristicMeasurementType::MinValue_optional& LinearCoordinateCharacteristicMeasurementType::
    MinValue () const
    {
      return this->MinValue_;
    }

    LinearCoordinateCharacteristicMeasurementType::MinValue_optional& LinearCoordinateCharacteristicMeasurementType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void LinearCoordinateCharacteristicMeasurementType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void LinearCoordinateCharacteristicMeasurementType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void LinearCoordinateCharacteristicMeasurementType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // AngularCoordinateCharacteristicItemType
    //


    // AngularCoordinateCharacteristicDefinitionType
    //

    const AngularCoordinateCharacteristicDefinitionType::Tolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    AngularCoordinateCharacteristicDefinitionType::Tolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void AngularCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const AngularCoordinateCharacteristicDefinitionType::NonTolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    AngularCoordinateCharacteristicDefinitionType::NonTolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void AngularCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // AngularCoordinateCharacteristicNominalType
    //

    const AngularCoordinateCharacteristicNominalType::TargetValue_optional& AngularCoordinateCharacteristicNominalType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    AngularCoordinateCharacteristicNominalType::TargetValue_optional& AngularCoordinateCharacteristicNominalType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void AngularCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void AngularCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void AngularCoordinateCharacteristicNominalType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }

    const AngularCoordinateCharacteristicNominalType::Direction_type& AngularCoordinateCharacteristicNominalType::
    Direction () const
    {
      return this->Direction_.get ();
    }

    AngularCoordinateCharacteristicNominalType::Direction_type& AngularCoordinateCharacteristicNominalType::
    Direction ()
    {
      return this->Direction_.get ();
    }

    void AngularCoordinateCharacteristicNominalType::
    Direction (const Direction_type& x)
    {
      this->Direction_.set (x);
    }

    void AngularCoordinateCharacteristicNominalType::
    Direction (::std::unique_ptr< Direction_type > x)
    {
      this->Direction_.set (std::move (x));
    }

    const AngularCoordinateCharacteristicNominalType::CoordinateSystemId_optional& AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    AngularCoordinateCharacteristicNominalType::CoordinateSystemId_optional& AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId (::std::unique_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (std::move (x));
    }


    // AngularCoordinateCharacteristicMeasurementType
    //

    const AngularCoordinateCharacteristicMeasurementType::Value_optional& AngularCoordinateCharacteristicMeasurementType::
    Value () const
    {
      return this->Value_;
    }

    AngularCoordinateCharacteristicMeasurementType::Value_optional& AngularCoordinateCharacteristicMeasurementType::
    Value ()
    {
      return this->Value_;
    }

    void AngularCoordinateCharacteristicMeasurementType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void AngularCoordinateCharacteristicMeasurementType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void AngularCoordinateCharacteristicMeasurementType::
    Value (::std::unique_ptr< Value_type > x)
    {
      this->Value_.set (std::move (x));
    }

    const AngularCoordinateCharacteristicMeasurementType::MaxValue_optional& AngularCoordinateCharacteristicMeasurementType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    AngularCoordinateCharacteristicMeasurementType::MaxValue_optional& AngularCoordinateCharacteristicMeasurementType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void AngularCoordinateCharacteristicMeasurementType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void AngularCoordinateCharacteristicMeasurementType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void AngularCoordinateCharacteristicMeasurementType::
    MaxValue (::std::unique_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (std::move (x));
    }

    const AngularCoordinateCharacteristicMeasurementType::MinValue_optional& AngularCoordinateCharacteristicMeasurementType::
    MinValue () const
    {
      return this->MinValue_;
    }

    AngularCoordinateCharacteristicMeasurementType::MinValue_optional& AngularCoordinateCharacteristicMeasurementType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void AngularCoordinateCharacteristicMeasurementType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void AngularCoordinateCharacteristicMeasurementType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void AngularCoordinateCharacteristicMeasurementType::
    MinValue (::std::unique_ptr< MinValue_type > x)
    {
      this->MinValue_.set (std::move (x));
    }


    // CurveLengthCharacteristicItemType
    //


    // CurveLengthCharacteristicDefinitionType
    //


    // CurveLengthCharacteristicNominalType
    //


    // CurveLengthCharacteristicMeasurementType
    //


    // DiameterCharacteristicItemType
    //


    // DiameterCharacteristicDefinitionType
    //

    const DiameterCharacteristicDefinitionType::Tolerance_optional& DiameterCharacteristicDefinitionType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    DiameterCharacteristicDefinitionType::Tolerance_optional& DiameterCharacteristicDefinitionType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void DiameterCharacteristicDefinitionType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void DiameterCharacteristicDefinitionType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void DiameterCharacteristicDefinitionType::
    Tolerance (::std::unique_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (std::move (x));
    }

    const DiameterCharacteristicDefinitionType::LimitsAndFitsSpecification_optional& DiameterCharacteristicDefinitionType::
    LimitsAndFitsSpecification () const
    {
      return this->LimitsAndFitsSpecification_;
    }

    DiameterCharacteristicDefinitionType::LimitsAndFitsSpecification_optional& DiameterCharacteristicDefinitionType::
    LimitsAndFitsSpecification ()
    {
      return this->LimitsAndFitsSpecification_;
    }

    void DiameterCharacteristicDefinitionType::
    LimitsAndFitsSpecification (const LimitsAndFitsSpecification_type& x)
    {
      this->LimitsAndFitsSpecification_.set (x);
    }

    void DiameterCharacteristicDefinitionType::
    LimitsAndFitsSpecification (const LimitsAndFitsSpecification_optional& x)
    {
      this->LimitsAndFitsSpecification_ = x;
    }

    void DiameterCharacteristicDefinitionType::
    LimitsAndFitsSpecification (::std::unique_ptr< LimitsAndFitsSpecification_type > x)
    {
      this->LimitsAndFitsSpecification_.set (std::move (x));
    }

    const DiameterCharacteristicDefinitionType::NonTolerance_optional& DiameterCharacteristicDefinitionType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    DiameterCharacteristicDefinitionType::NonTolerance_optional& DiameterCharacteristicDefinitionType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void DiameterCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void DiameterCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void DiameterCharacteristicDefinitionType::
    NonTolerance (::std::unique_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (std::move (x));
    }


    // DiameterCharacteristicNominalType
    //


    // DiameterCharacteristicMeasurementType
    //


    // SphericalDiameterCharacteristicItemType
    //


    // SphericalDiameterCharacteristicDefinitionType
    //


    // SphericalDiameterCharacteristicNominalType
    //


    // SphericalDiameterCharacteristicMeasurementType
    //


    // LengthCharacteristicItemType
    //


    // LengthCharacteristicDefinitionType
    //


    // LengthCharacteristicNominalType
    //


    // LengthCharacteristicMeasurementType
    //


    // WidthCharacteristicItemType
    //


    // WidthCharacteristicDefinitionType
    //


    // WidthCharacteristicNominalType
    //


    // WidthCharacteristicMeasurementType
    //


    // HeightCharacteristicItemType
    //


    // HeightCharacteristicDefinitionType
    //


    // HeightCharacteristicNominalType
    //


    // HeightCharacteristicMeasurementType
    //


    // DepthCharacteristicItemType
    //


    // DepthCharacteristicDefinitionType
    //


    // DepthCharacteristicNominalType
    //


    // DepthCharacteristicMeasurementType
    //


    // ThicknessCharacteristicItemType
    //


    // ThicknessCharacteristicDefinitionType
    //


    // ThicknessCharacteristicNominalType
    //


    // ThicknessCharacteristicMeasurementType
    //


    // SquareCharacteristicItemType
    //


    // SquareCharacteristicDefinitionType
    //


    // SquareCharacteristicNominalType
    //


    // SquareCharacteristicMeasurementType
    //


    // DistanceFromCharacteristicItemType
    //


    // DistanceFromCharacteristicDefinitionType
    //


    // DistanceFromCharacteristicNominalType
    //

    const DistanceFromCharacteristicNominalType::OriginReference_optional& DistanceFromCharacteristicNominalType::
    OriginReference () const
    {
      return this->OriginReference_;
    }

    DistanceFromCharacteristicNominalType::OriginReference_optional& DistanceFromCharacteristicNominalType::
    OriginReference ()
    {
      return this->OriginReference_;
    }

    void DistanceFromCharacteristicNominalType::
    OriginReference (const OriginReference_type& x)
    {
      this->OriginReference_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    OriginReference (const OriginReference_optional& x)
    {
      this->OriginReference_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    OriginReference (::std::unique_ptr< OriginReference_type > x)
    {
      this->OriginReference_.set (std::move (x));
    }

    const DistanceFromCharacteristicNominalType::AnalysisVector_optional& DistanceFromCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceFromCharacteristicNominalType::AnalysisVector_optional& DistanceFromCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }

    const DistanceFromCharacteristicNominalType::AnalysisMode_type& DistanceFromCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    DistanceFromCharacteristicNominalType::AnalysisMode_type& DistanceFromCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisMode (::std::unique_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (std::move (x));
    }

    const DistanceFromCharacteristicNominalType::MeasurementDirective_optional& DistanceFromCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    DistanceFromCharacteristicNominalType::MeasurementDirective_optional& DistanceFromCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void DistanceFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    MeasurementDirective (::std::unique_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (std::move (x));
    }

    const DistanceFromCharacteristicNominalType::CoordinateSystemId_optional& DistanceFromCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    DistanceFromCharacteristicNominalType::CoordinateSystemId_optional& DistanceFromCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void DistanceFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    CoordinateSystemId (::std::unique_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (std::move (x));
    }


    // DistanceFromCharacteristicMeasurementType
    //

    const DistanceFromCharacteristicMeasurementType::AnalysisVector_optional& DistanceFromCharacteristicMeasurementType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceFromCharacteristicMeasurementType::AnalysisVector_optional& DistanceFromCharacteristicMeasurementType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceFromCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceFromCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceFromCharacteristicMeasurementType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }


    // DistanceBetweenCharacteristicItemType
    //


    // DistanceBetweenCharacteristicDefinitionType
    //


    // DistanceBetweenCharacteristicNominalType
    //

    const DistanceBetweenCharacteristicNominalType::FeatureNominalPairs_optional& DistanceBetweenCharacteristicNominalType::
    FeatureNominalPairs () const
    {
      return this->FeatureNominalPairs_;
    }

    DistanceBetweenCharacteristicNominalType::FeatureNominalPairs_optional& DistanceBetweenCharacteristicNominalType::
    FeatureNominalPairs ()
    {
      return this->FeatureNominalPairs_;
    }

    void DistanceBetweenCharacteristicNominalType::
    FeatureNominalPairs (const FeatureNominalPairs_type& x)
    {
      this->FeatureNominalPairs_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    FeatureNominalPairs (const FeatureNominalPairs_optional& x)
    {
      this->FeatureNominalPairs_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    FeatureNominalPairs (::std::unique_ptr< FeatureNominalPairs_type > x)
    {
      this->FeatureNominalPairs_.set (std::move (x));
    }

    const DistanceBetweenCharacteristicNominalType::AnalysisVector_optional& DistanceBetweenCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceBetweenCharacteristicNominalType::AnalysisVector_optional& DistanceBetweenCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }

    const DistanceBetweenCharacteristicNominalType::AnalysisMode_type& DistanceBetweenCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    DistanceBetweenCharacteristicNominalType::AnalysisMode_type& DistanceBetweenCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisMode (::std::unique_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (std::move (x));
    }

    const DistanceBetweenCharacteristicNominalType::MeasurementDirective_optional& DistanceBetweenCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    DistanceBetweenCharacteristicNominalType::MeasurementDirective_optional& DistanceBetweenCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void DistanceBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    MeasurementDirective (::std::unique_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (std::move (x));
    }

    const DistanceBetweenCharacteristicNominalType::CoordinateSystemId_optional& DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    DistanceBetweenCharacteristicNominalType::CoordinateSystemId_optional& DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId (::std::unique_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (std::move (x));
    }


    // DistanceBetweenCharacteristicMeasurementType
    //

    const DistanceBetweenCharacteristicMeasurementType::AnalysisVector_optional& DistanceBetweenCharacteristicMeasurementType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceBetweenCharacteristicMeasurementType::AnalysisVector_optional& DistanceBetweenCharacteristicMeasurementType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceBetweenCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceBetweenCharacteristicMeasurementType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceBetweenCharacteristicMeasurementType::
    AnalysisVector (::std::unique_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (std::move (x));
    }


    // RadiusCharacteristicItemType
    //


    // RadiusCharacteristicDefinitionType
    //

    const RadiusCharacteristicDefinitionType::ControlledRadius_optional& RadiusCharacteristicDefinitionType::
    ControlledRadius () const
    {
      return this->ControlledRadius_;
    }

    RadiusCharacteristicDefinitionType::ControlledRadius_optional& RadiusCharacteristicDefinitionType::
    ControlledRadius ()
    {
      return this->ControlledRadius_;
    }

    void RadiusCharacteristicDefinitionType::
    ControlledRadius (const ControlledRadius_type& x)
    {
      this->ControlledRadius_.set (x);
    }

    void RadiusCharacteristicDefinitionType::
    ControlledRadius (const ControlledRadius_optional& x)
    {
      this->ControlledRadius_ = x;
    }


    // RadiusCharacteristicNominalType
    //


    // RadiusCharacteristicMeasurementType
    //


    // SphericalRadiusCharacteristicItemType
    //


    // SphericalRadiusCharacteristicDefinitionType
    //


    // SphericalRadiusCharacteristicNominalType
    //


    // SphericalRadiusCharacteristicMeasurementType
    //


    // ChordCharacteristicItemType
    //


    // ChordCharacteristicDefinitionType
    //


    // ChordCharacteristicNominalType
    //


    // ChordCharacteristicMeasurementType
    //


    // ConicalTaperCharacteristicItemType
    //


    // ConicalTaperCharacteristicDefinitionType
    //


    // ConicalTaperCharacteristicNominalType
    //

    const ConicalTaperCharacteristicNominalType::Distance_type& ConicalTaperCharacteristicNominalType::
    Distance () const
    {
      return this->Distance_.get ();
    }

    ConicalTaperCharacteristicNominalType::Distance_type& ConicalTaperCharacteristicNominalType::
    Distance ()
    {
      return this->Distance_.get ();
    }

    void ConicalTaperCharacteristicNominalType::
    Distance (const Distance_type& x)
    {
      this->Distance_.set (x);
    }

    void ConicalTaperCharacteristicNominalType::
    Distance (::std::unique_ptr< Distance_type > x)
    {
      this->Distance_.set (std::move (x));
    }


    // ConicalTaperCharacteristicMeasurementType
    //

    const ConicalTaperCharacteristicMeasurementType::Distance_optional& ConicalTaperCharacteristicMeasurementType::
    Distance () const
    {
      return this->Distance_;
    }

    ConicalTaperCharacteristicMeasurementType::Distance_optional& ConicalTaperCharacteristicMeasurementType::
    Distance ()
    {
      return this->Distance_;
    }

    void ConicalTaperCharacteristicMeasurementType::
    Distance (const Distance_type& x)
    {
      this->Distance_.set (x);
    }

    void ConicalTaperCharacteristicMeasurementType::
    Distance (const Distance_optional& x)
    {
      this->Distance_ = x;
    }

    void ConicalTaperCharacteristicMeasurementType::
    Distance (::std::unique_ptr< Distance_type > x)
    {
      this->Distance_.set (std::move (x));
    }


    // FlatTaperCharacteristicItemType
    //


    // FlatTaperCharacteristicDefinitionType
    //


    // FlatTaperCharacteristicNominalType
    //

    const FlatTaperCharacteristicNominalType::Distance_type& FlatTaperCharacteristicNominalType::
    Distance () const
    {
      return this->Distance_.get ();
    }

    FlatTaperCharacteristicNominalType::Distance_type& FlatTaperCharacteristicNominalType::
    Distance ()
    {
      return this->Distance_.get ();
    }

    void FlatTaperCharacteristicNominalType::
    Distance (const Distance_type& x)
    {
      this->Distance_.set (x);
    }

    void FlatTaperCharacteristicNominalType::
    Distance (::std::unique_ptr< Distance_type > x)
    {
      this->Distance_.set (std::move (x));
    }


    // FlatTaperCharacteristicMeasurementType
    //

    const FlatTaperCharacteristicMeasurementType::Distance_optional& FlatTaperCharacteristicMeasurementType::
    Distance () const
    {
      return this->Distance_;
    }

    FlatTaperCharacteristicMeasurementType::Distance_optional& FlatTaperCharacteristicMeasurementType::
    Distance ()
    {
      return this->Distance_;
    }

    void FlatTaperCharacteristicMeasurementType::
    Distance (const Distance_type& x)
    {
      this->Distance_.set (x);
    }

    void FlatTaperCharacteristicMeasurementType::
    Distance (const Distance_optional& x)
    {
      this->Distance_ = x;
    }

    void FlatTaperCharacteristicMeasurementType::
    Distance (::std::unique_ptr< Distance_type > x)
    {
      this->Distance_.set (std::move (x));
    }


    // RunoutCharacteristicItemBaseType
    //


    // RunoutCharacteristicDefinitionBaseType
    //

    const RunoutCharacteristicDefinitionBaseType::ToleranceValue_type& RunoutCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    RunoutCharacteristicDefinitionBaseType::ToleranceValue_type& RunoutCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void RunoutCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void RunoutCharacteristicDefinitionBaseType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const RunoutCharacteristicDefinitionBaseType::ToleranceDualValue_optional& RunoutCharacteristicDefinitionBaseType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    RunoutCharacteristicDefinitionBaseType::ToleranceDualValue_optional& RunoutCharacteristicDefinitionBaseType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void RunoutCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void RunoutCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void RunoutCharacteristicDefinitionBaseType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const RunoutCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_;
    }

    RunoutCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_;
    }

    void RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_optional& x)
    {
      this->DatumReferenceFrameId_ = x;
    }

    void RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::unique_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (std::move (x));
    }


    // RunoutCharacteristicNominalBaseType
    //


    // RunoutCharacteristicMeasurementBaseType
    //

    const RunoutCharacteristicMeasurementBaseType::DatumsOk_optional& RunoutCharacteristicMeasurementBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    RunoutCharacteristicMeasurementBaseType::DatumsOk_optional& RunoutCharacteristicMeasurementBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void RunoutCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void RunoutCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }


    // CircularRunoutCharacteristicItemType
    //


    // CircularRunoutCharacteristicDefinitionType
    //


    // CircularRunoutCharacteristicNominalType
    //

    const CircularRunoutCharacteristicNominalType::ZoneDirection_optional& CircularRunoutCharacteristicNominalType::
    ZoneDirection () const
    {
      return this->ZoneDirection_;
    }

    CircularRunoutCharacteristicNominalType::ZoneDirection_optional& CircularRunoutCharacteristicNominalType::
    ZoneDirection ()
    {
      return this->ZoneDirection_;
    }

    void CircularRunoutCharacteristicNominalType::
    ZoneDirection (const ZoneDirection_type& x)
    {
      this->ZoneDirection_.set (x);
    }

    void CircularRunoutCharacteristicNominalType::
    ZoneDirection (const ZoneDirection_optional& x)
    {
      this->ZoneDirection_ = x;
    }

    void CircularRunoutCharacteristicNominalType::
    ZoneDirection (::std::unique_ptr< ZoneDirection_type > x)
    {
      this->ZoneDirection_.set (std::move (x));
    }

    const CircularRunoutCharacteristicNominalType::ProfileCurveId_optional& CircularRunoutCharacteristicNominalType::
    ProfileCurveId () const
    {
      return this->ProfileCurveId_;
    }

    CircularRunoutCharacteristicNominalType::ProfileCurveId_optional& CircularRunoutCharacteristicNominalType::
    ProfileCurveId ()
    {
      return this->ProfileCurveId_;
    }

    void CircularRunoutCharacteristicNominalType::
    ProfileCurveId (const ProfileCurveId_type& x)
    {
      this->ProfileCurveId_.set (x);
    }

    void CircularRunoutCharacteristicNominalType::
    ProfileCurveId (const ProfileCurveId_optional& x)
    {
      this->ProfileCurveId_ = x;
    }

    void CircularRunoutCharacteristicNominalType::
    ProfileCurveId (::std::unique_ptr< ProfileCurveId_type > x)
    {
      this->ProfileCurveId_.set (std::move (x));
    }


    // CircularRunoutCharacteristicMeasurementType
    //


    // TotalRunoutCharacteristicItemType
    //


    // TotalRunoutCharacteristicDefinitionType
    //


    // TotalRunoutCharacteristicNominalType
    //


    // TotalRunoutCharacteristicMeasurementType
    //


    // CoaxialityDiametricalZoneType
    //


    // CoaxialityNonDiametricalZoneType
    //


    // CoaxialityZoneShapeType
    //

    const CoaxialityZoneShapeType::DiametricalZone_optional& CoaxialityZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    CoaxialityZoneShapeType::DiametricalZone_optional& CoaxialityZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void CoaxialityZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void CoaxialityZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void CoaxialityZoneShapeType::
    DiametricalZone (::std::unique_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (std::move (x));
    }

    const CoaxialityZoneShapeType::NonDiametricalZone_optional& CoaxialityZoneShapeType::
    NonDiametricalZone () const
    {
      return this->NonDiametricalZone_;
    }

    CoaxialityZoneShapeType::NonDiametricalZone_optional& CoaxialityZoneShapeType::
    NonDiametricalZone ()
    {
      return this->NonDiametricalZone_;
    }

    void CoaxialityZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_type& x)
    {
      this->NonDiametricalZone_.set (x);
    }

    void CoaxialityZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_optional& x)
    {
      this->NonDiametricalZone_ = x;
    }

    void CoaxialityZoneShapeType::
    NonDiametricalZone (::std::unique_ptr< NonDiametricalZone_type > x)
    {
      this->NonDiametricalZone_.set (std::move (x));
    }


    // CoaxialityCharacteristicItemType
    //


    // CoaxialityCharacteristicDefinitionType
    //

    const CoaxialityCharacteristicDefinitionType::ZoneShape_type& CoaxialityCharacteristicDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    CoaxialityCharacteristicDefinitionType::ZoneShape_type& CoaxialityCharacteristicDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void CoaxialityCharacteristicDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void CoaxialityCharacteristicDefinitionType::
    ZoneShape (::std::unique_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (std::move (x));
    }


    // CoaxialityCharacteristicNominalType
    //


    // CoaxialityCharacteristicMeasurementType
    //


    // ConcentricitySphericalZoneType
    //


    // ConcentricityDiametricalZoneType
    //


    // ConcentricityNonDiametricalZoneType
    //


    // ConcentricityZoneShapeType
    //

    const ConcentricityZoneShapeType::SphericalZone_optional& ConcentricityZoneShapeType::
    SphericalZone () const
    {
      return this->SphericalZone_;
    }

    ConcentricityZoneShapeType::SphericalZone_optional& ConcentricityZoneShapeType::
    SphericalZone ()
    {
      return this->SphericalZone_;
    }

    void ConcentricityZoneShapeType::
    SphericalZone (const SphericalZone_type& x)
    {
      this->SphericalZone_.set (x);
    }

    void ConcentricityZoneShapeType::
    SphericalZone (const SphericalZone_optional& x)
    {
      this->SphericalZone_ = x;
    }

    void ConcentricityZoneShapeType::
    SphericalZone (::std::unique_ptr< SphericalZone_type > x)
    {
      this->SphericalZone_.set (std::move (x));
    }

    const ConcentricityZoneShapeType::DiametricalZone_optional& ConcentricityZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    ConcentricityZoneShapeType::DiametricalZone_optional& ConcentricityZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void ConcentricityZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void ConcentricityZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void ConcentricityZoneShapeType::
    DiametricalZone (::std::unique_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (std::move (x));
    }

    const ConcentricityZoneShapeType::NonDiametricalZone_optional& ConcentricityZoneShapeType::
    NonDiametricalZone () const
    {
      return this->NonDiametricalZone_;
    }

    ConcentricityZoneShapeType::NonDiametricalZone_optional& ConcentricityZoneShapeType::
    NonDiametricalZone ()
    {
      return this->NonDiametricalZone_;
    }

    void ConcentricityZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_type& x)
    {
      this->NonDiametricalZone_.set (x);
    }

    void ConcentricityZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_optional& x)
    {
      this->NonDiametricalZone_ = x;
    }

    void ConcentricityZoneShapeType::
    NonDiametricalZone (::std::unique_ptr< NonDiametricalZone_type > x)
    {
      this->NonDiametricalZone_.set (std::move (x));
    }


    // ConcentricityCharacteristicItemType
    //


    // ConcentricityCharacteristicDefinitionType
    //

    const ConcentricityCharacteristicDefinitionType::ZoneShape_type& ConcentricityCharacteristicDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    ConcentricityCharacteristicDefinitionType::ZoneShape_type& ConcentricityCharacteristicDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void ConcentricityCharacteristicDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void ConcentricityCharacteristicDefinitionType::
    ZoneShape (::std::unique_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (std::move (x));
    }


    // ConcentricityCharacteristicNominalType
    //


    // ConcentricityCharacteristicMeasurementType
    //


    // SymmetryCharacteristicItemType
    //


    // SymmetryCharacteristicDefinitionType
    //

    const SymmetryCharacteristicDefinitionType::SecondCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition () const
    {
      return this->SecondCompositeSegmentSymmetryDefinition_;
    }

    SymmetryCharacteristicDefinitionType::SecondCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition ()
    {
      return this->SecondCompositeSegmentSymmetryDefinition_;
    }

    void SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition (const SecondCompositeSegmentSymmetryDefinition_type& x)
    {
      this->SecondCompositeSegmentSymmetryDefinition_.set (x);
    }

    void SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition (const SecondCompositeSegmentSymmetryDefinition_optional& x)
    {
      this->SecondCompositeSegmentSymmetryDefinition_ = x;
    }

    void SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition (::std::unique_ptr< SecondCompositeSegmentSymmetryDefinition_type > x)
    {
      this->SecondCompositeSegmentSymmetryDefinition_.set (std::move (x));
    }

    const SymmetryCharacteristicDefinitionType::ThirdCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition () const
    {
      return this->ThirdCompositeSegmentSymmetryDefinition_;
    }

    SymmetryCharacteristicDefinitionType::ThirdCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition ()
    {
      return this->ThirdCompositeSegmentSymmetryDefinition_;
    }

    void SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition (const ThirdCompositeSegmentSymmetryDefinition_type& x)
    {
      this->ThirdCompositeSegmentSymmetryDefinition_.set (x);
    }

    void SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition (const ThirdCompositeSegmentSymmetryDefinition_optional& x)
    {
      this->ThirdCompositeSegmentSymmetryDefinition_ = x;
    }

    void SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition (::std::unique_ptr< ThirdCompositeSegmentSymmetryDefinition_type > x)
    {
      this->ThirdCompositeSegmentSymmetryDefinition_.set (std::move (x));
    }


    // SymmetryCharacteristicNominalType
    //


    // SymmetryCharacteristicMeasurementType
    //

    const SymmetryCharacteristicMeasurementType::SecondCompositeSegmentSymmetryMeasurement_optional& SymmetryCharacteristicMeasurementType::
    SecondCompositeSegmentSymmetryMeasurement () const
    {
      return this->SecondCompositeSegmentSymmetryMeasurement_;
    }

    SymmetryCharacteristicMeasurementType::SecondCompositeSegmentSymmetryMeasurement_optional& SymmetryCharacteristicMeasurementType::
    SecondCompositeSegmentSymmetryMeasurement ()
    {
      return this->SecondCompositeSegmentSymmetryMeasurement_;
    }

    void SymmetryCharacteristicMeasurementType::
    SecondCompositeSegmentSymmetryMeasurement (const SecondCompositeSegmentSymmetryMeasurement_type& x)
    {
      this->SecondCompositeSegmentSymmetryMeasurement_.set (x);
    }

    void SymmetryCharacteristicMeasurementType::
    SecondCompositeSegmentSymmetryMeasurement (const SecondCompositeSegmentSymmetryMeasurement_optional& x)
    {
      this->SecondCompositeSegmentSymmetryMeasurement_ = x;
    }

    void SymmetryCharacteristicMeasurementType::
    SecondCompositeSegmentSymmetryMeasurement (::std::unique_ptr< SecondCompositeSegmentSymmetryMeasurement_type > x)
    {
      this->SecondCompositeSegmentSymmetryMeasurement_.set (std::move (x));
    }

    const SymmetryCharacteristicMeasurementType::ThirdCompositeSegmentSymmetryMeasurement_optional& SymmetryCharacteristicMeasurementType::
    ThirdCompositeSegmentSymmetryMeasurement () const
    {
      return this->ThirdCompositeSegmentSymmetryMeasurement_;
    }

    SymmetryCharacteristicMeasurementType::ThirdCompositeSegmentSymmetryMeasurement_optional& SymmetryCharacteristicMeasurementType::
    ThirdCompositeSegmentSymmetryMeasurement ()
    {
      return this->ThirdCompositeSegmentSymmetryMeasurement_;
    }

    void SymmetryCharacteristicMeasurementType::
    ThirdCompositeSegmentSymmetryMeasurement (const ThirdCompositeSegmentSymmetryMeasurement_type& x)
    {
      this->ThirdCompositeSegmentSymmetryMeasurement_.set (x);
    }

    void SymmetryCharacteristicMeasurementType::
    ThirdCompositeSegmentSymmetryMeasurement (const ThirdCompositeSegmentSymmetryMeasurement_optional& x)
    {
      this->ThirdCompositeSegmentSymmetryMeasurement_ = x;
    }

    void SymmetryCharacteristicMeasurementType::
    ThirdCompositeSegmentSymmetryMeasurement (::std::unique_ptr< ThirdCompositeSegmentSymmetryMeasurement_type > x)
    {
      this->ThirdCompositeSegmentSymmetryMeasurement_.set (std::move (x));
    }


    // ProfileCharacteristicItemBaseType
    //


    // ProfileCharacteristicDefinitionBaseType
    //

    const ProfileCharacteristicDefinitionBaseType::ToleranceValue_type& ProfileCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    ProfileCharacteristicDefinitionBaseType::ToleranceValue_type& ProfileCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void ProfileCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    ToleranceValue (::std::unique_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::ToleranceDualValue_optional& ProfileCharacteristicDefinitionBaseType::
    ToleranceDualValue () const
    {
      return this->ToleranceDualValue_;
    }

    ProfileCharacteristicDefinitionBaseType::ToleranceDualValue_optional& ProfileCharacteristicDefinitionBaseType::
    ToleranceDualValue ()
    {
      return this->ToleranceDualValue_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_type& x)
    {
      this->ToleranceDualValue_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    ToleranceDualValue (const ToleranceDualValue_optional& x)
    {
      this->ToleranceDualValue_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    ToleranceDualValue (::std::unique_ptr< ToleranceDualValue_type > x)
    {
      this->ToleranceDualValue_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::OuterDisposition_optional& ProfileCharacteristicDefinitionBaseType::
    OuterDisposition () const
    {
      return this->OuterDisposition_;
    }

    ProfileCharacteristicDefinitionBaseType::OuterDisposition_optional& ProfileCharacteristicDefinitionBaseType::
    OuterDisposition ()
    {
      return this->OuterDisposition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OuterDisposition (const OuterDisposition_type& x)
    {
      this->OuterDisposition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    OuterDisposition (const OuterDisposition_optional& x)
    {
      this->OuterDisposition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OuterDisposition (::std::unique_ptr< OuterDisposition_type > x)
    {
      this->OuterDisposition_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::UnequallyDisposedZone_optional& ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone () const
    {
      return this->UnequallyDisposedZone_;
    }

    ProfileCharacteristicDefinitionBaseType::UnequallyDisposedZone_optional& ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone ()
    {
      return this->UnequallyDisposedZone_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone (const UnequallyDisposedZone_type& x)
    {
      this->UnequallyDisposedZone_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone (const UnequallyDisposedZone_optional& x)
    {
      this->UnequallyDisposedZone_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone (::std::unique_ptr< UnequallyDisposedZone_type > x)
    {
      this->UnequallyDisposedZone_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::OffsetZone_optional& ProfileCharacteristicDefinitionBaseType::
    OffsetZone () const
    {
      return this->OffsetZone_;
    }

    ProfileCharacteristicDefinitionBaseType::OffsetZone_optional& ProfileCharacteristicDefinitionBaseType::
    OffsetZone ()
    {
      return this->OffsetZone_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OffsetZone (const OffsetZone_type& x)
    {
      this->OffsetZone_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    OffsetZone (const OffsetZone_optional& x)
    {
      this->OffsetZone_ = x;
    }

    const ProfileCharacteristicDefinitionBaseType::VariableAngle_optional& ProfileCharacteristicDefinitionBaseType::
    VariableAngle () const
    {
      return this->VariableAngle_;
    }

    ProfileCharacteristicDefinitionBaseType::VariableAngle_optional& ProfileCharacteristicDefinitionBaseType::
    VariableAngle ()
    {
      return this->VariableAngle_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    VariableAngle (const VariableAngle_type& x)
    {
      this->VariableAngle_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    VariableAngle (const VariableAngle_optional& x)
    {
      this->VariableAngle_ = x;
    }

    const ProfileCharacteristicDefinitionBaseType::SecondCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition () const
    {
      return this->SecondCompositeSegmentProfileDefinition_;
    }

    ProfileCharacteristicDefinitionBaseType::SecondCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition ()
    {
      return this->SecondCompositeSegmentProfileDefinition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition (const SecondCompositeSegmentProfileDefinition_type& x)
    {
      this->SecondCompositeSegmentProfileDefinition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition (const SecondCompositeSegmentProfileDefinition_optional& x)
    {
      this->SecondCompositeSegmentProfileDefinition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition (::std::unique_ptr< SecondCompositeSegmentProfileDefinition_type > x)
    {
      this->SecondCompositeSegmentProfileDefinition_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::ThirdCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition () const
    {
      return this->ThirdCompositeSegmentProfileDefinition_;
    }

    ProfileCharacteristicDefinitionBaseType::ThirdCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition ()
    {
      return this->ThirdCompositeSegmentProfileDefinition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition (const ThirdCompositeSegmentProfileDefinition_type& x)
    {
      this->ThirdCompositeSegmentProfileDefinition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition (const ThirdCompositeSegmentProfileDefinition_optional& x)
    {
      this->ThirdCompositeSegmentProfileDefinition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition (::std::unique_ptr< ThirdCompositeSegmentProfileDefinition_type > x)
    {
      this->ThirdCompositeSegmentProfileDefinition_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::FourthCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition () const
    {
      return this->FourthCompositeSegmentProfileDefinition_;
    }

    ProfileCharacteristicDefinitionBaseType::FourthCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition ()
    {
      return this->FourthCompositeSegmentProfileDefinition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition (const FourthCompositeSegmentProfileDefinition_type& x)
    {
      this->FourthCompositeSegmentProfileDefinition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition (const FourthCompositeSegmentProfileDefinition_optional& x)
    {
      this->FourthCompositeSegmentProfileDefinition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition (::std::unique_ptr< FourthCompositeSegmentProfileDefinition_type > x)
    {
      this->FourthCompositeSegmentProfileDefinition_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_;
    }

    ProfileCharacteristicDefinitionBaseType::DatumReferenceFrameId_optional& ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_optional& x)
    {
      this->DatumReferenceFrameId_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::unique_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (std::move (x));
    }

    const ProfileCharacteristicDefinitionBaseType::OrientationOnly_optional& ProfileCharacteristicDefinitionBaseType::
    OrientationOnly () const
    {
      return this->OrientationOnly_;
    }

    ProfileCharacteristicDefinitionBaseType::OrientationOnly_optional& ProfileCharacteristicDefinitionBaseType::
    OrientationOnly ()
    {
      return this->OrientationOnly_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OrientationOnly (const OrientationOnly_type& x)
    {
      this->OrientationOnly_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    OrientationOnly (const OrientationOnly_optional& x)
    {
      this->OrientationOnly_ = x;
    }


    // ProfileCharacteristicNominalBaseType
    //

    const ProfileCharacteristicNominalBaseType::TargetValue_optional& ProfileCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    ProfileCharacteristicNominalBaseType::TargetValue_optional& ProfileCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void ProfileCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void ProfileCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void ProfileCharacteristicNominalBaseType::
    TargetValue (::std::unique_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (std::move (x));
    }


    // ProfileCharacteristicMeasurementBaseType
    //

    const ProfileCharacteristicMeasurementBaseType::WorstPositiveDeviation_optional& ProfileCharacteristicMeasurementBaseType::
    WorstPositiveDeviation () const
    {
      return this->WorstPositiveDeviation_;
    }

    ProfileCharacteristicMeasurementBaseType::WorstPositiveDeviation_optional& ProfileCharacteristicMeasurementBaseType::
    WorstPositiveDeviation ()
    {
      return this->WorstPositiveDeviation_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    WorstPositiveDeviation (const WorstPositiveDeviation_type& x)
    {
      this->WorstPositiveDeviation_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    WorstPositiveDeviation (const WorstPositiveDeviation_optional& x)
    {
      this->WorstPositiveDeviation_ = x;
    }

    void ProfileCharacteristicMeasurementBaseType::
    WorstPositiveDeviation (::std::unique_ptr< WorstPositiveDeviation_type > x)
    {
      this->WorstPositiveDeviation_.set (std::move (x));
    }

    const ProfileCharacteristicMeasurementBaseType::WorstNegativeDeviation_optional& ProfileCharacteristicMeasurementBaseType::
    WorstNegativeDeviation () const
    {
      return this->WorstNegativeDeviation_;
    }

    ProfileCharacteristicMeasurementBaseType::WorstNegativeDeviation_optional& ProfileCharacteristicMeasurementBaseType::
    WorstNegativeDeviation ()
    {
      return this->WorstNegativeDeviation_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    WorstNegativeDeviation (const WorstNegativeDeviation_type& x)
    {
      this->WorstNegativeDeviation_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    WorstNegativeDeviation (const WorstNegativeDeviation_optional& x)
    {
      this->WorstNegativeDeviation_ = x;
    }

    void ProfileCharacteristicMeasurementBaseType::
    WorstNegativeDeviation (::std::unique_ptr< WorstNegativeDeviation_type > x)
    {
      this->WorstNegativeDeviation_.set (std::move (x));
    }

    const ProfileCharacteristicMeasurementBaseType::PointDeviations_optional& ProfileCharacteristicMeasurementBaseType::
    PointDeviations () const
    {
      return this->PointDeviations_;
    }

    ProfileCharacteristicMeasurementBaseType::PointDeviations_optional& ProfileCharacteristicMeasurementBaseType::
    PointDeviations ()
    {
      return this->PointDeviations_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    PointDeviations (const PointDeviations_type& x)
    {
      this->PointDeviations_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    PointDeviations (const PointDeviations_optional& x)
    {
      this->PointDeviations_ = x;
    }

    void ProfileCharacteristicMeasurementBaseType::
    PointDeviations (::std::unique_ptr< PointDeviations_type > x)
    {
      this->PointDeviations_.set (std::move (x));
    }

    const ProfileCharacteristicMeasurementBaseType::DatumsOk_optional& ProfileCharacteristicMeasurementBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    ProfileCharacteristicMeasurementBaseType::DatumsOk_optional& ProfileCharacteristicMeasurementBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }

    const ProfileCharacteristicMeasurementBaseType::DRFTransformActualId_optional& ProfileCharacteristicMeasurementBaseType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    ProfileCharacteristicMeasurementBaseType::DRFTransformActualId_optional& ProfileCharacteristicMeasurementBaseType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void ProfileCharacteristicMeasurementBaseType::
    DRFTransformActualId (::std::unique_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (std::move (x));
    }

    const ProfileCharacteristicMeasurementBaseType::SecondCompositeSegmentProfileMeasurement_optional& ProfileCharacteristicMeasurementBaseType::
    SecondCompositeSegmentProfileMeasurement () const
    {
      return this->SecondCompositeSegmentProfileMeasurement_;
    }

    ProfileCharacteristicMeasurementBaseType::SecondCompositeSegmentProfileMeasurement_optional& ProfileCharacteristicMeasurementBaseType::
    SecondCompositeSegmentProfileMeasurement ()
    {
      return this->SecondCompositeSegmentProfileMeasurement_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    SecondCompositeSegmentProfileMeasurement (const SecondCompositeSegmentProfileMeasurement_type& x)
    {
      this->SecondCompositeSegmentProfileMeasurement_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    SecondCompositeSegmentProfileMeasurement (const SecondCompositeSegmentProfileMeasurement_optional& x)
    {
      this->SecondCompositeSegmentProfileMeasurement_ = x;
    }

    void ProfileCharacteristicMeasurementBaseType::
    SecondCompositeSegmentProfileMeasurement (::std::unique_ptr< SecondCompositeSegmentProfileMeasurement_type > x)
    {
      this->SecondCompositeSegmentProfileMeasurement_.set (std::move (x));
    }

    const ProfileCharacteristicMeasurementBaseType::ThirdCompositeSegmentProfileMeasurement_optional& ProfileCharacteristicMeasurementBaseType::
    ThirdCompositeSegmentProfileMeasurement () const
    {
      return this->ThirdCompositeSegmentProfileMeasurement_;
    }

    ProfileCharacteristicMeasurementBaseType::ThirdCompositeSegmentProfileMeasurement_optional& ProfileCharacteristicMeasurementBaseType::
    ThirdCompositeSegmentProfileMeasurement ()
    {
      return this->ThirdCompositeSegmentProfileMeasurement_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    ThirdCompositeSegmentProfileMeasurement (const ThirdCompositeSegmentProfileMeasurement_type& x)
    {
      this->ThirdCompositeSegmentProfileMeasurement_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    ThirdCompositeSegmentProfileMeasurement (const ThirdCompositeSegmentProfileMeasurement_optional& x)
    {
      this->ThirdCompositeSegmentProfileMeasurement_ = x;
    }

    void ProfileCharacteristicMeasurementBaseType::
    ThirdCompositeSegmentProfileMeasurement (::std::unique_ptr< ThirdCompositeSegmentProfileMeasurement_type > x)
    {
      this->ThirdCompositeSegmentProfileMeasurement_.set (std::move (x));
    }

    const ProfileCharacteristicMeasurementBaseType::FourthCompositeSegmentProfileMeasurement_optional& ProfileCharacteristicMeasurementBaseType::
    FourthCompositeSegmentProfileMeasurement () const
    {
      return this->FourthCompositeSegmentProfileMeasurement_;
    }

    ProfileCharacteristicMeasurementBaseType::FourthCompositeSegmentProfileMeasurement_optional& ProfileCharacteristicMeasurementBaseType::
    FourthCompositeSegmentProfileMeasurement ()
    {
      return this->FourthCompositeSegmentProfileMeasurement_;
    }

    void ProfileCharacteristicMeasurementBaseType::
    FourthCompositeSegmentProfileMeasurement (const FourthCompositeSegmentProfileMeasurement_type& x)
    {
      this->FourthCompositeSegmentProfileMeasurement_.set (x);
    }

    void ProfileCharacteristicMeasurementBaseType::
    FourthCompositeSegmentProfileMeasurement (const FourthCompositeSegmentProfileMeasurement_optional& x)
    {
      this->FourthCompositeSegmentProfileMeasurement_ = x;
    }

    void ProfileCharacteristicMeasurementBaseType::
    FourthCompositeSegmentProfileMeasurement (::std::unique_ptr< FourthCompositeSegmentProfileMeasurement_type > x)
    {
      this->FourthCompositeSegmentProfileMeasurement_.set (std::move (x));
    }


    // LineProfileCharacteristicItemType
    //


    // LineProfileCharacteristicDefinitionType
    //

    const LineProfileCharacteristicDefinitionType::Extent_optional& LineProfileCharacteristicDefinitionType::
    Extent () const
    {
      return this->Extent_;
    }

    LineProfileCharacteristicDefinitionType::Extent_optional& LineProfileCharacteristicDefinitionType::
    Extent ()
    {
      return this->Extent_;
    }

    void LineProfileCharacteristicDefinitionType::
    Extent (const Extent_type& x)
    {
      this->Extent_.set (x);
    }

    void LineProfileCharacteristicDefinitionType::
    Extent (const Extent_optional& x)
    {
      this->Extent_ = x;
    }

    void LineProfileCharacteristicDefinitionType::
    Extent (::std::unique_ptr< Extent_type > x)
    {
      this->Extent_.set (std::move (x));
    }


    // LineProfileCharacteristicNominalType
    //

    const LineProfileCharacteristicNominalType::Vector_type& LineProfileCharacteristicNominalType::
    Vector () const
    {
      return this->Vector_.get ();
    }

    LineProfileCharacteristicNominalType::Vector_type& LineProfileCharacteristicNominalType::
    Vector ()
    {
      return this->Vector_.get ();
    }

    void LineProfileCharacteristicNominalType::
    Vector (const Vector_type& x)
    {
      this->Vector_.set (x);
    }

    void LineProfileCharacteristicNominalType::
    Vector (::std::unique_ptr< Vector_type > x)
    {
      this->Vector_.set (std::move (x));
    }

    const LineProfileCharacteristicNominalType::ProfileCurveId_optional& LineProfileCharacteristicNominalType::
    ProfileCurveId () const
    {
      return this->ProfileCurveId_;
    }

    LineProfileCharacteristicNominalType::ProfileCurveId_optional& LineProfileCharacteristicNominalType::
    ProfileCurveId ()
    {
      return this->ProfileCurveId_;
    }

    void LineProfileCharacteristicNominalType::
    ProfileCurveId (const ProfileCurveId_type& x)
    {
      this->ProfileCurveId_.set (x);
    }

    void LineProfileCharacteristicNominalType::
    ProfileCurveId (const ProfileCurveId_optional& x)
    {
      this->ProfileCurveId_ = x;
    }

    void LineProfileCharacteristicNominalType::
    ProfileCurveId (::std::unique_ptr< ProfileCurveId_type > x)
    {
      this->ProfileCurveId_.set (std::move (x));
    }


    // LineProfileCharacteristicMeasurementType
    //


    // PointProfileCharacteristicItemType
    //


    // PointProfileCharacteristicDefinitionType
    //


    // PointProfileCharacteristicNominalType
    //


    // PointProfileCharacteristicMeasurementType
    //


    // SurfaceProfileCharacteristicItemType
    //


    // SurfaceProfileCharacteristicDefinitionType
    //

    const SurfaceProfileCharacteristicDefinitionType::Extent_optional& SurfaceProfileCharacteristicDefinitionType::
    Extent () const
    {
      return this->Extent_;
    }

    SurfaceProfileCharacteristicDefinitionType::Extent_optional& SurfaceProfileCharacteristicDefinitionType::
    Extent ()
    {
      return this->Extent_;
    }

    void SurfaceProfileCharacteristicDefinitionType::
    Extent (const Extent_type& x)
    {
      this->Extent_.set (x);
    }

    void SurfaceProfileCharacteristicDefinitionType::
    Extent (const Extent_optional& x)
    {
      this->Extent_ = x;
    }

    void SurfaceProfileCharacteristicDefinitionType::
    Extent (::std::unique_ptr< Extent_type > x)
    {
      this->Extent_.set (std::move (x));
    }


    // SurfaceProfileCharacteristicNominalType
    //


    // SurfaceProfileCharacteristicMeasurementType
    //


    // SurfaceProfileNonUniformCharacteristicItemType
    //


    // SurfaceProfileNonUniformCharacteristicDefinitionType
    //

    const SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointToleranceValue_type& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue () const
    {
      return this->ToPointToleranceValue_.get ();
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointToleranceValue_type& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue ()
    {
      return this->ToPointToleranceValue_.get ();
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue (const ToPointToleranceValue_type& x)
    {
      this->ToPointToleranceValue_.set (x);
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue (::std::unique_ptr< ToPointToleranceValue_type > x)
    {
      this->ToPointToleranceValue_.set (std::move (x));
    }

    const SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointOuterDisposition_optional& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointOuterDisposition () const
    {
      return this->ToPointOuterDisposition_;
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointOuterDisposition_optional& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointOuterDisposition ()
    {
      return this->ToPointOuterDisposition_;
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointOuterDisposition (const ToPointOuterDisposition_type& x)
    {
      this->ToPointOuterDisposition_.set (x);
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointOuterDisposition (const ToPointOuterDisposition_optional& x)
    {
      this->ToPointOuterDisposition_ = x;
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointOuterDisposition (::std::unique_ptr< ToPointOuterDisposition_type > x)
    {
      this->ToPointOuterDisposition_.set (std::move (x));
    }

    const SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointUnequallyDisposedZone_optional& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointUnequallyDisposedZone () const
    {
      return this->ToPointUnequallyDisposedZone_;
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointUnequallyDisposedZone_optional& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointUnequallyDisposedZone ()
    {
      return this->ToPointUnequallyDisposedZone_;
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointUnequallyDisposedZone (const ToPointUnequallyDisposedZone_type& x)
    {
      this->ToPointUnequallyDisposedZone_.set (x);
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointUnequallyDisposedZone (const ToPointUnequallyDisposedZone_optional& x)
    {
      this->ToPointUnequallyDisposedZone_ = x;
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointUnequallyDisposedZone (::std::unique_ptr< ToPointUnequallyDisposedZone_type > x)
    {
      this->ToPointUnequallyDisposedZone_.set (std::move (x));
    }


    // SurfaceProfileNonUniformCharacteristicNominalType
    //


    // SurfaceProfileNonUniformCharacteristicMeasurementType
    //


    // MeasuredZoneRadiiType
    //

    const MeasuredZoneRadiiType::MinRadius_type& MeasuredZoneRadiiType::
    MinRadius () const
    {
      return this->MinRadius_.get ();
    }

    MeasuredZoneRadiiType::MinRadius_type& MeasuredZoneRadiiType::
    MinRadius ()
    {
      return this->MinRadius_.get ();
    }

    void MeasuredZoneRadiiType::
    MinRadius (const MinRadius_type& x)
    {
      this->MinRadius_.set (x);
    }

    void MeasuredZoneRadiiType::
    MinRadius (::std::unique_ptr< MinRadius_type > x)
    {
      this->MinRadius_.set (std::move (x));
    }

    const MeasuredZoneRadiiType::MaxRadius_type& MeasuredZoneRadiiType::
    MaxRadius () const
    {
      return this->MaxRadius_.get ();
    }

    MeasuredZoneRadiiType::MaxRadius_type& MeasuredZoneRadiiType::
    MaxRadius ()
    {
      return this->MaxRadius_.get ();
    }

    void MeasuredZoneRadiiType::
    MaxRadius (const MaxRadius_type& x)
    {
      this->MaxRadius_.set (x);
    }

    void MeasuredZoneRadiiType::
    MaxRadius (::std::unique_ptr< MaxRadius_type > x)
    {
      this->MaxRadius_.set (std::move (x));
    }


    // CharacteristicGroupType
    //

    const CharacteristicGroupType::CharacteristicItemIds_type& CharacteristicGroupType::
    CharacteristicItemIds () const
    {
      return this->CharacteristicItemIds_.get ();
    }

    CharacteristicGroupType::CharacteristicItemIds_type& CharacteristicGroupType::
    CharacteristicItemIds ()
    {
      return this->CharacteristicItemIds_.get ();
    }

    void CharacteristicGroupType::
    CharacteristicItemIds (const CharacteristicItemIds_type& x)
    {
      this->CharacteristicItemIds_.set (x);
    }

    void CharacteristicGroupType::
    CharacteristicItemIds (::std::unique_ptr< CharacteristicItemIds_type > x)
    {
      this->CharacteristicItemIds_.set (std::move (x));
    }

    const CharacteristicGroupType::Description_optional& CharacteristicGroupType::
    Description () const
    {
      return this->Description_;
    }

    CharacteristicGroupType::Description_optional& CharacteristicGroupType::
    Description ()
    {
      return this->Description_;
    }

    void CharacteristicGroupType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void CharacteristicGroupType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void CharacteristicGroupType::
    Description (::std::unique_ptr< Description_type > x)
    {
      this->Description_.set (std::move (x));
    }

    const CharacteristicGroupType::Name_optional& CharacteristicGroupType::
    Name () const
    {
      return this->Name_;
    }

    CharacteristicGroupType::Name_optional& CharacteristicGroupType::
    Name ()
    {
      return this->Name_;
    }

    void CharacteristicGroupType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicGroupType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void CharacteristicGroupType::
    Name (::std::unique_ptr< Name_type > x)
    {
      this->Name_.set (std::move (x));
    }

    const CharacteristicGroupType::TransformId_optional& CharacteristicGroupType::
    TransformId () const
    {
      return this->TransformId_;
    }

    CharacteristicGroupType::TransformId_optional& CharacteristicGroupType::
    TransformId ()
    {
      return this->TransformId_;
    }

    void CharacteristicGroupType::
    TransformId (const TransformId_type& x)
    {
      this->TransformId_.set (x);
    }

    void CharacteristicGroupType::
    TransformId (const TransformId_optional& x)
    {
      this->TransformId_ = x;
    }

    void CharacteristicGroupType::
    TransformId (::std::unique_ptr< TransformId_type > x)
    {
      this->TransformId_.set (std::move (x));
    }

    const CharacteristicGroupType::Units_optional& CharacteristicGroupType::
    Units () const
    {
      return this->Units_;
    }

    CharacteristicGroupType::Units_optional& CharacteristicGroupType::
    Units ()
    {
      return this->Units_;
    }

    void CharacteristicGroupType::
    Units (const Units_type& x)
    {
      this->Units_.set (x);
    }

    void CharacteristicGroupType::
    Units (const Units_optional& x)
    {
      this->Units_ = x;
    }

    void CharacteristicGroupType::
    Units (::std::unique_ptr< Units_type > x)
    {
      this->Units_.set (std::move (x));
    }

    const CharacteristicGroupType::Scale_optional& CharacteristicGroupType::
    Scale () const
    {
      return this->Scale_;
    }

    CharacteristicGroupType::Scale_optional& CharacteristicGroupType::
    Scale ()
    {
      return this->Scale_;
    }

    void CharacteristicGroupType::
    Scale (const Scale_type& x)
    {
      this->Scale_.set (x);
    }

    void CharacteristicGroupType::
    Scale (const Scale_optional& x)
    {
      this->Scale_ = x;
    }

    void CharacteristicGroupType::
    Scale (::std::unique_ptr< Scale_type > x)
    {
      this->Scale_.set (std::move (x));
    }

    const CharacteristicGroupType::Attributes_optional& CharacteristicGroupType::
    Attributes () const
    {
      return this->Attributes_;
    }

    CharacteristicGroupType::Attributes_optional& CharacteristicGroupType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void CharacteristicGroupType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void CharacteristicGroupType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void CharacteristicGroupType::
    Attributes (::std::unique_ptr< Attributes_type > x)
    {
      this->Attributes_.set (std::move (x));
    }

    const CharacteristicGroupType::id_type& CharacteristicGroupType::
    id () const
    {
      return this->id_.get ();
    }

    CharacteristicGroupType::id_type& CharacteristicGroupType::
    id ()
    {
      return this->id_.get ();
    }

    void CharacteristicGroupType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void CharacteristicGroupType::
    id (::std::unique_ptr< id_type > x)
    {
      this->id_.set (std::move (x));
    }


    // CharacteristicManufacturingProcessGroupType
    //

    const CharacteristicManufacturingProcessGroupType::ManufacturingProcessId_optional& CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    CharacteristicManufacturingProcessGroupType::ManufacturingProcessId_optional& CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId (::std::unique_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (std::move (x));
    }


    // SimultaneousRequirementEnumType
    //

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_SimultaneousRequirementEnumType_literals_[v])
    {
    }

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (const SimultaneousRequirementEnumType& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    SimultaneousRequirementEnumType& SimultaneousRequirementEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_SimultaneousRequirementEnumType_literals_[v]);

      return *this;
    }


    // CompositeSegmentLowerLevelEnumType
    //

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CompositeSegmentLowerLevelEnumType_literals_[v])
    {
    }

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (const CompositeSegmentLowerLevelEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CompositeSegmentLowerLevelEnumType& CompositeSegmentLowerLevelEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CompositeSegmentLowerLevelEnumType_literals_[v]);

      return *this;
    }


    // SimultaneousRequirementGroupType
    //

    const SimultaneousRequirementGroupType::CharacteristicNominalIds_type& SimultaneousRequirementGroupType::
    CharacteristicNominalIds () const
    {
      return this->CharacteristicNominalIds_.get ();
    }

    SimultaneousRequirementGroupType::CharacteristicNominalIds_type& SimultaneousRequirementGroupType::
    CharacteristicNominalIds ()
    {
      return this->CharacteristicNominalIds_.get ();
    }

    void SimultaneousRequirementGroupType::
    CharacteristicNominalIds (const CharacteristicNominalIds_type& x)
    {
      this->CharacteristicNominalIds_.set (x);
    }

    void SimultaneousRequirementGroupType::
    CharacteristicNominalIds (::std::unique_ptr< CharacteristicNominalIds_type > x)
    {
      this->CharacteristicNominalIds_.set (std::move (x));
    }

    const SimultaneousRequirementGroupType::Requirement_type& SimultaneousRequirementGroupType::
    Requirement () const
    {
      return this->Requirement_.get ();
    }

    SimultaneousRequirementGroupType::Requirement_type& SimultaneousRequirementGroupType::
    Requirement ()
    {
      return this->Requirement_.get ();
    }

    void SimultaneousRequirementGroupType::
    Requirement (const Requirement_type& x)
    {
      this->Requirement_.set (x);
    }

    void SimultaneousRequirementGroupType::
    Requirement (::std::unique_ptr< Requirement_type > x)
    {
      this->Requirement_.set (std::move (x));
    }

    const SimultaneousRequirementGroupType::CompositeLevel_optional& SimultaneousRequirementGroupType::
    CompositeLevel () const
    {
      return this->CompositeLevel_;
    }

    SimultaneousRequirementGroupType::CompositeLevel_optional& SimultaneousRequirementGroupType::
    CompositeLevel ()
    {
      return this->CompositeLevel_;
    }

    void SimultaneousRequirementGroupType::
    CompositeLevel (const CompositeLevel_type& x)
    {
      this->CompositeLevel_.set (x);
    }

    void SimultaneousRequirementGroupType::
    CompositeLevel (const CompositeLevel_optional& x)
    {
      this->CompositeLevel_ = x;
    }

    void SimultaneousRequirementGroupType::
    CompositeLevel (::std::unique_ptr< CompositeLevel_type > x)
    {
      this->CompositeLevel_.set (std::move (x));
    }


    // SimultaneousRequirementGroupsType
    //

    const SimultaneousRequirementGroupsType::SimultaneousRequirementGroup_sequence& SimultaneousRequirementGroupsType::
    SimultaneousRequirementGroup () const
    {
      return this->SimultaneousRequirementGroup_;
    }

    SimultaneousRequirementGroupsType::SimultaneousRequirementGroup_sequence& SimultaneousRequirementGroupsType::
    SimultaneousRequirementGroup ()
    {
      return this->SimultaneousRequirementGroup_;
    }

    void SimultaneousRequirementGroupsType::
    SimultaneousRequirementGroup (const SimultaneousRequirementGroup_sequence& s)
    {
      this->SimultaneousRequirementGroup_ = s;
    }

    const SimultaneousRequirementGroupsType::n_type& SimultaneousRequirementGroupsType::
    n () const
    {
      return this->n_.get ();
    }

    SimultaneousRequirementGroupsType::n_type& SimultaneousRequirementGroupsType::
    n ()
    {
      return this->n_.get ();
    }

    void SimultaneousRequirementGroupsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void SimultaneousRequirementGroupsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // CharacteristicStatusEnumType
    //

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CharacteristicStatusEnumType_literals_[v])
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const CharacteristicStatusEnumType& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CharacteristicStatusEnumType& CharacteristicStatusEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CharacteristicStatusEnumType_literals_[v]);

      return *this;
    }


    // CharacteristicStatusType
    //

    const CharacteristicStatusType::CharacteristicStatusEnum_optional& CharacteristicStatusType::
    CharacteristicStatusEnum () const
    {
      return this->CharacteristicStatusEnum_;
    }

    CharacteristicStatusType::CharacteristicStatusEnum_optional& CharacteristicStatusType::
    CharacteristicStatusEnum ()
    {
      return this->CharacteristicStatusEnum_;
    }

    void CharacteristicStatusType::
    CharacteristicStatusEnum (const CharacteristicStatusEnum_type& x)
    {
      this->CharacteristicStatusEnum_.set (x);
    }

    void CharacteristicStatusType::
    CharacteristicStatusEnum (const CharacteristicStatusEnum_optional& x)
    {
      this->CharacteristicStatusEnum_ = x;
    }

    void CharacteristicStatusType::
    CharacteristicStatusEnum (::std::unique_ptr< CharacteristicStatusEnum_type > x)
    {
      this->CharacteristicStatusEnum_.set (std::move (x));
    }

    const CharacteristicStatusType::OtherCharacteristicStatus_optional& CharacteristicStatusType::
    OtherCharacteristicStatus () const
    {
      return this->OtherCharacteristicStatus_;
    }

    CharacteristicStatusType::OtherCharacteristicStatus_optional& CharacteristicStatusType::
    OtherCharacteristicStatus ()
    {
      return this->OtherCharacteristicStatus_;
    }

    void CharacteristicStatusType::
    OtherCharacteristicStatus (const OtherCharacteristicStatus_type& x)
    {
      this->OtherCharacteristicStatus_.set (x);
    }

    void CharacteristicStatusType::
    OtherCharacteristicStatus (const OtherCharacteristicStatus_optional& x)
    {
      this->OtherCharacteristicStatus_ = x;
    }

    void CharacteristicStatusType::
    OtherCharacteristicStatus (::std::unique_ptr< OtherCharacteristicStatus_type > x)
    {
      this->OtherCharacteristicStatus_.set (std::move (x));
    }


    // CharacteristicGroupStatusType
    //

    const CharacteristicGroupStatusType::Status_type& CharacteristicGroupStatusType::
    Status () const
    {
      return this->Status_.get ();
    }

    CharacteristicGroupStatusType::Status_type& CharacteristicGroupStatusType::
    Status ()
    {
      return this->Status_.get ();
    }

    void CharacteristicGroupStatusType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void CharacteristicGroupStatusType::
    Status (::std::unique_ptr< Status_type > x)
    {
      this->Status_.set (std::move (x));
    }

    const CharacteristicGroupStatusType::GroupId_type& CharacteristicGroupStatusType::
    GroupId () const
    {
      return this->GroupId_.get ();
    }

    CharacteristicGroupStatusType::GroupId_type& CharacteristicGroupStatusType::
    GroupId ()
    {
      return this->GroupId_.get ();
    }

    void CharacteristicGroupStatusType::
    GroupId (const GroupId_type& x)
    {
      this->GroupId_.set (x);
    }

    void CharacteristicGroupStatusType::
    GroupId (::std::unique_ptr< GroupId_type > x)
    {
      this->GroupId_.set (std::move (x));
    }


    // PointDeviationType
    //

    const PointDeviationType::MeasurePointId_type& PointDeviationType::
    MeasurePointId () const
    {
      return this->MeasurePointId_.get ();
    }

    PointDeviationType::MeasurePointId_type& PointDeviationType::
    MeasurePointId ()
    {
      return this->MeasurePointId_.get ();
    }

    void PointDeviationType::
    MeasurePointId (const MeasurePointId_type& x)
    {
      this->MeasurePointId_.set (x);
    }

    void PointDeviationType::
    MeasurePointId (::std::unique_ptr< MeasurePointId_type > x)
    {
      this->MeasurePointId_.set (std::move (x));
    }

    const PointDeviationType::Deviation_type& PointDeviationType::
    Deviation () const
    {
      return this->Deviation_.get ();
    }

    PointDeviationType::Deviation_type& PointDeviationType::
    Deviation ()
    {
      return this->Deviation_.get ();
    }

    void PointDeviationType::
    Deviation (const Deviation_type& x)
    {
      this->Deviation_.set (x);
    }

    void PointDeviationType::
    Deviation (::std::unique_ptr< Deviation_type > x)
    {
      this->Deviation_.set (std::move (x));
    }


    // PointDeviationsType
    //

    const PointDeviationsType::PointDeviation_sequence& PointDeviationsType::
    PointDeviation () const
    {
      return this->PointDeviation_;
    }

    PointDeviationsType::PointDeviation_sequence& PointDeviationsType::
    PointDeviation ()
    {
      return this->PointDeviation_;
    }

    void PointDeviationsType::
    PointDeviation (const PointDeviation_sequence& s)
    {
      this->PointDeviation_ = s;
    }

    const PointDeviationsType::n_type& PointDeviationsType::
    n () const
    {
      return this->n_.get ();
    }

    PointDeviationsType::n_type& PointDeviationsType::
    n ()
    {
      return this->n_.get ();
    }

    void PointDeviationsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void PointDeviationsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ExtentEnumType
    //

    ExtentEnumType::
    ExtentEnumType ()
    : ::xml_schema::nmtoken ()
    {
    }

    ExtentEnumType::
    ExtentEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ExtentEnumType_literals_[v])
    {
    }

    ExtentEnumType::
    ExtentEnumType (const wchar_t* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExtentEnumType::
    ExtentEnumType (const ::std::wstring& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExtentEnumType::
    ExtentEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExtentEnumType::
    ExtentEnumType (const ExtentEnumType& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ExtentEnumType& ExtentEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ExtentEnumType_literals_[v]);

      return *this;
    }


    // ExtentType
    //

    const ExtentType::ExtentEnum_optional& ExtentType::
    ExtentEnum () const
    {
      return this->ExtentEnum_;
    }

    ExtentType::ExtentEnum_optional& ExtentType::
    ExtentEnum ()
    {
      return this->ExtentEnum_;
    }

    void ExtentType::
    ExtentEnum (const ExtentEnum_type& x)
    {
      this->ExtentEnum_.set (x);
    }

    void ExtentType::
    ExtentEnum (const ExtentEnum_optional& x)
    {
      this->ExtentEnum_ = x;
    }

    void ExtentType::
    ExtentEnum (::std::unique_ptr< ExtentEnum_type > x)
    {
      this->ExtentEnum_.set (std::move (x));
    }

    const ExtentType::OtherExtent_optional& ExtentType::
    OtherExtent () const
    {
      return this->OtherExtent_;
    }

    ExtentType::OtherExtent_optional& ExtentType::
    OtherExtent ()
    {
      return this->OtherExtent_;
    }

    void ExtentType::
    OtherExtent (const OtherExtent_type& x)
    {
      this->OtherExtent_.set (x);
    }

    void ExtentType::
    OtherExtent (const OtherExtent_optional& x)
    {
      this->OtherExtent_ = x;
    }

    void ExtentType::
    OtherExtent (::std::unique_ptr< OtherExtent_type > x)
    {
      this->OtherExtent_.set (std::move (x));
    }


    // PositionCoordinateMethodEnumType
    //

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType ()
    : ::xml_schema::string ()
    {
    }

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (value v)
    : ::xml_schema::string (_xsd_PositionCoordinateMethodEnumType_literals_[v])
    {
    }

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (const PositionCoordinateMethodEnumType& v,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    PositionCoordinateMethodEnumType& PositionCoordinateMethodEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_PositionCoordinateMethodEnumType_literals_[v]);

      return *this;
    }


    // PositionCoordinateMethodType
    //

    const PositionCoordinateMethodType::Method_type& PositionCoordinateMethodType::
    Method () const
    {
      return this->Method_.get ();
    }

    PositionCoordinateMethodType::Method_type& PositionCoordinateMethodType::
    Method ()
    {
      return this->Method_.get ();
    }

    void PositionCoordinateMethodType::
    Method (const Method_type& x)
    {
      this->Method_.set (x);
    }

    void PositionCoordinateMethodType::
    Method (::std::unique_ptr< Method_type > x)
    {
      this->Method_.set (std::move (x));
    }

    const PositionCoordinateMethodType::FeatureZoneIds_optional& PositionCoordinateMethodType::
    FeatureZoneIds () const
    {
      return this->FeatureZoneIds_;
    }

    PositionCoordinateMethodType::FeatureZoneIds_optional& PositionCoordinateMethodType::
    FeatureZoneIds ()
    {
      return this->FeatureZoneIds_;
    }

    void PositionCoordinateMethodType::
    FeatureZoneIds (const FeatureZoneIds_type& x)
    {
      this->FeatureZoneIds_.set (x);
    }

    void PositionCoordinateMethodType::
    FeatureZoneIds (const FeatureZoneIds_optional& x)
    {
      this->FeatureZoneIds_ = x;
    }

    void PositionCoordinateMethodType::
    FeatureZoneIds (::std::unique_ptr< FeatureZoneIds_type > x)
    {
      this->FeatureZoneIds_.set (std::move (x));
    }


    // ThreadCharacteristicItemType
    //


    // ThreadCharacteristicDefinitionType
    //

    const ThreadCharacteristicDefinitionType::ThreadSpecificationId_type& ThreadCharacteristicDefinitionType::
    ThreadSpecificationId () const
    {
      return this->ThreadSpecificationId_.get ();
    }

    ThreadCharacteristicDefinitionType::ThreadSpecificationId_type& ThreadCharacteristicDefinitionType::
    ThreadSpecificationId ()
    {
      return this->ThreadSpecificationId_.get ();
    }

    void ThreadCharacteristicDefinitionType::
    ThreadSpecificationId (const ThreadSpecificationId_type& x)
    {
      this->ThreadSpecificationId_.set (x);
    }

    void ThreadCharacteristicDefinitionType::
    ThreadSpecificationId (::std::unique_ptr< ThreadSpecificationId_type > x)
    {
      this->ThreadSpecificationId_.set (std::move (x));
    }


    // ThreadCharacteristicNominalType
    //


    // ThreadCharacteristicMeasurementType
    //

    const ThreadCharacteristicMeasurementType::PitchDiameter_optional& ThreadCharacteristicMeasurementType::
    PitchDiameter () const
    {
      return this->PitchDiameter_;
    }

    ThreadCharacteristicMeasurementType::PitchDiameter_optional& ThreadCharacteristicMeasurementType::
    PitchDiameter ()
    {
      return this->PitchDiameter_;
    }

    void ThreadCharacteristicMeasurementType::
    PitchDiameter (const PitchDiameter_type& x)
    {
      this->PitchDiameter_.set (x);
    }

    void ThreadCharacteristicMeasurementType::
    PitchDiameter (const PitchDiameter_optional& x)
    {
      this->PitchDiameter_ = x;
    }

    void ThreadCharacteristicMeasurementType::
    PitchDiameter (::std::unique_ptr< PitchDiameter_type > x)
    {
      this->PitchDiameter_.set (std::move (x));
    }

    const ThreadCharacteristicMeasurementType::FunctionalSize_optional& ThreadCharacteristicMeasurementType::
    FunctionalSize () const
    {
      return this->FunctionalSize_;
    }

    ThreadCharacteristicMeasurementType::FunctionalSize_optional& ThreadCharacteristicMeasurementType::
    FunctionalSize ()
    {
      return this->FunctionalSize_;
    }

    void ThreadCharacteristicMeasurementType::
    FunctionalSize (const FunctionalSize_type& x)
    {
      this->FunctionalSize_.set (x);
    }

    void ThreadCharacteristicMeasurementType::
    FunctionalSize (const FunctionalSize_optional& x)
    {
      this->FunctionalSize_ = x;
    }

    void ThreadCharacteristicMeasurementType::
    FunctionalSize (::std::unique_ptr< FunctionalSize_type > x)
    {
      this->FunctionalSize_.set (std::move (x));
    }


    // CharacteristicAspectsListsType
    //

    const CharacteristicAspectsListsType::FormalStandardId_type& CharacteristicAspectsListsType::
    FormalStandardId () const
    {
      return this->FormalStandardId_.get ();
    }

    CharacteristicAspectsListsType::FormalStandardId_type& CharacteristicAspectsListsType::
    FormalStandardId ()
    {
      return this->FormalStandardId_.get ();
    }

    void CharacteristicAspectsListsType::
    FormalStandardId (const FormalStandardId_type& x)
    {
      this->FormalStandardId_.set (x);
    }

    void CharacteristicAspectsListsType::
    FormalStandardId (::std::unique_ptr< FormalStandardId_type > x)
    {
      this->FormalStandardId_.set (std::move (x));
    }

    const CharacteristicAspectsListsType::CharacteristicDefinitions_type& CharacteristicAspectsListsType::
    CharacteristicDefinitions () const
    {
      return this->CharacteristicDefinitions_.get ();
    }

    CharacteristicAspectsListsType::CharacteristicDefinitions_type& CharacteristicAspectsListsType::
    CharacteristicDefinitions ()
    {
      return this->CharacteristicDefinitions_.get ();
    }

    void CharacteristicAspectsListsType::
    CharacteristicDefinitions (const CharacteristicDefinitions_type& x)
    {
      this->CharacteristicDefinitions_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicDefinitions (::std::unique_ptr< CharacteristicDefinitions_type > x)
    {
      this->CharacteristicDefinitions_.set (std::move (x));
    }

    const CharacteristicAspectsListsType::DefaultCharacteristicDefinitions_optional& CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions () const
    {
      return this->DefaultCharacteristicDefinitions_;
    }

    CharacteristicAspectsListsType::DefaultCharacteristicDefinitions_optional& CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions ()
    {
      return this->DefaultCharacteristicDefinitions_;
    }

    void CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions (const DefaultCharacteristicDefinitions_type& x)
    {
      this->DefaultCharacteristicDefinitions_.set (x);
    }

    void CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions (const DefaultCharacteristicDefinitions_optional& x)
    {
      this->DefaultCharacteristicDefinitions_ = x;
    }

    void CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions (::std::unique_ptr< DefaultCharacteristicDefinitions_type > x)
    {
      this->DefaultCharacteristicDefinitions_.set (std::move (x));
    }

    const CharacteristicAspectsListsType::DefaultToleranceDefinitions_optional& CharacteristicAspectsListsType::
    DefaultToleranceDefinitions () const
    {
      return this->DefaultToleranceDefinitions_;
    }

    CharacteristicAspectsListsType::DefaultToleranceDefinitions_optional& CharacteristicAspectsListsType::
    DefaultToleranceDefinitions ()
    {
      return this->DefaultToleranceDefinitions_;
    }

    void CharacteristicAspectsListsType::
    DefaultToleranceDefinitions (const DefaultToleranceDefinitions_type& x)
    {
      this->DefaultToleranceDefinitions_.set (x);
    }

    void CharacteristicAspectsListsType::
    DefaultToleranceDefinitions (const DefaultToleranceDefinitions_optional& x)
    {
      this->DefaultToleranceDefinitions_ = x;
    }

    void CharacteristicAspectsListsType::
    DefaultToleranceDefinitions (::std::unique_ptr< DefaultToleranceDefinitions_type > x)
    {
      this->DefaultToleranceDefinitions_.set (std::move (x));
    }

    const CharacteristicAspectsListsType::CharacteristicNominals_type& CharacteristicAspectsListsType::
    CharacteristicNominals () const
    {
      return this->CharacteristicNominals_.get ();
    }

    CharacteristicAspectsListsType::CharacteristicNominals_type& CharacteristicAspectsListsType::
    CharacteristicNominals ()
    {
      return this->CharacteristicNominals_.get ();
    }

    void CharacteristicAspectsListsType::
    CharacteristicNominals (const CharacteristicNominals_type& x)
    {
      this->CharacteristicNominals_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicNominals (::std::unique_ptr< CharacteristicNominals_type > x)
    {
      this->CharacteristicNominals_.set (std::move (x));
    }

    const CharacteristicAspectsListsType::CharacteristicItems_optional& CharacteristicAspectsListsType::
    CharacteristicItems () const
    {
      return this->CharacteristicItems_;
    }

    CharacteristicAspectsListsType::CharacteristicItems_optional& CharacteristicAspectsListsType::
    CharacteristicItems ()
    {
      return this->CharacteristicItems_;
    }

    void CharacteristicAspectsListsType::
    CharacteristicItems (const CharacteristicItems_type& x)
    {
      this->CharacteristicItems_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicItems (const CharacteristicItems_optional& x)
    {
      this->CharacteristicItems_ = x;
    }

    void CharacteristicAspectsListsType::
    CharacteristicItems (::std::unique_ptr< CharacteristicItems_type > x)
    {
      this->CharacteristicItems_.set (std::move (x));
    }

    const CharacteristicAspectsListsType::CharacteristicGroups_optional& CharacteristicAspectsListsType::
    CharacteristicGroups () const
    {
      return this->CharacteristicGroups_;
    }

    CharacteristicAspectsListsType::CharacteristicGroups_optional& CharacteristicAspectsListsType::
    CharacteristicGroups ()
    {
      return this->CharacteristicGroups_;
    }

    void CharacteristicAspectsListsType::
    CharacteristicGroups (const CharacteristicGroups_type& x)
    {
      this->CharacteristicGroups_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicGroups (const CharacteristicGroups_optional& x)
    {
      this->CharacteristicGroups_ = x;
    }

    void CharacteristicAspectsListsType::
    CharacteristicGroups (::std::unique_ptr< CharacteristicGroups_type > x)
    {
      this->CharacteristicGroups_.set (std::move (x));
    }

    const CharacteristicAspectsListsType::SimultaneousRequirementGroups_optional& CharacteristicAspectsListsType::
    SimultaneousRequirementGroups () const
    {
      return this->SimultaneousRequirementGroups_;
    }

    CharacteristicAspectsListsType::SimultaneousRequirementGroups_optional& CharacteristicAspectsListsType::
    SimultaneousRequirementGroups ()
    {
      return this->SimultaneousRequirementGroups_;
    }

    void CharacteristicAspectsListsType::
    SimultaneousRequirementGroups (const SimultaneousRequirementGroups_type& x)
    {
      this->SimultaneousRequirementGroups_.set (x);
    }

    void CharacteristicAspectsListsType::
    SimultaneousRequirementGroups (const SimultaneousRequirementGroups_optional& x)
    {
      this->SimultaneousRequirementGroups_ = x;
    }

    void CharacteristicAspectsListsType::
    SimultaneousRequirementGroups (::std::unique_ptr< SimultaneousRequirementGroups_type > x)
    {
      this->SimultaneousRequirementGroups_.set (std::move (x));
    }


    // MeasuredCharacteristicsType
    //

    const MeasuredCharacteristicsType::CharacteristicMeasurements_type& MeasuredCharacteristicsType::
    CharacteristicMeasurements () const
    {
      return this->CharacteristicMeasurements_.get ();
    }

    MeasuredCharacteristicsType::CharacteristicMeasurements_type& MeasuredCharacteristicsType::
    CharacteristicMeasurements ()
    {
      return this->CharacteristicMeasurements_.get ();
    }

    void MeasuredCharacteristicsType::
    CharacteristicMeasurements (const CharacteristicMeasurements_type& x)
    {
      this->CharacteristicMeasurements_.set (x);
    }

    void MeasuredCharacteristicsType::
    CharacteristicMeasurements (::std::unique_ptr< CharacteristicMeasurements_type > x)
    {
      this->CharacteristicMeasurements_.set (std::move (x));
    }

    const MeasuredCharacteristicsType::CharacteristicGroupStatuses_optional& MeasuredCharacteristicsType::
    CharacteristicGroupStatuses () const
    {
      return this->CharacteristicGroupStatuses_;
    }

    MeasuredCharacteristicsType::CharacteristicGroupStatuses_optional& MeasuredCharacteristicsType::
    CharacteristicGroupStatuses ()
    {
      return this->CharacteristicGroupStatuses_;
    }

    void MeasuredCharacteristicsType::
    CharacteristicGroupStatuses (const CharacteristicGroupStatuses_type& x)
    {
      this->CharacteristicGroupStatuses_.set (x);
    }

    void MeasuredCharacteristicsType::
    CharacteristicGroupStatuses (const CharacteristicGroupStatuses_optional& x)
    {
      this->CharacteristicGroupStatuses_ = x;
    }

    void MeasuredCharacteristicsType::
    CharacteristicGroupStatuses (::std::unique_ptr< CharacteristicGroupStatuses_type > x)
    {
      this->CharacteristicGroupStatuses_.set (std::move (x));
    }


    // CharacteristicItemsType
    //

    const CharacteristicItemsType::CharacteristicItem_sequence& CharacteristicItemsType::
    CharacteristicItem () const
    {
      return this->CharacteristicItem_;
    }

    CharacteristicItemsType::CharacteristicItem_sequence& CharacteristicItemsType::
    CharacteristicItem ()
    {
      return this->CharacteristicItem_;
    }

    void CharacteristicItemsType::
    CharacteristicItem (const CharacteristicItem_sequence& s)
    {
      this->CharacteristicItem_ = s;
    }

    const CharacteristicItemsType::n_type& CharacteristicItemsType::
    n () const
    {
      return this->n_.get ();
    }

    CharacteristicItemsType::n_type& CharacteristicItemsType::
    n ()
    {
      return this->n_.get ();
    }

    void CharacteristicItemsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void CharacteristicItemsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // CharacteristicGroupsType
    //

    const CharacteristicGroupsType::CharacteristicGroup_sequence& CharacteristicGroupsType::
    CharacteristicGroup () const
    {
      return this->CharacteristicGroup_;
    }

    CharacteristicGroupsType::CharacteristicGroup_sequence& CharacteristicGroupsType::
    CharacteristicGroup ()
    {
      return this->CharacteristicGroup_;
    }

    void CharacteristicGroupsType::
    CharacteristicGroup (const CharacteristicGroup_sequence& s)
    {
      this->CharacteristicGroup_ = s;
    }

    const CharacteristicGroupsType::n_type& CharacteristicGroupsType::
    n () const
    {
      return this->n_.get ();
    }

    CharacteristicGroupsType::n_type& CharacteristicGroupsType::
    n ()
    {
      return this->n_.get ();
    }

    void CharacteristicGroupsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void CharacteristicGroupsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // CharacteristicGroupStatusesType
    //

    const CharacteristicGroupStatusesType::CharacteristicGroupStatus_sequence& CharacteristicGroupStatusesType::
    CharacteristicGroupStatus () const
    {
      return this->CharacteristicGroupStatus_;
    }

    CharacteristicGroupStatusesType::CharacteristicGroupStatus_sequence& CharacteristicGroupStatusesType::
    CharacteristicGroupStatus ()
    {
      return this->CharacteristicGroupStatus_;
    }

    void CharacteristicGroupStatusesType::
    CharacteristicGroupStatus (const CharacteristicGroupStatus_sequence& s)
    {
      this->CharacteristicGroupStatus_ = s;
    }

    const CharacteristicGroupStatusesType::n_type& CharacteristicGroupStatusesType::
    n () const
    {
      return this->n_.get ();
    }

    CharacteristicGroupStatusesType::n_type& CharacteristicGroupStatusesType::
    n ()
    {
      return this->n_.get ();
    }

    void CharacteristicGroupStatusesType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void CharacteristicGroupStatusesType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // CharacteristicDefinitionsType
    //

    const CharacteristicDefinitionsType::CharacteristicDefinition_sequence& CharacteristicDefinitionsType::
    CharacteristicDefinition () const
    {
      return this->CharacteristicDefinition_;
    }

    CharacteristicDefinitionsType::CharacteristicDefinition_sequence& CharacteristicDefinitionsType::
    CharacteristicDefinition ()
    {
      return this->CharacteristicDefinition_;
    }

    void CharacteristicDefinitionsType::
    CharacteristicDefinition (const CharacteristicDefinition_sequence& s)
    {
      this->CharacteristicDefinition_ = s;
    }

    const CharacteristicDefinitionsType::n_type& CharacteristicDefinitionsType::
    n () const
    {
      return this->n_.get ();
    }

    CharacteristicDefinitionsType::n_type& CharacteristicDefinitionsType::
    n ()
    {
      return this->n_.get ();
    }

    void CharacteristicDefinitionsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void CharacteristicDefinitionsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // ToleranceDefinitionsType
    //

    const ToleranceDefinitionsType::LinearTolerance_sequence& ToleranceDefinitionsType::
    LinearTolerance () const
    {
      return this->LinearTolerance_;
    }

    ToleranceDefinitionsType::LinearTolerance_sequence& ToleranceDefinitionsType::
    LinearTolerance ()
    {
      return this->LinearTolerance_;
    }

    void ToleranceDefinitionsType::
    LinearTolerance (const LinearTolerance_sequence& s)
    {
      this->LinearTolerance_ = s;
    }

    const ToleranceDefinitionsType::AngularTolerance_sequence& ToleranceDefinitionsType::
    AngularTolerance () const
    {
      return this->AngularTolerance_;
    }

    ToleranceDefinitionsType::AngularTolerance_sequence& ToleranceDefinitionsType::
    AngularTolerance ()
    {
      return this->AngularTolerance_;
    }

    void ToleranceDefinitionsType::
    AngularTolerance (const AngularTolerance_sequence& s)
    {
      this->AngularTolerance_ = s;
    }

    const ToleranceDefinitionsType::n_type& ToleranceDefinitionsType::
    n () const
    {
      return this->n_.get ();
    }

    ToleranceDefinitionsType::n_type& ToleranceDefinitionsType::
    n ()
    {
      return this->n_.get ();
    }

    void ToleranceDefinitionsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ToleranceDefinitionsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // CharacteristicNominalsType
    //

    const CharacteristicNominalsType::CharacteristicNominal_sequence& CharacteristicNominalsType::
    CharacteristicNominal () const
    {
      return this->CharacteristicNominal_;
    }

    CharacteristicNominalsType::CharacteristicNominal_sequence& CharacteristicNominalsType::
    CharacteristicNominal ()
    {
      return this->CharacteristicNominal_;
    }

    void CharacteristicNominalsType::
    CharacteristicNominal (const CharacteristicNominal_sequence& s)
    {
      this->CharacteristicNominal_ = s;
    }

    const CharacteristicNominalsType::n_type& CharacteristicNominalsType::
    n () const
    {
      return this->n_.get ();
    }

    CharacteristicNominalsType::n_type& CharacteristicNominalsType::
    n ()
    {
      return this->n_.get ();
    }

    void CharacteristicNominalsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void CharacteristicNominalsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // CharacteristicMeasurementsType
    //

    const CharacteristicMeasurementsType::CharacteristicMeasurement_sequence& CharacteristicMeasurementsType::
    CharacteristicMeasurement () const
    {
      return this->CharacteristicMeasurement_;
    }

    CharacteristicMeasurementsType::CharacteristicMeasurement_sequence& CharacteristicMeasurementsType::
    CharacteristicMeasurement ()
    {
      return this->CharacteristicMeasurement_;
    }

    void CharacteristicMeasurementsType::
    CharacteristicMeasurement (const CharacteristicMeasurement_sequence& s)
    {
      this->CharacteristicMeasurement_ = s;
    }

    const CharacteristicMeasurementsType::n_type& CharacteristicMeasurementsType::
    n () const
    {
      return this->n_.get ();
    }

    CharacteristicMeasurementsType::n_type& CharacteristicMeasurementsType::
    n ()
    {
      return this->n_.get ();
    }

    void CharacteristicMeasurementsType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void CharacteristicMeasurementsType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // WeldContourSymbolEnumType
    //

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType ()
    : ::xml_schema::string ()
    {
    }

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (value v)
    : ::xml_schema::string (_xsd_WeldContourSymbolEnumType_literals_[v])
    {
    }

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (const WeldContourSymbolEnumType& v,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    WeldContourSymbolEnumType& WeldContourSymbolEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_WeldContourSymbolEnumType_literals_[v]);

      return *this;
    }


    // WeldFinishingDesignatorEnumType
    //

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType ()
    : ::xml_schema::string ()
    {
    }

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (value v)
    : ::xml_schema::string (_xsd_WeldFinishingDesignatorEnumType_literals_[v])
    {
    }

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (const WeldFinishingDesignatorEnumType& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    WeldFinishingDesignatorEnumType& WeldFinishingDesignatorEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_WeldFinishingDesignatorEnumType_literals_[v]);

      return *this;
    }


    // LocationSignificanceOneSidesEnumType
    //

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType ()
    : ::xml_schema::string ()
    {
    }

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (value v)
    : ::xml_schema::string (_xsd_LocationSignificanceOneSidesEnumType_literals_[v])
    {
    }

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (const LocationSignificanceOneSidesEnumType& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    LocationSignificanceOneSidesEnumType& LocationSignificanceOneSidesEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_LocationSignificanceOneSidesEnumType_literals_[v]);

      return *this;
    }


    // LocationSignificanceSpotSeamEnumType
    //

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType ()
    : ::xml_schema::string ()
    {
    }

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (value v)
    : ::xml_schema::string (_xsd_LocationSignificanceSpotSeamEnumType_literals_[v])
    {
    }

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (const LocationSignificanceSpotSeamEnumType& v,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    LocationSignificanceSpotSeamEnumType& LocationSignificanceSpotSeamEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_LocationSignificanceSpotSeamEnumType_literals_[v]);

      return *this;
    }


    // LocationSignificanceAllEnumType
    //

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType ()
    : ::xml_schema::string ()
    {
    }

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (value v)
    : ::xml_schema::string (_xsd_LocationSignificanceAllEnumType_literals_[v])
    {
    }

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (const LocationSignificanceAllEnumType& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    LocationSignificanceAllEnumType& LocationSignificanceAllEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_LocationSignificanceAllEnumType_literals_[v]);

      return *this;
    }


    // NonDestructiveTestingEnumType
    //

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType ()
    : ::xml_schema::string ()
    {
    }

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (value v)
    : ::xml_schema::string (_xsd_NonDestructiveTestingEnumType_literals_[v])
    {
    }

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (const NonDestructiveTestingEnumType& v,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    NonDestructiveTestingEnumType& NonDestructiveTestingEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_NonDestructiveTestingEnumType_literals_[v]);

      return *this;
    }


    // WeldingProcessEnumType
    //

    WeldingProcessEnumType::
    WeldingProcessEnumType ()
    : ::xml_schema::string ()
    {
    }

    WeldingProcessEnumType::
    WeldingProcessEnumType (value v)
    : ::xml_schema::string (_xsd_WeldingProcessEnumType_literals_[v])
    {
    }

    WeldingProcessEnumType::
    WeldingProcessEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    WeldingProcessEnumType::
    WeldingProcessEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    WeldingProcessEnumType::
    WeldingProcessEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    WeldingProcessEnumType::
    WeldingProcessEnumType (const WeldingProcessEnumType& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    WeldingProcessEnumType& WeldingProcessEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_WeldingProcessEnumType_literals_[v]);

      return *this;
    }


    // WeldingProcessSuffixEnumType
    //

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType ()
    : ::xml_schema::string ()
    {
    }

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (value v)
    : ::xml_schema::string (_xsd_WeldingProcessSuffixEnumType_literals_[v])
    {
    }

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (const WeldingProcessSuffixEnumType& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    WeldingProcessSuffixEnumType& WeldingProcessSuffixEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_WeldingProcessSuffixEnumType_literals_[v]);

      return *this;
    }


    // WeldingProcessType
    //

    const WeldingProcessType::Process_type& WeldingProcessType::
    Process () const
    {
      return this->Process_.get ();
    }

    WeldingProcessType::Process_type& WeldingProcessType::
    Process ()
    {
      return this->Process_.get ();
    }

    void WeldingProcessType::
    Process (const Process_type& x)
    {
      this->Process_.set (x);
    }

    void WeldingProcessType::
    Process (::std::unique_ptr< Process_type > x)
    {
      this->Process_.set (std::move (x));
    }

    const WeldingProcessType::Suffix_optional& WeldingProcessType::
    Suffix () const
    {
      return this->Suffix_;
    }

    WeldingProcessType::Suffix_optional& WeldingProcessType::
    Suffix ()
    {
      return this->Suffix_;
    }

    void WeldingProcessType::
    Suffix (const Suffix_type& x)
    {
      this->Suffix_.set (x);
    }

    void WeldingProcessType::
    Suffix (const Suffix_optional& x)
    {
      this->Suffix_ = x;
    }

    void WeldingProcessType::
    Suffix (::std::unique_ptr< Suffix_type > x)
    {
      this->Suffix_.set (std::move (x));
    }


    // ArrayNonDestructiveTestingType
    //

    const ArrayNonDestructiveTestingType::TypeOfTest_sequence& ArrayNonDestructiveTestingType::
    TypeOfTest () const
    {
      return this->TypeOfTest_;
    }

    ArrayNonDestructiveTestingType::TypeOfTest_sequence& ArrayNonDestructiveTestingType::
    TypeOfTest ()
    {
      return this->TypeOfTest_;
    }

    void ArrayNonDestructiveTestingType::
    TypeOfTest (const TypeOfTest_sequence& s)
    {
      this->TypeOfTest_ = s;
    }

    const ArrayNonDestructiveTestingType::n_type& ArrayNonDestructiveTestingType::
    n () const
    {
      return this->n_.get ();
    }

    ArrayNonDestructiveTestingType::n_type& ArrayNonDestructiveTestingType::
    n ()
    {
      return this->n_.get ();
    }

    void ArrayNonDestructiveTestingType::
    n (const n_type& x)
    {
      this->n_.set (x);
    }

    void ArrayNonDestructiveTestingType::
    n (::std::unique_ptr< n_type > x)
    {
      this->n_.set (std::move (x));
    }


    // WeldCharacteristicNominalBaseType
    //

    const WeldCharacteristicNominalBaseType::AllAround_optional& WeldCharacteristicNominalBaseType::
    AllAround () const
    {
      return this->AllAround_;
    }

    WeldCharacteristicNominalBaseType::AllAround_optional& WeldCharacteristicNominalBaseType::
    AllAround ()
    {
      return this->AllAround_;
    }

    void WeldCharacteristicNominalBaseType::
    AllAround (const AllAround_type& x)
    {
      this->AllAround_.set (x);
    }

    void WeldCharacteristicNominalBaseType::
    AllAround (const AllAround_optional& x)
    {
      this->AllAround_ = x;
    }

    const WeldCharacteristicNominalBaseType::Field_optional& WeldCharacteristicNominalBaseType::
    Field () const
    {
      return this->Field_;
    }

    WeldCharacteristicNominalBaseType::Field_optional& WeldCharacteristicNominalBaseType::
    Field ()
    {
      return this->Field_;
    }

    void WeldCharacteristicNominalBaseType::
    Field (const Field_type& x)
    {
      this->Field_.set (x);
    }

    void WeldCharacteristicNominalBaseType::
    Field (const Field_optional& x)
    {
      this->Field_ = x;
    }

    const WeldCharacteristicNominalBaseType::Specification_optional& WeldCharacteristicNominalBaseType::
    Specification () const
    {
      return this->Specification_;
    }

    WeldCharacteristicNominalBaseType::Specification_optional& WeldCharacteristicNominalBaseType::
    Specification ()
    {
      return this->Specification_;
    }

    void WeldCharacteristicNominalBaseType::
    Specification (const Specification_type& x)
    {
      this->Specification_.set (x);
    }

    void WeldCharacteristicNominalBaseType::
    Specification (const Specification_optional& x)
    {
      this->Specification_ = x;
    }

    void WeldCharacteristicNominalBaseType::
    Specification (::std::unique_ptr< Specification_type > x)
    {
      this->Specification_.set (std::move (x));
    }

    const WeldCharacteristicNominalBaseType::WeldingProcess_optional& WeldCharacteristicNominalBaseType::
    WeldingProcess () const
    {
      return this->WeldingProcess_;
    }

    WeldCharacteristicNominalBaseType::WeldingProcess_optional& WeldCharacteristicNominalBaseType::
    WeldingProcess ()
    {
      return this->WeldingProcess_;
    }

    void WeldCharacteristicNominalBaseType::
    WeldingProcess (const WeldingProcess_type& x)
    {
      this->WeldingProcess_.set (x);
    }

    void WeldCharacteristicNominalBaseType::
    WeldingProcess (const WeldingProcess_optional& x)
    {
      this->WeldingProcess_ = x;
    }

    void WeldCharacteristicNominalBaseType::
    WeldingProcess (::std::unique_ptr< WeldingProcess_type > x)
    {
      this->WeldingProcess_.set (std::move (x));
    }

    const WeldCharacteristicNominalBaseType::NonDestructiveTesting_optional& WeldCharacteristicNominalBaseType::
    NonDestructiveTesting () const
    {
      return this->NonDestructiveTesting_;
    }

    WeldCharacteristicNominalBaseType::NonDestructiveTesting_optional& WeldCharacteristicNominalBaseType::
    NonDestructiveTesting ()
    {
      return this->NonDestructiveTesting_;
    }

    void WeldCharacteristicNominalBaseType::
    NonDestructiveTesting (const NonDestructiveTesting_type& x)
    {
      this->NonDestructiveTesting_.set (x);
    }

    void WeldCharacteristicNominalBaseType::
    NonDestructiveTesting (const NonDestructiveTesting_optional& x)
    {
      this->NonDestructiveTesting_ = x;
    }

    void WeldCharacteristicNominalBaseType::
    NonDestructiveTesting (::std::unique_ptr< NonDestructiveTesting_type > x)
    {
      this->NonDestructiveTesting_.set (std::move (x));
    }


    // WeldCharacteristicDefinitionBaseType
    //


    // WeldCharacteristicMeasurementBaseType
    //


    // WeldFilletCharacteristicMeasurementType
    //

    const WeldFilletCharacteristicMeasurementType::LocationSignificance_type& WeldFilletCharacteristicMeasurementType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldFilletCharacteristicMeasurementType::LocationSignificance_type& WeldFilletCharacteristicMeasurementType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldFilletCharacteristicMeasurementType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldFilletCharacteristicMeasurementType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldFilletCharacteristicMeasurementType::BothSides_optional& WeldFilletCharacteristicMeasurementType::
    BothSides () const
    {
      return this->BothSides_;
    }

    WeldFilletCharacteristicMeasurementType::BothSides_optional& WeldFilletCharacteristicMeasurementType::
    BothSides ()
    {
      return this->BothSides_;
    }

    void WeldFilletCharacteristicMeasurementType::
    BothSides (const BothSides_type& x)
    {
      this->BothSides_.set (x);
    }

    void WeldFilletCharacteristicMeasurementType::
    BothSides (const BothSides_optional& x)
    {
      this->BothSides_ = x;
    }

    void WeldFilletCharacteristicMeasurementType::
    BothSides (::std::unique_ptr< BothSides_type > x)
    {
      this->BothSides_.set (std::move (x));
    }

    const WeldFilletCharacteristicMeasurementType::OneSide_optional& WeldFilletCharacteristicMeasurementType::
    OneSide () const
    {
      return this->OneSide_;
    }

    WeldFilletCharacteristicMeasurementType::OneSide_optional& WeldFilletCharacteristicMeasurementType::
    OneSide ()
    {
      return this->OneSide_;
    }

    void WeldFilletCharacteristicMeasurementType::
    OneSide (const OneSide_type& x)
    {
      this->OneSide_.set (x);
    }

    void WeldFilletCharacteristicMeasurementType::
    OneSide (const OneSide_optional& x)
    {
      this->OneSide_ = x;
    }

    void WeldFilletCharacteristicMeasurementType::
    OneSide (::std::unique_ptr< OneSide_type > x)
    {
      this->OneSide_.set (std::move (x));
    }


    // WeldPlugCharacteristicMeasurementType
    //

    const WeldPlugCharacteristicMeasurementType::LocationSignificance_type& WeldPlugCharacteristicMeasurementType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldPlugCharacteristicMeasurementType::LocationSignificance_type& WeldPlugCharacteristicMeasurementType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldPlugCharacteristicMeasurementType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldPlugCharacteristicMeasurementType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldPlugCharacteristicMeasurementType::SideParameters_optional& WeldPlugCharacteristicMeasurementType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldPlugCharacteristicMeasurementType::SideParameters_optional& WeldPlugCharacteristicMeasurementType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldPlugCharacteristicMeasurementType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldPlugCharacteristicMeasurementType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldPlugCharacteristicMeasurementType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldSlotCharacteristicMeasurementType
    //

    const WeldSlotCharacteristicMeasurementType::LocationSignificance_type& WeldSlotCharacteristicMeasurementType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldSlotCharacteristicMeasurementType::LocationSignificance_type& WeldSlotCharacteristicMeasurementType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldSlotCharacteristicMeasurementType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldSlotCharacteristicMeasurementType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldSlotCharacteristicMeasurementType::SideParameters_optional& WeldSlotCharacteristicMeasurementType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldSlotCharacteristicMeasurementType::SideParameters_optional& WeldSlotCharacteristicMeasurementType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldSlotCharacteristicMeasurementType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldSlotCharacteristicMeasurementType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldSlotCharacteristicMeasurementType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldSpotCharacteristicMeasurementType
    //

    const WeldSpotCharacteristicMeasurementType::LocationSignificance_type& WeldSpotCharacteristicMeasurementType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldSpotCharacteristicMeasurementType::LocationSignificance_type& WeldSpotCharacteristicMeasurementType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldSpotCharacteristicMeasurementType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldSpotCharacteristicMeasurementType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldSpotCharacteristicMeasurementType::SideParameters_optional& WeldSpotCharacteristicMeasurementType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldSpotCharacteristicMeasurementType::SideParameters_optional& WeldSpotCharacteristicMeasurementType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldSpotCharacteristicMeasurementType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldSpotCharacteristicMeasurementType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldSpotCharacteristicMeasurementType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }

    const WeldSpotCharacteristicMeasurementType::Projection_optional& WeldSpotCharacteristicMeasurementType::
    Projection () const
    {
      return this->Projection_;
    }

    WeldSpotCharacteristicMeasurementType::Projection_optional& WeldSpotCharacteristicMeasurementType::
    Projection ()
    {
      return this->Projection_;
    }

    void WeldSpotCharacteristicMeasurementType::
    Projection (const Projection_type& x)
    {
      this->Projection_.set (x);
    }

    void WeldSpotCharacteristicMeasurementType::
    Projection (const Projection_optional& x)
    {
      this->Projection_ = x;
    }


    // WeldStudCharacteristicMeasurementType
    //

    const WeldStudCharacteristicMeasurementType::ArrowSideParameters_optional& WeldStudCharacteristicMeasurementType::
    ArrowSideParameters () const
    {
      return this->ArrowSideParameters_;
    }

    WeldStudCharacteristicMeasurementType::ArrowSideParameters_optional& WeldStudCharacteristicMeasurementType::
    ArrowSideParameters ()
    {
      return this->ArrowSideParameters_;
    }

    void WeldStudCharacteristicMeasurementType::
    ArrowSideParameters (const ArrowSideParameters_type& x)
    {
      this->ArrowSideParameters_.set (x);
    }

    void WeldStudCharacteristicMeasurementType::
    ArrowSideParameters (const ArrowSideParameters_optional& x)
    {
      this->ArrowSideParameters_ = x;
    }

    void WeldStudCharacteristicMeasurementType::
    ArrowSideParameters (::std::unique_ptr< ArrowSideParameters_type > x)
    {
      this->ArrowSideParameters_.set (std::move (x));
    }


    // WeldSeamCharacteristicMeasurementType
    //

    const WeldSeamCharacteristicMeasurementType::LocationSignificance_type& WeldSeamCharacteristicMeasurementType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldSeamCharacteristicMeasurementType::LocationSignificance_type& WeldSeamCharacteristicMeasurementType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldSeamCharacteristicMeasurementType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldSeamCharacteristicMeasurementType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldSeamCharacteristicMeasurementType::SideParameters_optional& WeldSeamCharacteristicMeasurementType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldSeamCharacteristicMeasurementType::SideParameters_optional& WeldSeamCharacteristicMeasurementType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldSeamCharacteristicMeasurementType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldSeamCharacteristicMeasurementType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldSeamCharacteristicMeasurementType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldSurfacingCharacteristicMeasurementType
    //

    const WeldSurfacingCharacteristicMeasurementType::ArrowSideParameters_optional& WeldSurfacingCharacteristicMeasurementType::
    ArrowSideParameters () const
    {
      return this->ArrowSideParameters_;
    }

    WeldSurfacingCharacteristicMeasurementType::ArrowSideParameters_optional& WeldSurfacingCharacteristicMeasurementType::
    ArrowSideParameters ()
    {
      return this->ArrowSideParameters_;
    }

    void WeldSurfacingCharacteristicMeasurementType::
    ArrowSideParameters (const ArrowSideParameters_type& x)
    {
      this->ArrowSideParameters_.set (x);
    }

    void WeldSurfacingCharacteristicMeasurementType::
    ArrowSideParameters (const ArrowSideParameters_optional& x)
    {
      this->ArrowSideParameters_ = x;
    }

    void WeldSurfacingCharacteristicMeasurementType::
    ArrowSideParameters (::std::unique_ptr< ArrowSideParameters_type > x)
    {
      this->ArrowSideParameters_.set (std::move (x));
    }


    // WeldEdgeCharacteristicMeasurementType
    //

    const WeldEdgeCharacteristicMeasurementType::LocationSignificance_type& WeldEdgeCharacteristicMeasurementType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldEdgeCharacteristicMeasurementType::LocationSignificance_type& WeldEdgeCharacteristicMeasurementType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldEdgeCharacteristicMeasurementType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldEdgeCharacteristicMeasurementType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldEdgeCharacteristicMeasurementType::SideParameters_optional& WeldEdgeCharacteristicMeasurementType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldEdgeCharacteristicMeasurementType::SideParameters_optional& WeldEdgeCharacteristicMeasurementType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldEdgeCharacteristicMeasurementType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldEdgeCharacteristicMeasurementType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldEdgeCharacteristicMeasurementType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldGrooveCharacteristicMeasurementType
    //

    const WeldGrooveCharacteristicMeasurementType::OneSide_optional& WeldGrooveCharacteristicMeasurementType::
    OneSide () const
    {
      return this->OneSide_;
    }

    WeldGrooveCharacteristicMeasurementType::OneSide_optional& WeldGrooveCharacteristicMeasurementType::
    OneSide ()
    {
      return this->OneSide_;
    }

    void WeldGrooveCharacteristicMeasurementType::
    OneSide (const OneSide_type& x)
    {
      this->OneSide_.set (x);
    }

    void WeldGrooveCharacteristicMeasurementType::
    OneSide (const OneSide_optional& x)
    {
      this->OneSide_ = x;
    }

    void WeldGrooveCharacteristicMeasurementType::
    OneSide (::std::unique_ptr< OneSide_type > x)
    {
      this->OneSide_.set (std::move (x));
    }

    const WeldGrooveCharacteristicMeasurementType::BothSides_optional& WeldGrooveCharacteristicMeasurementType::
    BothSides () const
    {
      return this->BothSides_;
    }

    WeldGrooveCharacteristicMeasurementType::BothSides_optional& WeldGrooveCharacteristicMeasurementType::
    BothSides ()
    {
      return this->BothSides_;
    }

    void WeldGrooveCharacteristicMeasurementType::
    BothSides (const BothSides_type& x)
    {
      this->BothSides_.set (x);
    }

    void WeldGrooveCharacteristicMeasurementType::
    BothSides (const BothSides_optional& x)
    {
      this->BothSides_ = x;
    }

    void WeldGrooveCharacteristicMeasurementType::
    BothSides (::std::unique_ptr< BothSides_type > x)
    {
      this->BothSides_.set (std::move (x));
    }


    // WeldSquareCharacteristicMeasurementType
    //


    // WeldBevelCharacteristicMeasurementType
    //


    // WeldVCharacteristicMeasurementType
    //


    // WeldUCharacteristicMeasurementType
    //


    // WeldJCharacteristicMeasurementType
    //


    // WeldFlareVCharacteristicMeasurementType
    //


    // WeldFlareBevelCharacteristicMeasurementType
    //


    // WeldScarfCharacteristicMeasurementType
    //


    // WeldCompoundCharacteristicMeasurementType
    //

    const WeldCompoundCharacteristicMeasurementType::WeldCharacteristicMeasurementIds_type& WeldCompoundCharacteristicMeasurementType::
    WeldCharacteristicMeasurementIds () const
    {
      return this->WeldCharacteristicMeasurementIds_.get ();
    }

    WeldCompoundCharacteristicMeasurementType::WeldCharacteristicMeasurementIds_type& WeldCompoundCharacteristicMeasurementType::
    WeldCharacteristicMeasurementIds ()
    {
      return this->WeldCharacteristicMeasurementIds_.get ();
    }

    void WeldCompoundCharacteristicMeasurementType::
    WeldCharacteristicMeasurementIds (const WeldCharacteristicMeasurementIds_type& x)
    {
      this->WeldCharacteristicMeasurementIds_.set (x);
    }

    void WeldCompoundCharacteristicMeasurementType::
    WeldCharacteristicMeasurementIds (::std::unique_ptr< WeldCharacteristicMeasurementIds_type > x)
    {
      this->WeldCharacteristicMeasurementIds_.set (std::move (x));
    }


    // WeldCharacteristicItemBaseType
    //


    // WeldGrooveCharacteristicNominalType
    //

    const WeldGrooveCharacteristicNominalType::OneSide_optional& WeldGrooveCharacteristicNominalType::
    OneSide () const
    {
      return this->OneSide_;
    }

    WeldGrooveCharacteristicNominalType::OneSide_optional& WeldGrooveCharacteristicNominalType::
    OneSide ()
    {
      return this->OneSide_;
    }

    void WeldGrooveCharacteristicNominalType::
    OneSide (const OneSide_type& x)
    {
      this->OneSide_.set (x);
    }

    void WeldGrooveCharacteristicNominalType::
    OneSide (const OneSide_optional& x)
    {
      this->OneSide_ = x;
    }

    void WeldGrooveCharacteristicNominalType::
    OneSide (::std::unique_ptr< OneSide_type > x)
    {
      this->OneSide_.set (std::move (x));
    }

    const WeldGrooveCharacteristicNominalType::BothSides_optional& WeldGrooveCharacteristicNominalType::
    BothSides () const
    {
      return this->BothSides_;
    }

    WeldGrooveCharacteristicNominalType::BothSides_optional& WeldGrooveCharacteristicNominalType::
    BothSides ()
    {
      return this->BothSides_;
    }

    void WeldGrooveCharacteristicNominalType::
    BothSides (const BothSides_type& x)
    {
      this->BothSides_.set (x);
    }

    void WeldGrooveCharacteristicNominalType::
    BothSides (const BothSides_optional& x)
    {
      this->BothSides_ = x;
    }

    void WeldGrooveCharacteristicNominalType::
    BothSides (::std::unique_ptr< BothSides_type > x)
    {
      this->BothSides_.set (std::move (x));
    }


    // WeldFinishingType
    //

    const WeldFinishingType::ContourSymbol_type& WeldFinishingType::
    ContourSymbol () const
    {
      return this->ContourSymbol_.get ();
    }

    WeldFinishingType::ContourSymbol_type& WeldFinishingType::
    ContourSymbol ()
    {
      return this->ContourSymbol_.get ();
    }

    void WeldFinishingType::
    ContourSymbol (const ContourSymbol_type& x)
    {
      this->ContourSymbol_.set (x);
    }

    void WeldFinishingType::
    ContourSymbol (::std::unique_ptr< ContourSymbol_type > x)
    {
      this->ContourSymbol_.set (std::move (x));
    }

    const WeldFinishingType::FinishingDesignator_optional& WeldFinishingType::
    FinishingDesignator () const
    {
      return this->FinishingDesignator_;
    }

    WeldFinishingType::FinishingDesignator_optional& WeldFinishingType::
    FinishingDesignator ()
    {
      return this->FinishingDesignator_;
    }

    void WeldFinishingType::
    FinishingDesignator (const FinishingDesignator_type& x)
    {
      this->FinishingDesignator_.set (x);
    }

    void WeldFinishingType::
    FinishingDesignator (const FinishingDesignator_optional& x)
    {
      this->FinishingDesignator_ = x;
    }

    void WeldFinishingType::
    FinishingDesignator (::std::unique_ptr< FinishingDesignator_type > x)
    {
      this->FinishingDesignator_.set (std::move (x));
    }


    // WeldOneSideParametersBaseType
    //

    const WeldOneSideParametersBaseType::Finishing_optional& WeldOneSideParametersBaseType::
    Finishing () const
    {
      return this->Finishing_;
    }

    WeldOneSideParametersBaseType::Finishing_optional& WeldOneSideParametersBaseType::
    Finishing ()
    {
      return this->Finishing_;
    }

    void WeldOneSideParametersBaseType::
    Finishing (const Finishing_type& x)
    {
      this->Finishing_.set (x);
    }

    void WeldOneSideParametersBaseType::
    Finishing (const Finishing_optional& x)
    {
      this->Finishing_ = x;
    }

    void WeldOneSideParametersBaseType::
    Finishing (::std::unique_ptr< Finishing_type > x)
    {
      this->Finishing_.set (std::move (x));
    }


    // WeldOneSideParametersExtendSizeType
    //

    const WeldOneSideParametersExtendSizeType::Size_optional& WeldOneSideParametersExtendSizeType::
    Size () const
    {
      return this->Size_;
    }

    WeldOneSideParametersExtendSizeType::Size_optional& WeldOneSideParametersExtendSizeType::
    Size ()
    {
      return this->Size_;
    }

    void WeldOneSideParametersExtendSizeType::
    Size (const Size_type& x)
    {
      this->Size_.set (x);
    }

    void WeldOneSideParametersExtendSizeType::
    Size (const Size_optional& x)
    {
      this->Size_ = x;
    }

    void WeldOneSideParametersExtendSizeType::
    Size (::std::unique_ptr< Size_type > x)
    {
      this->Size_.set (std::move (x));
    }


    // WeldOneSideParametersExtendType
    //

    const WeldOneSideParametersExtendType::Length_optional& WeldOneSideParametersExtendType::
    Length () const
    {
      return this->Length_;
    }

    WeldOneSideParametersExtendType::Length_optional& WeldOneSideParametersExtendType::
    Length ()
    {
      return this->Length_;
    }

    void WeldOneSideParametersExtendType::
    Length (const Length_type& x)
    {
      this->Length_.set (x);
    }

    void WeldOneSideParametersExtendType::
    Length (const Length_optional& x)
    {
      this->Length_ = x;
    }

    void WeldOneSideParametersExtendType::
    Length (::std::unique_ptr< Length_type > x)
    {
      this->Length_.set (std::move (x));
    }

    const WeldOneSideParametersExtendType::Pitch_optional& WeldOneSideParametersExtendType::
    Pitch () const
    {
      return this->Pitch_;
    }

    WeldOneSideParametersExtendType::Pitch_optional& WeldOneSideParametersExtendType::
    Pitch ()
    {
      return this->Pitch_;
    }

    void WeldOneSideParametersExtendType::
    Pitch (const Pitch_type& x)
    {
      this->Pitch_.set (x);
    }

    void WeldOneSideParametersExtendType::
    Pitch (const Pitch_optional& x)
    {
      this->Pitch_ = x;
    }

    void WeldOneSideParametersExtendType::
    Pitch (::std::unique_ptr< Pitch_type > x)
    {
      this->Pitch_.set (std::move (x));
    }

    const WeldOneSideParametersExtendType::WeldNumber_optional& WeldOneSideParametersExtendType::
    WeldNumber () const
    {
      return this->WeldNumber_;
    }

    WeldOneSideParametersExtendType::WeldNumber_optional& WeldOneSideParametersExtendType::
    WeldNumber ()
    {
      return this->WeldNumber_;
    }

    void WeldOneSideParametersExtendType::
    WeldNumber (const WeldNumber_type& x)
    {
      this->WeldNumber_.set (x);
    }

    void WeldOneSideParametersExtendType::
    WeldNumber (const WeldNumber_optional& x)
    {
      this->WeldNumber_ = x;
    }

    void WeldOneSideParametersExtendType::
    WeldNumber (::std::unique_ptr< WeldNumber_type > x)
    {
      this->WeldNumber_.set (std::move (x));
    }


    // WeldGrooveOneSideParametersType
    //

    const WeldGrooveOneSideParametersType::Groove_optional& WeldGrooveOneSideParametersType::
    Groove () const
    {
      return this->Groove_;
    }

    WeldGrooveOneSideParametersType::Groove_optional& WeldGrooveOneSideParametersType::
    Groove ()
    {
      return this->Groove_;
    }

    void WeldGrooveOneSideParametersType::
    Groove (const Groove_type& x)
    {
      this->Groove_.set (x);
    }

    void WeldGrooveOneSideParametersType::
    Groove (const Groove_optional& x)
    {
      this->Groove_ = x;
    }

    void WeldGrooveOneSideParametersType::
    Groove (::std::unique_ptr< Groove_type > x)
    {
      this->Groove_.set (std::move (x));
    }

    const WeldGrooveOneSideParametersType::Angle_optional& WeldGrooveOneSideParametersType::
    Angle () const
    {
      return this->Angle_;
    }

    WeldGrooveOneSideParametersType::Angle_optional& WeldGrooveOneSideParametersType::
    Angle ()
    {
      return this->Angle_;
    }

    void WeldGrooveOneSideParametersType::
    Angle (const Angle_type& x)
    {
      this->Angle_.set (x);
    }

    void WeldGrooveOneSideParametersType::
    Angle (const Angle_optional& x)
    {
      this->Angle_ = x;
    }

    void WeldGrooveOneSideParametersType::
    Angle (::std::unique_ptr< Angle_type > x)
    {
      this->Angle_.set (std::move (x));
    }

    const WeldGrooveOneSideParametersType::RootOpening_optional& WeldGrooveOneSideParametersType::
    RootOpening () const
    {
      return this->RootOpening_;
    }

    WeldGrooveOneSideParametersType::RootOpening_optional& WeldGrooveOneSideParametersType::
    RootOpening ()
    {
      return this->RootOpening_;
    }

    void WeldGrooveOneSideParametersType::
    RootOpening (const RootOpening_type& x)
    {
      this->RootOpening_.set (x);
    }

    void WeldGrooveOneSideParametersType::
    RootOpening (const RootOpening_optional& x)
    {
      this->RootOpening_ = x;
    }

    void WeldGrooveOneSideParametersType::
    RootOpening (::std::unique_ptr< RootOpening_type > x)
    {
      this->RootOpening_.set (std::move (x));
    }

    const WeldGrooveOneSideParametersType::Length_optional& WeldGrooveOneSideParametersType::
    Length () const
    {
      return this->Length_;
    }

    WeldGrooveOneSideParametersType::Length_optional& WeldGrooveOneSideParametersType::
    Length ()
    {
      return this->Length_;
    }

    void WeldGrooveOneSideParametersType::
    Length (const Length_type& x)
    {
      this->Length_.set (x);
    }

    void WeldGrooveOneSideParametersType::
    Length (const Length_optional& x)
    {
      this->Length_ = x;
    }

    void WeldGrooveOneSideParametersType::
    Length (::std::unique_ptr< Length_type > x)
    {
      this->Length_.set (std::move (x));
    }

    const WeldGrooveOneSideParametersType::Pitch_optional& WeldGrooveOneSideParametersType::
    Pitch () const
    {
      return this->Pitch_;
    }

    WeldGrooveOneSideParametersType::Pitch_optional& WeldGrooveOneSideParametersType::
    Pitch ()
    {
      return this->Pitch_;
    }

    void WeldGrooveOneSideParametersType::
    Pitch (const Pitch_type& x)
    {
      this->Pitch_.set (x);
    }

    void WeldGrooveOneSideParametersType::
    Pitch (const Pitch_optional& x)
    {
      this->Pitch_ = x;
    }

    void WeldGrooveOneSideParametersType::
    Pitch (::std::unique_ptr< Pitch_type > x)
    {
      this->Pitch_.set (std::move (x));
    }


    // WeldSupplementarySymbolEnumType
    //

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType ()
    : ::xml_schema::string ()
    {
    }

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (value v)
    : ::xml_schema::string (_xsd_WeldSupplementarySymbolEnumType_literals_[v])
    {
    }

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (const WeldSupplementarySymbolEnumType& v,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    WeldSupplementarySymbolEnumType& WeldSupplementarySymbolEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_WeldSupplementarySymbolEnumType_literals_[v]);

      return *this;
    }


    // WeldGrooveOneSideType
    //

    const WeldGrooveOneSideType::LocationSignificance_type& WeldGrooveOneSideType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldGrooveOneSideType::LocationSignificance_type& WeldGrooveOneSideType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldGrooveOneSideType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldGrooveOneSideType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldGrooveOneSideType::SideParameters_optional& WeldGrooveOneSideType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldGrooveOneSideType::SideParameters_optional& WeldGrooveOneSideType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldGrooveOneSideType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldGrooveOneSideType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldGrooveOneSideType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }

    const WeldGrooveOneSideType::SupplementarySymbol_optional& WeldGrooveOneSideType::
    SupplementarySymbol () const
    {
      return this->SupplementarySymbol_;
    }

    WeldGrooveOneSideType::SupplementarySymbol_optional& WeldGrooveOneSideType::
    SupplementarySymbol ()
    {
      return this->SupplementarySymbol_;
    }

    void WeldGrooveOneSideType::
    SupplementarySymbol (const SupplementarySymbol_type& x)
    {
      this->SupplementarySymbol_.set (x);
    }

    void WeldGrooveOneSideType::
    SupplementarySymbol (const SupplementarySymbol_optional& x)
    {
      this->SupplementarySymbol_ = x;
    }

    void WeldGrooveOneSideType::
    SupplementarySymbol (::std::unique_ptr< SupplementarySymbol_type > x)
    {
      this->SupplementarySymbol_.set (std::move (x));
    }


    // WeldGrooveBothSidesBaseType
    //

    const WeldGrooveBothSidesBaseType::ArrowSideParameters_optional& WeldGrooveBothSidesBaseType::
    ArrowSideParameters () const
    {
      return this->ArrowSideParameters_;
    }

    WeldGrooveBothSidesBaseType::ArrowSideParameters_optional& WeldGrooveBothSidesBaseType::
    ArrowSideParameters ()
    {
      return this->ArrowSideParameters_;
    }

    void WeldGrooveBothSidesBaseType::
    ArrowSideParameters (const ArrowSideParameters_type& x)
    {
      this->ArrowSideParameters_.set (x);
    }

    void WeldGrooveBothSidesBaseType::
    ArrowSideParameters (const ArrowSideParameters_optional& x)
    {
      this->ArrowSideParameters_ = x;
    }

    void WeldGrooveBothSidesBaseType::
    ArrowSideParameters (::std::unique_ptr< ArrowSideParameters_type > x)
    {
      this->ArrowSideParameters_.set (std::move (x));
    }

    const WeldGrooveBothSidesBaseType::OtherSideParameters_optional& WeldGrooveBothSidesBaseType::
    OtherSideParameters () const
    {
      return this->OtherSideParameters_;
    }

    WeldGrooveBothSidesBaseType::OtherSideParameters_optional& WeldGrooveBothSidesBaseType::
    OtherSideParameters ()
    {
      return this->OtherSideParameters_;
    }

    void WeldGrooveBothSidesBaseType::
    OtherSideParameters (const OtherSideParameters_type& x)
    {
      this->OtherSideParameters_.set (x);
    }

    void WeldGrooveBothSidesBaseType::
    OtherSideParameters (const OtherSideParameters_optional& x)
    {
      this->OtherSideParameters_ = x;
    }

    void WeldGrooveBothSidesBaseType::
    OtherSideParameters (::std::unique_ptr< OtherSideParameters_type > x)
    {
      this->OtherSideParameters_.set (std::move (x));
    }


    // WeldGrooveBothSidesExtendedType
    //

    const WeldGrooveBothSidesExtendedType::Spacer_optional& WeldGrooveBothSidesExtendedType::
    Spacer () const
    {
      return this->Spacer_;
    }

    WeldGrooveBothSidesExtendedType::Spacer_optional& WeldGrooveBothSidesExtendedType::
    Spacer ()
    {
      return this->Spacer_;
    }

    void WeldGrooveBothSidesExtendedType::
    Spacer (const Spacer_type& x)
    {
      this->Spacer_.set (x);
    }

    void WeldGrooveBothSidesExtendedType::
    Spacer (const Spacer_optional& x)
    {
      this->Spacer_ = x;
    }


    // WeldSquareCharacteristicNominalType
    //


    // WeldBevelCharacteristicNominalType
    //


    // WeldVCharacteristicNominalType
    //


    // WeldUCharacteristicNominalType
    //


    // WeldJCharacteristicNominalType
    //


    // WeldFlareVCharacteristicNominalType
    //


    // WeldFlareBevelCharacteristicNominalType
    //


    // WeldScarfCharacteristicNominalType
    //


    // WeldFilletOneSideInBothSidesType
    //

    const WeldFilletOneSideInBothSidesType::LengthOfEachWeld_optional& WeldFilletOneSideInBothSidesType::
    LengthOfEachWeld () const
    {
      return this->LengthOfEachWeld_;
    }

    WeldFilletOneSideInBothSidesType::LengthOfEachWeld_optional& WeldFilletOneSideInBothSidesType::
    LengthOfEachWeld ()
    {
      return this->LengthOfEachWeld_;
    }

    void WeldFilletOneSideInBothSidesType::
    LengthOfEachWeld (const LengthOfEachWeld_type& x)
    {
      this->LengthOfEachWeld_.set (x);
    }

    void WeldFilletOneSideInBothSidesType::
    LengthOfEachWeld (const LengthOfEachWeld_optional& x)
    {
      this->LengthOfEachWeld_ = x;
    }

    void WeldFilletOneSideInBothSidesType::
    LengthOfEachWeld (::std::unique_ptr< LengthOfEachWeld_type > x)
    {
      this->LengthOfEachWeld_.set (std::move (x));
    }

    const WeldFilletOneSideInBothSidesType::Pitch_optional& WeldFilletOneSideInBothSidesType::
    Pitch () const
    {
      return this->Pitch_;
    }

    WeldFilletOneSideInBothSidesType::Pitch_optional& WeldFilletOneSideInBothSidesType::
    Pitch ()
    {
      return this->Pitch_;
    }

    void WeldFilletOneSideInBothSidesType::
    Pitch (const Pitch_type& x)
    {
      this->Pitch_.set (x);
    }

    void WeldFilletOneSideInBothSidesType::
    Pitch (const Pitch_optional& x)
    {
      this->Pitch_ = x;
    }

    void WeldFilletOneSideInBothSidesType::
    Pitch (::std::unique_ptr< Pitch_type > x)
    {
      this->Pitch_.set (std::move (x));
    }


    // WeldFilletUnequalLegLengthType
    //

    const WeldFilletUnequalLegLengthType::FirstLegLength_type& WeldFilletUnequalLegLengthType::
    FirstLegLength () const
    {
      return this->FirstLegLength_.get ();
    }

    WeldFilletUnequalLegLengthType::FirstLegLength_type& WeldFilletUnequalLegLengthType::
    FirstLegLength ()
    {
      return this->FirstLegLength_.get ();
    }

    void WeldFilletUnequalLegLengthType::
    FirstLegLength (const FirstLegLength_type& x)
    {
      this->FirstLegLength_.set (x);
    }

    void WeldFilletUnequalLegLengthType::
    FirstLegLength (::std::unique_ptr< FirstLegLength_type > x)
    {
      this->FirstLegLength_.set (std::move (x));
    }

    const WeldFilletUnequalLegLengthType::SecondLegLength_type& WeldFilletUnequalLegLengthType::
    SecondLegLength () const
    {
      return this->SecondLegLength_.get ();
    }

    WeldFilletUnequalLegLengthType::SecondLegLength_type& WeldFilletUnequalLegLengthType::
    SecondLegLength ()
    {
      return this->SecondLegLength_.get ();
    }

    void WeldFilletUnequalLegLengthType::
    SecondLegLength (const SecondLegLength_type& x)
    {
      this->SecondLegLength_.set (x);
    }

    void WeldFilletUnequalLegLengthType::
    SecondLegLength (::std::unique_ptr< SecondLegLength_type > x)
    {
      this->SecondLegLength_.set (std::move (x));
    }


    // WeldFilletEqualLegLengthType
    //

    const WeldFilletEqualLegLengthType::Size_optional& WeldFilletEqualLegLengthType::
    Size () const
    {
      return this->Size_;
    }

    WeldFilletEqualLegLengthType::Size_optional& WeldFilletEqualLegLengthType::
    Size ()
    {
      return this->Size_;
    }

    void WeldFilletEqualLegLengthType::
    Size (const Size_type& x)
    {
      this->Size_.set (x);
    }

    void WeldFilletEqualLegLengthType::
    Size (const Size_optional& x)
    {
      this->Size_ = x;
    }

    void WeldFilletEqualLegLengthType::
    Size (::std::unique_ptr< Size_type > x)
    {
      this->Size_.set (std::move (x));
    }

    const WeldFilletEqualLegLengthType::LengthOfEachWeld_optional& WeldFilletEqualLegLengthType::
    LengthOfEachWeld () const
    {
      return this->LengthOfEachWeld_;
    }

    WeldFilletEqualLegLengthType::LengthOfEachWeld_optional& WeldFilletEqualLegLengthType::
    LengthOfEachWeld ()
    {
      return this->LengthOfEachWeld_;
    }

    void WeldFilletEqualLegLengthType::
    LengthOfEachWeld (const LengthOfEachWeld_type& x)
    {
      this->LengthOfEachWeld_.set (x);
    }

    void WeldFilletEqualLegLengthType::
    LengthOfEachWeld (const LengthOfEachWeld_optional& x)
    {
      this->LengthOfEachWeld_ = x;
    }

    void WeldFilletEqualLegLengthType::
    LengthOfEachWeld (::std::unique_ptr< LengthOfEachWeld_type > x)
    {
      this->LengthOfEachWeld_.set (std::move (x));
    }

    const WeldFilletEqualLegLengthType::Pitch_optional& WeldFilletEqualLegLengthType::
    Pitch () const
    {
      return this->Pitch_;
    }

    WeldFilletEqualLegLengthType::Pitch_optional& WeldFilletEqualLegLengthType::
    Pitch ()
    {
      return this->Pitch_;
    }

    void WeldFilletEqualLegLengthType::
    Pitch (const Pitch_type& x)
    {
      this->Pitch_.set (x);
    }

    void WeldFilletEqualLegLengthType::
    Pitch (const Pitch_optional& x)
    {
      this->Pitch_ = x;
    }

    void WeldFilletEqualLegLengthType::
    Pitch (::std::unique_ptr< Pitch_type > x)
    {
      this->Pitch_.set (std::move (x));
    }


    // WeldFilletOneSideType
    //

    const WeldFilletOneSideType::EqualLegLength_optional& WeldFilletOneSideType::
    EqualLegLength () const
    {
      return this->EqualLegLength_;
    }

    WeldFilletOneSideType::EqualLegLength_optional& WeldFilletOneSideType::
    EqualLegLength ()
    {
      return this->EqualLegLength_;
    }

    void WeldFilletOneSideType::
    EqualLegLength (const EqualLegLength_type& x)
    {
      this->EqualLegLength_.set (x);
    }

    void WeldFilletOneSideType::
    EqualLegLength (const EqualLegLength_optional& x)
    {
      this->EqualLegLength_ = x;
    }

    void WeldFilletOneSideType::
    EqualLegLength (::std::unique_ptr< EqualLegLength_type > x)
    {
      this->EqualLegLength_.set (std::move (x));
    }

    const WeldFilletOneSideType::UnEqualLegLength_optional& WeldFilletOneSideType::
    UnEqualLegLength () const
    {
      return this->UnEqualLegLength_;
    }

    WeldFilletOneSideType::UnEqualLegLength_optional& WeldFilletOneSideType::
    UnEqualLegLength ()
    {
      return this->UnEqualLegLength_;
    }

    void WeldFilletOneSideType::
    UnEqualLegLength (const UnEqualLegLength_type& x)
    {
      this->UnEqualLegLength_.set (x);
    }

    void WeldFilletOneSideType::
    UnEqualLegLength (const UnEqualLegLength_optional& x)
    {
      this->UnEqualLegLength_ = x;
    }

    void WeldFilletOneSideType::
    UnEqualLegLength (::std::unique_ptr< UnEqualLegLength_type > x)
    {
      this->UnEqualLegLength_.set (std::move (x));
    }


    // WeldFilletBothSidesType
    //

    const WeldFilletBothSidesType::ArrowSide_optional& WeldFilletBothSidesType::
    ArrowSide () const
    {
      return this->ArrowSide_;
    }

    WeldFilletBothSidesType::ArrowSide_optional& WeldFilletBothSidesType::
    ArrowSide ()
    {
      return this->ArrowSide_;
    }

    void WeldFilletBothSidesType::
    ArrowSide (const ArrowSide_type& x)
    {
      this->ArrowSide_.set (x);
    }

    void WeldFilletBothSidesType::
    ArrowSide (const ArrowSide_optional& x)
    {
      this->ArrowSide_ = x;
    }

    void WeldFilletBothSidesType::
    ArrowSide (::std::unique_ptr< ArrowSide_type > x)
    {
      this->ArrowSide_.set (std::move (x));
    }

    const WeldFilletBothSidesType::OtherSide_optional& WeldFilletBothSidesType::
    OtherSide () const
    {
      return this->OtherSide_;
    }

    WeldFilletBothSidesType::OtherSide_optional& WeldFilletBothSidesType::
    OtherSide ()
    {
      return this->OtherSide_;
    }

    void WeldFilletBothSidesType::
    OtherSide (const OtherSide_type& x)
    {
      this->OtherSide_.set (x);
    }

    void WeldFilletBothSidesType::
    OtherSide (const OtherSide_optional& x)
    {
      this->OtherSide_ = x;
    }

    void WeldFilletBothSidesType::
    OtherSide (::std::unique_ptr< OtherSide_type > x)
    {
      this->OtherSide_.set (std::move (x));
    }

    const WeldFilletBothSidesType::Staggered_optional& WeldFilletBothSidesType::
    Staggered () const
    {
      return this->Staggered_;
    }

    WeldFilletBothSidesType::Staggered_optional& WeldFilletBothSidesType::
    Staggered ()
    {
      return this->Staggered_;
    }

    void WeldFilletBothSidesType::
    Staggered (const Staggered_type& x)
    {
      this->Staggered_.set (x);
    }

    void WeldFilletBothSidesType::
    Staggered (const Staggered_optional& x)
    {
      this->Staggered_ = x;
    }


    // WeldCompoundCharacteristicNominalType
    //

    const WeldCompoundCharacteristicNominalType::WeldCharacteristicNominalIds_type& WeldCompoundCharacteristicNominalType::
    WeldCharacteristicNominalIds () const
    {
      return this->WeldCharacteristicNominalIds_.get ();
    }

    WeldCompoundCharacteristicNominalType::WeldCharacteristicNominalIds_type& WeldCompoundCharacteristicNominalType::
    WeldCharacteristicNominalIds ()
    {
      return this->WeldCharacteristicNominalIds_.get ();
    }

    void WeldCompoundCharacteristicNominalType::
    WeldCharacteristicNominalIds (const WeldCharacteristicNominalIds_type& x)
    {
      this->WeldCharacteristicNominalIds_.set (x);
    }

    void WeldCompoundCharacteristicNominalType::
    WeldCharacteristicNominalIds (::std::unique_ptr< WeldCharacteristicNominalIds_type > x)
    {
      this->WeldCharacteristicNominalIds_.set (std::move (x));
    }


    // WeldFilletCharacteristicNominalType
    //

    const WeldFilletCharacteristicNominalType::LocationSignificance_type& WeldFilletCharacteristicNominalType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldFilletCharacteristicNominalType::LocationSignificance_type& WeldFilletCharacteristicNominalType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldFilletCharacteristicNominalType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldFilletCharacteristicNominalType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldFilletCharacteristicNominalType::BothSides_optional& WeldFilletCharacteristicNominalType::
    BothSides () const
    {
      return this->BothSides_;
    }

    WeldFilletCharacteristicNominalType::BothSides_optional& WeldFilletCharacteristicNominalType::
    BothSides ()
    {
      return this->BothSides_;
    }

    void WeldFilletCharacteristicNominalType::
    BothSides (const BothSides_type& x)
    {
      this->BothSides_.set (x);
    }

    void WeldFilletCharacteristicNominalType::
    BothSides (const BothSides_optional& x)
    {
      this->BothSides_ = x;
    }

    void WeldFilletCharacteristicNominalType::
    BothSides (::std::unique_ptr< BothSides_type > x)
    {
      this->BothSides_.set (std::move (x));
    }

    const WeldFilletCharacteristicNominalType::OneSide_optional& WeldFilletCharacteristicNominalType::
    OneSide () const
    {
      return this->OneSide_;
    }

    WeldFilletCharacteristicNominalType::OneSide_optional& WeldFilletCharacteristicNominalType::
    OneSide ()
    {
      return this->OneSide_;
    }

    void WeldFilletCharacteristicNominalType::
    OneSide (const OneSide_type& x)
    {
      this->OneSide_.set (x);
    }

    void WeldFilletCharacteristicNominalType::
    OneSide (const OneSide_optional& x)
    {
      this->OneSide_ = x;
    }

    void WeldFilletCharacteristicNominalType::
    OneSide (::std::unique_ptr< OneSide_type > x)
    {
      this->OneSide_.set (std::move (x));
    }


    // WeldPlugOneSideParametersType
    //

    const WeldPlugOneSideParametersType::Angle_optional& WeldPlugOneSideParametersType::
    Angle () const
    {
      return this->Angle_;
    }

    WeldPlugOneSideParametersType::Angle_optional& WeldPlugOneSideParametersType::
    Angle ()
    {
      return this->Angle_;
    }

    void WeldPlugOneSideParametersType::
    Angle (const Angle_type& x)
    {
      this->Angle_.set (x);
    }

    void WeldPlugOneSideParametersType::
    Angle (const Angle_optional& x)
    {
      this->Angle_ = x;
    }

    void WeldPlugOneSideParametersType::
    Angle (::std::unique_ptr< Angle_type > x)
    {
      this->Angle_.set (std::move (x));
    }

    const WeldPlugOneSideParametersType::Depth_optional& WeldPlugOneSideParametersType::
    Depth () const
    {
      return this->Depth_;
    }

    WeldPlugOneSideParametersType::Depth_optional& WeldPlugOneSideParametersType::
    Depth ()
    {
      return this->Depth_;
    }

    void WeldPlugOneSideParametersType::
    Depth (const Depth_type& x)
    {
      this->Depth_.set (x);
    }

    void WeldPlugOneSideParametersType::
    Depth (const Depth_optional& x)
    {
      this->Depth_ = x;
    }

    void WeldPlugOneSideParametersType::
    Depth (::std::unique_ptr< Depth_type > x)
    {
      this->Depth_.set (std::move (x));
    }


    // WeldPlugCharacteristicNominalType
    //

    const WeldPlugCharacteristicNominalType::LocationSignificance_type& WeldPlugCharacteristicNominalType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldPlugCharacteristicNominalType::LocationSignificance_type& WeldPlugCharacteristicNominalType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldPlugCharacteristicNominalType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldPlugCharacteristicNominalType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldPlugCharacteristicNominalType::SideParameters_optional& WeldPlugCharacteristicNominalType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldPlugCharacteristicNominalType::SideParameters_optional& WeldPlugCharacteristicNominalType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldPlugCharacteristicNominalType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldPlugCharacteristicNominalType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldPlugCharacteristicNominalType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldSlotCharacteristicNominalType
    //

    const WeldSlotCharacteristicNominalType::LocationSignificance_type& WeldSlotCharacteristicNominalType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldSlotCharacteristicNominalType::LocationSignificance_type& WeldSlotCharacteristicNominalType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldSlotCharacteristicNominalType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldSlotCharacteristicNominalType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldSlotCharacteristicNominalType::SideParameters_optional& WeldSlotCharacteristicNominalType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldSlotCharacteristicNominalType::SideParameters_optional& WeldSlotCharacteristicNominalType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldSlotCharacteristicNominalType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldSlotCharacteristicNominalType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldSlotCharacteristicNominalType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldSpotOneSideParametersType
    //

    const WeldSpotOneSideParametersType::Pitch_optional& WeldSpotOneSideParametersType::
    Pitch () const
    {
      return this->Pitch_;
    }

    WeldSpotOneSideParametersType::Pitch_optional& WeldSpotOneSideParametersType::
    Pitch ()
    {
      return this->Pitch_;
    }

    void WeldSpotOneSideParametersType::
    Pitch (const Pitch_type& x)
    {
      this->Pitch_.set (x);
    }

    void WeldSpotOneSideParametersType::
    Pitch (const Pitch_optional& x)
    {
      this->Pitch_ = x;
    }

    void WeldSpotOneSideParametersType::
    Pitch (::std::unique_ptr< Pitch_type > x)
    {
      this->Pitch_.set (std::move (x));
    }

    const WeldSpotOneSideParametersType::WeldNumber_optional& WeldSpotOneSideParametersType::
    WeldNumber () const
    {
      return this->WeldNumber_;
    }

    WeldSpotOneSideParametersType::WeldNumber_optional& WeldSpotOneSideParametersType::
    WeldNumber ()
    {
      return this->WeldNumber_;
    }

    void WeldSpotOneSideParametersType::
    WeldNumber (const WeldNumber_type& x)
    {
      this->WeldNumber_.set (x);
    }

    void WeldSpotOneSideParametersType::
    WeldNumber (const WeldNumber_optional& x)
    {
      this->WeldNumber_ = x;
    }

    void WeldSpotOneSideParametersType::
    WeldNumber (::std::unique_ptr< WeldNumber_type > x)
    {
      this->WeldNumber_.set (std::move (x));
    }


    // WeldSpotCharacteristicNominalType
    //

    const WeldSpotCharacteristicNominalType::LocationSignificance_type& WeldSpotCharacteristicNominalType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldSpotCharacteristicNominalType::LocationSignificance_type& WeldSpotCharacteristicNominalType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldSpotCharacteristicNominalType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldSpotCharacteristicNominalType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldSpotCharacteristicNominalType::SideParameters_optional& WeldSpotCharacteristicNominalType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldSpotCharacteristicNominalType::SideParameters_optional& WeldSpotCharacteristicNominalType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldSpotCharacteristicNominalType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldSpotCharacteristicNominalType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldSpotCharacteristicNominalType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }

    const WeldSpotCharacteristicNominalType::Projection_optional& WeldSpotCharacteristicNominalType::
    Projection () const
    {
      return this->Projection_;
    }

    WeldSpotCharacteristicNominalType::Projection_optional& WeldSpotCharacteristicNominalType::
    Projection ()
    {
      return this->Projection_;
    }

    void WeldSpotCharacteristicNominalType::
    Projection (const Projection_type& x)
    {
      this->Projection_.set (x);
    }

    void WeldSpotCharacteristicNominalType::
    Projection (const Projection_optional& x)
    {
      this->Projection_ = x;
    }


    // WeldStudCharacteristicNominalType
    //

    const WeldStudCharacteristicNominalType::ArrowSideParameters_optional& WeldStudCharacteristicNominalType::
    ArrowSideParameters () const
    {
      return this->ArrowSideParameters_;
    }

    WeldStudCharacteristicNominalType::ArrowSideParameters_optional& WeldStudCharacteristicNominalType::
    ArrowSideParameters ()
    {
      return this->ArrowSideParameters_;
    }

    void WeldStudCharacteristicNominalType::
    ArrowSideParameters (const ArrowSideParameters_type& x)
    {
      this->ArrowSideParameters_.set (x);
    }

    void WeldStudCharacteristicNominalType::
    ArrowSideParameters (const ArrowSideParameters_optional& x)
    {
      this->ArrowSideParameters_ = x;
    }

    void WeldStudCharacteristicNominalType::
    ArrowSideParameters (::std::unique_ptr< ArrowSideParameters_type > x)
    {
      this->ArrowSideParameters_.set (std::move (x));
    }


    // WeldSeamCharacteristicNominalType
    //

    const WeldSeamCharacteristicNominalType::LocationSignificance_type& WeldSeamCharacteristicNominalType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldSeamCharacteristicNominalType::LocationSignificance_type& WeldSeamCharacteristicNominalType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldSeamCharacteristicNominalType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldSeamCharacteristicNominalType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldSeamCharacteristicNominalType::SideParameters_optional& WeldSeamCharacteristicNominalType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldSeamCharacteristicNominalType::SideParameters_optional& WeldSeamCharacteristicNominalType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldSeamCharacteristicNominalType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldSeamCharacteristicNominalType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldSeamCharacteristicNominalType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldSurfacingCharacteristicNominalType
    //

    const WeldSurfacingCharacteristicNominalType::ArrowSideParameters_optional& WeldSurfacingCharacteristicNominalType::
    ArrowSideParameters () const
    {
      return this->ArrowSideParameters_;
    }

    WeldSurfacingCharacteristicNominalType::ArrowSideParameters_optional& WeldSurfacingCharacteristicNominalType::
    ArrowSideParameters ()
    {
      return this->ArrowSideParameters_;
    }

    void WeldSurfacingCharacteristicNominalType::
    ArrowSideParameters (const ArrowSideParameters_type& x)
    {
      this->ArrowSideParameters_.set (x);
    }

    void WeldSurfacingCharacteristicNominalType::
    ArrowSideParameters (const ArrowSideParameters_optional& x)
    {
      this->ArrowSideParameters_ = x;
    }

    void WeldSurfacingCharacteristicNominalType::
    ArrowSideParameters (::std::unique_ptr< ArrowSideParameters_type > x)
    {
      this->ArrowSideParameters_.set (std::move (x));
    }


    // WeldEdgeCharacteristicNominalType
    //

    const WeldEdgeCharacteristicNominalType::LocationSignificance_type& WeldEdgeCharacteristicNominalType::
    LocationSignificance () const
    {
      return this->LocationSignificance_.get ();
    }

    WeldEdgeCharacteristicNominalType::LocationSignificance_type& WeldEdgeCharacteristicNominalType::
    LocationSignificance ()
    {
      return this->LocationSignificance_.get ();
    }

    void WeldEdgeCharacteristicNominalType::
    LocationSignificance (const LocationSignificance_type& x)
    {
      this->LocationSignificance_.set (x);
    }

    void WeldEdgeCharacteristicNominalType::
    LocationSignificance (::std::unique_ptr< LocationSignificance_type > x)
    {
      this->LocationSignificance_.set (std::move (x));
    }

    const WeldEdgeCharacteristicNominalType::SideParameters_optional& WeldEdgeCharacteristicNominalType::
    SideParameters () const
    {
      return this->SideParameters_;
    }

    WeldEdgeCharacteristicNominalType::SideParameters_optional& WeldEdgeCharacteristicNominalType::
    SideParameters ()
    {
      return this->SideParameters_;
    }

    void WeldEdgeCharacteristicNominalType::
    SideParameters (const SideParameters_type& x)
    {
      this->SideParameters_.set (x);
    }

    void WeldEdgeCharacteristicNominalType::
    SideParameters (const SideParameters_optional& x)
    {
      this->SideParameters_ = x;
    }

    void WeldEdgeCharacteristicNominalType::
    SideParameters (::std::unique_ptr< SideParameters_type > x)
    {
      this->SideParameters_.set (std::move (x));
    }


    // WeldFilletCharacteristicDefinitionType
    //


    // WeldPlugCharacteristicDefinitionType
    //


    // WeldSlotCharacteristicDefinitionType
    //


    // WeldSpotCharacteristicDefinitionType
    //


    // WeldStudCharacteristicDefinitionType
    //


    // WeldSeamCharacteristicDefinitionType
    //


    // WeldSurfacingCharacteristicDefinitionType
    //


    // WeldEdgeCharacteristicDefinitionType
    //


    // WeldSquareCharacteristicDefinitionType
    //


    // WeldBevelCharacteristicDefinitionType
    //


    // WeldVCharacteristicDefinitionType
    //


    // WeldUCharacteristicDefinitionType
    //


    // WeldJCharacteristicDefinitionType
    //


    // WeldFlareVCharacteristicDefinitionType
    //


    // WeldFlareBevelCharacteristicDefinitionType
    //


    // WeldScarfCharacteristicDefinitionType
    //


    // WeldCompoundCharacteristicDefinitionType
    //

    const WeldCompoundCharacteristicDefinitionType::WeldCharacteristicDefinitionIds_type& WeldCompoundCharacteristicDefinitionType::
    WeldCharacteristicDefinitionIds () const
    {
      return this->WeldCharacteristicDefinitionIds_.get ();
    }

    WeldCompoundCharacteristicDefinitionType::WeldCharacteristicDefinitionIds_type& WeldCompoundCharacteristicDefinitionType::
    WeldCharacteristicDefinitionIds ()
    {
      return this->WeldCharacteristicDefinitionIds_.get ();
    }

    void WeldCompoundCharacteristicDefinitionType::
    WeldCharacteristicDefinitionIds (const WeldCharacteristicDefinitionIds_type& x)
    {
      this->WeldCharacteristicDefinitionIds_.set (x);
    }

    void WeldCompoundCharacteristicDefinitionType::
    WeldCharacteristicDefinitionIds (::std::unique_ptr< WeldCharacteristicDefinitionIds_type > x)
    {
      this->WeldCharacteristicDefinitionIds_.set (std::move (x));
    }


    // WeldFilletCharacteristicItemType
    //


    // WeldPlugCharacteristicItemType
    //


    // WeldSlotCharacteristicItemType
    //


    // WeldSpotCharacteristicItemType
    //


    // WeldStudCharacteristicItemType
    //


    // WeldSeamCharacteristicItemType
    //


    // WeldSurfacingCharacteristicItemType
    //


    // WeldEdgeCharacteristicItemType
    //


    // WeldSquareCharacteristicItemType
    //


    // WeldBevelCharacteristicItemType
    //


    // WeldVCharacteristicItemType
    //


    // WeldUCharacteristicItemType
    //


    // WeldJCharacteristicItemType
    //


    // WeldFlareVCharacteristicItemType
    //


    // WeldFlareBevelCharacteristicItemType
    //


    // WeldScarfCharacteristicItemType
    //


    // WeldCompoundCharacteristicItemType
    //

    const WeldCompoundCharacteristicItemType::WeldCharacteristicItemIds_type& WeldCompoundCharacteristicItemType::
    WeldCharacteristicItemIds () const
    {
      return this->WeldCharacteristicItemIds_.get ();
    }

    WeldCompoundCharacteristicItemType::WeldCharacteristicItemIds_type& WeldCompoundCharacteristicItemType::
    WeldCharacteristicItemIds ()
    {
      return this->WeldCharacteristicItemIds_.get ();
    }

    void WeldCompoundCharacteristicItemType::
    WeldCharacteristicItemIds (const WeldCharacteristicItemIds_type& x)
    {
      this->WeldCharacteristicItemIds_.set (x);
    }

    void WeldCompoundCharacteristicItemType::
    WeldCharacteristicItemIds (::std::unique_ptr< WeldCharacteristicItemIds_type > x)
    {
      this->WeldCharacteristicItemIds_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif30
  {
    // CharacteristicBaseType
    //

    CharacteristicBaseType::
    CharacteristicBaseType ()
    : ::xml_schema::type (),
      Attributes_ (this),
      Description_ (this),
      id_ (this)
    {
    }

    CharacteristicBaseType::
    CharacteristicBaseType (const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (this),
      Description_ (this),
      id_ (id, this)
    {
    }

    CharacteristicBaseType::
    CharacteristicBaseType (const CharacteristicBaseType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      Description_ (x.Description_, f, this),
      id_ (x.id_, f, this)
    {
    }

    CharacteristicBaseType::
    CharacteristicBaseType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (this),
      Description_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        // Description
        //
        if (n.name () == L"Description" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    CharacteristicBaseType& CharacteristicBaseType::
    operator= (const CharacteristicBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Attributes_ = x.Attributes_;
        this->Description_ = x.Description_;
        this->id_ = x.id_;
      }

      return *this;
    }

    CharacteristicBaseType::
    ~CharacteristicBaseType ()
    {
    }

    // CharacteristicItemBaseType
    //

    CharacteristicItemBaseType::
    CharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicBaseType (),
      Name_ (this),
      CharacteristicDesignator_ (this),
      FeatureItemIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      NotableEventIds_ (this),
      MeasurementDeviceIds_ (this),
      CharacteristicNominalId_ (this),
      LocationOnDrawing_ (this),
      VirtualMeasurement_ (this)
    {
    }

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const id_type& id,
                                const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicBaseType (id),
      Name_ (this),
      CharacteristicDesignator_ (this),
      FeatureItemIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      NotableEventIds_ (this),
      MeasurementDeviceIds_ (this),
      CharacteristicNominalId_ (CharacteristicNominalId, this),
      LocationOnDrawing_ (this),
      VirtualMeasurement_ (this)
    {
    }

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const id_type& id,
                                ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicBaseType (id),
      Name_ (this),
      CharacteristicDesignator_ (this),
      FeatureItemIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      NotableEventIds_ (this),
      MeasurementDeviceIds_ (this),
      CharacteristicNominalId_ (std::move (CharacteristicNominalId), this),
      LocationOnDrawing_ (this),
      VirtualMeasurement_ (this)
    {
    }

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const CharacteristicItemBaseType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (x, f, c),
      Name_ (x.Name_, f, this),
      CharacteristicDesignator_ (x.CharacteristicDesignator_, f, this),
      FeatureItemIds_ (x.FeatureItemIds_, f, this),
      SubstituteFeatureAlgorithm_ (x.SubstituteFeatureAlgorithm_, f, this),
      NotableEventIds_ (x.NotableEventIds_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      CharacteristicNominalId_ (x.CharacteristicNominalId_, f, this),
      LocationOnDrawing_ (x.LocationOnDrawing_, f, this),
      VirtualMeasurement_ (x.VirtualMeasurement_, f, this)
    {
    }

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      Name_ (this),
      CharacteristicDesignator_ (this),
      FeatureItemIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      NotableEventIds_ (this),
      MeasurementDeviceIds_ (this),
      CharacteristicNominalId_ (this),
      LocationOnDrawing_ (this),
      VirtualMeasurement_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicItemBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Name
        //
        if (n.name () == L"Name" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicDesignator
        //
        if (n.name () == L"CharacteristicDesignator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicDesignator_type > r (
            CharacteristicDesignator_traits::create (i, f, this));

          if (!this->CharacteristicDesignator_)
          {
            this->CharacteristicDesignator_.set (::std::move (r));
            continue;
          }
        }

        // FeatureItemIds
        //
        if (n.name () == L"FeatureItemIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureItemIds_type > r (
            FeatureItemIds_traits::create (i, f, this));

          if (!this->FeatureItemIds_)
          {
            this->FeatureItemIds_.set (::std::move (r));
            continue;
          }
        }

        // SubstituteFeatureAlgorithm
        //
        if (n.name () == L"SubstituteFeatureAlgorithm" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SubstituteFeatureAlgorithm_type > r (
            SubstituteFeatureAlgorithm_traits::create (i, f, this));

          if (!this->SubstituteFeatureAlgorithm_)
          {
            this->SubstituteFeatureAlgorithm_.set (::std::move (r));
            continue;
          }
        }

        // NotableEventIds
        //
        if (n.name () == L"NotableEventIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotableEventIds_type > r (
            NotableEventIds_traits::create (i, f, this));

          if (!this->NotableEventIds_)
          {
            this->NotableEventIds_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == L"MeasurementDeviceIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicNominalId
        //
        if (n.name () == L"CharacteristicNominalId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicNominalId_type > r (
            CharacteristicNominalId_traits::create (i, f, this));

          if (!CharacteristicNominalId_.present ())
          {
            this->CharacteristicNominalId_.set (::std::move (r));
            continue;
          }
        }

        // LocationOnDrawing
        //
        if (n.name () == L"LocationOnDrawing" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationOnDrawing_type > r (
            LocationOnDrawing_traits::create (i, f, this));

          if (!this->LocationOnDrawing_)
          {
            this->LocationOnDrawing_.set (::std::move (r));
            continue;
          }
        }

        // VirtualMeasurement
        //
        if (n.name () == L"VirtualMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< VirtualMeasurement_type > r (
            VirtualMeasurement_traits::create (i, f, this));

          if (!this->VirtualMeasurement_)
          {
            this->VirtualMeasurement_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!CharacteristicNominalId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicNominalId",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CharacteristicItemBaseType& CharacteristicItemBaseType::
    operator= (const CharacteristicItemBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicBaseType& > (*this) = x;
        this->Name_ = x.Name_;
        this->CharacteristicDesignator_ = x.CharacteristicDesignator_;
        this->FeatureItemIds_ = x.FeatureItemIds_;
        this->SubstituteFeatureAlgorithm_ = x.SubstituteFeatureAlgorithm_;
        this->NotableEventIds_ = x.NotableEventIds_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->CharacteristicNominalId_ = x.CharacteristicNominalId_;
        this->LocationOnDrawing_ = x.LocationOnDrawing_;
        this->VirtualMeasurement_ = x.VirtualMeasurement_;
      }

      return *this;
    }

    CharacteristicItemBaseType::
    ~CharacteristicItemBaseType ()
    {
    }

    // CriticalityLevelEnumType
    //

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CriticalityLevelEnumType_convert ();
    }

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (const xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CriticalityLevelEnumType_convert ();
    }

    CriticalityLevelEnumType::
    CriticalityLevelEnumType (const ::std::wstring& s,
                              const xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CriticalityLevelEnumType_convert ();
    }

    CriticalityLevelEnumType* CriticalityLevelEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriticalityLevelEnumType (*this, f, c);
    }

    CriticalityLevelEnumType::value CriticalityLevelEnumType::
    _xsd_CriticalityLevelEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_CriticalityLevelEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CriticalityLevelEnumType_indexes_,
                        _xsd_CriticalityLevelEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_CriticalityLevelEnumType_indexes_ + 5 || _xsd_CriticalityLevelEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const CriticalityLevelEnumType::
    _xsd_CriticalityLevelEnumType_literals_[5] =
    {
      L"MINOR",
      L"MAJOR",
      L"CRITICAL",
      L"KEY",
      L"UNDEFINED"
    };

    const CriticalityLevelEnumType::value CriticalityLevelEnumType::
    _xsd_CriticalityLevelEnumType_indexes_[5] =
    {
      ::xsd::qif30::CriticalityLevelEnumType::CRITICAL,
      ::xsd::qif30::CriticalityLevelEnumType::KEY,
      ::xsd::qif30::CriticalityLevelEnumType::MAJOR,
      ::xsd::qif30::CriticalityLevelEnumType::MINOR,
      ::xsd::qif30::CriticalityLevelEnumType::UNDEFINED
    };

    // CriticalityAreaEnumType
    //

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CriticalityAreaEnumType_convert ();
    }

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (const xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CriticalityAreaEnumType_convert ();
    }

    CriticalityAreaEnumType::
    CriticalityAreaEnumType (const ::std::wstring& s,
                             const xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CriticalityAreaEnumType_convert ();
    }

    CriticalityAreaEnumType* CriticalityAreaEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriticalityAreaEnumType (*this, f, c);
    }

    CriticalityAreaEnumType::value CriticalityAreaEnumType::
    _xsd_CriticalityAreaEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_CriticalityAreaEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CriticalityAreaEnumType_indexes_,
                        _xsd_CriticalityAreaEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_CriticalityAreaEnumType_indexes_ + 6 || _xsd_CriticalityAreaEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const CriticalityAreaEnumType::
    _xsd_CriticalityAreaEnumType_literals_[6] =
    {
      L"SAFETY",
      L"MISSION",
      L"FIT",
      L"FUNCTION",
      L"APPEARANCE",
      L"UNDEFINED"
    };

    const CriticalityAreaEnumType::value CriticalityAreaEnumType::
    _xsd_CriticalityAreaEnumType_indexes_[6] =
    {
      ::xsd::qif30::CriticalityAreaEnumType::APPEARANCE,
      ::xsd::qif30::CriticalityAreaEnumType::FIT,
      ::xsd::qif30::CriticalityAreaEnumType::FUNCTION,
      ::xsd::qif30::CriticalityAreaEnumType::MISSION,
      ::xsd::qif30::CriticalityAreaEnumType::SAFETY,
      ::xsd::qif30::CriticalityAreaEnumType::UNDEFINED
    };

    // CriticalityType
    //

    CriticalityType::
    CriticalityType ()
    : ::xml_schema::type (),
      LevelEnum_ (this),
      OtherLevel_ (this),
      AreaEnum_ (this),
      OtherArea_ (this)
    {
    }

    CriticalityType::
    CriticalityType (const CriticalityType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      LevelEnum_ (x.LevelEnum_, f, this),
      OtherLevel_ (x.OtherLevel_, f, this),
      AreaEnum_ (x.AreaEnum_, f, this),
      OtherArea_ (x.OtherArea_, f, this)
    {
    }

    CriticalityType::
    CriticalityType (const xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      LevelEnum_ (this),
      OtherLevel_ (this),
      AreaEnum_ (this),
      OtherArea_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CriticalityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LevelEnum
        //
        if (n.name () == L"LevelEnum" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LevelEnum_type > r (
            LevelEnum_traits::create (i, f, this));

          if (!this->LevelEnum_)
          {
            this->LevelEnum_.set (::std::move (r));
            continue;
          }
        }

        // OtherLevel
        //
        if (n.name () == L"OtherLevel" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherLevel_type > r (
            OtherLevel_traits::create (i, f, this));

          if (!this->OtherLevel_)
          {
            this->OtherLevel_.set (::std::move (r));
            continue;
          }
        }

        // AreaEnum
        //
        if (n.name () == L"AreaEnum" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AreaEnum_type > r (
            AreaEnum_traits::create (i, f, this));

          if (!this->AreaEnum_)
          {
            this->AreaEnum_.set (::std::move (r));
            continue;
          }
        }

        // OtherArea
        //
        if (n.name () == L"OtherArea" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherArea_type > r (
            OtherArea_traits::create (i, f, this));

          if (!this->OtherArea_)
          {
            this->OtherArea_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CriticalityType* CriticalityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriticalityType (*this, f, c);
    }

    CriticalityType& CriticalityType::
    operator= (const CriticalityType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->LevelEnum_ = x.LevelEnum_;
        this->OtherLevel_ = x.OtherLevel_;
        this->AreaEnum_ = x.AreaEnum_;
        this->OtherArea_ = x.OtherArea_;
      }

      return *this;
    }

    CriticalityType::
    ~CriticalityType ()
    {
    }

    // CharacteristicBalloonLocationEnumType
    //

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CharacteristicBalloonLocationEnumType_convert ();
    }

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (const xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CharacteristicBalloonLocationEnumType_convert ();
    }

    CharacteristicBalloonLocationEnumType::
    CharacteristicBalloonLocationEnumType (const ::std::wstring& s,
                                           const xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CharacteristicBalloonLocationEnumType_convert ();
    }

    CharacteristicBalloonLocationEnumType* CharacteristicBalloonLocationEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicBalloonLocationEnumType (*this, f, c);
    }

    CharacteristicBalloonLocationEnumType::value CharacteristicBalloonLocationEnumType::
    _xsd_CharacteristicBalloonLocationEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_CharacteristicBalloonLocationEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CharacteristicBalloonLocationEnumType_indexes_,
                        _xsd_CharacteristicBalloonLocationEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_CharacteristicBalloonLocationEnumType_indexes_ + 6 || _xsd_CharacteristicBalloonLocationEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const CharacteristicBalloonLocationEnumType::
    _xsd_CharacteristicBalloonLocationEnumType_literals_[6] =
    {
      L"ABOVE",
      L"BELOW",
      L"LEFT",
      L"RIGHT",
      L"DEFAULT",
      L"UNDEFINED"
    };

    const CharacteristicBalloonLocationEnumType::value CharacteristicBalloonLocationEnumType::
    _xsd_CharacteristicBalloonLocationEnumType_indexes_[6] =
    {
      ::xsd::qif30::CharacteristicBalloonLocationEnumType::ABOVE,
      ::xsd::qif30::CharacteristicBalloonLocationEnumType::BELOW,
      ::xsd::qif30::CharacteristicBalloonLocationEnumType::DEFAULT,
      ::xsd::qif30::CharacteristicBalloonLocationEnumType::LEFT,
      ::xsd::qif30::CharacteristicBalloonLocationEnumType::RIGHT,
      ::xsd::qif30::CharacteristicBalloonLocationEnumType::UNDEFINED
    };

    // CharacteristicBalloonStyleEnumType
    //

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CharacteristicBalloonStyleEnumType_convert ();
    }

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (const xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CharacteristicBalloonStyleEnumType_convert ();
    }

    CharacteristicBalloonStyleEnumType::
    CharacteristicBalloonStyleEnumType (const ::std::wstring& s,
                                        const xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CharacteristicBalloonStyleEnumType_convert ();
    }

    CharacteristicBalloonStyleEnumType* CharacteristicBalloonStyleEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicBalloonStyleEnumType (*this, f, c);
    }

    CharacteristicBalloonStyleEnumType::value CharacteristicBalloonStyleEnumType::
    _xsd_CharacteristicBalloonStyleEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_CharacteristicBalloonStyleEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CharacteristicBalloonStyleEnumType_indexes_,
                        _xsd_CharacteristicBalloonStyleEnumType_indexes_ + 14,
                        *this,
                        c));

      if (i == _xsd_CharacteristicBalloonStyleEnumType_indexes_ + 14 || _xsd_CharacteristicBalloonStyleEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const CharacteristicBalloonStyleEnumType::
    _xsd_CharacteristicBalloonStyleEnumType_literals_[14] =
    {
      L"OPEN_CIRCLE",
      L"BARRED_CIRCLE",
      L"ELONGATED_CIRCLE",
      L"SPLIT_CIRCLE",
      L"PENTAGON",
      L"HEXAGON",
      L"OCTAGON",
      L"RECTANGLE",
      L"ROUNDED_RECTANGLE",
      L"ELONGATED_HEXAGON",
      L"FORWARD_CHEVRON",
      L"BACKWARD_CHEVRON",
      L"DEFAULT",
      L"UNDEFINED"
    };

    const CharacteristicBalloonStyleEnumType::value CharacteristicBalloonStyleEnumType::
    _xsd_CharacteristicBalloonStyleEnumType_indexes_[14] =
    {
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::BACKWARD_CHEVRON,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::BARRED_CIRCLE,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::DEFAULT,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::ELONGATED_CIRCLE,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::ELONGATED_HEXAGON,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::FORWARD_CHEVRON,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::HEXAGON,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::OCTAGON,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::OPEN_CIRCLE,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::PENTAGON,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::RECTANGLE,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::ROUNDED_RECTANGLE,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::SPLIT_CIRCLE,
      ::xsd::qif30::CharacteristicBalloonStyleEnumType::UNDEFINED
    };

    // CharacteristicBalloonType
    //

    CharacteristicBalloonType::
    CharacteristicBalloonType ()
    : ::xml_schema::type (),
      BalloonLocation_ (this),
      BalloonStyle_ (this)
    {
    }

    CharacteristicBalloonType::
    CharacteristicBalloonType (const BalloonLocation_type& BalloonLocation,
                               const BalloonStyle_type& BalloonStyle)
    : ::xml_schema::type (),
      BalloonLocation_ (BalloonLocation, this),
      BalloonStyle_ (BalloonStyle, this)
    {
    }

    CharacteristicBalloonType::
    CharacteristicBalloonType (const CharacteristicBalloonType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      BalloonLocation_ (x.BalloonLocation_, f, this),
      BalloonStyle_ (x.BalloonStyle_, f, this)
    {
    }

    CharacteristicBalloonType::
    CharacteristicBalloonType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      BalloonLocation_ (this),
      BalloonStyle_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CharacteristicBalloonType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // BalloonLocation
        //
        if (n.name () == L"BalloonLocation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BalloonLocation_type > r (
            BalloonLocation_traits::create (i, f, this));

          if (!BalloonLocation_.present ())
          {
            this->BalloonLocation_.set (::std::move (r));
            continue;
          }
        }

        // BalloonStyle
        //
        if (n.name () == L"BalloonStyle" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BalloonStyle_type > r (
            BalloonStyle_traits::create (i, f, this));

          if (!BalloonStyle_.present ())
          {
            this->BalloonStyle_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!BalloonLocation_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"BalloonLocation",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!BalloonStyle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"BalloonStyle",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CharacteristicBalloonType* CharacteristicBalloonType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicBalloonType (*this, f, c);
    }

    CharacteristicBalloonType& CharacteristicBalloonType::
    operator= (const CharacteristicBalloonType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->BalloonLocation_ = x.BalloonLocation_;
        this->BalloonStyle_ = x.BalloonStyle_;
      }

      return *this;
    }

    CharacteristicBalloonType::
    ~CharacteristicBalloonType ()
    {
    }

    // CharacteristicDesignatorType
    //

    CharacteristicDesignatorType::
    CharacteristicDesignatorType ()
    : ::xml_schema::type (),
      Designator_ (this),
      UUID_ (this),
      Criticality_ (this),
      Balloon_ (this)
    {
    }

    CharacteristicDesignatorType::
    CharacteristicDesignatorType (const Designator_type& Designator)
    : ::xml_schema::type (),
      Designator_ (Designator, this),
      UUID_ (this),
      Criticality_ (this),
      Balloon_ (this)
    {
    }

    CharacteristicDesignatorType::
    CharacteristicDesignatorType (const CharacteristicDesignatorType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Designator_ (x.Designator_, f, this),
      UUID_ (x.UUID_, f, this),
      Criticality_ (x.Criticality_, f, this),
      Balloon_ (x.Balloon_, f, this)
    {
    }

    CharacteristicDesignatorType::
    CharacteristicDesignatorType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Designator_ (this),
      UUID_ (this),
      Criticality_ (this),
      Balloon_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CharacteristicDesignatorType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Designator
        //
        if (n.name () == L"Designator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Designator_type > r (
            Designator_traits::create (i, f, this));

          if (!Designator_.present ())
          {
            this->Designator_.set (::std::move (r));
            continue;
          }
        }

        // UUID
        //
        if (n.name () == L"UUID" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< UUID_type > r (
            UUID_traits::create (i, f, this));

          if (!this->UUID_)
          {
            this->UUID_.set (::std::move (r));
            continue;
          }
        }

        // Criticality
        //
        if (n.name () == L"Criticality" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Criticality_type > r (
            Criticality_traits::create (i, f, this));

          if (!this->Criticality_)
          {
            this->Criticality_.set (::std::move (r));
            continue;
          }
        }

        // Balloon
        //
        if (n.name () == L"Balloon" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Balloon_type > r (
            Balloon_traits::create (i, f, this));

          if (!this->Balloon_)
          {
            this->Balloon_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Designator_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Designator",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CharacteristicDesignatorType* CharacteristicDesignatorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicDesignatorType (*this, f, c);
    }

    CharacteristicDesignatorType& CharacteristicDesignatorType::
    operator= (const CharacteristicDesignatorType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Designator_ = x.Designator_;
        this->UUID_ = x.UUID_;
        this->Criticality_ = x.Criticality_;
        this->Balloon_ = x.Balloon_;
      }

      return *this;
    }

    CharacteristicDesignatorType::
    ~CharacteristicDesignatorType ()
    {
    }

    // LocationOnDrawingType
    //

    LocationOnDrawingType::
    LocationOnDrawingType ()
    : ::xml_schema::type (),
      DrawingId_ (this),
      SheetNumber_ (this),
      DrawingZone_ (this),
      ModelId_ (this),
      View_ (this),
      ViewId_ (this)
    {
    }

    LocationOnDrawingType::
    LocationOnDrawingType (const LocationOnDrawingType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DrawingId_ (x.DrawingId_, f, this),
      SheetNumber_ (x.SheetNumber_, f, this),
      DrawingZone_ (x.DrawingZone_, f, this),
      ModelId_ (x.ModelId_, f, this),
      View_ (x.View_, f, this),
      ViewId_ (x.ViewId_, f, this)
    {
    }

    LocationOnDrawingType::
    LocationOnDrawingType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DrawingId_ (this),
      SheetNumber_ (this),
      DrawingZone_ (this),
      ModelId_ (this),
      View_ (this),
      ViewId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void LocationOnDrawingType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DrawingId
        //
        if (n.name () == L"DrawingId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DrawingId_type > r (
            DrawingId_traits::create (i, f, this));

          if (!this->DrawingId_)
          {
            this->DrawingId_.set (::std::move (r));
            continue;
          }
        }

        // SheetNumber
        //
        if (n.name () == L"SheetNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SheetNumber_type > r (
            SheetNumber_traits::create (i, f, this));

          if (!this->SheetNumber_)
          {
            this->SheetNumber_.set (::std::move (r));
            continue;
          }
        }

        // DrawingZone
        //
        if (n.name () == L"DrawingZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DrawingZone_type > r (
            DrawingZone_traits::create (i, f, this));

          if (!this->DrawingZone_)
          {
            this->DrawingZone_.set (::std::move (r));
            continue;
          }
        }

        // ModelId
        //
        if (n.name () == L"ModelId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ModelId_type > r (
            ModelId_traits::create (i, f, this));

          if (!this->ModelId_)
          {
            this->ModelId_.set (::std::move (r));
            continue;
          }
        }

        // View
        //
        if (n.name () == L"View" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< View_type > r (
            View_traits::create (i, f, this));

          if (!this->View_)
          {
            this->View_.set (::std::move (r));
            continue;
          }
        }

        // ViewId
        //
        if (n.name () == L"ViewId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ViewId_type > r (
            ViewId_traits::create (i, f, this));

          if (!this->ViewId_)
          {
            this->ViewId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    LocationOnDrawingType* LocationOnDrawingType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationOnDrawingType (*this, f, c);
    }

    LocationOnDrawingType& LocationOnDrawingType::
    operator= (const LocationOnDrawingType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->DrawingId_ = x.DrawingId_;
        this->SheetNumber_ = x.SheetNumber_;
        this->DrawingZone_ = x.DrawingZone_;
        this->ModelId_ = x.ModelId_;
        this->View_ = x.View_;
        this->ViewId_ = x.ViewId_;
      }

      return *this;
    }

    LocationOnDrawingType::
    ~LocationOnDrawingType ()
    {
    }

    // CharacteristicDefinitionBaseType
    //

    CharacteristicDefinitionBaseType::
    CharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicBaseType (),
      Name_ (this),
      CharacteristicDesignator_ (this),
      FreeState_ (this),
      StatisticalCharacteristic_ (this),
      CommonZone_ (this),
      CommonTolerance_ (this),
      MedianFeature_ (this),
      EnvelopeRequirement_ (this),
      Independency_ (this),
      UnitedOrContinuousFeature_ (this),
      SeparateZone_ (this)
    {
    }

    CharacteristicDefinitionBaseType::
    CharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicBaseType (id),
      Name_ (this),
      CharacteristicDesignator_ (this),
      FreeState_ (this),
      StatisticalCharacteristic_ (this),
      CommonZone_ (this),
      CommonTolerance_ (this),
      MedianFeature_ (this),
      EnvelopeRequirement_ (this),
      Independency_ (this),
      UnitedOrContinuousFeature_ (this),
      SeparateZone_ (this)
    {
    }

    CharacteristicDefinitionBaseType::
    CharacteristicDefinitionBaseType (const CharacteristicDefinitionBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (x, f, c),
      Name_ (x.Name_, f, this),
      CharacteristicDesignator_ (x.CharacteristicDesignator_, f, this),
      FreeState_ (x.FreeState_, f, this),
      StatisticalCharacteristic_ (x.StatisticalCharacteristic_, f, this),
      CommonZone_ (x.CommonZone_, f, this),
      CommonTolerance_ (x.CommonTolerance_, f, this),
      MedianFeature_ (x.MedianFeature_, f, this),
      EnvelopeRequirement_ (x.EnvelopeRequirement_, f, this),
      Independency_ (x.Independency_, f, this),
      UnitedOrContinuousFeature_ (x.UnitedOrContinuousFeature_, f, this),
      SeparateZone_ (x.SeparateZone_, f, this)
    {
    }

    CharacteristicDefinitionBaseType::
    CharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      Name_ (this),
      CharacteristicDesignator_ (this),
      FreeState_ (this),
      StatisticalCharacteristic_ (this),
      CommonZone_ (this),
      CommonTolerance_ (this),
      MedianFeature_ (this),
      EnvelopeRequirement_ (this),
      Independency_ (this),
      UnitedOrContinuousFeature_ (this),
      SeparateZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Name
        //
        if (n.name () == L"Name" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicDesignator
        //
        if (n.name () == L"CharacteristicDesignator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicDesignator_type > r (
            CharacteristicDesignator_traits::create (i, f, this));

          if (!this->CharacteristicDesignator_)
          {
            this->CharacteristicDesignator_.set (::std::move (r));
            continue;
          }
        }

        // FreeState
        //
        if (n.name () == L"FreeState" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->FreeState_)
          {
            this->FreeState_.set (FreeState_traits::create (i, f, this));
            continue;
          }
        }

        // StatisticalCharacteristic
        //
        if (n.name () == L"StatisticalCharacteristic" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->StatisticalCharacteristic_)
          {
            this->StatisticalCharacteristic_.set (StatisticalCharacteristic_traits::create (i, f, this));
            continue;
          }
        }

        // CommonZone
        //
        if (n.name () == L"CommonZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CommonZone_)
          {
            this->CommonZone_.set (CommonZone_traits::create (i, f, this));
            continue;
          }
        }

        // CommonTolerance
        //
        if (n.name () == L"CommonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->CommonTolerance_)
          {
            this->CommonTolerance_.set (CommonTolerance_traits::create (i, f, this));
            continue;
          }
        }

        // MedianFeature
        //
        if (n.name () == L"MedianFeature" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->MedianFeature_)
          {
            this->MedianFeature_.set (MedianFeature_traits::create (i, f, this));
            continue;
          }
        }

        // EnvelopeRequirement
        //
        if (n.name () == L"EnvelopeRequirement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->EnvelopeRequirement_)
          {
            this->EnvelopeRequirement_.set (EnvelopeRequirement_traits::create (i, f, this));
            continue;
          }
        }

        // Independency
        //
        if (n.name () == L"Independency" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->Independency_)
          {
            this->Independency_.set (Independency_traits::create (i, f, this));
            continue;
          }
        }

        // UnitedOrContinuousFeature
        //
        if (n.name () == L"UnitedOrContinuousFeature" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->UnitedOrContinuousFeature_)
          {
            this->UnitedOrContinuousFeature_.set (UnitedOrContinuousFeature_traits::create (i, f, this));
            continue;
          }
        }

        // SeparateZone
        //
        if (n.name () == L"SeparateZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->SeparateZone_)
          {
            this->SeparateZone_.set (SeparateZone_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    CharacteristicDefinitionBaseType& CharacteristicDefinitionBaseType::
    operator= (const CharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicBaseType& > (*this) = x;
        this->Name_ = x.Name_;
        this->CharacteristicDesignator_ = x.CharacteristicDesignator_;
        this->FreeState_ = x.FreeState_;
        this->StatisticalCharacteristic_ = x.StatisticalCharacteristic_;
        this->CommonZone_ = x.CommonZone_;
        this->CommonTolerance_ = x.CommonTolerance_;
        this->MedianFeature_ = x.MedianFeature_;
        this->EnvelopeRequirement_ = x.EnvelopeRequirement_;
        this->Independency_ = x.Independency_;
        this->UnitedOrContinuousFeature_ = x.UnitedOrContinuousFeature_;
        this->SeparateZone_ = x.SeparateZone_;
      }

      return *this;
    }

    CharacteristicDefinitionBaseType::
    ~CharacteristicDefinitionBaseType ()
    {
    }

    // CharacteristicNominalBaseType
    //

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicBaseType (),
      CharacteristicDefinitionId_ (this),
      FeatureNominalIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      FeatureZoneIds_ (this),
      EntityInternalIds_ (this),
      EntityExternalIds_ (this),
      Name_ (this),
      CharacteristicDesignator_ (this)
    {
    }

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType (const id_type& id,
                                   const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicBaseType (id),
      CharacteristicDefinitionId_ (CharacteristicDefinitionId, this),
      FeatureNominalIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      FeatureZoneIds_ (this),
      EntityInternalIds_ (this),
      EntityExternalIds_ (this),
      Name_ (this),
      CharacteristicDesignator_ (this)
    {
    }

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType (const id_type& id,
                                   ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicBaseType (id),
      CharacteristicDefinitionId_ (std::move (CharacteristicDefinitionId), this),
      FeatureNominalIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      FeatureZoneIds_ (this),
      EntityInternalIds_ (this),
      EntityExternalIds_ (this),
      Name_ (this),
      CharacteristicDesignator_ (this)
    {
    }

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType (const CharacteristicNominalBaseType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (x, f, c),
      CharacteristicDefinitionId_ (x.CharacteristicDefinitionId_, f, this),
      FeatureNominalIds_ (x.FeatureNominalIds_, f, this),
      SubstituteFeatureAlgorithm_ (x.SubstituteFeatureAlgorithm_, f, this),
      FeatureZoneIds_ (x.FeatureZoneIds_, f, this),
      EntityInternalIds_ (x.EntityInternalIds_, f, this),
      EntityExternalIds_ (x.EntityExternalIds_, f, this),
      Name_ (x.Name_, f, this),
      CharacteristicDesignator_ (x.CharacteristicDesignator_, f, this)
    {
    }

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      CharacteristicDefinitionId_ (this),
      FeatureNominalIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      FeatureZoneIds_ (this),
      EntityInternalIds_ (this),
      EntityExternalIds_ (this),
      Name_ (this),
      CharacteristicDesignator_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicDefinitionId
        //
        if (n.name () == L"CharacteristicDefinitionId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicDefinitionId_type > r (
            CharacteristicDefinitionId_traits::create (i, f, this));

          if (!CharacteristicDefinitionId_.present ())
          {
            this->CharacteristicDefinitionId_.set (::std::move (r));
            continue;
          }
        }

        // FeatureNominalIds
        //
        if (n.name () == L"FeatureNominalIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureNominalIds_type > r (
            FeatureNominalIds_traits::create (i, f, this));

          if (!this->FeatureNominalIds_)
          {
            this->FeatureNominalIds_.set (::std::move (r));
            continue;
          }
        }

        // SubstituteFeatureAlgorithm
        //
        if (n.name () == L"SubstituteFeatureAlgorithm" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SubstituteFeatureAlgorithm_type > r (
            SubstituteFeatureAlgorithm_traits::create (i, f, this));

          if (!this->SubstituteFeatureAlgorithm_)
          {
            this->SubstituteFeatureAlgorithm_.set (::std::move (r));
            continue;
          }
        }

        // FeatureZoneIds
        //
        if (n.name () == L"FeatureZoneIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureZoneIds_type > r (
            FeatureZoneIds_traits::create (i, f, this));

          if (!this->FeatureZoneIds_)
          {
            this->FeatureZoneIds_.set (::std::move (r));
            continue;
          }
        }

        // EntityInternalIds
        //
        if (n.name () == L"EntityInternalIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< EntityInternalIds_type > r (
            EntityInternalIds_traits::create (i, f, this));

          if (!this->EntityInternalIds_)
          {
            this->EntityInternalIds_.set (::std::move (r));
            continue;
          }
        }

        // EntityExternalIds
        //
        if (n.name () == L"EntityExternalIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< EntityExternalIds_type > r (
            EntityExternalIds_traits::create (i, f, this));

          if (!this->EntityExternalIds_)
          {
            this->EntityExternalIds_.set (::std::move (r));
            continue;
          }
        }

        // Name
        //
        if (n.name () == L"Name" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicDesignator
        //
        if (n.name () == L"CharacteristicDesignator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicDesignator_type > r (
            CharacteristicDesignator_traits::create (i, f, this));

          if (!this->CharacteristicDesignator_)
          {
            this->CharacteristicDesignator_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!CharacteristicDefinitionId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicDefinitionId",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CharacteristicNominalBaseType& CharacteristicNominalBaseType::
    operator= (const CharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicBaseType& > (*this) = x;
        this->CharacteristicDefinitionId_ = x.CharacteristicDefinitionId_;
        this->FeatureNominalIds_ = x.FeatureNominalIds_;
        this->SubstituteFeatureAlgorithm_ = x.SubstituteFeatureAlgorithm_;
        this->FeatureZoneIds_ = x.FeatureZoneIds_;
        this->EntityInternalIds_ = x.EntityInternalIds_;
        this->EntityExternalIds_ = x.EntityExternalIds_;
        this->Name_ = x.Name_;
        this->CharacteristicDesignator_ = x.CharacteristicDesignator_;
      }

      return *this;
    }

    CharacteristicNominalBaseType::
    ~CharacteristicNominalBaseType ()
    {
    }

    // CharacteristicMeasurementBaseType
    //

    CharacteristicMeasurementBaseType::
    CharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicBaseType (),
      Status_ (this),
      CharacteristicItemId_ (this),
      TimeStamp_ (this),
      FeatureMeasurementIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      ActualComponentId_ (this),
      MeasurementDeviceIds_ (this),
      ManufacturingProcessId_ (this),
      NotedEventIds_ (this),
      NonConformanceDesignator_ (this)
    {
    }

    CharacteristicMeasurementBaseType::
    CharacteristicMeasurementBaseType (const id_type& id,
                                       const Status_type& Status,
                                       const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicBaseType (id),
      Status_ (Status, this),
      CharacteristicItemId_ (CharacteristicItemId, this),
      TimeStamp_ (this),
      FeatureMeasurementIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      ActualComponentId_ (this),
      MeasurementDeviceIds_ (this),
      ManufacturingProcessId_ (this),
      NotedEventIds_ (this),
      NonConformanceDesignator_ (this)
    {
    }

    CharacteristicMeasurementBaseType::
    CharacteristicMeasurementBaseType (const id_type& id,
                                       ::std::unique_ptr< Status_type > Status,
                                       ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicBaseType (id),
      Status_ (std::move (Status), this),
      CharacteristicItemId_ (std::move (CharacteristicItemId), this),
      TimeStamp_ (this),
      FeatureMeasurementIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      ActualComponentId_ (this),
      MeasurementDeviceIds_ (this),
      ManufacturingProcessId_ (this),
      NotedEventIds_ (this),
      NonConformanceDesignator_ (this)
    {
    }

    CharacteristicMeasurementBaseType::
    CharacteristicMeasurementBaseType (const CharacteristicMeasurementBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (x, f, c),
      Status_ (x.Status_, f, this),
      CharacteristicItemId_ (x.CharacteristicItemId_, f, this),
      TimeStamp_ (x.TimeStamp_, f, this),
      FeatureMeasurementIds_ (x.FeatureMeasurementIds_, f, this),
      SubstituteFeatureAlgorithm_ (x.SubstituteFeatureAlgorithm_, f, this),
      ActualComponentId_ (x.ActualComponentId_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      NotedEventIds_ (x.NotedEventIds_, f, this),
      NonConformanceDesignator_ (x.NonConformanceDesignator_, f, this)
    {
    }

    CharacteristicMeasurementBaseType::
    CharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      Status_ (this),
      CharacteristicItemId_ (this),
      TimeStamp_ (this),
      FeatureMeasurementIds_ (this),
      SubstituteFeatureAlgorithm_ (this),
      ActualComponentId_ (this),
      MeasurementDeviceIds_ (this),
      ManufacturingProcessId_ (this),
      NotedEventIds_ (this),
      NonConformanceDesignator_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Status
        //
        if (n.name () == L"Status" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicItemId
        //
        if (n.name () == L"CharacteristicItemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicItemId_type > r (
            CharacteristicItemId_traits::create (i, f, this));

          if (!CharacteristicItemId_.present ())
          {
            this->CharacteristicItemId_.set (::std::move (r));
            continue;
          }
        }

        // TimeStamp
        //
        if (n.name () == L"TimeStamp" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TimeStamp_type > r (
            TimeStamp_traits::create (i, f, this));

          if (!this->TimeStamp_)
          {
            this->TimeStamp_.set (::std::move (r));
            continue;
          }
        }

        // FeatureMeasurementIds
        //
        if (n.name () == L"FeatureMeasurementIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureMeasurementIds_type > r (
            FeatureMeasurementIds_traits::create (i, f, this));

          if (!this->FeatureMeasurementIds_)
          {
            this->FeatureMeasurementIds_.set (::std::move (r));
            continue;
          }
        }

        // SubstituteFeatureAlgorithm
        //
        if (n.name () == L"SubstituteFeatureAlgorithm" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SubstituteFeatureAlgorithm_type > r (
            SubstituteFeatureAlgorithm_traits::create (i, f, this));

          if (!this->SubstituteFeatureAlgorithm_)
          {
            this->SubstituteFeatureAlgorithm_.set (::std::move (r));
            continue;
          }
        }

        // ActualComponentId
        //
        if (n.name () == L"ActualComponentId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ActualComponentId_type > r (
            ActualComponentId_traits::create (i, f, this));

          if (!this->ActualComponentId_)
          {
            this->ActualComponentId_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == L"MeasurementDeviceIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (::std::move (r));
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == L"ManufacturingProcessId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (::std::move (r));
            continue;
          }
        }

        // NotedEventIds
        //
        if (n.name () == L"NotedEventIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NotedEventIds_type > r (
            NotedEventIds_traits::create (i, f, this));

          if (!this->NotedEventIds_)
          {
            this->NotedEventIds_.set (::std::move (r));
            continue;
          }
        }

        // NonConformanceDesignator
        //
        if (n.name () == L"NonConformanceDesignator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonConformanceDesignator_type > r (
            NonConformanceDesignator_traits::create (i, f, this));

          if (!this->NonConformanceDesignator_)
          {
            this->NonConformanceDesignator_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Status",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!CharacteristicItemId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicItemId",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CharacteristicMeasurementBaseType& CharacteristicMeasurementBaseType::
    operator= (const CharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicBaseType& > (*this) = x;
        this->Status_ = x.Status_;
        this->CharacteristicItemId_ = x.CharacteristicItemId_;
        this->TimeStamp_ = x.TimeStamp_;
        this->FeatureMeasurementIds_ = x.FeatureMeasurementIds_;
        this->SubstituteFeatureAlgorithm_ = x.SubstituteFeatureAlgorithm_;
        this->ActualComponentId_ = x.ActualComponentId_;
        this->MeasurementDeviceIds_ = x.MeasurementDeviceIds_;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
        this->NotedEventIds_ = x.NotedEventIds_;
        this->NonConformanceDesignator_ = x.NonConformanceDesignator_;
      }

      return *this;
    }

    CharacteristicMeasurementBaseType::
    ~CharacteristicMeasurementBaseType ()
    {
    }

    // AssociatedTolerancedFeatureSpecificationElementEnumType
    //

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (const xercesc::DOMElement& e,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_convert ();
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (const xercesc::DOMAttr& a,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_convert ();
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::
    AssociatedTolerancedFeatureSpecificationElementEnumType (const ::std::wstring& s,
                                                             const xercesc::DOMElement* e,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_convert ();
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType* AssociatedTolerancedFeatureSpecificationElementEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AssociatedTolerancedFeatureSpecificationElementEnumType (*this, f, c);
    }

    AssociatedTolerancedFeatureSpecificationElementEnumType::value AssociatedTolerancedFeatureSpecificationElementEnumType::
    _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_indexes_,
                        _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_indexes_ + 5 || _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const AssociatedTolerancedFeatureSpecificationElementEnumType::
    _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_literals_[5] =
    {
      L"C",
      L"G",
      L"N",
      L"T",
      L"X"
    };

    const AssociatedTolerancedFeatureSpecificationElementEnumType::value AssociatedTolerancedFeatureSpecificationElementEnumType::
    _xsd_AssociatedTolerancedFeatureSpecificationElementEnumType_indexes_[5] =
    {
      ::xsd::qif30::AssociatedTolerancedFeatureSpecificationElementEnumType::C,
      ::xsd::qif30::AssociatedTolerancedFeatureSpecificationElementEnumType::G,
      ::xsd::qif30::AssociatedTolerancedFeatureSpecificationElementEnumType::N,
      ::xsd::qif30::AssociatedTolerancedFeatureSpecificationElementEnumType::T,
      ::xsd::qif30::AssociatedTolerancedFeatureSpecificationElementEnumType::X
    };

    // ReferenceFeatureAssociationSpecificationElementEnumType
    //

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (const xercesc::DOMElement& e,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_convert ();
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (const xercesc::DOMAttr& a,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_convert ();
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::
    ReferenceFeatureAssociationSpecificationElementEnumType (const ::std::wstring& s,
                                                             const xercesc::DOMElement* e,
                                                             ::xml_schema::flags f,
                                                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_convert ();
    }

    ReferenceFeatureAssociationSpecificationElementEnumType* ReferenceFeatureAssociationSpecificationElementEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ReferenceFeatureAssociationSpecificationElementEnumType (*this, f, c);
    }

    ReferenceFeatureAssociationSpecificationElementEnumType::value ReferenceFeatureAssociationSpecificationElementEnumType::
    _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_ReferenceFeatureAssociationSpecificationElementEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_indexes_,
                        _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_indexes_ + 8,
                        *this,
                        c));

      if (i == _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_indexes_ + 8 || _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const ReferenceFeatureAssociationSpecificationElementEnumType::
    _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_literals_[8] =
    {
      L"C",
      L"CE",
      L"CI",
      L"G",
      L"GE",
      L"GI",
      L"N",
      L"X"
    };

    const ReferenceFeatureAssociationSpecificationElementEnumType::value ReferenceFeatureAssociationSpecificationElementEnumType::
    _xsd_ReferenceFeatureAssociationSpecificationElementEnumType_indexes_[8] =
    {
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::C,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::CE,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::CI,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::G,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::GE,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::GI,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::N,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationElementEnumType::X
    };

    // ReferenceFeatureAssociationSpecificationParameterEnumType
    //

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (const xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_convert ();
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (const xercesc::DOMAttr& a,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_convert ();
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::
    ReferenceFeatureAssociationSpecificationParameterEnumType (const ::std::wstring& s,
                                                               const xercesc::DOMElement* e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_convert ();
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType* ReferenceFeatureAssociationSpecificationParameterEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ReferenceFeatureAssociationSpecificationParameterEnumType (*this, f, c);
    }

    ReferenceFeatureAssociationSpecificationParameterEnumType::value ReferenceFeatureAssociationSpecificationParameterEnumType::
    _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_indexes_,
                        _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_indexes_ + 4 || _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const ReferenceFeatureAssociationSpecificationParameterEnumType::
    _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_literals_[4] =
    {
      L"P",
      L"V",
      L"T",
      L"Q"
    };

    const ReferenceFeatureAssociationSpecificationParameterEnumType::value ReferenceFeatureAssociationSpecificationParameterEnumType::
    _xsd_ReferenceFeatureAssociationSpecificationParameterEnumType_indexes_[4] =
    {
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationParameterEnumType::P,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationParameterEnumType::Q,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationParameterEnumType::T,
      ::xsd::qif30::ReferenceFeatureAssociationSpecificationParameterEnumType::V
    };

    // SingleNestingIndexFilterSymbolEnumType
    //

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_SingleNestingIndexFilterSymbolEnumType_convert ();
    }

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (const xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_SingleNestingIndexFilterSymbolEnumType_convert ();
    }

    SingleNestingIndexFilterSymbolEnumType::
    SingleNestingIndexFilterSymbolEnumType (const ::std::wstring& s,
                                            const xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_SingleNestingIndexFilterSymbolEnumType_convert ();
    }

    SingleNestingIndexFilterSymbolEnumType* SingleNestingIndexFilterSymbolEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SingleNestingIndexFilterSymbolEnumType (*this, f, c);
    }

    SingleNestingIndexFilterSymbolEnumType::value SingleNestingIndexFilterSymbolEnumType::
    _xsd_SingleNestingIndexFilterSymbolEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_SingleNestingIndexFilterSymbolEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SingleNestingIndexFilterSymbolEnumType_indexes_,
                        _xsd_SingleNestingIndexFilterSymbolEnumType_indexes_ + 10,
                        *this,
                        c));

      if (i == _xsd_SingleNestingIndexFilterSymbolEnumType_indexes_ + 10 || _xsd_SingleNestingIndexFilterSymbolEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const SingleNestingIndexFilterSymbolEnumType::
    _xsd_SingleNestingIndexFilterSymbolEnumType_literals_[10] =
    {
      L"AB",
      L"AD",
      L"AH",
      L"CB",
      L"CD",
      L"CH",
      L"H",
      L"OB",
      L"OH",
      L"OS"
    };

    const SingleNestingIndexFilterSymbolEnumType::value SingleNestingIndexFilterSymbolEnumType::
    _xsd_SingleNestingIndexFilterSymbolEnumType_indexes_[10] =
    {
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::AB,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::AD,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::AH,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::CB,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::CD,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::CH,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::H,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::OB,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::OH,
      ::xsd::qif30::SingleNestingIndexFilterSymbolEnumType::OS
    };

    // SingleNestingIndexFilterType
    //

    SingleNestingIndexFilterType::
    SingleNestingIndexFilterType ()
    : ::xml_schema::type (),
      Symbol_ (this),
      NestingIndex_ (this),
      SecondDirectionNestingIndex_ (this)
    {
    }

    SingleNestingIndexFilterType::
    SingleNestingIndexFilterType (const Symbol_type& Symbol,
                                  const NestingIndex_type& NestingIndex)
    : ::xml_schema::type (),
      Symbol_ (Symbol, this),
      NestingIndex_ (NestingIndex, this),
      SecondDirectionNestingIndex_ (this)
    {
    }

    SingleNestingIndexFilterType::
    SingleNestingIndexFilterType (const Symbol_type& Symbol,
                                  ::std::unique_ptr< NestingIndex_type > NestingIndex)
    : ::xml_schema::type (),
      Symbol_ (Symbol, this),
      NestingIndex_ (std::move (NestingIndex), this),
      SecondDirectionNestingIndex_ (this)
    {
    }

    SingleNestingIndexFilterType::
    SingleNestingIndexFilterType (const SingleNestingIndexFilterType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Symbol_ (x.Symbol_, f, this),
      NestingIndex_ (x.NestingIndex_, f, this),
      SecondDirectionNestingIndex_ (x.SecondDirectionNestingIndex_, f, this)
    {
    }

    SingleNestingIndexFilterType::
    SingleNestingIndexFilterType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Symbol_ (this),
      NestingIndex_ (this),
      SecondDirectionNestingIndex_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SingleNestingIndexFilterType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Symbol
        //
        if (n.name () == L"Symbol" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Symbol_type > r (
            Symbol_traits::create (i, f, this));

          if (!Symbol_.present ())
          {
            this->Symbol_.set (::std::move (r));
            continue;
          }
        }

        // NestingIndex
        //
        if (n.name () == L"NestingIndex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NestingIndex_type > r (
            NestingIndex_traits::create (i, f, this));

          if (!NestingIndex_.present ())
          {
            this->NestingIndex_.set (::std::move (r));
            continue;
          }
        }

        // SecondDirectionNestingIndex
        //
        if (n.name () == L"SecondDirectionNestingIndex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondDirectionNestingIndex_type > r (
            SecondDirectionNestingIndex_traits::create (i, f, this));

          if (!this->SecondDirectionNestingIndex_)
          {
            this->SecondDirectionNestingIndex_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Symbol_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Symbol",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!NestingIndex_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"NestingIndex",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    SingleNestingIndexFilterType* SingleNestingIndexFilterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SingleNestingIndexFilterType (*this, f, c);
    }

    SingleNestingIndexFilterType& SingleNestingIndexFilterType::
    operator= (const SingleNestingIndexFilterType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Symbol_ = x.Symbol_;
        this->NestingIndex_ = x.NestingIndex_;
        this->SecondDirectionNestingIndex_ = x.SecondDirectionNestingIndex_;
      }

      return *this;
    }

    SingleNestingIndexFilterType::
    ~SingleNestingIndexFilterType ()
    {
    }

    // DualNestingIndexFilterSymbolEnumType
    //

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_DualNestingIndexFilterSymbolEnumType_convert ();
    }

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (const xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_DualNestingIndexFilterSymbolEnumType_convert ();
    }

    DualNestingIndexFilterSymbolEnumType::
    DualNestingIndexFilterSymbolEnumType (const ::std::wstring& s,
                                          const xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_DualNestingIndexFilterSymbolEnumType_convert ();
    }

    DualNestingIndexFilterSymbolEnumType* DualNestingIndexFilterSymbolEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DualNestingIndexFilterSymbolEnumType (*this, f, c);
    }

    DualNestingIndexFilterSymbolEnumType::value DualNestingIndexFilterSymbolEnumType::
    _xsd_DualNestingIndexFilterSymbolEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_DualNestingIndexFilterSymbolEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_DualNestingIndexFilterSymbolEnumType_indexes_,
                        _xsd_DualNestingIndexFilterSymbolEnumType_indexes_ + 7,
                        *this,
                        c));

      if (i == _xsd_DualNestingIndexFilterSymbolEnumType_indexes_ + 7 || _xsd_DualNestingIndexFilterSymbolEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const DualNestingIndexFilterSymbolEnumType::
    _xsd_DualNestingIndexFilterSymbolEnumType_literals_[7] =
    {
      L"CW",
      L"F",
      L"G",
      L"RG",
      L"RS",
      L"S",
      L"SW"
    };

    const DualNestingIndexFilterSymbolEnumType::value DualNestingIndexFilterSymbolEnumType::
    _xsd_DualNestingIndexFilterSymbolEnumType_indexes_[7] =
    {
      ::xsd::qif30::DualNestingIndexFilterSymbolEnumType::CW,
      ::xsd::qif30::DualNestingIndexFilterSymbolEnumType::F,
      ::xsd::qif30::DualNestingIndexFilterSymbolEnumType::G,
      ::xsd::qif30::DualNestingIndexFilterSymbolEnumType::RG,
      ::xsd::qif30::DualNestingIndexFilterSymbolEnumType::RS,
      ::xsd::qif30::DualNestingIndexFilterSymbolEnumType::S,
      ::xsd::qif30::DualNestingIndexFilterSymbolEnumType::SW
    };

    // DualNestingIndexFilterType
    //

    DualNestingIndexFilterType::
    DualNestingIndexFilterType ()
    : ::xml_schema::type (),
      Symbol_ (this),
      FirstNestingIndex_ (this),
      SecondNestingIndex_ (this),
      SecondDirectionFirstNestingIndex_ (this),
      SecondDirectionSecondNestingIndex_ (this)
    {
    }

    DualNestingIndexFilterType::
    DualNestingIndexFilterType (const Symbol_type& Symbol)
    : ::xml_schema::type (),
      Symbol_ (Symbol, this),
      FirstNestingIndex_ (this),
      SecondNestingIndex_ (this),
      SecondDirectionFirstNestingIndex_ (this),
      SecondDirectionSecondNestingIndex_ (this)
    {
    }

    DualNestingIndexFilterType::
    DualNestingIndexFilterType (const DualNestingIndexFilterType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Symbol_ (x.Symbol_, f, this),
      FirstNestingIndex_ (x.FirstNestingIndex_, f, this),
      SecondNestingIndex_ (x.SecondNestingIndex_, f, this),
      SecondDirectionFirstNestingIndex_ (x.SecondDirectionFirstNestingIndex_, f, this),
      SecondDirectionSecondNestingIndex_ (x.SecondDirectionSecondNestingIndex_, f, this)
    {
    }

    DualNestingIndexFilterType::
    DualNestingIndexFilterType (const xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Symbol_ (this),
      FirstNestingIndex_ (this),
      SecondNestingIndex_ (this),
      SecondDirectionFirstNestingIndex_ (this),
      SecondDirectionSecondNestingIndex_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void DualNestingIndexFilterType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Symbol
        //
        if (n.name () == L"Symbol" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Symbol_type > r (
            Symbol_traits::create (i, f, this));

          if (!Symbol_.present ())
          {
            this->Symbol_.set (::std::move (r));
            continue;
          }
        }

        // FirstNestingIndex
        //
        if (n.name () == L"FirstNestingIndex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FirstNestingIndex_type > r (
            FirstNestingIndex_traits::create (i, f, this));

          if (!this->FirstNestingIndex_)
          {
            this->FirstNestingIndex_.set (::std::move (r));
            continue;
          }
        }

        // SecondNestingIndex
        //
        if (n.name () == L"SecondNestingIndex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondNestingIndex_type > r (
            SecondNestingIndex_traits::create (i, f, this));

          if (!this->SecondNestingIndex_)
          {
            this->SecondNestingIndex_.set (::std::move (r));
            continue;
          }
        }

        // SecondDirectionFirstNestingIndex
        //
        if (n.name () == L"SecondDirectionFirstNestingIndex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondDirectionFirstNestingIndex_type > r (
            SecondDirectionFirstNestingIndex_traits::create (i, f, this));

          if (!this->SecondDirectionFirstNestingIndex_)
          {
            this->SecondDirectionFirstNestingIndex_.set (::std::move (r));
            continue;
          }
        }

        // SecondDirectionSecondNestingIndex
        //
        if (n.name () == L"SecondDirectionSecondNestingIndex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondDirectionSecondNestingIndex_type > r (
            SecondDirectionSecondNestingIndex_traits::create (i, f, this));

          if (!this->SecondDirectionSecondNestingIndex_)
          {
            this->SecondDirectionSecondNestingIndex_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Symbol_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Symbol",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    DualNestingIndexFilterType* DualNestingIndexFilterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DualNestingIndexFilterType (*this, f, c);
    }

    DualNestingIndexFilterType& DualNestingIndexFilterType::
    operator= (const DualNestingIndexFilterType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Symbol_ = x.Symbol_;
        this->FirstNestingIndex_ = x.FirstNestingIndex_;
        this->SecondNestingIndex_ = x.SecondNestingIndex_;
        this->SecondDirectionFirstNestingIndex_ = x.SecondDirectionFirstNestingIndex_;
        this->SecondDirectionSecondNestingIndex_ = x.SecondDirectionSecondNestingIndex_;
      }

      return *this;
    }

    DualNestingIndexFilterType::
    ~DualNestingIndexFilterType ()
    {
    }

    // FilterType
    //

    FilterType::
    FilterType ()
    : ::xml_schema::type (),
      SingleNestingIndexFilter_ (this),
      DualNestingIndexFilter_ (this)
    {
    }

    FilterType::
    FilterType (const FilterType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SingleNestingIndexFilter_ (x.SingleNestingIndexFilter_, f, this),
      DualNestingIndexFilter_ (x.DualNestingIndexFilter_, f, this)
    {
    }

    FilterType::
    FilterType (const xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SingleNestingIndexFilter_ (this),
      DualNestingIndexFilter_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FilterType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SingleNestingIndexFilter
        //
        if (n.name () == L"SingleNestingIndexFilter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SingleNestingIndexFilter_type > r (
            SingleNestingIndexFilter_traits::create (i, f, this));

          if (!this->SingleNestingIndexFilter_)
          {
            this->SingleNestingIndexFilter_.set (::std::move (r));
            continue;
          }
        }

        // DualNestingIndexFilter
        //
        if (n.name () == L"DualNestingIndexFilter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DualNestingIndexFilter_type > r (
            DualNestingIndexFilter_traits::create (i, f, this));

          if (!this->DualNestingIndexFilter_)
          {
            this->DualNestingIndexFilter_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    FilterType* FilterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FilterType (*this, f, c);
    }

    FilterType& FilterType::
    operator= (const FilterType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->SingleNestingIndexFilter_ = x.SingleNestingIndexFilter_;
        this->DualNestingIndexFilter_ = x.DualNestingIndexFilter_;
      }

      return *this;
    }

    FilterType::
    ~FilterType ()
    {
    }

    // ReferenceFeatureAssociationSpecificationElementType
    //

    ReferenceFeatureAssociationSpecificationElementType::
    ReferenceFeatureAssociationSpecificationElementType ()
    : ::xml_schema::type (),
      Filter_ (this),
      Association_ (this),
      Parameter_ (this)
    {
    }

    ReferenceFeatureAssociationSpecificationElementType::
    ReferenceFeatureAssociationSpecificationElementType (const Association_type& Association,
                                                         const Parameter_type& Parameter)
    : ::xml_schema::type (),
      Filter_ (this),
      Association_ (Association, this),
      Parameter_ (Parameter, this)
    {
    }

    ReferenceFeatureAssociationSpecificationElementType::
    ReferenceFeatureAssociationSpecificationElementType (const ReferenceFeatureAssociationSpecificationElementType& x,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Filter_ (x.Filter_, f, this),
      Association_ (x.Association_, f, this),
      Parameter_ (x.Parameter_, f, this)
    {
    }

    ReferenceFeatureAssociationSpecificationElementType::
    ReferenceFeatureAssociationSpecificationElementType (const xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Filter_ (this),
      Association_ (this),
      Parameter_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ReferenceFeatureAssociationSpecificationElementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Filter
        //
        if (n.name () == L"Filter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Filter_type > r (
            Filter_traits::create (i, f, this));

          if (!this->Filter_)
          {
            this->Filter_.set (::std::move (r));
            continue;
          }
        }

        // Association
        //
        if (n.name () == L"Association" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Association_type > r (
            Association_traits::create (i, f, this));

          if (!Association_.present ())
          {
            this->Association_.set (::std::move (r));
            continue;
          }
        }

        // Parameter
        //
        if (n.name () == L"Parameter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Parameter_type > r (
            Parameter_traits::create (i, f, this));

          if (!Parameter_.present ())
          {
            this->Parameter_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Association_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Association",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!Parameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Parameter",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ReferenceFeatureAssociationSpecificationElementType* ReferenceFeatureAssociationSpecificationElementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ReferenceFeatureAssociationSpecificationElementType (*this, f, c);
    }

    ReferenceFeatureAssociationSpecificationElementType& ReferenceFeatureAssociationSpecificationElementType::
    operator= (const ReferenceFeatureAssociationSpecificationElementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Filter_ = x.Filter_;
        this->Association_ = x.Association_;
        this->Parameter_ = x.Parameter_;
      }

      return *this;
    }

    ReferenceFeatureAssociationSpecificationElementType::
    ~ReferenceFeatureAssociationSpecificationElementType ()
    {
    }

    // GeometricCharacteristicDefinitionBaseType
    //

    GeometricCharacteristicDefinitionBaseType::
    GeometricCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      AssociatedTolerancedFeatureSpecificationElement_ (this),
      ReferenceFeatureAssociationSpecificationElement_ (this),
      DirectionFeature_ (this),
      CollectionPlane_ (this),
      IntersectionPlane_ (this),
      OrientationPlane_ (this)
    {
    }

    GeometricCharacteristicDefinitionBaseType::
    GeometricCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      AssociatedTolerancedFeatureSpecificationElement_ (this),
      ReferenceFeatureAssociationSpecificationElement_ (this),
      DirectionFeature_ (this),
      CollectionPlane_ (this),
      IntersectionPlane_ (this),
      OrientationPlane_ (this)
    {
    }

    GeometricCharacteristicDefinitionBaseType::
    GeometricCharacteristicDefinitionBaseType (const GeometricCharacteristicDefinitionBaseType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      AssociatedTolerancedFeatureSpecificationElement_ (x.AssociatedTolerancedFeatureSpecificationElement_, f, this),
      ReferenceFeatureAssociationSpecificationElement_ (x.ReferenceFeatureAssociationSpecificationElement_, f, this),
      DirectionFeature_ (x.DirectionFeature_, f, this),
      CollectionPlane_ (x.CollectionPlane_, f, this),
      IntersectionPlane_ (x.IntersectionPlane_, f, this),
      OrientationPlane_ (x.OrientationPlane_, f, this)
    {
    }

    GeometricCharacteristicDefinitionBaseType::
    GeometricCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      AssociatedTolerancedFeatureSpecificationElement_ (this),
      ReferenceFeatureAssociationSpecificationElement_ (this),
      DirectionFeature_ (this),
      CollectionPlane_ (this),
      IntersectionPlane_ (this),
      OrientationPlane_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void GeometricCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AssociatedTolerancedFeatureSpecificationElement
        //
        if (n.name () == L"AssociatedTolerancedFeatureSpecificationElement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AssociatedTolerancedFeatureSpecificationElement_type > r (
            AssociatedTolerancedFeatureSpecificationElement_traits::create (i, f, this));

          if (!this->AssociatedTolerancedFeatureSpecificationElement_)
          {
            this->AssociatedTolerancedFeatureSpecificationElement_.set (::std::move (r));
            continue;
          }
        }

        // ReferenceFeatureAssociationSpecificationElement
        //
        if (n.name () == L"ReferenceFeatureAssociationSpecificationElement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReferenceFeatureAssociationSpecificationElement_type > r (
            ReferenceFeatureAssociationSpecificationElement_traits::create (i, f, this));

          if (!this->ReferenceFeatureAssociationSpecificationElement_)
          {
            this->ReferenceFeatureAssociationSpecificationElement_.set (::std::move (r));
            continue;
          }
        }

        // DirectionFeature
        //
        if (n.name () == L"DirectionFeature" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DirectionFeature_type > r (
            DirectionFeature_traits::create (i, f, this));

          if (!this->DirectionFeature_)
          {
            this->DirectionFeature_.set (::std::move (r));
            continue;
          }
        }

        // CollectionPlane
        //
        if (n.name () == L"CollectionPlane" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CollectionPlane_type > r (
            CollectionPlane_traits::create (i, f, this));

          if (!this->CollectionPlane_)
          {
            this->CollectionPlane_.set (::std::move (r));
            continue;
          }
        }

        // IntersectionPlane
        //
        if (n.name () == L"IntersectionPlane" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< IntersectionPlane_type > r (
            IntersectionPlane_traits::create (i, f, this));

          if (!this->IntersectionPlane_)
          {
            this->IntersectionPlane_.set (::std::move (r));
            continue;
          }
        }

        // OrientationPlane
        //
        if (n.name () == L"OrientationPlane" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OrientationPlane_type > r (
            OrientationPlane_traits::create (i, f, this));

          if (!this->OrientationPlane_)
          {
            this->OrientationPlane_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    GeometricCharacteristicDefinitionBaseType& GeometricCharacteristicDefinitionBaseType::
    operator= (const GeometricCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->AssociatedTolerancedFeatureSpecificationElement_ = x.AssociatedTolerancedFeatureSpecificationElement_;
        this->ReferenceFeatureAssociationSpecificationElement_ = x.ReferenceFeatureAssociationSpecificationElement_;
        this->DirectionFeature_ = x.DirectionFeature_;
        this->CollectionPlane_ = x.CollectionPlane_;
        this->IntersectionPlane_ = x.IntersectionPlane_;
        this->OrientationPlane_ = x.OrientationPlane_;
      }

      return *this;
    }

    GeometricCharacteristicDefinitionBaseType::
    ~GeometricCharacteristicDefinitionBaseType ()
    {
    }

    // GeometricCharacteristicNominalBaseType
    //

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType ()
    {
    }

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType (const id_type& id,
                                            const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId)
    {
    }

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType (const id_type& id,
                                            ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId))
    {
    }

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType (const GeometricCharacteristicNominalBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c)
    {
    }

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f, c)
    {
    }

    GeometricCharacteristicNominalBaseType::
    ~GeometricCharacteristicNominalBaseType ()
    {
    }

    // GeometricCharacteristicMeasurementBaseType
    //

    GeometricCharacteristicMeasurementBaseType::
    GeometricCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    GeometricCharacteristicMeasurementBaseType::
    GeometricCharacteristicMeasurementBaseType (const id_type& id,
                                                const Status_type& Status,
                                                const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    GeometricCharacteristicMeasurementBaseType::
    GeometricCharacteristicMeasurementBaseType (const id_type& id,
                                                ::std::unique_ptr< Status_type > Status,
                                                ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    GeometricCharacteristicMeasurementBaseType::
    GeometricCharacteristicMeasurementBaseType (const GeometricCharacteristicMeasurementBaseType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    GeometricCharacteristicMeasurementBaseType::
    GeometricCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void GeometricCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    GeometricCharacteristicMeasurementBaseType& GeometricCharacteristicMeasurementBaseType::
    operator= (const GeometricCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    GeometricCharacteristicMeasurementBaseType::
    ~GeometricCharacteristicMeasurementBaseType ()
    {
    }

    // GeometricCharacteristicItemBaseType
    //

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const id_type& id,
                                         const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const GeometricCharacteristicItemBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    GeometricCharacteristicItemBaseType::
    ~GeometricCharacteristicItemBaseType ()
    {
    }

    // DimensionalCharacteristicDefinitionBaseType
    //

    DimensionalCharacteristicDefinitionBaseType::
    DimensionalCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      DimensionType_ (this),
      DimensionModifiers_ (this)
    {
    }

    DimensionalCharacteristicDefinitionBaseType::
    DimensionalCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      DimensionType_ (this),
      DimensionModifiers_ (this)
    {
    }

    DimensionalCharacteristicDefinitionBaseType::
    DimensionalCharacteristicDefinitionBaseType (const DimensionalCharacteristicDefinitionBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      DimensionType_ (x.DimensionType_, f, this),
      DimensionModifiers_ (x.DimensionModifiers_, f, this)
    {
    }

    DimensionalCharacteristicDefinitionBaseType::
    DimensionalCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      DimensionType_ (this),
      DimensionModifiers_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void DimensionalCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DimensionType
        //
        if (n.name () == L"DimensionType" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DimensionType_type > r (
            DimensionType_traits::create (i, f, this));

          if (!this->DimensionType_)
          {
            this->DimensionType_.set (::std::move (r));
            continue;
          }
        }

        // DimensionModifiers
        //
        if (n.name () == L"DimensionModifiers" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DimensionModifiers_type > r (
            DimensionModifiers_traits::create (i, f, this));

          if (!this->DimensionModifiers_)
          {
            this->DimensionModifiers_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    DimensionalCharacteristicDefinitionBaseType& DimensionalCharacteristicDefinitionBaseType::
    operator= (const DimensionalCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->DimensionType_ = x.DimensionType_;
        this->DimensionModifiers_ = x.DimensionModifiers_;
      }

      return *this;
    }

    DimensionalCharacteristicDefinitionBaseType::
    ~DimensionalCharacteristicDefinitionBaseType ()
    {
    }

    // DimensionalCharacteristicNominalBaseType
    //

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType ()
    {
    }

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId)
    {
    }

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId))
    {
    }

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType (const DimensionalCharacteristicNominalBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c)
    {
    }

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f, c)
    {
    }

    DimensionalCharacteristicNominalBaseType::
    ~DimensionalCharacteristicNominalBaseType ()
    {
    }

    // DimensionalCharacteristicMeasurementBaseType
    //

    DimensionalCharacteristicMeasurementBaseType::
    DimensionalCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType ()
    {
    }

    DimensionalCharacteristicMeasurementBaseType::
    DimensionalCharacteristicMeasurementBaseType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    DimensionalCharacteristicMeasurementBaseType::
    DimensionalCharacteristicMeasurementBaseType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId))
    {
    }

    DimensionalCharacteristicMeasurementBaseType::
    DimensionalCharacteristicMeasurementBaseType (const DimensionalCharacteristicMeasurementBaseType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c)
    {
    }

    DimensionalCharacteristicMeasurementBaseType::
    DimensionalCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f, c)
    {
    }

    DimensionalCharacteristicMeasurementBaseType::
    ~DimensionalCharacteristicMeasurementBaseType ()
    {
    }

    // DimensionalCharacteristicItemBaseType
    //

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const DimensionalCharacteristicItemBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    DimensionalCharacteristicItemBaseType::
    ~DimensionalCharacteristicItemBaseType ()
    {
    }

    // CoordinateCharacteristicDefinitionBaseType
    //

    CoordinateCharacteristicDefinitionBaseType::
    CoordinateCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType ()
    {
    }

    CoordinateCharacteristicDefinitionBaseType::
    CoordinateCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (id)
    {
    }

    CoordinateCharacteristicDefinitionBaseType::
    CoordinateCharacteristicDefinitionBaseType (const CoordinateCharacteristicDefinitionBaseType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    CoordinateCharacteristicDefinitionBaseType::
    CoordinateCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    CoordinateCharacteristicDefinitionBaseType::
    ~CoordinateCharacteristicDefinitionBaseType ()
    {
    }

    // CoordinateCharacteristicNominalBaseType
    //

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType ()
    {
    }

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (id,
                                                              CharacteristicDefinitionId)
    {
    }

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (id,
                                                              std::move (CharacteristicDefinitionId))
    {
    }

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType (const CoordinateCharacteristicNominalBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (x, f, c)
    {
    }

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (e, f, c)
    {
    }

    CoordinateCharacteristicNominalBaseType::
    ~CoordinateCharacteristicNominalBaseType ()
    {
    }

    // CoordinateCharacteristicMeasurementBaseType
    //

    CoordinateCharacteristicMeasurementBaseType::
    CoordinateCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (),
      TypeOfCoordinates_ (this)
    {
    }

    CoordinateCharacteristicMeasurementBaseType::
    CoordinateCharacteristicMeasurementBaseType (const id_type& id,
                                                 const Status_type& Status,
                                                 const CharacteristicItemId_type& CharacteristicItemId,
                                                 const TypeOfCoordinates_type& TypeOfCoordinates)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (id,
                                                                  Status,
                                                                  CharacteristicItemId),
      TypeOfCoordinates_ (TypeOfCoordinates, this)
    {
    }

    CoordinateCharacteristicMeasurementBaseType::
    CoordinateCharacteristicMeasurementBaseType (const id_type& id,
                                                 ::std::unique_ptr< Status_type > Status,
                                                 ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                                 ::std::unique_ptr< TypeOfCoordinates_type > TypeOfCoordinates)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (id,
                                                                  std::move (Status),
                                                                  std::move (CharacteristicItemId)),
      TypeOfCoordinates_ (std::move (TypeOfCoordinates), this)
    {
    }

    CoordinateCharacteristicMeasurementBaseType::
    CoordinateCharacteristicMeasurementBaseType (const CoordinateCharacteristicMeasurementBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (x, f, c),
      TypeOfCoordinates_ (x.TypeOfCoordinates_, f, this)
    {
    }

    CoordinateCharacteristicMeasurementBaseType::
    CoordinateCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      TypeOfCoordinates_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CoordinateCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TypeOfCoordinates
        //
        if (n.name () == L"TypeOfCoordinates" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TypeOfCoordinates_type > r (
            TypeOfCoordinates_traits::create (i, f, this));

          if (!TypeOfCoordinates_.present ())
          {
            this->TypeOfCoordinates_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!TypeOfCoordinates_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"TypeOfCoordinates",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CoordinateCharacteristicMeasurementBaseType& CoordinateCharacteristicMeasurementBaseType::
    operator= (const CoordinateCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType& > (*this) = x;
        this->TypeOfCoordinates_ = x.TypeOfCoordinates_;
      }

      return *this;
    }

    CoordinateCharacteristicMeasurementBaseType::
    ~CoordinateCharacteristicMeasurementBaseType ()
    {
    }

    // CoordinateCharacteristicItemBaseType
    //

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType ()
    {
    }

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const id_type& id,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (id,
                                                           CharacteristicNominalId)
    {
    }

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (id,
                                                           std::move (CharacteristicNominalId))
    {
    }

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const CoordinateCharacteristicItemBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (x, f, c)
    {
    }

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (e, f, c)
    {
    }

    CoordinateCharacteristicItemBaseType::
    ~CoordinateCharacteristicItemBaseType ()
    {
    }

    // UserDefinedAttributeCharacteristicDefinitionType
    //

    UserDefinedAttributeCharacteristicDefinitionType::
    UserDefinedAttributeCharacteristicDefinitionType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedAttributeCharacteristicDefinitionType::
    UserDefinedAttributeCharacteristicDefinitionType (const id_type& id,
                                                      const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedAttributeCharacteristicDefinitionType::
    UserDefinedAttributeCharacteristicDefinitionType (const UserDefinedAttributeCharacteristicDefinitionType& x,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedAttributeCharacteristicDefinitionType::
    UserDefinedAttributeCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAttributeCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedAttributeCharacteristicDefinitionType* UserDefinedAttributeCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicDefinitionType& UserDefinedAttributeCharacteristicDefinitionType::
    operator= (const UserDefinedAttributeCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedAttributeCharacteristicDefinitionType::
    ~UserDefinedAttributeCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicDefinitionType >
    _xsd_UserDefinedAttributeCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedAttributeCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedAttributeCharacteristicNominalType
    //

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      PassValues_ (this),
      FailValues_ (this)
    {
    }

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const id_type& id,
                                                   const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      PassValues_ (this),
      FailValues_ (this)
    {
    }

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const id_type& id,
                                                   ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      PassValues_ (this),
      FailValues_ (this)
    {
    }

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const UserDefinedAttributeCharacteristicNominalType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      PassValues_ (x.PassValues_, f, this),
      FailValues_ (x.FailValues_, f, this)
    {
    }

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      PassValues_ (this),
      FailValues_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAttributeCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // PassValues
        //
        if (n.name () == L"PassValues" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PassValues_type > r (
            PassValues_traits::create (i, f, this));

          if (!this->PassValues_)
          {
            this->PassValues_.set (::std::move (r));
            continue;
          }
        }

        // FailValues
        //
        if (n.name () == L"FailValues" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FailValues_type > r (
            FailValues_traits::create (i, f, this));

          if (!this->FailValues_)
          {
            this->FailValues_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    UserDefinedAttributeCharacteristicNominalType* UserDefinedAttributeCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicNominalType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicNominalType& UserDefinedAttributeCharacteristicNominalType::
    operator= (const UserDefinedAttributeCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->PassValues_ = x.PassValues_;
        this->FailValues_ = x.FailValues_;
      }

      return *this;
    }

    UserDefinedAttributeCharacteristicNominalType::
    ~UserDefinedAttributeCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicNominalType >
    _xsd_UserDefinedAttributeCharacteristicNominalType_type_factory_init (
      L"UserDefinedAttributeCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedAttributeCharacteristicMeasurementType
    //

    UserDefinedAttributeCharacteristicMeasurementType::
    UserDefinedAttributeCharacteristicMeasurementType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this)
    {
    }

    UserDefinedAttributeCharacteristicMeasurementType::
    UserDefinedAttributeCharacteristicMeasurementType (const id_type& id,
                                                       const Status_type& Status,
                                                       const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this)
    {
    }

    UserDefinedAttributeCharacteristicMeasurementType::
    UserDefinedAttributeCharacteristicMeasurementType (const id_type& id,
                                                       ::std::unique_ptr< Status_type > Status,
                                                       ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this)
    {
    }

    UserDefinedAttributeCharacteristicMeasurementType::
    UserDefinedAttributeCharacteristicMeasurementType (const UserDefinedAttributeCharacteristicMeasurementType& x,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this)
    {
    }

    UserDefinedAttributeCharacteristicMeasurementType::
    UserDefinedAttributeCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAttributeCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    UserDefinedAttributeCharacteristicMeasurementType* UserDefinedAttributeCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicMeasurementType& UserDefinedAttributeCharacteristicMeasurementType::
    operator= (const UserDefinedAttributeCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
      }

      return *this;
    }

    UserDefinedAttributeCharacteristicMeasurementType::
    ~UserDefinedAttributeCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicMeasurementType >
    _xsd_UserDefinedAttributeCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedAttributeCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedAttributeCharacteristicItemType
    //

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const id_type& id,
                                                const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const id_type& id,
                                                ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const UserDefinedAttributeCharacteristicItemType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedAttributeCharacteristicItemType* UserDefinedAttributeCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicItemType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicItemType::
    ~UserDefinedAttributeCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicItemType >
    _xsd_UserDefinedAttributeCharacteristicItemType_type_factory_init (
      L"UserDefinedAttributeCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // StringValuesType
    //

    StringValuesType::
    StringValuesType ()
    : ::xml_schema::type (),
      StringValue_ (this),
      n_ (this)
    {
    }

    StringValuesType::
    StringValuesType (const n_type& n)
    : ::xml_schema::type (),
      StringValue_ (this),
      n_ (n, this)
    {
    }

    StringValuesType::
    StringValuesType (const StringValuesType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      StringValue_ (x.StringValue_, f, this),
      n_ (x.n_, f, this)
    {
    }

    StringValuesType::
    StringValuesType (const xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      StringValue_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StringValuesType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // StringValue
        //
        if (n.name () == L"StringValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< StringValue_type > r (
            StringValue_traits::create (i, f, this));

          this->StringValue_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    StringValuesType* StringValuesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StringValuesType (*this, f, c);
    }

    StringValuesType& StringValuesType::
    operator= (const StringValuesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->StringValue_ = x.StringValue_;
        this->n_ = x.n_;
      }

      return *this;
    }

    StringValuesType::
    ~StringValuesType ()
    {
    }

    // LinearCharacteristicDefinitionBaseType
    //

    LinearCharacteristicDefinitionBaseType::
    LinearCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    LinearCharacteristicDefinitionBaseType::
    LinearCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    LinearCharacteristicDefinitionBaseType::
    LinearCharacteristicDefinitionBaseType (const LinearCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    LinearCharacteristicDefinitionBaseType::
    LinearCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    LinearCharacteristicDefinitionBaseType& LinearCharacteristicDefinitionBaseType::
    operator= (const LinearCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    LinearCharacteristicDefinitionBaseType::
    ~LinearCharacteristicDefinitionBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicDefinitionType
    //

    UserDefinedLinearCharacteristicDefinitionType::
    UserDefinedLinearCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedLinearCharacteristicDefinitionType::
    UserDefinedLinearCharacteristicDefinitionType (const id_type& id,
                                                   const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedLinearCharacteristicDefinitionType::
    UserDefinedLinearCharacteristicDefinitionType (const UserDefinedLinearCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedLinearCharacteristicDefinitionType::
    UserDefinedLinearCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedLinearCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedLinearCharacteristicDefinitionType* UserDefinedLinearCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedLinearCharacteristicDefinitionType& UserDefinedLinearCharacteristicDefinitionType::
    operator= (const UserDefinedLinearCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedLinearCharacteristicDefinitionType::
    ~UserDefinedLinearCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedLinearCharacteristicDefinitionType >
    _xsd_UserDefinedLinearCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedLinearCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // LinearCharacteristicNominalBaseType
    //

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (),
      TargetValue_ (this),
      TargetDualValue_ (this)
    {
    }

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (id,
                                                              CharacteristicDefinitionId),
      TargetValue_ (this),
      TargetDualValue_ (this)
    {
    }

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (id,
                                                              std::move (CharacteristicDefinitionId)),
      TargetValue_ (this),
      TargetDualValue_ (this)
    {
    }

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType (const LinearCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this),
      TargetDualValue_ (x.TargetDualValue_, f, this)
    {
    }

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this),
      TargetDualValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        // TargetDualValue
        //
        if (n.name () == L"TargetDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetDualValue_type > r (
            TargetDualValue_traits::create (i, f, this));

          if (!this->TargetDualValue_)
          {
            this->TargetDualValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    LinearCharacteristicNominalBaseType& LinearCharacteristicNominalBaseType::
    operator= (const LinearCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
        this->TargetDualValue_ = x.TargetDualValue_;
      }

      return *this;
    }

    LinearCharacteristicNominalBaseType::
    ~LinearCharacteristicNominalBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicNominalType
    //

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType (const id_type& id,
                                                const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType (const id_type& id,
                                                ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType (const UserDefinedLinearCharacteristicNominalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedLinearCharacteristicNominalType* UserDefinedLinearCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicNominalType (*this, f, c);
    }

    UserDefinedLinearCharacteristicNominalType::
    ~UserDefinedLinearCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedLinearCharacteristicNominalType >
    _xsd_UserDefinedLinearCharacteristicNominalType_type_factory_init (
      L"UserDefinedLinearCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // LinearCharacteristicMeasurementBaseType
    //

    LinearCharacteristicMeasurementBaseType::
    LinearCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    LinearCharacteristicMeasurementBaseType::
    LinearCharacteristicMeasurementBaseType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (id,
                                                                  Status,
                                                                  CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    LinearCharacteristicMeasurementBaseType::
    LinearCharacteristicMeasurementBaseType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (id,
                                                                  std::move (Status),
                                                                  std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    LinearCharacteristicMeasurementBaseType::
    LinearCharacteristicMeasurementBaseType (const LinearCharacteristicMeasurementBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    LinearCharacteristicMeasurementBaseType::
    LinearCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    LinearCharacteristicMeasurementBaseType& LinearCharacteristicMeasurementBaseType::
    operator= (const LinearCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    LinearCharacteristicMeasurementBaseType::
    ~LinearCharacteristicMeasurementBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicMeasurementType
    //

    UserDefinedLinearCharacteristicMeasurementType::
    UserDefinedLinearCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedLinearCharacteristicMeasurementType::
    UserDefinedLinearCharacteristicMeasurementType (const id_type& id,
                                                    const Status_type& Status,
                                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    UserDefinedLinearCharacteristicMeasurementType::
    UserDefinedLinearCharacteristicMeasurementType (const id_type& id,
                                                    ::std::unique_ptr< Status_type > Status,
                                                    ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    UserDefinedLinearCharacteristicMeasurementType::
    UserDefinedLinearCharacteristicMeasurementType (const UserDefinedLinearCharacteristicMeasurementType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedLinearCharacteristicMeasurementType::
    UserDefinedLinearCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedLinearCharacteristicMeasurementType* UserDefinedLinearCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedLinearCharacteristicMeasurementType::
    ~UserDefinedLinearCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedLinearCharacteristicMeasurementType >
    _xsd_UserDefinedLinearCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedLinearCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // LinearCharacteristicItemBaseType
    //

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType ()
    {
    }

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (id,
                                                           CharacteristicNominalId)
    {
    }

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (id,
                                                           std::move (CharacteristicNominalId))
    {
    }

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const LinearCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (x, f, c)
    {
    }

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (e, f, c)
    {
    }

    LinearCharacteristicItemBaseType::
    ~LinearCharacteristicItemBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicItemType
    //

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const id_type& id,
                                             const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const UserDefinedLinearCharacteristicItemType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedLinearCharacteristicItemType* UserDefinedLinearCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicItemType (*this, f, c);
    }

    UserDefinedLinearCharacteristicItemType::
    ~UserDefinedLinearCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedLinearCharacteristicItemType >
    _xsd_UserDefinedLinearCharacteristicItemType_type_factory_init (
      L"UserDefinedLinearCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCharacteristicDefinitionBaseType
    //

    AngularCharacteristicDefinitionBaseType::
    AngularCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    AngularCharacteristicDefinitionBaseType::
    AngularCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    AngularCharacteristicDefinitionBaseType::
    AngularCharacteristicDefinitionBaseType (const AngularCharacteristicDefinitionBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    AngularCharacteristicDefinitionBaseType::
    AngularCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngularCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngularCharacteristicDefinitionBaseType& AngularCharacteristicDefinitionBaseType::
    operator= (const AngularCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    AngularCharacteristicDefinitionBaseType::
    ~AngularCharacteristicDefinitionBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicDefinitionType
    //

    UserDefinedAngularCharacteristicDefinitionType::
    UserDefinedAngularCharacteristicDefinitionType ()
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedAngularCharacteristicDefinitionType::
    UserDefinedAngularCharacteristicDefinitionType (const id_type& id,
                                                    const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedAngularCharacteristicDefinitionType::
    UserDefinedAngularCharacteristicDefinitionType (const UserDefinedAngularCharacteristicDefinitionType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedAngularCharacteristicDefinitionType::
    UserDefinedAngularCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAngularCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::AngularCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedAngularCharacteristicDefinitionType* UserDefinedAngularCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedAngularCharacteristicDefinitionType& UserDefinedAngularCharacteristicDefinitionType::
    operator= (const UserDefinedAngularCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::AngularCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedAngularCharacteristicDefinitionType::
    ~UserDefinedAngularCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAngularCharacteristicDefinitionType >
    _xsd_UserDefinedAngularCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedAngularCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCharacteristicNominalBaseType
    //

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (id,
                                                              CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (id,
                                                              std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType (const AngularCharacteristicNominalBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngularCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngularCharacteristicNominalBaseType& AngularCharacteristicNominalBaseType::
    operator= (const AngularCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    AngularCharacteristicNominalBaseType::
    ~AngularCharacteristicNominalBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicNominalType
    //

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType ()
    : ::xsd::qif30::AngularCharacteristicNominalBaseType ()
    {
    }

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType (const id_type& id,
                                                 const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId)
    {
    }

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType (const id_type& id,
                                                 ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType (const UserDefinedAngularCharacteristicNominalType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedAngularCharacteristicNominalType* UserDefinedAngularCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicNominalType (*this, f, c);
    }

    UserDefinedAngularCharacteristicNominalType::
    ~UserDefinedAngularCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAngularCharacteristicNominalType >
    _xsd_UserDefinedAngularCharacteristicNominalType_type_factory_init (
      L"UserDefinedAngularCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCharacteristicMeasurementBaseType
    //

    AngularCharacteristicMeasurementBaseType::
    AngularCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AngularCharacteristicMeasurementBaseType::
    AngularCharacteristicMeasurementBaseType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (id,
                                                                  Status,
                                                                  CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AngularCharacteristicMeasurementBaseType::
    AngularCharacteristicMeasurementBaseType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (id,
                                                                  std::move (Status),
                                                                  std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AngularCharacteristicMeasurementBaseType::
    AngularCharacteristicMeasurementBaseType (const AngularCharacteristicMeasurementBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    AngularCharacteristicMeasurementBaseType::
    AngularCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngularCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngularCharacteristicMeasurementBaseType& AngularCharacteristicMeasurementBaseType::
    operator= (const AngularCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    AngularCharacteristicMeasurementBaseType::
    ~AngularCharacteristicMeasurementBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicMeasurementType
    //

    UserDefinedAngularCharacteristicMeasurementType::
    UserDefinedAngularCharacteristicMeasurementType ()
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedAngularCharacteristicMeasurementType::
    UserDefinedAngularCharacteristicMeasurementType (const id_type& id,
                                                     const Status_type& Status,
                                                     const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId)
    {
    }

    UserDefinedAngularCharacteristicMeasurementType::
    UserDefinedAngularCharacteristicMeasurementType (const id_type& id,
                                                     ::std::unique_ptr< Status_type > Status,
                                                     ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId))
    {
    }

    UserDefinedAngularCharacteristicMeasurementType::
    UserDefinedAngularCharacteristicMeasurementType (const UserDefinedAngularCharacteristicMeasurementType& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedAngularCharacteristicMeasurementType::
    UserDefinedAngularCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedAngularCharacteristicMeasurementType* UserDefinedAngularCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedAngularCharacteristicMeasurementType::
    ~UserDefinedAngularCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAngularCharacteristicMeasurementType >
    _xsd_UserDefinedAngularCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedAngularCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCharacteristicItemBaseType
    //

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType ()
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType ()
    {
    }

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (id,
                                                           CharacteristicNominalId)
    {
    }

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (id,
                                                           std::move (CharacteristicNominalId))
    {
    }

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const AngularCharacteristicItemBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (x, f, c)
    {
    }

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicItemBaseType (e, f, c)
    {
    }

    AngularCharacteristicItemBaseType::
    ~AngularCharacteristicItemBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicItemType
    //

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType ()
    : ::xsd::qif30::AngularCharacteristicItemBaseType ()
    {
    }

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const id_type& id,
                                              const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const UserDefinedAngularCharacteristicItemType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedAngularCharacteristicItemType* UserDefinedAngularCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicItemType (*this, f, c);
    }

    UserDefinedAngularCharacteristicItemType::
    ~UserDefinedAngularCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAngularCharacteristicItemType >
    _xsd_UserDefinedAngularCharacteristicItemType_type_factory_init (
      L"UserDefinedAngularCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // TemperatureCharacteristicDefinitionBaseType
    //

    TemperatureCharacteristicDefinitionBaseType::
    TemperatureCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    TemperatureCharacteristicDefinitionBaseType::
    TemperatureCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    TemperatureCharacteristicDefinitionBaseType::
    TemperatureCharacteristicDefinitionBaseType (const TemperatureCharacteristicDefinitionBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    TemperatureCharacteristicDefinitionBaseType::
    TemperatureCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void TemperatureCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    TemperatureCharacteristicDefinitionBaseType& TemperatureCharacteristicDefinitionBaseType::
    operator= (const TemperatureCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    TemperatureCharacteristicDefinitionBaseType::
    ~TemperatureCharacteristicDefinitionBaseType ()
    {
    }

    // TemperatureCharacteristicNominalBaseType
    //

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType (const TemperatureCharacteristicNominalBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void TemperatureCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    TemperatureCharacteristicNominalBaseType& TemperatureCharacteristicNominalBaseType::
    operator= (const TemperatureCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    TemperatureCharacteristicNominalBaseType::
    ~TemperatureCharacteristicNominalBaseType ()
    {
    }

    // TemperatureCharacteristicMeasurementBaseType
    //

    TemperatureCharacteristicMeasurementBaseType::
    TemperatureCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    TemperatureCharacteristicMeasurementBaseType::
    TemperatureCharacteristicMeasurementBaseType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    TemperatureCharacteristicMeasurementBaseType::
    TemperatureCharacteristicMeasurementBaseType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    TemperatureCharacteristicMeasurementBaseType::
    TemperatureCharacteristicMeasurementBaseType (const TemperatureCharacteristicMeasurementBaseType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    TemperatureCharacteristicMeasurementBaseType::
    TemperatureCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void TemperatureCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    TemperatureCharacteristicMeasurementBaseType& TemperatureCharacteristicMeasurementBaseType::
    operator= (const TemperatureCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    TemperatureCharacteristicMeasurementBaseType::
    ~TemperatureCharacteristicMeasurementBaseType ()
    {
    }

    // TemperatureCharacteristicItemBaseType
    //

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const TemperatureCharacteristicItemBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    TemperatureCharacteristicItemBaseType::
    ~TemperatureCharacteristicItemBaseType ()
    {
    }

    // UserDefinedTemperatureCharacteristicDefinitionType
    //

    UserDefinedTemperatureCharacteristicDefinitionType::
    UserDefinedTemperatureCharacteristicDefinitionType ()
    : ::xsd::qif30::TemperatureCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedTemperatureCharacteristicDefinitionType::
    UserDefinedTemperatureCharacteristicDefinitionType (const id_type& id,
                                                        const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::TemperatureCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedTemperatureCharacteristicDefinitionType::
    UserDefinedTemperatureCharacteristicDefinitionType (const UserDefinedTemperatureCharacteristicDefinitionType& x,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedTemperatureCharacteristicDefinitionType::
    UserDefinedTemperatureCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedTemperatureCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::TemperatureCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedTemperatureCharacteristicDefinitionType* UserDefinedTemperatureCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicDefinitionType& UserDefinedTemperatureCharacteristicDefinitionType::
    operator= (const UserDefinedTemperatureCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::TemperatureCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedTemperatureCharacteristicDefinitionType::
    ~UserDefinedTemperatureCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicDefinitionType >
    _xsd_UserDefinedTemperatureCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedTemperatureCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedTemperatureCharacteristicNominalType
    //

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType ()
    : ::xsd::qif30::TemperatureCharacteristicNominalBaseType ()
    {
    }

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType (const id_type& id,
                                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::TemperatureCharacteristicNominalBaseType (id,
                                                              CharacteristicDefinitionId)
    {
    }

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType (const id_type& id,
                                                     ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::TemperatureCharacteristicNominalBaseType (id,
                                                              std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType (const UserDefinedTemperatureCharacteristicNominalType& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType (const xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicNominalType* UserDefinedTemperatureCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicNominalType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicNominalType::
    ~UserDefinedTemperatureCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicNominalType >
    _xsd_UserDefinedTemperatureCharacteristicNominalType_type_factory_init (
      L"UserDefinedTemperatureCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedTemperatureCharacteristicMeasurementType
    //

    UserDefinedTemperatureCharacteristicMeasurementType::
    UserDefinedTemperatureCharacteristicMeasurementType ()
    : ::xsd::qif30::TemperatureCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedTemperatureCharacteristicMeasurementType::
    UserDefinedTemperatureCharacteristicMeasurementType (const id_type& id,
                                                         const Status_type& Status,
                                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::TemperatureCharacteristicMeasurementBaseType (id,
                                                                  Status,
                                                                  CharacteristicItemId)
    {
    }

    UserDefinedTemperatureCharacteristicMeasurementType::
    UserDefinedTemperatureCharacteristicMeasurementType (const id_type& id,
                                                         ::std::unique_ptr< Status_type > Status,
                                                         ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::TemperatureCharacteristicMeasurementBaseType (id,
                                                                  std::move (Status),
                                                                  std::move (CharacteristicItemId))
    {
    }

    UserDefinedTemperatureCharacteristicMeasurementType::
    UserDefinedTemperatureCharacteristicMeasurementType (const UserDefinedTemperatureCharacteristicMeasurementType& x,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicMeasurementType::
    UserDefinedTemperatureCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicMeasurementType* UserDefinedTemperatureCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicMeasurementType::
    ~UserDefinedTemperatureCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicMeasurementType >
    _xsd_UserDefinedTemperatureCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedTemperatureCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedTemperatureCharacteristicItemType
    //

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType ()
    : ::xsd::qif30::TemperatureCharacteristicItemBaseType ()
    {
    }

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const id_type& id,
                                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::TemperatureCharacteristicItemBaseType (id,
                                                           CharacteristicNominalId)
    {
    }

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const id_type& id,
                                                  ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::TemperatureCharacteristicItemBaseType (id,
                                                           std::move (CharacteristicNominalId))
    {
    }

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const UserDefinedTemperatureCharacteristicItemType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::TemperatureCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicItemType* UserDefinedTemperatureCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicItemType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicItemType::
    ~UserDefinedTemperatureCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicItemType >
    _xsd_UserDefinedTemperatureCharacteristicItemType_type_factory_init (
      L"UserDefinedTemperatureCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // AreaCharacteristicDefinitionBaseType
    //

    AreaCharacteristicDefinitionBaseType::
    AreaCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    AreaCharacteristicDefinitionBaseType::
    AreaCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    AreaCharacteristicDefinitionBaseType::
    AreaCharacteristicDefinitionBaseType (const AreaCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    AreaCharacteristicDefinitionBaseType::
    AreaCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AreaCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AreaCharacteristicDefinitionBaseType& AreaCharacteristicDefinitionBaseType::
    operator= (const AreaCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    AreaCharacteristicDefinitionBaseType::
    ~AreaCharacteristicDefinitionBaseType ()
    {
    }

    // AreaCharacteristicNominalBaseType
    //

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType (const AreaCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AreaCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AreaCharacteristicNominalBaseType& AreaCharacteristicNominalBaseType::
    operator= (const AreaCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    AreaCharacteristicNominalBaseType::
    ~AreaCharacteristicNominalBaseType ()
    {
    }

    // AreaCharacteristicMeasurementBaseType
    //

    AreaCharacteristicMeasurementBaseType::
    AreaCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AreaCharacteristicMeasurementBaseType::
    AreaCharacteristicMeasurementBaseType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AreaCharacteristicMeasurementBaseType::
    AreaCharacteristicMeasurementBaseType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AreaCharacteristicMeasurementBaseType::
    AreaCharacteristicMeasurementBaseType (const AreaCharacteristicMeasurementBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    AreaCharacteristicMeasurementBaseType::
    AreaCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AreaCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AreaCharacteristicMeasurementBaseType& AreaCharacteristicMeasurementBaseType::
    operator= (const AreaCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    AreaCharacteristicMeasurementBaseType::
    ~AreaCharacteristicMeasurementBaseType ()
    {
    }

    // AreaCharacteristicItemBaseType
    //

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const AreaCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    AreaCharacteristicItemBaseType::
    ~AreaCharacteristicItemBaseType ()
    {
    }

    // UserDefinedAreaCharacteristicDefinitionType
    //

    UserDefinedAreaCharacteristicDefinitionType::
    UserDefinedAreaCharacteristicDefinitionType ()
    : ::xsd::qif30::AreaCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedAreaCharacteristicDefinitionType::
    UserDefinedAreaCharacteristicDefinitionType (const id_type& id,
                                                 const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::AreaCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedAreaCharacteristicDefinitionType::
    UserDefinedAreaCharacteristicDefinitionType (const UserDefinedAreaCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedAreaCharacteristicDefinitionType::
    UserDefinedAreaCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAreaCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::AreaCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedAreaCharacteristicDefinitionType* UserDefinedAreaCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedAreaCharacteristicDefinitionType& UserDefinedAreaCharacteristicDefinitionType::
    operator= (const UserDefinedAreaCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::AreaCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedAreaCharacteristicDefinitionType::
    ~UserDefinedAreaCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAreaCharacteristicDefinitionType >
    _xsd_UserDefinedAreaCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedAreaCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedAreaCharacteristicNominalType
    //

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType ()
    : ::xsd::qif30::AreaCharacteristicNominalBaseType ()
    {
    }

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::AreaCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::AreaCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType (const UserDefinedAreaCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedAreaCharacteristicNominalType* UserDefinedAreaCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicNominalType (*this, f, c);
    }

    UserDefinedAreaCharacteristicNominalType::
    ~UserDefinedAreaCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAreaCharacteristicNominalType >
    _xsd_UserDefinedAreaCharacteristicNominalType_type_factory_init (
      L"UserDefinedAreaCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedAreaCharacteristicMeasurementType
    //

    UserDefinedAreaCharacteristicMeasurementType::
    UserDefinedAreaCharacteristicMeasurementType ()
    : ::xsd::qif30::AreaCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedAreaCharacteristicMeasurementType::
    UserDefinedAreaCharacteristicMeasurementType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::AreaCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId)
    {
    }

    UserDefinedAreaCharacteristicMeasurementType::
    UserDefinedAreaCharacteristicMeasurementType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::AreaCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId))
    {
    }

    UserDefinedAreaCharacteristicMeasurementType::
    UserDefinedAreaCharacteristicMeasurementType (const UserDefinedAreaCharacteristicMeasurementType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedAreaCharacteristicMeasurementType::
    UserDefinedAreaCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedAreaCharacteristicMeasurementType* UserDefinedAreaCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedAreaCharacteristicMeasurementType::
    ~UserDefinedAreaCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAreaCharacteristicMeasurementType >
    _xsd_UserDefinedAreaCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedAreaCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedAreaCharacteristicItemType
    //

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType ()
    : ::xsd::qif30::AreaCharacteristicItemBaseType ()
    {
    }

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::AreaCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::AreaCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const UserDefinedAreaCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::AreaCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedAreaCharacteristicItemType* UserDefinedAreaCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicItemType (*this, f, c);
    }

    UserDefinedAreaCharacteristicItemType::
    ~UserDefinedAreaCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedAreaCharacteristicItemType >
    _xsd_UserDefinedAreaCharacteristicItemType_type_factory_init (
      L"UserDefinedAreaCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ForceCharacteristicDefinitionBaseType
    //

    ForceCharacteristicDefinitionBaseType::
    ForceCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    ForceCharacteristicDefinitionBaseType::
    ForceCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    ForceCharacteristicDefinitionBaseType::
    ForceCharacteristicDefinitionBaseType (const ForceCharacteristicDefinitionBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    ForceCharacteristicDefinitionBaseType::
    ForceCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ForceCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ForceCharacteristicDefinitionBaseType& ForceCharacteristicDefinitionBaseType::
    operator= (const ForceCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    ForceCharacteristicDefinitionBaseType::
    ~ForceCharacteristicDefinitionBaseType ()
    {
    }

    // ForceCharacteristicNominalBaseType
    //

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType (const ForceCharacteristicNominalBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ForceCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ForceCharacteristicNominalBaseType& ForceCharacteristicNominalBaseType::
    operator= (const ForceCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    ForceCharacteristicNominalBaseType::
    ~ForceCharacteristicNominalBaseType ()
    {
    }

    // ForceCharacteristicMeasurementBaseType
    //

    ForceCharacteristicMeasurementBaseType::
    ForceCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    ForceCharacteristicMeasurementBaseType::
    ForceCharacteristicMeasurementBaseType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    ForceCharacteristicMeasurementBaseType::
    ForceCharacteristicMeasurementBaseType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    ForceCharacteristicMeasurementBaseType::
    ForceCharacteristicMeasurementBaseType (const ForceCharacteristicMeasurementBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    ForceCharacteristicMeasurementBaseType::
    ForceCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ForceCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ForceCharacteristicMeasurementBaseType& ForceCharacteristicMeasurementBaseType::
    operator= (const ForceCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    ForceCharacteristicMeasurementBaseType::
    ~ForceCharacteristicMeasurementBaseType ()
    {
    }

    // ForceCharacteristicItemBaseType
    //

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const ForceCharacteristicItemBaseType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    ForceCharacteristicItemBaseType::
    ~ForceCharacteristicItemBaseType ()
    {
    }

    // UserDefinedForceCharacteristicDefinitionType
    //

    UserDefinedForceCharacteristicDefinitionType::
    UserDefinedForceCharacteristicDefinitionType ()
    : ::xsd::qif30::ForceCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedForceCharacteristicDefinitionType::
    UserDefinedForceCharacteristicDefinitionType (const id_type& id,
                                                  const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::ForceCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedForceCharacteristicDefinitionType::
    UserDefinedForceCharacteristicDefinitionType (const UserDefinedForceCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedForceCharacteristicDefinitionType::
    UserDefinedForceCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedForceCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::ForceCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedForceCharacteristicDefinitionType* UserDefinedForceCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedForceCharacteristicDefinitionType& UserDefinedForceCharacteristicDefinitionType::
    operator= (const UserDefinedForceCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::ForceCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedForceCharacteristicDefinitionType::
    ~UserDefinedForceCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedForceCharacteristicDefinitionType >
    _xsd_UserDefinedForceCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedForceCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedForceCharacteristicNominalType
    //

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType ()
    : ::xsd::qif30::ForceCharacteristicNominalBaseType ()
    {
    }

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::ForceCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType (const id_type& id,
                                               ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::ForceCharacteristicNominalBaseType (id,
                                                        std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType (const UserDefinedForceCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedForceCharacteristicNominalType* UserDefinedForceCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicNominalType (*this, f, c);
    }

    UserDefinedForceCharacteristicNominalType::
    ~UserDefinedForceCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedForceCharacteristicNominalType >
    _xsd_UserDefinedForceCharacteristicNominalType_type_factory_init (
      L"UserDefinedForceCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedForceCharacteristicMeasurementType
    //

    UserDefinedForceCharacteristicMeasurementType::
    UserDefinedForceCharacteristicMeasurementType ()
    : ::xsd::qif30::ForceCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedForceCharacteristicMeasurementType::
    UserDefinedForceCharacteristicMeasurementType (const id_type& id,
                                                   const Status_type& Status,
                                                   const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::ForceCharacteristicMeasurementBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    UserDefinedForceCharacteristicMeasurementType::
    UserDefinedForceCharacteristicMeasurementType (const id_type& id,
                                                   ::std::unique_ptr< Status_type > Status,
                                                   ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::ForceCharacteristicMeasurementBaseType (id,
                                                            std::move (Status),
                                                            std::move (CharacteristicItemId))
    {
    }

    UserDefinedForceCharacteristicMeasurementType::
    UserDefinedForceCharacteristicMeasurementType (const UserDefinedForceCharacteristicMeasurementType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedForceCharacteristicMeasurementType::
    UserDefinedForceCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedForceCharacteristicMeasurementType* UserDefinedForceCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedForceCharacteristicMeasurementType::
    ~UserDefinedForceCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedForceCharacteristicMeasurementType >
    _xsd_UserDefinedForceCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedForceCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedForceCharacteristicItemType
    //

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType ()
    : ::xsd::qif30::ForceCharacteristicItemBaseType ()
    {
    }

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const id_type& id,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::ForceCharacteristicItemBaseType (id,
                                                     CharacteristicNominalId)
    {
    }

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const id_type& id,
                                            ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::ForceCharacteristicItemBaseType (id,
                                                     std::move (CharacteristicNominalId))
    {
    }

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const UserDefinedForceCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::ForceCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedForceCharacteristicItemType* UserDefinedForceCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicItemType (*this, f, c);
    }

    UserDefinedForceCharacteristicItemType::
    ~UserDefinedForceCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedForceCharacteristicItemType >
    _xsd_UserDefinedForceCharacteristicItemType_type_factory_init (
      L"UserDefinedForceCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // MassCharacteristicDefinitionBaseType
    //

    MassCharacteristicDefinitionBaseType::
    MassCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    MassCharacteristicDefinitionBaseType::
    MassCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    MassCharacteristicDefinitionBaseType::
    MassCharacteristicDefinitionBaseType (const MassCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    MassCharacteristicDefinitionBaseType::
    MassCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MassCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    MassCharacteristicDefinitionBaseType& MassCharacteristicDefinitionBaseType::
    operator= (const MassCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    MassCharacteristicDefinitionBaseType::
    ~MassCharacteristicDefinitionBaseType ()
    {
    }

    // MassCharacteristicNominalBaseType
    //

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType (const MassCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MassCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    MassCharacteristicNominalBaseType& MassCharacteristicNominalBaseType::
    operator= (const MassCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    MassCharacteristicNominalBaseType::
    ~MassCharacteristicNominalBaseType ()
    {
    }

    // MassCharacteristicMeasurementBaseType
    //

    MassCharacteristicMeasurementBaseType::
    MassCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    MassCharacteristicMeasurementBaseType::
    MassCharacteristicMeasurementBaseType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    MassCharacteristicMeasurementBaseType::
    MassCharacteristicMeasurementBaseType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    MassCharacteristicMeasurementBaseType::
    MassCharacteristicMeasurementBaseType (const MassCharacteristicMeasurementBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    MassCharacteristicMeasurementBaseType::
    MassCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void MassCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    MassCharacteristicMeasurementBaseType& MassCharacteristicMeasurementBaseType::
    operator= (const MassCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    MassCharacteristicMeasurementBaseType::
    ~MassCharacteristicMeasurementBaseType ()
    {
    }

    // MassCharacteristicItemBaseType
    //

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const MassCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    MassCharacteristicItemBaseType::
    ~MassCharacteristicItemBaseType ()
    {
    }

    // UserDefinedMassCharacteristicDefinitionType
    //

    UserDefinedMassCharacteristicDefinitionType::
    UserDefinedMassCharacteristicDefinitionType ()
    : ::xsd::qif30::MassCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedMassCharacteristicDefinitionType::
    UserDefinedMassCharacteristicDefinitionType (const id_type& id,
                                                 const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::MassCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedMassCharacteristicDefinitionType::
    UserDefinedMassCharacteristicDefinitionType (const UserDefinedMassCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedMassCharacteristicDefinitionType::
    UserDefinedMassCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedMassCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::MassCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedMassCharacteristicDefinitionType* UserDefinedMassCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedMassCharacteristicDefinitionType& UserDefinedMassCharacteristicDefinitionType::
    operator= (const UserDefinedMassCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::MassCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedMassCharacteristicDefinitionType::
    ~UserDefinedMassCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedMassCharacteristicDefinitionType >
    _xsd_UserDefinedMassCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedMassCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedMassCharacteristicNominalType
    //

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType ()
    : ::xsd::qif30::MassCharacteristicNominalBaseType ()
    {
    }

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::MassCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::MassCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType (const UserDefinedMassCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedMassCharacteristicNominalType* UserDefinedMassCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicNominalType (*this, f, c);
    }

    UserDefinedMassCharacteristicNominalType::
    ~UserDefinedMassCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedMassCharacteristicNominalType >
    _xsd_UserDefinedMassCharacteristicNominalType_type_factory_init (
      L"UserDefinedMassCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedMassCharacteristicMeasurementType
    //

    UserDefinedMassCharacteristicMeasurementType::
    UserDefinedMassCharacteristicMeasurementType ()
    : ::xsd::qif30::MassCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedMassCharacteristicMeasurementType::
    UserDefinedMassCharacteristicMeasurementType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::MassCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId)
    {
    }

    UserDefinedMassCharacteristicMeasurementType::
    UserDefinedMassCharacteristicMeasurementType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::MassCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId))
    {
    }

    UserDefinedMassCharacteristicMeasurementType::
    UserDefinedMassCharacteristicMeasurementType (const UserDefinedMassCharacteristicMeasurementType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedMassCharacteristicMeasurementType::
    UserDefinedMassCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedMassCharacteristicMeasurementType* UserDefinedMassCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedMassCharacteristicMeasurementType::
    ~UserDefinedMassCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedMassCharacteristicMeasurementType >
    _xsd_UserDefinedMassCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedMassCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedMassCharacteristicItemType
    //

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType ()
    : ::xsd::qif30::MassCharacteristicItemBaseType ()
    {
    }

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::MassCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::MassCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const UserDefinedMassCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::MassCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedMassCharacteristicItemType* UserDefinedMassCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicItemType (*this, f, c);
    }

    UserDefinedMassCharacteristicItemType::
    ~UserDefinedMassCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedMassCharacteristicItemType >
    _xsd_UserDefinedMassCharacteristicItemType_type_factory_init (
      L"UserDefinedMassCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // PressureCharacteristicDefinitionBaseType
    //

    PressureCharacteristicDefinitionBaseType::
    PressureCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    PressureCharacteristicDefinitionBaseType::
    PressureCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    PressureCharacteristicDefinitionBaseType::
    PressureCharacteristicDefinitionBaseType (const PressureCharacteristicDefinitionBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    PressureCharacteristicDefinitionBaseType::
    PressureCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PressureCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PressureCharacteristicDefinitionBaseType& PressureCharacteristicDefinitionBaseType::
    operator= (const PressureCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    PressureCharacteristicDefinitionBaseType::
    ~PressureCharacteristicDefinitionBaseType ()
    {
    }

    // PressureCharacteristicNominalBaseType
    //

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType (const PressureCharacteristicNominalBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PressureCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PressureCharacteristicNominalBaseType& PressureCharacteristicNominalBaseType::
    operator= (const PressureCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    PressureCharacteristicNominalBaseType::
    ~PressureCharacteristicNominalBaseType ()
    {
    }

    // PressureCharacteristicMeasurementBaseType
    //

    PressureCharacteristicMeasurementBaseType::
    PressureCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    PressureCharacteristicMeasurementBaseType::
    PressureCharacteristicMeasurementBaseType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    PressureCharacteristicMeasurementBaseType::
    PressureCharacteristicMeasurementBaseType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    PressureCharacteristicMeasurementBaseType::
    PressureCharacteristicMeasurementBaseType (const PressureCharacteristicMeasurementBaseType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    PressureCharacteristicMeasurementBaseType::
    PressureCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PressureCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PressureCharacteristicMeasurementBaseType& PressureCharacteristicMeasurementBaseType::
    operator= (const PressureCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    PressureCharacteristicMeasurementBaseType::
    ~PressureCharacteristicMeasurementBaseType ()
    {
    }

    // PressureCharacteristicItemBaseType
    //

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const PressureCharacteristicItemBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    PressureCharacteristicItemBaseType::
    ~PressureCharacteristicItemBaseType ()
    {
    }

    // UserDefinedPressureCharacteristicDefinitionType
    //

    UserDefinedPressureCharacteristicDefinitionType::
    UserDefinedPressureCharacteristicDefinitionType ()
    : ::xsd::qif30::PressureCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedPressureCharacteristicDefinitionType::
    UserDefinedPressureCharacteristicDefinitionType (const id_type& id,
                                                     const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::PressureCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedPressureCharacteristicDefinitionType::
    UserDefinedPressureCharacteristicDefinitionType (const UserDefinedPressureCharacteristicDefinitionType& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedPressureCharacteristicDefinitionType::
    UserDefinedPressureCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedPressureCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::PressureCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedPressureCharacteristicDefinitionType* UserDefinedPressureCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedPressureCharacteristicDefinitionType& UserDefinedPressureCharacteristicDefinitionType::
    operator= (const UserDefinedPressureCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::PressureCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedPressureCharacteristicDefinitionType::
    ~UserDefinedPressureCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedPressureCharacteristicDefinitionType >
    _xsd_UserDefinedPressureCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedPressureCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedPressureCharacteristicNominalType
    //

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType ()
    : ::xsd::qif30::PressureCharacteristicNominalBaseType ()
    {
    }

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType (const id_type& id,
                                                  const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::PressureCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId)
    {
    }

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType (const id_type& id,
                                                  ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::PressureCharacteristicNominalBaseType (id,
                                                           std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType (const UserDefinedPressureCharacteristicNominalType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedPressureCharacteristicNominalType* UserDefinedPressureCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicNominalType (*this, f, c);
    }

    UserDefinedPressureCharacteristicNominalType::
    ~UserDefinedPressureCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedPressureCharacteristicNominalType >
    _xsd_UserDefinedPressureCharacteristicNominalType_type_factory_init (
      L"UserDefinedPressureCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedPressureCharacteristicMeasurementType
    //

    UserDefinedPressureCharacteristicMeasurementType::
    UserDefinedPressureCharacteristicMeasurementType ()
    : ::xsd::qif30::PressureCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedPressureCharacteristicMeasurementType::
    UserDefinedPressureCharacteristicMeasurementType (const id_type& id,
                                                      const Status_type& Status,
                                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::PressureCharacteristicMeasurementBaseType (id,
                                                               Status,
                                                               CharacteristicItemId)
    {
    }

    UserDefinedPressureCharacteristicMeasurementType::
    UserDefinedPressureCharacteristicMeasurementType (const id_type& id,
                                                      ::std::unique_ptr< Status_type > Status,
                                                      ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::PressureCharacteristicMeasurementBaseType (id,
                                                               std::move (Status),
                                                               std::move (CharacteristicItemId))
    {
    }

    UserDefinedPressureCharacteristicMeasurementType::
    UserDefinedPressureCharacteristicMeasurementType (const UserDefinedPressureCharacteristicMeasurementType& x,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedPressureCharacteristicMeasurementType::
    UserDefinedPressureCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedPressureCharacteristicMeasurementType* UserDefinedPressureCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedPressureCharacteristicMeasurementType::
    ~UserDefinedPressureCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedPressureCharacteristicMeasurementType >
    _xsd_UserDefinedPressureCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedPressureCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedPressureCharacteristicItemType
    //

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType ()
    : ::xsd::qif30::PressureCharacteristicItemBaseType ()
    {
    }

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const id_type& id,
                                               const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::PressureCharacteristicItemBaseType (id,
                                                        CharacteristicNominalId)
    {
    }

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const id_type& id,
                                               ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::PressureCharacteristicItemBaseType (id,
                                                        std::move (CharacteristicNominalId))
    {
    }

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const UserDefinedPressureCharacteristicItemType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::PressureCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedPressureCharacteristicItemType* UserDefinedPressureCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicItemType (*this, f, c);
    }

    UserDefinedPressureCharacteristicItemType::
    ~UserDefinedPressureCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedPressureCharacteristicItemType >
    _xsd_UserDefinedPressureCharacteristicItemType_type_factory_init (
      L"UserDefinedPressureCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SpeedCharacteristicDefinitionBaseType
    //

    SpeedCharacteristicDefinitionBaseType::
    SpeedCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    SpeedCharacteristicDefinitionBaseType::
    SpeedCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    SpeedCharacteristicDefinitionBaseType::
    SpeedCharacteristicDefinitionBaseType (const SpeedCharacteristicDefinitionBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    SpeedCharacteristicDefinitionBaseType::
    SpeedCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SpeedCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SpeedCharacteristicDefinitionBaseType& SpeedCharacteristicDefinitionBaseType::
    operator= (const SpeedCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    SpeedCharacteristicDefinitionBaseType::
    ~SpeedCharacteristicDefinitionBaseType ()
    {
    }

    // SpeedCharacteristicNominalBaseType
    //

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType (const SpeedCharacteristicNominalBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SpeedCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SpeedCharacteristicNominalBaseType& SpeedCharacteristicNominalBaseType::
    operator= (const SpeedCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    SpeedCharacteristicNominalBaseType::
    ~SpeedCharacteristicNominalBaseType ()
    {
    }

    // SpeedCharacteristicMeasurementBaseType
    //

    SpeedCharacteristicMeasurementBaseType::
    SpeedCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    SpeedCharacteristicMeasurementBaseType::
    SpeedCharacteristicMeasurementBaseType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    SpeedCharacteristicMeasurementBaseType::
    SpeedCharacteristicMeasurementBaseType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    SpeedCharacteristicMeasurementBaseType::
    SpeedCharacteristicMeasurementBaseType (const SpeedCharacteristicMeasurementBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    SpeedCharacteristicMeasurementBaseType::
    SpeedCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SpeedCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SpeedCharacteristicMeasurementBaseType& SpeedCharacteristicMeasurementBaseType::
    operator= (const SpeedCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    SpeedCharacteristicMeasurementBaseType::
    ~SpeedCharacteristicMeasurementBaseType ()
    {
    }

    // SpeedCharacteristicItemBaseType
    //

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const SpeedCharacteristicItemBaseType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    SpeedCharacteristicItemBaseType::
    ~SpeedCharacteristicItemBaseType ()
    {
    }

    // UserDefinedSpeedCharacteristicDefinitionType
    //

    UserDefinedSpeedCharacteristicDefinitionType::
    UserDefinedSpeedCharacteristicDefinitionType ()
    : ::xsd::qif30::SpeedCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedSpeedCharacteristicDefinitionType::
    UserDefinedSpeedCharacteristicDefinitionType (const id_type& id,
                                                  const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::SpeedCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedSpeedCharacteristicDefinitionType::
    UserDefinedSpeedCharacteristicDefinitionType (const UserDefinedSpeedCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedSpeedCharacteristicDefinitionType::
    UserDefinedSpeedCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedSpeedCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::SpeedCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedSpeedCharacteristicDefinitionType* UserDefinedSpeedCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicDefinitionType& UserDefinedSpeedCharacteristicDefinitionType::
    operator= (const UserDefinedSpeedCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::SpeedCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedSpeedCharacteristicDefinitionType::
    ~UserDefinedSpeedCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicDefinitionType >
    _xsd_UserDefinedSpeedCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedSpeedCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedSpeedCharacteristicNominalType
    //

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType ()
    : ::xsd::qif30::SpeedCharacteristicNominalBaseType ()
    {
    }

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::SpeedCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType (const id_type& id,
                                               ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::SpeedCharacteristicNominalBaseType (id,
                                                        std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType (const UserDefinedSpeedCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedSpeedCharacteristicNominalType* UserDefinedSpeedCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicNominalType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicNominalType::
    ~UserDefinedSpeedCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicNominalType >
    _xsd_UserDefinedSpeedCharacteristicNominalType_type_factory_init (
      L"UserDefinedSpeedCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedSpeedCharacteristicMeasurementType
    //

    UserDefinedSpeedCharacteristicMeasurementType::
    UserDefinedSpeedCharacteristicMeasurementType ()
    : ::xsd::qif30::SpeedCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedSpeedCharacteristicMeasurementType::
    UserDefinedSpeedCharacteristicMeasurementType (const id_type& id,
                                                   const Status_type& Status,
                                                   const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::SpeedCharacteristicMeasurementBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    UserDefinedSpeedCharacteristicMeasurementType::
    UserDefinedSpeedCharacteristicMeasurementType (const id_type& id,
                                                   ::std::unique_ptr< Status_type > Status,
                                                   ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::SpeedCharacteristicMeasurementBaseType (id,
                                                            std::move (Status),
                                                            std::move (CharacteristicItemId))
    {
    }

    UserDefinedSpeedCharacteristicMeasurementType::
    UserDefinedSpeedCharacteristicMeasurementType (const UserDefinedSpeedCharacteristicMeasurementType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedSpeedCharacteristicMeasurementType::
    UserDefinedSpeedCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedSpeedCharacteristicMeasurementType* UserDefinedSpeedCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicMeasurementType::
    ~UserDefinedSpeedCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicMeasurementType >
    _xsd_UserDefinedSpeedCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedSpeedCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedSpeedCharacteristicItemType
    //

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType ()
    : ::xsd::qif30::SpeedCharacteristicItemBaseType ()
    {
    }

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const id_type& id,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::SpeedCharacteristicItemBaseType (id,
                                                     CharacteristicNominalId)
    {
    }

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const id_type& id,
                                            ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::SpeedCharacteristicItemBaseType (id,
                                                     std::move (CharacteristicNominalId))
    {
    }

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const UserDefinedSpeedCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::SpeedCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedSpeedCharacteristicItemType* UserDefinedSpeedCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicItemType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicItemType::
    ~UserDefinedSpeedCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicItemType >
    _xsd_UserDefinedSpeedCharacteristicItemType_type_factory_init (
      L"UserDefinedSpeedCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // TimeCharacteristicDefinitionBaseType
    //

    TimeCharacteristicDefinitionBaseType::
    TimeCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    TimeCharacteristicDefinitionBaseType::
    TimeCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    TimeCharacteristicDefinitionBaseType::
    TimeCharacteristicDefinitionBaseType (const TimeCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    TimeCharacteristicDefinitionBaseType::
    TimeCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void TimeCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    TimeCharacteristicDefinitionBaseType& TimeCharacteristicDefinitionBaseType::
    operator= (const TimeCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    TimeCharacteristicDefinitionBaseType::
    ~TimeCharacteristicDefinitionBaseType ()
    {
    }

    // TimeCharacteristicNominalBaseType
    //

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType (const TimeCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void TimeCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    TimeCharacteristicNominalBaseType& TimeCharacteristicNominalBaseType::
    operator= (const TimeCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    TimeCharacteristicNominalBaseType::
    ~TimeCharacteristicNominalBaseType ()
    {
    }

    // TimeCharacteristicMeasurementBaseType
    //

    TimeCharacteristicMeasurementBaseType::
    TimeCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    TimeCharacteristicMeasurementBaseType::
    TimeCharacteristicMeasurementBaseType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    TimeCharacteristicMeasurementBaseType::
    TimeCharacteristicMeasurementBaseType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    TimeCharacteristicMeasurementBaseType::
    TimeCharacteristicMeasurementBaseType (const TimeCharacteristicMeasurementBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    TimeCharacteristicMeasurementBaseType::
    TimeCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void TimeCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    TimeCharacteristicMeasurementBaseType& TimeCharacteristicMeasurementBaseType::
    operator= (const TimeCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    TimeCharacteristicMeasurementBaseType::
    ~TimeCharacteristicMeasurementBaseType ()
    {
    }

    // TimeCharacteristicItemBaseType
    //

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const TimeCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    TimeCharacteristicItemBaseType::
    ~TimeCharacteristicItemBaseType ()
    {
    }

    // UserDefinedTimeCharacteristicDefinitionType
    //

    UserDefinedTimeCharacteristicDefinitionType::
    UserDefinedTimeCharacteristicDefinitionType ()
    : ::xsd::qif30::TimeCharacteristicDefinitionBaseType (),
      WhatToMeasure_ (this)
    {
    }

    UserDefinedTimeCharacteristicDefinitionType::
    UserDefinedTimeCharacteristicDefinitionType (const id_type& id,
                                                 const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif30::TimeCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, this)
    {
    }

    UserDefinedTimeCharacteristicDefinitionType::
    UserDefinedTimeCharacteristicDefinitionType (const UserDefinedTimeCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedTimeCharacteristicDefinitionType::
    UserDefinedTimeCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedTimeCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::TimeCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WhatToMeasure
        //
        if (n.name () == L"WhatToMeasure" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WhatToMeasure",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedTimeCharacteristicDefinitionType* UserDefinedTimeCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedTimeCharacteristicDefinitionType& UserDefinedTimeCharacteristicDefinitionType::
    operator= (const UserDefinedTimeCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::TimeCharacteristicDefinitionBaseType& > (*this) = x;
        this->WhatToMeasure_ = x.WhatToMeasure_;
      }

      return *this;
    }

    UserDefinedTimeCharacteristicDefinitionType::
    ~UserDefinedTimeCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTimeCharacteristicDefinitionType >
    _xsd_UserDefinedTimeCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedTimeCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedTimeCharacteristicNominalType
    //

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType ()
    : ::xsd::qif30::TimeCharacteristicNominalBaseType ()
    {
    }

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::TimeCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::TimeCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType (const UserDefinedTimeCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedTimeCharacteristicNominalType* UserDefinedTimeCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicNominalType (*this, f, c);
    }

    UserDefinedTimeCharacteristicNominalType::
    ~UserDefinedTimeCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTimeCharacteristicNominalType >
    _xsd_UserDefinedTimeCharacteristicNominalType_type_factory_init (
      L"UserDefinedTimeCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedTimeCharacteristicMeasurementType
    //

    UserDefinedTimeCharacteristicMeasurementType::
    UserDefinedTimeCharacteristicMeasurementType ()
    : ::xsd::qif30::TimeCharacteristicMeasurementBaseType ()
    {
    }

    UserDefinedTimeCharacteristicMeasurementType::
    UserDefinedTimeCharacteristicMeasurementType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::TimeCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId)
    {
    }

    UserDefinedTimeCharacteristicMeasurementType::
    UserDefinedTimeCharacteristicMeasurementType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::TimeCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId))
    {
    }

    UserDefinedTimeCharacteristicMeasurementType::
    UserDefinedTimeCharacteristicMeasurementType (const UserDefinedTimeCharacteristicMeasurementType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    UserDefinedTimeCharacteristicMeasurementType::
    UserDefinedTimeCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    UserDefinedTimeCharacteristicMeasurementType* UserDefinedTimeCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedTimeCharacteristicMeasurementType::
    ~UserDefinedTimeCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTimeCharacteristicMeasurementType >
    _xsd_UserDefinedTimeCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedTimeCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedTimeCharacteristicItemType
    //

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType ()
    : ::xsd::qif30::TimeCharacteristicItemBaseType ()
    {
    }

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::TimeCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::TimeCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const UserDefinedTimeCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::TimeCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedTimeCharacteristicItemType* UserDefinedTimeCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicItemType (*this, f, c);
    }

    UserDefinedTimeCharacteristicItemType::
    ~UserDefinedTimeCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedTimeCharacteristicItemType >
    _xsd_UserDefinedTimeCharacteristicItemType_type_factory_init (
      L"UserDefinedTimeCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedUnitCharacteristicDefinitionType
    //

    UserDefinedUnitCharacteristicDefinitionType::
    UserDefinedUnitCharacteristicDefinitionType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType ()
    {
    }

    UserDefinedUnitCharacteristicDefinitionType::
    UserDefinedUnitCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id)
    {
    }

    UserDefinedUnitCharacteristicDefinitionType::
    UserDefinedUnitCharacteristicDefinitionType (const UserDefinedUnitCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c)
    {
    }

    UserDefinedUnitCharacteristicDefinitionType::
    UserDefinedUnitCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f, c)
    {
    }

    UserDefinedUnitCharacteristicDefinitionType* UserDefinedUnitCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedUnitCharacteristicDefinitionType::
    ~UserDefinedUnitCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedUnitCharacteristicDefinitionType >
    _xsd_UserDefinedUnitCharacteristicDefinitionType_type_factory_init (
      L"UserDefinedUnitCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedUnitCharacteristicNominalType
    //

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      TargetValue_ (this),
      MaxValue_ (this),
      MinValue_ (this),
      DefinedAsLimit_ (this)
    {
    }

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                              const TargetValue_type& TargetValue,
                                              const DefinedAsLimit_type& DefinedAsLimit)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      TargetValue_ (TargetValue, this),
      MaxValue_ (this),
      MinValue_ (this),
      DefinedAsLimit_ (DefinedAsLimit, this)
    {
    }

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                              ::std::unique_ptr< TargetValue_type > TargetValue,
                                              const DefinedAsLimit_type& DefinedAsLimit)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      TargetValue_ (std::move (TargetValue), this),
      MaxValue_ (this),
      MinValue_ (this),
      DefinedAsLimit_ (DefinedAsLimit, this)
    {
    }

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const UserDefinedUnitCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this),
      DefinedAsLimit_ (x.DefinedAsLimit_, f, this)
    {
    }

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this),
      MaxValue_ (this),
      MinValue_ (this),
      DefinedAsLimit_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedUnitCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!TargetValue_.present ())
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        // DefinedAsLimit
        //
        if (n.name () == L"DefinedAsLimit" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!DefinedAsLimit_.present ())
          {
            this->DefinedAsLimit_.set (DefinedAsLimit_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!TargetValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"TargetValue",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!DefinedAsLimit_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"DefinedAsLimit",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    UserDefinedUnitCharacteristicNominalType* UserDefinedUnitCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicNominalType (*this, f, c);
    }

    UserDefinedUnitCharacteristicNominalType& UserDefinedUnitCharacteristicNominalType::
    operator= (const UserDefinedUnitCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
        this->DefinedAsLimit_ = x.DefinedAsLimit_;
      }

      return *this;
    }

    UserDefinedUnitCharacteristicNominalType::
    ~UserDefinedUnitCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedUnitCharacteristicNominalType >
    _xsd_UserDefinedUnitCharacteristicNominalType_type_factory_init (
      L"UserDefinedUnitCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedUnitCharacteristicMeasurementType
    //

    UserDefinedUnitCharacteristicMeasurementType::
    UserDefinedUnitCharacteristicMeasurementType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    UserDefinedUnitCharacteristicMeasurementType::
    UserDefinedUnitCharacteristicMeasurementType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    UserDefinedUnitCharacteristicMeasurementType::
    UserDefinedUnitCharacteristicMeasurementType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    UserDefinedUnitCharacteristicMeasurementType::
    UserDefinedUnitCharacteristicMeasurementType (const UserDefinedUnitCharacteristicMeasurementType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    UserDefinedUnitCharacteristicMeasurementType::
    UserDefinedUnitCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void UserDefinedUnitCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    UserDefinedUnitCharacteristicMeasurementType* UserDefinedUnitCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicMeasurementType (*this, f, c);
    }

    UserDefinedUnitCharacteristicMeasurementType& UserDefinedUnitCharacteristicMeasurementType::
    operator= (const UserDefinedUnitCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    UserDefinedUnitCharacteristicMeasurementType::
    ~UserDefinedUnitCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedUnitCharacteristicMeasurementType >
    _xsd_UserDefinedUnitCharacteristicMeasurementType_type_factory_init (
      L"UserDefinedUnitCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // UserDefinedUnitCharacteristicItemType
    //

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const UserDefinedUnitCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedUnitCharacteristicItemType* UserDefinedUnitCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicItemType (*this, f, c);
    }

    UserDefinedUnitCharacteristicItemType::
    ~UserDefinedUnitCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, UserDefinedUnitCharacteristicItemType >
    _xsd_UserDefinedUnitCharacteristicItemType_type_factory_init (
      L"UserDefinedUnitCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // CompositeSegmentDefinitionBaseType
    //

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType ()
    : ::xml_schema::type (),
      DatumReferenceFrameId_ (this),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      CharacteristicDesignator_ (this)
    {
    }

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (const ToleranceValue_type& ToleranceValue)
    : ::xml_schema::type (),
      DatumReferenceFrameId_ (this),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this),
      CharacteristicDesignator_ (this)
    {
    }

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xml_schema::type (),
      DatumReferenceFrameId_ (this),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this),
      CharacteristicDesignator_ (this)
    {
    }

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (const CompositeSegmentDefinitionBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      CharacteristicDesignator_ (x.CharacteristicDesignator_, f, this)
    {
    }

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DatumReferenceFrameId_ (this),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      CharacteristicDesignator_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DatumReferenceFrameId
        //
        if (n.name () == L"DatumReferenceFrameId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!this->DatumReferenceFrameId_)
          {
            this->DatumReferenceFrameId_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicDesignator
        //
        if (n.name () == L"CharacteristicDesignator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicDesignator_type > r (
            CharacteristicDesignator_traits::create (i, f, this));

          if (!this->CharacteristicDesignator_)
          {
            this->CharacteristicDesignator_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CompositeSegmentDefinitionBaseType& CompositeSegmentDefinitionBaseType::
    operator= (const CompositeSegmentDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->DatumReferenceFrameId_ = x.DatumReferenceFrameId_;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->CharacteristicDesignator_ = x.CharacteristicDesignator_;
      }

      return *this;
    }

    CompositeSegmentDefinitionBaseType::
    ~CompositeSegmentDefinitionBaseType ()
    {
    }

    // CompositeSegmentMeasurementBaseType
    //

    CompositeSegmentMeasurementBaseType::
    CompositeSegmentMeasurementBaseType ()
    : ::xml_schema::type (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this),
      Status_ (this),
      DRFTransformActualId_ (this),
      ZoneDataSet_ (this)
    {
    }

    CompositeSegmentMeasurementBaseType::
    CompositeSegmentMeasurementBaseType (const Status_type& Status)
    : ::xml_schema::type (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this),
      Status_ (Status, this),
      DRFTransformActualId_ (this),
      ZoneDataSet_ (this)
    {
    }

    CompositeSegmentMeasurementBaseType::
    CompositeSegmentMeasurementBaseType (::std::unique_ptr< Status_type > Status)
    : ::xml_schema::type (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this),
      Status_ (std::move (Status), this),
      DRFTransformActualId_ (this),
      ZoneDataSet_ (this)
    {
    }

    CompositeSegmentMeasurementBaseType::
    CompositeSegmentMeasurementBaseType (const CompositeSegmentMeasurementBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this),
      Status_ (x.Status_, f, this),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this),
      ZoneDataSet_ (x.ZoneDataSet_, f, this)
    {
    }

    CompositeSegmentMeasurementBaseType::
    CompositeSegmentMeasurementBaseType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this),
      Status_ (this),
      DRFTransformActualId_ (this),
      ZoneDataSet_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        // Status
        //
        if (n.name () == L"Status" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (::std::move (r));
            continue;
          }
        }

        // DRFTransformActualId
        //
        if (n.name () == L"DRFTransformActualId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (::std::move (r));
            continue;
          }
        }

        // ZoneDataSet
        //
        if (n.name () == L"ZoneDataSet" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneDataSet_type > r (
            ZoneDataSet_traits::create (i, f, this));

          if (!this->ZoneDataSet_)
          {
            this->ZoneDataSet_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Status",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CompositeSegmentMeasurementBaseType& CompositeSegmentMeasurementBaseType::
    operator= (const CompositeSegmentMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
        this->Status_ = x.Status_;
        this->DRFTransformActualId_ = x.DRFTransformActualId_;
        this->ZoneDataSet_ = x.ZoneDataSet_;
      }

      return *this;
    }

    CompositeSegmentMeasurementBaseType::
    ~CompositeSegmentMeasurementBaseType ()
    {
    }

    // CompositeSegmentPositionDefinitionType
    //

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType ()
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (),
      MaterialCondition_ (this),
      ZoneShape_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZone_ (this)
    {
    }

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (const ToleranceValue_type& ToleranceValue,
                                            const MaterialCondition_type& MaterialCondition,
                                            const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (ToleranceValue),
      MaterialCondition_ (MaterialCondition, this),
      ZoneShape_ (ZoneShape, this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZone_ (this)
    {
    }

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                            const MaterialCondition_type& MaterialCondition,
                                            ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (std::move (ToleranceValue)),
      MaterialCondition_ (MaterialCondition, this),
      ZoneShape_ (std::move (ZoneShape), this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZone_ (this)
    {
    }

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (const CompositeSegmentPositionDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (x, f, c),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this),
      MaximumToleranceValue_ (x.MaximumToleranceValue_, f, this),
      ProjectedToleranceZone_ (x.ProjectedToleranceZone_, f, this)
    {
    }

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      MaterialCondition_ (this),
      ZoneShape_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentPositionDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CompositeSegmentDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // MaterialCondition
        //
        if (n.name () == L"MaterialCondition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!MaterialCondition_.present ())
          {
            this->MaterialCondition_.set (::std::move (r));
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == L"ZoneShape" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (::std::move (r));
            continue;
          }
        }

        // MaximumToleranceValue
        //
        if (n.name () == L"MaximumToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaximumToleranceValue_type > r (
            MaximumToleranceValue_traits::create (i, f, this));

          if (!this->MaximumToleranceValue_)
          {
            this->MaximumToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ProjectedToleranceZone
        //
        if (n.name () == L"ProjectedToleranceZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProjectedToleranceZone_type > r (
            ProjectedToleranceZone_traits::create (i, f, this));

          if (!this->ProjectedToleranceZone_)
          {
            this->ProjectedToleranceZone_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!MaterialCondition_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"MaterialCondition",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ZoneShape",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CompositeSegmentPositionDefinitionType* CompositeSegmentPositionDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentPositionDefinitionType (*this, f, c);
    }

    CompositeSegmentPositionDefinitionType& CompositeSegmentPositionDefinitionType::
    operator= (const CompositeSegmentPositionDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CompositeSegmentDefinitionBaseType& > (*this) = x;
        this->MaterialCondition_ = x.MaterialCondition_;
        this->ZoneShape_ = x.ZoneShape_;
        this->MaximumToleranceValue_ = x.MaximumToleranceValue_;
        this->ProjectedToleranceZone_ = x.ProjectedToleranceZone_;
      }

      return *this;
    }

    CompositeSegmentPositionDefinitionType::
    ~CompositeSegmentPositionDefinitionType ()
    {
    }

    // CompositeSegmentPositionMeasurementType
    //

    CompositeSegmentPositionMeasurementType::
    CompositeSegmentPositionMeasurementType ()
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType ()
    {
    }

    CompositeSegmentPositionMeasurementType::
    CompositeSegmentPositionMeasurementType (const Status_type& Status)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (Status)
    {
    }

    CompositeSegmentPositionMeasurementType::
    CompositeSegmentPositionMeasurementType (::std::unique_ptr< Status_type > Status)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (std::move (Status))
    {
    }

    CompositeSegmentPositionMeasurementType::
    CompositeSegmentPositionMeasurementType (const CompositeSegmentPositionMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (x, f, c)
    {
    }

    CompositeSegmentPositionMeasurementType::
    CompositeSegmentPositionMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (e, f, c)
    {
    }

    CompositeSegmentPositionMeasurementType* CompositeSegmentPositionMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentPositionMeasurementType (*this, f, c);
    }

    CompositeSegmentPositionMeasurementType::
    ~CompositeSegmentPositionMeasurementType ()
    {
    }

    // CompositeSegmentProfileDefinitionType
    //

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType ()
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (),
      OuterDisposition_ (this)
    {
    }

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (ToleranceValue),
      OuterDisposition_ (this)
    {
    }

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (std::move (ToleranceValue)),
      OuterDisposition_ (this)
    {
    }

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (const CompositeSegmentProfileDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (x, f, c),
      OuterDisposition_ (x.OuterDisposition_, f, this)
    {
    }

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      OuterDisposition_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentProfileDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CompositeSegmentDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // OuterDisposition
        //
        if (n.name () == L"OuterDisposition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OuterDisposition_type > r (
            OuterDisposition_traits::create (i, f, this));

          if (!this->OuterDisposition_)
          {
            this->OuterDisposition_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CompositeSegmentProfileDefinitionType* CompositeSegmentProfileDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentProfileDefinitionType (*this, f, c);
    }

    CompositeSegmentProfileDefinitionType& CompositeSegmentProfileDefinitionType::
    operator= (const CompositeSegmentProfileDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CompositeSegmentDefinitionBaseType& > (*this) = x;
        this->OuterDisposition_ = x.OuterDisposition_;
      }

      return *this;
    }

    CompositeSegmentProfileDefinitionType::
    ~CompositeSegmentProfileDefinitionType ()
    {
    }

    // CompositeSegmentProfileMeasurementType
    //

    CompositeSegmentProfileMeasurementType::
    CompositeSegmentProfileMeasurementType ()
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType ()
    {
    }

    CompositeSegmentProfileMeasurementType::
    CompositeSegmentProfileMeasurementType (const Status_type& Status)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (Status)
    {
    }

    CompositeSegmentProfileMeasurementType::
    CompositeSegmentProfileMeasurementType (::std::unique_ptr< Status_type > Status)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (std::move (Status))
    {
    }

    CompositeSegmentProfileMeasurementType::
    CompositeSegmentProfileMeasurementType (const CompositeSegmentProfileMeasurementType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (x, f, c)
    {
    }

    CompositeSegmentProfileMeasurementType::
    CompositeSegmentProfileMeasurementType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (e, f, c)
    {
    }

    CompositeSegmentProfileMeasurementType* CompositeSegmentProfileMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentProfileMeasurementType (*this, f, c);
    }

    CompositeSegmentProfileMeasurementType::
    ~CompositeSegmentProfileMeasurementType ()
    {
    }

    // CompositeSegmentSymmetryDefinitionType
    //

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType ()
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType ()
    {
    }

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (ToleranceValue)
    {
    }

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (std::move (ToleranceValue))
    {
    }

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (const CompositeSegmentSymmetryDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (x, f, c)
    {
    }

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentDefinitionBaseType (e, f, c)
    {
    }

    CompositeSegmentSymmetryDefinitionType* CompositeSegmentSymmetryDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentSymmetryDefinitionType (*this, f, c);
    }

    CompositeSegmentSymmetryDefinitionType::
    ~CompositeSegmentSymmetryDefinitionType ()
    {
    }

    // CompositeSegmentSymmetryMeasurementType
    //

    CompositeSegmentSymmetryMeasurementType::
    CompositeSegmentSymmetryMeasurementType ()
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType ()
    {
    }

    CompositeSegmentSymmetryMeasurementType::
    CompositeSegmentSymmetryMeasurementType (const Status_type& Status)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (Status)
    {
    }

    CompositeSegmentSymmetryMeasurementType::
    CompositeSegmentSymmetryMeasurementType (::std::unique_ptr< Status_type > Status)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (std::move (Status))
    {
    }

    CompositeSegmentSymmetryMeasurementType::
    CompositeSegmentSymmetryMeasurementType (const CompositeSegmentSymmetryMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (x, f, c)
    {
    }

    CompositeSegmentSymmetryMeasurementType::
    CompositeSegmentSymmetryMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CompositeSegmentMeasurementBaseType (e, f, c)
    {
    }

    CompositeSegmentSymmetryMeasurementType* CompositeSegmentSymmetryMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentSymmetryMeasurementType (*this, f, c);
    }

    CompositeSegmentSymmetryMeasurementType::
    ~CompositeSegmentSymmetryMeasurementType ()
    {
    }

    // OriginReferenceType
    //

    OriginReferenceType::
    OriginReferenceType ()
    : ::xml_schema::type (),
      FeatureNominalId_ (this),
      ReferencedComponent_ (this),
      DatumDefinitionId_ (this)
    {
    }

    OriginReferenceType::
    OriginReferenceType (const OriginReferenceType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FeatureNominalId_ (x.FeatureNominalId_, f, this),
      ReferencedComponent_ (x.ReferencedComponent_, f, this),
      DatumDefinitionId_ (x.DatumDefinitionId_, f, this)
    {
    }

    OriginReferenceType::
    OriginReferenceType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FeatureNominalId_ (this),
      ReferencedComponent_ (this),
      DatumDefinitionId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void OriginReferenceType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // FeatureNominalId
        //
        if (n.name () == L"FeatureNominalId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureNominalId_type > r (
            FeatureNominalId_traits::create (i, f, this));

          if (!this->FeatureNominalId_)
          {
            this->FeatureNominalId_.set (::std::move (r));
            continue;
          }
        }

        // ReferencedComponent
        //
        if (n.name () == L"ReferencedComponent" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReferencedComponent_type > r (
            ReferencedComponent_traits::create (i, f, this));

          if (!this->ReferencedComponent_)
          {
            this->ReferencedComponent_.set (::std::move (r));
            continue;
          }
        }

        // DatumDefinitionId
        //
        if (n.name () == L"DatumDefinitionId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DatumDefinitionId_type > r (
            DatumDefinitionId_traits::create (i, f, this));

          if (!this->DatumDefinitionId_)
          {
            this->DatumDefinitionId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    OriginReferenceType* OriginReferenceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OriginReferenceType (*this, f, c);
    }

    OriginReferenceType& OriginReferenceType::
    operator= (const OriginReferenceType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->FeatureNominalId_ = x.FeatureNominalId_;
        this->ReferencedComponent_ = x.ReferencedComponent_;
        this->DatumDefinitionId_ = x.DatumDefinitionId_;
      }

      return *this;
    }

    OriginReferenceType::
    ~OriginReferenceType ()
    {
    }

    // SurfaceTextureCharacteristicDefinitionType
    //

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      RoughnessAverage_ (this)
    {
    }

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const id_type& id,
                                                const RoughnessAverage_type& RoughnessAverage)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      RoughnessAverage_ (RoughnessAverage, this)
    {
    }

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const id_type& id,
                                                ::std::unique_ptr< RoughnessAverage_type > RoughnessAverage)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      RoughnessAverage_ (std::move (RoughnessAverage), this)
    {
    }

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const SurfaceTextureCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      RoughnessAverage_ (x.RoughnessAverage_, f, this)
    {
    }

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      RoughnessAverage_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SurfaceTextureCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // RoughnessAverage
        //
        if (n.name () == L"RoughnessAverage" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< RoughnessAverage_type > r (
            RoughnessAverage_traits::create (i, f, this));

          if (!RoughnessAverage_.present ())
          {
            this->RoughnessAverage_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!RoughnessAverage_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"RoughnessAverage",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    SurfaceTextureCharacteristicDefinitionType* SurfaceTextureCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicDefinitionType (*this, f, c);
    }

    SurfaceTextureCharacteristicDefinitionType& SurfaceTextureCharacteristicDefinitionType::
    operator= (const SurfaceTextureCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->RoughnessAverage_ = x.RoughnessAverage_;
      }

      return *this;
    }

    SurfaceTextureCharacteristicDefinitionType::
    ~SurfaceTextureCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceTextureCharacteristicDefinitionType >
    _xsd_SurfaceTextureCharacteristicDefinitionType_type_factory_init (
      L"SurfaceTextureCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // RoughnessLayEnumType
    //

    RoughnessLayEnumType::
    RoughnessLayEnumType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_RoughnessLayEnumType_convert ();
    }

    RoughnessLayEnumType::
    RoughnessLayEnumType (const xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_RoughnessLayEnumType_convert ();
    }

    RoughnessLayEnumType::
    RoughnessLayEnumType (const ::std::wstring& s,
                          const xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_RoughnessLayEnumType_convert ();
    }

    RoughnessLayEnumType* RoughnessLayEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RoughnessLayEnumType (*this, f, c);
    }

    RoughnessLayEnumType::value RoughnessLayEnumType::
    _xsd_RoughnessLayEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_RoughnessLayEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_RoughnessLayEnumType_indexes_,
                        _xsd_RoughnessLayEnumType_indexes_ + 7,
                        *this,
                        c));

      if (i == _xsd_RoughnessLayEnumType_indexes_ + 7 || _xsd_RoughnessLayEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const RoughnessLayEnumType::
    _xsd_RoughnessLayEnumType_literals_[7] =
    {
      L"PARALLEL",
      L"PERPENDICULAR",
      L"CROSS_HATCH",
      L"MULTI_DIRECTIONAL",
      L"CIRCULAR",
      L"RADIAL",
      L"PARTICULATE"
    };

    const RoughnessLayEnumType::value RoughnessLayEnumType::
    _xsd_RoughnessLayEnumType_indexes_[7] =
    {
      ::xsd::qif30::RoughnessLayEnumType::CIRCULAR,
      ::xsd::qif30::RoughnessLayEnumType::CROSS_HATCH,
      ::xsd::qif30::RoughnessLayEnumType::MULTI_DIRECTIONAL,
      ::xsd::qif30::RoughnessLayEnumType::PARALLEL,
      ::xsd::qif30::RoughnessLayEnumType::PARTICULATE,
      ::xsd::qif30::RoughnessLayEnumType::PERPENDICULAR,
      ::xsd::qif30::RoughnessLayEnumType::RADIAL
    };

    // RoughnessObtentionEnumType
    //

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (const xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_RoughnessObtentionEnumType_convert ();
    }

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (const xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_RoughnessObtentionEnumType_convert ();
    }

    RoughnessObtentionEnumType::
    RoughnessObtentionEnumType (const ::std::wstring& s,
                                const xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_RoughnessObtentionEnumType_convert ();
    }

    RoughnessObtentionEnumType* RoughnessObtentionEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RoughnessObtentionEnumType (*this, f, c);
    }

    RoughnessObtentionEnumType::value RoughnessObtentionEnumType::
    _xsd_RoughnessObtentionEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_RoughnessObtentionEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_RoughnessObtentionEnumType_indexes_,
                        _xsd_RoughnessObtentionEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_RoughnessObtentionEnumType_indexes_ + 4 || _xsd_RoughnessObtentionEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const RoughnessObtentionEnumType::
    _xsd_RoughnessObtentionEnumType_literals_[4] =
    {
      L"UNDEFINED",
      L"UNSUPPORTED",
      L"MACHINING_MANDATORY",
      L"MACHINING_FORBIDDEN"
    };

    const RoughnessObtentionEnumType::value RoughnessObtentionEnumType::
    _xsd_RoughnessObtentionEnumType_indexes_[4] =
    {
      ::xsd::qif30::RoughnessObtentionEnumType::MACHINING_FORBIDDEN,
      ::xsd::qif30::RoughnessObtentionEnumType::MACHINING_MANDATORY,
      ::xsd::qif30::RoughnessObtentionEnumType::UNDEFINED,
      ::xsd::qif30::RoughnessObtentionEnumType::UNSUPPORTED
    };

    // RoughnessApplicabilityEnumType
    //

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_RoughnessApplicabilityEnumType_convert ();
    }

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (const xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_RoughnessApplicabilityEnumType_convert ();
    }

    RoughnessApplicabilityEnumType::
    RoughnessApplicabilityEnumType (const ::std::wstring& s,
                                    const xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_RoughnessApplicabilityEnumType_convert ();
    }

    RoughnessApplicabilityEnumType* RoughnessApplicabilityEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RoughnessApplicabilityEnumType (*this, f, c);
    }

    RoughnessApplicabilityEnumType::value RoughnessApplicabilityEnumType::
    _xsd_RoughnessApplicabilityEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_RoughnessApplicabilityEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_RoughnessApplicabilityEnumType_indexes_,
                        _xsd_RoughnessApplicabilityEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_RoughnessApplicabilityEnumType_indexes_ + 4 || _xsd_RoughnessApplicabilityEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const RoughnessApplicabilityEnumType::
    _xsd_RoughnessApplicabilityEnumType_literals_[4] =
    {
      L"UNSUPPORTED",
      L"SPECIFIED_SURFACE_ONLY",
      L"ALL_PART_SURFACES",
      L"BASIC_SURFACE"
    };

    const RoughnessApplicabilityEnumType::value RoughnessApplicabilityEnumType::
    _xsd_RoughnessApplicabilityEnumType_indexes_[4] =
    {
      ::xsd::qif30::RoughnessApplicabilityEnumType::ALL_PART_SURFACES,
      ::xsd::qif30::RoughnessApplicabilityEnumType::BASIC_SURFACE,
      ::xsd::qif30::RoughnessApplicabilityEnumType::SPECIFIED_SURFACE_ONLY,
      ::xsd::qif30::RoughnessApplicabilityEnumType::UNSUPPORTED
    };

    // SurfaceTextureCharacteristicNominalType
    //

    const SurfaceTextureCharacteristicNominalType::Obtention_type SurfaceTextureCharacteristicNominalType::Obtention_default_value_ (
      L"UNDEFINED");

    const SurfaceTextureCharacteristicNominalType::Applicability_type SurfaceTextureCharacteristicNominalType::Applicability_default_value_ (
      L"UNSUPPORTED");

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      Obtention_ (this),
      Applicability_ (this),
      MinimumMaterialRemoval_ (this),
      ProductionMethod_ (this),
      Cutoff_ (this),
      SecondaryRoughnessParameter_ (this),
      DirectionOfLay_ (this),
      OtherSurfaceParameter_ (this)
    {
    }

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      Obtention_ (this),
      Applicability_ (this),
      MinimumMaterialRemoval_ (this),
      ProductionMethod_ (this),
      Cutoff_ (this),
      SecondaryRoughnessParameter_ (this),
      DirectionOfLay_ (this),
      OtherSurfaceParameter_ (this)
    {
    }

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      Obtention_ (this),
      Applicability_ (this),
      MinimumMaterialRemoval_ (this),
      ProductionMethod_ (this),
      Cutoff_ (this),
      SecondaryRoughnessParameter_ (this),
      DirectionOfLay_ (this),
      OtherSurfaceParameter_ (this)
    {
    }

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType (const SurfaceTextureCharacteristicNominalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      Obtention_ (x.Obtention_, f, this),
      Applicability_ (x.Applicability_, f, this),
      MinimumMaterialRemoval_ (x.MinimumMaterialRemoval_, f, this),
      ProductionMethod_ (x.ProductionMethod_, f, this),
      Cutoff_ (x.Cutoff_, f, this),
      SecondaryRoughnessParameter_ (x.SecondaryRoughnessParameter_, f, this),
      DirectionOfLay_ (x.DirectionOfLay_, f, this),
      OtherSurfaceParameter_ (x.OtherSurfaceParameter_, f, this)
    {
    }

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      Obtention_ (this),
      Applicability_ (this),
      MinimumMaterialRemoval_ (this),
      ProductionMethod_ (this),
      Cutoff_ (this),
      SecondaryRoughnessParameter_ (this),
      DirectionOfLay_ (this),
      OtherSurfaceParameter_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SurfaceTextureCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Obtention
        //
        if (n.name () == L"Obtention" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Obtention_type > r (
            Obtention_traits::create (i, f, this));

          if (!this->Obtention_)
          {
            this->Obtention_.set (::std::move (r));
            continue;
          }
        }

        // Applicability
        //
        if (n.name () == L"Applicability" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Applicability_type > r (
            Applicability_traits::create (i, f, this));

          if (!this->Applicability_)
          {
            this->Applicability_.set (::std::move (r));
            continue;
          }
        }

        // MinimumMaterialRemoval
        //
        if (n.name () == L"MinimumMaterialRemoval" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinimumMaterialRemoval_type > r (
            MinimumMaterialRemoval_traits::create (i, f, this));

          if (!this->MinimumMaterialRemoval_)
          {
            this->MinimumMaterialRemoval_.set (::std::move (r));
            continue;
          }
        }

        // ProductionMethod
        //
        if (n.name () == L"ProductionMethod" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProductionMethod_type > r (
            ProductionMethod_traits::create (i, f, this));

          if (!this->ProductionMethod_)
          {
            this->ProductionMethod_.set (::std::move (r));
            continue;
          }
        }

        // Cutoff
        //
        if (n.name () == L"Cutoff" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Cutoff_type > r (
            Cutoff_traits::create (i, f, this));

          if (!this->Cutoff_)
          {
            this->Cutoff_.set (::std::move (r));
            continue;
          }
        }

        // SecondaryRoughnessParameter
        //
        if (n.name () == L"SecondaryRoughnessParameter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondaryRoughnessParameter_type > r (
            SecondaryRoughnessParameter_traits::create (i, f, this));

          if (!this->SecondaryRoughnessParameter_)
          {
            this->SecondaryRoughnessParameter_.set (::std::move (r));
            continue;
          }
        }

        // DirectionOfLay
        //
        if (n.name () == L"DirectionOfLay" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DirectionOfLay_type > r (
            DirectionOfLay_traits::create (i, f, this));

          if (!this->DirectionOfLay_)
          {
            this->DirectionOfLay_.set (::std::move (r));
            continue;
          }
        }

        // OtherSurfaceParameter
        //
        if (n.name () == L"OtherSurfaceParameter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherSurfaceParameter_type > r (
            OtherSurfaceParameter_traits::create (i, f, this));

          if (!this->OtherSurfaceParameter_)
          {
            this->OtherSurfaceParameter_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SurfaceTextureCharacteristicNominalType* SurfaceTextureCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicNominalType (*this, f, c);
    }

    SurfaceTextureCharacteristicNominalType& SurfaceTextureCharacteristicNominalType::
    operator= (const SurfaceTextureCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->Obtention_ = x.Obtention_;
        this->Applicability_ = x.Applicability_;
        this->MinimumMaterialRemoval_ = x.MinimumMaterialRemoval_;
        this->ProductionMethod_ = x.ProductionMethod_;
        this->Cutoff_ = x.Cutoff_;
        this->SecondaryRoughnessParameter_ = x.SecondaryRoughnessParameter_;
        this->DirectionOfLay_ = x.DirectionOfLay_;
        this->OtherSurfaceParameter_ = x.OtherSurfaceParameter_;
      }

      return *this;
    }

    SurfaceTextureCharacteristicNominalType::
    ~SurfaceTextureCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceTextureCharacteristicNominalType >
    _xsd_SurfaceTextureCharacteristicNominalType_type_factory_init (
      L"SurfaceTextureCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceTextureCharacteristicMeasurementType
    //

    SurfaceTextureCharacteristicMeasurementType::
    SurfaceTextureCharacteristicMeasurementType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      RoughnessAverageValue_ (this)
    {
    }

    SurfaceTextureCharacteristicMeasurementType::
    SurfaceTextureCharacteristicMeasurementType (const id_type& id,
                                                 const Status_type& Status,
                                                 const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      RoughnessAverageValue_ (this)
    {
    }

    SurfaceTextureCharacteristicMeasurementType::
    SurfaceTextureCharacteristicMeasurementType (const id_type& id,
                                                 ::std::unique_ptr< Status_type > Status,
                                                 ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      RoughnessAverageValue_ (this)
    {
    }

    SurfaceTextureCharacteristicMeasurementType::
    SurfaceTextureCharacteristicMeasurementType (const SurfaceTextureCharacteristicMeasurementType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      RoughnessAverageValue_ (x.RoughnessAverageValue_, f, this)
    {
    }

    SurfaceTextureCharacteristicMeasurementType::
    SurfaceTextureCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      RoughnessAverageValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SurfaceTextureCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // RoughnessAverageValue
        //
        if (n.name () == L"RoughnessAverageValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< RoughnessAverageValue_type > r (
            RoughnessAverageValue_traits::create (i, f, this));

          if (!this->RoughnessAverageValue_)
          {
            this->RoughnessAverageValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SurfaceTextureCharacteristicMeasurementType* SurfaceTextureCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicMeasurementType (*this, f, c);
    }

    SurfaceTextureCharacteristicMeasurementType& SurfaceTextureCharacteristicMeasurementType::
    operator= (const SurfaceTextureCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->RoughnessAverageValue_ = x.RoughnessAverageValue_;
      }

      return *this;
    }

    SurfaceTextureCharacteristicMeasurementType::
    ~SurfaceTextureCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceTextureCharacteristicMeasurementType >
    _xsd_SurfaceTextureCharacteristicMeasurementType_type_factory_init (
      L"SurfaceTextureCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceTextureCharacteristicItemType
    //

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const id_type& id,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const SurfaceTextureCharacteristicItemType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    SurfaceTextureCharacteristicItemType* SurfaceTextureCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicItemType (*this, f, c);
    }

    SurfaceTextureCharacteristicItemType::
    ~SurfaceTextureCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceTextureCharacteristicItemType >
    _xsd_SurfaceTextureCharacteristicItemType_type_factory_init (
      L"SurfaceTextureCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // OrientationDiametricalZoneType
    //

    OrientationDiametricalZoneType::
    OrientationDiametricalZoneType ()
    : ::xml_schema::type (),
      ZoneOrientationVector_ (this)
    {
    }

    OrientationDiametricalZoneType::
    OrientationDiametricalZoneType (const OrientationDiametricalZoneType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this)
    {
    }

    OrientationDiametricalZoneType::
    OrientationDiametricalZoneType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ZoneOrientationVector_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void OrientationDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneOrientationVector
        //
        if (n.name () == L"ZoneOrientationVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    OrientationDiametricalZoneType* OrientationDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationDiametricalZoneType (*this, f, c);
    }

    OrientationDiametricalZoneType& OrientationDiametricalZoneType::
    operator= (const OrientationDiametricalZoneType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ZoneOrientationVector_ = x.ZoneOrientationVector_;
      }

      return *this;
    }

    OrientationDiametricalZoneType::
    ~OrientationDiametricalZoneType ()
    {
    }

    // OrientationPlanarZoneType
    //

    OrientationPlanarZoneType::
    OrientationPlanarZoneType ()
    : ::xml_schema::type (),
      ZoneOrientationVector_ (this)
    {
    }

    OrientationPlanarZoneType::
    OrientationPlanarZoneType (const OrientationPlanarZoneType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this)
    {
    }

    OrientationPlanarZoneType::
    OrientationPlanarZoneType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ZoneOrientationVector_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void OrientationPlanarZoneType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneOrientationVector
        //
        if (n.name () == L"ZoneOrientationVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    OrientationPlanarZoneType* OrientationPlanarZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationPlanarZoneType (*this, f, c);
    }

    OrientationPlanarZoneType& OrientationPlanarZoneType::
    operator= (const OrientationPlanarZoneType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ZoneOrientationVector_ = x.ZoneOrientationVector_;
      }

      return *this;
    }

    OrientationPlanarZoneType::
    ~OrientationPlanarZoneType ()
    {
    }

    // OrientationZoneShapeType
    //

    OrientationZoneShapeType::
    OrientationZoneShapeType ()
    : ::xml_schema::type (),
      DiametricalZone_ (this),
      PlanarZone_ (this)
    {
    }

    OrientationZoneShapeType::
    OrientationZoneShapeType (const OrientationZoneShapeType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      PlanarZone_ (x.PlanarZone_, f, this)
    {
    }

    OrientationZoneShapeType::
    OrientationZoneShapeType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DiametricalZone_ (this),
      PlanarZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void OrientationZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DiametricalZone
        //
        if (n.name () == L"DiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        // PlanarZone
        //
        if (n.name () == L"PlanarZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PlanarZone_type > r (
            PlanarZone_traits::create (i, f, this));

          if (!this->PlanarZone_)
          {
            this->PlanarZone_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    OrientationZoneShapeType* OrientationZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationZoneShapeType (*this, f, c);
    }

    OrientationZoneShapeType& OrientationZoneShapeType::
    operator= (const OrientationZoneShapeType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->DiametricalZone_ = x.DiametricalZone_;
        this->PlanarZone_ = x.PlanarZone_;
      }

      return *this;
    }

    OrientationZoneShapeType::
    ~OrientationZoneShapeType ()
    {
    }

    // OrientationCharacteristicItemBaseType
    //

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType ()
    : ::xsd::qif30::GeometricCharacteristicItemBaseType ()
    {
    }

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         CharacteristicNominalId)
    {
    }

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         std::move (CharacteristicNominalId))
    {
    }

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const OrientationCharacteristicItemBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    OrientationCharacteristicItemBaseType::
    ~OrientationCharacteristicItemBaseType ()
    {
    }

    // OrientationCharacteristicDefinitionBaseType
    //

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (this),
      TangentPlane_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      EachRadialElement_ (this),
      EachElement_ (this)
    {
    }

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const id_type& id,
                                                 const ToleranceValue_type& ToleranceValue,
                                                 const MaterialCondition_type& MaterialCondition,
                                                 const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this),
      MaterialCondition_ (MaterialCondition, this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (ZoneShape, this),
      TangentPlane_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      EachRadialElement_ (this),
      EachElement_ (this)
    {
    }

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const id_type& id,
                                                 ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                                 const MaterialCondition_type& MaterialCondition,
                                                 ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this),
      MaterialCondition_ (MaterialCondition, this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (std::move (ZoneShape), this),
      TangentPlane_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      EachRadialElement_ (this),
      EachElement_ (this)
    {
    }

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const OrientationCharacteristicDefinitionBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      SizeCharacteristicDefinitionId_ (x.SizeCharacteristicDefinitionId_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this),
      TangentPlane_ (x.TangentPlane_, f, this),
      MaximumToleranceValue_ (x.MaximumToleranceValue_, f, this),
      ProjectedToleranceZoneValue_ (x.ProjectedToleranceZoneValue_, f, this),
      EachRadialElement_ (x.EachRadialElement_, f, this),
      EachElement_ (x.EachElement_, f, this)
    {
    }

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (this),
      TangentPlane_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      EachRadialElement_ (this),
      EachElement_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void OrientationCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == L"DatumReferenceFrameId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!this->DatumReferenceFrameId_)
          {
            this->DatumReferenceFrameId_.set (::std::move (r));
            continue;
          }
        }

        // MaterialCondition
        //
        if (n.name () == L"MaterialCondition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!MaterialCondition_.present ())
          {
            this->MaterialCondition_.set (::std::move (r));
            continue;
          }
        }

        // SizeCharacteristicDefinitionId
        //
        if (n.name () == L"SizeCharacteristicDefinitionId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SizeCharacteristicDefinitionId_type > r (
            SizeCharacteristicDefinitionId_traits::create (i, f, this));

          if (!this->SizeCharacteristicDefinitionId_)
          {
            this->SizeCharacteristicDefinitionId_.set (::std::move (r));
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == L"ZoneShape" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (::std::move (r));
            continue;
          }
        }

        // TangentPlane
        //
        if (n.name () == L"TangentPlane" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->TangentPlane_)
          {
            this->TangentPlane_.set (TangentPlane_traits::create (i, f, this));
            continue;
          }
        }

        // MaximumToleranceValue
        //
        if (n.name () == L"MaximumToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaximumToleranceValue_type > r (
            MaximumToleranceValue_traits::create (i, f, this));

          if (!this->MaximumToleranceValue_)
          {
            this->MaximumToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ProjectedToleranceZoneValue
        //
        if (n.name () == L"ProjectedToleranceZoneValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProjectedToleranceZoneValue_type > r (
            ProjectedToleranceZoneValue_traits::create (i, f, this));

          if (!this->ProjectedToleranceZoneValue_)
          {
            this->ProjectedToleranceZoneValue_.set (::std::move (r));
            continue;
          }
        }

        // EachRadialElement
        //
        if (n.name () == L"EachRadialElement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->EachRadialElement_)
          {
            this->EachRadialElement_.set (EachRadialElement_traits::create (i, f, this));
            continue;
          }
        }

        // EachElement
        //
        if (n.name () == L"EachElement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->EachElement_)
          {
            this->EachElement_.set (EachElement_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!MaterialCondition_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"MaterialCondition",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ZoneShape",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    OrientationCharacteristicDefinitionBaseType& OrientationCharacteristicDefinitionBaseType::
    operator= (const OrientationCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->DatumReferenceFrameId_ = x.DatumReferenceFrameId_;
        this->MaterialCondition_ = x.MaterialCondition_;
        this->SizeCharacteristicDefinitionId_ = x.SizeCharacteristicDefinitionId_;
        this->ZoneShape_ = x.ZoneShape_;
        this->TangentPlane_ = x.TangentPlane_;
        this->MaximumToleranceValue_ = x.MaximumToleranceValue_;
        this->ProjectedToleranceZoneValue_ = x.ProjectedToleranceZoneValue_;
        this->EachRadialElement_ = x.EachRadialElement_;
        this->EachElement_ = x.EachElement_;
      }

      return *this;
    }

    OrientationCharacteristicDefinitionBaseType::
    ~OrientationCharacteristicDefinitionBaseType ()
    {
    }

    // OrientationCharacteristicNominalBaseType
    //

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType ()
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType ()
    {
    }

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            CharacteristicDefinitionId)
    {
    }

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            std::move (CharacteristicDefinitionId))
    {
    }

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType (const OrientationCharacteristicNominalBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (x, f, c)
    {
    }

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (e, f, c)
    {
    }

    OrientationCharacteristicNominalBaseType::
    ~OrientationCharacteristicNominalBaseType ()
    {
    }

    // OrientationCharacteristicMeasurementBaseType
    //

    OrientationCharacteristicMeasurementBaseType::
    OrientationCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (),
      DatumsOk_ (this),
      Bonus_ (this),
      ReferenceLength_ (this),
      DRFTransformActualId_ (this)
    {
    }

    OrientationCharacteristicMeasurementBaseType::
    OrientationCharacteristicMeasurementBaseType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                Status,
                                                                CharacteristicItemId),
      DatumsOk_ (this),
      Bonus_ (this),
      ReferenceLength_ (this),
      DRFTransformActualId_ (this)
    {
    }

    OrientationCharacteristicMeasurementBaseType::
    OrientationCharacteristicMeasurementBaseType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                std::move (Status),
                                                                std::move (CharacteristicItemId)),
      DatumsOk_ (this),
      Bonus_ (this),
      ReferenceLength_ (this),
      DRFTransformActualId_ (this)
    {
    }

    OrientationCharacteristicMeasurementBaseType::
    OrientationCharacteristicMeasurementBaseType (const OrientationCharacteristicMeasurementBaseType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (x, f, c),
      DatumsOk_ (x.DatumsOk_, f, this),
      Bonus_ (x.Bonus_, f, this),
      ReferenceLength_ (x.ReferenceLength_, f, this),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this)
    {
    }

    OrientationCharacteristicMeasurementBaseType::
    OrientationCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      DatumsOk_ (this),
      Bonus_ (this),
      ReferenceLength_ (this),
      DRFTransformActualId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void OrientationCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DatumsOk
        //
        if (n.name () == L"DatumsOk" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        // Bonus
        //
        if (n.name () == L"Bonus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Bonus_type > r (
            Bonus_traits::create (i, f, this));

          if (!this->Bonus_)
          {
            this->Bonus_.set (::std::move (r));
            continue;
          }
        }

        // ReferenceLength
        //
        if (n.name () == L"ReferenceLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ReferenceLength_type > r (
            ReferenceLength_traits::create (i, f, this));

          if (!this->ReferenceLength_)
          {
            this->ReferenceLength_.set (::std::move (r));
            continue;
          }
        }

        // DRFTransformActualId
        //
        if (n.name () == L"DRFTransformActualId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    OrientationCharacteristicMeasurementBaseType& OrientationCharacteristicMeasurementBaseType::
    operator= (const OrientationCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (*this) = x;
        this->DatumsOk_ = x.DatumsOk_;
        this->Bonus_ = x.Bonus_;
        this->ReferenceLength_ = x.ReferenceLength_;
        this->DRFTransformActualId_ = x.DRFTransformActualId_;
      }

      return *this;
    }

    OrientationCharacteristicMeasurementBaseType::
    ~OrientationCharacteristicMeasurementBaseType ()
    {
    }

    // AngularityCharacteristicItemType
    //

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType ()
    : ::xsd::qif30::OrientationCharacteristicItemBaseType ()
    {
    }

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (id,
                                                           CharacteristicNominalId)
    {
    }

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (id,
                                                           std::move (CharacteristicNominalId))
    {
    }

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const AngularityCharacteristicItemType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (x, f, c)
    {
    }

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (e, f, c)
    {
    }

    AngularityCharacteristicItemType* AngularityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicItemType (*this, f, c);
    }

    AngularityCharacteristicItemType::
    ~AngularityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularityCharacteristicItemType >
    _xsd_AngularityCharacteristicItemType_type_factory_init (
      L"AngularityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularityCharacteristicDefinitionType
    //

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType ()
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType ()
    {
    }

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const id_type& id,
                                            const ToleranceValue_type& ToleranceValue,
                                            const MaterialCondition_type& MaterialCondition,
                                            const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (id,
                                                                 ToleranceValue,
                                                                 MaterialCondition,
                                                                 ZoneShape)
    {
    }

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const id_type& id,
                                            ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                            const MaterialCondition_type& MaterialCondition,
                                            ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (id,
                                                                 std::move (ToleranceValue),
                                                                 MaterialCondition,
                                                                 std::move (ZoneShape))
    {
    }

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const AngularityCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngularityCharacteristicDefinitionType* AngularityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicDefinitionType (*this, f, c);
    }

    AngularityCharacteristicDefinitionType::
    ~AngularityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularityCharacteristicDefinitionType >
    _xsd_AngularityCharacteristicDefinitionType_type_factory_init (
      L"AngularityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularityCharacteristicNominalType
    //

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType ()
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (),
      Angle_ (this)
    {
    }

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (id,
                                                              CharacteristicDefinitionId),
      Angle_ (this)
    {
    }

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (id,
                                                              std::move (CharacteristicDefinitionId)),
      Angle_ (this)
    {
    }

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType (const AngularityCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (x, f, c),
      Angle_ (x.Angle_, f, this)
    {
    }

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      Angle_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngularityCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::OrientationCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Angle
        //
        if (n.name () == L"Angle" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Angle_type > r (
            Angle_traits::create (i, f, this));

          if (!this->Angle_)
          {
            this->Angle_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngularityCharacteristicNominalType* AngularityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicNominalType (*this, f, c);
    }

    AngularityCharacteristicNominalType& AngularityCharacteristicNominalType::
    operator= (const AngularityCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::OrientationCharacteristicNominalBaseType& > (*this) = x;
        this->Angle_ = x.Angle_;
      }

      return *this;
    }

    AngularityCharacteristicNominalType::
    ~AngularityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularityCharacteristicNominalType >
    _xsd_AngularityCharacteristicNominalType_type_factory_init (
      L"AngularityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularityCharacteristicMeasurementType
    //

    AngularityCharacteristicMeasurementType::
    AngularityCharacteristicMeasurementType ()
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType ()
    {
    }

    AngularityCharacteristicMeasurementType::
    AngularityCharacteristicMeasurementType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (id,
                                                                  Status,
                                                                  CharacteristicItemId)
    {
    }

    AngularityCharacteristicMeasurementType::
    AngularityCharacteristicMeasurementType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (id,
                                                                  std::move (Status),
                                                                  std::move (CharacteristicItemId))
    {
    }

    AngularityCharacteristicMeasurementType::
    AngularityCharacteristicMeasurementType (const AngularityCharacteristicMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    AngularityCharacteristicMeasurementType::
    AngularityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    AngularityCharacteristicMeasurementType* AngularityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicMeasurementType (*this, f, c);
    }

    AngularityCharacteristicMeasurementType::
    ~AngularityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularityCharacteristicMeasurementType >
    _xsd_AngularityCharacteristicMeasurementType_type_factory_init (
      L"AngularityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // PerpendicularityCharacteristicItemType
    //

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType ()
    : ::xsd::qif30::OrientationCharacteristicItemBaseType ()
    {
    }

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const id_type& id,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (id,
                                                           CharacteristicNominalId)
    {
    }

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const id_type& id,
                                            ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (id,
                                                           std::move (CharacteristicNominalId))
    {
    }

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const PerpendicularityCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicItemType* PerpendicularityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicItemType (*this, f, c);
    }

    PerpendicularityCharacteristicItemType::
    ~PerpendicularityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PerpendicularityCharacteristicItemType >
    _xsd_PerpendicularityCharacteristicItemType_type_factory_init (
      L"PerpendicularityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // PerpendicularityCharacteristicDefinitionType
    //

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType ()
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType ()
    {
    }

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const id_type& id,
                                                  const ToleranceValue_type& ToleranceValue,
                                                  const MaterialCondition_type& MaterialCondition,
                                                  const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (id,
                                                                 ToleranceValue,
                                                                 MaterialCondition,
                                                                 ZoneShape)
    {
    }

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const id_type& id,
                                                  ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                                  const MaterialCondition_type& MaterialCondition,
                                                  ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (id,
                                                                 std::move (ToleranceValue),
                                                                 MaterialCondition,
                                                                 std::move (ZoneShape))
    {
    }

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const PerpendicularityCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicDefinitionType* PerpendicularityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicDefinitionType (*this, f, c);
    }

    PerpendicularityCharacteristicDefinitionType::
    ~PerpendicularityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PerpendicularityCharacteristicDefinitionType >
    _xsd_PerpendicularityCharacteristicDefinitionType_type_factory_init (
      L"PerpendicularityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // PerpendicularityCharacteristicNominalType
    //

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType ()
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType ()
    {
    }

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (id,
                                                              CharacteristicDefinitionId)
    {
    }

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType (const id_type& id,
                                               ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (id,
                                                              std::move (CharacteristicDefinitionId))
    {
    }

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType (const PerpendicularityCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicNominalType* PerpendicularityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicNominalType (*this, f, c);
    }

    PerpendicularityCharacteristicNominalType::
    ~PerpendicularityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PerpendicularityCharacteristicNominalType >
    _xsd_PerpendicularityCharacteristicNominalType_type_factory_init (
      L"PerpendicularityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // PerpendicularityCharacteristicMeasurementType
    //

    PerpendicularityCharacteristicMeasurementType::
    PerpendicularityCharacteristicMeasurementType ()
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType ()
    {
    }

    PerpendicularityCharacteristicMeasurementType::
    PerpendicularityCharacteristicMeasurementType (const id_type& id,
                                                   const Status_type& Status,
                                                   const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (id,
                                                                  Status,
                                                                  CharacteristicItemId)
    {
    }

    PerpendicularityCharacteristicMeasurementType::
    PerpendicularityCharacteristicMeasurementType (const id_type& id,
                                                   ::std::unique_ptr< Status_type > Status,
                                                   ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (id,
                                                                  std::move (Status),
                                                                  std::move (CharacteristicItemId))
    {
    }

    PerpendicularityCharacteristicMeasurementType::
    PerpendicularityCharacteristicMeasurementType (const PerpendicularityCharacteristicMeasurementType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicMeasurementType::
    PerpendicularityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicMeasurementType* PerpendicularityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicMeasurementType (*this, f, c);
    }

    PerpendicularityCharacteristicMeasurementType::
    ~PerpendicularityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PerpendicularityCharacteristicMeasurementType >
    _xsd_PerpendicularityCharacteristicMeasurementType_type_factory_init (
      L"PerpendicularityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ParallelismCharacteristicItemType
    //

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType ()
    : ::xsd::qif30::OrientationCharacteristicItemBaseType ()
    {
    }

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (id,
                                                           CharacteristicNominalId)
    {
    }

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (id,
                                                           std::move (CharacteristicNominalId))
    {
    }

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const ParallelismCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicItemBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicItemType* ParallelismCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicItemType (*this, f, c);
    }

    ParallelismCharacteristicItemType::
    ~ParallelismCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ParallelismCharacteristicItemType >
    _xsd_ParallelismCharacteristicItemType_type_factory_init (
      L"ParallelismCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ParallelismCharacteristicDefinitionType
    //

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType ()
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType ()
    {
    }

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue,
                                             const MaterialCondition_type& MaterialCondition,
                                             const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (id,
                                                                 ToleranceValue,
                                                                 MaterialCondition,
                                                                 ZoneShape)
    {
    }

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const id_type& id,
                                             ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                             const MaterialCondition_type& MaterialCondition,
                                             ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (id,
                                                                 std::move (ToleranceValue),
                                                                 MaterialCondition,
                                                                 std::move (ZoneShape))
    {
    }

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const ParallelismCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicDefinitionType* ParallelismCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicDefinitionType (*this, f, c);
    }

    ParallelismCharacteristicDefinitionType::
    ~ParallelismCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ParallelismCharacteristicDefinitionType >
    _xsd_ParallelismCharacteristicDefinitionType_type_factory_init (
      L"ParallelismCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ParallelismCharacteristicNominalType
    //

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType ()
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType ()
    {
    }

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (id,
                                                              CharacteristicDefinitionId)
    {
    }

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (id,
                                                              std::move (CharacteristicDefinitionId))
    {
    }

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType (const ParallelismCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicNominalBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicNominalType* ParallelismCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicNominalType (*this, f, c);
    }

    ParallelismCharacteristicNominalType::
    ~ParallelismCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ParallelismCharacteristicNominalType >
    _xsd_ParallelismCharacteristicNominalType_type_factory_init (
      L"ParallelismCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ParallelismCharacteristicMeasurementType
    //

    ParallelismCharacteristicMeasurementType::
    ParallelismCharacteristicMeasurementType ()
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType ()
    {
    }

    ParallelismCharacteristicMeasurementType::
    ParallelismCharacteristicMeasurementType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (id,
                                                                  Status,
                                                                  CharacteristicItemId)
    {
    }

    ParallelismCharacteristicMeasurementType::
    ParallelismCharacteristicMeasurementType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (id,
                                                                  std::move (Status),
                                                                  std::move (CharacteristicItemId))
    {
    }

    ParallelismCharacteristicMeasurementType::
    ParallelismCharacteristicMeasurementType (const ParallelismCharacteristicMeasurementType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicMeasurementType::
    ParallelismCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::OrientationCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicMeasurementType* ParallelismCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicMeasurementType (*this, f, c);
    }

    ParallelismCharacteristicMeasurementType::
    ~ParallelismCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ParallelismCharacteristicMeasurementType >
    _xsd_ParallelismCharacteristicMeasurementType_type_factory_init (
      L"ParallelismCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // FormCharacteristicDefinitionBaseType
    //

    FormCharacteristicDefinitionBaseType::
    FormCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType ()
    {
    }

    FormCharacteristicDefinitionBaseType::
    FormCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id)
    {
    }

    FormCharacteristicDefinitionBaseType::
    FormCharacteristicDefinitionBaseType (const FormCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    FormCharacteristicDefinitionBaseType::
    FormCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    FormCharacteristicDefinitionBaseType::
    ~FormCharacteristicDefinitionBaseType ()
    {
    }

    // FormCharacteristicNominalBaseType
    //

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType ()
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType ()
    {
    }

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            CharacteristicDefinitionId)
    {
    }

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            std::move (CharacteristicDefinitionId))
    {
    }

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType (const FormCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (x, f, c)
    {
    }

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (e, f, c)
    {
    }

    FormCharacteristicNominalBaseType::
    ~FormCharacteristicNominalBaseType ()
    {
    }

    // FormCharacteristicMeasurementBaseType
    //

    FormCharacteristicMeasurementBaseType::
    FormCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType ()
    {
    }

    FormCharacteristicMeasurementBaseType::
    FormCharacteristicMeasurementBaseType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                Status,
                                                                CharacteristicItemId)
    {
    }

    FormCharacteristicMeasurementBaseType::
    FormCharacteristicMeasurementBaseType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                std::move (Status),
                                                                std::move (CharacteristicItemId))
    {
    }

    FormCharacteristicMeasurementBaseType::
    FormCharacteristicMeasurementBaseType (const FormCharacteristicMeasurementBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    FormCharacteristicMeasurementBaseType::
    FormCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    FormCharacteristicMeasurementBaseType::
    ~FormCharacteristicMeasurementBaseType ()
    {
    }

    // FormCharacteristicItemBaseType
    //

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType ()
    : ::xsd::qif30::GeometricCharacteristicItemBaseType ()
    {
    }

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         CharacteristicNominalId)
    {
    }

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         std::move (CharacteristicNominalId))
    {
    }

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const FormCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    FormCharacteristicItemBaseType::
    ~FormCharacteristicItemBaseType ()
    {
    }

    // StraightnessDiametricalZoneType
    //

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const StraightnessDiametricalZoneType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const ::std::wstring& s,
                                     const xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    StraightnessDiametricalZoneType* StraightnessDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessDiametricalZoneType (*this, f, c);
    }

    StraightnessDiametricalZoneType::
    ~StraightnessDiametricalZoneType ()
    {
    }

    // StraightnessNonDiametricalZoneType
    //

    StraightnessNonDiametricalZoneType::
    StraightnessNonDiametricalZoneType ()
    : ::xml_schema::type (),
      ZoneOrientationVector_ (this)
    {
    }

    StraightnessNonDiametricalZoneType::
    StraightnessNonDiametricalZoneType (const StraightnessNonDiametricalZoneType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this)
    {
    }

    StraightnessNonDiametricalZoneType::
    StraightnessNonDiametricalZoneType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ZoneOrientationVector_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void StraightnessNonDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneOrientationVector
        //
        if (n.name () == L"ZoneOrientationVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    StraightnessNonDiametricalZoneType* StraightnessNonDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessNonDiametricalZoneType (*this, f, c);
    }

    StraightnessNonDiametricalZoneType& StraightnessNonDiametricalZoneType::
    operator= (const StraightnessNonDiametricalZoneType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ZoneOrientationVector_ = x.ZoneOrientationVector_;
      }

      return *this;
    }

    StraightnessNonDiametricalZoneType::
    ~StraightnessNonDiametricalZoneType ()
    {
    }

    // StraightnessZoneShapeType
    //

    StraightnessZoneShapeType::
    StraightnessZoneShapeType ()
    : ::xml_schema::type (),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
    }

    StraightnessZoneShapeType::
    StraightnessZoneShapeType (const StraightnessZoneShapeType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      NonDiametricalZone_ (x.NonDiametricalZone_, f, this)
    {
    }

    StraightnessZoneShapeType::
    StraightnessZoneShapeType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void StraightnessZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DiametricalZone
        //
        if (n.name () == L"DiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        // NonDiametricalZone
        //
        if (n.name () == L"NonDiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonDiametricalZone_type > r (
            NonDiametricalZone_traits::create (i, f, this));

          if (!this->NonDiametricalZone_)
          {
            this->NonDiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    StraightnessZoneShapeType* StraightnessZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessZoneShapeType (*this, f, c);
    }

    StraightnessZoneShapeType& StraightnessZoneShapeType::
    operator= (const StraightnessZoneShapeType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->DiametricalZone_ = x.DiametricalZone_;
        this->NonDiametricalZone_ = x.NonDiametricalZone_;
      }

      return *this;
    }

    StraightnessZoneShapeType::
    ~StraightnessZoneShapeType ()
    {
    }

    // StraightnessCharacteristicItemType
    //

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const StraightnessCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    StraightnessCharacteristicItemType* StraightnessCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicItemType (*this, f, c);
    }

    StraightnessCharacteristicItemType::
    ~StraightnessCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StraightnessCharacteristicItemType >
    _xsd_StraightnessCharacteristicItemType_type_factory_init (
      L"StraightnessCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // StraightnessCharacteristicDefinitionType
    //

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitLength_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (this),
      MaximumToleranceValue_ (this)
    {
    }

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const id_type& id,
                                              const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitLength_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (ZoneShape, this),
      MaximumToleranceValue_ (this)
    {
    }

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const id_type& id,
                                              ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitLength_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (std::move (ZoneShape), this),
      MaximumToleranceValue_ (this)
    {
    }

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const StraightnessCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      ToleranceZonePerUnitLength_ (x.ToleranceZonePerUnitLength_, f, this),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      SizeCharacteristicDefinitionId_ (x.SizeCharacteristicDefinitionId_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this),
      MaximumToleranceValue_ (x.MaximumToleranceValue_, f, this)
    {
    }

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitLength_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (this),
      MaximumToleranceValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StraightnessCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitLength
        //
        if (n.name () == L"ToleranceZonePerUnitLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitLength_type > r (
            ToleranceZonePerUnitLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitLength_)
          {
            this->ToleranceZonePerUnitLength_.set (::std::move (r));
            continue;
          }
        }

        // MaterialCondition
        //
        if (n.name () == L"MaterialCondition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!this->MaterialCondition_)
          {
            this->MaterialCondition_.set (::std::move (r));
            continue;
          }
        }

        // SizeCharacteristicDefinitionId
        //
        if (n.name () == L"SizeCharacteristicDefinitionId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SizeCharacteristicDefinitionId_type > r (
            SizeCharacteristicDefinitionId_traits::create (i, f, this));

          if (!this->SizeCharacteristicDefinitionId_)
          {
            this->SizeCharacteristicDefinitionId_.set (::std::move (r));
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == L"ZoneShape" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (::std::move (r));
            continue;
          }
        }

        // MaximumToleranceValue
        //
        if (n.name () == L"MaximumToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaximumToleranceValue_type > r (
            MaximumToleranceValue_traits::create (i, f, this));

          if (!this->MaximumToleranceValue_)
          {
            this->MaximumToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ZoneShape",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    StraightnessCharacteristicDefinitionType* StraightnessCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicDefinitionType (*this, f, c);
    }

    StraightnessCharacteristicDefinitionType& StraightnessCharacteristicDefinitionType::
    operator= (const StraightnessCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->ToleranceZonePerUnitLength_ = x.ToleranceZonePerUnitLength_;
        this->MaterialCondition_ = x.MaterialCondition_;
        this->SizeCharacteristicDefinitionId_ = x.SizeCharacteristicDefinitionId_;
        this->ZoneShape_ = x.ZoneShape_;
        this->MaximumToleranceValue_ = x.MaximumToleranceValue_;
      }

      return *this;
    }

    StraightnessCharacteristicDefinitionType::
    ~StraightnessCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StraightnessCharacteristicDefinitionType >
    _xsd_StraightnessCharacteristicDefinitionType_type_factory_init (
      L"StraightnessCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // StraightnessCharacteristicNominalType
    //

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType (),
      DirectionCurveId_ (this)
    {
    }

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      DirectionCurveId_ (this)
    {
    }

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      DirectionCurveId_ (this)
    {
    }

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType (const StraightnessCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c),
      DirectionCurveId_ (x.DirectionCurveId_, f, this)
    {
    }

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      DirectionCurveId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StraightnessCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DirectionCurveId
        //
        if (n.name () == L"DirectionCurveId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DirectionCurveId_type > r (
            DirectionCurveId_traits::create (i, f, this));

          if (!this->DirectionCurveId_)
          {
            this->DirectionCurveId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    StraightnessCharacteristicNominalType* StraightnessCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicNominalType (*this, f, c);
    }

    StraightnessCharacteristicNominalType& StraightnessCharacteristicNominalType::
    operator= (const StraightnessCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicNominalBaseType& > (*this) = x;
        this->DirectionCurveId_ = x.DirectionCurveId_;
      }

      return *this;
    }

    StraightnessCharacteristicNominalType::
    ~StraightnessCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StraightnessCharacteristicNominalType >
    _xsd_StraightnessCharacteristicNominalType_type_factory_init (
      L"StraightnessCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // StraightnessCharacteristicMeasurementType
    //

    StraightnessCharacteristicMeasurementType::
    StraightnessCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (),
      Bonus_ (this),
      MaxStraightness_ (this),
      ZoneOrientation_ (this),
      ZoneLine_ (this)
    {
    }

    StraightnessCharacteristicMeasurementType::
    StraightnessCharacteristicMeasurementType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      Bonus_ (this),
      MaxStraightness_ (this),
      ZoneOrientation_ (this),
      ZoneLine_ (this)
    {
    }

    StraightnessCharacteristicMeasurementType::
    StraightnessCharacteristicMeasurementType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      Bonus_ (this),
      MaxStraightness_ (this),
      ZoneOrientation_ (this),
      ZoneLine_ (this)
    {
    }

    StraightnessCharacteristicMeasurementType::
    StraightnessCharacteristicMeasurementType (const StraightnessCharacteristicMeasurementType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c),
      Bonus_ (x.Bonus_, f, this),
      MaxStraightness_ (x.MaxStraightness_, f, this),
      ZoneOrientation_ (x.ZoneOrientation_, f, this),
      ZoneLine_ (x.ZoneLine_, f, this)
    {
    }

    StraightnessCharacteristicMeasurementType::
    StraightnessCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Bonus_ (this),
      MaxStraightness_ (this),
      ZoneOrientation_ (this),
      ZoneLine_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void StraightnessCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Bonus
        //
        if (n.name () == L"Bonus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Bonus_type > r (
            Bonus_traits::create (i, f, this));

          if (!this->Bonus_)
          {
            this->Bonus_.set (::std::move (r));
            continue;
          }
        }

        // MaxStraightness
        //
        if (n.name () == L"MaxStraightness" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxStraightness_type > r (
            MaxStraightness_traits::create (i, f, this));

          if (!this->MaxStraightness_)
          {
            this->MaxStraightness_.set (::std::move (r));
            continue;
          }
        }

        // ZoneOrientation
        //
        if (n.name () == L"ZoneOrientation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneOrientation_type > r (
            ZoneOrientation_traits::create (i, f, this));

          if (!this->ZoneOrientation_)
          {
            this->ZoneOrientation_.set (::std::move (r));
            continue;
          }
        }

        // ZoneLine
        //
        if (n.name () == L"ZoneLine" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneLine_type > r (
            ZoneLine_traits::create (i, f, this));

          if (!this->ZoneLine_)
          {
            this->ZoneLine_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    StraightnessCharacteristicMeasurementType* StraightnessCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicMeasurementType (*this, f, c);
    }

    StraightnessCharacteristicMeasurementType& StraightnessCharacteristicMeasurementType::
    operator= (const StraightnessCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (*this) = x;
        this->Bonus_ = x.Bonus_;
        this->MaxStraightness_ = x.MaxStraightness_;
        this->ZoneOrientation_ = x.ZoneOrientation_;
        this->ZoneLine_ = x.ZoneLine_;
      }

      return *this;
    }

    StraightnessCharacteristicMeasurementType::
    ~StraightnessCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StraightnessCharacteristicMeasurementType >
    _xsd_StraightnessCharacteristicMeasurementType_type_factory_init (
      L"StraightnessCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatnessCharacteristicItemType
    //

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const FlatnessCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    FlatnessCharacteristicItemType* FlatnessCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicItemType (*this, f, c);
    }

    FlatnessCharacteristicItemType::
    ~FlatnessCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatnessCharacteristicItemType >
    _xsd_FlatnessCharacteristicItemType_type_factory_init (
      L"FlatnessCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatnessCharacteristicDefinitionType
    //

    FlatnessCharacteristicDefinitionType::
    FlatnessCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitArea_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      MaximumToleranceValue_ (this),
      NotConvex_ (this)
    {
    }

    FlatnessCharacteristicDefinitionType::
    FlatnessCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitArea_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      MaximumToleranceValue_ (this),
      NotConvex_ (this)
    {
    }

    FlatnessCharacteristicDefinitionType::
    FlatnessCharacteristicDefinitionType (const FlatnessCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      ToleranceZonePerUnitArea_ (x.ToleranceZonePerUnitArea_, f, this),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      SizeCharacteristicDefinitionId_ (x.SizeCharacteristicDefinitionId_, f, this),
      MaximumToleranceValue_ (x.MaximumToleranceValue_, f, this),
      NotConvex_ (x.NotConvex_, f, this)
    {
    }

    FlatnessCharacteristicDefinitionType::
    FlatnessCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitArea_ (this),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      MaximumToleranceValue_ (this),
      NotConvex_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FlatnessCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitArea
        //
        if (n.name () == L"ToleranceZonePerUnitArea" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitArea_type > r (
            ToleranceZonePerUnitArea_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArea_)
          {
            this->ToleranceZonePerUnitArea_.set (::std::move (r));
            continue;
          }
        }

        // MaterialCondition
        //
        if (n.name () == L"MaterialCondition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!this->MaterialCondition_)
          {
            this->MaterialCondition_.set (::std::move (r));
            continue;
          }
        }

        // SizeCharacteristicDefinitionId
        //
        if (n.name () == L"SizeCharacteristicDefinitionId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SizeCharacteristicDefinitionId_type > r (
            SizeCharacteristicDefinitionId_traits::create (i, f, this));

          if (!this->SizeCharacteristicDefinitionId_)
          {
            this->SizeCharacteristicDefinitionId_.set (::std::move (r));
            continue;
          }
        }

        // MaximumToleranceValue
        //
        if (n.name () == L"MaximumToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaximumToleranceValue_type > r (
            MaximumToleranceValue_traits::create (i, f, this));

          if (!this->MaximumToleranceValue_)
          {
            this->MaximumToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // NotConvex
        //
        if (n.name () == L"NotConvex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->NotConvex_)
          {
            this->NotConvex_.set (NotConvex_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    FlatnessCharacteristicDefinitionType* FlatnessCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicDefinitionType (*this, f, c);
    }

    FlatnessCharacteristicDefinitionType& FlatnessCharacteristicDefinitionType::
    operator= (const FlatnessCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->ToleranceZonePerUnitArea_ = x.ToleranceZonePerUnitArea_;
        this->MaterialCondition_ = x.MaterialCondition_;
        this->SizeCharacteristicDefinitionId_ = x.SizeCharacteristicDefinitionId_;
        this->MaximumToleranceValue_ = x.MaximumToleranceValue_;
        this->NotConvex_ = x.NotConvex_;
      }

      return *this;
    }

    FlatnessCharacteristicDefinitionType::
    ~FlatnessCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatnessCharacteristicDefinitionType >
    _xsd_FlatnessCharacteristicDefinitionType_type_factory_init (
      L"FlatnessCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatnessCharacteristicNominalType
    //

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType ()
    {
    }

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType (const FlatnessCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c)
    {
    }

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f, c)
    {
    }

    FlatnessCharacteristicNominalType* FlatnessCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicNominalType (*this, f, c);
    }

    FlatnessCharacteristicNominalType::
    ~FlatnessCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatnessCharacteristicNominalType >
    _xsd_FlatnessCharacteristicNominalType_type_factory_init (
      L"FlatnessCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatnessCharacteristicMeasurementType
    //

    FlatnessCharacteristicMeasurementType::
    FlatnessCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (),
      Bonus_ (this),
      MaxFlatness_ (this),
      ZonePlane_ (this)
    {
    }

    FlatnessCharacteristicMeasurementType::
    FlatnessCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      Bonus_ (this),
      MaxFlatness_ (this),
      ZonePlane_ (this)
    {
    }

    FlatnessCharacteristicMeasurementType::
    FlatnessCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      Bonus_ (this),
      MaxFlatness_ (this),
      ZonePlane_ (this)
    {
    }

    FlatnessCharacteristicMeasurementType::
    FlatnessCharacteristicMeasurementType (const FlatnessCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c),
      Bonus_ (x.Bonus_, f, this),
      MaxFlatness_ (x.MaxFlatness_, f, this),
      ZonePlane_ (x.ZonePlane_, f, this)
    {
    }

    FlatnessCharacteristicMeasurementType::
    FlatnessCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Bonus_ (this),
      MaxFlatness_ (this),
      ZonePlane_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FlatnessCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Bonus
        //
        if (n.name () == L"Bonus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Bonus_type > r (
            Bonus_traits::create (i, f, this));

          if (!this->Bonus_)
          {
            this->Bonus_.set (::std::move (r));
            continue;
          }
        }

        // MaxFlatness
        //
        if (n.name () == L"MaxFlatness" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxFlatness_type > r (
            MaxFlatness_traits::create (i, f, this));

          if (!this->MaxFlatness_)
          {
            this->MaxFlatness_.set (::std::move (r));
            continue;
          }
        }

        // ZonePlane
        //
        if (n.name () == L"ZonePlane" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZonePlane_type > r (
            ZonePlane_traits::create (i, f, this));

          if (!this->ZonePlane_)
          {
            this->ZonePlane_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    FlatnessCharacteristicMeasurementType* FlatnessCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicMeasurementType (*this, f, c);
    }

    FlatnessCharacteristicMeasurementType& FlatnessCharacteristicMeasurementType::
    operator= (const FlatnessCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (*this) = x;
        this->Bonus_ = x.Bonus_;
        this->MaxFlatness_ = x.MaxFlatness_;
        this->ZonePlane_ = x.ZonePlane_;
      }

      return *this;
    }

    FlatnessCharacteristicMeasurementType::
    ~FlatnessCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatnessCharacteristicMeasurementType >
    _xsd_FlatnessCharacteristicMeasurementType_type_factory_init (
      L"FlatnessCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // CircularityCharacteristicItemType
    //

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const CircularityCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    CircularityCharacteristicItemType* CircularityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicItemType (*this, f, c);
    }

    CircularityCharacteristicItemType::
    ~CircularityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularityCharacteristicItemType >
    _xsd_CircularityCharacteristicItemType_type_factory_init (
      L"CircularityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // CircularityCharacteristicDefinitionType
    //

    CircularityCharacteristicDefinitionType::
    CircularityCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitAngle_ (this),
      ToleranceZonePerUnitArcLength_ (this)
    {
    }

    CircularityCharacteristicDefinitionType::
    CircularityCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitAngle_ (this),
      ToleranceZonePerUnitArcLength_ (this)
    {
    }

    CircularityCharacteristicDefinitionType::
    CircularityCharacteristicDefinitionType (const CircularityCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      ToleranceZonePerUnitAngle_ (x.ToleranceZonePerUnitAngle_, f, this),
      ToleranceZonePerUnitArcLength_ (x.ToleranceZonePerUnitArcLength_, f, this)
    {
    }

    CircularityCharacteristicDefinitionType::
    CircularityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitAngle_ (this),
      ToleranceZonePerUnitArcLength_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CircularityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitAngle
        //
        if (n.name () == L"ToleranceZonePerUnitAngle" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitAngle_type > r (
            ToleranceZonePerUnitAngle_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitAngle_)
          {
            this->ToleranceZonePerUnitAngle_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitArcLength
        //
        if (n.name () == L"ToleranceZonePerUnitArcLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitArcLength_type > r (
            ToleranceZonePerUnitArcLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArcLength_)
          {
            this->ToleranceZonePerUnitArcLength_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CircularityCharacteristicDefinitionType* CircularityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicDefinitionType (*this, f, c);
    }

    CircularityCharacteristicDefinitionType& CircularityCharacteristicDefinitionType::
    operator= (const CircularityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->ToleranceZonePerUnitAngle_ = x.ToleranceZonePerUnitAngle_;
        this->ToleranceZonePerUnitArcLength_ = x.ToleranceZonePerUnitArcLength_;
      }

      return *this;
    }

    CircularityCharacteristicDefinitionType::
    ~CircularityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularityCharacteristicDefinitionType >
    _xsd_CircularityCharacteristicDefinitionType_type_factory_init (
      L"CircularityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // CircularityCharacteristicNominalType
    //

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType (),
      ProfileCurveId_ (this)
    {
    }

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      ProfileCurveId_ (this)
    {
    }

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      ProfileCurveId_ (this)
    {
    }

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType (const CircularityCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c),
      ProfileCurveId_ (x.ProfileCurveId_, f, this)
    {
    }

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ProfileCurveId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CircularityCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ProfileCurveId
        //
        if (n.name () == L"ProfileCurveId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProfileCurveId_type > r (
            ProfileCurveId_traits::create (i, f, this));

          if (!this->ProfileCurveId_)
          {
            this->ProfileCurveId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CircularityCharacteristicNominalType* CircularityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicNominalType (*this, f, c);
    }

    CircularityCharacteristicNominalType& CircularityCharacteristicNominalType::
    operator= (const CircularityCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicNominalBaseType& > (*this) = x;
        this->ProfileCurveId_ = x.ProfileCurveId_;
      }

      return *this;
    }

    CircularityCharacteristicNominalType::
    ~CircularityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularityCharacteristicNominalType >
    _xsd_CircularityCharacteristicNominalType_type_factory_init (
      L"CircularityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // CircularityCharacteristicMeasurementType
    //

    CircularityCharacteristicMeasurementType::
    CircularityCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (),
      MaxCircularity_ (this),
      ZoneRadii_ (this),
      ZonePlane_ (this)
    {
    }

    CircularityCharacteristicMeasurementType::
    CircularityCharacteristicMeasurementType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      MaxCircularity_ (this),
      ZoneRadii_ (this),
      ZonePlane_ (this)
    {
    }

    CircularityCharacteristicMeasurementType::
    CircularityCharacteristicMeasurementType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      MaxCircularity_ (this),
      ZoneRadii_ (this),
      ZonePlane_ (this)
    {
    }

    CircularityCharacteristicMeasurementType::
    CircularityCharacteristicMeasurementType (const CircularityCharacteristicMeasurementType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c),
      MaxCircularity_ (x.MaxCircularity_, f, this),
      ZoneRadii_ (x.ZoneRadii_, f, this),
      ZonePlane_ (x.ZonePlane_, f, this)
    {
    }

    CircularityCharacteristicMeasurementType::
    CircularityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      MaxCircularity_ (this),
      ZoneRadii_ (this),
      ZonePlane_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CircularityCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // MaxCircularity
        //
        if (n.name () == L"MaxCircularity" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxCircularity_type > r (
            MaxCircularity_traits::create (i, f, this));

          if (!this->MaxCircularity_)
          {
            this->MaxCircularity_.set (::std::move (r));
            continue;
          }
        }

        // ZoneRadii
        //
        if (n.name () == L"ZoneRadii" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneRadii_type > r (
            ZoneRadii_traits::create (i, f, this));

          if (!this->ZoneRadii_)
          {
            this->ZoneRadii_.set (::std::move (r));
            continue;
          }
        }

        // ZonePlane
        //
        if (n.name () == L"ZonePlane" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZonePlane_type > r (
            ZonePlane_traits::create (i, f, this));

          if (!this->ZonePlane_)
          {
            this->ZonePlane_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CircularityCharacteristicMeasurementType* CircularityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicMeasurementType (*this, f, c);
    }

    CircularityCharacteristicMeasurementType& CircularityCharacteristicMeasurementType::
    operator= (const CircularityCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (*this) = x;
        this->MaxCircularity_ = x.MaxCircularity_;
        this->ZoneRadii_ = x.ZoneRadii_;
        this->ZonePlane_ = x.ZonePlane_;
      }

      return *this;
    }

    CircularityCharacteristicMeasurementType::
    ~CircularityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularityCharacteristicMeasurementType >
    _xsd_CircularityCharacteristicMeasurementType_type_factory_init (
      L"CircularityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicityCharacteristicItemType
    //

    ConicityCharacteristicItemType::
    ConicityCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    ConicityCharacteristicItemType::
    ConicityCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    ConicityCharacteristicItemType::
    ConicityCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    ConicityCharacteristicItemType::
    ConicityCharacteristicItemType (const ConicityCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    ConicityCharacteristicItemType::
    ConicityCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    ConicityCharacteristicItemType* ConicityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicityCharacteristicItemType (*this, f, c);
    }

    ConicityCharacteristicItemType::
    ~ConicityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicityCharacteristicItemType >
    _xsd_ConicityCharacteristicItemType_type_factory_init (
      L"ConicityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicityCharacteristicDefinitionType
    //

    ConicityCharacteristicDefinitionType::
    ConicityCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
    }

    ConicityCharacteristicDefinitionType::
    ConicityCharacteristicDefinitionType (const id_type& id,
                                          const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this)
    {
    }

    ConicityCharacteristicDefinitionType::
    ConicityCharacteristicDefinitionType (const id_type& id,
                                          ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this)
    {
    }

    ConicityCharacteristicDefinitionType::
    ConicityCharacteristicDefinitionType (const ConicityCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this)
    {
    }

    ConicityCharacteristicDefinitionType::
    ConicityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ConicityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ConicityCharacteristicDefinitionType* ConicityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicityCharacteristicDefinitionType (*this, f, c);
    }

    ConicityCharacteristicDefinitionType& ConicityCharacteristicDefinitionType::
    operator= (const ConicityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
      }

      return *this;
    }

    ConicityCharacteristicDefinitionType::
    ~ConicityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicityCharacteristicDefinitionType >
    _xsd_ConicityCharacteristicDefinitionType_type_factory_init (
      L"ConicityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicityCharacteristicNominalType
    //

    ConicityCharacteristicNominalType::
    ConicityCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType ()
    {
    }

    ConicityCharacteristicNominalType::
    ConicityCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    ConicityCharacteristicNominalType::
    ConicityCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    ConicityCharacteristicNominalType::
    ConicityCharacteristicNominalType (const ConicityCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c)
    {
    }

    ConicityCharacteristicNominalType::
    ConicityCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f, c)
    {
    }

    ConicityCharacteristicNominalType* ConicityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicityCharacteristicNominalType (*this, f, c);
    }

    ConicityCharacteristicNominalType::
    ~ConicityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicityCharacteristicNominalType >
    _xsd_ConicityCharacteristicNominalType_type_factory_init (
      L"ConicityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicityCharacteristicMeasurementType
    //

    ConicityCharacteristicMeasurementType::
    ConicityCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType ()
    {
    }

    ConicityCharacteristicMeasurementType::
    ConicityCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId)
    {
    }

    ConicityCharacteristicMeasurementType::
    ConicityCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId))
    {
    }

    ConicityCharacteristicMeasurementType::
    ConicityCharacteristicMeasurementType (const ConicityCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    ConicityCharacteristicMeasurementType::
    ConicityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    ConicityCharacteristicMeasurementType* ConicityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicityCharacteristicMeasurementType (*this, f, c);
    }

    ConicityCharacteristicMeasurementType::
    ~ConicityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicityCharacteristicMeasurementType >
    _xsd_ConicityCharacteristicMeasurementType_type_factory_init (
      L"ConicityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // CylindricityCharacteristicItemType
    //

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const CylindricityCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    CylindricityCharacteristicItemType* CylindricityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicItemType (*this, f, c);
    }

    CylindricityCharacteristicItemType::
    ~CylindricityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CylindricityCharacteristicItemType >
    _xsd_CylindricityCharacteristicItemType_type_factory_init (
      L"CylindricityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // CylindricityCharacteristicDefinitionType
    //

    CylindricityCharacteristicDefinitionType::
    CylindricityCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitAngle_ (this),
      ToleranceZonePerUnitArcLength_ (this),
      ToleranceZonePerUnitPolarArea_ (this),
      ToleranceZonePerUnitArea_ (this),
      ToleranceZonePerUnitLength_ (this)
    {
    }

    CylindricityCharacteristicDefinitionType::
    CylindricityCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitAngle_ (this),
      ToleranceZonePerUnitArcLength_ (this),
      ToleranceZonePerUnitPolarArea_ (this),
      ToleranceZonePerUnitArea_ (this),
      ToleranceZonePerUnitLength_ (this)
    {
    }

    CylindricityCharacteristicDefinitionType::
    CylindricityCharacteristicDefinitionType (const CylindricityCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      ToleranceZonePerUnitAngle_ (x.ToleranceZonePerUnitAngle_, f, this),
      ToleranceZonePerUnitArcLength_ (x.ToleranceZonePerUnitArcLength_, f, this),
      ToleranceZonePerUnitPolarArea_ (x.ToleranceZonePerUnitPolarArea_, f, this),
      ToleranceZonePerUnitArea_ (x.ToleranceZonePerUnitArea_, f, this),
      ToleranceZonePerUnitLength_ (x.ToleranceZonePerUnitLength_, f, this)
    {
    }

    CylindricityCharacteristicDefinitionType::
    CylindricityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      ToleranceZonePerUnitAngle_ (this),
      ToleranceZonePerUnitArcLength_ (this),
      ToleranceZonePerUnitPolarArea_ (this),
      ToleranceZonePerUnitArea_ (this),
      ToleranceZonePerUnitLength_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CylindricityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitAngle
        //
        if (n.name () == L"ToleranceZonePerUnitAngle" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitAngle_type > r (
            ToleranceZonePerUnitAngle_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitAngle_)
          {
            this->ToleranceZonePerUnitAngle_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitArcLength
        //
        if (n.name () == L"ToleranceZonePerUnitArcLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitArcLength_type > r (
            ToleranceZonePerUnitArcLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArcLength_)
          {
            this->ToleranceZonePerUnitArcLength_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitPolarArea
        //
        if (n.name () == L"ToleranceZonePerUnitPolarArea" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitPolarArea_type > r (
            ToleranceZonePerUnitPolarArea_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitPolarArea_)
          {
            this->ToleranceZonePerUnitPolarArea_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitArea
        //
        if (n.name () == L"ToleranceZonePerUnitArea" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitArea_type > r (
            ToleranceZonePerUnitArea_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArea_)
          {
            this->ToleranceZonePerUnitArea_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceZonePerUnitLength
        //
        if (n.name () == L"ToleranceZonePerUnitLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceZonePerUnitLength_type > r (
            ToleranceZonePerUnitLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitLength_)
          {
            this->ToleranceZonePerUnitLength_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CylindricityCharacteristicDefinitionType* CylindricityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicDefinitionType (*this, f, c);
    }

    CylindricityCharacteristicDefinitionType& CylindricityCharacteristicDefinitionType::
    operator= (const CylindricityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->ToleranceZonePerUnitAngle_ = x.ToleranceZonePerUnitAngle_;
        this->ToleranceZonePerUnitArcLength_ = x.ToleranceZonePerUnitArcLength_;
        this->ToleranceZonePerUnitPolarArea_ = x.ToleranceZonePerUnitPolarArea_;
        this->ToleranceZonePerUnitArea_ = x.ToleranceZonePerUnitArea_;
        this->ToleranceZonePerUnitLength_ = x.ToleranceZonePerUnitLength_;
      }

      return *this;
    }

    CylindricityCharacteristicDefinitionType::
    ~CylindricityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CylindricityCharacteristicDefinitionType >
    _xsd_CylindricityCharacteristicDefinitionType_type_factory_init (
      L"CylindricityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // CylindricityCharacteristicNominalType
    //

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType ()
    {
    }

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType (const CylindricityCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c)
    {
    }

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f, c)
    {
    }

    CylindricityCharacteristicNominalType* CylindricityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicNominalType (*this, f, c);
    }

    CylindricityCharacteristicNominalType::
    ~CylindricityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CylindricityCharacteristicNominalType >
    _xsd_CylindricityCharacteristicNominalType_type_factory_init (
      L"CylindricityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // CylindricityCharacteristicMeasurementType
    //

    CylindricityCharacteristicMeasurementType::
    CylindricityCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (),
      MaxCylindricity_ (this),
      ZoneRadii_ (this),
      ZoneAxis_ (this)
    {
    }

    CylindricityCharacteristicMeasurementType::
    CylindricityCharacteristicMeasurementType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      MaxCylindricity_ (this),
      ZoneRadii_ (this),
      ZoneAxis_ (this)
    {
    }

    CylindricityCharacteristicMeasurementType::
    CylindricityCharacteristicMeasurementType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      MaxCylindricity_ (this),
      ZoneRadii_ (this),
      ZoneAxis_ (this)
    {
    }

    CylindricityCharacteristicMeasurementType::
    CylindricityCharacteristicMeasurementType (const CylindricityCharacteristicMeasurementType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c),
      MaxCylindricity_ (x.MaxCylindricity_, f, this),
      ZoneRadii_ (x.ZoneRadii_, f, this),
      ZoneAxis_ (x.ZoneAxis_, f, this)
    {
    }

    CylindricityCharacteristicMeasurementType::
    CylindricityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      MaxCylindricity_ (this),
      ZoneRadii_ (this),
      ZoneAxis_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CylindricityCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // MaxCylindricity
        //
        if (n.name () == L"MaxCylindricity" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxCylindricity_type > r (
            MaxCylindricity_traits::create (i, f, this));

          if (!this->MaxCylindricity_)
          {
            this->MaxCylindricity_.set (::std::move (r));
            continue;
          }
        }

        // ZoneRadii
        //
        if (n.name () == L"ZoneRadii" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneRadii_type > r (
            ZoneRadii_traits::create (i, f, this));

          if (!this->ZoneRadii_)
          {
            this->ZoneRadii_.set (::std::move (r));
            continue;
          }
        }

        // ZoneAxis
        //
        if (n.name () == L"ZoneAxis" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneAxis_type > r (
            ZoneAxis_traits::create (i, f, this));

          if (!this->ZoneAxis_)
          {
            this->ZoneAxis_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CylindricityCharacteristicMeasurementType* CylindricityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicMeasurementType (*this, f, c);
    }

    CylindricityCharacteristicMeasurementType& CylindricityCharacteristicMeasurementType::
    operator= (const CylindricityCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (*this) = x;
        this->MaxCylindricity_ = x.MaxCylindricity_;
        this->ZoneRadii_ = x.ZoneRadii_;
        this->ZoneAxis_ = x.ZoneAxis_;
      }

      return *this;
    }

    CylindricityCharacteristicMeasurementType::
    ~CylindricityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CylindricityCharacteristicMeasurementType >
    _xsd_CylindricityCharacteristicMeasurementType_type_factory_init (
      L"CylindricityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // EllipticityCharacteristicItemType
    //

    EllipticityCharacteristicItemType::
    EllipticityCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    EllipticityCharacteristicItemType::
    EllipticityCharacteristicItemType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    EllipticityCharacteristicItemType::
    EllipticityCharacteristicItemType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    EllipticityCharacteristicItemType::
    EllipticityCharacteristicItemType (const EllipticityCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    EllipticityCharacteristicItemType::
    EllipticityCharacteristicItemType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    EllipticityCharacteristicItemType* EllipticityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EllipticityCharacteristicItemType (*this, f, c);
    }

    EllipticityCharacteristicItemType::
    ~EllipticityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EllipticityCharacteristicItemType >
    _xsd_EllipticityCharacteristicItemType_type_factory_init (
      L"EllipticityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // EllipticityCharacteristicDefinitionType
    //

    EllipticityCharacteristicDefinitionType::
    EllipticityCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
    }

    EllipticityCharacteristicDefinitionType::
    EllipticityCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this)
    {
    }

    EllipticityCharacteristicDefinitionType::
    EllipticityCharacteristicDefinitionType (const id_type& id,
                                             ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this)
    {
    }

    EllipticityCharacteristicDefinitionType::
    EllipticityCharacteristicDefinitionType (const EllipticityCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this)
    {
    }

    EllipticityCharacteristicDefinitionType::
    EllipticityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void EllipticityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    EllipticityCharacteristicDefinitionType* EllipticityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EllipticityCharacteristicDefinitionType (*this, f, c);
    }

    EllipticityCharacteristicDefinitionType& EllipticityCharacteristicDefinitionType::
    operator= (const EllipticityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
      }

      return *this;
    }

    EllipticityCharacteristicDefinitionType::
    ~EllipticityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EllipticityCharacteristicDefinitionType >
    _xsd_EllipticityCharacteristicDefinitionType_type_factory_init (
      L"EllipticityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // EllipticityCharacteristicNominalType
    //

    EllipticityCharacteristicNominalType::
    EllipticityCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType ()
    {
    }

    EllipticityCharacteristicNominalType::
    EllipticityCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    EllipticityCharacteristicNominalType::
    EllipticityCharacteristicNominalType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    EllipticityCharacteristicNominalType::
    EllipticityCharacteristicNominalType (const EllipticityCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c)
    {
    }

    EllipticityCharacteristicNominalType::
    EllipticityCharacteristicNominalType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f, c)
    {
    }

    EllipticityCharacteristicNominalType* EllipticityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EllipticityCharacteristicNominalType (*this, f, c);
    }

    EllipticityCharacteristicNominalType::
    ~EllipticityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EllipticityCharacteristicNominalType >
    _xsd_EllipticityCharacteristicNominalType_type_factory_init (
      L"EllipticityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // EllipticityCharacteristicMeasurementType
    //

    EllipticityCharacteristicMeasurementType::
    EllipticityCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType ()
    {
    }

    EllipticityCharacteristicMeasurementType::
    EllipticityCharacteristicMeasurementType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId)
    {
    }

    EllipticityCharacteristicMeasurementType::
    EllipticityCharacteristicMeasurementType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId))
    {
    }

    EllipticityCharacteristicMeasurementType::
    EllipticityCharacteristicMeasurementType (const EllipticityCharacteristicMeasurementType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    EllipticityCharacteristicMeasurementType::
    EllipticityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    EllipticityCharacteristicMeasurementType* EllipticityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EllipticityCharacteristicMeasurementType (*this, f, c);
    }

    EllipticityCharacteristicMeasurementType::
    ~EllipticityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EllipticityCharacteristicMeasurementType >
    _xsd_EllipticityCharacteristicMeasurementType_type_factory_init (
      L"EllipticityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericityCharacteristicItemType
    //

    SphericityCharacteristicItemType::
    SphericityCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    SphericityCharacteristicItemType::
    SphericityCharacteristicItemType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    SphericityCharacteristicItemType::
    SphericityCharacteristicItemType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    SphericityCharacteristicItemType::
    SphericityCharacteristicItemType (const SphericityCharacteristicItemType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    SphericityCharacteristicItemType::
    SphericityCharacteristicItemType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    SphericityCharacteristicItemType* SphericityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericityCharacteristicItemType (*this, f, c);
    }

    SphericityCharacteristicItemType::
    ~SphericityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericityCharacteristicItemType >
    _xsd_SphericityCharacteristicItemType_type_factory_init (
      L"SphericityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericityCharacteristicDefinitionType
    //

    SphericityCharacteristicDefinitionType::
    SphericityCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
    }

    SphericityCharacteristicDefinitionType::
    SphericityCharacteristicDefinitionType (const id_type& id,
                                            const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this)
    {
    }

    SphericityCharacteristicDefinitionType::
    SphericityCharacteristicDefinitionType (const id_type& id,
                                            ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this)
    {
    }

    SphericityCharacteristicDefinitionType::
    SphericityCharacteristicDefinitionType (const SphericityCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this)
    {
    }

    SphericityCharacteristicDefinitionType::
    SphericityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SphericityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    SphericityCharacteristicDefinitionType* SphericityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericityCharacteristicDefinitionType (*this, f, c);
    }

    SphericityCharacteristicDefinitionType& SphericityCharacteristicDefinitionType::
    operator= (const SphericityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
      }

      return *this;
    }

    SphericityCharacteristicDefinitionType::
    ~SphericityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericityCharacteristicDefinitionType >
    _xsd_SphericityCharacteristicDefinitionType_type_factory_init (
      L"SphericityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericityCharacteristicNominalType
    //

    SphericityCharacteristicNominalType::
    SphericityCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType ()
    {
    }

    SphericityCharacteristicNominalType::
    SphericityCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    SphericityCharacteristicNominalType::
    SphericityCharacteristicNominalType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    SphericityCharacteristicNominalType::
    SphericityCharacteristicNominalType (const SphericityCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c)
    {
    }

    SphericityCharacteristicNominalType::
    SphericityCharacteristicNominalType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f, c)
    {
    }

    SphericityCharacteristicNominalType* SphericityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericityCharacteristicNominalType (*this, f, c);
    }

    SphericityCharacteristicNominalType::
    ~SphericityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericityCharacteristicNominalType >
    _xsd_SphericityCharacteristicNominalType_type_factory_init (
      L"SphericityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericityCharacteristicMeasurementType
    //

    SphericityCharacteristicMeasurementType::
    SphericityCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (),
      ZoneRadii_ (this),
      ZonePoint_ (this)
    {
    }

    SphericityCharacteristicMeasurementType::
    SphericityCharacteristicMeasurementType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      ZoneRadii_ (this),
      ZonePoint_ (this)
    {
    }

    SphericityCharacteristicMeasurementType::
    SphericityCharacteristicMeasurementType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      ZoneRadii_ (this),
      ZonePoint_ (this)
    {
    }

    SphericityCharacteristicMeasurementType::
    SphericityCharacteristicMeasurementType (const SphericityCharacteristicMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c),
      ZoneRadii_ (x.ZoneRadii_, f, this),
      ZonePoint_ (x.ZonePoint_, f, this)
    {
    }

    SphericityCharacteristicMeasurementType::
    SphericityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneRadii_ (this),
      ZonePoint_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SphericityCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneRadii
        //
        if (n.name () == L"ZoneRadii" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneRadii_type > r (
            ZoneRadii_traits::create (i, f, this));

          if (!this->ZoneRadii_)
          {
            this->ZoneRadii_.set (::std::move (r));
            continue;
          }
        }

        // ZonePoint
        //
        if (n.name () == L"ZonePoint" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZonePoint_type > r (
            ZonePoint_traits::create (i, f, this));

          if (!this->ZonePoint_)
          {
            this->ZonePoint_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SphericityCharacteristicMeasurementType* SphericityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericityCharacteristicMeasurementType (*this, f, c);
    }

    SphericityCharacteristicMeasurementType& SphericityCharacteristicMeasurementType::
    operator= (const SphericityCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (*this) = x;
        this->ZoneRadii_ = x.ZoneRadii_;
        this->ZonePoint_ = x.ZonePoint_;
      }

      return *this;
    }

    SphericityCharacteristicMeasurementType::
    ~SphericityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericityCharacteristicMeasurementType >
    _xsd_SphericityCharacteristicMeasurementType_type_factory_init (
      L"SphericityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ToroidicityCharacteristicItemType
    //

    ToroidicityCharacteristicItemType::
    ToroidicityCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    ToroidicityCharacteristicItemType::
    ToroidicityCharacteristicItemType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    ToroidicityCharacteristicItemType::
    ToroidicityCharacteristicItemType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    ToroidicityCharacteristicItemType::
    ToroidicityCharacteristicItemType (const ToroidicityCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    ToroidicityCharacteristicItemType::
    ToroidicityCharacteristicItemType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    ToroidicityCharacteristicItemType* ToroidicityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ToroidicityCharacteristicItemType (*this, f, c);
    }

    ToroidicityCharacteristicItemType::
    ~ToroidicityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ToroidicityCharacteristicItemType >
    _xsd_ToroidicityCharacteristicItemType_type_factory_init (
      L"ToroidicityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ToroidicityCharacteristicDefinitionType
    //

    ToroidicityCharacteristicDefinitionType::
    ToroidicityCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
    }

    ToroidicityCharacteristicDefinitionType::
    ToroidicityCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this)
    {
    }

    ToroidicityCharacteristicDefinitionType::
    ToroidicityCharacteristicDefinitionType (const id_type& id,
                                             ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this)
    {
    }

    ToroidicityCharacteristicDefinitionType::
    ToroidicityCharacteristicDefinitionType (const ToroidicityCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this)
    {
    }

    ToroidicityCharacteristicDefinitionType::
    ToroidicityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ToroidicityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ToroidicityCharacteristicDefinitionType* ToroidicityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ToroidicityCharacteristicDefinitionType (*this, f, c);
    }

    ToroidicityCharacteristicDefinitionType& ToroidicityCharacteristicDefinitionType::
    operator= (const ToroidicityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
      }

      return *this;
    }

    ToroidicityCharacteristicDefinitionType::
    ~ToroidicityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ToroidicityCharacteristicDefinitionType >
    _xsd_ToroidicityCharacteristicDefinitionType_type_factory_init (
      L"ToroidicityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ToroidicityCharacteristicNominalType
    //

    ToroidicityCharacteristicNominalType::
    ToroidicityCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType ()
    {
    }

    ToroidicityCharacteristicNominalType::
    ToroidicityCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    ToroidicityCharacteristicNominalType::
    ToroidicityCharacteristicNominalType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    ToroidicityCharacteristicNominalType::
    ToroidicityCharacteristicNominalType (const ToroidicityCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c)
    {
    }

    ToroidicityCharacteristicNominalType::
    ToroidicityCharacteristicNominalType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f, c)
    {
    }

    ToroidicityCharacteristicNominalType* ToroidicityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ToroidicityCharacteristicNominalType (*this, f, c);
    }

    ToroidicityCharacteristicNominalType::
    ~ToroidicityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ToroidicityCharacteristicNominalType >
    _xsd_ToroidicityCharacteristicNominalType_type_factory_init (
      L"ToroidicityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ToroidicityCharacteristicMeasurementType
    //

    ToroidicityCharacteristicMeasurementType::
    ToroidicityCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType ()
    {
    }

    ToroidicityCharacteristicMeasurementType::
    ToroidicityCharacteristicMeasurementType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId)
    {
    }

    ToroidicityCharacteristicMeasurementType::
    ToroidicityCharacteristicMeasurementType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId))
    {
    }

    ToroidicityCharacteristicMeasurementType::
    ToroidicityCharacteristicMeasurementType (const ToroidicityCharacteristicMeasurementType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    ToroidicityCharacteristicMeasurementType::
    ToroidicityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    ToroidicityCharacteristicMeasurementType* ToroidicityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ToroidicityCharacteristicMeasurementType (*this, f, c);
    }

    ToroidicityCharacteristicMeasurementType::
    ~ToroidicityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ToroidicityCharacteristicMeasurementType >
    _xsd_ToroidicityCharacteristicMeasurementType_type_factory_init (
      L"ToroidicityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // OtherFormCharacteristicItemType
    //

    OtherFormCharacteristicItemType::
    OtherFormCharacteristicItemType ()
    : ::xsd::qif30::FormCharacteristicItemBaseType ()
    {
    }

    OtherFormCharacteristicItemType::
    OtherFormCharacteristicItemType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    OtherFormCharacteristicItemType::
    OtherFormCharacteristicItemType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::FormCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    OtherFormCharacteristicItemType::
    OtherFormCharacteristicItemType (const OtherFormCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    OtherFormCharacteristicItemType::
    OtherFormCharacteristicItemType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    OtherFormCharacteristicItemType* OtherFormCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OtherFormCharacteristicItemType (*this, f, c);
    }

    OtherFormCharacteristicItemType::
    ~OtherFormCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, OtherFormCharacteristicItemType >
    _xsd_OtherFormCharacteristicItemType_type_factory_init (
      L"OtherFormCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // OtherFormCharacteristicDefinitionType
    //

    OtherFormCharacteristicDefinitionType::
    OtherFormCharacteristicDefinitionType ()
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
    }

    OtherFormCharacteristicDefinitionType::
    OtherFormCharacteristicDefinitionType (const id_type& id,
                                           const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this)
    {
    }

    OtherFormCharacteristicDefinitionType::
    OtherFormCharacteristicDefinitionType (const id_type& id,
                                           ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this)
    {
    }

    OtherFormCharacteristicDefinitionType::
    OtherFormCharacteristicDefinitionType (const OtherFormCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this)
    {
    }

    OtherFormCharacteristicDefinitionType::
    OtherFormCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void OtherFormCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    OtherFormCharacteristicDefinitionType* OtherFormCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OtherFormCharacteristicDefinitionType (*this, f, c);
    }

    OtherFormCharacteristicDefinitionType& OtherFormCharacteristicDefinitionType::
    operator= (const OtherFormCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
      }

      return *this;
    }

    OtherFormCharacteristicDefinitionType::
    ~OtherFormCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, OtherFormCharacteristicDefinitionType >
    _xsd_OtherFormCharacteristicDefinitionType_type_factory_init (
      L"OtherFormCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // OtherFormCharacteristicNominalType
    //

    OtherFormCharacteristicNominalType::
    OtherFormCharacteristicNominalType ()
    : ::xsd::qif30::FormCharacteristicNominalBaseType ()
    {
    }

    OtherFormCharacteristicNominalType::
    OtherFormCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    OtherFormCharacteristicNominalType::
    OtherFormCharacteristicNominalType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId))
    {
    }

    OtherFormCharacteristicNominalType::
    OtherFormCharacteristicNominalType (const OtherFormCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (x, f, c)
    {
    }

    OtherFormCharacteristicNominalType::
    OtherFormCharacteristicNominalType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicNominalBaseType (e, f, c)
    {
    }

    OtherFormCharacteristicNominalType* OtherFormCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OtherFormCharacteristicNominalType (*this, f, c);
    }

    OtherFormCharacteristicNominalType::
    ~OtherFormCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, OtherFormCharacteristicNominalType >
    _xsd_OtherFormCharacteristicNominalType_type_factory_init (
      L"OtherFormCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // OtherFormCharacteristicMeasurementType
    //

    OtherFormCharacteristicMeasurementType::
    OtherFormCharacteristicMeasurementType ()
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType ()
    {
    }

    OtherFormCharacteristicMeasurementType::
    OtherFormCharacteristicMeasurementType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId)
    {
    }

    OtherFormCharacteristicMeasurementType::
    OtherFormCharacteristicMeasurementType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId))
    {
    }

    OtherFormCharacteristicMeasurementType::
    OtherFormCharacteristicMeasurementType (const OtherFormCharacteristicMeasurementType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    OtherFormCharacteristicMeasurementType::
    OtherFormCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::FormCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    OtherFormCharacteristicMeasurementType* OtherFormCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OtherFormCharacteristicMeasurementType (*this, f, c);
    }

    OtherFormCharacteristicMeasurementType::
    ~OtherFormCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, OtherFormCharacteristicMeasurementType >
    _xsd_OtherFormCharacteristicMeasurementType_type_factory_init (
      L"OtherFormCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // LocationCharacteristicItemBaseType
    //

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType ()
    : ::xsd::qif30::GeometricCharacteristicItemBaseType ()
    {
    }

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         CharacteristicNominalId)
    {
    }

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         std::move (CharacteristicNominalId))
    {
    }

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const LocationCharacteristicItemBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    LocationCharacteristicItemBaseType::
    ~LocationCharacteristicItemBaseType ()
    {
    }

    // LocationCharacteristicDefinitionBaseType
    //

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
    }

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const id_type& id,
                                              const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
    }

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const id_type& id,
                                              ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
    }

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const LocationCharacteristicDefinitionBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this)
    {
    }

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LocationCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == L"DatumReferenceFrameId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!this->DatumReferenceFrameId_)
          {
            this->DatumReferenceFrameId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    LocationCharacteristicDefinitionBaseType& LocationCharacteristicDefinitionBaseType::
    operator= (const LocationCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->DatumReferenceFrameId_ = x.DatumReferenceFrameId_;
      }

      return *this;
    }

    LocationCharacteristicDefinitionBaseType::
    ~LocationCharacteristicDefinitionBaseType ()
    {
    }

    // LocationCharacteristicNominalBaseType
    //

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType ()
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType ()
    {
    }

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            CharacteristicDefinitionId)
    {
    }

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            std::move (CharacteristicDefinitionId))
    {
    }

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType (const LocationCharacteristicNominalBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (x, f, c)
    {
    }

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (e, f, c)
    {
    }

    LocationCharacteristicNominalBaseType::
    ~LocationCharacteristicNominalBaseType ()
    {
    }

    // LocationCharacteristicMeasurementBaseType
    //

    LocationCharacteristicMeasurementBaseType::
    LocationCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (),
      ZoneDataSet_ (this),
      DatumsOk_ (this)
    {
    }

    LocationCharacteristicMeasurementBaseType::
    LocationCharacteristicMeasurementBaseType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                Status,
                                                                CharacteristicItemId),
      ZoneDataSet_ (this),
      DatumsOk_ (this)
    {
    }

    LocationCharacteristicMeasurementBaseType::
    LocationCharacteristicMeasurementBaseType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                std::move (Status),
                                                                std::move (CharacteristicItemId)),
      ZoneDataSet_ (this),
      DatumsOk_ (this)
    {
    }

    LocationCharacteristicMeasurementBaseType::
    LocationCharacteristicMeasurementBaseType (const LocationCharacteristicMeasurementBaseType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (x, f, c),
      ZoneDataSet_ (x.ZoneDataSet_, f, this),
      DatumsOk_ (x.DatumsOk_, f, this)
    {
    }

    LocationCharacteristicMeasurementBaseType::
    LocationCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneDataSet_ (this),
      DatumsOk_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LocationCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneDataSet
        //
        if (n.name () == L"ZoneDataSet" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneDataSet_type > r (
            ZoneDataSet_traits::create (i, f, this));

          if (!this->ZoneDataSet_)
          {
            this->ZoneDataSet_.set (::std::move (r));
            continue;
          }
        }

        // DatumsOk
        //
        if (n.name () == L"DatumsOk" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    LocationCharacteristicMeasurementBaseType& LocationCharacteristicMeasurementBaseType::
    operator= (const LocationCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (*this) = x;
        this->ZoneDataSet_ = x.ZoneDataSet_;
        this->DatumsOk_ = x.DatumsOk_;
      }

      return *this;
    }

    LocationCharacteristicMeasurementBaseType::
    ~LocationCharacteristicMeasurementBaseType ()
    {
    }

    // PositionCharacteristicItemType
    //

    PositionCharacteristicItemType::
    PositionCharacteristicItemType ()
    : ::xsd::qif30::LocationCharacteristicItemBaseType ()
    {
    }

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        CharacteristicNominalId)
    {
    }

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        std::move (CharacteristicNominalId))
    {
    }

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const PositionCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (x, f, c)
    {
    }

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (e, f, c)
    {
    }

    PositionCharacteristicItemType* PositionCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicItemType (*this, f, c);
    }

    PositionCharacteristicItemType::
    ~PositionCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PositionCharacteristicItemType >
    _xsd_PositionCharacteristicItemType_type_factory_init (
      L"PositionCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // PositionSphericalZoneType
    //

    const PositionSphericalZoneType::Dimensionality_type PositionSphericalZoneType::Dimensionality_default_value_ (
      L"THREEDIMENSIONAL");

    PositionSphericalZoneType::
    PositionSphericalZoneType ()
    : ::xml_schema::type (),
      Dimensionality_ (this)
    {
    }

    PositionSphericalZoneType::
    PositionSphericalZoneType (const PositionSphericalZoneType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Dimensionality_ (x.Dimensionality_, f, this)
    {
    }

    PositionSphericalZoneType::
    PositionSphericalZoneType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Dimensionality_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PositionSphericalZoneType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Dimensionality
        //
        if (n.name () == L"Dimensionality" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Dimensionality_type > r (
            Dimensionality_traits::create (i, f, this));

          if (!this->Dimensionality_)
          {
            this->Dimensionality_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PositionSphericalZoneType* PositionSphericalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionSphericalZoneType (*this, f, c);
    }

    PositionSphericalZoneType& PositionSphericalZoneType::
    operator= (const PositionSphericalZoneType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Dimensionality_ = x.Dimensionality_;
      }

      return *this;
    }

    PositionSphericalZoneType::
    ~PositionSphericalZoneType ()
    {
    }

    // PositionDiametricalZoneType
    //

    PositionDiametricalZoneType::
    PositionDiametricalZoneType ()
    : ::xml_schema::type (),
      Dimensionality_ (this),
      ZoneOrientationVector_ (this),
      ElongatedZone_ (this)
    {
    }

    PositionDiametricalZoneType::
    PositionDiametricalZoneType (const PositionDiametricalZoneType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Dimensionality_ (x.Dimensionality_, f, this),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this),
      ElongatedZone_ (x.ElongatedZone_, f, this)
    {
    }

    PositionDiametricalZoneType::
    PositionDiametricalZoneType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Dimensionality_ (this),
      ZoneOrientationVector_ (this),
      ElongatedZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PositionDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Dimensionality
        //
        if (n.name () == L"Dimensionality" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Dimensionality_type > r (
            Dimensionality_traits::create (i, f, this));

          if (!this->Dimensionality_)
          {
            this->Dimensionality_.set (::std::move (r));
            continue;
          }
        }

        // ZoneOrientationVector
        //
        if (n.name () == L"ZoneOrientationVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (::std::move (r));
            continue;
          }
        }

        // ElongatedZone
        //
        if (n.name () == L"ElongatedZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ElongatedZone_)
          {
            this->ElongatedZone_.set (ElongatedZone_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    PositionDiametricalZoneType* PositionDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionDiametricalZoneType (*this, f, c);
    }

    PositionDiametricalZoneType& PositionDiametricalZoneType::
    operator= (const PositionDiametricalZoneType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Dimensionality_ = x.Dimensionality_;
        this->ZoneOrientationVector_ = x.ZoneOrientationVector_;
        this->ElongatedZone_ = x.ElongatedZone_;
      }

      return *this;
    }

    PositionDiametricalZoneType::
    ~PositionDiametricalZoneType ()
    {
    }

    // PositionNonDiametricalZoneType
    //

    PositionNonDiametricalZoneType::
    PositionNonDiametricalZoneType ()
    : ::xml_schema::type (),
      Dimensionality_ (this),
      ZoneOrientationVector_ (this),
      BoundaryZone_ (this),
      ZoneOrientationEnum_ (this),
      CoordinateSystemId_ (this)
    {
    }

    PositionNonDiametricalZoneType::
    PositionNonDiametricalZoneType (const PositionNonDiametricalZoneType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Dimensionality_ (x.Dimensionality_, f, this),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this),
      BoundaryZone_ (x.BoundaryZone_, f, this),
      ZoneOrientationEnum_ (x.ZoneOrientationEnum_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this)
    {
    }

    PositionNonDiametricalZoneType::
    PositionNonDiametricalZoneType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Dimensionality_ (this),
      ZoneOrientationVector_ (this),
      BoundaryZone_ (this),
      ZoneOrientationEnum_ (this),
      CoordinateSystemId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PositionNonDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Dimensionality
        //
        if (n.name () == L"Dimensionality" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Dimensionality_type > r (
            Dimensionality_traits::create (i, f, this));

          if (!this->Dimensionality_)
          {
            this->Dimensionality_.set (::std::move (r));
            continue;
          }
        }

        // ZoneOrientationVector
        //
        if (n.name () == L"ZoneOrientationVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (::std::move (r));
            continue;
          }
        }

        // BoundaryZone
        //
        if (n.name () == L"BoundaryZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->BoundaryZone_)
          {
            this->BoundaryZone_.set (BoundaryZone_traits::create (i, f, this));
            continue;
          }
        }

        // ZoneOrientationEnum
        //
        if (n.name () == L"ZoneOrientationEnum" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneOrientationEnum_type > r (
            ZoneOrientationEnum_traits::create (i, f, this));

          if (!this->ZoneOrientationEnum_)
          {
            this->ZoneOrientationEnum_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == L"CoordinateSystemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PositionNonDiametricalZoneType* PositionNonDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionNonDiametricalZoneType (*this, f, c);
    }

    PositionNonDiametricalZoneType& PositionNonDiametricalZoneType::
    operator= (const PositionNonDiametricalZoneType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Dimensionality_ = x.Dimensionality_;
        this->ZoneOrientationVector_ = x.ZoneOrientationVector_;
        this->BoundaryZone_ = x.BoundaryZone_;
        this->ZoneOrientationEnum_ = x.ZoneOrientationEnum_;
        this->CoordinateSystemId_ = x.CoordinateSystemId_;
      }

      return *this;
    }

    PositionNonDiametricalZoneType::
    ~PositionNonDiametricalZoneType ()
    {
    }

    // PositionZoneShapeType
    //

    PositionZoneShapeType::
    PositionZoneShapeType ()
    : ::xml_schema::type (),
      SphericalZone_ (this),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
    }

    PositionZoneShapeType::
    PositionZoneShapeType (const PositionZoneShapeType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SphericalZone_ (x.SphericalZone_, f, this),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      NonDiametricalZone_ (x.NonDiametricalZone_, f, this)
    {
    }

    PositionZoneShapeType::
    PositionZoneShapeType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SphericalZone_ (this),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PositionZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SphericalZone
        //
        if (n.name () == L"SphericalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SphericalZone_type > r (
            SphericalZone_traits::create (i, f, this));

          if (!this->SphericalZone_)
          {
            this->SphericalZone_.set (::std::move (r));
            continue;
          }
        }

        // DiametricalZone
        //
        if (n.name () == L"DiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        // NonDiametricalZone
        //
        if (n.name () == L"NonDiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonDiametricalZone_type > r (
            NonDiametricalZone_traits::create (i, f, this));

          if (!this->NonDiametricalZone_)
          {
            this->NonDiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PositionZoneShapeType* PositionZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionZoneShapeType (*this, f, c);
    }

    PositionZoneShapeType& PositionZoneShapeType::
    operator= (const PositionZoneShapeType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->SphericalZone_ = x.SphericalZone_;
        this->DiametricalZone_ = x.DiametricalZone_;
        this->NonDiametricalZone_ = x.NonDiametricalZone_;
      }

      return *this;
    }

    PositionZoneShapeType::
    ~PositionZoneShapeType ()
    {
    }

    // PositionCharacteristicDefinitionType
    //

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType ()
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      SecondCompositeSegmentPositionDefinition_ (this),
      ThirdCompositeSegmentPositionDefinition_ (this),
      FourthCompositeSegmentPositionDefinition_ (this),
      ToPointToleranceValue_ (this),
      OrientationOnly_ (this)
    {
    }

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const id_type& id,
                                          const ToleranceValue_type& ToleranceValue,
                                          const MaterialCondition_type& MaterialCondition,
                                          const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              ToleranceValue),
      MaterialCondition_ (MaterialCondition, this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (ZoneShape, this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      SecondCompositeSegmentPositionDefinition_ (this),
      ThirdCompositeSegmentPositionDefinition_ (this),
      FourthCompositeSegmentPositionDefinition_ (this),
      ToPointToleranceValue_ (this),
      OrientationOnly_ (this)
    {
    }

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const id_type& id,
                                          ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                          const MaterialCondition_type& MaterialCondition,
                                          ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              std::move (ToleranceValue)),
      MaterialCondition_ (MaterialCondition, this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (std::move (ZoneShape), this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      SecondCompositeSegmentPositionDefinition_ (this),
      ThirdCompositeSegmentPositionDefinition_ (this),
      FourthCompositeSegmentPositionDefinition_ (this),
      ToPointToleranceValue_ (this),
      OrientationOnly_ (this)
    {
    }

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const PositionCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (x, f, c),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      SizeCharacteristicDefinitionId_ (x.SizeCharacteristicDefinitionId_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this),
      MaximumToleranceValue_ (x.MaximumToleranceValue_, f, this),
      ProjectedToleranceZoneValue_ (x.ProjectedToleranceZoneValue_, f, this),
      SecondCompositeSegmentPositionDefinition_ (x.SecondCompositeSegmentPositionDefinition_, f, this),
      ThirdCompositeSegmentPositionDefinition_ (x.ThirdCompositeSegmentPositionDefinition_, f, this),
      FourthCompositeSegmentPositionDefinition_ (x.FourthCompositeSegmentPositionDefinition_, f, this),
      ToPointToleranceValue_ (x.ToPointToleranceValue_, f, this),
      OrientationOnly_ (x.OrientationOnly_, f, this)
    {
    }

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      MaterialCondition_ (this),
      SizeCharacteristicDefinitionId_ (this),
      ZoneShape_ (this),
      MaximumToleranceValue_ (this),
      ProjectedToleranceZoneValue_ (this),
      SecondCompositeSegmentPositionDefinition_ (this),
      ThirdCompositeSegmentPositionDefinition_ (this),
      FourthCompositeSegmentPositionDefinition_ (this),
      ToPointToleranceValue_ (this),
      OrientationOnly_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PositionCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LocationCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // MaterialCondition
        //
        if (n.name () == L"MaterialCondition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!MaterialCondition_.present ())
          {
            this->MaterialCondition_.set (::std::move (r));
            continue;
          }
        }

        // SizeCharacteristicDefinitionId
        //
        if (n.name () == L"SizeCharacteristicDefinitionId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SizeCharacteristicDefinitionId_type > r (
            SizeCharacteristicDefinitionId_traits::create (i, f, this));

          if (!this->SizeCharacteristicDefinitionId_)
          {
            this->SizeCharacteristicDefinitionId_.set (::std::move (r));
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == L"ZoneShape" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (::std::move (r));
            continue;
          }
        }

        // MaximumToleranceValue
        //
        if (n.name () == L"MaximumToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaximumToleranceValue_type > r (
            MaximumToleranceValue_traits::create (i, f, this));

          if (!this->MaximumToleranceValue_)
          {
            this->MaximumToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ProjectedToleranceZoneValue
        //
        if (n.name () == L"ProjectedToleranceZoneValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProjectedToleranceZoneValue_type > r (
            ProjectedToleranceZoneValue_traits::create (i, f, this));

          if (!this->ProjectedToleranceZoneValue_)
          {
            this->ProjectedToleranceZoneValue_.set (::std::move (r));
            continue;
          }
        }

        // SecondCompositeSegmentPositionDefinition
        //
        if (n.name () == L"SecondCompositeSegmentPositionDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondCompositeSegmentPositionDefinition_type > r (
            SecondCompositeSegmentPositionDefinition_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentPositionDefinition_)
          {
            this->SecondCompositeSegmentPositionDefinition_.set (::std::move (r));
            continue;
          }
        }

        // ThirdCompositeSegmentPositionDefinition
        //
        if (n.name () == L"ThirdCompositeSegmentPositionDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThirdCompositeSegmentPositionDefinition_type > r (
            ThirdCompositeSegmentPositionDefinition_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentPositionDefinition_)
          {
            this->ThirdCompositeSegmentPositionDefinition_.set (::std::move (r));
            continue;
          }
        }

        // FourthCompositeSegmentPositionDefinition
        //
        if (n.name () == L"FourthCompositeSegmentPositionDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FourthCompositeSegmentPositionDefinition_type > r (
            FourthCompositeSegmentPositionDefinition_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentPositionDefinition_)
          {
            this->FourthCompositeSegmentPositionDefinition_.set (::std::move (r));
            continue;
          }
        }

        // ToPointToleranceValue
        //
        if (n.name () == L"ToPointToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToPointToleranceValue_type > r (
            ToPointToleranceValue_traits::create (i, f, this));

          if (!this->ToPointToleranceValue_)
          {
            this->ToPointToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // OrientationOnly
        //
        if (n.name () == L"OrientationOnly" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->OrientationOnly_)
          {
            this->OrientationOnly_.set (OrientationOnly_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!MaterialCondition_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"MaterialCondition",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ZoneShape",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    PositionCharacteristicDefinitionType* PositionCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicDefinitionType (*this, f, c);
    }

    PositionCharacteristicDefinitionType& PositionCharacteristicDefinitionType::
    operator= (const PositionCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (*this) = x;
        this->MaterialCondition_ = x.MaterialCondition_;
        this->SizeCharacteristicDefinitionId_ = x.SizeCharacteristicDefinitionId_;
        this->ZoneShape_ = x.ZoneShape_;
        this->MaximumToleranceValue_ = x.MaximumToleranceValue_;
        this->ProjectedToleranceZoneValue_ = x.ProjectedToleranceZoneValue_;
        this->SecondCompositeSegmentPositionDefinition_ = x.SecondCompositeSegmentPositionDefinition_;
        this->ThirdCompositeSegmentPositionDefinition_ = x.ThirdCompositeSegmentPositionDefinition_;
        this->FourthCompositeSegmentPositionDefinition_ = x.FourthCompositeSegmentPositionDefinition_;
        this->ToPointToleranceValue_ = x.ToPointToleranceValue_;
        this->OrientationOnly_ = x.OrientationOnly_;
      }

      return *this;
    }

    PositionCharacteristicDefinitionType::
    ~PositionCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PositionCharacteristicDefinitionType >
    _xsd_PositionCharacteristicDefinitionType_type_factory_init (
      L"PositionCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // PositionCharacteristicNominalType
    //

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType ()
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (),
      CoordinateMethod_ (this)
    {
    }

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId),
      CoordinateMethod_ (this)
    {
    }

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           std::move (CharacteristicDefinitionId)),
      CoordinateMethod_ (this)
    {
    }

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType (const PositionCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (x, f, c),
      CoordinateMethod_ (x.CoordinateMethod_, f, this)
    {
    }

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      CoordinateMethod_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PositionCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LocationCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CoordinateMethod
        //
        if (n.name () == L"CoordinateMethod" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateMethod_type > r (
            CoordinateMethod_traits::create (i, f, this));

          if (!this->CoordinateMethod_)
          {
            this->CoordinateMethod_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PositionCharacteristicNominalType* PositionCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicNominalType (*this, f, c);
    }

    PositionCharacteristicNominalType& PositionCharacteristicNominalType::
    operator= (const PositionCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LocationCharacteristicNominalBaseType& > (*this) = x;
        this->CoordinateMethod_ = x.CoordinateMethod_;
      }

      return *this;
    }

    PositionCharacteristicNominalType::
    ~PositionCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PositionCharacteristicNominalType >
    _xsd_PositionCharacteristicNominalType_type_factory_init (
      L"PositionCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // PositionCharacteristicMeasurementType
    //

    PositionCharacteristicMeasurementType::
    PositionCharacteristicMeasurementType ()
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (),
      Bonus_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentPositionMeasurement_ (this),
      ThirdCompositeSegmentPositionMeasurement_ (this),
      FourthCompositeSegmentPositionMeasurement_ (this)
    {
    }

    PositionCharacteristicMeasurementType::
    PositionCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               Status,
                                                               CharacteristicItemId),
      Bonus_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentPositionMeasurement_ (this),
      ThirdCompositeSegmentPositionMeasurement_ (this),
      FourthCompositeSegmentPositionMeasurement_ (this)
    {
    }

    PositionCharacteristicMeasurementType::
    PositionCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               std::move (Status),
                                                               std::move (CharacteristicItemId)),
      Bonus_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentPositionMeasurement_ (this),
      ThirdCompositeSegmentPositionMeasurement_ (this),
      FourthCompositeSegmentPositionMeasurement_ (this)
    {
    }

    PositionCharacteristicMeasurementType::
    PositionCharacteristicMeasurementType (const PositionCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (x, f, c),
      Bonus_ (x.Bonus_, f, this),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this),
      SecondCompositeSegmentPositionMeasurement_ (x.SecondCompositeSegmentPositionMeasurement_, f, this),
      ThirdCompositeSegmentPositionMeasurement_ (x.ThirdCompositeSegmentPositionMeasurement_, f, this),
      FourthCompositeSegmentPositionMeasurement_ (x.FourthCompositeSegmentPositionMeasurement_, f, this)
    {
    }

    PositionCharacteristicMeasurementType::
    PositionCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Bonus_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentPositionMeasurement_ (this),
      ThirdCompositeSegmentPositionMeasurement_ (this),
      FourthCompositeSegmentPositionMeasurement_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PositionCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LocationCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Bonus
        //
        if (n.name () == L"Bonus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Bonus_type > r (
            Bonus_traits::create (i, f, this));

          if (!this->Bonus_)
          {
            this->Bonus_.set (::std::move (r));
            continue;
          }
        }

        // DRFTransformActualId
        //
        if (n.name () == L"DRFTransformActualId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (::std::move (r));
            continue;
          }
        }

        // SecondCompositeSegmentPositionMeasurement
        //
        if (n.name () == L"SecondCompositeSegmentPositionMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondCompositeSegmentPositionMeasurement_type > r (
            SecondCompositeSegmentPositionMeasurement_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentPositionMeasurement_)
          {
            this->SecondCompositeSegmentPositionMeasurement_.set (::std::move (r));
            continue;
          }
        }

        // ThirdCompositeSegmentPositionMeasurement
        //
        if (n.name () == L"ThirdCompositeSegmentPositionMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThirdCompositeSegmentPositionMeasurement_type > r (
            ThirdCompositeSegmentPositionMeasurement_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentPositionMeasurement_)
          {
            this->ThirdCompositeSegmentPositionMeasurement_.set (::std::move (r));
            continue;
          }
        }

        // FourthCompositeSegmentPositionMeasurement
        //
        if (n.name () == L"FourthCompositeSegmentPositionMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FourthCompositeSegmentPositionMeasurement_type > r (
            FourthCompositeSegmentPositionMeasurement_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentPositionMeasurement_)
          {
            this->FourthCompositeSegmentPositionMeasurement_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PositionCharacteristicMeasurementType* PositionCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicMeasurementType (*this, f, c);
    }

    PositionCharacteristicMeasurementType& PositionCharacteristicMeasurementType::
    operator= (const PositionCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LocationCharacteristicMeasurementBaseType& > (*this) = x;
        this->Bonus_ = x.Bonus_;
        this->DRFTransformActualId_ = x.DRFTransformActualId_;
        this->SecondCompositeSegmentPositionMeasurement_ = x.SecondCompositeSegmentPositionMeasurement_;
        this->ThirdCompositeSegmentPositionMeasurement_ = x.ThirdCompositeSegmentPositionMeasurement_;
        this->FourthCompositeSegmentPositionMeasurement_ = x.FourthCompositeSegmentPositionMeasurement_;
      }

      return *this;
    }

    PositionCharacteristicMeasurementType::
    ~PositionCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PositionCharacteristicMeasurementType >
    _xsd_PositionCharacteristicMeasurementType_type_factory_init (
      L"PositionCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleCharacteristicItemType
    //

    AngleCharacteristicItemType::
    AngleCharacteristicItemType ()
    : ::xsd::qif30::AngularCharacteristicItemBaseType ()
    {
    }

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const id_type& id,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const id_type& id,
                                 ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const AngleCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    AngleCharacteristicItemType* AngleCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicItemType (*this, f, c);
    }

    AngleCharacteristicItemType::
    ~AngleCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleCharacteristicItemType >
    _xsd_AngleCharacteristicItemType_type_factory_init (
      L"AngleCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleCharacteristicDefinitionType
    //

    AngleCharacteristicDefinitionType::
    AngleCharacteristicDefinitionType ()
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType ()
    {
    }

    AngleCharacteristicDefinitionType::
    AngleCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (id)
    {
    }

    AngleCharacteristicDefinitionType::
    AngleCharacteristicDefinitionType (const AngleCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngleCharacteristicDefinitionType::
    AngleCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngleCharacteristicDefinitionType* AngleCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicDefinitionType (*this, f, c);
    }

    AngleCharacteristicDefinitionType::
    ~AngleCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleCharacteristicDefinitionType >
    _xsd_AngleCharacteristicDefinitionType_type_factory_init (
      L"AngleCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleCharacteristicNominalType
    //

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType ()
    : ::xsd::qif30::AngularCharacteristicNominalBaseType ()
    {
    }

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId)
    {
    }

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId))
    {
    }

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType (const AngleCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (x, f, c)
    {
    }

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (e, f, c)
    {
    }

    AngleCharacteristicNominalType* AngleCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicNominalType (*this, f, c);
    }

    AngleCharacteristicNominalType::
    ~AngleCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleCharacteristicNominalType >
    _xsd_AngleCharacteristicNominalType_type_factory_init (
      L"AngleCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleCharacteristicMeasurementType
    //

    AngleCharacteristicMeasurementType::
    AngleCharacteristicMeasurementType ()
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType ()
    {
    }

    AngleCharacteristicMeasurementType::
    AngleCharacteristicMeasurementType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId)
    {
    }

    AngleCharacteristicMeasurementType::
    AngleCharacteristicMeasurementType (const id_type& id,
                                        ::std::unique_ptr< Status_type > Status,
                                        ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId))
    {
    }

    AngleCharacteristicMeasurementType::
    AngleCharacteristicMeasurementType (const AngleCharacteristicMeasurementType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    AngleCharacteristicMeasurementType::
    AngleCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    AngleCharacteristicMeasurementType* AngleCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicMeasurementType (*this, f, c);
    }

    AngleCharacteristicMeasurementType::
    ~AngleCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleCharacteristicMeasurementType >
    _xsd_AngleCharacteristicMeasurementType_type_factory_init (
      L"AngleCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleFromCharacteristicItemType
    //

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType ()
    : ::xsd::qif30::AngularCharacteristicItemBaseType ()
    {
    }

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const AngleFromCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    AngleFromCharacteristicItemType* AngleFromCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicItemType (*this, f, c);
    }

    AngleFromCharacteristicItemType::
    ~AngleFromCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleFromCharacteristicItemType >
    _xsd_AngleFromCharacteristicItemType_type_factory_init (
      L"AngleFromCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleFromCharacteristicDefinitionType
    //

    AngleFromCharacteristicDefinitionType::
    AngleFromCharacteristicDefinitionType ()
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType ()
    {
    }

    AngleFromCharacteristicDefinitionType::
    AngleFromCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (id)
    {
    }

    AngleFromCharacteristicDefinitionType::
    AngleFromCharacteristicDefinitionType (const AngleFromCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngleFromCharacteristicDefinitionType::
    AngleFromCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngleFromCharacteristicDefinitionType* AngleFromCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicDefinitionType (*this, f, c);
    }

    AngleFromCharacteristicDefinitionType::
    ~AngleFromCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleFromCharacteristicDefinitionType >
    _xsd_AngleFromCharacteristicDefinitionType_type_factory_init (
      L"AngleFromCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleFromCharacteristicNominalType
    //

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType ()
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
    }

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                        const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
    }

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                        const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId)),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
    }

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType (const AngleFromCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (x, f, c),
      OriginReference_ (x.OriginReference_, f, this),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      Vertex_ (x.Vertex_, f, this)
    {
    }

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngleFromCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::AngularCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // OriginReference
        //
        if (n.name () == L"OriginReference" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OriginReference_type > r (
            OriginReference_traits::create (i, f, this));

          if (!this->OriginReference_)
          {
            this->OriginReference_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == L"AnalysisMode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == L"CoordinateSystemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == L"MeasurementDirective" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (::std::move (r));
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == L"Vertex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AnalysisMode",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    AngleFromCharacteristicNominalType* AngleFromCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicNominalType (*this, f, c);
    }

    AngleFromCharacteristicNominalType& AngleFromCharacteristicNominalType::
    operator= (const AngleFromCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::AngularCharacteristicNominalBaseType& > (*this) = x;
        this->OriginReference_ = x.OriginReference_;
        this->AnalysisVector_ = x.AnalysisVector_;
        this->AnalysisMode_ = x.AnalysisMode_;
        this->CoordinateSystemId_ = x.CoordinateSystemId_;
        this->MeasurementDirective_ = x.MeasurementDirective_;
        this->Vertex_ = x.Vertex_;
      }

      return *this;
    }

    AngleFromCharacteristicNominalType::
    ~AngleFromCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleFromCharacteristicNominalType >
    _xsd_AngleFromCharacteristicNominalType_type_factory_init (
      L"AngleFromCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleFromCharacteristicMeasurementType
    //

    AngleFromCharacteristicMeasurementType::
    AngleFromCharacteristicMeasurementType ()
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
    }

    AngleFromCharacteristicMeasurementType::
    AngleFromCharacteristicMeasurementType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
    }

    AngleFromCharacteristicMeasurementType::
    AngleFromCharacteristicMeasurementType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId)),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
    }

    AngleFromCharacteristicMeasurementType::
    AngleFromCharacteristicMeasurementType (const AngleFromCharacteristicMeasurementType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      Vertex_ (x.Vertex_, f, this)
    {
    }

    AngleFromCharacteristicMeasurementType::
    AngleFromCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngleFromCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::AngularCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == L"Vertex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngleFromCharacteristicMeasurementType* AngleFromCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicMeasurementType (*this, f, c);
    }

    AngleFromCharacteristicMeasurementType& AngleFromCharacteristicMeasurementType::
    operator= (const AngleFromCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::AngularCharacteristicMeasurementBaseType& > (*this) = x;
        this->AnalysisVector_ = x.AnalysisVector_;
        this->Vertex_ = x.Vertex_;
      }

      return *this;
    }

    AngleFromCharacteristicMeasurementType::
    ~AngleFromCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleFromCharacteristicMeasurementType >
    _xsd_AngleFromCharacteristicMeasurementType_type_factory_init (
      L"AngleFromCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleBetweenCharacteristicItemType
    //

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType ()
    : ::xsd::qif30::AngularCharacteristicItemBaseType ()
    {
    }

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const AngleBetweenCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    AngleBetweenCharacteristicItemType* AngleBetweenCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicItemType (*this, f, c);
    }

    AngleBetweenCharacteristicItemType::
    ~AngleBetweenCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleBetweenCharacteristicItemType >
    _xsd_AngleBetweenCharacteristicItemType_type_factory_init (
      L"AngleBetweenCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleBetweenCharacteristicDefinitionType
    //

    AngleBetweenCharacteristicDefinitionType::
    AngleBetweenCharacteristicDefinitionType ()
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType ()
    {
    }

    AngleBetweenCharacteristicDefinitionType::
    AngleBetweenCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (id)
    {
    }

    AngleBetweenCharacteristicDefinitionType::
    AngleBetweenCharacteristicDefinitionType (const AngleBetweenCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngleBetweenCharacteristicDefinitionType::
    AngleBetweenCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngleBetweenCharacteristicDefinitionType* AngleBetweenCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicDefinitionType (*this, f, c);
    }

    AngleBetweenCharacteristicDefinitionType::
    ~AngleBetweenCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleBetweenCharacteristicDefinitionType >
    _xsd_AngleBetweenCharacteristicDefinitionType_type_factory_init (
      L"AngleBetweenCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleBetweenCharacteristicNominalType
    //

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType ()
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
    }

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                           const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
    }

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                           const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId)),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
    }

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType (const AngleBetweenCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (x, f, c),
      FeatureNominalPairs_ (x.FeatureNominalPairs_, f, this),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      Vertex_ (x.Vertex_, f, this)
    {
    }

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      CoordinateSystemId_ (this),
      MeasurementDirective_ (this),
      Vertex_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngleBetweenCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::AngularCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // FeatureNominalPairs
        //
        if (n.name () == L"FeatureNominalPairs" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureNominalPairs_type > r (
            FeatureNominalPairs_traits::create (i, f, this));

          if (!this->FeatureNominalPairs_)
          {
            this->FeatureNominalPairs_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == L"AnalysisMode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == L"CoordinateSystemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == L"MeasurementDirective" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (::std::move (r));
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == L"Vertex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AnalysisMode",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    AngleBetweenCharacteristicNominalType* AngleBetweenCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicNominalType (*this, f, c);
    }

    AngleBetweenCharacteristicNominalType& AngleBetweenCharacteristicNominalType::
    operator= (const AngleBetweenCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::AngularCharacteristicNominalBaseType& > (*this) = x;
        this->FeatureNominalPairs_ = x.FeatureNominalPairs_;
        this->AnalysisVector_ = x.AnalysisVector_;
        this->AnalysisMode_ = x.AnalysisMode_;
        this->CoordinateSystemId_ = x.CoordinateSystemId_;
        this->MeasurementDirective_ = x.MeasurementDirective_;
        this->Vertex_ = x.Vertex_;
      }

      return *this;
    }

    AngleBetweenCharacteristicNominalType::
    ~AngleBetweenCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleBetweenCharacteristicNominalType >
    _xsd_AngleBetweenCharacteristicNominalType_type_factory_init (
      L"AngleBetweenCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // AngleBetweenCharacteristicMeasurementType
    //

    AngleBetweenCharacteristicMeasurementType::
    AngleBetweenCharacteristicMeasurementType ()
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
    }

    AngleBetweenCharacteristicMeasurementType::
    AngleBetweenCharacteristicMeasurementType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
    }

    AngleBetweenCharacteristicMeasurementType::
    AngleBetweenCharacteristicMeasurementType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId)),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
    }

    AngleBetweenCharacteristicMeasurementType::
    AngleBetweenCharacteristicMeasurementType (const AngleBetweenCharacteristicMeasurementType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      Vertex_ (x.Vertex_, f, this)
    {
    }

    AngleBetweenCharacteristicMeasurementType::
    AngleBetweenCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::AngularCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (this),
      Vertex_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngleBetweenCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::AngularCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == L"Vertex" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngleBetweenCharacteristicMeasurementType* AngleBetweenCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicMeasurementType (*this, f, c);
    }

    AngleBetweenCharacteristicMeasurementType& AngleBetweenCharacteristicMeasurementType::
    operator= (const AngleBetweenCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::AngularCharacteristicMeasurementBaseType& > (*this) = x;
        this->AnalysisVector_ = x.AnalysisVector_;
        this->Vertex_ = x.Vertex_;
      }

      return *this;
    }

    AngleBetweenCharacteristicMeasurementType::
    ~AngleBetweenCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngleBetweenCharacteristicMeasurementType >
    _xsd_AngleBetweenCharacteristicMeasurementType_type_factory_init (
      L"AngleBetweenCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // LinearCoordinateCharacteristicItemType
    //

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType ()
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType ()
    {
    }

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const id_type& id,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (id,
                                                          CharacteristicNominalId)
    {
    }

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const id_type& id,
                                            ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (id,
                                                          std::move (CharacteristicNominalId))
    {
    }

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const LinearCoordinateCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (x, f, c)
    {
    }

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (e, f, c)
    {
    }

    LinearCoordinateCharacteristicItemType* LinearCoordinateCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicItemType (*this, f, c);
    }

    LinearCoordinateCharacteristicItemType::
    ~LinearCoordinateCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LinearCoordinateCharacteristicItemType >
    _xsd_LinearCoordinateCharacteristicItemType_type_factory_init (
      L"LinearCoordinateCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // LinearCoordinateCharacteristicDefinitionType
    //

    LinearCoordinateCharacteristicDefinitionType::
    LinearCoordinateCharacteristicDefinitionType ()
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    LinearCoordinateCharacteristicDefinitionType::
    LinearCoordinateCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    LinearCoordinateCharacteristicDefinitionType::
    LinearCoordinateCharacteristicDefinitionType (const LinearCoordinateCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    LinearCoordinateCharacteristicDefinitionType::
    LinearCoordinateCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearCoordinateCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CoordinateCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    LinearCoordinateCharacteristicDefinitionType* LinearCoordinateCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicDefinitionType (*this, f, c);
    }

    LinearCoordinateCharacteristicDefinitionType& LinearCoordinateCharacteristicDefinitionType::
    operator= (const LinearCoordinateCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    LinearCoordinateCharacteristicDefinitionType::
    ~LinearCoordinateCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LinearCoordinateCharacteristicDefinitionType >
    _xsd_LinearCoordinateCharacteristicDefinitionType_type_factory_init (
      L"LinearCoordinateCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // LinearCoordinateCharacteristicNominalType
    //

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType ()
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (),
      TargetValue_ (this),
      Direction_ (this),
      CoordinateSystemId_ (this)
    {
    }

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                               const Direction_type& Direction)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId),
      TargetValue_ (this),
      Direction_ (Direction, this),
      CoordinateSystemId_ (this)
    {
    }

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType (const id_type& id,
                                               ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                               const Direction_type& Direction)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (id,
                                                             std::move (CharacteristicDefinitionId)),
      TargetValue_ (this),
      Direction_ (Direction, this),
      CoordinateSystemId_ (this)
    {
    }

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType (const LinearCoordinateCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this),
      Direction_ (x.Direction_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this)
    {
    }

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this),
      Direction_ (this),
      CoordinateSystemId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearCoordinateCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CoordinateCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        // Direction
        //
        if (n.name () == L"Direction" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Direction_type > r (
            Direction_traits::create (i, f, this));

          if (!Direction_.present ())
          {
            this->Direction_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == L"CoordinateSystemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Direction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Direction",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    LinearCoordinateCharacteristicNominalType* LinearCoordinateCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicNominalType (*this, f, c);
    }

    LinearCoordinateCharacteristicNominalType& LinearCoordinateCharacteristicNominalType::
    operator= (const LinearCoordinateCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CoordinateCharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
        this->Direction_ = x.Direction_;
        this->CoordinateSystemId_ = x.CoordinateSystemId_;
      }

      return *this;
    }

    LinearCoordinateCharacteristicNominalType::
    ~LinearCoordinateCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LinearCoordinateCharacteristicNominalType >
    _xsd_LinearCoordinateCharacteristicNominalType_type_factory_init (
      L"LinearCoordinateCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // LinearCoordinateCharacteristicMeasurementType
    //

    LinearCoordinateCharacteristicMeasurementType::
    LinearCoordinateCharacteristicMeasurementType ()
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    LinearCoordinateCharacteristicMeasurementType::
    LinearCoordinateCharacteristicMeasurementType (const id_type& id,
                                                   const Status_type& Status,
                                                   const CharacteristicItemId_type& CharacteristicItemId,
                                                   const TypeOfCoordinates_type& TypeOfCoordinates)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (id,
                                                                 Status,
                                                                 CharacteristicItemId,
                                                                 TypeOfCoordinates),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    LinearCoordinateCharacteristicMeasurementType::
    LinearCoordinateCharacteristicMeasurementType (const id_type& id,
                                                   ::std::unique_ptr< Status_type > Status,
                                                   ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                                   ::std::unique_ptr< TypeOfCoordinates_type > TypeOfCoordinates)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (id,
                                                                 std::move (Status),
                                                                 std::move (CharacteristicItemId),
                                                                 std::move (TypeOfCoordinates)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    LinearCoordinateCharacteristicMeasurementType::
    LinearCoordinateCharacteristicMeasurementType (const LinearCoordinateCharacteristicMeasurementType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    LinearCoordinateCharacteristicMeasurementType::
    LinearCoordinateCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LinearCoordinateCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CoordinateCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    LinearCoordinateCharacteristicMeasurementType* LinearCoordinateCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicMeasurementType (*this, f, c);
    }

    LinearCoordinateCharacteristicMeasurementType& LinearCoordinateCharacteristicMeasurementType::
    operator= (const LinearCoordinateCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    LinearCoordinateCharacteristicMeasurementType::
    ~LinearCoordinateCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LinearCoordinateCharacteristicMeasurementType >
    _xsd_LinearCoordinateCharacteristicMeasurementType_type_factory_init (
      L"LinearCoordinateCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCoordinateCharacteristicItemType
    //

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType ()
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType ()
    {
    }

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const id_type& id,
                                             const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (id,
                                                          CharacteristicNominalId)
    {
    }

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (id,
                                                          std::move (CharacteristicNominalId))
    {
    }

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const AngularCoordinateCharacteristicItemType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (x, f, c)
    {
    }

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicItemBaseType (e, f, c)
    {
    }

    AngularCoordinateCharacteristicItemType* AngularCoordinateCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicItemType (*this, f, c);
    }

    AngularCoordinateCharacteristicItemType::
    ~AngularCoordinateCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularCoordinateCharacteristicItemType >
    _xsd_AngularCoordinateCharacteristicItemType_type_factory_init (
      L"AngularCoordinateCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCoordinateCharacteristicDefinitionType
    //

    AngularCoordinateCharacteristicDefinitionType::
    AngularCoordinateCharacteristicDefinitionType ()
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    AngularCoordinateCharacteristicDefinitionType::
    AngularCoordinateCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
    }

    AngularCoordinateCharacteristicDefinitionType::
    AngularCoordinateCharacteristicDefinitionType (const AngularCoordinateCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    AngularCoordinateCharacteristicDefinitionType::
    AngularCoordinateCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngularCoordinateCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CoordinateCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngularCoordinateCharacteristicDefinitionType* AngularCoordinateCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicDefinitionType (*this, f, c);
    }

    AngularCoordinateCharacteristicDefinitionType& AngularCoordinateCharacteristicDefinitionType::
    operator= (const AngularCoordinateCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    AngularCoordinateCharacteristicDefinitionType::
    ~AngularCoordinateCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularCoordinateCharacteristicDefinitionType >
    _xsd_AngularCoordinateCharacteristicDefinitionType_type_factory_init (
      L"AngularCoordinateCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCoordinateCharacteristicNominalType
    //

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType ()
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (),
      TargetValue_ (this),
      Direction_ (this),
      CoordinateSystemId_ (this)
    {
    }

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType (const id_type& id,
                                                const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                                const Direction_type& Direction)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId),
      TargetValue_ (this),
      Direction_ (Direction, this),
      CoordinateSystemId_ (this)
    {
    }

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType (const id_type& id,
                                                ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                                const Direction_type& Direction)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (id,
                                                             std::move (CharacteristicDefinitionId)),
      TargetValue_ (this),
      Direction_ (Direction, this),
      CoordinateSystemId_ (this)
    {
    }

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType (const AngularCoordinateCharacteristicNominalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this),
      Direction_ (x.Direction_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this)
    {
    }

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this),
      Direction_ (this),
      CoordinateSystemId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngularCoordinateCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CoordinateCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        // Direction
        //
        if (n.name () == L"Direction" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Direction_type > r (
            Direction_traits::create (i, f, this));

          if (!Direction_.present ())
          {
            this->Direction_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == L"CoordinateSystemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Direction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Direction",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    AngularCoordinateCharacteristicNominalType* AngularCoordinateCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicNominalType (*this, f, c);
    }

    AngularCoordinateCharacteristicNominalType& AngularCoordinateCharacteristicNominalType::
    operator= (const AngularCoordinateCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CoordinateCharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
        this->Direction_ = x.Direction_;
        this->CoordinateSystemId_ = x.CoordinateSystemId_;
      }

      return *this;
    }

    AngularCoordinateCharacteristicNominalType::
    ~AngularCoordinateCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularCoordinateCharacteristicNominalType >
    _xsd_AngularCoordinateCharacteristicNominalType_type_factory_init (
      L"AngularCoordinateCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // AngularCoordinateCharacteristicMeasurementType
    //

    AngularCoordinateCharacteristicMeasurementType::
    AngularCoordinateCharacteristicMeasurementType ()
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AngularCoordinateCharacteristicMeasurementType::
    AngularCoordinateCharacteristicMeasurementType (const id_type& id,
                                                    const Status_type& Status,
                                                    const CharacteristicItemId_type& CharacteristicItemId,
                                                    const TypeOfCoordinates_type& TypeOfCoordinates)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (id,
                                                                 Status,
                                                                 CharacteristicItemId,
                                                                 TypeOfCoordinates),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AngularCoordinateCharacteristicMeasurementType::
    AngularCoordinateCharacteristicMeasurementType (const id_type& id,
                                                    ::std::unique_ptr< Status_type > Status,
                                                    ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                                    ::std::unique_ptr< TypeOfCoordinates_type > TypeOfCoordinates)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (id,
                                                                 std::move (Status),
                                                                 std::move (CharacteristicItemId),
                                                                 std::move (TypeOfCoordinates)),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
    }

    AngularCoordinateCharacteristicMeasurementType::
    AngularCoordinateCharacteristicMeasurementType (const AngularCoordinateCharacteristicMeasurementType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    AngularCoordinateCharacteristicMeasurementType::
    AngularCoordinateCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (this),
      MaxValue_ (this),
      MinValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AngularCoordinateCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CoordinateCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Value
        //
        if (n.name () == L"Value" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (::std::move (r));
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == L"MaxValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (::std::move (r));
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == L"MinValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    AngularCoordinateCharacteristicMeasurementType* AngularCoordinateCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicMeasurementType (*this, f, c);
    }

    AngularCoordinateCharacteristicMeasurementType& AngularCoordinateCharacteristicMeasurementType::
    operator= (const AngularCoordinateCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType& > (*this) = x;
        this->Value_ = x.Value_;
        this->MaxValue_ = x.MaxValue_;
        this->MinValue_ = x.MinValue_;
      }

      return *this;
    }

    AngularCoordinateCharacteristicMeasurementType::
    ~AngularCoordinateCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AngularCoordinateCharacteristicMeasurementType >
    _xsd_AngularCoordinateCharacteristicMeasurementType_type_factory_init (
      L"AngularCoordinateCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // CurveLengthCharacteristicItemType
    //

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const CurveLengthCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicItemType* CurveLengthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicItemType (*this, f, c);
    }

    CurveLengthCharacteristicItemType::
    ~CurveLengthCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CurveLengthCharacteristicItemType >
    _xsd_CurveLengthCharacteristicItemType_type_factory_init (
      L"CurveLengthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // CurveLengthCharacteristicDefinitionType
    //

    CurveLengthCharacteristicDefinitionType::
    CurveLengthCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    CurveLengthCharacteristicDefinitionType::
    CurveLengthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    CurveLengthCharacteristicDefinitionType::
    CurveLengthCharacteristicDefinitionType (const CurveLengthCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicDefinitionType::
    CurveLengthCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicDefinitionType* CurveLengthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicDefinitionType (*this, f, c);
    }

    CurveLengthCharacteristicDefinitionType::
    ~CurveLengthCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CurveLengthCharacteristicDefinitionType >
    _xsd_CurveLengthCharacteristicDefinitionType_type_factory_init (
      L"CurveLengthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // CurveLengthCharacteristicNominalType
    //

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType (const CurveLengthCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicNominalType* CurveLengthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicNominalType (*this, f, c);
    }

    CurveLengthCharacteristicNominalType::
    ~CurveLengthCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CurveLengthCharacteristicNominalType >
    _xsd_CurveLengthCharacteristicNominalType_type_factory_init (
      L"CurveLengthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // CurveLengthCharacteristicMeasurementType
    //

    CurveLengthCharacteristicMeasurementType::
    CurveLengthCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    CurveLengthCharacteristicMeasurementType::
    CurveLengthCharacteristicMeasurementType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    CurveLengthCharacteristicMeasurementType::
    CurveLengthCharacteristicMeasurementType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    CurveLengthCharacteristicMeasurementType::
    CurveLengthCharacteristicMeasurementType (const CurveLengthCharacteristicMeasurementType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicMeasurementType::
    CurveLengthCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicMeasurementType* CurveLengthCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicMeasurementType (*this, f, c);
    }

    CurveLengthCharacteristicMeasurementType::
    ~CurveLengthCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CurveLengthCharacteristicMeasurementType >
    _xsd_CurveLengthCharacteristicMeasurementType_type_factory_init (
      L"CurveLengthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // DiameterCharacteristicItemType
    //

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const DiameterCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DiameterCharacteristicItemType* DiameterCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicItemType (*this, f, c);
    }

    DiameterCharacteristicItemType::
    ~DiameterCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DiameterCharacteristicItemType >
    _xsd_DiameterCharacteristicItemType_type_factory_init (
      L"DiameterCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // DiameterCharacteristicDefinitionType
    //

    DiameterCharacteristicDefinitionType::
    DiameterCharacteristicDefinitionType ()
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (),
      Tolerance_ (this),
      LimitsAndFitsSpecification_ (this),
      NonTolerance_ (this)
    {
    }

    DiameterCharacteristicDefinitionType::
    DiameterCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (id),
      Tolerance_ (this),
      LimitsAndFitsSpecification_ (this),
      NonTolerance_ (this)
    {
    }

    DiameterCharacteristicDefinitionType::
    DiameterCharacteristicDefinitionType (const DiameterCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      LimitsAndFitsSpecification_ (x.LimitsAndFitsSpecification_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    DiameterCharacteristicDefinitionType::
    DiameterCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (this),
      LimitsAndFitsSpecification_ (this),
      NonTolerance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void DiameterCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::DimensionalCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Tolerance
        //
        if (n.name () == L"Tolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (::std::move (r));
            continue;
          }
        }

        // LimitsAndFitsSpecification
        //
        if (n.name () == L"LimitsAndFitsSpecification" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LimitsAndFitsSpecification_type > r (
            LimitsAndFitsSpecification_traits::create (i, f, this));

          if (!this->LimitsAndFitsSpecification_)
          {
            this->LimitsAndFitsSpecification_.set (::std::move (r));
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == L"NonTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    DiameterCharacteristicDefinitionType* DiameterCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicDefinitionType (*this, f, c);
    }

    DiameterCharacteristicDefinitionType& DiameterCharacteristicDefinitionType::
    operator= (const DiameterCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType& > (*this) = x;
        this->Tolerance_ = x.Tolerance_;
        this->LimitsAndFitsSpecification_ = x.LimitsAndFitsSpecification_;
        this->NonTolerance_ = x.NonTolerance_;
      }

      return *this;
    }

    DiameterCharacteristicDefinitionType::
    ~DiameterCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DiameterCharacteristicDefinitionType >
    _xsd_DiameterCharacteristicDefinitionType_type_factory_init (
      L"DiameterCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // DiameterCharacteristicNominalType
    //

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType (const DiameterCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    DiameterCharacteristicNominalType* DiameterCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicNominalType (*this, f, c);
    }

    DiameterCharacteristicNominalType::
    ~DiameterCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DiameterCharacteristicNominalType >
    _xsd_DiameterCharacteristicNominalType_type_factory_init (
      L"DiameterCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // DiameterCharacteristicMeasurementType
    //

    DiameterCharacteristicMeasurementType::
    DiameterCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    DiameterCharacteristicMeasurementType::
    DiameterCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    DiameterCharacteristicMeasurementType::
    DiameterCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    DiameterCharacteristicMeasurementType::
    DiameterCharacteristicMeasurementType (const DiameterCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    DiameterCharacteristicMeasurementType::
    DiameterCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    DiameterCharacteristicMeasurementType* DiameterCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicMeasurementType (*this, f, c);
    }

    DiameterCharacteristicMeasurementType::
    ~DiameterCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DiameterCharacteristicMeasurementType >
    _xsd_DiameterCharacteristicMeasurementType_type_factory_init (
      L"DiameterCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalDiameterCharacteristicItemType
    //

    SphericalDiameterCharacteristicItemType::
    SphericalDiameterCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    SphericalDiameterCharacteristicItemType::
    SphericalDiameterCharacteristicItemType (const id_type& id,
                                             const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    SphericalDiameterCharacteristicItemType::
    SphericalDiameterCharacteristicItemType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    SphericalDiameterCharacteristicItemType::
    SphericalDiameterCharacteristicItemType (const SphericalDiameterCharacteristicItemType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    SphericalDiameterCharacteristicItemType::
    SphericalDiameterCharacteristicItemType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    SphericalDiameterCharacteristicItemType* SphericalDiameterCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalDiameterCharacteristicItemType (*this, f, c);
    }

    SphericalDiameterCharacteristicItemType::
    ~SphericalDiameterCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalDiameterCharacteristicItemType >
    _xsd_SphericalDiameterCharacteristicItemType_type_factory_init (
      L"SphericalDiameterCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalDiameterCharacteristicDefinitionType
    //

    SphericalDiameterCharacteristicDefinitionType::
    SphericalDiameterCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    SphericalDiameterCharacteristicDefinitionType::
    SphericalDiameterCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    SphericalDiameterCharacteristicDefinitionType::
    SphericalDiameterCharacteristicDefinitionType (const SphericalDiameterCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    SphericalDiameterCharacteristicDefinitionType::
    SphericalDiameterCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    SphericalDiameterCharacteristicDefinitionType* SphericalDiameterCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalDiameterCharacteristicDefinitionType (*this, f, c);
    }

    SphericalDiameterCharacteristicDefinitionType::
    ~SphericalDiameterCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalDiameterCharacteristicDefinitionType >
    _xsd_SphericalDiameterCharacteristicDefinitionType_type_factory_init (
      L"SphericalDiameterCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalDiameterCharacteristicNominalType
    //

    SphericalDiameterCharacteristicNominalType::
    SphericalDiameterCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    SphericalDiameterCharacteristicNominalType::
    SphericalDiameterCharacteristicNominalType (const id_type& id,
                                                const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    SphericalDiameterCharacteristicNominalType::
    SphericalDiameterCharacteristicNominalType (const id_type& id,
                                                ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    SphericalDiameterCharacteristicNominalType::
    SphericalDiameterCharacteristicNominalType (const SphericalDiameterCharacteristicNominalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    SphericalDiameterCharacteristicNominalType::
    SphericalDiameterCharacteristicNominalType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    SphericalDiameterCharacteristicNominalType* SphericalDiameterCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalDiameterCharacteristicNominalType (*this, f, c);
    }

    SphericalDiameterCharacteristicNominalType::
    ~SphericalDiameterCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalDiameterCharacteristicNominalType >
    _xsd_SphericalDiameterCharacteristicNominalType_type_factory_init (
      L"SphericalDiameterCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalDiameterCharacteristicMeasurementType
    //

    SphericalDiameterCharacteristicMeasurementType::
    SphericalDiameterCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    SphericalDiameterCharacteristicMeasurementType::
    SphericalDiameterCharacteristicMeasurementType (const id_type& id,
                                                    const Status_type& Status,
                                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    SphericalDiameterCharacteristicMeasurementType::
    SphericalDiameterCharacteristicMeasurementType (const id_type& id,
                                                    ::std::unique_ptr< Status_type > Status,
                                                    ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    SphericalDiameterCharacteristicMeasurementType::
    SphericalDiameterCharacteristicMeasurementType (const SphericalDiameterCharacteristicMeasurementType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    SphericalDiameterCharacteristicMeasurementType::
    SphericalDiameterCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    SphericalDiameterCharacteristicMeasurementType* SphericalDiameterCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalDiameterCharacteristicMeasurementType (*this, f, c);
    }

    SphericalDiameterCharacteristicMeasurementType::
    ~SphericalDiameterCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalDiameterCharacteristicMeasurementType >
    _xsd_SphericalDiameterCharacteristicMeasurementType_type_factory_init (
      L"SphericalDiameterCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // LengthCharacteristicItemType
    //

    LengthCharacteristicItemType::
    LengthCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const id_type& id,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const id_type& id,
                                  ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const LengthCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    LengthCharacteristicItemType* LengthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicItemType (*this, f, c);
    }

    LengthCharacteristicItemType::
    ~LengthCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LengthCharacteristicItemType >
    _xsd_LengthCharacteristicItemType_type_factory_init (
      L"LengthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // LengthCharacteristicDefinitionType
    //

    LengthCharacteristicDefinitionType::
    LengthCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    LengthCharacteristicDefinitionType::
    LengthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    LengthCharacteristicDefinitionType::
    LengthCharacteristicDefinitionType (const LengthCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    LengthCharacteristicDefinitionType::
    LengthCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    LengthCharacteristicDefinitionType* LengthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicDefinitionType (*this, f, c);
    }

    LengthCharacteristicDefinitionType::
    ~LengthCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LengthCharacteristicDefinitionType >
    _xsd_LengthCharacteristicDefinitionType_type_factory_init (
      L"LengthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // LengthCharacteristicNominalType
    //

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType (const LengthCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    LengthCharacteristicNominalType* LengthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicNominalType (*this, f, c);
    }

    LengthCharacteristicNominalType::
    ~LengthCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LengthCharacteristicNominalType >
    _xsd_LengthCharacteristicNominalType_type_factory_init (
      L"LengthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // LengthCharacteristicMeasurementType
    //

    LengthCharacteristicMeasurementType::
    LengthCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    LengthCharacteristicMeasurementType::
    LengthCharacteristicMeasurementType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    LengthCharacteristicMeasurementType::
    LengthCharacteristicMeasurementType (const id_type& id,
                                         ::std::unique_ptr< Status_type > Status,
                                         ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    LengthCharacteristicMeasurementType::
    LengthCharacteristicMeasurementType (const LengthCharacteristicMeasurementType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    LengthCharacteristicMeasurementType::
    LengthCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    LengthCharacteristicMeasurementType* LengthCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicMeasurementType (*this, f, c);
    }

    LengthCharacteristicMeasurementType::
    ~LengthCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LengthCharacteristicMeasurementType >
    _xsd_LengthCharacteristicMeasurementType_type_factory_init (
      L"LengthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WidthCharacteristicItemType
    //

    WidthCharacteristicItemType::
    WidthCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const id_type& id,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const id_type& id,
                                 ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const WidthCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    WidthCharacteristicItemType* WidthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicItemType (*this, f, c);
    }

    WidthCharacteristicItemType::
    ~WidthCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WidthCharacteristicItemType >
    _xsd_WidthCharacteristicItemType_type_factory_init (
      L"WidthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WidthCharacteristicDefinitionType
    //

    WidthCharacteristicDefinitionType::
    WidthCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    WidthCharacteristicDefinitionType::
    WidthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    WidthCharacteristicDefinitionType::
    WidthCharacteristicDefinitionType (const WidthCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WidthCharacteristicDefinitionType::
    WidthCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WidthCharacteristicDefinitionType* WidthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicDefinitionType (*this, f, c);
    }

    WidthCharacteristicDefinitionType::
    ~WidthCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WidthCharacteristicDefinitionType >
    _xsd_WidthCharacteristicDefinitionType_type_factory_init (
      L"WidthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WidthCharacteristicNominalType
    //

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType (const WidthCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    WidthCharacteristicNominalType* WidthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicNominalType (*this, f, c);
    }

    WidthCharacteristicNominalType::
    ~WidthCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WidthCharacteristicNominalType >
    _xsd_WidthCharacteristicNominalType_type_factory_init (
      L"WidthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WidthCharacteristicMeasurementType
    //

    WidthCharacteristicMeasurementType::
    WidthCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    WidthCharacteristicMeasurementType::
    WidthCharacteristicMeasurementType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WidthCharacteristicMeasurementType::
    WidthCharacteristicMeasurementType (const id_type& id,
                                        ::std::unique_ptr< Status_type > Status,
                                        ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WidthCharacteristicMeasurementType::
    WidthCharacteristicMeasurementType (const WidthCharacteristicMeasurementType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    WidthCharacteristicMeasurementType::
    WidthCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    WidthCharacteristicMeasurementType* WidthCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicMeasurementType (*this, f, c);
    }

    WidthCharacteristicMeasurementType::
    ~WidthCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WidthCharacteristicMeasurementType >
    _xsd_WidthCharacteristicMeasurementType_type_factory_init (
      L"WidthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // HeightCharacteristicItemType
    //

    HeightCharacteristicItemType::
    HeightCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const id_type& id,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const id_type& id,
                                  ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const HeightCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    HeightCharacteristicItemType* HeightCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicItemType (*this, f, c);
    }

    HeightCharacteristicItemType::
    ~HeightCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HeightCharacteristicItemType >
    _xsd_HeightCharacteristicItemType_type_factory_init (
      L"HeightCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // HeightCharacteristicDefinitionType
    //

    HeightCharacteristicDefinitionType::
    HeightCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    HeightCharacteristicDefinitionType::
    HeightCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    HeightCharacteristicDefinitionType::
    HeightCharacteristicDefinitionType (const HeightCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    HeightCharacteristicDefinitionType::
    HeightCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    HeightCharacteristicDefinitionType* HeightCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicDefinitionType (*this, f, c);
    }

    HeightCharacteristicDefinitionType::
    ~HeightCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HeightCharacteristicDefinitionType >
    _xsd_HeightCharacteristicDefinitionType_type_factory_init (
      L"HeightCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // HeightCharacteristicNominalType
    //

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType (const HeightCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    HeightCharacteristicNominalType* HeightCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicNominalType (*this, f, c);
    }

    HeightCharacteristicNominalType::
    ~HeightCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HeightCharacteristicNominalType >
    _xsd_HeightCharacteristicNominalType_type_factory_init (
      L"HeightCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // HeightCharacteristicMeasurementType
    //

    HeightCharacteristicMeasurementType::
    HeightCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    HeightCharacteristicMeasurementType::
    HeightCharacteristicMeasurementType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    HeightCharacteristicMeasurementType::
    HeightCharacteristicMeasurementType (const id_type& id,
                                         ::std::unique_ptr< Status_type > Status,
                                         ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    HeightCharacteristicMeasurementType::
    HeightCharacteristicMeasurementType (const HeightCharacteristicMeasurementType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    HeightCharacteristicMeasurementType::
    HeightCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    HeightCharacteristicMeasurementType* HeightCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicMeasurementType (*this, f, c);
    }

    HeightCharacteristicMeasurementType::
    ~HeightCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HeightCharacteristicMeasurementType >
    _xsd_HeightCharacteristicMeasurementType_type_factory_init (
      L"HeightCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // DepthCharacteristicItemType
    //

    DepthCharacteristicItemType::
    DepthCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const id_type& id,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const id_type& id,
                                 ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const DepthCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DepthCharacteristicItemType* DepthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicItemType (*this, f, c);
    }

    DepthCharacteristicItemType::
    ~DepthCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DepthCharacteristicItemType >
    _xsd_DepthCharacteristicItemType_type_factory_init (
      L"DepthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // DepthCharacteristicDefinitionType
    //

    DepthCharacteristicDefinitionType::
    DepthCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    DepthCharacteristicDefinitionType::
    DepthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    DepthCharacteristicDefinitionType::
    DepthCharacteristicDefinitionType (const DepthCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    DepthCharacteristicDefinitionType::
    DepthCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    DepthCharacteristicDefinitionType* DepthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicDefinitionType (*this, f, c);
    }

    DepthCharacteristicDefinitionType::
    ~DepthCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DepthCharacteristicDefinitionType >
    _xsd_DepthCharacteristicDefinitionType_type_factory_init (
      L"DepthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // DepthCharacteristicNominalType
    //

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType (const DepthCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    DepthCharacteristicNominalType* DepthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicNominalType (*this, f, c);
    }

    DepthCharacteristicNominalType::
    ~DepthCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DepthCharacteristicNominalType >
    _xsd_DepthCharacteristicNominalType_type_factory_init (
      L"DepthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // DepthCharacteristicMeasurementType
    //

    DepthCharacteristicMeasurementType::
    DepthCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    DepthCharacteristicMeasurementType::
    DepthCharacteristicMeasurementType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    DepthCharacteristicMeasurementType::
    DepthCharacteristicMeasurementType (const id_type& id,
                                        ::std::unique_ptr< Status_type > Status,
                                        ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    DepthCharacteristicMeasurementType::
    DepthCharacteristicMeasurementType (const DepthCharacteristicMeasurementType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    DepthCharacteristicMeasurementType::
    DepthCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    DepthCharacteristicMeasurementType* DepthCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicMeasurementType (*this, f, c);
    }

    DepthCharacteristicMeasurementType::
    ~DepthCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DepthCharacteristicMeasurementType >
    _xsd_DepthCharacteristicMeasurementType_type_factory_init (
      L"DepthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ThicknessCharacteristicItemType
    //

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const ThicknessCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicItemType* ThicknessCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicItemType (*this, f, c);
    }

    ThicknessCharacteristicItemType::
    ~ThicknessCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThicknessCharacteristicItemType >
    _xsd_ThicknessCharacteristicItemType_type_factory_init (
      L"ThicknessCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ThicknessCharacteristicDefinitionType
    //

    ThicknessCharacteristicDefinitionType::
    ThicknessCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    ThicknessCharacteristicDefinitionType::
    ThicknessCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    ThicknessCharacteristicDefinitionType::
    ThicknessCharacteristicDefinitionType (const ThicknessCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicDefinitionType::
    ThicknessCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicDefinitionType* ThicknessCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicDefinitionType (*this, f, c);
    }

    ThicknessCharacteristicDefinitionType::
    ~ThicknessCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThicknessCharacteristicDefinitionType >
    _xsd_ThicknessCharacteristicDefinitionType_type_factory_init (
      L"ThicknessCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ThicknessCharacteristicNominalType
    //

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType (const ThicknessCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicNominalType* ThicknessCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicNominalType (*this, f, c);
    }

    ThicknessCharacteristicNominalType::
    ~ThicknessCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThicknessCharacteristicNominalType >
    _xsd_ThicknessCharacteristicNominalType_type_factory_init (
      L"ThicknessCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ThicknessCharacteristicMeasurementType
    //

    ThicknessCharacteristicMeasurementType::
    ThicknessCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    ThicknessCharacteristicMeasurementType::
    ThicknessCharacteristicMeasurementType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    ThicknessCharacteristicMeasurementType::
    ThicknessCharacteristicMeasurementType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    ThicknessCharacteristicMeasurementType::
    ThicknessCharacteristicMeasurementType (const ThicknessCharacteristicMeasurementType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicMeasurementType::
    ThicknessCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicMeasurementType* ThicknessCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicMeasurementType (*this, f, c);
    }

    ThicknessCharacteristicMeasurementType::
    ~ThicknessCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThicknessCharacteristicMeasurementType >
    _xsd_ThicknessCharacteristicMeasurementType_type_factory_init (
      L"ThicknessCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SquareCharacteristicItemType
    //

    SquareCharacteristicItemType::
    SquareCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const id_type& id,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const id_type& id,
                                  ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const SquareCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    SquareCharacteristicItemType* SquareCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicItemType (*this, f, c);
    }

    SquareCharacteristicItemType::
    ~SquareCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SquareCharacteristicItemType >
    _xsd_SquareCharacteristicItemType_type_factory_init (
      L"SquareCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SquareCharacteristicDefinitionType
    //

    SquareCharacteristicDefinitionType::
    SquareCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    SquareCharacteristicDefinitionType::
    SquareCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    SquareCharacteristicDefinitionType::
    SquareCharacteristicDefinitionType (const SquareCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    SquareCharacteristicDefinitionType::
    SquareCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    SquareCharacteristicDefinitionType* SquareCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicDefinitionType (*this, f, c);
    }

    SquareCharacteristicDefinitionType::
    ~SquareCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SquareCharacteristicDefinitionType >
    _xsd_SquareCharacteristicDefinitionType_type_factory_init (
      L"SquareCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // SquareCharacteristicNominalType
    //

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType (const SquareCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    SquareCharacteristicNominalType* SquareCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicNominalType (*this, f, c);
    }

    SquareCharacteristicNominalType::
    ~SquareCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SquareCharacteristicNominalType >
    _xsd_SquareCharacteristicNominalType_type_factory_init (
      L"SquareCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SquareCharacteristicMeasurementType
    //

    SquareCharacteristicMeasurementType::
    SquareCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    SquareCharacteristicMeasurementType::
    SquareCharacteristicMeasurementType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    SquareCharacteristicMeasurementType::
    SquareCharacteristicMeasurementType (const id_type& id,
                                         ::std::unique_ptr< Status_type > Status,
                                         ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    SquareCharacteristicMeasurementType::
    SquareCharacteristicMeasurementType (const SquareCharacteristicMeasurementType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    SquareCharacteristicMeasurementType::
    SquareCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    SquareCharacteristicMeasurementType* SquareCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicMeasurementType (*this, f, c);
    }

    SquareCharacteristicMeasurementType::
    ~SquareCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SquareCharacteristicMeasurementType >
    _xsd_SquareCharacteristicMeasurementType_type_factory_init (
      L"SquareCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceFromCharacteristicItemType
    //

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const DistanceFromCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DistanceFromCharacteristicItemType* DistanceFromCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicItemType (*this, f, c);
    }

    DistanceFromCharacteristicItemType::
    ~DistanceFromCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceFromCharacteristicItemType >
    _xsd_DistanceFromCharacteristicItemType_type_factory_init (
      L"DistanceFromCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceFromCharacteristicDefinitionType
    //

    DistanceFromCharacteristicDefinitionType::
    DistanceFromCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    DistanceFromCharacteristicDefinitionType::
    DistanceFromCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    DistanceFromCharacteristicDefinitionType::
    DistanceFromCharacteristicDefinitionType (const DistanceFromCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    DistanceFromCharacteristicDefinitionType::
    DistanceFromCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    DistanceFromCharacteristicDefinitionType* DistanceFromCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicDefinitionType (*this, f, c);
    }

    DistanceFromCharacteristicDefinitionType::
    ~DistanceFromCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceFromCharacteristicDefinitionType >
    _xsd_DistanceFromCharacteristicDefinitionType_type_factory_init (
      L"DistanceFromCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceFromCharacteristicNominalType
    //

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
    }

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                           const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
    }

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                           const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId)),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
    }

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType (const DistanceFromCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c),
      OriginReference_ (x.OriginReference_, f, this),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this)
    {
    }

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      OriginReference_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void DistanceFromCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // OriginReference
        //
        if (n.name () == L"OriginReference" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OriginReference_type > r (
            OriginReference_traits::create (i, f, this));

          if (!this->OriginReference_)
          {
            this->OriginReference_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == L"AnalysisMode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == L"MeasurementDirective" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == L"CoordinateSystemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AnalysisMode",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    DistanceFromCharacteristicNominalType* DistanceFromCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicNominalType (*this, f, c);
    }

    DistanceFromCharacteristicNominalType& DistanceFromCharacteristicNominalType::
    operator= (const DistanceFromCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicNominalBaseType& > (*this) = x;
        this->OriginReference_ = x.OriginReference_;
        this->AnalysisVector_ = x.AnalysisVector_;
        this->AnalysisMode_ = x.AnalysisMode_;
        this->MeasurementDirective_ = x.MeasurementDirective_;
        this->CoordinateSystemId_ = x.CoordinateSystemId_;
      }

      return *this;
    }

    DistanceFromCharacteristicNominalType::
    ~DistanceFromCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceFromCharacteristicNominalType >
    _xsd_DistanceFromCharacteristicNominalType_type_factory_init (
      L"DistanceFromCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceFromCharacteristicMeasurementType
    //

    DistanceFromCharacteristicMeasurementType::
    DistanceFromCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (),
      AnalysisVector_ (this)
    {
    }

    DistanceFromCharacteristicMeasurementType::
    DistanceFromCharacteristicMeasurementType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId),
      AnalysisVector_ (this)
    {
    }

    DistanceFromCharacteristicMeasurementType::
    DistanceFromCharacteristicMeasurementType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId)),
      AnalysisVector_ (this)
    {
    }

    DistanceFromCharacteristicMeasurementType::
    DistanceFromCharacteristicMeasurementType (const DistanceFromCharacteristicMeasurementType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this)
    {
    }

    DistanceFromCharacteristicMeasurementType::
    DistanceFromCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void DistanceFromCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    DistanceFromCharacteristicMeasurementType* DistanceFromCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicMeasurementType (*this, f, c);
    }

    DistanceFromCharacteristicMeasurementType& DistanceFromCharacteristicMeasurementType::
    operator= (const DistanceFromCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (*this) = x;
        this->AnalysisVector_ = x.AnalysisVector_;
      }

      return *this;
    }

    DistanceFromCharacteristicMeasurementType::
    ~DistanceFromCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceFromCharacteristicMeasurementType >
    _xsd_DistanceFromCharacteristicMeasurementType_type_factory_init (
      L"DistanceFromCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceBetweenCharacteristicItemType
    //

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const DistanceBetweenCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DistanceBetweenCharacteristicItemType* DistanceBetweenCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicItemType (*this, f, c);
    }

    DistanceBetweenCharacteristicItemType::
    ~DistanceBetweenCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceBetweenCharacteristicItemType >
    _xsd_DistanceBetweenCharacteristicItemType_type_factory_init (
      L"DistanceBetweenCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceBetweenCharacteristicDefinitionType
    //

    DistanceBetweenCharacteristicDefinitionType::
    DistanceBetweenCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    DistanceBetweenCharacteristicDefinitionType::
    DistanceBetweenCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    DistanceBetweenCharacteristicDefinitionType::
    DistanceBetweenCharacteristicDefinitionType (const DistanceBetweenCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    DistanceBetweenCharacteristicDefinitionType::
    DistanceBetweenCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    DistanceBetweenCharacteristicDefinitionType* DistanceBetweenCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicDefinitionType (*this, f, c);
    }

    DistanceBetweenCharacteristicDefinitionType::
    ~DistanceBetweenCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceBetweenCharacteristicDefinitionType >
    _xsd_DistanceBetweenCharacteristicDefinitionType_type_factory_init (
      L"DistanceBetweenCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceBetweenCharacteristicNominalType
    //

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
    }

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                              const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
    }

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                              const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId)),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (AnalysisMode, this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
    }

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType (const DistanceBetweenCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c),
      FeatureNominalPairs_ (x.FeatureNominalPairs_, f, this),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this)
    {
    }

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      FeatureNominalPairs_ (this),
      AnalysisVector_ (this),
      AnalysisMode_ (this),
      MeasurementDirective_ (this),
      CoordinateSystemId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void DistanceBetweenCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // FeatureNominalPairs
        //
        if (n.name () == L"FeatureNominalPairs" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureNominalPairs_type > r (
            FeatureNominalPairs_traits::create (i, f, this));

          if (!this->FeatureNominalPairs_)
          {
            this->FeatureNominalPairs_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == L"AnalysisMode" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (::std::move (r));
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == L"MeasurementDirective" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (::std::move (r));
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == L"CoordinateSystemId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AnalysisMode",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    DistanceBetweenCharacteristicNominalType* DistanceBetweenCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicNominalType (*this, f, c);
    }

    DistanceBetweenCharacteristicNominalType& DistanceBetweenCharacteristicNominalType::
    operator= (const DistanceBetweenCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicNominalBaseType& > (*this) = x;
        this->FeatureNominalPairs_ = x.FeatureNominalPairs_;
        this->AnalysisVector_ = x.AnalysisVector_;
        this->AnalysisMode_ = x.AnalysisMode_;
        this->MeasurementDirective_ = x.MeasurementDirective_;
        this->CoordinateSystemId_ = x.CoordinateSystemId_;
      }

      return *this;
    }

    DistanceBetweenCharacteristicNominalType::
    ~DistanceBetweenCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceBetweenCharacteristicNominalType >
    _xsd_DistanceBetweenCharacteristicNominalType_type_factory_init (
      L"DistanceBetweenCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // DistanceBetweenCharacteristicMeasurementType
    //

    DistanceBetweenCharacteristicMeasurementType::
    DistanceBetweenCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (),
      AnalysisVector_ (this)
    {
    }

    DistanceBetweenCharacteristicMeasurementType::
    DistanceBetweenCharacteristicMeasurementType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId),
      AnalysisVector_ (this)
    {
    }

    DistanceBetweenCharacteristicMeasurementType::
    DistanceBetweenCharacteristicMeasurementType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId)),
      AnalysisVector_ (this)
    {
    }

    DistanceBetweenCharacteristicMeasurementType::
    DistanceBetweenCharacteristicMeasurementType (const DistanceBetweenCharacteristicMeasurementType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this)
    {
    }

    DistanceBetweenCharacteristicMeasurementType::
    DistanceBetweenCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void DistanceBetweenCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AnalysisVector
        //
        if (n.name () == L"AnalysisVector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    DistanceBetweenCharacteristicMeasurementType* DistanceBetweenCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicMeasurementType (*this, f, c);
    }

    DistanceBetweenCharacteristicMeasurementType& DistanceBetweenCharacteristicMeasurementType::
    operator= (const DistanceBetweenCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (*this) = x;
        this->AnalysisVector_ = x.AnalysisVector_;
      }

      return *this;
    }

    DistanceBetweenCharacteristicMeasurementType::
    ~DistanceBetweenCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DistanceBetweenCharacteristicMeasurementType >
    _xsd_DistanceBetweenCharacteristicMeasurementType_type_factory_init (
      L"DistanceBetweenCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // RadiusCharacteristicItemType
    //

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const id_type& id,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const id_type& id,
                                  ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const RadiusCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    RadiusCharacteristicItemType* RadiusCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicItemType (*this, f, c);
    }

    RadiusCharacteristicItemType::
    ~RadiusCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RadiusCharacteristicItemType >
    _xsd_RadiusCharacteristicItemType_type_factory_init (
      L"RadiusCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // RadiusCharacteristicDefinitionType
    //

    RadiusCharacteristicDefinitionType::
    RadiusCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (),
      ControlledRadius_ (this)
    {
    }

    RadiusCharacteristicDefinitionType::
    RadiusCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id),
      ControlledRadius_ (this)
    {
    }

    RadiusCharacteristicDefinitionType::
    RadiusCharacteristicDefinitionType (const RadiusCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c),
      ControlledRadius_ (x.ControlledRadius_, f, this)
    {
    }

    RadiusCharacteristicDefinitionType::
    RadiusCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ControlledRadius_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void RadiusCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ControlledRadius
        //
        if (n.name () == L"ControlledRadius" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->ControlledRadius_)
          {
            this->ControlledRadius_.set (ControlledRadius_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    RadiusCharacteristicDefinitionType* RadiusCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicDefinitionType (*this, f, c);
    }

    RadiusCharacteristicDefinitionType& RadiusCharacteristicDefinitionType::
    operator= (const RadiusCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (*this) = x;
        this->ControlledRadius_ = x.ControlledRadius_;
      }

      return *this;
    }

    RadiusCharacteristicDefinitionType::
    ~RadiusCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RadiusCharacteristicDefinitionType >
    _xsd_RadiusCharacteristicDefinitionType_type_factory_init (
      L"RadiusCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // RadiusCharacteristicNominalType
    //

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType (const RadiusCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    RadiusCharacteristicNominalType* RadiusCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicNominalType (*this, f, c);
    }

    RadiusCharacteristicNominalType::
    ~RadiusCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RadiusCharacteristicNominalType >
    _xsd_RadiusCharacteristicNominalType_type_factory_init (
      L"RadiusCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // RadiusCharacteristicMeasurementType
    //

    RadiusCharacteristicMeasurementType::
    RadiusCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    RadiusCharacteristicMeasurementType::
    RadiusCharacteristicMeasurementType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    RadiusCharacteristicMeasurementType::
    RadiusCharacteristicMeasurementType (const id_type& id,
                                         ::std::unique_ptr< Status_type > Status,
                                         ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    RadiusCharacteristicMeasurementType::
    RadiusCharacteristicMeasurementType (const RadiusCharacteristicMeasurementType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    RadiusCharacteristicMeasurementType::
    RadiusCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    RadiusCharacteristicMeasurementType* RadiusCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicMeasurementType (*this, f, c);
    }

    RadiusCharacteristicMeasurementType::
    ~RadiusCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RadiusCharacteristicMeasurementType >
    _xsd_RadiusCharacteristicMeasurementType_type_factory_init (
      L"RadiusCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalRadiusCharacteristicItemType
    //

    SphericalRadiusCharacteristicItemType::
    SphericalRadiusCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    SphericalRadiusCharacteristicItemType::
    SphericalRadiusCharacteristicItemType (const id_type& id,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    SphericalRadiusCharacteristicItemType::
    SphericalRadiusCharacteristicItemType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    SphericalRadiusCharacteristicItemType::
    SphericalRadiusCharacteristicItemType (const SphericalRadiusCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    SphericalRadiusCharacteristicItemType::
    SphericalRadiusCharacteristicItemType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    SphericalRadiusCharacteristicItemType* SphericalRadiusCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalRadiusCharacteristicItemType (*this, f, c);
    }

    SphericalRadiusCharacteristicItemType::
    ~SphericalRadiusCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalRadiusCharacteristicItemType >
    _xsd_SphericalRadiusCharacteristicItemType_type_factory_init (
      L"SphericalRadiusCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalRadiusCharacteristicDefinitionType
    //

    SphericalRadiusCharacteristicDefinitionType::
    SphericalRadiusCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    SphericalRadiusCharacteristicDefinitionType::
    SphericalRadiusCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    SphericalRadiusCharacteristicDefinitionType::
    SphericalRadiusCharacteristicDefinitionType (const SphericalRadiusCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    SphericalRadiusCharacteristicDefinitionType::
    SphericalRadiusCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    SphericalRadiusCharacteristicDefinitionType* SphericalRadiusCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalRadiusCharacteristicDefinitionType (*this, f, c);
    }

    SphericalRadiusCharacteristicDefinitionType::
    ~SphericalRadiusCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalRadiusCharacteristicDefinitionType >
    _xsd_SphericalRadiusCharacteristicDefinitionType_type_factory_init (
      L"SphericalRadiusCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalRadiusCharacteristicNominalType
    //

    SphericalRadiusCharacteristicNominalType::
    SphericalRadiusCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    SphericalRadiusCharacteristicNominalType::
    SphericalRadiusCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    SphericalRadiusCharacteristicNominalType::
    SphericalRadiusCharacteristicNominalType (const id_type& id,
                                              ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    SphericalRadiusCharacteristicNominalType::
    SphericalRadiusCharacteristicNominalType (const SphericalRadiusCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    SphericalRadiusCharacteristicNominalType::
    SphericalRadiusCharacteristicNominalType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    SphericalRadiusCharacteristicNominalType* SphericalRadiusCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalRadiusCharacteristicNominalType (*this, f, c);
    }

    SphericalRadiusCharacteristicNominalType::
    ~SphericalRadiusCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalRadiusCharacteristicNominalType >
    _xsd_SphericalRadiusCharacteristicNominalType_type_factory_init (
      L"SphericalRadiusCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SphericalRadiusCharacteristicMeasurementType
    //

    SphericalRadiusCharacteristicMeasurementType::
    SphericalRadiusCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    SphericalRadiusCharacteristicMeasurementType::
    SphericalRadiusCharacteristicMeasurementType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    SphericalRadiusCharacteristicMeasurementType::
    SphericalRadiusCharacteristicMeasurementType (const id_type& id,
                                                  ::std::unique_ptr< Status_type > Status,
                                                  ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    SphericalRadiusCharacteristicMeasurementType::
    SphericalRadiusCharacteristicMeasurementType (const SphericalRadiusCharacteristicMeasurementType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    SphericalRadiusCharacteristicMeasurementType::
    SphericalRadiusCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    SphericalRadiusCharacteristicMeasurementType* SphericalRadiusCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SphericalRadiusCharacteristicMeasurementType (*this, f, c);
    }

    SphericalRadiusCharacteristicMeasurementType::
    ~SphericalRadiusCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SphericalRadiusCharacteristicMeasurementType >
    _xsd_SphericalRadiusCharacteristicMeasurementType_type_factory_init (
      L"SphericalRadiusCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ChordCharacteristicItemType
    //

    ChordCharacteristicItemType::
    ChordCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const id_type& id,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const id_type& id,
                                 ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const ChordCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    ChordCharacteristicItemType* ChordCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicItemType (*this, f, c);
    }

    ChordCharacteristicItemType::
    ~ChordCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ChordCharacteristicItemType >
    _xsd_ChordCharacteristicItemType_type_factory_init (
      L"ChordCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ChordCharacteristicDefinitionType
    //

    ChordCharacteristicDefinitionType::
    ChordCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    ChordCharacteristicDefinitionType::
    ChordCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    ChordCharacteristicDefinitionType::
    ChordCharacteristicDefinitionType (const ChordCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    ChordCharacteristicDefinitionType::
    ChordCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    ChordCharacteristicDefinitionType* ChordCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicDefinitionType (*this, f, c);
    }

    ChordCharacteristicDefinitionType::
    ~ChordCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ChordCharacteristicDefinitionType >
    _xsd_ChordCharacteristicDefinitionType_type_factory_init (
      L"ChordCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ChordCharacteristicNominalType
    //

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType ()
    {
    }

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType (const ChordCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    ChordCharacteristicNominalType* ChordCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicNominalType (*this, f, c);
    }

    ChordCharacteristicNominalType::
    ~ChordCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ChordCharacteristicNominalType >
    _xsd_ChordCharacteristicNominalType_type_factory_init (
      L"ChordCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ChordCharacteristicMeasurementType
    //

    ChordCharacteristicMeasurementType::
    ChordCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType ()
    {
    }

    ChordCharacteristicMeasurementType::
    ChordCharacteristicMeasurementType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    ChordCharacteristicMeasurementType::
    ChordCharacteristicMeasurementType (const id_type& id,
                                        ::std::unique_ptr< Status_type > Status,
                                        ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    ChordCharacteristicMeasurementType::
    ChordCharacteristicMeasurementType (const ChordCharacteristicMeasurementType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    ChordCharacteristicMeasurementType::
    ChordCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    ChordCharacteristicMeasurementType* ChordCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicMeasurementType (*this, f, c);
    }

    ChordCharacteristicMeasurementType::
    ~ChordCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ChordCharacteristicMeasurementType >
    _xsd_ChordCharacteristicMeasurementType_type_factory_init (
      L"ChordCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicalTaperCharacteristicItemType
    //

    ConicalTaperCharacteristicItemType::
    ConicalTaperCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    ConicalTaperCharacteristicItemType::
    ConicalTaperCharacteristicItemType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    ConicalTaperCharacteristicItemType::
    ConicalTaperCharacteristicItemType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    ConicalTaperCharacteristicItemType::
    ConicalTaperCharacteristicItemType (const ConicalTaperCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    ConicalTaperCharacteristicItemType::
    ConicalTaperCharacteristicItemType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    ConicalTaperCharacteristicItemType* ConicalTaperCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicalTaperCharacteristicItemType (*this, f, c);
    }

    ConicalTaperCharacteristicItemType::
    ~ConicalTaperCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicalTaperCharacteristicItemType >
    _xsd_ConicalTaperCharacteristicItemType_type_factory_init (
      L"ConicalTaperCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicalTaperCharacteristicDefinitionType
    //

    ConicalTaperCharacteristicDefinitionType::
    ConicalTaperCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    ConicalTaperCharacteristicDefinitionType::
    ConicalTaperCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    ConicalTaperCharacteristicDefinitionType::
    ConicalTaperCharacteristicDefinitionType (const ConicalTaperCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    ConicalTaperCharacteristicDefinitionType::
    ConicalTaperCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    ConicalTaperCharacteristicDefinitionType* ConicalTaperCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicalTaperCharacteristicDefinitionType (*this, f, c);
    }

    ConicalTaperCharacteristicDefinitionType::
    ~ConicalTaperCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicalTaperCharacteristicDefinitionType >
    _xsd_ConicalTaperCharacteristicDefinitionType_type_factory_init (
      L"ConicalTaperCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicalTaperCharacteristicNominalType
    //

    ConicalTaperCharacteristicNominalType::
    ConicalTaperCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (),
      Distance_ (this)
    {
    }

    ConicalTaperCharacteristicNominalType::
    ConicalTaperCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                           const Distance_type& Distance)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      Distance_ (Distance, this)
    {
    }

    ConicalTaperCharacteristicNominalType::
    ConicalTaperCharacteristicNominalType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                           ::std::unique_ptr< Distance_type > Distance)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId)),
      Distance_ (std::move (Distance), this)
    {
    }

    ConicalTaperCharacteristicNominalType::
    ConicalTaperCharacteristicNominalType (const ConicalTaperCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c),
      Distance_ (x.Distance_, f, this)
    {
    }

    ConicalTaperCharacteristicNominalType::
    ConicalTaperCharacteristicNominalType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      Distance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ConicalTaperCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Distance
        //
        if (n.name () == L"Distance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Distance_type > r (
            Distance_traits::create (i, f, this));

          if (!Distance_.present ())
          {
            this->Distance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Distance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Distance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ConicalTaperCharacteristicNominalType* ConicalTaperCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicalTaperCharacteristicNominalType (*this, f, c);
    }

    ConicalTaperCharacteristicNominalType& ConicalTaperCharacteristicNominalType::
    operator= (const ConicalTaperCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicNominalBaseType& > (*this) = x;
        this->Distance_ = x.Distance_;
      }

      return *this;
    }

    ConicalTaperCharacteristicNominalType::
    ~ConicalTaperCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicalTaperCharacteristicNominalType >
    _xsd_ConicalTaperCharacteristicNominalType_type_factory_init (
      L"ConicalTaperCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ConicalTaperCharacteristicMeasurementType
    //

    ConicalTaperCharacteristicMeasurementType::
    ConicalTaperCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (),
      Distance_ (this)
    {
    }

    ConicalTaperCharacteristicMeasurementType::
    ConicalTaperCharacteristicMeasurementType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId),
      Distance_ (this)
    {
    }

    ConicalTaperCharacteristicMeasurementType::
    ConicalTaperCharacteristicMeasurementType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId)),
      Distance_ (this)
    {
    }

    ConicalTaperCharacteristicMeasurementType::
    ConicalTaperCharacteristicMeasurementType (const ConicalTaperCharacteristicMeasurementType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c),
      Distance_ (x.Distance_, f, this)
    {
    }

    ConicalTaperCharacteristicMeasurementType::
    ConicalTaperCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Distance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ConicalTaperCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Distance
        //
        if (n.name () == L"Distance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Distance_type > r (
            Distance_traits::create (i, f, this));

          if (!this->Distance_)
          {
            this->Distance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ConicalTaperCharacteristicMeasurementType* ConicalTaperCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConicalTaperCharacteristicMeasurementType (*this, f, c);
    }

    ConicalTaperCharacteristicMeasurementType& ConicalTaperCharacteristicMeasurementType::
    operator= (const ConicalTaperCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (*this) = x;
        this->Distance_ = x.Distance_;
      }

      return *this;
    }

    ConicalTaperCharacteristicMeasurementType::
    ~ConicalTaperCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConicalTaperCharacteristicMeasurementType >
    _xsd_ConicalTaperCharacteristicMeasurementType_type_factory_init (
      L"ConicalTaperCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatTaperCharacteristicItemType
    //

    FlatTaperCharacteristicItemType::
    FlatTaperCharacteristicItemType ()
    : ::xsd::qif30::LinearCharacteristicItemBaseType ()
    {
    }

    FlatTaperCharacteristicItemType::
    FlatTaperCharacteristicItemType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    FlatTaperCharacteristicItemType::
    FlatTaperCharacteristicItemType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    FlatTaperCharacteristicItemType::
    FlatTaperCharacteristicItemType (const FlatTaperCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    FlatTaperCharacteristicItemType::
    FlatTaperCharacteristicItemType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    FlatTaperCharacteristicItemType* FlatTaperCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatTaperCharacteristicItemType (*this, f, c);
    }

    FlatTaperCharacteristicItemType::
    ~FlatTaperCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatTaperCharacteristicItemType >
    _xsd_FlatTaperCharacteristicItemType_type_factory_init (
      L"FlatTaperCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatTaperCharacteristicDefinitionType
    //

    FlatTaperCharacteristicDefinitionType::
    FlatTaperCharacteristicDefinitionType ()
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType ()
    {
    }

    FlatTaperCharacteristicDefinitionType::
    FlatTaperCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    FlatTaperCharacteristicDefinitionType::
    FlatTaperCharacteristicDefinitionType (const FlatTaperCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    FlatTaperCharacteristicDefinitionType::
    FlatTaperCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    FlatTaperCharacteristicDefinitionType* FlatTaperCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatTaperCharacteristicDefinitionType (*this, f, c);
    }

    FlatTaperCharacteristicDefinitionType::
    ~FlatTaperCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatTaperCharacteristicDefinitionType >
    _xsd_FlatTaperCharacteristicDefinitionType_type_factory_init (
      L"FlatTaperCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatTaperCharacteristicNominalType
    //

    FlatTaperCharacteristicNominalType::
    FlatTaperCharacteristicNominalType ()
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (),
      Distance_ (this)
    {
    }

    FlatTaperCharacteristicNominalType::
    FlatTaperCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                        const Distance_type& Distance)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      Distance_ (Distance, this)
    {
    }

    FlatTaperCharacteristicNominalType::
    FlatTaperCharacteristicNominalType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                        ::std::unique_ptr< Distance_type > Distance)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId)),
      Distance_ (std::move (Distance), this)
    {
    }

    FlatTaperCharacteristicNominalType::
    FlatTaperCharacteristicNominalType (const FlatTaperCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (x, f, c),
      Distance_ (x.Distance_, f, this)
    {
    }

    FlatTaperCharacteristicNominalType::
    FlatTaperCharacteristicNominalType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      Distance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FlatTaperCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Distance
        //
        if (n.name () == L"Distance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Distance_type > r (
            Distance_traits::create (i, f, this));

          if (!Distance_.present ())
          {
            this->Distance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Distance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Distance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    FlatTaperCharacteristicNominalType* FlatTaperCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatTaperCharacteristicNominalType (*this, f, c);
    }

    FlatTaperCharacteristicNominalType& FlatTaperCharacteristicNominalType::
    operator= (const FlatTaperCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicNominalBaseType& > (*this) = x;
        this->Distance_ = x.Distance_;
      }

      return *this;
    }

    FlatTaperCharacteristicNominalType::
    ~FlatTaperCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatTaperCharacteristicNominalType >
    _xsd_FlatTaperCharacteristicNominalType_type_factory_init (
      L"FlatTaperCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // FlatTaperCharacteristicMeasurementType
    //

    FlatTaperCharacteristicMeasurementType::
    FlatTaperCharacteristicMeasurementType ()
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (),
      Distance_ (this)
    {
    }

    FlatTaperCharacteristicMeasurementType::
    FlatTaperCharacteristicMeasurementType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId),
      Distance_ (this)
    {
    }

    FlatTaperCharacteristicMeasurementType::
    FlatTaperCharacteristicMeasurementType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId)),
      Distance_ (this)
    {
    }

    FlatTaperCharacteristicMeasurementType::
    FlatTaperCharacteristicMeasurementType (const FlatTaperCharacteristicMeasurementType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (x, f, c),
      Distance_ (x.Distance_, f, this)
    {
    }

    FlatTaperCharacteristicMeasurementType::
    FlatTaperCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LinearCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      Distance_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void FlatTaperCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LinearCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Distance
        //
        if (n.name () == L"Distance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Distance_type > r (
            Distance_traits::create (i, f, this));

          if (!this->Distance_)
          {
            this->Distance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    FlatTaperCharacteristicMeasurementType* FlatTaperCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatTaperCharacteristicMeasurementType (*this, f, c);
    }

    FlatTaperCharacteristicMeasurementType& FlatTaperCharacteristicMeasurementType::
    operator= (const FlatTaperCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (*this) = x;
        this->Distance_ = x.Distance_;
      }

      return *this;
    }

    FlatTaperCharacteristicMeasurementType::
    ~FlatTaperCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, FlatTaperCharacteristicMeasurementType >
    _xsd_FlatTaperCharacteristicMeasurementType_type_factory_init (
      L"FlatTaperCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // RunoutCharacteristicItemBaseType
    //

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType ()
    : ::xsd::qif30::GeometricCharacteristicItemBaseType ()
    {
    }

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         CharacteristicNominalId)
    {
    }

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         std::move (CharacteristicNominalId))
    {
    }

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const RunoutCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    RunoutCharacteristicItemBaseType::
    ~RunoutCharacteristicItemBaseType ()
    {
    }

    // RunoutCharacteristicDefinitionBaseType
    //

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
    }

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const id_type& id,
                                            const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
    }

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const id_type& id,
                                            ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
    }

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const RunoutCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this)
    {
    }

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      DatumReferenceFrameId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void RunoutCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == L"DatumReferenceFrameId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!this->DatumReferenceFrameId_)
          {
            this->DatumReferenceFrameId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    RunoutCharacteristicDefinitionBaseType& RunoutCharacteristicDefinitionBaseType::
    operator= (const RunoutCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->DatumReferenceFrameId_ = x.DatumReferenceFrameId_;
      }

      return *this;
    }

    RunoutCharacteristicDefinitionBaseType::
    ~RunoutCharacteristicDefinitionBaseType ()
    {
    }

    // RunoutCharacteristicNominalBaseType
    //

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType ()
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType ()
    {
    }

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            CharacteristicDefinitionId)
    {
    }

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            std::move (CharacteristicDefinitionId))
    {
    }

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType (const RunoutCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (x, f, c)
    {
    }

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (e, f, c)
    {
    }

    RunoutCharacteristicNominalBaseType::
    ~RunoutCharacteristicNominalBaseType ()
    {
    }

    // RunoutCharacteristicMeasurementBaseType
    //

    RunoutCharacteristicMeasurementBaseType::
    RunoutCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (),
      DatumsOk_ (this)
    {
    }

    RunoutCharacteristicMeasurementBaseType::
    RunoutCharacteristicMeasurementBaseType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                Status,
                                                                CharacteristicItemId),
      DatumsOk_ (this)
    {
    }

    RunoutCharacteristicMeasurementBaseType::
    RunoutCharacteristicMeasurementBaseType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                std::move (Status),
                                                                std::move (CharacteristicItemId)),
      DatumsOk_ (this)
    {
    }

    RunoutCharacteristicMeasurementBaseType::
    RunoutCharacteristicMeasurementBaseType (const RunoutCharacteristicMeasurementBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (x, f, c),
      DatumsOk_ (x.DatumsOk_, f, this)
    {
    }

    RunoutCharacteristicMeasurementBaseType::
    RunoutCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      DatumsOk_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void RunoutCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DatumsOk
        //
        if (n.name () == L"DatumsOk" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    RunoutCharacteristicMeasurementBaseType& RunoutCharacteristicMeasurementBaseType::
    operator= (const RunoutCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (*this) = x;
        this->DatumsOk_ = x.DatumsOk_;
      }

      return *this;
    }

    RunoutCharacteristicMeasurementBaseType::
    ~RunoutCharacteristicMeasurementBaseType ()
    {
    }

    // CircularRunoutCharacteristicItemType
    //

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType ()
    : ::xsd::qif30::RunoutCharacteristicItemBaseType ()
    {
    }

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const id_type& id,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const CircularRunoutCharacteristicItemType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (x, f, c)
    {
    }

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (e, f, c)
    {
    }

    CircularRunoutCharacteristicItemType* CircularRunoutCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicItemType (*this, f, c);
    }

    CircularRunoutCharacteristicItemType::
    ~CircularRunoutCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularRunoutCharacteristicItemType >
    _xsd_CircularRunoutCharacteristicItemType_type_factory_init (
      L"CircularRunoutCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // CircularRunoutCharacteristicDefinitionType
    //

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType ()
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType ()
    {
    }

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const id_type& id,
                                                const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue)
    {
    }

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const id_type& id,
                                                ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (id,
                                                            std::move (ToleranceValue))
    {
    }

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const CircularRunoutCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    CircularRunoutCharacteristicDefinitionType* CircularRunoutCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicDefinitionType (*this, f, c);
    }

    CircularRunoutCharacteristicDefinitionType::
    ~CircularRunoutCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularRunoutCharacteristicDefinitionType >
    _xsd_CircularRunoutCharacteristicDefinitionType_type_factory_init (
      L"CircularRunoutCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // CircularRunoutCharacteristicNominalType
    //

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType ()
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (),
      ZoneDirection_ (this),
      ProfileCurveId_ (this)
    {
    }

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      ZoneDirection_ (this),
      ProfileCurveId_ (this)
    {
    }

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId)),
      ZoneDirection_ (this),
      ProfileCurveId_ (this)
    {
    }

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType (const CircularRunoutCharacteristicNominalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (x, f, c),
      ZoneDirection_ (x.ZoneDirection_, f, this),
      ProfileCurveId_ (x.ProfileCurveId_, f, this)
    {
    }

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneDirection_ (this),
      ProfileCurveId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CircularRunoutCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::RunoutCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneDirection
        //
        if (n.name () == L"ZoneDirection" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneDirection_type > r (
            ZoneDirection_traits::create (i, f, this));

          if (!this->ZoneDirection_)
          {
            this->ZoneDirection_.set (::std::move (r));
            continue;
          }
        }

        // ProfileCurveId
        //
        if (n.name () == L"ProfileCurveId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProfileCurveId_type > r (
            ProfileCurveId_traits::create (i, f, this));

          if (!this->ProfileCurveId_)
          {
            this->ProfileCurveId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CircularRunoutCharacteristicNominalType* CircularRunoutCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicNominalType (*this, f, c);
    }

    CircularRunoutCharacteristicNominalType& CircularRunoutCharacteristicNominalType::
    operator= (const CircularRunoutCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::RunoutCharacteristicNominalBaseType& > (*this) = x;
        this->ZoneDirection_ = x.ZoneDirection_;
        this->ProfileCurveId_ = x.ProfileCurveId_;
      }

      return *this;
    }

    CircularRunoutCharacteristicNominalType::
    ~CircularRunoutCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularRunoutCharacteristicNominalType >
    _xsd_CircularRunoutCharacteristicNominalType_type_factory_init (
      L"CircularRunoutCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // CircularRunoutCharacteristicMeasurementType
    //

    CircularRunoutCharacteristicMeasurementType::
    CircularRunoutCharacteristicMeasurementType ()
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType ()
    {
    }

    CircularRunoutCharacteristicMeasurementType::
    CircularRunoutCharacteristicMeasurementType (const id_type& id,
                                                 const Status_type& Status,
                                                 const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    CircularRunoutCharacteristicMeasurementType::
    CircularRunoutCharacteristicMeasurementType (const id_type& id,
                                                 ::std::unique_ptr< Status_type > Status,
                                                 ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    CircularRunoutCharacteristicMeasurementType::
    CircularRunoutCharacteristicMeasurementType (const CircularRunoutCharacteristicMeasurementType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    CircularRunoutCharacteristicMeasurementType::
    CircularRunoutCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    CircularRunoutCharacteristicMeasurementType* CircularRunoutCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicMeasurementType (*this, f, c);
    }

    CircularRunoutCharacteristicMeasurementType::
    ~CircularRunoutCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CircularRunoutCharacteristicMeasurementType >
    _xsd_CircularRunoutCharacteristicMeasurementType_type_factory_init (
      L"CircularRunoutCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // TotalRunoutCharacteristicItemType
    //

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType ()
    : ::xsd::qif30::RunoutCharacteristicItemBaseType ()
    {
    }

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (id,
                                                      CharacteristicNominalId)
    {
    }

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (id,
                                                      std::move (CharacteristicNominalId))
    {
    }

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const TotalRunoutCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicItemBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicItemType* TotalRunoutCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicItemType (*this, f, c);
    }

    TotalRunoutCharacteristicItemType::
    ~TotalRunoutCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TotalRunoutCharacteristicItemType >
    _xsd_TotalRunoutCharacteristicItemType_type_factory_init (
      L"TotalRunoutCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // TotalRunoutCharacteristicDefinitionType
    //

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType ()
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType ()
    {
    }

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue)
    {
    }

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const id_type& id,
                                             ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (id,
                                                            std::move (ToleranceValue))
    {
    }

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const TotalRunoutCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicDefinitionType* TotalRunoutCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicDefinitionType (*this, f, c);
    }

    TotalRunoutCharacteristicDefinitionType::
    ~TotalRunoutCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TotalRunoutCharacteristicDefinitionType >
    _xsd_TotalRunoutCharacteristicDefinitionType_type_factory_init (
      L"TotalRunoutCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // TotalRunoutCharacteristicNominalType
    //

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType ()
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType ()
    {
    }

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType (const TotalRunoutCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicNominalBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicNominalType* TotalRunoutCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicNominalType (*this, f, c);
    }

    TotalRunoutCharacteristicNominalType::
    ~TotalRunoutCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TotalRunoutCharacteristicNominalType >
    _xsd_TotalRunoutCharacteristicNominalType_type_factory_init (
      L"TotalRunoutCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // TotalRunoutCharacteristicMeasurementType
    //

    TotalRunoutCharacteristicMeasurementType::
    TotalRunoutCharacteristicMeasurementType ()
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType ()
    {
    }

    TotalRunoutCharacteristicMeasurementType::
    TotalRunoutCharacteristicMeasurementType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    TotalRunoutCharacteristicMeasurementType::
    TotalRunoutCharacteristicMeasurementType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    TotalRunoutCharacteristicMeasurementType::
    TotalRunoutCharacteristicMeasurementType (const TotalRunoutCharacteristicMeasurementType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicMeasurementType::
    TotalRunoutCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::RunoutCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicMeasurementType* TotalRunoutCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicMeasurementType (*this, f, c);
    }

    TotalRunoutCharacteristicMeasurementType::
    ~TotalRunoutCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TotalRunoutCharacteristicMeasurementType >
    _xsd_TotalRunoutCharacteristicMeasurementType_type_factory_init (
      L"TotalRunoutCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // CoaxialityDiametricalZoneType
    //

    CoaxialityDiametricalZoneType::
    CoaxialityDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    CoaxialityDiametricalZoneType::
    CoaxialityDiametricalZoneType (const CoaxialityDiametricalZoneType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    CoaxialityDiametricalZoneType::
    CoaxialityDiametricalZoneType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    CoaxialityDiametricalZoneType::
    CoaxialityDiametricalZoneType (const xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    CoaxialityDiametricalZoneType::
    CoaxialityDiametricalZoneType (const ::std::wstring& s,
                                   const xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    CoaxialityDiametricalZoneType* CoaxialityDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoaxialityDiametricalZoneType (*this, f, c);
    }

    CoaxialityDiametricalZoneType::
    ~CoaxialityDiametricalZoneType ()
    {
    }

    // CoaxialityNonDiametricalZoneType
    //

    CoaxialityNonDiametricalZoneType::
    CoaxialityNonDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    CoaxialityNonDiametricalZoneType::
    CoaxialityNonDiametricalZoneType (const CoaxialityNonDiametricalZoneType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    CoaxialityNonDiametricalZoneType::
    CoaxialityNonDiametricalZoneType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    CoaxialityNonDiametricalZoneType::
    CoaxialityNonDiametricalZoneType (const xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    CoaxialityNonDiametricalZoneType::
    CoaxialityNonDiametricalZoneType (const ::std::wstring& s,
                                      const xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    CoaxialityNonDiametricalZoneType* CoaxialityNonDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoaxialityNonDiametricalZoneType (*this, f, c);
    }

    CoaxialityNonDiametricalZoneType::
    ~CoaxialityNonDiametricalZoneType ()
    {
    }

    // CoaxialityZoneShapeType
    //

    CoaxialityZoneShapeType::
    CoaxialityZoneShapeType ()
    : ::xml_schema::type (),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
    }

    CoaxialityZoneShapeType::
    CoaxialityZoneShapeType (const CoaxialityZoneShapeType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      NonDiametricalZone_ (x.NonDiametricalZone_, f, this)
    {
    }

    CoaxialityZoneShapeType::
    CoaxialityZoneShapeType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CoaxialityZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DiametricalZone
        //
        if (n.name () == L"DiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        // NonDiametricalZone
        //
        if (n.name () == L"NonDiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonDiametricalZone_type > r (
            NonDiametricalZone_traits::create (i, f, this));

          if (!this->NonDiametricalZone_)
          {
            this->NonDiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CoaxialityZoneShapeType* CoaxialityZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoaxialityZoneShapeType (*this, f, c);
    }

    CoaxialityZoneShapeType& CoaxialityZoneShapeType::
    operator= (const CoaxialityZoneShapeType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->DiametricalZone_ = x.DiametricalZone_;
        this->NonDiametricalZone_ = x.NonDiametricalZone_;
      }

      return *this;
    }

    CoaxialityZoneShapeType::
    ~CoaxialityZoneShapeType ()
    {
    }

    // CoaxialityCharacteristicItemType
    //

    CoaxialityCharacteristicItemType::
    CoaxialityCharacteristicItemType ()
    : ::xsd::qif30::LocationCharacteristicItemBaseType ()
    {
    }

    CoaxialityCharacteristicItemType::
    CoaxialityCharacteristicItemType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        CharacteristicNominalId)
    {
    }

    CoaxialityCharacteristicItemType::
    CoaxialityCharacteristicItemType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        std::move (CharacteristicNominalId))
    {
    }

    CoaxialityCharacteristicItemType::
    CoaxialityCharacteristicItemType (const CoaxialityCharacteristicItemType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (x, f, c)
    {
    }

    CoaxialityCharacteristicItemType::
    CoaxialityCharacteristicItemType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (e, f, c)
    {
    }

    CoaxialityCharacteristicItemType* CoaxialityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoaxialityCharacteristicItemType (*this, f, c);
    }

    CoaxialityCharacteristicItemType::
    ~CoaxialityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CoaxialityCharacteristicItemType >
    _xsd_CoaxialityCharacteristicItemType_type_factory_init (
      L"CoaxialityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // CoaxialityCharacteristicDefinitionType
    //

    CoaxialityCharacteristicDefinitionType::
    CoaxialityCharacteristicDefinitionType ()
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (),
      ZoneShape_ (this)
    {
    }

    CoaxialityCharacteristicDefinitionType::
    CoaxialityCharacteristicDefinitionType (const id_type& id,
                                            const ToleranceValue_type& ToleranceValue,
                                            const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              ToleranceValue),
      ZoneShape_ (ZoneShape, this)
    {
    }

    CoaxialityCharacteristicDefinitionType::
    CoaxialityCharacteristicDefinitionType (const id_type& id,
                                            ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                            ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              std::move (ToleranceValue)),
      ZoneShape_ (std::move (ZoneShape), this)
    {
    }

    CoaxialityCharacteristicDefinitionType::
    CoaxialityCharacteristicDefinitionType (const CoaxialityCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (x, f, c),
      ZoneShape_ (x.ZoneShape_, f, this)
    {
    }

    CoaxialityCharacteristicDefinitionType::
    CoaxialityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneShape_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CoaxialityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LocationCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneShape
        //
        if (n.name () == L"ZoneShape" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ZoneShape",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CoaxialityCharacteristicDefinitionType* CoaxialityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoaxialityCharacteristicDefinitionType (*this, f, c);
    }

    CoaxialityCharacteristicDefinitionType& CoaxialityCharacteristicDefinitionType::
    operator= (const CoaxialityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (*this) = x;
        this->ZoneShape_ = x.ZoneShape_;
      }

      return *this;
    }

    CoaxialityCharacteristicDefinitionType::
    ~CoaxialityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CoaxialityCharacteristicDefinitionType >
    _xsd_CoaxialityCharacteristicDefinitionType_type_factory_init (
      L"CoaxialityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // CoaxialityCharacteristicNominalType
    //

    CoaxialityCharacteristicNominalType::
    CoaxialityCharacteristicNominalType ()
    : ::xsd::qif30::LocationCharacteristicNominalBaseType ()
    {
    }

    CoaxialityCharacteristicNominalType::
    CoaxialityCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId)
    {
    }

    CoaxialityCharacteristicNominalType::
    CoaxialityCharacteristicNominalType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           std::move (CharacteristicDefinitionId))
    {
    }

    CoaxialityCharacteristicNominalType::
    CoaxialityCharacteristicNominalType (const CoaxialityCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (x, f, c)
    {
    }

    CoaxialityCharacteristicNominalType::
    CoaxialityCharacteristicNominalType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (e, f, c)
    {
    }

    CoaxialityCharacteristicNominalType* CoaxialityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoaxialityCharacteristicNominalType (*this, f, c);
    }

    CoaxialityCharacteristicNominalType::
    ~CoaxialityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CoaxialityCharacteristicNominalType >
    _xsd_CoaxialityCharacteristicNominalType_type_factory_init (
      L"CoaxialityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // CoaxialityCharacteristicMeasurementType
    //

    CoaxialityCharacteristicMeasurementType::
    CoaxialityCharacteristicMeasurementType ()
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType ()
    {
    }

    CoaxialityCharacteristicMeasurementType::
    CoaxialityCharacteristicMeasurementType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               Status,
                                                               CharacteristicItemId)
    {
    }

    CoaxialityCharacteristicMeasurementType::
    CoaxialityCharacteristicMeasurementType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               std::move (Status),
                                                               std::move (CharacteristicItemId))
    {
    }

    CoaxialityCharacteristicMeasurementType::
    CoaxialityCharacteristicMeasurementType (const CoaxialityCharacteristicMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    CoaxialityCharacteristicMeasurementType::
    CoaxialityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    CoaxialityCharacteristicMeasurementType* CoaxialityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoaxialityCharacteristicMeasurementType (*this, f, c);
    }

    CoaxialityCharacteristicMeasurementType::
    ~CoaxialityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CoaxialityCharacteristicMeasurementType >
    _xsd_CoaxialityCharacteristicMeasurementType_type_factory_init (
      L"CoaxialityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ConcentricitySphericalZoneType
    //

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType ()
    : ::xml_schema::type ()
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const ConcentricitySphericalZoneType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const ::std::wstring& s,
                                    const xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ConcentricitySphericalZoneType* ConcentricitySphericalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricitySphericalZoneType (*this, f, c);
    }

    ConcentricitySphericalZoneType::
    ~ConcentricitySphericalZoneType ()
    {
    }

    // ConcentricityDiametricalZoneType
    //

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const ConcentricityDiametricalZoneType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const ::std::wstring& s,
                                      const xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ConcentricityDiametricalZoneType* ConcentricityDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityDiametricalZoneType (*this, f, c);
    }

    ConcentricityDiametricalZoneType::
    ~ConcentricityDiametricalZoneType ()
    {
    }

    // ConcentricityNonDiametricalZoneType
    //

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const ConcentricityNonDiametricalZoneType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const ::std::wstring& s,
                                         const xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType* ConcentricityNonDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityNonDiametricalZoneType (*this, f, c);
    }

    ConcentricityNonDiametricalZoneType::
    ~ConcentricityNonDiametricalZoneType ()
    {
    }

    // ConcentricityZoneShapeType
    //

    ConcentricityZoneShapeType::
    ConcentricityZoneShapeType ()
    : ::xml_schema::type (),
      SphericalZone_ (this),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
    }

    ConcentricityZoneShapeType::
    ConcentricityZoneShapeType (const ConcentricityZoneShapeType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SphericalZone_ (x.SphericalZone_, f, this),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      NonDiametricalZone_ (x.NonDiametricalZone_, f, this)
    {
    }

    ConcentricityZoneShapeType::
    ConcentricityZoneShapeType (const xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SphericalZone_ (this),
      DiametricalZone_ (this),
      NonDiametricalZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ConcentricityZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SphericalZone
        //
        if (n.name () == L"SphericalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SphericalZone_type > r (
            SphericalZone_traits::create (i, f, this));

          if (!this->SphericalZone_)
          {
            this->SphericalZone_.set (::std::move (r));
            continue;
          }
        }

        // DiametricalZone
        //
        if (n.name () == L"DiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        // NonDiametricalZone
        //
        if (n.name () == L"NonDiametricalZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonDiametricalZone_type > r (
            NonDiametricalZone_traits::create (i, f, this));

          if (!this->NonDiametricalZone_)
          {
            this->NonDiametricalZone_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ConcentricityZoneShapeType* ConcentricityZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityZoneShapeType (*this, f, c);
    }

    ConcentricityZoneShapeType& ConcentricityZoneShapeType::
    operator= (const ConcentricityZoneShapeType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->SphericalZone_ = x.SphericalZone_;
        this->DiametricalZone_ = x.DiametricalZone_;
        this->NonDiametricalZone_ = x.NonDiametricalZone_;
      }

      return *this;
    }

    ConcentricityZoneShapeType::
    ~ConcentricityZoneShapeType ()
    {
    }

    // ConcentricityCharacteristicItemType
    //

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType ()
    : ::xsd::qif30::LocationCharacteristicItemBaseType ()
    {
    }

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const id_type& id,
                                         const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        CharacteristicNominalId)
    {
    }

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        std::move (CharacteristicNominalId))
    {
    }

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const ConcentricityCharacteristicItemType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (x, f, c)
    {
    }

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (e, f, c)
    {
    }

    ConcentricityCharacteristicItemType* ConcentricityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicItemType (*this, f, c);
    }

    ConcentricityCharacteristicItemType::
    ~ConcentricityCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConcentricityCharacteristicItemType >
    _xsd_ConcentricityCharacteristicItemType_type_factory_init (
      L"ConcentricityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ConcentricityCharacteristicDefinitionType
    //

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType ()
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (),
      ZoneShape_ (this)
    {
    }

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const id_type& id,
                                               const ToleranceValue_type& ToleranceValue,
                                               const ZoneShape_type& ZoneShape)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              ToleranceValue),
      ZoneShape_ (ZoneShape, this)
    {
    }

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const id_type& id,
                                               ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                               ::std::unique_ptr< ZoneShape_type > ZoneShape)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              std::move (ToleranceValue)),
      ZoneShape_ (std::move (ZoneShape), this)
    {
    }

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const ConcentricityCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (x, f, c),
      ZoneShape_ (x.ZoneShape_, f, this)
    {
    }

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneShape_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ConcentricityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LocationCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ZoneShape
        //
        if (n.name () == L"ZoneShape" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ZoneShape",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ConcentricityCharacteristicDefinitionType* ConcentricityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicDefinitionType (*this, f, c);
    }

    ConcentricityCharacteristicDefinitionType& ConcentricityCharacteristicDefinitionType::
    operator= (const ConcentricityCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (*this) = x;
        this->ZoneShape_ = x.ZoneShape_;
      }

      return *this;
    }

    ConcentricityCharacteristicDefinitionType::
    ~ConcentricityCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConcentricityCharacteristicDefinitionType >
    _xsd_ConcentricityCharacteristicDefinitionType_type_factory_init (
      L"ConcentricityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ConcentricityCharacteristicNominalType
    //

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType ()
    : ::xsd::qif30::LocationCharacteristicNominalBaseType ()
    {
    }

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType (const id_type& id,
                                            const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId)
    {
    }

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType (const id_type& id,
                                            ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           std::move (CharacteristicDefinitionId))
    {
    }

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType (const ConcentricityCharacteristicNominalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (x, f, c)
    {
    }

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (e, f, c)
    {
    }

    ConcentricityCharacteristicNominalType* ConcentricityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicNominalType (*this, f, c);
    }

    ConcentricityCharacteristicNominalType::
    ~ConcentricityCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConcentricityCharacteristicNominalType >
    _xsd_ConcentricityCharacteristicNominalType_type_factory_init (
      L"ConcentricityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ConcentricityCharacteristicMeasurementType
    //

    ConcentricityCharacteristicMeasurementType::
    ConcentricityCharacteristicMeasurementType ()
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType ()
    {
    }

    ConcentricityCharacteristicMeasurementType::
    ConcentricityCharacteristicMeasurementType (const id_type& id,
                                                const Status_type& Status,
                                                const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               Status,
                                                               CharacteristicItemId)
    {
    }

    ConcentricityCharacteristicMeasurementType::
    ConcentricityCharacteristicMeasurementType (const id_type& id,
                                                ::std::unique_ptr< Status_type > Status,
                                                ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               std::move (Status),
                                                               std::move (CharacteristicItemId))
    {
    }

    ConcentricityCharacteristicMeasurementType::
    ConcentricityCharacteristicMeasurementType (const ConcentricityCharacteristicMeasurementType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    ConcentricityCharacteristicMeasurementType::
    ConcentricityCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    ConcentricityCharacteristicMeasurementType* ConcentricityCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicMeasurementType (*this, f, c);
    }

    ConcentricityCharacteristicMeasurementType::
    ~ConcentricityCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConcentricityCharacteristicMeasurementType >
    _xsd_ConcentricityCharacteristicMeasurementType_type_factory_init (
      L"ConcentricityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SymmetryCharacteristicItemType
    //

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType ()
    : ::xsd::qif30::LocationCharacteristicItemBaseType ()
    {
    }

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        CharacteristicNominalId)
    {
    }

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (id,
                                                        std::move (CharacteristicNominalId))
    {
    }

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const SymmetryCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (x, f, c)
    {
    }

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicItemBaseType (e, f, c)
    {
    }

    SymmetryCharacteristicItemType* SymmetryCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicItemType (*this, f, c);
    }

    SymmetryCharacteristicItemType::
    ~SymmetryCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SymmetryCharacteristicItemType >
    _xsd_SymmetryCharacteristicItemType_type_factory_init (
      L"SymmetryCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SymmetryCharacteristicDefinitionType
    //

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType ()
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (),
      SecondCompositeSegmentSymmetryDefinition_ (this),
      ThirdCompositeSegmentSymmetryDefinition_ (this)
    {
    }

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const id_type& id,
                                          const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              ToleranceValue),
      SecondCompositeSegmentSymmetryDefinition_ (this),
      ThirdCompositeSegmentSymmetryDefinition_ (this)
    {
    }

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const id_type& id,
                                          ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (id,
                                                              std::move (ToleranceValue)),
      SecondCompositeSegmentSymmetryDefinition_ (this),
      ThirdCompositeSegmentSymmetryDefinition_ (this)
    {
    }

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const SymmetryCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (x, f, c),
      SecondCompositeSegmentSymmetryDefinition_ (x.SecondCompositeSegmentSymmetryDefinition_, f, this),
      ThirdCompositeSegmentSymmetryDefinition_ (x.ThirdCompositeSegmentSymmetryDefinition_, f, this)
    {
    }

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      SecondCompositeSegmentSymmetryDefinition_ (this),
      ThirdCompositeSegmentSymmetryDefinition_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SymmetryCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LocationCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SecondCompositeSegmentSymmetryDefinition
        //
        if (n.name () == L"SecondCompositeSegmentSymmetryDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondCompositeSegmentSymmetryDefinition_type > r (
            SecondCompositeSegmentSymmetryDefinition_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentSymmetryDefinition_)
          {
            this->SecondCompositeSegmentSymmetryDefinition_.set (::std::move (r));
            continue;
          }
        }

        // ThirdCompositeSegmentSymmetryDefinition
        //
        if (n.name () == L"ThirdCompositeSegmentSymmetryDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThirdCompositeSegmentSymmetryDefinition_type > r (
            ThirdCompositeSegmentSymmetryDefinition_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentSymmetryDefinition_)
          {
            this->ThirdCompositeSegmentSymmetryDefinition_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SymmetryCharacteristicDefinitionType* SymmetryCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicDefinitionType (*this, f, c);
    }

    SymmetryCharacteristicDefinitionType& SymmetryCharacteristicDefinitionType::
    operator= (const SymmetryCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (*this) = x;
        this->SecondCompositeSegmentSymmetryDefinition_ = x.SecondCompositeSegmentSymmetryDefinition_;
        this->ThirdCompositeSegmentSymmetryDefinition_ = x.ThirdCompositeSegmentSymmetryDefinition_;
      }

      return *this;
    }

    SymmetryCharacteristicDefinitionType::
    ~SymmetryCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SymmetryCharacteristicDefinitionType >
    _xsd_SymmetryCharacteristicDefinitionType_type_factory_init (
      L"SymmetryCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // SymmetryCharacteristicNominalType
    //

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType ()
    : ::xsd::qif30::LocationCharacteristicNominalBaseType ()
    {
    }

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId)
    {
    }

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (id,
                                                           std::move (CharacteristicDefinitionId))
    {
    }

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType (const SymmetryCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (x, f, c)
    {
    }

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicNominalBaseType (e, f, c)
    {
    }

    SymmetryCharacteristicNominalType* SymmetryCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicNominalType (*this, f, c);
    }

    SymmetryCharacteristicNominalType::
    ~SymmetryCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SymmetryCharacteristicNominalType >
    _xsd_SymmetryCharacteristicNominalType_type_factory_init (
      L"SymmetryCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SymmetryCharacteristicMeasurementType
    //

    SymmetryCharacteristicMeasurementType::
    SymmetryCharacteristicMeasurementType ()
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (),
      SecondCompositeSegmentSymmetryMeasurement_ (this),
      ThirdCompositeSegmentSymmetryMeasurement_ (this)
    {
    }

    SymmetryCharacteristicMeasurementType::
    SymmetryCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               Status,
                                                               CharacteristicItemId),
      SecondCompositeSegmentSymmetryMeasurement_ (this),
      ThirdCompositeSegmentSymmetryMeasurement_ (this)
    {
    }

    SymmetryCharacteristicMeasurementType::
    SymmetryCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (id,
                                                               std::move (Status),
                                                               std::move (CharacteristicItemId)),
      SecondCompositeSegmentSymmetryMeasurement_ (this),
      ThirdCompositeSegmentSymmetryMeasurement_ (this)
    {
    }

    SymmetryCharacteristicMeasurementType::
    SymmetryCharacteristicMeasurementType (const SymmetryCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (x, f, c),
      SecondCompositeSegmentSymmetryMeasurement_ (x.SecondCompositeSegmentSymmetryMeasurement_, f, this),
      ThirdCompositeSegmentSymmetryMeasurement_ (x.ThirdCompositeSegmentSymmetryMeasurement_, f, this)
    {
    }

    SymmetryCharacteristicMeasurementType::
    SymmetryCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::LocationCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      SecondCompositeSegmentSymmetryMeasurement_ (this),
      ThirdCompositeSegmentSymmetryMeasurement_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SymmetryCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::LocationCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SecondCompositeSegmentSymmetryMeasurement
        //
        if (n.name () == L"SecondCompositeSegmentSymmetryMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondCompositeSegmentSymmetryMeasurement_type > r (
            SecondCompositeSegmentSymmetryMeasurement_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentSymmetryMeasurement_)
          {
            this->SecondCompositeSegmentSymmetryMeasurement_.set (::std::move (r));
            continue;
          }
        }

        // ThirdCompositeSegmentSymmetryMeasurement
        //
        if (n.name () == L"ThirdCompositeSegmentSymmetryMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThirdCompositeSegmentSymmetryMeasurement_type > r (
            ThirdCompositeSegmentSymmetryMeasurement_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentSymmetryMeasurement_)
          {
            this->ThirdCompositeSegmentSymmetryMeasurement_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SymmetryCharacteristicMeasurementType* SymmetryCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicMeasurementType (*this, f, c);
    }

    SymmetryCharacteristicMeasurementType& SymmetryCharacteristicMeasurementType::
    operator= (const SymmetryCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::LocationCharacteristicMeasurementBaseType& > (*this) = x;
        this->SecondCompositeSegmentSymmetryMeasurement_ = x.SecondCompositeSegmentSymmetryMeasurement_;
        this->ThirdCompositeSegmentSymmetryMeasurement_ = x.ThirdCompositeSegmentSymmetryMeasurement_;
      }

      return *this;
    }

    SymmetryCharacteristicMeasurementType::
    ~SymmetryCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SymmetryCharacteristicMeasurementType >
    _xsd_SymmetryCharacteristicMeasurementType_type_factory_init (
      L"SymmetryCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // ProfileCharacteristicItemBaseType
    //

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType ()
    : ::xsd::qif30::GeometricCharacteristicItemBaseType ()
    {
    }

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         CharacteristicNominalId)
    {
    }

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (id,
                                                         std::move (CharacteristicNominalId))
    {
    }

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const ProfileCharacteristicItemBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    ProfileCharacteristicItemBaseType::
    ~ProfileCharacteristicItemBaseType ()
    {
    }

    // ProfileCharacteristicDefinitionBaseType
    //

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      OuterDisposition_ (this),
      UnequallyDisposedZone_ (this),
      OffsetZone_ (this),
      VariableAngle_ (this),
      SecondCompositeSegmentProfileDefinition_ (this),
      ThirdCompositeSegmentProfileDefinition_ (this),
      FourthCompositeSegmentProfileDefinition_ (this),
      DatumReferenceFrameId_ (this),
      OrientationOnly_ (this)
    {
    }

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, this),
      ToleranceDualValue_ (this),
      OuterDisposition_ (this),
      UnequallyDisposedZone_ (this),
      OffsetZone_ (this),
      VariableAngle_ (this),
      SecondCompositeSegmentProfileDefinition_ (this),
      ThirdCompositeSegmentProfileDefinition_ (this),
      FourthCompositeSegmentProfileDefinition_ (this),
      DatumReferenceFrameId_ (this),
      OrientationOnly_ (this)
    {
    }

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const id_type& id,
                                             ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (std::move (ToleranceValue), this),
      ToleranceDualValue_ (this),
      OuterDisposition_ (this),
      UnequallyDisposedZone_ (this),
      OffsetZone_ (this),
      VariableAngle_ (this),
      SecondCompositeSegmentProfileDefinition_ (this),
      ThirdCompositeSegmentProfileDefinition_ (this),
      FourthCompositeSegmentProfileDefinition_ (this),
      DatumReferenceFrameId_ (this),
      OrientationOnly_ (this)
    {
    }

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const ProfileCharacteristicDefinitionBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceDualValue_ (x.ToleranceDualValue_, f, this),
      OuterDisposition_ (x.OuterDisposition_, f, this),
      UnequallyDisposedZone_ (x.UnequallyDisposedZone_, f, this),
      OffsetZone_ (x.OffsetZone_, f, this),
      VariableAngle_ (x.VariableAngle_, f, this),
      SecondCompositeSegmentProfileDefinition_ (x.SecondCompositeSegmentProfileDefinition_, f, this),
      ThirdCompositeSegmentProfileDefinition_ (x.ThirdCompositeSegmentProfileDefinition_, f, this),
      FourthCompositeSegmentProfileDefinition_ (x.FourthCompositeSegmentProfileDefinition_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this),
      OrientationOnly_ (x.OrientationOnly_, f, this)
    {
    }

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (this),
      ToleranceDualValue_ (this),
      OuterDisposition_ (this),
      UnequallyDisposedZone_ (this),
      OffsetZone_ (this),
      VariableAngle_ (this),
      SecondCompositeSegmentProfileDefinition_ (this),
      ThirdCompositeSegmentProfileDefinition_ (this),
      FourthCompositeSegmentProfileDefinition_ (this),
      DatumReferenceFrameId_ (this),
      OrientationOnly_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProfileCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToleranceValue
        //
        if (n.name () == L"ToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToleranceDualValue
        //
        if (n.name () == L"ToleranceDualValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToleranceDualValue_type > r (
            ToleranceDualValue_traits::create (i, f, this));

          if (!this->ToleranceDualValue_)
          {
            this->ToleranceDualValue_.set (::std::move (r));
            continue;
          }
        }

        // OuterDisposition
        //
        if (n.name () == L"OuterDisposition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OuterDisposition_type > r (
            OuterDisposition_traits::create (i, f, this));

          if (!this->OuterDisposition_)
          {
            this->OuterDisposition_.set (::std::move (r));
            continue;
          }
        }

        // UnequallyDisposedZone
        //
        if (n.name () == L"UnequallyDisposedZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< UnequallyDisposedZone_type > r (
            UnequallyDisposedZone_traits::create (i, f, this));

          if (!this->UnequallyDisposedZone_)
          {
            this->UnequallyDisposedZone_.set (::std::move (r));
            continue;
          }
        }

        // OffsetZone
        //
        if (n.name () == L"OffsetZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->OffsetZone_)
          {
            this->OffsetZone_.set (OffsetZone_traits::create (i, f, this));
            continue;
          }
        }

        // VariableAngle
        //
        if (n.name () == L"VariableAngle" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->VariableAngle_)
          {
            this->VariableAngle_.set (VariableAngle_traits::create (i, f, this));
            continue;
          }
        }

        // SecondCompositeSegmentProfileDefinition
        //
        if (n.name () == L"SecondCompositeSegmentProfileDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondCompositeSegmentProfileDefinition_type > r (
            SecondCompositeSegmentProfileDefinition_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentProfileDefinition_)
          {
            this->SecondCompositeSegmentProfileDefinition_.set (::std::move (r));
            continue;
          }
        }

        // ThirdCompositeSegmentProfileDefinition
        //
        if (n.name () == L"ThirdCompositeSegmentProfileDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThirdCompositeSegmentProfileDefinition_type > r (
            ThirdCompositeSegmentProfileDefinition_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentProfileDefinition_)
          {
            this->ThirdCompositeSegmentProfileDefinition_.set (::std::move (r));
            continue;
          }
        }

        // FourthCompositeSegmentProfileDefinition
        //
        if (n.name () == L"FourthCompositeSegmentProfileDefinition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FourthCompositeSegmentProfileDefinition_type > r (
            FourthCompositeSegmentProfileDefinition_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentProfileDefinition_)
          {
            this->FourthCompositeSegmentProfileDefinition_.set (::std::move (r));
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == L"DatumReferenceFrameId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!this->DatumReferenceFrameId_)
          {
            this->DatumReferenceFrameId_.set (::std::move (r));
            continue;
          }
        }

        // OrientationOnly
        //
        if (n.name () == L"OrientationOnly" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->OrientationOnly_)
          {
            this->OrientationOnly_.set (OrientationOnly_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ProfileCharacteristicDefinitionBaseType& ProfileCharacteristicDefinitionBaseType::
    operator= (const ProfileCharacteristicDefinitionBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToleranceValue_ = x.ToleranceValue_;
        this->ToleranceDualValue_ = x.ToleranceDualValue_;
        this->OuterDisposition_ = x.OuterDisposition_;
        this->UnequallyDisposedZone_ = x.UnequallyDisposedZone_;
        this->OffsetZone_ = x.OffsetZone_;
        this->VariableAngle_ = x.VariableAngle_;
        this->SecondCompositeSegmentProfileDefinition_ = x.SecondCompositeSegmentProfileDefinition_;
        this->ThirdCompositeSegmentProfileDefinition_ = x.ThirdCompositeSegmentProfileDefinition_;
        this->FourthCompositeSegmentProfileDefinition_ = x.FourthCompositeSegmentProfileDefinition_;
        this->DatumReferenceFrameId_ = x.DatumReferenceFrameId_;
        this->OrientationOnly_ = x.OrientationOnly_;
      }

      return *this;
    }

    ProfileCharacteristicDefinitionBaseType::
    ~ProfileCharacteristicDefinitionBaseType ()
    {
    }

    // ProfileCharacteristicNominalBaseType
    //

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType ()
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (),
      TargetValue_ (this)
    {
    }

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            CharacteristicDefinitionId),
      TargetValue_ (this)
    {
    }

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (id,
                                                            std::move (CharacteristicDefinitionId)),
      TargetValue_ (this)
    {
    }

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType (const ProfileCharacteristicNominalBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProfileCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TargetValue
        //
        if (n.name () == L"TargetValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ProfileCharacteristicNominalBaseType& ProfileCharacteristicNominalBaseType::
    operator= (const ProfileCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicNominalBaseType& > (*this) = x;
        this->TargetValue_ = x.TargetValue_;
      }

      return *this;
    }

    ProfileCharacteristicNominalBaseType::
    ~ProfileCharacteristicNominalBaseType ()
    {
    }

    // ProfileCharacteristicMeasurementBaseType
    //

    ProfileCharacteristicMeasurementBaseType::
    ProfileCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (),
      WorstPositiveDeviation_ (this),
      WorstNegativeDeviation_ (this),
      PointDeviations_ (this),
      DatumsOk_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentProfileMeasurement_ (this),
      ThirdCompositeSegmentProfileMeasurement_ (this),
      FourthCompositeSegmentProfileMeasurement_ (this)
    {
    }

    ProfileCharacteristicMeasurementBaseType::
    ProfileCharacteristicMeasurementBaseType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                Status,
                                                                CharacteristicItemId),
      WorstPositiveDeviation_ (this),
      WorstNegativeDeviation_ (this),
      PointDeviations_ (this),
      DatumsOk_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentProfileMeasurement_ (this),
      ThirdCompositeSegmentProfileMeasurement_ (this),
      FourthCompositeSegmentProfileMeasurement_ (this)
    {
    }

    ProfileCharacteristicMeasurementBaseType::
    ProfileCharacteristicMeasurementBaseType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (id,
                                                                std::move (Status),
                                                                std::move (CharacteristicItemId)),
      WorstPositiveDeviation_ (this),
      WorstNegativeDeviation_ (this),
      PointDeviations_ (this),
      DatumsOk_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentProfileMeasurement_ (this),
      ThirdCompositeSegmentProfileMeasurement_ (this),
      FourthCompositeSegmentProfileMeasurement_ (this)
    {
    }

    ProfileCharacteristicMeasurementBaseType::
    ProfileCharacteristicMeasurementBaseType (const ProfileCharacteristicMeasurementBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (x, f, c),
      WorstPositiveDeviation_ (x.WorstPositiveDeviation_, f, this),
      WorstNegativeDeviation_ (x.WorstNegativeDeviation_, f, this),
      PointDeviations_ (x.PointDeviations_, f, this),
      DatumsOk_ (x.DatumsOk_, f, this),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this),
      SecondCompositeSegmentProfileMeasurement_ (x.SecondCompositeSegmentProfileMeasurement_, f, this),
      ThirdCompositeSegmentProfileMeasurement_ (x.ThirdCompositeSegmentProfileMeasurement_, f, this),
      FourthCompositeSegmentProfileMeasurement_ (x.FourthCompositeSegmentProfileMeasurement_, f, this)
    {
    }

    ProfileCharacteristicMeasurementBaseType::
    ProfileCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::GeometricCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      WorstPositiveDeviation_ (this),
      WorstNegativeDeviation_ (this),
      PointDeviations_ (this),
      DatumsOk_ (this),
      DRFTransformActualId_ (this),
      SecondCompositeSegmentProfileMeasurement_ (this),
      ThirdCompositeSegmentProfileMeasurement_ (this),
      FourthCompositeSegmentProfileMeasurement_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ProfileCharacteristicMeasurementBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::GeometricCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WorstPositiveDeviation
        //
        if (n.name () == L"WorstPositiveDeviation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WorstPositiveDeviation_type > r (
            WorstPositiveDeviation_traits::create (i, f, this));

          if (!this->WorstPositiveDeviation_)
          {
            this->WorstPositiveDeviation_.set (::std::move (r));
            continue;
          }
        }

        // WorstNegativeDeviation
        //
        if (n.name () == L"WorstNegativeDeviation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WorstNegativeDeviation_type > r (
            WorstNegativeDeviation_traits::create (i, f, this));

          if (!this->WorstNegativeDeviation_)
          {
            this->WorstNegativeDeviation_.set (::std::move (r));
            continue;
          }
        }

        // PointDeviations
        //
        if (n.name () == L"PointDeviations" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PointDeviations_type > r (
            PointDeviations_traits::create (i, f, this));

          if (!this->PointDeviations_)
          {
            this->PointDeviations_.set (::std::move (r));
            continue;
          }
        }

        // DatumsOk
        //
        if (n.name () == L"DatumsOk" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        // DRFTransformActualId
        //
        if (n.name () == L"DRFTransformActualId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (::std::move (r));
            continue;
          }
        }

        // SecondCompositeSegmentProfileMeasurement
        //
        if (n.name () == L"SecondCompositeSegmentProfileMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondCompositeSegmentProfileMeasurement_type > r (
            SecondCompositeSegmentProfileMeasurement_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentProfileMeasurement_)
          {
            this->SecondCompositeSegmentProfileMeasurement_.set (::std::move (r));
            continue;
          }
        }

        // ThirdCompositeSegmentProfileMeasurement
        //
        if (n.name () == L"ThirdCompositeSegmentProfileMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThirdCompositeSegmentProfileMeasurement_type > r (
            ThirdCompositeSegmentProfileMeasurement_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentProfileMeasurement_)
          {
            this->ThirdCompositeSegmentProfileMeasurement_.set (::std::move (r));
            continue;
          }
        }

        // FourthCompositeSegmentProfileMeasurement
        //
        if (n.name () == L"FourthCompositeSegmentProfileMeasurement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FourthCompositeSegmentProfileMeasurement_type > r (
            FourthCompositeSegmentProfileMeasurement_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentProfileMeasurement_)
          {
            this->FourthCompositeSegmentProfileMeasurement_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ProfileCharacteristicMeasurementBaseType& ProfileCharacteristicMeasurementBaseType::
    operator= (const ProfileCharacteristicMeasurementBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (*this) = x;
        this->WorstPositiveDeviation_ = x.WorstPositiveDeviation_;
        this->WorstNegativeDeviation_ = x.WorstNegativeDeviation_;
        this->PointDeviations_ = x.PointDeviations_;
        this->DatumsOk_ = x.DatumsOk_;
        this->DRFTransformActualId_ = x.DRFTransformActualId_;
        this->SecondCompositeSegmentProfileMeasurement_ = x.SecondCompositeSegmentProfileMeasurement_;
        this->ThirdCompositeSegmentProfileMeasurement_ = x.ThirdCompositeSegmentProfileMeasurement_;
        this->FourthCompositeSegmentProfileMeasurement_ = x.FourthCompositeSegmentProfileMeasurement_;
      }

      return *this;
    }

    ProfileCharacteristicMeasurementBaseType::
    ~ProfileCharacteristicMeasurementBaseType ()
    {
    }

    // LineProfileCharacteristicItemType
    //

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType ()
    : ::xsd::qif30::ProfileCharacteristicItemBaseType ()
    {
    }

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const id_type& id,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const LineProfileCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    LineProfileCharacteristicItemType* LineProfileCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicItemType (*this, f, c);
    }

    LineProfileCharacteristicItemType::
    ~LineProfileCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LineProfileCharacteristicItemType >
    _xsd_LineProfileCharacteristicItemType_type_factory_init (
      L"LineProfileCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // LineProfileCharacteristicDefinitionType
    //

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType ()
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (),
      Extent_ (this)
    {
    }

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue),
      Extent_ (this)
    {
    }

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const id_type& id,
                                             ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             std::move (ToleranceValue)),
      Extent_ (this)
    {
    }

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const LineProfileCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (x, f, c),
      Extent_ (x.Extent_, f, this)
    {
    }

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Extent_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LineProfileCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::ProfileCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Extent
        //
        if (n.name () == L"Extent" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Extent_type > r (
            Extent_traits::create (i, f, this));

          if (!this->Extent_)
          {
            this->Extent_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    LineProfileCharacteristicDefinitionType* LineProfileCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicDefinitionType (*this, f, c);
    }

    LineProfileCharacteristicDefinitionType& LineProfileCharacteristicDefinitionType::
    operator= (const LineProfileCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::ProfileCharacteristicDefinitionBaseType& > (*this) = x;
        this->Extent_ = x.Extent_;
      }

      return *this;
    }

    LineProfileCharacteristicDefinitionType::
    ~LineProfileCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LineProfileCharacteristicDefinitionType >
    _xsd_LineProfileCharacteristicDefinitionType_type_factory_init (
      L"LineProfileCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // LineProfileCharacteristicNominalType
    //

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType ()
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (),
      Vector_ (this),
      ProfileCurveId_ (this)
    {
    }

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                          const Vector_type& Vector)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId),
      Vector_ (Vector, this),
      ProfileCurveId_ (this)
    {
    }

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                          ::std::unique_ptr< Vector_type > Vector)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId)),
      Vector_ (std::move (Vector), this),
      ProfileCurveId_ (this)
    {
    }

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const LineProfileCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (x, f, c),
      Vector_ (x.Vector_, f, this),
      ProfileCurveId_ (x.ProfileCurveId_, f, this)
    {
    }

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      Vector_ (this),
      ProfileCurveId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LineProfileCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::ProfileCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Vector
        //
        if (n.name () == L"Vector" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Vector_type > r (
            Vector_traits::create (i, f, this));

          if (!Vector_.present ())
          {
            this->Vector_.set (::std::move (r));
            continue;
          }
        }

        // ProfileCurveId
        //
        if (n.name () == L"ProfileCurveId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ProfileCurveId_type > r (
            ProfileCurveId_traits::create (i, f, this));

          if (!this->ProfileCurveId_)
          {
            this->ProfileCurveId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Vector_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Vector",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    LineProfileCharacteristicNominalType* LineProfileCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicNominalType (*this, f, c);
    }

    LineProfileCharacteristicNominalType& LineProfileCharacteristicNominalType::
    operator= (const LineProfileCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::ProfileCharacteristicNominalBaseType& > (*this) = x;
        this->Vector_ = x.Vector_;
        this->ProfileCurveId_ = x.ProfileCurveId_;
      }

      return *this;
    }

    LineProfileCharacteristicNominalType::
    ~LineProfileCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LineProfileCharacteristicNominalType >
    _xsd_LineProfileCharacteristicNominalType_type_factory_init (
      L"LineProfileCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // LineProfileCharacteristicMeasurementType
    //

    LineProfileCharacteristicMeasurementType::
    LineProfileCharacteristicMeasurementType ()
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType ()
    {
    }

    LineProfileCharacteristicMeasurementType::
    LineProfileCharacteristicMeasurementType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId)
    {
    }

    LineProfileCharacteristicMeasurementType::
    LineProfileCharacteristicMeasurementType (const id_type& id,
                                              ::std::unique_ptr< Status_type > Status,
                                              ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId))
    {
    }

    LineProfileCharacteristicMeasurementType::
    LineProfileCharacteristicMeasurementType (const LineProfileCharacteristicMeasurementType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    LineProfileCharacteristicMeasurementType::
    LineProfileCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    LineProfileCharacteristicMeasurementType* LineProfileCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicMeasurementType (*this, f, c);
    }

    LineProfileCharacteristicMeasurementType::
    ~LineProfileCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LineProfileCharacteristicMeasurementType >
    _xsd_LineProfileCharacteristicMeasurementType_type_factory_init (
      L"LineProfileCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // PointProfileCharacteristicItemType
    //

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType ()
    : ::xsd::qif30::ProfileCharacteristicItemBaseType ()
    {
    }

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const PointProfileCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicItemType* PointProfileCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicItemType (*this, f, c);
    }

    PointProfileCharacteristicItemType::
    ~PointProfileCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PointProfileCharacteristicItemType >
    _xsd_PointProfileCharacteristicItemType_type_factory_init (
      L"PointProfileCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // PointProfileCharacteristicDefinitionType
    //

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType ()
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType ()
    {
    }

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const id_type& id,
                                              const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue)
    {
    }

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const id_type& id,
                                              ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             std::move (ToleranceValue))
    {
    }

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const PointProfileCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicDefinitionType* PointProfileCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicDefinitionType (*this, f, c);
    }

    PointProfileCharacteristicDefinitionType::
    ~PointProfileCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PointProfileCharacteristicDefinitionType >
    _xsd_PointProfileCharacteristicDefinitionType_type_factory_init (
      L"PointProfileCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // PointProfileCharacteristicNominalType
    //

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType ()
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType ()
    {
    }

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId)
    {
    }

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId))
    {
    }

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType (const PointProfileCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicNominalType* PointProfileCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicNominalType (*this, f, c);
    }

    PointProfileCharacteristicNominalType::
    ~PointProfileCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PointProfileCharacteristicNominalType >
    _xsd_PointProfileCharacteristicNominalType_type_factory_init (
      L"PointProfileCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // PointProfileCharacteristicMeasurementType
    //

    PointProfileCharacteristicMeasurementType::
    PointProfileCharacteristicMeasurementType ()
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType ()
    {
    }

    PointProfileCharacteristicMeasurementType::
    PointProfileCharacteristicMeasurementType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId)
    {
    }

    PointProfileCharacteristicMeasurementType::
    PointProfileCharacteristicMeasurementType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId))
    {
    }

    PointProfileCharacteristicMeasurementType::
    PointProfileCharacteristicMeasurementType (const PointProfileCharacteristicMeasurementType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicMeasurementType::
    PointProfileCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicMeasurementType* PointProfileCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicMeasurementType (*this, f, c);
    }

    PointProfileCharacteristicMeasurementType::
    ~PointProfileCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PointProfileCharacteristicMeasurementType >
    _xsd_PointProfileCharacteristicMeasurementType_type_factory_init (
      L"PointProfileCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileCharacteristicItemType
    //

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType ()
    : ::xsd::qif30::ProfileCharacteristicItemBaseType ()
    {
    }

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const id_type& id,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const SurfaceProfileCharacteristicItemType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    SurfaceProfileCharacteristicItemType* SurfaceProfileCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicItemType (*this, f, c);
    }

    SurfaceProfileCharacteristicItemType::
    ~SurfaceProfileCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileCharacteristicItemType >
    _xsd_SurfaceProfileCharacteristicItemType_type_factory_init (
      L"SurfaceProfileCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileCharacteristicDefinitionType
    //

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType ()
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (),
      Extent_ (this)
    {
    }

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const id_type& id,
                                                const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue),
      Extent_ (this)
    {
    }

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const id_type& id,
                                                ::std::unique_ptr< ToleranceValue_type > ToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             std::move (ToleranceValue)),
      Extent_ (this)
    {
    }

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const SurfaceProfileCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (x, f, c),
      Extent_ (x.Extent_, f, this)
    {
    }

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Extent_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SurfaceProfileCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::ProfileCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Extent
        //
        if (n.name () == L"Extent" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Extent_type > r (
            Extent_traits::create (i, f, this));

          if (!this->Extent_)
          {
            this->Extent_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SurfaceProfileCharacteristicDefinitionType* SurfaceProfileCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicDefinitionType (*this, f, c);
    }

    SurfaceProfileCharacteristicDefinitionType& SurfaceProfileCharacteristicDefinitionType::
    operator= (const SurfaceProfileCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::ProfileCharacteristicDefinitionBaseType& > (*this) = x;
        this->Extent_ = x.Extent_;
      }

      return *this;
    }

    SurfaceProfileCharacteristicDefinitionType::
    ~SurfaceProfileCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileCharacteristicDefinitionType >
    _xsd_SurfaceProfileCharacteristicDefinitionType_type_factory_init (
      L"SurfaceProfileCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileCharacteristicNominalType
    //

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType ()
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType ()
    {
    }

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId)
    {
    }

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId))
    {
    }

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType (const SurfaceProfileCharacteristicNominalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (x, f, c)
    {
    }

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (e, f, c)
    {
    }

    SurfaceProfileCharacteristicNominalType* SurfaceProfileCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicNominalType (*this, f, c);
    }

    SurfaceProfileCharacteristicNominalType::
    ~SurfaceProfileCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileCharacteristicNominalType >
    _xsd_SurfaceProfileCharacteristicNominalType_type_factory_init (
      L"SurfaceProfileCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileCharacteristicMeasurementType
    //

    SurfaceProfileCharacteristicMeasurementType::
    SurfaceProfileCharacteristicMeasurementType ()
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType ()
    {
    }

    SurfaceProfileCharacteristicMeasurementType::
    SurfaceProfileCharacteristicMeasurementType (const id_type& id,
                                                 const Status_type& Status,
                                                 const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId)
    {
    }

    SurfaceProfileCharacteristicMeasurementType::
    SurfaceProfileCharacteristicMeasurementType (const id_type& id,
                                                 ::std::unique_ptr< Status_type > Status,
                                                 ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId))
    {
    }

    SurfaceProfileCharacteristicMeasurementType::
    SurfaceProfileCharacteristicMeasurementType (const SurfaceProfileCharacteristicMeasurementType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    SurfaceProfileCharacteristicMeasurementType::
    SurfaceProfileCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    SurfaceProfileCharacteristicMeasurementType* SurfaceProfileCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicMeasurementType (*this, f, c);
    }

    SurfaceProfileCharacteristicMeasurementType::
    ~SurfaceProfileCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileCharacteristicMeasurementType >
    _xsd_SurfaceProfileCharacteristicMeasurementType_type_factory_init (
      L"SurfaceProfileCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileNonUniformCharacteristicItemType
    //

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType ()
    : ::xsd::qif30::ProfileCharacteristicItemBaseType ()
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const id_type& id,
                                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       CharacteristicNominalId)
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const id_type& id,
                                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (id,
                                                       std::move (CharacteristicNominalId))
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const SurfaceProfileNonUniformCharacteristicItemType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType* SurfaceProfileNonUniformCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicItemType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    ~SurfaceProfileNonUniformCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicItemType >
    _xsd_SurfaceProfileNonUniformCharacteristicItemType_type_factory_init (
      L"SurfaceProfileNonUniformCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileNonUniformCharacteristicDefinitionType
    //

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType ()
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (),
      ToPointToleranceValue_ (this),
      ToPointOuterDisposition_ (this),
      ToPointUnequallyDisposedZone_ (this)
    {
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const id_type& id,
                                                          const ToleranceValue_type& ToleranceValue,
                                                          const ToPointToleranceValue_type& ToPointToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue),
      ToPointToleranceValue_ (ToPointToleranceValue, this),
      ToPointOuterDisposition_ (this),
      ToPointUnequallyDisposedZone_ (this)
    {
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const id_type& id,
                                                          ::std::unique_ptr< ToleranceValue_type > ToleranceValue,
                                                          ::std::unique_ptr< ToPointToleranceValue_type > ToPointToleranceValue)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (id,
                                                             std::move (ToleranceValue)),
      ToPointToleranceValue_ (std::move (ToPointToleranceValue), this),
      ToPointOuterDisposition_ (this),
      ToPointUnequallyDisposedZone_ (this)
    {
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const SurfaceProfileNonUniformCharacteristicDefinitionType& x,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (x, f, c),
      ToPointToleranceValue_ (x.ToPointToleranceValue_, f, this),
      ToPointOuterDisposition_ (x.ToPointOuterDisposition_, f, this),
      ToPointUnequallyDisposedZone_ (x.ToPointUnequallyDisposedZone_, f, this)
    {
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToPointToleranceValue_ (this),
      ToPointOuterDisposition_ (this),
      ToPointUnequallyDisposedZone_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::ProfileCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ToPointToleranceValue
        //
        if (n.name () == L"ToPointToleranceValue" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToPointToleranceValue_type > r (
            ToPointToleranceValue_traits::create (i, f, this));

          if (!ToPointToleranceValue_.present ())
          {
            this->ToPointToleranceValue_.set (::std::move (r));
            continue;
          }
        }

        // ToPointOuterDisposition
        //
        if (n.name () == L"ToPointOuterDisposition" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToPointOuterDisposition_type > r (
            ToPointOuterDisposition_traits::create (i, f, this));

          if (!this->ToPointOuterDisposition_)
          {
            this->ToPointOuterDisposition_.set (::std::move (r));
            continue;
          }
        }

        // ToPointUnequallyDisposedZone
        //
        if (n.name () == L"ToPointUnequallyDisposedZone" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ToPointUnequallyDisposedZone_type > r (
            ToPointUnequallyDisposedZone_traits::create (i, f, this));

          if (!this->ToPointUnequallyDisposedZone_)
          {
            this->ToPointUnequallyDisposedZone_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ToPointToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ToPointToleranceValue",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType* SurfaceProfileNonUniformCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicDefinitionType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType& SurfaceProfileNonUniformCharacteristicDefinitionType::
    operator= (const SurfaceProfileNonUniformCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::ProfileCharacteristicDefinitionBaseType& > (*this) = x;
        this->ToPointToleranceValue_ = x.ToPointToleranceValue_;
        this->ToPointOuterDisposition_ = x.ToPointOuterDisposition_;
        this->ToPointUnequallyDisposedZone_ = x.ToPointUnequallyDisposedZone_;
      }

      return *this;
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    ~SurfaceProfileNonUniformCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicDefinitionType >
    _xsd_SurfaceProfileNonUniformCharacteristicDefinitionType_type_factory_init (
      L"SurfaceProfileNonUniformCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileNonUniformCharacteristicNominalType
    //

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType ()
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType ()
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const id_type& id,
                                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId)
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const id_type& id,
                                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (id,
                                                          std::move (CharacteristicDefinitionId))
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const SurfaceProfileNonUniformCharacteristicNominalType& x,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (x, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicNominalBaseType (e, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType* SurfaceProfileNonUniformCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicNominalType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    ~SurfaceProfileNonUniformCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicNominalType >
    _xsd_SurfaceProfileNonUniformCharacteristicNominalType_type_factory_init (
      L"SurfaceProfileNonUniformCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // SurfaceProfileNonUniformCharacteristicMeasurementType
    //

    SurfaceProfileNonUniformCharacteristicMeasurementType::
    SurfaceProfileNonUniformCharacteristicMeasurementType ()
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType ()
    {
    }

    SurfaceProfileNonUniformCharacteristicMeasurementType::
    SurfaceProfileNonUniformCharacteristicMeasurementType (const id_type& id,
                                                           const Status_type& Status,
                                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              Status,
                                                              CharacteristicItemId)
    {
    }

    SurfaceProfileNonUniformCharacteristicMeasurementType::
    SurfaceProfileNonUniformCharacteristicMeasurementType (const id_type& id,
                                                           ::std::unique_ptr< Status_type > Status,
                                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (id,
                                                              std::move (Status),
                                                              std::move (CharacteristicItemId))
    {
    }

    SurfaceProfileNonUniformCharacteristicMeasurementType::
    SurfaceProfileNonUniformCharacteristicMeasurementType (const SurfaceProfileNonUniformCharacteristicMeasurementType& x,
                                                           ::xml_schema::flags f,
                                                           ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (x, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicMeasurementType::
    SurfaceProfileNonUniformCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                           ::xml_schema::flags f,
                                                           ::xml_schema::container* c)
    : ::xsd::qif30::ProfileCharacteristicMeasurementBaseType (e, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicMeasurementType* SurfaceProfileNonUniformCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicMeasurementType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicMeasurementType::
    ~SurfaceProfileNonUniformCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicMeasurementType >
    _xsd_SurfaceProfileNonUniformCharacteristicMeasurementType_type_factory_init (
      L"SurfaceProfileNonUniformCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // MeasuredZoneRadiiType
    //

    MeasuredZoneRadiiType::
    MeasuredZoneRadiiType ()
    : ::xml_schema::type (),
      MinRadius_ (this),
      MaxRadius_ (this)
    {
    }

    MeasuredZoneRadiiType::
    MeasuredZoneRadiiType (const MinRadius_type& MinRadius,
                           const MaxRadius_type& MaxRadius)
    : ::xml_schema::type (),
      MinRadius_ (MinRadius, this),
      MaxRadius_ (MaxRadius, this)
    {
    }

    MeasuredZoneRadiiType::
    MeasuredZoneRadiiType (::std::unique_ptr< MinRadius_type > MinRadius,
                           ::std::unique_ptr< MaxRadius_type > MaxRadius)
    : ::xml_schema::type (),
      MinRadius_ (std::move (MinRadius), this),
      MaxRadius_ (std::move (MaxRadius), this)
    {
    }

    MeasuredZoneRadiiType::
    MeasuredZoneRadiiType (const MeasuredZoneRadiiType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MinRadius_ (x.MinRadius_, f, this),
      MaxRadius_ (x.MaxRadius_, f, this)
    {
    }

    MeasuredZoneRadiiType::
    MeasuredZoneRadiiType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MinRadius_ (this),
      MaxRadius_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void MeasuredZoneRadiiType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // MinRadius
        //
        if (n.name () == L"MinRadius" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MinRadius_type > r (
            MinRadius_traits::create (i, f, this));

          if (!MinRadius_.present ())
          {
            this->MinRadius_.set (::std::move (r));
            continue;
          }
        }

        // MaxRadius
        //
        if (n.name () == L"MaxRadius" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MaxRadius_type > r (
            MaxRadius_traits::create (i, f, this));

          if (!MaxRadius_.present ())
          {
            this->MaxRadius_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!MinRadius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"MinRadius",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!MaxRadius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"MaxRadius",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    MeasuredZoneRadiiType* MeasuredZoneRadiiType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeasuredZoneRadiiType (*this, f, c);
    }

    MeasuredZoneRadiiType& MeasuredZoneRadiiType::
    operator= (const MeasuredZoneRadiiType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->MinRadius_ = x.MinRadius_;
        this->MaxRadius_ = x.MaxRadius_;
      }

      return *this;
    }

    MeasuredZoneRadiiType::
    ~MeasuredZoneRadiiType ()
    {
    }

    // CharacteristicGroupType
    //

    CharacteristicGroupType::
    CharacteristicGroupType ()
    : ::xml_schema::type (),
      CharacteristicItemIds_ (this),
      Description_ (this),
      Name_ (this),
      TransformId_ (this),
      Units_ (this),
      Scale_ (this),
      Attributes_ (this),
      id_ (this)
    {
    }

    CharacteristicGroupType::
    CharacteristicGroupType (const CharacteristicItemIds_type& CharacteristicItemIds,
                             const id_type& id)
    : ::xml_schema::type (),
      CharacteristicItemIds_ (CharacteristicItemIds, this),
      Description_ (this),
      Name_ (this),
      TransformId_ (this),
      Units_ (this),
      Scale_ (this),
      Attributes_ (this),
      id_ (id, this)
    {
    }

    CharacteristicGroupType::
    CharacteristicGroupType (::std::unique_ptr< CharacteristicItemIds_type > CharacteristicItemIds,
                             const id_type& id)
    : ::xml_schema::type (),
      CharacteristicItemIds_ (std::move (CharacteristicItemIds), this),
      Description_ (this),
      Name_ (this),
      TransformId_ (this),
      Units_ (this),
      Scale_ (this),
      Attributes_ (this),
      id_ (id, this)
    {
    }

    CharacteristicGroupType::
    CharacteristicGroupType (const CharacteristicGroupType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicItemIds_ (x.CharacteristicItemIds_, f, this),
      Description_ (x.Description_, f, this),
      Name_ (x.Name_, f, this),
      TransformId_ (x.TransformId_, f, this),
      Units_ (x.Units_, f, this),
      Scale_ (x.Scale_, f, this),
      Attributes_ (x.Attributes_, f, this),
      id_ (x.id_, f, this)
    {
    }

    CharacteristicGroupType::
    CharacteristicGroupType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicItemIds_ (this),
      Description_ (this),
      Name_ (this),
      TransformId_ (this),
      Units_ (this),
      Scale_ (this),
      Attributes_ (this),
      id_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicItemIds
        //
        if (n.name () == L"CharacteristicItemIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicItemIds_type > r (
            CharacteristicItemIds_traits::create (i, f, this));

          if (!CharacteristicItemIds_.present ())
          {
            this->CharacteristicItemIds_.set (::std::move (r));
            continue;
          }
        }

        // Description
        //
        if (n.name () == L"Description" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (::std::move (r));
            continue;
          }
        }

        // Name
        //
        if (n.name () == L"Name" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (::std::move (r));
            continue;
          }
        }

        // TransformId
        //
        if (n.name () == L"TransformId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TransformId_type > r (
            TransformId_traits::create (i, f, this));

          if (!this->TransformId_)
          {
            this->TransformId_.set (::std::move (r));
            continue;
          }
        }

        // Units
        //
        if (n.name () == L"Units" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Units_type > r (
            Units_traits::create (i, f, this));

          if (!this->Units_)
          {
            this->Units_.set (::std::move (r));
            continue;
          }
        }

        // Scale
        //
        if (n.name () == L"Scale" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Scale_type > r (
            Scale_traits::create (i, f, this));

          if (!this->Scale_)
          {
            this->Scale_.set (::std::move (r));
            continue;
          }
        }

        // Attributes
        //
        if (n.name () == L"Attributes" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!CharacteristicItemIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicItemIds",
          L"http://qifstandards.org/xsd/qif3");
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          this->id_.set (id_traits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    CharacteristicGroupType* CharacteristicGroupType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupType (*this, f, c);
    }

    CharacteristicGroupType& CharacteristicGroupType::
    operator= (const CharacteristicGroupType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicItemIds_ = x.CharacteristicItemIds_;
        this->Description_ = x.Description_;
        this->Name_ = x.Name_;
        this->TransformId_ = x.TransformId_;
        this->Units_ = x.Units_;
        this->Scale_ = x.Scale_;
        this->Attributes_ = x.Attributes_;
        this->id_ = x.id_;
      }

      return *this;
    }

    CharacteristicGroupType::
    ~CharacteristicGroupType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CharacteristicGroupType >
    _xsd_CharacteristicGroupType_type_factory_init (
      L"CharacteristicGroupType",
      L"http://qifstandards.org/xsd/qif3");

    // CharacteristicManufacturingProcessGroupType
    //

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType ()
    : ::xsd::qif30::CharacteristicGroupType (),
      ManufacturingProcessId_ (this)
    {
    }

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (const CharacteristicItemIds_type& CharacteristicItemIds,
                                                 const id_type& id)
    : ::xsd::qif30::CharacteristicGroupType (CharacteristicItemIds,
                                             id),
      ManufacturingProcessId_ (this)
    {
    }

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (::std::unique_ptr< CharacteristicItemIds_type > CharacteristicItemIds,
                                                 const id_type& id)
    : ::xsd::qif30::CharacteristicGroupType (std::move (CharacteristicItemIds),
                                             id),
      ManufacturingProcessId_ (this)
    {
    }

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (const CharacteristicManufacturingProcessGroupType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicGroupType (x, f, c),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this)
    {
    }

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicGroupType (e, f | ::xml_schema::flags::base, c),
      ManufacturingProcessId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicManufacturingProcessGroupType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicGroupType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ManufacturingProcessId
        //
        if (n.name () == L"ManufacturingProcessId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CharacteristicManufacturingProcessGroupType* CharacteristicManufacturingProcessGroupType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicManufacturingProcessGroupType (*this, f, c);
    }

    CharacteristicManufacturingProcessGroupType& CharacteristicManufacturingProcessGroupType::
    operator= (const CharacteristicManufacturingProcessGroupType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicGroupType& > (*this) = x;
        this->ManufacturingProcessId_ = x.ManufacturingProcessId_;
      }

      return *this;
    }

    CharacteristicManufacturingProcessGroupType::
    ~CharacteristicManufacturingProcessGroupType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CharacteristicManufacturingProcessGroupType >
    _xsd_CharacteristicManufacturingProcessGroupType_type_factory_init (
      L"CharacteristicManufacturingProcessGroupType",
      L"http://qifstandards.org/xsd/qif3");

    // SimultaneousRequirementEnumType
    //

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_SimultaneousRequirementEnumType_convert ();
    }

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (const xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_SimultaneousRequirementEnumType_convert ();
    }

    SimultaneousRequirementEnumType::
    SimultaneousRequirementEnumType (const ::std::wstring& s,
                                     const xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_SimultaneousRequirementEnumType_convert ();
    }

    SimultaneousRequirementEnumType* SimultaneousRequirementEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SimultaneousRequirementEnumType (*this, f, c);
    }

    SimultaneousRequirementEnumType::value SimultaneousRequirementEnumType::
    _xsd_SimultaneousRequirementEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_SimultaneousRequirementEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SimultaneousRequirementEnumType_indexes_,
                        _xsd_SimultaneousRequirementEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_SimultaneousRequirementEnumType_indexes_ + 2 || _xsd_SimultaneousRequirementEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const SimultaneousRequirementEnumType::
    _xsd_SimultaneousRequirementEnumType_literals_[2] =
    {
      L"SEP_REQ",
      L"SIM_REQ"
    };

    const SimultaneousRequirementEnumType::value SimultaneousRequirementEnumType::
    _xsd_SimultaneousRequirementEnumType_indexes_[2] =
    {
      ::xsd::qif30::SimultaneousRequirementEnumType::SEP_REQ,
      ::xsd::qif30::SimultaneousRequirementEnumType::SIM_REQ
    };

    // CompositeSegmentLowerLevelEnumType
    //

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CompositeSegmentLowerLevelEnumType_convert ();
    }

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (const xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CompositeSegmentLowerLevelEnumType_convert ();
    }

    CompositeSegmentLowerLevelEnumType::
    CompositeSegmentLowerLevelEnumType (const ::std::wstring& s,
                                        const xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CompositeSegmentLowerLevelEnumType_convert ();
    }

    CompositeSegmentLowerLevelEnumType* CompositeSegmentLowerLevelEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentLowerLevelEnumType (*this, f, c);
    }

    CompositeSegmentLowerLevelEnumType::value CompositeSegmentLowerLevelEnumType::
    _xsd_CompositeSegmentLowerLevelEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_CompositeSegmentLowerLevelEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CompositeSegmentLowerLevelEnumType_indexes_,
                        _xsd_CompositeSegmentLowerLevelEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_CompositeSegmentLowerLevelEnumType_indexes_ + 4 || _xsd_CompositeSegmentLowerLevelEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const CompositeSegmentLowerLevelEnumType::
    _xsd_CompositeSegmentLowerLevelEnumType_literals_[4] =
    {
      L"SECOND",
      L"THIRD",
      L"FOURTH",
      L"FIFTH"
    };

    const CompositeSegmentLowerLevelEnumType::value CompositeSegmentLowerLevelEnumType::
    _xsd_CompositeSegmentLowerLevelEnumType_indexes_[4] =
    {
      ::xsd::qif30::CompositeSegmentLowerLevelEnumType::FIFTH,
      ::xsd::qif30::CompositeSegmentLowerLevelEnumType::FOURTH,
      ::xsd::qif30::CompositeSegmentLowerLevelEnumType::SECOND,
      ::xsd::qif30::CompositeSegmentLowerLevelEnumType::THIRD
    };

    // SimultaneousRequirementGroupType
    //

    SimultaneousRequirementGroupType::
    SimultaneousRequirementGroupType ()
    : ::xml_schema::type (),
      CharacteristicNominalIds_ (this),
      Requirement_ (this),
      CompositeLevel_ (this)
    {
    }

    SimultaneousRequirementGroupType::
    SimultaneousRequirementGroupType (const CharacteristicNominalIds_type& CharacteristicNominalIds,
                                      const Requirement_type& Requirement)
    : ::xml_schema::type (),
      CharacteristicNominalIds_ (CharacteristicNominalIds, this),
      Requirement_ (Requirement, this),
      CompositeLevel_ (this)
    {
    }

    SimultaneousRequirementGroupType::
    SimultaneousRequirementGroupType (::std::unique_ptr< CharacteristicNominalIds_type > CharacteristicNominalIds,
                                      const Requirement_type& Requirement)
    : ::xml_schema::type (),
      CharacteristicNominalIds_ (std::move (CharacteristicNominalIds), this),
      Requirement_ (Requirement, this),
      CompositeLevel_ (this)
    {
    }

    SimultaneousRequirementGroupType::
    SimultaneousRequirementGroupType (const SimultaneousRequirementGroupType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicNominalIds_ (x.CharacteristicNominalIds_, f, this),
      Requirement_ (x.Requirement_, f, this),
      CompositeLevel_ (x.CompositeLevel_, f, this)
    {
    }

    SimultaneousRequirementGroupType::
    SimultaneousRequirementGroupType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicNominalIds_ (this),
      Requirement_ (this),
      CompositeLevel_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SimultaneousRequirementGroupType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicNominalIds
        //
        if (n.name () == L"CharacteristicNominalIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicNominalIds_type > r (
            CharacteristicNominalIds_traits::create (i, f, this));

          if (!CharacteristicNominalIds_.present ())
          {
            this->CharacteristicNominalIds_.set (::std::move (r));
            continue;
          }
        }

        // Requirement
        //
        if (n.name () == L"Requirement" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Requirement_type > r (
            Requirement_traits::create (i, f, this));

          if (!Requirement_.present ())
          {
            this->Requirement_.set (::std::move (r));
            continue;
          }
        }

        // CompositeLevel
        //
        if (n.name () == L"CompositeLevel" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CompositeLevel_type > r (
            CompositeLevel_traits::create (i, f, this));

          if (!this->CompositeLevel_)
          {
            this->CompositeLevel_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!CharacteristicNominalIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicNominalIds",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!Requirement_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Requirement",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    SimultaneousRequirementGroupType* SimultaneousRequirementGroupType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SimultaneousRequirementGroupType (*this, f, c);
    }

    SimultaneousRequirementGroupType& SimultaneousRequirementGroupType::
    operator= (const SimultaneousRequirementGroupType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicNominalIds_ = x.CharacteristicNominalIds_;
        this->Requirement_ = x.Requirement_;
        this->CompositeLevel_ = x.CompositeLevel_;
      }

      return *this;
    }

    SimultaneousRequirementGroupType::
    ~SimultaneousRequirementGroupType ()
    {
    }

    // SimultaneousRequirementGroupsType
    //

    SimultaneousRequirementGroupsType::
    SimultaneousRequirementGroupsType ()
    : ::xml_schema::type (),
      SimultaneousRequirementGroup_ (this),
      n_ (this)
    {
    }

    SimultaneousRequirementGroupsType::
    SimultaneousRequirementGroupsType (const n_type& n)
    : ::xml_schema::type (),
      SimultaneousRequirementGroup_ (this),
      n_ (n, this)
    {
    }

    SimultaneousRequirementGroupsType::
    SimultaneousRequirementGroupsType (const SimultaneousRequirementGroupsType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SimultaneousRequirementGroup_ (x.SimultaneousRequirementGroup_, f, this),
      n_ (x.n_, f, this)
    {
    }

    SimultaneousRequirementGroupsType::
    SimultaneousRequirementGroupsType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SimultaneousRequirementGroup_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void SimultaneousRequirementGroupsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SimultaneousRequirementGroup
        //
        if (n.name () == L"SimultaneousRequirementGroup" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SimultaneousRequirementGroup_type > r (
            SimultaneousRequirementGroup_traits::create (i, f, this));

          this->SimultaneousRequirementGroup_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    SimultaneousRequirementGroupsType* SimultaneousRequirementGroupsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SimultaneousRequirementGroupsType (*this, f, c);
    }

    SimultaneousRequirementGroupsType& SimultaneousRequirementGroupsType::
    operator= (const SimultaneousRequirementGroupsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->SimultaneousRequirementGroup_ = x.SimultaneousRequirementGroup_;
        this->n_ = x.n_;
      }

      return *this;
    }

    SimultaneousRequirementGroupsType::
    ~SimultaneousRequirementGroupsType ()
    {
    }

    // CharacteristicStatusEnumType
    //

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CharacteristicStatusEnumType_convert ();
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CharacteristicStatusEnumType_convert ();
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::std::wstring& s,
                                  const xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CharacteristicStatusEnumType_convert ();
    }

    CharacteristicStatusEnumType* CharacteristicStatusEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicStatusEnumType (*this, f, c);
    }

    CharacteristicStatusEnumType::value CharacteristicStatusEnumType::
    _xsd_CharacteristicStatusEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_CharacteristicStatusEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CharacteristicStatusEnumType_indexes_,
                        _xsd_CharacteristicStatusEnumType_indexes_ + 8,
                        *this,
                        c));

      if (i == _xsd_CharacteristicStatusEnumType_indexes_ + 8 || _xsd_CharacteristicStatusEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const CharacteristicStatusEnumType::
    _xsd_CharacteristicStatusEnumType_literals_[8] =
    {
      L"PASS",
      L"FAIL",
      L"REWORK",
      L"SYSERROR",
      L"INDETERMINATE",
      L"NOT_ANALYZED",
      L"BASIC_OR_TED",
      L"UNDEFINED"
    };

    const CharacteristicStatusEnumType::value CharacteristicStatusEnumType::
    _xsd_CharacteristicStatusEnumType_indexes_[8] =
    {
      ::xsd::qif30::CharacteristicStatusEnumType::BASIC_OR_TED,
      ::xsd::qif30::CharacteristicStatusEnumType::FAIL,
      ::xsd::qif30::CharacteristicStatusEnumType::INDETERMINATE,
      ::xsd::qif30::CharacteristicStatusEnumType::NOT_ANALYZED,
      ::xsd::qif30::CharacteristicStatusEnumType::PASS,
      ::xsd::qif30::CharacteristicStatusEnumType::REWORK,
      ::xsd::qif30::CharacteristicStatusEnumType::SYSERROR,
      ::xsd::qif30::CharacteristicStatusEnumType::UNDEFINED
    };

    // CharacteristicStatusType
    //

    CharacteristicStatusType::
    CharacteristicStatusType ()
    : ::xml_schema::type (),
      CharacteristicStatusEnum_ (this),
      OtherCharacteristicStatus_ (this)
    {
    }

    CharacteristicStatusType::
    CharacteristicStatusType (const CharacteristicStatusType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicStatusEnum_ (x.CharacteristicStatusEnum_, f, this),
      OtherCharacteristicStatus_ (x.OtherCharacteristicStatus_, f, this)
    {
    }

    CharacteristicStatusType::
    CharacteristicStatusType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicStatusEnum_ (this),
      OtherCharacteristicStatus_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CharacteristicStatusType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicStatusEnum
        //
        if (n.name () == L"CharacteristicStatusEnum" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicStatusEnum_type > r (
            CharacteristicStatusEnum_traits::create (i, f, this));

          if (!this->CharacteristicStatusEnum_)
          {
            this->CharacteristicStatusEnum_.set (::std::move (r));
            continue;
          }
        }

        // OtherCharacteristicStatus
        //
        if (n.name () == L"OtherCharacteristicStatus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherCharacteristicStatus_type > r (
            OtherCharacteristicStatus_traits::create (i, f, this));

          if (!this->OtherCharacteristicStatus_)
          {
            this->OtherCharacteristicStatus_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CharacteristicStatusType* CharacteristicStatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicStatusType (*this, f, c);
    }

    CharacteristicStatusType& CharacteristicStatusType::
    operator= (const CharacteristicStatusType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicStatusEnum_ = x.CharacteristicStatusEnum_;
        this->OtherCharacteristicStatus_ = x.OtherCharacteristicStatus_;
      }

      return *this;
    }

    CharacteristicStatusType::
    ~CharacteristicStatusType ()
    {
    }

    // CharacteristicGroupStatusType
    //

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType ()
    : ::xml_schema::type (),
      Status_ (this),
      GroupId_ (this)
    {
    }

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (const Status_type& Status,
                                   const GroupId_type& GroupId)
    : ::xml_schema::type (),
      Status_ (Status, this),
      GroupId_ (GroupId, this)
    {
    }

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (::std::unique_ptr< Status_type > Status,
                                   ::std::unique_ptr< GroupId_type > GroupId)
    : ::xml_schema::type (),
      Status_ (std::move (Status), this),
      GroupId_ (std::move (GroupId), this)
    {
    }

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (const CharacteristicGroupStatusType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Status_ (x.Status_, f, this),
      GroupId_ (x.GroupId_, f, this)
    {
    }

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Status_ (this),
      GroupId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupStatusType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Status
        //
        if (n.name () == L"Status" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (::std::move (r));
            continue;
          }
        }

        // GroupId
        //
        if (n.name () == L"GroupId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< GroupId_type > r (
            GroupId_traits::create (i, f, this));

          if (!GroupId_.present ())
          {
            this->GroupId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Status",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!GroupId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"GroupId",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CharacteristicGroupStatusType* CharacteristicGroupStatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupStatusType (*this, f, c);
    }

    CharacteristicGroupStatusType& CharacteristicGroupStatusType::
    operator= (const CharacteristicGroupStatusType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Status_ = x.Status_;
        this->GroupId_ = x.GroupId_;
      }

      return *this;
    }

    CharacteristicGroupStatusType::
    ~CharacteristicGroupStatusType ()
    {
    }

    // PointDeviationType
    //

    PointDeviationType::
    PointDeviationType ()
    : ::xml_schema::type (),
      MeasurePointId_ (this),
      Deviation_ (this)
    {
    }

    PointDeviationType::
    PointDeviationType (const MeasurePointId_type& MeasurePointId,
                        const Deviation_type& Deviation)
    : ::xml_schema::type (),
      MeasurePointId_ (MeasurePointId, this),
      Deviation_ (Deviation, this)
    {
    }

    PointDeviationType::
    PointDeviationType (::std::unique_ptr< MeasurePointId_type > MeasurePointId,
                        ::std::unique_ptr< Deviation_type > Deviation)
    : ::xml_schema::type (),
      MeasurePointId_ (std::move (MeasurePointId), this),
      Deviation_ (std::move (Deviation), this)
    {
    }

    PointDeviationType::
    PointDeviationType (const PointDeviationType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MeasurePointId_ (x.MeasurePointId_, f, this),
      Deviation_ (x.Deviation_, f, this)
    {
    }

    PointDeviationType::
    PointDeviationType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MeasurePointId_ (this),
      Deviation_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PointDeviationType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // MeasurePointId
        //
        if (n.name () == L"MeasurePointId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< MeasurePointId_type > r (
            MeasurePointId_traits::create (i, f, this));

          if (!MeasurePointId_.present ())
          {
            this->MeasurePointId_.set (::std::move (r));
            continue;
          }
        }

        // Deviation
        //
        if (n.name () == L"Deviation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Deviation_type > r (
            Deviation_traits::create (i, f, this));

          if (!Deviation_.present ())
          {
            this->Deviation_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!MeasurePointId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"MeasurePointId",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!Deviation_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Deviation",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    PointDeviationType* PointDeviationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDeviationType (*this, f, c);
    }

    PointDeviationType& PointDeviationType::
    operator= (const PointDeviationType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->MeasurePointId_ = x.MeasurePointId_;
        this->Deviation_ = x.Deviation_;
      }

      return *this;
    }

    PointDeviationType::
    ~PointDeviationType ()
    {
    }

    // PointDeviationsType
    //

    PointDeviationsType::
    PointDeviationsType ()
    : ::xml_schema::type (),
      PointDeviation_ (this),
      n_ (this)
    {
    }

    PointDeviationsType::
    PointDeviationsType (const n_type& n)
    : ::xml_schema::type (),
      PointDeviation_ (this),
      n_ (n, this)
    {
    }

    PointDeviationsType::
    PointDeviationsType (const PointDeviationsType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      PointDeviation_ (x.PointDeviation_, f, this),
      n_ (x.n_, f, this)
    {
    }

    PointDeviationsType::
    PointDeviationsType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      PointDeviation_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PointDeviationsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // PointDeviation
        //
        if (n.name () == L"PointDeviation" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PointDeviation_type > r (
            PointDeviation_traits::create (i, f, this));

          this->PointDeviation_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    PointDeviationsType* PointDeviationsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDeviationsType (*this, f, c);
    }

    PointDeviationsType& PointDeviationsType::
    operator= (const PointDeviationsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->PointDeviation_ = x.PointDeviation_;
        this->n_ = x.n_;
      }

      return *this;
    }

    PointDeviationsType::
    ~PointDeviationsType ()
    {
    }

    // ExtentEnumType
    //

    ExtentEnumType::
    ExtentEnumType (const xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ExtentEnumType_convert ();
    }

    ExtentEnumType::
    ExtentEnumType (const xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ExtentEnumType_convert ();
    }

    ExtentEnumType::
    ExtentEnumType (const ::std::wstring& s,
                    const xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ExtentEnumType_convert ();
    }

    ExtentEnumType* ExtentEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExtentEnumType (*this, f, c);
    }

    ExtentEnumType::value ExtentEnumType::
    _xsd_ExtentEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_ExtentEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ExtentEnumType_indexes_,
                        _xsd_ExtentEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_ExtentEnumType_indexes_ + 5 || _xsd_ExtentEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const ExtentEnumType::
    _xsd_ExtentEnumType_literals_[5] =
    {
      L"ALL_OVER",
      L"ALL_AROUND",
      L"ALL_OVER_THIS_SIDE",
      L"ALL_AROUND_THIS_SIDE",
      L"UNDEFINED"
    };

    const ExtentEnumType::value ExtentEnumType::
    _xsd_ExtentEnumType_indexes_[5] =
    {
      ::xsd::qif30::ExtentEnumType::ALL_AROUND,
      ::xsd::qif30::ExtentEnumType::ALL_AROUND_THIS_SIDE,
      ::xsd::qif30::ExtentEnumType::ALL_OVER,
      ::xsd::qif30::ExtentEnumType::ALL_OVER_THIS_SIDE,
      ::xsd::qif30::ExtentEnumType::UNDEFINED
    };

    // ExtentType
    //

    ExtentType::
    ExtentType ()
    : ::xml_schema::type (),
      ExtentEnum_ (this),
      OtherExtent_ (this)
    {
    }

    ExtentType::
    ExtentType (const ExtentType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ExtentEnum_ (x.ExtentEnum_, f, this),
      OtherExtent_ (x.OtherExtent_, f, this)
    {
    }

    ExtentType::
    ExtentType (const xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ExtentEnum_ (this),
      OtherExtent_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ExtentType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ExtentEnum
        //
        if (n.name () == L"ExtentEnum" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ExtentEnum_type > r (
            ExtentEnum_traits::create (i, f, this));

          if (!this->ExtentEnum_)
          {
            this->ExtentEnum_.set (::std::move (r));
            continue;
          }
        }

        // OtherExtent
        //
        if (n.name () == L"OtherExtent" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherExtent_type > r (
            OtherExtent_traits::create (i, f, this));

          if (!this->OtherExtent_)
          {
            this->OtherExtent_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ExtentType* ExtentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExtentType (*this, f, c);
    }

    ExtentType& ExtentType::
    operator= (const ExtentType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ExtentEnum_ = x.ExtentEnum_;
        this->OtherExtent_ = x.OtherExtent_;
      }

      return *this;
    }

    ExtentType::
    ~ExtentType ()
    {
    }

    // PositionCoordinateMethodEnumType
    //

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_PositionCoordinateMethodEnumType_convert ();
    }

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (const xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_PositionCoordinateMethodEnumType_convert ();
    }

    PositionCoordinateMethodEnumType::
    PositionCoordinateMethodEnumType (const ::std::wstring& s,
                                      const xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_PositionCoordinateMethodEnumType_convert ();
    }

    PositionCoordinateMethodEnumType* PositionCoordinateMethodEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCoordinateMethodEnumType (*this, f, c);
    }

    PositionCoordinateMethodEnumType::value PositionCoordinateMethodEnumType::
    _xsd_PositionCoordinateMethodEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_PositionCoordinateMethodEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PositionCoordinateMethodEnumType_indexes_,
                        _xsd_PositionCoordinateMethodEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_PositionCoordinateMethodEnumType_indexes_ + 2 || _xsd_PositionCoordinateMethodEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const PositionCoordinateMethodEnumType::
    _xsd_PositionCoordinateMethodEnumType_literals_[2] =
    {
      L"RECTANGULAR",
      L"POLAR"
    };

    const PositionCoordinateMethodEnumType::value PositionCoordinateMethodEnumType::
    _xsd_PositionCoordinateMethodEnumType_indexes_[2] =
    {
      ::xsd::qif30::PositionCoordinateMethodEnumType::POLAR,
      ::xsd::qif30::PositionCoordinateMethodEnumType::RECTANGULAR
    };

    // PositionCoordinateMethodType
    //

    PositionCoordinateMethodType::
    PositionCoordinateMethodType ()
    : ::xml_schema::type (),
      Method_ (this),
      FeatureZoneIds_ (this)
    {
    }

    PositionCoordinateMethodType::
    PositionCoordinateMethodType (const Method_type& Method)
    : ::xml_schema::type (),
      Method_ (Method, this),
      FeatureZoneIds_ (this)
    {
    }

    PositionCoordinateMethodType::
    PositionCoordinateMethodType (const PositionCoordinateMethodType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Method_ (x.Method_, f, this),
      FeatureZoneIds_ (x.FeatureZoneIds_, f, this)
    {
    }

    PositionCoordinateMethodType::
    PositionCoordinateMethodType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Method_ (this),
      FeatureZoneIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PositionCoordinateMethodType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Method
        //
        if (n.name () == L"Method" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Method_type > r (
            Method_traits::create (i, f, this));

          if (!Method_.present ())
          {
            this->Method_.set (::std::move (r));
            continue;
          }
        }

        // FeatureZoneIds
        //
        if (n.name () == L"FeatureZoneIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FeatureZoneIds_type > r (
            FeatureZoneIds_traits::create (i, f, this));

          if (!this->FeatureZoneIds_)
          {
            this->FeatureZoneIds_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Method_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Method",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    PositionCoordinateMethodType* PositionCoordinateMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCoordinateMethodType (*this, f, c);
    }

    PositionCoordinateMethodType& PositionCoordinateMethodType::
    operator= (const PositionCoordinateMethodType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Method_ = x.Method_;
        this->FeatureZoneIds_ = x.FeatureZoneIds_;
      }

      return *this;
    }

    PositionCoordinateMethodType::
    ~PositionCoordinateMethodType ()
    {
    }

    // ThreadCharacteristicItemType
    //

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const id_type& id,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const id_type& id,
                                  ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const ThreadCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    ThreadCharacteristicItemType* ThreadCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicItemType (*this, f, c);
    }

    ThreadCharacteristicItemType::
    ~ThreadCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThreadCharacteristicItemType >
    _xsd_ThreadCharacteristicItemType_type_factory_init (
      L"ThreadCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // ThreadCharacteristicDefinitionType
    //

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType (),
      ThreadSpecificationId_ (this)
    {
    }

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const id_type& id,
                                        const ThreadSpecificationId_type& ThreadSpecificationId)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      ThreadSpecificationId_ (ThreadSpecificationId, this)
    {
    }

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const id_type& id,
                                        ::std::unique_ptr< ThreadSpecificationId_type > ThreadSpecificationId)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id),
      ThreadSpecificationId_ (std::move (ThreadSpecificationId), this)
    {
    }

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const ThreadCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c),
      ThreadSpecificationId_ (x.ThreadSpecificationId_, f, this)
    {
    }

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ThreadSpecificationId_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ThreadCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ThreadSpecificationId
        //
        if (n.name () == L"ThreadSpecificationId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ThreadSpecificationId_type > r (
            ThreadSpecificationId_traits::create (i, f, this));

          if (!ThreadSpecificationId_.present ())
          {
            this->ThreadSpecificationId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ThreadSpecificationId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ThreadSpecificationId",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    ThreadCharacteristicDefinitionType* ThreadCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicDefinitionType (*this, f, c);
    }

    ThreadCharacteristicDefinitionType& ThreadCharacteristicDefinitionType::
    operator= (const ThreadCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicDefinitionBaseType& > (*this) = x;
        this->ThreadSpecificationId_ = x.ThreadSpecificationId_;
      }

      return *this;
    }

    ThreadCharacteristicDefinitionType::
    ~ThreadCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThreadCharacteristicDefinitionType >
    _xsd_ThreadCharacteristicDefinitionType_type_factory_init (
      L"ThreadCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // ThreadCharacteristicNominalType
    //

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType ()
    : ::xsd::qif30::CharacteristicNominalBaseType ()
    {
    }

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId)
    {
    }

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId))
    {
    }

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType (const ThreadCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c)
    {
    }

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f, c)
    {
    }

    ThreadCharacteristicNominalType* ThreadCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicNominalType (*this, f, c);
    }

    ThreadCharacteristicNominalType::
    ~ThreadCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThreadCharacteristicNominalType >
    _xsd_ThreadCharacteristicNominalType_type_factory_init (
      L"ThreadCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // ThreadCharacteristicMeasurementType
    //

    ThreadCharacteristicMeasurementType::
    ThreadCharacteristicMeasurementType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType (),
      PitchDiameter_ (this),
      FunctionalSize_ (this)
    {
    }

    ThreadCharacteristicMeasurementType::
    ThreadCharacteristicMeasurementType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      PitchDiameter_ (this),
      FunctionalSize_ (this)
    {
    }

    ThreadCharacteristicMeasurementType::
    ThreadCharacteristicMeasurementType (const id_type& id,
                                         ::std::unique_ptr< Status_type > Status,
                                         ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId)),
      PitchDiameter_ (this),
      FunctionalSize_ (this)
    {
    }

    ThreadCharacteristicMeasurementType::
    ThreadCharacteristicMeasurementType (const ThreadCharacteristicMeasurementType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c),
      PitchDiameter_ (x.PitchDiameter_, f, this),
      FunctionalSize_ (x.FunctionalSize_, f, this)
    {
    }

    ThreadCharacteristicMeasurementType::
    ThreadCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      PitchDiameter_ (this),
      FunctionalSize_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ThreadCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // PitchDiameter
        //
        if (n.name () == L"PitchDiameter" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< PitchDiameter_type > r (
            PitchDiameter_traits::create (i, f, this));

          if (!this->PitchDiameter_)
          {
            this->PitchDiameter_.set (::std::move (r));
            continue;
          }
        }

        // FunctionalSize
        //
        if (n.name () == L"FunctionalSize" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FunctionalSize_type > r (
            FunctionalSize_traits::create (i, f, this));

          if (!this->FunctionalSize_)
          {
            this->FunctionalSize_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    ThreadCharacteristicMeasurementType* ThreadCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicMeasurementType (*this, f, c);
    }

    ThreadCharacteristicMeasurementType& ThreadCharacteristicMeasurementType::
    operator= (const ThreadCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicMeasurementBaseType& > (*this) = x;
        this->PitchDiameter_ = x.PitchDiameter_;
        this->FunctionalSize_ = x.FunctionalSize_;
      }

      return *this;
    }

    ThreadCharacteristicMeasurementType::
    ~ThreadCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ThreadCharacteristicMeasurementType >
    _xsd_ThreadCharacteristicMeasurementType_type_factory_init (
      L"ThreadCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // CharacteristicAspectsListsType
    //

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType ()
    : ::xml_schema::type (),
      FormalStandardId_ (this),
      CharacteristicDefinitions_ (this),
      DefaultCharacteristicDefinitions_ (this),
      DefaultToleranceDefinitions_ (this),
      CharacteristicNominals_ (this),
      CharacteristicItems_ (this),
      CharacteristicGroups_ (this),
      SimultaneousRequirementGroups_ (this)
    {
    }

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (const FormalStandardId_type& FormalStandardId,
                                    const CharacteristicDefinitions_type& CharacteristicDefinitions,
                                    const CharacteristicNominals_type& CharacteristicNominals)
    : ::xml_schema::type (),
      FormalStandardId_ (FormalStandardId, this),
      CharacteristicDefinitions_ (CharacteristicDefinitions, this),
      DefaultCharacteristicDefinitions_ (this),
      DefaultToleranceDefinitions_ (this),
      CharacteristicNominals_ (CharacteristicNominals, this),
      CharacteristicItems_ (this),
      CharacteristicGroups_ (this),
      SimultaneousRequirementGroups_ (this)
    {
    }

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (::std::unique_ptr< FormalStandardId_type > FormalStandardId,
                                    ::std::unique_ptr< CharacteristicDefinitions_type > CharacteristicDefinitions,
                                    ::std::unique_ptr< CharacteristicNominals_type > CharacteristicNominals)
    : ::xml_schema::type (),
      FormalStandardId_ (std::move (FormalStandardId), this),
      CharacteristicDefinitions_ (std::move (CharacteristicDefinitions), this),
      DefaultCharacteristicDefinitions_ (this),
      DefaultToleranceDefinitions_ (this),
      CharacteristicNominals_ (std::move (CharacteristicNominals), this),
      CharacteristicItems_ (this),
      CharacteristicGroups_ (this),
      SimultaneousRequirementGroups_ (this)
    {
    }

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (const CharacteristicAspectsListsType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FormalStandardId_ (x.FormalStandardId_, f, this),
      CharacteristicDefinitions_ (x.CharacteristicDefinitions_, f, this),
      DefaultCharacteristicDefinitions_ (x.DefaultCharacteristicDefinitions_, f, this),
      DefaultToleranceDefinitions_ (x.DefaultToleranceDefinitions_, f, this),
      CharacteristicNominals_ (x.CharacteristicNominals_, f, this),
      CharacteristicItems_ (x.CharacteristicItems_, f, this),
      CharacteristicGroups_ (x.CharacteristicGroups_, f, this),
      SimultaneousRequirementGroups_ (x.SimultaneousRequirementGroups_, f, this)
    {
    }

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FormalStandardId_ (this),
      CharacteristicDefinitions_ (this),
      DefaultCharacteristicDefinitions_ (this),
      DefaultToleranceDefinitions_ (this),
      CharacteristicNominals_ (this),
      CharacteristicItems_ (this),
      CharacteristicGroups_ (this),
      SimultaneousRequirementGroups_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CharacteristicAspectsListsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // FormalStandardId
        //
        if (n.name () == L"FormalStandardId" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FormalStandardId_type > r (
            FormalStandardId_traits::create (i, f, this));

          if (!FormalStandardId_.present ())
          {
            this->FormalStandardId_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicDefinitions
        //
        if (n.name () == L"CharacteristicDefinitions" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicDefinitions_type > r (
            CharacteristicDefinitions_traits::create (i, f, this));

          if (!CharacteristicDefinitions_.present ())
          {
            this->CharacteristicDefinitions_.set (::std::move (r));
            continue;
          }
        }

        // DefaultCharacteristicDefinitions
        //
        if (n.name () == L"DefaultCharacteristicDefinitions" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DefaultCharacteristicDefinitions_type > r (
            DefaultCharacteristicDefinitions_traits::create (i, f, this));

          if (!this->DefaultCharacteristicDefinitions_)
          {
            this->DefaultCharacteristicDefinitions_.set (::std::move (r));
            continue;
          }
        }

        // DefaultToleranceDefinitions
        //
        if (n.name () == L"DefaultToleranceDefinitions" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< DefaultToleranceDefinitions_type > r (
            DefaultToleranceDefinitions_traits::create (i, f, this));

          if (!this->DefaultToleranceDefinitions_)
          {
            this->DefaultToleranceDefinitions_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicNominals
        //
        if (n.name () == L"CharacteristicNominals" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicNominals_type > r (
            CharacteristicNominals_traits::create (i, f, this));

          if (!CharacteristicNominals_.present ())
          {
            this->CharacteristicNominals_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicItems
        //
        if (n.name () == L"CharacteristicItems" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicItems_type > r (
            CharacteristicItems_traits::create (i, f, this));

          if (!this->CharacteristicItems_)
          {
            this->CharacteristicItems_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicGroups
        //
        if (n.name () == L"CharacteristicGroups" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicGroups_type > r (
            CharacteristicGroups_traits::create (i, f, this));

          if (!this->CharacteristicGroups_)
          {
            this->CharacteristicGroups_.set (::std::move (r));
            continue;
          }
        }

        // SimultaneousRequirementGroups
        //
        if (n.name () == L"SimultaneousRequirementGroups" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SimultaneousRequirementGroups_type > r (
            SimultaneousRequirementGroups_traits::create (i, f, this));

          if (!this->SimultaneousRequirementGroups_)
          {
            this->SimultaneousRequirementGroups_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!FormalStandardId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"FormalStandardId",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!CharacteristicDefinitions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicDefinitions",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!CharacteristicNominals_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicNominals",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    CharacteristicAspectsListsType* CharacteristicAspectsListsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicAspectsListsType (*this, f, c);
    }

    CharacteristicAspectsListsType& CharacteristicAspectsListsType::
    operator= (const CharacteristicAspectsListsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->FormalStandardId_ = x.FormalStandardId_;
        this->CharacteristicDefinitions_ = x.CharacteristicDefinitions_;
        this->DefaultCharacteristicDefinitions_ = x.DefaultCharacteristicDefinitions_;
        this->DefaultToleranceDefinitions_ = x.DefaultToleranceDefinitions_;
        this->CharacteristicNominals_ = x.CharacteristicNominals_;
        this->CharacteristicItems_ = x.CharacteristicItems_;
        this->CharacteristicGroups_ = x.CharacteristicGroups_;
        this->SimultaneousRequirementGroups_ = x.SimultaneousRequirementGroups_;
      }

      return *this;
    }

    CharacteristicAspectsListsType::
    ~CharacteristicAspectsListsType ()
    {
    }

    // MeasuredCharacteristicsType
    //

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType ()
    : ::xml_schema::type (),
      CharacteristicMeasurements_ (this),
      CharacteristicGroupStatuses_ (this)
    {
    }

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (const CharacteristicMeasurements_type& CharacteristicMeasurements)
    : ::xml_schema::type (),
      CharacteristicMeasurements_ (CharacteristicMeasurements, this),
      CharacteristicGroupStatuses_ (this)
    {
    }

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (::std::unique_ptr< CharacteristicMeasurements_type > CharacteristicMeasurements)
    : ::xml_schema::type (),
      CharacteristicMeasurements_ (std::move (CharacteristicMeasurements), this),
      CharacteristicGroupStatuses_ (this)
    {
    }

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (const MeasuredCharacteristicsType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicMeasurements_ (x.CharacteristicMeasurements_, f, this),
      CharacteristicGroupStatuses_ (x.CharacteristicGroupStatuses_, f, this)
    {
    }

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicMeasurements_ (this),
      CharacteristicGroupStatuses_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void MeasuredCharacteristicsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicMeasurements
        //
        if (n.name () == L"CharacteristicMeasurements" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicMeasurements_type > r (
            CharacteristicMeasurements_traits::create (i, f, this));

          if (!CharacteristicMeasurements_.present ())
          {
            this->CharacteristicMeasurements_.set (::std::move (r));
            continue;
          }
        }

        // CharacteristicGroupStatuses
        //
        if (n.name () == L"CharacteristicGroupStatuses" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicGroupStatuses_type > r (
            CharacteristicGroupStatuses_traits::create (i, f, this));

          if (!this->CharacteristicGroupStatuses_)
          {
            this->CharacteristicGroupStatuses_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!CharacteristicMeasurements_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CharacteristicMeasurements",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    MeasuredCharacteristicsType* MeasuredCharacteristicsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeasuredCharacteristicsType (*this, f, c);
    }

    MeasuredCharacteristicsType& MeasuredCharacteristicsType::
    operator= (const MeasuredCharacteristicsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicMeasurements_ = x.CharacteristicMeasurements_;
        this->CharacteristicGroupStatuses_ = x.CharacteristicGroupStatuses_;
      }

      return *this;
    }

    MeasuredCharacteristicsType::
    ~MeasuredCharacteristicsType ()
    {
    }

    // CharacteristicItemsType
    //

    CharacteristicItemsType::
    CharacteristicItemsType ()
    : ::xml_schema::type (),
      CharacteristicItem_ (this),
      n_ (this)
    {
    }

    CharacteristicItemsType::
    CharacteristicItemsType (const n_type& n)
    : ::xml_schema::type (),
      CharacteristicItem_ (this),
      n_ (n, this)
    {
    }

    CharacteristicItemsType::
    CharacteristicItemsType (const CharacteristicItemsType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicItem_ (x.CharacteristicItem_, f, this),
      n_ (x.n_, f, this)
    {
    }

    CharacteristicItemsType::
    CharacteristicItemsType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicItem_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicItemsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicItem
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ().create (
              L"CharacteristicItem",
              L"http://qifstandards.org/xsd/qif3",
              0,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< CharacteristicItem_type > r (
              dynamic_cast< CharacteristicItem_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->CharacteristicItem_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    CharacteristicItemsType* CharacteristicItemsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicItemsType (*this, f, c);
    }

    CharacteristicItemsType& CharacteristicItemsType::
    operator= (const CharacteristicItemsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicItem_ = x.CharacteristicItem_;
        this->n_ = x.n_;
      }

      return *this;
    }

    CharacteristicItemsType::
    ~CharacteristicItemsType ()
    {
    }

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CharacteristicManufacturingProcessGroup_element_factory_init (
      L"CharacteristicGroup",
      L"http://qifstandards.org/xsd/qif3",
      L"CharacteristicManufacturingProcessGroup",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CharacteristicManufacturingProcessGroupType >);


    // CharacteristicGroupsType
    //

    CharacteristicGroupsType::
    CharacteristicGroupsType ()
    : ::xml_schema::type (),
      CharacteristicGroup_ (this),
      n_ (this)
    {
    }

    CharacteristicGroupsType::
    CharacteristicGroupsType (const n_type& n)
    : ::xml_schema::type (),
      CharacteristicGroup_ (this),
      n_ (n, this)
    {
    }

    CharacteristicGroupsType::
    CharacteristicGroupsType (const CharacteristicGroupsType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicGroup_ (x.CharacteristicGroup_, f, this),
      n_ (x.n_, f, this)
    {
    }

    CharacteristicGroupsType::
    CharacteristicGroupsType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicGroup_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicGroup
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ().create (
              L"CharacteristicGroup",
              L"http://qifstandards.org/xsd/qif3",
              &::xsd::cxx::tree::factory_impl< CharacteristicGroup_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< CharacteristicGroup_type > r (
              dynamic_cast< CharacteristicGroup_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->CharacteristicGroup_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    CharacteristicGroupsType* CharacteristicGroupsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupsType (*this, f, c);
    }

    CharacteristicGroupsType& CharacteristicGroupsType::
    operator= (const CharacteristicGroupsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicGroup_ = x.CharacteristicGroup_;
        this->n_ = x.n_;
      }

      return *this;
    }

    CharacteristicGroupsType::
    ~CharacteristicGroupsType ()
    {
    }

    // CharacteristicGroupStatusesType
    //

    CharacteristicGroupStatusesType::
    CharacteristicGroupStatusesType ()
    : ::xml_schema::type (),
      CharacteristicGroupStatus_ (this),
      n_ (this)
    {
    }

    CharacteristicGroupStatusesType::
    CharacteristicGroupStatusesType (const n_type& n)
    : ::xml_schema::type (),
      CharacteristicGroupStatus_ (this),
      n_ (n, this)
    {
    }

    CharacteristicGroupStatusesType::
    CharacteristicGroupStatusesType (const CharacteristicGroupStatusesType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicGroupStatus_ (x.CharacteristicGroupStatus_, f, this),
      n_ (x.n_, f, this)
    {
    }

    CharacteristicGroupStatusesType::
    CharacteristicGroupStatusesType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicGroupStatus_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupStatusesType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicGroupStatus
        //
        if (n.name () == L"CharacteristicGroupStatus" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< CharacteristicGroupStatus_type > r (
            CharacteristicGroupStatus_traits::create (i, f, this));

          this->CharacteristicGroupStatus_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    CharacteristicGroupStatusesType* CharacteristicGroupStatusesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupStatusesType (*this, f, c);
    }

    CharacteristicGroupStatusesType& CharacteristicGroupStatusesType::
    operator= (const CharacteristicGroupStatusesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicGroupStatus_ = x.CharacteristicGroupStatus_;
        this->n_ = x.n_;
      }

      return *this;
    }

    CharacteristicGroupStatusesType::
    ~CharacteristicGroupStatusesType ()
    {
    }

    // CharacteristicDefinitionsType
    //

    CharacteristicDefinitionsType::
    CharacteristicDefinitionsType ()
    : ::xml_schema::type (),
      CharacteristicDefinition_ (this),
      n_ (this)
    {
    }

    CharacteristicDefinitionsType::
    CharacteristicDefinitionsType (const n_type& n)
    : ::xml_schema::type (),
      CharacteristicDefinition_ (this),
      n_ (n, this)
    {
    }

    CharacteristicDefinitionsType::
    CharacteristicDefinitionsType (const CharacteristicDefinitionsType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicDefinition_ (x.CharacteristicDefinition_, f, this),
      n_ (x.n_, f, this)
    {
    }

    CharacteristicDefinitionsType::
    CharacteristicDefinitionsType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicDefinition_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicDefinitionsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicDefinition
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ().create (
              L"CharacteristicDefinition",
              L"http://qifstandards.org/xsd/qif3",
              0,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< CharacteristicDefinition_type > r (
              dynamic_cast< CharacteristicDefinition_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->CharacteristicDefinition_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    CharacteristicDefinitionsType* CharacteristicDefinitionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicDefinitionsType (*this, f, c);
    }

    CharacteristicDefinitionsType& CharacteristicDefinitionsType::
    operator= (const CharacteristicDefinitionsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicDefinition_ = x.CharacteristicDefinition_;
        this->n_ = x.n_;
      }

      return *this;
    }

    CharacteristicDefinitionsType::
    ~CharacteristicDefinitionsType ()
    {
    }

    // ToleranceDefinitionsType
    //

    ToleranceDefinitionsType::
    ToleranceDefinitionsType ()
    : ::xml_schema::type (),
      LinearTolerance_ (this),
      AngularTolerance_ (this),
      n_ (this)
    {
    }

    ToleranceDefinitionsType::
    ToleranceDefinitionsType (const n_type& n)
    : ::xml_schema::type (),
      LinearTolerance_ (this),
      AngularTolerance_ (this),
      n_ (n, this)
    {
    }

    ToleranceDefinitionsType::
    ToleranceDefinitionsType (const ToleranceDefinitionsType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      LinearTolerance_ (x.LinearTolerance_, f, this),
      AngularTolerance_ (x.AngularTolerance_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ToleranceDefinitionsType::
    ToleranceDefinitionsType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      LinearTolerance_ (this),
      AngularTolerance_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ToleranceDefinitionsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LinearTolerance
        //
        if (n.name () == L"LinearTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LinearTolerance_type > r (
            LinearTolerance_traits::create (i, f, this));

          this->LinearTolerance_.push_back (::std::move (r));
          continue;
        }

        // AngularTolerance
        //
        if (n.name () == L"AngularTolerance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< AngularTolerance_type > r (
            AngularTolerance_traits::create (i, f, this));

          this->AngularTolerance_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ToleranceDefinitionsType* ToleranceDefinitionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ToleranceDefinitionsType (*this, f, c);
    }

    ToleranceDefinitionsType& ToleranceDefinitionsType::
    operator= (const ToleranceDefinitionsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->LinearTolerance_ = x.LinearTolerance_;
        this->AngularTolerance_ = x.AngularTolerance_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ToleranceDefinitionsType::
    ~ToleranceDefinitionsType ()
    {
    }

    // CharacteristicNominalsType
    //

    CharacteristicNominalsType::
    CharacteristicNominalsType ()
    : ::xml_schema::type (),
      CharacteristicNominal_ (this),
      n_ (this)
    {
    }

    CharacteristicNominalsType::
    CharacteristicNominalsType (const n_type& n)
    : ::xml_schema::type (),
      CharacteristicNominal_ (this),
      n_ (n, this)
    {
    }

    CharacteristicNominalsType::
    CharacteristicNominalsType (const CharacteristicNominalsType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicNominal_ (x.CharacteristicNominal_, f, this),
      n_ (x.n_, f, this)
    {
    }

    CharacteristicNominalsType::
    CharacteristicNominalsType (const xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicNominal_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicNominalsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicNominal
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ().create (
              L"CharacteristicNominal",
              L"http://qifstandards.org/xsd/qif3",
              0,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< CharacteristicNominal_type > r (
              dynamic_cast< CharacteristicNominal_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->CharacteristicNominal_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    CharacteristicNominalsType* CharacteristicNominalsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicNominalsType (*this, f, c);
    }

    CharacteristicNominalsType& CharacteristicNominalsType::
    operator= (const CharacteristicNominalsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicNominal_ = x.CharacteristicNominal_;
        this->n_ = x.n_;
      }

      return *this;
    }

    CharacteristicNominalsType::
    ~CharacteristicNominalsType ()
    {
    }

    // CharacteristicMeasurementsType
    //

    CharacteristicMeasurementsType::
    CharacteristicMeasurementsType ()
    : ::xml_schema::type (),
      CharacteristicMeasurement_ (this),
      n_ (this)
    {
    }

    CharacteristicMeasurementsType::
    CharacteristicMeasurementsType (const n_type& n)
    : ::xml_schema::type (),
      CharacteristicMeasurement_ (this),
      n_ (n, this)
    {
    }

    CharacteristicMeasurementsType::
    CharacteristicMeasurementsType (const CharacteristicMeasurementsType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicMeasurement_ (x.CharacteristicMeasurement_, f, this),
      n_ (x.n_, f, this)
    {
    }

    CharacteristicMeasurementsType::
    CharacteristicMeasurementsType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicMeasurement_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicMeasurementsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CharacteristicMeasurement
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ().create (
              L"CharacteristicMeasurement",
              L"http://qifstandards.org/xsd/qif3",
              0,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< CharacteristicMeasurement_type > r (
              dynamic_cast< CharacteristicMeasurement_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->CharacteristicMeasurement_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    CharacteristicMeasurementsType* CharacteristicMeasurementsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicMeasurementsType (*this, f, c);
    }

    CharacteristicMeasurementsType& CharacteristicMeasurementsType::
    operator= (const CharacteristicMeasurementsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CharacteristicMeasurement_ = x.CharacteristicMeasurement_;
        this->n_ = x.n_;
      }

      return *this;
    }

    CharacteristicMeasurementsType::
    ~CharacteristicMeasurementsType ()
    {
    }

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleBetweenCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleBetweenCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularCoordinateCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularCoordinateCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleFromCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleFromCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ChordCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ChordCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularRunoutCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularRunoutCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CoaxialityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CoaxialityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConcentricityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConcentricityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicalTaperCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicalTaperCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CurveLengthCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CurveLengthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CylindricityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CylindricityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DepthCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DepthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DiameterCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DiameterCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceBetweenCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceBetweenCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceFromCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceFromCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_EllipticityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::EllipticityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatTaperCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatTaperCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatnessCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatnessCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_HeightCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::HeightCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LengthCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LengthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LinearCoordinateCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LinearCoordinateCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LineProfileCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LineProfileCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_OtherFormCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::OtherFormCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ParallelismCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ParallelismCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PerpendicularityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PerpendicularityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PointProfileCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PointProfileCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PositionCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PositionCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_RadiusCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::RadiusCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalDiameterCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalDiameterCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalRadiusCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalRadiusCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SquareCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SquareCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_StraightnessCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::StraightnessCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileNonUniformCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceTextureCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceTextureCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SymmetryCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SymmetryCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThicknessCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThicknessCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThreadCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThreadCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ToroidicityCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ToroidicityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_TotalRunoutCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::TotalRunoutCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAttributeCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedLinearCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedLinearCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAngularCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAngularCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTemperatureCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAreaCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAreaCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedForceCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedForceCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedMassCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedMassCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedPressureCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedPressureCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedSpeedCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTimeCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTimeCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedUnitCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedUnitCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WidthCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WidthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleBetweenCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleBetweenCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularCoordinateCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularCoordinateCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleFromCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleFromCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ChordCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ChordCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularRunoutCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularRunoutCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CoaxialityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CoaxialityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConcentricityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConcentricityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicalTaperCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicalTaperCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CurveLengthCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CurveLengthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CylindricityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CylindricityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DepthCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DepthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DiameterCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DiameterCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceBetweenCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceBetweenCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceFromCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceFromCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_EllipticityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::EllipticityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatTaperCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatTaperCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatnessCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatnessCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_HeightCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::HeightCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LengthCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LengthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LinearCoordinateCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LinearCoordinateCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LineProfileCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LineProfileCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_OtherFormCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::OtherFormCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ParallelismCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ParallelismCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PerpendicularityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PerpendicularityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PointProfileCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PointProfileCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PositionCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PositionCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_RadiusCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::RadiusCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalDiameterCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalDiameterCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalRadiusCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalRadiusCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SquareCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SquareCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_StraightnessCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::StraightnessCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileNonUniformCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceTextureCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceTextureCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SymmetryCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SymmetryCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThicknessCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThicknessCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThreadCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThreadCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ToroidicityCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ToroidicityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_TotalRunoutCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::TotalRunoutCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAttributeCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedLinearCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedLinearCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAngularCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAngularCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTemperatureCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAreaCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAreaCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedForceCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedForceCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedMassCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedMassCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedPressureCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedPressureCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedSpeedCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTimeCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTimeCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedUnitCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedUnitCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WidthCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WidthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleBetweenCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleBetweenCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularCoordinateCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularCoordinateCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleFromCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleFromCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ChordCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ChordCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularRunoutCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularRunoutCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CoaxialityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CoaxialityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConcentricityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConcentricityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicalTaperCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicalTaperCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CurveLengthCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CurveLengthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CylindricityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CylindricityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DepthCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DepthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DiameterCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DiameterCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceBetweenCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceBetweenCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceFromCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceFromCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_EllipticityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::EllipticityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatTaperCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatTaperCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatnessCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatnessCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_HeightCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::HeightCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LengthCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LengthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LinearCoordinateCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LinearCoordinateCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LineProfileCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LineProfileCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_OtherFormCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::OtherFormCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ParallelismCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ParallelismCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PerpendicularityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PerpendicularityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PointProfileCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PointProfileCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PositionCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PositionCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_RadiusCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::RadiusCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalDiameterCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalDiameterCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalRadiusCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalRadiusCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SquareCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SquareCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_StraightnessCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::StraightnessCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileNonUniformCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceTextureCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceTextureCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SymmetryCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SymmetryCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThicknessCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThicknessCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThreadCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThreadCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ToroidicityCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ToroidicityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_TotalRunoutCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::TotalRunoutCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAttributeCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedLinearCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedLinearCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAngularCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAngularCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTemperatureCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAreaCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAreaCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedForceCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedForceCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedMassCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedMassCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedPressureCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedPressureCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedSpeedCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTimeCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTimeCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedUnitCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedUnitCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WidthCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WidthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleBetweenCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleBetweenCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularCoordinateCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularCoordinateCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngleFromCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngleFromCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_AngularityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::AngularityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ChordCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ChordCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CircularRunoutCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CircularRunoutCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CoaxialityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CoaxialityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConcentricityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConcentricityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicalTaperCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicalTaperCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ConicityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ConicityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CurveLengthCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CurveLengthCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_CylindricityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::CylindricityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DepthCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DepthCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DiameterCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DiameterCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceBetweenCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceBetweenCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_DistanceFromCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::DistanceFromCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_EllipticityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::EllipticityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatTaperCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatTaperCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_FlatnessCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::FlatnessCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_HeightCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::HeightCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LengthCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LengthCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LinearCoordinateCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LinearCoordinateCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_LineProfileCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::LineProfileCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_OtherFormCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::OtherFormCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ParallelismCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ParallelismCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PerpendicularityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PerpendicularityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PointProfileCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PointProfileCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_PositionCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::PositionCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_RadiusCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::RadiusCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalDiameterCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalDiameterCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericalRadiusCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericalRadiusCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SphericityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SphericityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SquareCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SquareCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_StraightnessCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::StraightnessCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceProfileNonUniformCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SurfaceTextureCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SurfaceTextureCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_SymmetryCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::SymmetryCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThicknessCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThicknessCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ThreadCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ThreadCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_ToroidicityCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::ToroidicityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_TotalRunoutCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::TotalRunoutCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAttributeCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedLinearCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedLinearCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAngularCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAngularCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTemperatureCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedAreaCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedAreaCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedForceCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedForceCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedMassCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedMassCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedPressureCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedPressureCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedSpeedCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedTimeCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedTimeCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_UserDefinedUnitCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::UserDefinedUnitCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WidthCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WidthCharacteristicItemType >);


    // WeldContourSymbolEnumType
    //

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_WeldContourSymbolEnumType_convert ();
    }

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (const xercesc::DOMAttr& a,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_WeldContourSymbolEnumType_convert ();
    }

    WeldContourSymbolEnumType::
    WeldContourSymbolEnumType (const ::std::wstring& s,
                               const xercesc::DOMElement* e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_WeldContourSymbolEnumType_convert ();
    }

    WeldContourSymbolEnumType* WeldContourSymbolEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldContourSymbolEnumType (*this, f, c);
    }

    WeldContourSymbolEnumType::value WeldContourSymbolEnumType::
    _xsd_WeldContourSymbolEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_WeldContourSymbolEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_WeldContourSymbolEnumType_indexes_,
                        _xsd_WeldContourSymbolEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_WeldContourSymbolEnumType_indexes_ + 6 || _xsd_WeldContourSymbolEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const WeldContourSymbolEnumType::
    _xsd_WeldContourSymbolEnumType_literals_[6] =
    {
      L"WELD_CONTOUR_FLAT",
      L"WELD_CONTOUR_FLAT_ANGLED",
      L"WELD_CONTOUR_CONCAVE",
      L"WELD_CONTOUR_CONCAVE_ANGLED",
      L"WELD_CONTOUR_CONVEX",
      L"WELD_CONTOUR_CONVEX_ANGLED"
    };

    const WeldContourSymbolEnumType::value WeldContourSymbolEnumType::
    _xsd_WeldContourSymbolEnumType_indexes_[6] =
    {
      ::xsd::qif30::WeldContourSymbolEnumType::WELD_CONTOUR_CONCAVE,
      ::xsd::qif30::WeldContourSymbolEnumType::WELD_CONTOUR_CONCAVE_ANGLED,
      ::xsd::qif30::WeldContourSymbolEnumType::WELD_CONTOUR_CONVEX,
      ::xsd::qif30::WeldContourSymbolEnumType::WELD_CONTOUR_CONVEX_ANGLED,
      ::xsd::qif30::WeldContourSymbolEnumType::WELD_CONTOUR_FLAT,
      ::xsd::qif30::WeldContourSymbolEnumType::WELD_CONTOUR_FLAT_ANGLED
    };

    // WeldFinishingDesignatorEnumType
    //

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_WeldFinishingDesignatorEnumType_convert ();
    }

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (const xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_WeldFinishingDesignatorEnumType_convert ();
    }

    WeldFinishingDesignatorEnumType::
    WeldFinishingDesignatorEnumType (const ::std::wstring& s,
                                     const xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_WeldFinishingDesignatorEnumType_convert ();
    }

    WeldFinishingDesignatorEnumType* WeldFinishingDesignatorEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFinishingDesignatorEnumType (*this, f, c);
    }

    WeldFinishingDesignatorEnumType::value WeldFinishingDesignatorEnumType::
    _xsd_WeldFinishingDesignatorEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_WeldFinishingDesignatorEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_WeldFinishingDesignatorEnumType_indexes_,
                        _xsd_WeldFinishingDesignatorEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_WeldFinishingDesignatorEnumType_indexes_ + 6 || _xsd_WeldFinishingDesignatorEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const WeldFinishingDesignatorEnumType::
    _xsd_WeldFinishingDesignatorEnumType_literals_[6] =
    {
      L"MACHINING",
      L"GRINDING",
      L"CHIPPING",
      L"HAMMERING",
      L"ROLLING",
      L"UNSPECIFIED"
    };

    const WeldFinishingDesignatorEnumType::value WeldFinishingDesignatorEnumType::
    _xsd_WeldFinishingDesignatorEnumType_indexes_[6] =
    {
      ::xsd::qif30::WeldFinishingDesignatorEnumType::CHIPPING,
      ::xsd::qif30::WeldFinishingDesignatorEnumType::GRINDING,
      ::xsd::qif30::WeldFinishingDesignatorEnumType::HAMMERING,
      ::xsd::qif30::WeldFinishingDesignatorEnumType::MACHINING,
      ::xsd::qif30::WeldFinishingDesignatorEnumType::ROLLING,
      ::xsd::qif30::WeldFinishingDesignatorEnumType::UNSPECIFIED
    };

    // LocationSignificanceOneSidesEnumType
    //

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_LocationSignificanceOneSidesEnumType_convert ();
    }

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (const xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_LocationSignificanceOneSidesEnumType_convert ();
    }

    LocationSignificanceOneSidesEnumType::
    LocationSignificanceOneSidesEnumType (const ::std::wstring& s,
                                          const xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_LocationSignificanceOneSidesEnumType_convert ();
    }

    LocationSignificanceOneSidesEnumType* LocationSignificanceOneSidesEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationSignificanceOneSidesEnumType (*this, f, c);
    }

    LocationSignificanceOneSidesEnumType::value LocationSignificanceOneSidesEnumType::
    _xsd_LocationSignificanceOneSidesEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_LocationSignificanceOneSidesEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_LocationSignificanceOneSidesEnumType_indexes_,
                        _xsd_LocationSignificanceOneSidesEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_LocationSignificanceOneSidesEnumType_indexes_ + 2 || _xsd_LocationSignificanceOneSidesEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const LocationSignificanceOneSidesEnumType::
    _xsd_LocationSignificanceOneSidesEnumType_literals_[2] =
    {
      L"ARROW_SIDE",
      L"OTHER_SIDE"
    };

    const LocationSignificanceOneSidesEnumType::value LocationSignificanceOneSidesEnumType::
    _xsd_LocationSignificanceOneSidesEnumType_indexes_[2] =
    {
      ::xsd::qif30::LocationSignificanceOneSidesEnumType::ARROW_SIDE,
      ::xsd::qif30::LocationSignificanceOneSidesEnumType::OTHER_SIDE
    };

    // LocationSignificanceSpotSeamEnumType
    //

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_LocationSignificanceSpotSeamEnumType_convert ();
    }

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (const xercesc::DOMAttr& a,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_LocationSignificanceSpotSeamEnumType_convert ();
    }

    LocationSignificanceSpotSeamEnumType::
    LocationSignificanceSpotSeamEnumType (const ::std::wstring& s,
                                          const xercesc::DOMElement* e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_LocationSignificanceSpotSeamEnumType_convert ();
    }

    LocationSignificanceSpotSeamEnumType* LocationSignificanceSpotSeamEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationSignificanceSpotSeamEnumType (*this, f, c);
    }

    LocationSignificanceSpotSeamEnumType::value LocationSignificanceSpotSeamEnumType::
    _xsd_LocationSignificanceSpotSeamEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_LocationSignificanceSpotSeamEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_LocationSignificanceSpotSeamEnumType_indexes_,
                        _xsd_LocationSignificanceSpotSeamEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_LocationSignificanceSpotSeamEnumType_indexes_ + 3 || _xsd_LocationSignificanceSpotSeamEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const LocationSignificanceSpotSeamEnumType::
    _xsd_LocationSignificanceSpotSeamEnumType_literals_[3] =
    {
      L"ARROW_SIDE",
      L"OTHER_SIDE",
      L"NO_SIDE"
    };

    const LocationSignificanceSpotSeamEnumType::value LocationSignificanceSpotSeamEnumType::
    _xsd_LocationSignificanceSpotSeamEnumType_indexes_[3] =
    {
      ::xsd::qif30::LocationSignificanceSpotSeamEnumType::ARROW_SIDE,
      ::xsd::qif30::LocationSignificanceSpotSeamEnumType::NO_SIDE,
      ::xsd::qif30::LocationSignificanceSpotSeamEnumType::OTHER_SIDE
    };

    // LocationSignificanceAllEnumType
    //

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_LocationSignificanceAllEnumType_convert ();
    }

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (const xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_LocationSignificanceAllEnumType_convert ();
    }

    LocationSignificanceAllEnumType::
    LocationSignificanceAllEnumType (const ::std::wstring& s,
                                     const xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_LocationSignificanceAllEnumType_convert ();
    }

    LocationSignificanceAllEnumType* LocationSignificanceAllEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationSignificanceAllEnumType (*this, f, c);
    }

    LocationSignificanceAllEnumType::value LocationSignificanceAllEnumType::
    _xsd_LocationSignificanceAllEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_LocationSignificanceAllEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_LocationSignificanceAllEnumType_indexes_,
                        _xsd_LocationSignificanceAllEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_LocationSignificanceAllEnumType_indexes_ + 3 || _xsd_LocationSignificanceAllEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const LocationSignificanceAllEnumType::
    _xsd_LocationSignificanceAllEnumType_literals_[3] =
    {
      L"ARROW_SIDE",
      L"OTHER_SIDE",
      L"BOTH_SIDE"
    };

    const LocationSignificanceAllEnumType::value LocationSignificanceAllEnumType::
    _xsd_LocationSignificanceAllEnumType_indexes_[3] =
    {
      ::xsd::qif30::LocationSignificanceAllEnumType::ARROW_SIDE,
      ::xsd::qif30::LocationSignificanceAllEnumType::BOTH_SIDE,
      ::xsd::qif30::LocationSignificanceAllEnumType::OTHER_SIDE
    };

    // NonDestructiveTestingEnumType
    //

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_NonDestructiveTestingEnumType_convert ();
    }

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (const xercesc::DOMAttr& a,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_NonDestructiveTestingEnumType_convert ();
    }

    NonDestructiveTestingEnumType::
    NonDestructiveTestingEnumType (const ::std::wstring& s,
                                   const xercesc::DOMElement* e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_NonDestructiveTestingEnumType_convert ();
    }

    NonDestructiveTestingEnumType* NonDestructiveTestingEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class NonDestructiveTestingEnumType (*this, f, c);
    }

    NonDestructiveTestingEnumType::value NonDestructiveTestingEnumType::
    _xsd_NonDestructiveTestingEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_NonDestructiveTestingEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_NonDestructiveTestingEnumType_indexes_,
                        _xsd_NonDestructiveTestingEnumType_indexes_ + 10,
                        *this,
                        c));

      if (i == _xsd_NonDestructiveTestingEnumType_indexes_ + 10 || _xsd_NonDestructiveTestingEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const NonDestructiveTestingEnumType::
    _xsd_NonDestructiveTestingEnumType_literals_[10] =
    {
      L"ACOUSTIC_EMISSION",
      L"ELECTROMAGNETIC",
      L"LEAK",
      L"MAGNETIC_PARTICLE",
      L"NEUTRON_RADIOGRAPHIC",
      L"PENETRANT",
      L"PROOF",
      L"RADIOGRAPHIC",
      L"ULTRASONIC",
      L"VISUAL"
    };

    const NonDestructiveTestingEnumType::value NonDestructiveTestingEnumType::
    _xsd_NonDestructiveTestingEnumType_indexes_[10] =
    {
      ::xsd::qif30::NonDestructiveTestingEnumType::ACOUSTIC_EMISSION,
      ::xsd::qif30::NonDestructiveTestingEnumType::ELECTROMAGNETIC,
      ::xsd::qif30::NonDestructiveTestingEnumType::LEAK,
      ::xsd::qif30::NonDestructiveTestingEnumType::MAGNETIC_PARTICLE,
      ::xsd::qif30::NonDestructiveTestingEnumType::NEUTRON_RADIOGRAPHIC,
      ::xsd::qif30::NonDestructiveTestingEnumType::PENETRANT,
      ::xsd::qif30::NonDestructiveTestingEnumType::PROOF,
      ::xsd::qif30::NonDestructiveTestingEnumType::RADIOGRAPHIC,
      ::xsd::qif30::NonDestructiveTestingEnumType::ULTRASONIC,
      ::xsd::qif30::NonDestructiveTestingEnumType::VISUAL
    };

    // WeldingProcessEnumType
    //

    WeldingProcessEnumType::
    WeldingProcessEnumType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_WeldingProcessEnumType_convert ();
    }

    WeldingProcessEnumType::
    WeldingProcessEnumType (const xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_WeldingProcessEnumType_convert ();
    }

    WeldingProcessEnumType::
    WeldingProcessEnumType (const ::std::wstring& s,
                            const xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_WeldingProcessEnumType_convert ();
    }

    WeldingProcessEnumType* WeldingProcessEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldingProcessEnumType (*this, f, c);
    }

    WeldingProcessEnumType::value WeldingProcessEnumType::
    _xsd_WeldingProcessEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_WeldingProcessEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_WeldingProcessEnumType_indexes_,
                        _xsd_WeldingProcessEnumType_indexes_ + 21,
                        *this,
                        c));

      if (i == _xsd_WeldingProcessEnumType_indexes_ + 21 || _xsd_WeldingProcessEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const WeldingProcessEnumType::
    _xsd_WeldingProcessEnumType_literals_[21] =
    {
      L"ARC_WELDING",
      L"SHIELDED_METAL_ARC_WELDING",
      L"FLUX_CORED_ARC_WELDING",
      L"SUBMERGED_ARC_WELDING",
      L"GAS_METAL_ARC_WELDING",
      L"GAS_TUNGSTEN_ARC_WELDING",
      L"PLASMA_ARC_WELDING",
      L"RESISTANCE_WELDING",
      L"RESISTANCE_SPOT_WELDING",
      L"RESISTANCE_SEAM_WELDING",
      L"PROJECTION_WELD",
      L"FLASH_WELDING",
      L"OXYFUEL_GAS_WELDING",
      L"OXYACETYLENE_WELDING",
      L"FRICTION_WELDING",
      L"FORGE_WELDING",
      L"THERMIT_WELDING",
      L"ELECTROSLAG_WELDING",
      L"STUD_ARC_WELDING",
      L"BRAZING",
      L"SOLDERING"
    };

    const WeldingProcessEnumType::value WeldingProcessEnumType::
    _xsd_WeldingProcessEnumType_indexes_[21] =
    {
      ::xsd::qif30::WeldingProcessEnumType::ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::BRAZING,
      ::xsd::qif30::WeldingProcessEnumType::ELECTROSLAG_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::FLASH_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::FLUX_CORED_ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::FORGE_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::FRICTION_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::GAS_METAL_ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::GAS_TUNGSTEN_ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::OXYACETYLENE_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::OXYFUEL_GAS_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::PLASMA_ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::PROJECTION_WELD,
      ::xsd::qif30::WeldingProcessEnumType::RESISTANCE_SEAM_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::RESISTANCE_SPOT_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::RESISTANCE_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::SHIELDED_METAL_ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::SOLDERING,
      ::xsd::qif30::WeldingProcessEnumType::STUD_ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::SUBMERGED_ARC_WELDING,
      ::xsd::qif30::WeldingProcessEnumType::THERMIT_WELDING
    };

    // WeldingProcessSuffixEnumType
    //

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_WeldingProcessSuffixEnumType_convert ();
    }

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (const xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_WeldingProcessSuffixEnumType_convert ();
    }

    WeldingProcessSuffixEnumType::
    WeldingProcessSuffixEnumType (const ::std::wstring& s,
                                  const xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_WeldingProcessSuffixEnumType_convert ();
    }

    WeldingProcessSuffixEnumType* WeldingProcessSuffixEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldingProcessSuffixEnumType (*this, f, c);
    }

    WeldingProcessSuffixEnumType::value WeldingProcessSuffixEnumType::
    _xsd_WeldingProcessSuffixEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_WeldingProcessSuffixEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_WeldingProcessSuffixEnumType_indexes_,
                        _xsd_WeldingProcessSuffixEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_WeldingProcessSuffixEnumType_indexes_ + 4 || _xsd_WeldingProcessSuffixEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const WeldingProcessSuffixEnumType::
    _xsd_WeldingProcessSuffixEnumType_literals_[4] =
    {
      L"MANUAL",
      L"SEMI_AUTOMATIC",
      L"ROBOTIC",
      L"MACHINE"
    };

    const WeldingProcessSuffixEnumType::value WeldingProcessSuffixEnumType::
    _xsd_WeldingProcessSuffixEnumType_indexes_[4] =
    {
      ::xsd::qif30::WeldingProcessSuffixEnumType::MACHINE,
      ::xsd::qif30::WeldingProcessSuffixEnumType::MANUAL,
      ::xsd::qif30::WeldingProcessSuffixEnumType::ROBOTIC,
      ::xsd::qif30::WeldingProcessSuffixEnumType::SEMI_AUTOMATIC
    };

    // WeldingProcessType
    //

    WeldingProcessType::
    WeldingProcessType ()
    : ::xml_schema::type (),
      Process_ (this),
      Suffix_ (this)
    {
    }

    WeldingProcessType::
    WeldingProcessType (const Process_type& Process)
    : ::xml_schema::type (),
      Process_ (Process, this),
      Suffix_ (this)
    {
    }

    WeldingProcessType::
    WeldingProcessType (const WeldingProcessType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Process_ (x.Process_, f, this),
      Suffix_ (x.Suffix_, f, this)
    {
    }

    WeldingProcessType::
    WeldingProcessType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Process_ (this),
      Suffix_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldingProcessType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Process
        //
        if (n.name () == L"Process" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Process_type > r (
            Process_traits::create (i, f, this));

          if (!Process_.present ())
          {
            this->Process_.set (::std::move (r));
            continue;
          }
        }

        // Suffix
        //
        if (n.name () == L"Suffix" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Suffix_type > r (
            Suffix_traits::create (i, f, this));

          if (!this->Suffix_)
          {
            this->Suffix_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!Process_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Process",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldingProcessType* WeldingProcessType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldingProcessType (*this, f, c);
    }

    WeldingProcessType& WeldingProcessType::
    operator= (const WeldingProcessType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Process_ = x.Process_;
        this->Suffix_ = x.Suffix_;
      }

      return *this;
    }

    WeldingProcessType::
    ~WeldingProcessType ()
    {
    }

    // ArrayNonDestructiveTestingType
    //

    ArrayNonDestructiveTestingType::
    ArrayNonDestructiveTestingType ()
    : ::xml_schema::type (),
      TypeOfTest_ (this),
      n_ (this)
    {
    }

    ArrayNonDestructiveTestingType::
    ArrayNonDestructiveTestingType (const n_type& n)
    : ::xml_schema::type (),
      TypeOfTest_ (this),
      n_ (n, this)
    {
    }

    ArrayNonDestructiveTestingType::
    ArrayNonDestructiveTestingType (const ArrayNonDestructiveTestingType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      TypeOfTest_ (x.TypeOfTest_, f, this),
      n_ (x.n_, f, this)
    {
    }

    ArrayNonDestructiveTestingType::
    ArrayNonDestructiveTestingType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      TypeOfTest_ (this),
      n_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void ArrayNonDestructiveTestingType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // TypeOfTest
        //
        if (n.name () == L"TypeOfTest" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< TypeOfTest_type > r (
            TypeOfTest_traits::create (i, f, this));

          this->TypeOfTest_.push_back (::std::move (r));
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"n" && n.namespace_ ().empty ())
        {
          this->n_.set (n_traits::create (i, f, this));
          continue;
        }
      }

      if (!n_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"n",
          L"");
      }
    }

    ArrayNonDestructiveTestingType* ArrayNonDestructiveTestingType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArrayNonDestructiveTestingType (*this, f, c);
    }

    ArrayNonDestructiveTestingType& ArrayNonDestructiveTestingType::
    operator= (const ArrayNonDestructiveTestingType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->TypeOfTest_ = x.TypeOfTest_;
        this->n_ = x.n_;
      }

      return *this;
    }

    ArrayNonDestructiveTestingType::
    ~ArrayNonDestructiveTestingType ()
    {
    }

    // WeldCharacteristicNominalBaseType
    //

    WeldCharacteristicNominalBaseType::
    WeldCharacteristicNominalBaseType ()
    : ::xsd::qif30::CharacteristicNominalBaseType (),
      AllAround_ (this),
      Field_ (this),
      Specification_ (this),
      WeldingProcess_ (this),
      NonDestructiveTesting_ (this)
    {
    }

    WeldCharacteristicNominalBaseType::
    WeldCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   CharacteristicDefinitionId),
      AllAround_ (this),
      Field_ (this),
      Specification_ (this),
      WeldingProcess_ (this),
      NonDestructiveTesting_ (this)
    {
    }

    WeldCharacteristicNominalBaseType::
    WeldCharacteristicNominalBaseType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::CharacteristicNominalBaseType (id,
                                                   std::move (CharacteristicDefinitionId)),
      AllAround_ (this),
      Field_ (this),
      Specification_ (this),
      WeldingProcess_ (this),
      NonDestructiveTesting_ (this)
    {
    }

    WeldCharacteristicNominalBaseType::
    WeldCharacteristicNominalBaseType (const WeldCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (x, f, c),
      AllAround_ (x.AllAround_, f, this),
      Field_ (x.Field_, f, this),
      Specification_ (x.Specification_, f, this),
      WeldingProcess_ (x.WeldingProcess_, f, this),
      NonDestructiveTesting_ (x.NonDestructiveTesting_, f, this)
    {
    }

    WeldCharacteristicNominalBaseType::
    WeldCharacteristicNominalBaseType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      AllAround_ (this),
      Field_ (this),
      Specification_ (this),
      WeldingProcess_ (this),
      NonDestructiveTesting_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AllAround
        //
        if (n.name () == L"AllAround" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->AllAround_)
          {
            this->AllAround_.set (AllAround_traits::create (i, f, this));
            continue;
          }
        }

        // Field
        //
        if (n.name () == L"Field" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->Field_)
          {
            this->Field_.set (Field_traits::create (i, f, this));
            continue;
          }
        }

        // Specification
        //
        if (n.name () == L"Specification" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Specification_type > r (
            Specification_traits::create (i, f, this));

          if (!this->Specification_)
          {
            this->Specification_.set (::std::move (r));
            continue;
          }
        }

        // WeldingProcess
        //
        if (n.name () == L"WeldingProcess" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WeldingProcess_type > r (
            WeldingProcess_traits::create (i, f, this));

          if (!this->WeldingProcess_)
          {
            this->WeldingProcess_.set (::std::move (r));
            continue;
          }
        }

        // NonDestructiveTesting
        //
        if (n.name () == L"NonDestructiveTesting" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< NonDestructiveTesting_type > r (
            NonDestructiveTesting_traits::create (i, f, this));

          if (!this->NonDestructiveTesting_)
          {
            this->NonDestructiveTesting_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldCharacteristicNominalBaseType& WeldCharacteristicNominalBaseType::
    operator= (const WeldCharacteristicNominalBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::CharacteristicNominalBaseType& > (*this) = x;
        this->AllAround_ = x.AllAround_;
        this->Field_ = x.Field_;
        this->Specification_ = x.Specification_;
        this->WeldingProcess_ = x.WeldingProcess_;
        this->NonDestructiveTesting_ = x.NonDestructiveTesting_;
      }

      return *this;
    }

    WeldCharacteristicNominalBaseType::
    ~WeldCharacteristicNominalBaseType ()
    {
    }

    // WeldCharacteristicDefinitionBaseType
    //

    WeldCharacteristicDefinitionBaseType::
    WeldCharacteristicDefinitionBaseType ()
    : ::xsd::qif30::CharacteristicDefinitionBaseType ()
    {
    }

    WeldCharacteristicDefinitionBaseType::
    WeldCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (id)
    {
    }

    WeldCharacteristicDefinitionBaseType::
    WeldCharacteristicDefinitionBaseType (const WeldCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldCharacteristicDefinitionBaseType::
    WeldCharacteristicDefinitionBaseType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldCharacteristicDefinitionBaseType::
    ~WeldCharacteristicDefinitionBaseType ()
    {
    }

    // WeldCharacteristicMeasurementBaseType
    //

    WeldCharacteristicMeasurementBaseType::
    WeldCharacteristicMeasurementBaseType ()
    : ::xsd::qif30::CharacteristicMeasurementBaseType ()
    {
    }

    WeldCharacteristicMeasurementBaseType::
    WeldCharacteristicMeasurementBaseType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    WeldCharacteristicMeasurementBaseType::
    WeldCharacteristicMeasurementBaseType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (id,
                                                       std::move (Status),
                                                       std::move (CharacteristicItemId))
    {
    }

    WeldCharacteristicMeasurementBaseType::
    WeldCharacteristicMeasurementBaseType (const WeldCharacteristicMeasurementBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (x, f, c)
    {
    }

    WeldCharacteristicMeasurementBaseType::
    WeldCharacteristicMeasurementBaseType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicMeasurementBaseType (e, f, c)
    {
    }

    WeldCharacteristicMeasurementBaseType::
    ~WeldCharacteristicMeasurementBaseType ()
    {
    }

    // WeldFilletCharacteristicMeasurementType
    //

    WeldFilletCharacteristicMeasurementType::
    WeldFilletCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      LocationSignificance_ (this),
      BothSides_ (this),
      OneSide_ (this)
    {
    }

    WeldFilletCharacteristicMeasurementType::
    WeldFilletCharacteristicMeasurementType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId,
                                             const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      LocationSignificance_ (LocationSignificance, this),
      BothSides_ (this),
      OneSide_ (this)
    {
    }

    WeldFilletCharacteristicMeasurementType::
    WeldFilletCharacteristicMeasurementType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                             const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      LocationSignificance_ (LocationSignificance, this),
      BothSides_ (this),
      OneSide_ (this)
    {
    }

    WeldFilletCharacteristicMeasurementType::
    WeldFilletCharacteristicMeasurementType (const WeldFilletCharacteristicMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      BothSides_ (x.BothSides_, f, this),
      OneSide_ (x.OneSide_, f, this)
    {
    }

    WeldFilletCharacteristicMeasurementType::
    WeldFilletCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      BothSides_ (this),
      OneSide_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldFilletCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // BothSides
        //
        if (n.name () == L"BothSides" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BothSides_type > r (
            BothSides_traits::create (i, f, this));

          if (!this->BothSides_)
          {
            this->BothSides_.set (::std::move (r));
            continue;
          }
        }

        // OneSide
        //
        if (n.name () == L"OneSide" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OneSide_type > r (
            OneSide_traits::create (i, f, this));

          if (!this->OneSide_)
          {
            this->OneSide_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldFilletCharacteristicMeasurementType* WeldFilletCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletCharacteristicMeasurementType (*this, f, c);
    }

    WeldFilletCharacteristicMeasurementType& WeldFilletCharacteristicMeasurementType::
    operator= (const WeldFilletCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->BothSides_ = x.BothSides_;
        this->OneSide_ = x.OneSide_;
      }

      return *this;
    }

    WeldFilletCharacteristicMeasurementType::
    ~WeldFilletCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFilletCharacteristicMeasurementType >
    _xsd_WeldFilletCharacteristicMeasurementType_type_factory_init (
      L"WeldFilletCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldPlugCharacteristicMeasurementType
    //

    WeldPlugCharacteristicMeasurementType::
    WeldPlugCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldPlugCharacteristicMeasurementType::
    WeldPlugCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldPlugCharacteristicMeasurementType::
    WeldPlugCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldPlugCharacteristicMeasurementType::
    WeldPlugCharacteristicMeasurementType (const WeldPlugCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldPlugCharacteristicMeasurementType::
    WeldPlugCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldPlugCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldPlugCharacteristicMeasurementType* WeldPlugCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldPlugCharacteristicMeasurementType (*this, f, c);
    }

    WeldPlugCharacteristicMeasurementType& WeldPlugCharacteristicMeasurementType::
    operator= (const WeldPlugCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldPlugCharacteristicMeasurementType::
    ~WeldPlugCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldPlugCharacteristicMeasurementType >
    _xsd_WeldPlugCharacteristicMeasurementType_type_factory_init (
      L"WeldPlugCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSlotCharacteristicMeasurementType
    //

    WeldSlotCharacteristicMeasurementType::
    WeldSlotCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldSlotCharacteristicMeasurementType::
    WeldSlotCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSlotCharacteristicMeasurementType::
    WeldSlotCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSlotCharacteristicMeasurementType::
    WeldSlotCharacteristicMeasurementType (const WeldSlotCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldSlotCharacteristicMeasurementType::
    WeldSlotCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSlotCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldSlotCharacteristicMeasurementType* WeldSlotCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSlotCharacteristicMeasurementType (*this, f, c);
    }

    WeldSlotCharacteristicMeasurementType& WeldSlotCharacteristicMeasurementType::
    operator= (const WeldSlotCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldSlotCharacteristicMeasurementType::
    ~WeldSlotCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSlotCharacteristicMeasurementType >
    _xsd_WeldSlotCharacteristicMeasurementType_type_factory_init (
      L"WeldSlotCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSpotCharacteristicMeasurementType
    //

    WeldSpotCharacteristicMeasurementType::
    WeldSpotCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this),
      Projection_ (this)
    {
    }

    WeldSpotCharacteristicMeasurementType::
    WeldSpotCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this),
      Projection_ (this)
    {
    }

    WeldSpotCharacteristicMeasurementType::
    WeldSpotCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this),
      Projection_ (this)
    {
    }

    WeldSpotCharacteristicMeasurementType::
    WeldSpotCharacteristicMeasurementType (const WeldSpotCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this),
      Projection_ (x.Projection_, f, this)
    {
    }

    WeldSpotCharacteristicMeasurementType::
    WeldSpotCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this),
      Projection_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSpotCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        // Projection
        //
        if (n.name () == L"Projection" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->Projection_)
          {
            this->Projection_.set (Projection_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldSpotCharacteristicMeasurementType* WeldSpotCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSpotCharacteristicMeasurementType (*this, f, c);
    }

    WeldSpotCharacteristicMeasurementType& WeldSpotCharacteristicMeasurementType::
    operator= (const WeldSpotCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
        this->Projection_ = x.Projection_;
      }

      return *this;
    }

    WeldSpotCharacteristicMeasurementType::
    ~WeldSpotCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSpotCharacteristicMeasurementType >
    _xsd_WeldSpotCharacteristicMeasurementType_type_factory_init (
      L"WeldSpotCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldStudCharacteristicMeasurementType
    //

    WeldStudCharacteristicMeasurementType::
    WeldStudCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      ArrowSideParameters_ (this)
    {
    }

    WeldStudCharacteristicMeasurementType::
    WeldStudCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      ArrowSideParameters_ (this)
    {
    }

    WeldStudCharacteristicMeasurementType::
    WeldStudCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      ArrowSideParameters_ (this)
    {
    }

    WeldStudCharacteristicMeasurementType::
    WeldStudCharacteristicMeasurementType (const WeldStudCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      ArrowSideParameters_ (x.ArrowSideParameters_, f, this)
    {
    }

    WeldStudCharacteristicMeasurementType::
    WeldStudCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      ArrowSideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldStudCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ArrowSideParameters
        //
        if (n.name () == L"ArrowSideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ArrowSideParameters_type > r (
            ArrowSideParameters_traits::create (i, f, this));

          if (!this->ArrowSideParameters_)
          {
            this->ArrowSideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldStudCharacteristicMeasurementType* WeldStudCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldStudCharacteristicMeasurementType (*this, f, c);
    }

    WeldStudCharacteristicMeasurementType& WeldStudCharacteristicMeasurementType::
    operator= (const WeldStudCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->ArrowSideParameters_ = x.ArrowSideParameters_;
      }

      return *this;
    }

    WeldStudCharacteristicMeasurementType::
    ~WeldStudCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldStudCharacteristicMeasurementType >
    _xsd_WeldStudCharacteristicMeasurementType_type_factory_init (
      L"WeldStudCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSeamCharacteristicMeasurementType
    //

    WeldSeamCharacteristicMeasurementType::
    WeldSeamCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldSeamCharacteristicMeasurementType::
    WeldSeamCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSeamCharacteristicMeasurementType::
    WeldSeamCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSeamCharacteristicMeasurementType::
    WeldSeamCharacteristicMeasurementType (const WeldSeamCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldSeamCharacteristicMeasurementType::
    WeldSeamCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSeamCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldSeamCharacteristicMeasurementType* WeldSeamCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSeamCharacteristicMeasurementType (*this, f, c);
    }

    WeldSeamCharacteristicMeasurementType& WeldSeamCharacteristicMeasurementType::
    operator= (const WeldSeamCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldSeamCharacteristicMeasurementType::
    ~WeldSeamCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSeamCharacteristicMeasurementType >
    _xsd_WeldSeamCharacteristicMeasurementType_type_factory_init (
      L"WeldSeamCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSurfacingCharacteristicMeasurementType
    //

    WeldSurfacingCharacteristicMeasurementType::
    WeldSurfacingCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      ArrowSideParameters_ (this)
    {
    }

    WeldSurfacingCharacteristicMeasurementType::
    WeldSurfacingCharacteristicMeasurementType (const id_type& id,
                                                const Status_type& Status,
                                                const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      ArrowSideParameters_ (this)
    {
    }

    WeldSurfacingCharacteristicMeasurementType::
    WeldSurfacingCharacteristicMeasurementType (const id_type& id,
                                                ::std::unique_ptr< Status_type > Status,
                                                ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      ArrowSideParameters_ (this)
    {
    }

    WeldSurfacingCharacteristicMeasurementType::
    WeldSurfacingCharacteristicMeasurementType (const WeldSurfacingCharacteristicMeasurementType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      ArrowSideParameters_ (x.ArrowSideParameters_, f, this)
    {
    }

    WeldSurfacingCharacteristicMeasurementType::
    WeldSurfacingCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      ArrowSideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSurfacingCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ArrowSideParameters
        //
        if (n.name () == L"ArrowSideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ArrowSideParameters_type > r (
            ArrowSideParameters_traits::create (i, f, this));

          if (!this->ArrowSideParameters_)
          {
            this->ArrowSideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldSurfacingCharacteristicMeasurementType* WeldSurfacingCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSurfacingCharacteristicMeasurementType (*this, f, c);
    }

    WeldSurfacingCharacteristicMeasurementType& WeldSurfacingCharacteristicMeasurementType::
    operator= (const WeldSurfacingCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->ArrowSideParameters_ = x.ArrowSideParameters_;
      }

      return *this;
    }

    WeldSurfacingCharacteristicMeasurementType::
    ~WeldSurfacingCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSurfacingCharacteristicMeasurementType >
    _xsd_WeldSurfacingCharacteristicMeasurementType_type_factory_init (
      L"WeldSurfacingCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldEdgeCharacteristicMeasurementType
    //

    WeldEdgeCharacteristicMeasurementType::
    WeldEdgeCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldEdgeCharacteristicMeasurementType::
    WeldEdgeCharacteristicMeasurementType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldEdgeCharacteristicMeasurementType::
    WeldEdgeCharacteristicMeasurementType (const id_type& id,
                                           ::std::unique_ptr< Status_type > Status,
                                           ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                           const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldEdgeCharacteristicMeasurementType::
    WeldEdgeCharacteristicMeasurementType (const WeldEdgeCharacteristicMeasurementType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldEdgeCharacteristicMeasurementType::
    WeldEdgeCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldEdgeCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldEdgeCharacteristicMeasurementType* WeldEdgeCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldEdgeCharacteristicMeasurementType (*this, f, c);
    }

    WeldEdgeCharacteristicMeasurementType& WeldEdgeCharacteristicMeasurementType::
    operator= (const WeldEdgeCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldEdgeCharacteristicMeasurementType::
    ~WeldEdgeCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldEdgeCharacteristicMeasurementType >
    _xsd_WeldEdgeCharacteristicMeasurementType_type_factory_init (
      L"WeldEdgeCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldGrooveCharacteristicMeasurementType
    //

    WeldGrooveCharacteristicMeasurementType::
    WeldGrooveCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      OneSide_ (this),
      BothSides_ (this)
    {
    }

    WeldGrooveCharacteristicMeasurementType::
    WeldGrooveCharacteristicMeasurementType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      OneSide_ (this),
      BothSides_ (this)
    {
    }

    WeldGrooveCharacteristicMeasurementType::
    WeldGrooveCharacteristicMeasurementType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      OneSide_ (this),
      BothSides_ (this)
    {
    }

    WeldGrooveCharacteristicMeasurementType::
    WeldGrooveCharacteristicMeasurementType (const WeldGrooveCharacteristicMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      OneSide_ (x.OneSide_, f, this),
      BothSides_ (x.BothSides_, f, this)
    {
    }

    WeldGrooveCharacteristicMeasurementType::
    WeldGrooveCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      OneSide_ (this),
      BothSides_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldGrooveCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // OneSide
        //
        if (n.name () == L"OneSide" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OneSide_type > r (
            OneSide_traits::create (i, f, this));

          if (!this->OneSide_)
          {
            this->OneSide_.set (::std::move (r));
            continue;
          }
        }

        // BothSides
        //
        if (n.name () == L"BothSides" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BothSides_type > r (
            BothSides_traits::create (i, f, this));

          if (!this->BothSides_)
          {
            this->BothSides_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldGrooveCharacteristicMeasurementType* WeldGrooveCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldGrooveCharacteristicMeasurementType (*this, f, c);
    }

    WeldGrooveCharacteristicMeasurementType& WeldGrooveCharacteristicMeasurementType::
    operator= (const WeldGrooveCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->OneSide_ = x.OneSide_;
        this->BothSides_ = x.BothSides_;
      }

      return *this;
    }

    WeldGrooveCharacteristicMeasurementType::
    ~WeldGrooveCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldGrooveCharacteristicMeasurementType >
    _xsd_WeldGrooveCharacteristicMeasurementType_type_factory_init (
      L"WeldGrooveCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSquareCharacteristicMeasurementType
    //

    WeldSquareCharacteristicMeasurementType::
    WeldSquareCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldSquareCharacteristicMeasurementType::
    WeldSquareCharacteristicMeasurementType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldSquareCharacteristicMeasurementType::
    WeldSquareCharacteristicMeasurementType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldSquareCharacteristicMeasurementType::
    WeldSquareCharacteristicMeasurementType (const WeldSquareCharacteristicMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldSquareCharacteristicMeasurementType::
    WeldSquareCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldSquareCharacteristicMeasurementType* WeldSquareCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSquareCharacteristicMeasurementType (*this, f, c);
    }

    WeldSquareCharacteristicMeasurementType::
    ~WeldSquareCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSquareCharacteristicMeasurementType >
    _xsd_WeldSquareCharacteristicMeasurementType_type_factory_init (
      L"WeldSquareCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldBevelCharacteristicMeasurementType
    //

    WeldBevelCharacteristicMeasurementType::
    WeldBevelCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldBevelCharacteristicMeasurementType::
    WeldBevelCharacteristicMeasurementType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldBevelCharacteristicMeasurementType::
    WeldBevelCharacteristicMeasurementType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldBevelCharacteristicMeasurementType::
    WeldBevelCharacteristicMeasurementType (const WeldBevelCharacteristicMeasurementType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldBevelCharacteristicMeasurementType::
    WeldBevelCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldBevelCharacteristicMeasurementType* WeldBevelCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldBevelCharacteristicMeasurementType (*this, f, c);
    }

    WeldBevelCharacteristicMeasurementType::
    ~WeldBevelCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldBevelCharacteristicMeasurementType >
    _xsd_WeldBevelCharacteristicMeasurementType_type_factory_init (
      L"WeldBevelCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldVCharacteristicMeasurementType
    //

    WeldVCharacteristicMeasurementType::
    WeldVCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldVCharacteristicMeasurementType::
    WeldVCharacteristicMeasurementType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldVCharacteristicMeasurementType::
    WeldVCharacteristicMeasurementType (const id_type& id,
                                        ::std::unique_ptr< Status_type > Status,
                                        ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldVCharacteristicMeasurementType::
    WeldVCharacteristicMeasurementType (const WeldVCharacteristicMeasurementType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldVCharacteristicMeasurementType::
    WeldVCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldVCharacteristicMeasurementType* WeldVCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldVCharacteristicMeasurementType (*this, f, c);
    }

    WeldVCharacteristicMeasurementType::
    ~WeldVCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldVCharacteristicMeasurementType >
    _xsd_WeldVCharacteristicMeasurementType_type_factory_init (
      L"WeldVCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldUCharacteristicMeasurementType
    //

    WeldUCharacteristicMeasurementType::
    WeldUCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldUCharacteristicMeasurementType::
    WeldUCharacteristicMeasurementType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldUCharacteristicMeasurementType::
    WeldUCharacteristicMeasurementType (const id_type& id,
                                        ::std::unique_ptr< Status_type > Status,
                                        ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldUCharacteristicMeasurementType::
    WeldUCharacteristicMeasurementType (const WeldUCharacteristicMeasurementType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldUCharacteristicMeasurementType::
    WeldUCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldUCharacteristicMeasurementType* WeldUCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldUCharacteristicMeasurementType (*this, f, c);
    }

    WeldUCharacteristicMeasurementType::
    ~WeldUCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldUCharacteristicMeasurementType >
    _xsd_WeldUCharacteristicMeasurementType_type_factory_init (
      L"WeldUCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldJCharacteristicMeasurementType
    //

    WeldJCharacteristicMeasurementType::
    WeldJCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldJCharacteristicMeasurementType::
    WeldJCharacteristicMeasurementType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldJCharacteristicMeasurementType::
    WeldJCharacteristicMeasurementType (const id_type& id,
                                        ::std::unique_ptr< Status_type > Status,
                                        ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldJCharacteristicMeasurementType::
    WeldJCharacteristicMeasurementType (const WeldJCharacteristicMeasurementType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldJCharacteristicMeasurementType::
    WeldJCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldJCharacteristicMeasurementType* WeldJCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldJCharacteristicMeasurementType (*this, f, c);
    }

    WeldJCharacteristicMeasurementType::
    ~WeldJCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldJCharacteristicMeasurementType >
    _xsd_WeldJCharacteristicMeasurementType_type_factory_init (
      L"WeldJCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareVCharacteristicMeasurementType
    //

    WeldFlareVCharacteristicMeasurementType::
    WeldFlareVCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldFlareVCharacteristicMeasurementType::
    WeldFlareVCharacteristicMeasurementType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldFlareVCharacteristicMeasurementType::
    WeldFlareVCharacteristicMeasurementType (const id_type& id,
                                             ::std::unique_ptr< Status_type > Status,
                                             ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldFlareVCharacteristicMeasurementType::
    WeldFlareVCharacteristicMeasurementType (const WeldFlareVCharacteristicMeasurementType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldFlareVCharacteristicMeasurementType::
    WeldFlareVCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldFlareVCharacteristicMeasurementType* WeldFlareVCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareVCharacteristicMeasurementType (*this, f, c);
    }

    WeldFlareVCharacteristicMeasurementType::
    ~WeldFlareVCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareVCharacteristicMeasurementType >
    _xsd_WeldFlareVCharacteristicMeasurementType_type_factory_init (
      L"WeldFlareVCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareBevelCharacteristicMeasurementType
    //

    WeldFlareBevelCharacteristicMeasurementType::
    WeldFlareBevelCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldFlareBevelCharacteristicMeasurementType::
    WeldFlareBevelCharacteristicMeasurementType (const id_type& id,
                                                 const Status_type& Status,
                                                 const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldFlareBevelCharacteristicMeasurementType::
    WeldFlareBevelCharacteristicMeasurementType (const id_type& id,
                                                 ::std::unique_ptr< Status_type > Status,
                                                 ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldFlareBevelCharacteristicMeasurementType::
    WeldFlareBevelCharacteristicMeasurementType (const WeldFlareBevelCharacteristicMeasurementType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldFlareBevelCharacteristicMeasurementType::
    WeldFlareBevelCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldFlareBevelCharacteristicMeasurementType* WeldFlareBevelCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareBevelCharacteristicMeasurementType (*this, f, c);
    }

    WeldFlareBevelCharacteristicMeasurementType::
    ~WeldFlareBevelCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareBevelCharacteristicMeasurementType >
    _xsd_WeldFlareBevelCharacteristicMeasurementType_type_factory_init (
      L"WeldFlareBevelCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldScarfCharacteristicMeasurementType
    //

    WeldScarfCharacteristicMeasurementType::
    WeldScarfCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType ()
    {
    }

    WeldScarfCharacteristicMeasurementType::
    WeldScarfCharacteristicMeasurementType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             Status,
                                                             CharacteristicItemId)
    {
    }

    WeldScarfCharacteristicMeasurementType::
    WeldScarfCharacteristicMeasurementType (const id_type& id,
                                            ::std::unique_ptr< Status_type > Status,
                                            ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (id,
                                                             std::move (Status),
                                                             std::move (CharacteristicItemId))
    {
    }

    WeldScarfCharacteristicMeasurementType::
    WeldScarfCharacteristicMeasurementType (const WeldScarfCharacteristicMeasurementType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (x, f, c)
    {
    }

    WeldScarfCharacteristicMeasurementType::
    WeldScarfCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicMeasurementType (e, f, c)
    {
    }

    WeldScarfCharacteristicMeasurementType* WeldScarfCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldScarfCharacteristicMeasurementType (*this, f, c);
    }

    WeldScarfCharacteristicMeasurementType::
    ~WeldScarfCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldScarfCharacteristicMeasurementType >
    _xsd_WeldScarfCharacteristicMeasurementType_type_factory_init (
      L"WeldScarfCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldCompoundCharacteristicMeasurementType
    //

    WeldCompoundCharacteristicMeasurementType::
    WeldCompoundCharacteristicMeasurementType ()
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (),
      WeldCharacteristicMeasurementIds_ (this)
    {
    }

    WeldCompoundCharacteristicMeasurementType::
    WeldCompoundCharacteristicMeasurementType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId,
                                               const WeldCharacteristicMeasurementIds_type& WeldCharacteristicMeasurementIds)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           Status,
                                                           CharacteristicItemId),
      WeldCharacteristicMeasurementIds_ (WeldCharacteristicMeasurementIds, this)
    {
    }

    WeldCompoundCharacteristicMeasurementType::
    WeldCompoundCharacteristicMeasurementType (const id_type& id,
                                               ::std::unique_ptr< Status_type > Status,
                                               ::std::unique_ptr< CharacteristicItemId_type > CharacteristicItemId,
                                               ::std::unique_ptr< WeldCharacteristicMeasurementIds_type > WeldCharacteristicMeasurementIds)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (id,
                                                           std::move (Status),
                                                           std::move (CharacteristicItemId)),
      WeldCharacteristicMeasurementIds_ (std::move (WeldCharacteristicMeasurementIds), this)
    {
    }

    WeldCompoundCharacteristicMeasurementType::
    WeldCompoundCharacteristicMeasurementType (const WeldCompoundCharacteristicMeasurementType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (x, f, c),
      WeldCharacteristicMeasurementIds_ (x.WeldCharacteristicMeasurementIds_, f, this)
    {
    }

    WeldCompoundCharacteristicMeasurementType::
    WeldCompoundCharacteristicMeasurementType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicMeasurementBaseType (e, f | ::xml_schema::flags::base, c),
      WeldCharacteristicMeasurementIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldCompoundCharacteristicMeasurementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicMeasurementBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WeldCharacteristicMeasurementIds
        //
        if (n.name () == L"WeldCharacteristicMeasurementIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WeldCharacteristicMeasurementIds_type > r (
            WeldCharacteristicMeasurementIds_traits::create (i, f, this));

          if (!WeldCharacteristicMeasurementIds_.present ())
          {
            this->WeldCharacteristicMeasurementIds_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WeldCharacteristicMeasurementIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WeldCharacteristicMeasurementIds",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldCompoundCharacteristicMeasurementType* WeldCompoundCharacteristicMeasurementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldCompoundCharacteristicMeasurementType (*this, f, c);
    }

    WeldCompoundCharacteristicMeasurementType& WeldCompoundCharacteristicMeasurementType::
    operator= (const WeldCompoundCharacteristicMeasurementType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (*this) = x;
        this->WeldCharacteristicMeasurementIds_ = x.WeldCharacteristicMeasurementIds_;
      }

      return *this;
    }

    WeldCompoundCharacteristicMeasurementType::
    ~WeldCompoundCharacteristicMeasurementType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldCompoundCharacteristicMeasurementType >
    _xsd_WeldCompoundCharacteristicMeasurementType_type_factory_init (
      L"WeldCompoundCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldCharacteristicItemBaseType
    //

    WeldCharacteristicItemBaseType::
    WeldCharacteristicItemBaseType ()
    : ::xsd::qif30::CharacteristicItemBaseType ()
    {
    }

    WeldCharacteristicItemBaseType::
    WeldCharacteristicItemBaseType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                CharacteristicNominalId)
    {
    }

    WeldCharacteristicItemBaseType::
    WeldCharacteristicItemBaseType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::CharacteristicItemBaseType (id,
                                                std::move (CharacteristicNominalId))
    {
    }

    WeldCharacteristicItemBaseType::
    WeldCharacteristicItemBaseType (const WeldCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (x, f, c)
    {
    }

    WeldCharacteristicItemBaseType::
    WeldCharacteristicItemBaseType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::CharacteristicItemBaseType (e, f, c)
    {
    }

    WeldCharacteristicItemBaseType::
    ~WeldCharacteristicItemBaseType ()
    {
    }

    // WeldGrooveCharacteristicNominalType
    //

    WeldGrooveCharacteristicNominalType::
    WeldGrooveCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      OneSide_ (this),
      BothSides_ (this)
    {
    }

    WeldGrooveCharacteristicNominalType::
    WeldGrooveCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      OneSide_ (this),
      BothSides_ (this)
    {
    }

    WeldGrooveCharacteristicNominalType::
    WeldGrooveCharacteristicNominalType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      OneSide_ (this),
      BothSides_ (this)
    {
    }

    WeldGrooveCharacteristicNominalType::
    WeldGrooveCharacteristicNominalType (const WeldGrooveCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      OneSide_ (x.OneSide_, f, this),
      BothSides_ (x.BothSides_, f, this)
    {
    }

    WeldGrooveCharacteristicNominalType::
    WeldGrooveCharacteristicNominalType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      OneSide_ (this),
      BothSides_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldGrooveCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // OneSide
        //
        if (n.name () == L"OneSide" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OneSide_type > r (
            OneSide_traits::create (i, f, this));

          if (!this->OneSide_)
          {
            this->OneSide_.set (::std::move (r));
            continue;
          }
        }

        // BothSides
        //
        if (n.name () == L"BothSides" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BothSides_type > r (
            BothSides_traits::create (i, f, this));

          if (!this->BothSides_)
          {
            this->BothSides_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldGrooveCharacteristicNominalType* WeldGrooveCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldGrooveCharacteristicNominalType (*this, f, c);
    }

    WeldGrooveCharacteristicNominalType& WeldGrooveCharacteristicNominalType::
    operator= (const WeldGrooveCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->OneSide_ = x.OneSide_;
        this->BothSides_ = x.BothSides_;
      }

      return *this;
    }

    WeldGrooveCharacteristicNominalType::
    ~WeldGrooveCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldGrooveCharacteristicNominalType >
    _xsd_WeldGrooveCharacteristicNominalType_type_factory_init (
      L"WeldGrooveCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFinishingType
    //

    WeldFinishingType::
    WeldFinishingType ()
    : ::xml_schema::type (),
      ContourSymbol_ (this),
      FinishingDesignator_ (this)
    {
    }

    WeldFinishingType::
    WeldFinishingType (const ContourSymbol_type& ContourSymbol)
    : ::xml_schema::type (),
      ContourSymbol_ (ContourSymbol, this),
      FinishingDesignator_ (this)
    {
    }

    WeldFinishingType::
    WeldFinishingType (const WeldFinishingType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ContourSymbol_ (x.ContourSymbol_, f, this),
      FinishingDesignator_ (x.FinishingDesignator_, f, this)
    {
    }

    WeldFinishingType::
    WeldFinishingType (const xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ContourSymbol_ (this),
      FinishingDesignator_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldFinishingType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ContourSymbol
        //
        if (n.name () == L"ContourSymbol" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ContourSymbol_type > r (
            ContourSymbol_traits::create (i, f, this));

          if (!ContourSymbol_.present ())
          {
            this->ContourSymbol_.set (::std::move (r));
            continue;
          }
        }

        // FinishingDesignator
        //
        if (n.name () == L"FinishingDesignator" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FinishingDesignator_type > r (
            FinishingDesignator_traits::create (i, f, this));

          if (!this->FinishingDesignator_)
          {
            this->FinishingDesignator_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!ContourSymbol_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"ContourSymbol",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldFinishingType* WeldFinishingType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFinishingType (*this, f, c);
    }

    WeldFinishingType& WeldFinishingType::
    operator= (const WeldFinishingType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ContourSymbol_ = x.ContourSymbol_;
        this->FinishingDesignator_ = x.FinishingDesignator_;
      }

      return *this;
    }

    WeldFinishingType::
    ~WeldFinishingType ()
    {
    }

    // WeldOneSideParametersBaseType
    //

    WeldOneSideParametersBaseType::
    WeldOneSideParametersBaseType ()
    : ::xml_schema::type (),
      Finishing_ (this)
    {
    }

    WeldOneSideParametersBaseType::
    WeldOneSideParametersBaseType (const WeldOneSideParametersBaseType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Finishing_ (x.Finishing_, f, this)
    {
    }

    WeldOneSideParametersBaseType::
    WeldOneSideParametersBaseType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Finishing_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldOneSideParametersBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Finishing
        //
        if (n.name () == L"Finishing" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Finishing_type > r (
            Finishing_traits::create (i, f, this));

          if (!this->Finishing_)
          {
            this->Finishing_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldOneSideParametersBaseType* WeldOneSideParametersBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldOneSideParametersBaseType (*this, f, c);
    }

    WeldOneSideParametersBaseType& WeldOneSideParametersBaseType::
    operator= (const WeldOneSideParametersBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Finishing_ = x.Finishing_;
      }

      return *this;
    }

    WeldOneSideParametersBaseType::
    ~WeldOneSideParametersBaseType ()
    {
    }

    // WeldOneSideParametersExtendSizeType
    //

    WeldOneSideParametersExtendSizeType::
    WeldOneSideParametersExtendSizeType ()
    : ::xsd::qif30::WeldOneSideParametersBaseType (),
      Size_ (this)
    {
    }

    WeldOneSideParametersExtendSizeType::
    WeldOneSideParametersExtendSizeType (const WeldOneSideParametersExtendSizeType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersBaseType (x, f, c),
      Size_ (x.Size_, f, this)
    {
    }

    WeldOneSideParametersExtendSizeType::
    WeldOneSideParametersExtendSizeType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersBaseType (e, f | ::xml_schema::flags::base, c),
      Size_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldOneSideParametersExtendSizeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldOneSideParametersBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Size
        //
        if (n.name () == L"Size" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Size_type > r (
            Size_traits::create (i, f, this));

          if (!this->Size_)
          {
            this->Size_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldOneSideParametersExtendSizeType* WeldOneSideParametersExtendSizeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldOneSideParametersExtendSizeType (*this, f, c);
    }

    WeldOneSideParametersExtendSizeType& WeldOneSideParametersExtendSizeType::
    operator= (const WeldOneSideParametersExtendSizeType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldOneSideParametersBaseType& > (*this) = x;
        this->Size_ = x.Size_;
      }

      return *this;
    }

    WeldOneSideParametersExtendSizeType::
    ~WeldOneSideParametersExtendSizeType ()
    {
    }

    // WeldOneSideParametersExtendType
    //

    WeldOneSideParametersExtendType::
    WeldOneSideParametersExtendType ()
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (),
      Length_ (this),
      Pitch_ (this),
      WeldNumber_ (this)
    {
    }

    WeldOneSideParametersExtendType::
    WeldOneSideParametersExtendType (const WeldOneSideParametersExtendType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (x, f, c),
      Length_ (x.Length_, f, this),
      Pitch_ (x.Pitch_, f, this),
      WeldNumber_ (x.WeldNumber_, f, this)
    {
    }

    WeldOneSideParametersExtendType::
    WeldOneSideParametersExtendType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (e, f | ::xml_schema::flags::base, c),
      Length_ (this),
      Pitch_ (this),
      WeldNumber_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldOneSideParametersExtendType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldOneSideParametersExtendSizeType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Length
        //
        if (n.name () == L"Length" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Length_type > r (
            Length_traits::create (i, f, this));

          if (!this->Length_)
          {
            this->Length_.set (::std::move (r));
            continue;
          }
        }

        // Pitch
        //
        if (n.name () == L"Pitch" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Pitch_type > r (
            Pitch_traits::create (i, f, this));

          if (!this->Pitch_)
          {
            this->Pitch_.set (::std::move (r));
            continue;
          }
        }

        // WeldNumber
        //
        if (n.name () == L"WeldNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WeldNumber_type > r (
            WeldNumber_traits::create (i, f, this));

          if (!this->WeldNumber_)
          {
            this->WeldNumber_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldOneSideParametersExtendType* WeldOneSideParametersExtendType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldOneSideParametersExtendType (*this, f, c);
    }

    WeldOneSideParametersExtendType& WeldOneSideParametersExtendType::
    operator= (const WeldOneSideParametersExtendType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (*this) = x;
        this->Length_ = x.Length_;
        this->Pitch_ = x.Pitch_;
        this->WeldNumber_ = x.WeldNumber_;
      }

      return *this;
    }

    WeldOneSideParametersExtendType::
    ~WeldOneSideParametersExtendType ()
    {
    }

    // WeldGrooveOneSideParametersType
    //

    WeldGrooveOneSideParametersType::
    WeldGrooveOneSideParametersType ()
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (),
      Groove_ (this),
      Angle_ (this),
      RootOpening_ (this),
      Length_ (this),
      Pitch_ (this)
    {
    }

    WeldGrooveOneSideParametersType::
    WeldGrooveOneSideParametersType (const WeldGrooveOneSideParametersType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (x, f, c),
      Groove_ (x.Groove_, f, this),
      Angle_ (x.Angle_, f, this),
      RootOpening_ (x.RootOpening_, f, this),
      Length_ (x.Length_, f, this),
      Pitch_ (x.Pitch_, f, this)
    {
    }

    WeldGrooveOneSideParametersType::
    WeldGrooveOneSideParametersType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (e, f | ::xml_schema::flags::base, c),
      Groove_ (this),
      Angle_ (this),
      RootOpening_ (this),
      Length_ (this),
      Pitch_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldGrooveOneSideParametersType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldOneSideParametersExtendSizeType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Groove
        //
        if (n.name () == L"Groove" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Groove_type > r (
            Groove_traits::create (i, f, this));

          if (!this->Groove_)
          {
            this->Groove_.set (::std::move (r));
            continue;
          }
        }

        // Angle
        //
        if (n.name () == L"Angle" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Angle_type > r (
            Angle_traits::create (i, f, this));

          if (!this->Angle_)
          {
            this->Angle_.set (::std::move (r));
            continue;
          }
        }

        // RootOpening
        //
        if (n.name () == L"RootOpening" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< RootOpening_type > r (
            RootOpening_traits::create (i, f, this));

          if (!this->RootOpening_)
          {
            this->RootOpening_.set (::std::move (r));
            continue;
          }
        }

        // Length
        //
        if (n.name () == L"Length" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Length_type > r (
            Length_traits::create (i, f, this));

          if (!this->Length_)
          {
            this->Length_.set (::std::move (r));
            continue;
          }
        }

        // Pitch
        //
        if (n.name () == L"Pitch" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Pitch_type > r (
            Pitch_traits::create (i, f, this));

          if (!this->Pitch_)
          {
            this->Pitch_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldGrooveOneSideParametersType* WeldGrooveOneSideParametersType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldGrooveOneSideParametersType (*this, f, c);
    }

    WeldGrooveOneSideParametersType& WeldGrooveOneSideParametersType::
    operator= (const WeldGrooveOneSideParametersType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (*this) = x;
        this->Groove_ = x.Groove_;
        this->Angle_ = x.Angle_;
        this->RootOpening_ = x.RootOpening_;
        this->Length_ = x.Length_;
        this->Pitch_ = x.Pitch_;
      }

      return *this;
    }

    WeldGrooveOneSideParametersType::
    ~WeldGrooveOneSideParametersType ()
    {
    }

    // WeldSupplementarySymbolEnumType
    //

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_WeldSupplementarySymbolEnumType_convert ();
    }

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (const xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_WeldSupplementarySymbolEnumType_convert ();
    }

    WeldSupplementarySymbolEnumType::
    WeldSupplementarySymbolEnumType (const ::std::wstring& s,
                                     const xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_WeldSupplementarySymbolEnumType_convert ();
    }

    WeldSupplementarySymbolEnumType* WeldSupplementarySymbolEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSupplementarySymbolEnumType (*this, f, c);
    }

    WeldSupplementarySymbolEnumType::value WeldSupplementarySymbolEnumType::
    _xsd_WeldSupplementarySymbolEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_WeldSupplementarySymbolEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_WeldSupplementarySymbolEnumType_indexes_,
                        _xsd_WeldSupplementarySymbolEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_WeldSupplementarySymbolEnumType_indexes_ + 4 || _xsd_WeldSupplementarySymbolEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const WeldSupplementarySymbolEnumType::
    _xsd_WeldSupplementarySymbolEnumType_literals_[4] =
    {
      L"BACK_WELD",
      L"MELT_THROUGH",
      L"CONSUMABLE_INSERT",
      L"REMOVABLE_BACKING"
    };

    const WeldSupplementarySymbolEnumType::value WeldSupplementarySymbolEnumType::
    _xsd_WeldSupplementarySymbolEnumType_indexes_[4] =
    {
      ::xsd::qif30::WeldSupplementarySymbolEnumType::BACK_WELD,
      ::xsd::qif30::WeldSupplementarySymbolEnumType::CONSUMABLE_INSERT,
      ::xsd::qif30::WeldSupplementarySymbolEnumType::MELT_THROUGH,
      ::xsd::qif30::WeldSupplementarySymbolEnumType::REMOVABLE_BACKING
    };

    // WeldGrooveOneSideType
    //

    WeldGrooveOneSideType::
    WeldGrooveOneSideType ()
    : ::xml_schema::type (),
      LocationSignificance_ (this),
      SideParameters_ (this),
      SupplementarySymbol_ (this)
    {
    }

    WeldGrooveOneSideType::
    WeldGrooveOneSideType (const LocationSignificance_type& LocationSignificance)
    : ::xml_schema::type (),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this),
      SupplementarySymbol_ (this)
    {
    }

    WeldGrooveOneSideType::
    WeldGrooveOneSideType (const WeldGrooveOneSideType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this),
      SupplementarySymbol_ (x.SupplementarySymbol_, f, this)
    {
    }

    WeldGrooveOneSideType::
    WeldGrooveOneSideType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this),
      SupplementarySymbol_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldGrooveOneSideType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        // SupplementarySymbol
        //
        if (n.name () == L"SupplementarySymbol" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SupplementarySymbol_type > r (
            SupplementarySymbol_traits::create (i, f, this));

          if (!this->SupplementarySymbol_)
          {
            this->SupplementarySymbol_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldGrooveOneSideType* WeldGrooveOneSideType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldGrooveOneSideType (*this, f, c);
    }

    WeldGrooveOneSideType& WeldGrooveOneSideType::
    operator= (const WeldGrooveOneSideType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
        this->SupplementarySymbol_ = x.SupplementarySymbol_;
      }

      return *this;
    }

    WeldGrooveOneSideType::
    ~WeldGrooveOneSideType ()
    {
    }

    // WeldGrooveBothSidesBaseType
    //

    WeldGrooveBothSidesBaseType::
    WeldGrooveBothSidesBaseType ()
    : ::xml_schema::type (),
      ArrowSideParameters_ (this),
      OtherSideParameters_ (this)
    {
    }

    WeldGrooveBothSidesBaseType::
    WeldGrooveBothSidesBaseType (const WeldGrooveBothSidesBaseType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ArrowSideParameters_ (x.ArrowSideParameters_, f, this),
      OtherSideParameters_ (x.OtherSideParameters_, f, this)
    {
    }

    WeldGrooveBothSidesBaseType::
    WeldGrooveBothSidesBaseType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ArrowSideParameters_ (this),
      OtherSideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldGrooveBothSidesBaseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ArrowSideParameters
        //
        if (n.name () == L"ArrowSideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ArrowSideParameters_type > r (
            ArrowSideParameters_traits::create (i, f, this));

          if (!this->ArrowSideParameters_)
          {
            this->ArrowSideParameters_.set (::std::move (r));
            continue;
          }
        }

        // OtherSideParameters
        //
        if (n.name () == L"OtherSideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherSideParameters_type > r (
            OtherSideParameters_traits::create (i, f, this));

          if (!this->OtherSideParameters_)
          {
            this->OtherSideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldGrooveBothSidesBaseType* WeldGrooveBothSidesBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldGrooveBothSidesBaseType (*this, f, c);
    }

    WeldGrooveBothSidesBaseType& WeldGrooveBothSidesBaseType::
    operator= (const WeldGrooveBothSidesBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ArrowSideParameters_ = x.ArrowSideParameters_;
        this->OtherSideParameters_ = x.OtherSideParameters_;
      }

      return *this;
    }

    WeldGrooveBothSidesBaseType::
    ~WeldGrooveBothSidesBaseType ()
    {
    }

    // WeldGrooveBothSidesExtendedType
    //

    WeldGrooveBothSidesExtendedType::
    WeldGrooveBothSidesExtendedType ()
    : ::xsd::qif30::WeldGrooveBothSidesBaseType (),
      Spacer_ (this)
    {
    }

    WeldGrooveBothSidesExtendedType::
    WeldGrooveBothSidesExtendedType (const WeldGrooveBothSidesExtendedType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveBothSidesBaseType (x, f, c),
      Spacer_ (x.Spacer_, f, this)
    {
    }

    WeldGrooveBothSidesExtendedType::
    WeldGrooveBothSidesExtendedType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveBothSidesBaseType (e, f | ::xml_schema::flags::base, c),
      Spacer_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldGrooveBothSidesExtendedType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldGrooveBothSidesBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Spacer
        //
        if (n.name () == L"Spacer" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->Spacer_)
          {
            this->Spacer_.set (Spacer_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    WeldGrooveBothSidesExtendedType* WeldGrooveBothSidesExtendedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldGrooveBothSidesExtendedType (*this, f, c);
    }

    WeldGrooveBothSidesExtendedType& WeldGrooveBothSidesExtendedType::
    operator= (const WeldGrooveBothSidesExtendedType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldGrooveBothSidesBaseType& > (*this) = x;
        this->Spacer_ = x.Spacer_;
      }

      return *this;
    }

    WeldGrooveBothSidesExtendedType::
    ~WeldGrooveBothSidesExtendedType ()
    {
    }

    // WeldSquareCharacteristicNominalType
    //

    WeldSquareCharacteristicNominalType::
    WeldSquareCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldSquareCharacteristicNominalType::
    WeldSquareCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldSquareCharacteristicNominalType::
    WeldSquareCharacteristicNominalType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldSquareCharacteristicNominalType::
    WeldSquareCharacteristicNominalType (const WeldSquareCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldSquareCharacteristicNominalType::
    WeldSquareCharacteristicNominalType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldSquareCharacteristicNominalType* WeldSquareCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSquareCharacteristicNominalType (*this, f, c);
    }

    WeldSquareCharacteristicNominalType::
    ~WeldSquareCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSquareCharacteristicNominalType >
    _xsd_WeldSquareCharacteristicNominalType_type_factory_init (
      L"WeldSquareCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldBevelCharacteristicNominalType
    //

    WeldBevelCharacteristicNominalType::
    WeldBevelCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldBevelCharacteristicNominalType::
    WeldBevelCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldBevelCharacteristicNominalType::
    WeldBevelCharacteristicNominalType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldBevelCharacteristicNominalType::
    WeldBevelCharacteristicNominalType (const WeldBevelCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldBevelCharacteristicNominalType::
    WeldBevelCharacteristicNominalType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldBevelCharacteristicNominalType* WeldBevelCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldBevelCharacteristicNominalType (*this, f, c);
    }

    WeldBevelCharacteristicNominalType::
    ~WeldBevelCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldBevelCharacteristicNominalType >
    _xsd_WeldBevelCharacteristicNominalType_type_factory_init (
      L"WeldBevelCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldVCharacteristicNominalType
    //

    WeldVCharacteristicNominalType::
    WeldVCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldVCharacteristicNominalType::
    WeldVCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldVCharacteristicNominalType::
    WeldVCharacteristicNominalType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldVCharacteristicNominalType::
    WeldVCharacteristicNominalType (const WeldVCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldVCharacteristicNominalType::
    WeldVCharacteristicNominalType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldVCharacteristicNominalType* WeldVCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldVCharacteristicNominalType (*this, f, c);
    }

    WeldVCharacteristicNominalType::
    ~WeldVCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldVCharacteristicNominalType >
    _xsd_WeldVCharacteristicNominalType_type_factory_init (
      L"WeldVCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldUCharacteristicNominalType
    //

    WeldUCharacteristicNominalType::
    WeldUCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldUCharacteristicNominalType::
    WeldUCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldUCharacteristicNominalType::
    WeldUCharacteristicNominalType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldUCharacteristicNominalType::
    WeldUCharacteristicNominalType (const WeldUCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldUCharacteristicNominalType::
    WeldUCharacteristicNominalType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldUCharacteristicNominalType* WeldUCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldUCharacteristicNominalType (*this, f, c);
    }

    WeldUCharacteristicNominalType::
    ~WeldUCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldUCharacteristicNominalType >
    _xsd_WeldUCharacteristicNominalType_type_factory_init (
      L"WeldUCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldJCharacteristicNominalType
    //

    WeldJCharacteristicNominalType::
    WeldJCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldJCharacteristicNominalType::
    WeldJCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldJCharacteristicNominalType::
    WeldJCharacteristicNominalType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldJCharacteristicNominalType::
    WeldJCharacteristicNominalType (const WeldJCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldJCharacteristicNominalType::
    WeldJCharacteristicNominalType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldJCharacteristicNominalType* WeldJCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldJCharacteristicNominalType (*this, f, c);
    }

    WeldJCharacteristicNominalType::
    ~WeldJCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldJCharacteristicNominalType >
    _xsd_WeldJCharacteristicNominalType_type_factory_init (
      L"WeldJCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareVCharacteristicNominalType
    //

    WeldFlareVCharacteristicNominalType::
    WeldFlareVCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldFlareVCharacteristicNominalType::
    WeldFlareVCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldFlareVCharacteristicNominalType::
    WeldFlareVCharacteristicNominalType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldFlareVCharacteristicNominalType::
    WeldFlareVCharacteristicNominalType (const WeldFlareVCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldFlareVCharacteristicNominalType::
    WeldFlareVCharacteristicNominalType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldFlareVCharacteristicNominalType* WeldFlareVCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareVCharacteristicNominalType (*this, f, c);
    }

    WeldFlareVCharacteristicNominalType::
    ~WeldFlareVCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareVCharacteristicNominalType >
    _xsd_WeldFlareVCharacteristicNominalType_type_factory_init (
      L"WeldFlareVCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareBevelCharacteristicNominalType
    //

    WeldFlareBevelCharacteristicNominalType::
    WeldFlareBevelCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldFlareBevelCharacteristicNominalType::
    WeldFlareBevelCharacteristicNominalType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldFlareBevelCharacteristicNominalType::
    WeldFlareBevelCharacteristicNominalType (const id_type& id,
                                             ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldFlareBevelCharacteristicNominalType::
    WeldFlareBevelCharacteristicNominalType (const WeldFlareBevelCharacteristicNominalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldFlareBevelCharacteristicNominalType::
    WeldFlareBevelCharacteristicNominalType (const xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldFlareBevelCharacteristicNominalType* WeldFlareBevelCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareBevelCharacteristicNominalType (*this, f, c);
    }

    WeldFlareBevelCharacteristicNominalType::
    ~WeldFlareBevelCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareBevelCharacteristicNominalType >
    _xsd_WeldFlareBevelCharacteristicNominalType_type_factory_init (
      L"WeldFlareBevelCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldScarfCharacteristicNominalType
    //

    WeldScarfCharacteristicNominalType::
    WeldScarfCharacteristicNominalType ()
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType ()
    {
    }

    WeldScarfCharacteristicNominalType::
    WeldScarfCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    WeldScarfCharacteristicNominalType::
    WeldScarfCharacteristicNominalType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (id,
                                                         std::move (CharacteristicDefinitionId))
    {
    }

    WeldScarfCharacteristicNominalType::
    WeldScarfCharacteristicNominalType (const WeldScarfCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (x, f, c)
    {
    }

    WeldScarfCharacteristicNominalType::
    WeldScarfCharacteristicNominalType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldGrooveCharacteristicNominalType (e, f, c)
    {
    }

    WeldScarfCharacteristicNominalType* WeldScarfCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldScarfCharacteristicNominalType (*this, f, c);
    }

    WeldScarfCharacteristicNominalType::
    ~WeldScarfCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldScarfCharacteristicNominalType >
    _xsd_WeldScarfCharacteristicNominalType_type_factory_init (
      L"WeldScarfCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFilletOneSideInBothSidesType
    //

    WeldFilletOneSideInBothSidesType::
    WeldFilletOneSideInBothSidesType ()
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (),
      LengthOfEachWeld_ (this),
      Pitch_ (this)
    {
    }

    WeldFilletOneSideInBothSidesType::
    WeldFilletOneSideInBothSidesType (const WeldFilletOneSideInBothSidesType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (x, f, c),
      LengthOfEachWeld_ (x.LengthOfEachWeld_, f, this),
      Pitch_ (x.Pitch_, f, this)
    {
    }

    WeldFilletOneSideInBothSidesType::
    WeldFilletOneSideInBothSidesType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (e, f | ::xml_schema::flags::base, c),
      LengthOfEachWeld_ (this),
      Pitch_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldFilletOneSideInBothSidesType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldOneSideParametersExtendSizeType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LengthOfEachWeld
        //
        if (n.name () == L"LengthOfEachWeld" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LengthOfEachWeld_type > r (
            LengthOfEachWeld_traits::create (i, f, this));

          if (!this->LengthOfEachWeld_)
          {
            this->LengthOfEachWeld_.set (::std::move (r));
            continue;
          }
        }

        // Pitch
        //
        if (n.name () == L"Pitch" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Pitch_type > r (
            Pitch_traits::create (i, f, this));

          if (!this->Pitch_)
          {
            this->Pitch_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldFilletOneSideInBothSidesType* WeldFilletOneSideInBothSidesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletOneSideInBothSidesType (*this, f, c);
    }

    WeldFilletOneSideInBothSidesType& WeldFilletOneSideInBothSidesType::
    operator= (const WeldFilletOneSideInBothSidesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (*this) = x;
        this->LengthOfEachWeld_ = x.LengthOfEachWeld_;
        this->Pitch_ = x.Pitch_;
      }

      return *this;
    }

    WeldFilletOneSideInBothSidesType::
    ~WeldFilletOneSideInBothSidesType ()
    {
    }

    // WeldFilletUnequalLegLengthType
    //

    WeldFilletUnequalLegLengthType::
    WeldFilletUnequalLegLengthType ()
    : ::xml_schema::type (),
      FirstLegLength_ (this),
      SecondLegLength_ (this)
    {
    }

    WeldFilletUnequalLegLengthType::
    WeldFilletUnequalLegLengthType (const FirstLegLength_type& FirstLegLength,
                                    const SecondLegLength_type& SecondLegLength)
    : ::xml_schema::type (),
      FirstLegLength_ (FirstLegLength, this),
      SecondLegLength_ (SecondLegLength, this)
    {
    }

    WeldFilletUnequalLegLengthType::
    WeldFilletUnequalLegLengthType (::std::unique_ptr< FirstLegLength_type > FirstLegLength,
                                    ::std::unique_ptr< SecondLegLength_type > SecondLegLength)
    : ::xml_schema::type (),
      FirstLegLength_ (std::move (FirstLegLength), this),
      SecondLegLength_ (std::move (SecondLegLength), this)
    {
    }

    WeldFilletUnequalLegLengthType::
    WeldFilletUnequalLegLengthType (const WeldFilletUnequalLegLengthType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FirstLegLength_ (x.FirstLegLength_, f, this),
      SecondLegLength_ (x.SecondLegLength_, f, this)
    {
    }

    WeldFilletUnequalLegLengthType::
    WeldFilletUnequalLegLengthType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FirstLegLength_ (this),
      SecondLegLength_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldFilletUnequalLegLengthType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // FirstLegLength
        //
        if (n.name () == L"FirstLegLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< FirstLegLength_type > r (
            FirstLegLength_traits::create (i, f, this));

          if (!FirstLegLength_.present ())
          {
            this->FirstLegLength_.set (::std::move (r));
            continue;
          }
        }

        // SecondLegLength
        //
        if (n.name () == L"SecondLegLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SecondLegLength_type > r (
            SecondLegLength_traits::create (i, f, this));

          if (!SecondLegLength_.present ())
          {
            this->SecondLegLength_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!FirstLegLength_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"FirstLegLength",
          L"http://qifstandards.org/xsd/qif3");
      }

      if (!SecondLegLength_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"SecondLegLength",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldFilletUnequalLegLengthType* WeldFilletUnequalLegLengthType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletUnequalLegLengthType (*this, f, c);
    }

    WeldFilletUnequalLegLengthType& WeldFilletUnequalLegLengthType::
    operator= (const WeldFilletUnequalLegLengthType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->FirstLegLength_ = x.FirstLegLength_;
        this->SecondLegLength_ = x.SecondLegLength_;
      }

      return *this;
    }

    WeldFilletUnequalLegLengthType::
    ~WeldFilletUnequalLegLengthType ()
    {
    }

    // WeldFilletEqualLegLengthType
    //

    WeldFilletEqualLegLengthType::
    WeldFilletEqualLegLengthType ()
    : ::xml_schema::type (),
      Size_ (this),
      LengthOfEachWeld_ (this),
      Pitch_ (this)
    {
    }

    WeldFilletEqualLegLengthType::
    WeldFilletEqualLegLengthType (const WeldFilletEqualLegLengthType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Size_ (x.Size_, f, this),
      LengthOfEachWeld_ (x.LengthOfEachWeld_, f, this),
      Pitch_ (x.Pitch_, f, this)
    {
    }

    WeldFilletEqualLegLengthType::
    WeldFilletEqualLegLengthType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Size_ (this),
      LengthOfEachWeld_ (this),
      Pitch_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldFilletEqualLegLengthType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Size
        //
        if (n.name () == L"Size" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Size_type > r (
            Size_traits::create (i, f, this));

          if (!this->Size_)
          {
            this->Size_.set (::std::move (r));
            continue;
          }
        }

        // LengthOfEachWeld
        //
        if (n.name () == L"LengthOfEachWeld" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LengthOfEachWeld_type > r (
            LengthOfEachWeld_traits::create (i, f, this));

          if (!this->LengthOfEachWeld_)
          {
            this->LengthOfEachWeld_.set (::std::move (r));
            continue;
          }
        }

        // Pitch
        //
        if (n.name () == L"Pitch" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Pitch_type > r (
            Pitch_traits::create (i, f, this));

          if (!this->Pitch_)
          {
            this->Pitch_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldFilletEqualLegLengthType* WeldFilletEqualLegLengthType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletEqualLegLengthType (*this, f, c);
    }

    WeldFilletEqualLegLengthType& WeldFilletEqualLegLengthType::
    operator= (const WeldFilletEqualLegLengthType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Size_ = x.Size_;
        this->LengthOfEachWeld_ = x.LengthOfEachWeld_;
        this->Pitch_ = x.Pitch_;
      }

      return *this;
    }

    WeldFilletEqualLegLengthType::
    ~WeldFilletEqualLegLengthType ()
    {
    }

    // WeldFilletOneSideType
    //

    WeldFilletOneSideType::
    WeldFilletOneSideType ()
    : ::xsd::qif30::WeldOneSideParametersBaseType (),
      EqualLegLength_ (this),
      UnEqualLegLength_ (this)
    {
    }

    WeldFilletOneSideType::
    WeldFilletOneSideType (const WeldFilletOneSideType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersBaseType (x, f, c),
      EqualLegLength_ (x.EqualLegLength_, f, this),
      UnEqualLegLength_ (x.UnEqualLegLength_, f, this)
    {
    }

    WeldFilletOneSideType::
    WeldFilletOneSideType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersBaseType (e, f | ::xml_schema::flags::base, c),
      EqualLegLength_ (this),
      UnEqualLegLength_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldFilletOneSideType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldOneSideParametersBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // EqualLegLength
        //
        if (n.name () == L"EqualLegLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< EqualLegLength_type > r (
            EqualLegLength_traits::create (i, f, this));

          if (!this->EqualLegLength_)
          {
            this->EqualLegLength_.set (::std::move (r));
            continue;
          }
        }

        // UnEqualLegLength
        //
        if (n.name () == L"UnEqualLegLength" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< UnEqualLegLength_type > r (
            UnEqualLegLength_traits::create (i, f, this));

          if (!this->UnEqualLegLength_)
          {
            this->UnEqualLegLength_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldFilletOneSideType* WeldFilletOneSideType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletOneSideType (*this, f, c);
    }

    WeldFilletOneSideType& WeldFilletOneSideType::
    operator= (const WeldFilletOneSideType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldOneSideParametersBaseType& > (*this) = x;
        this->EqualLegLength_ = x.EqualLegLength_;
        this->UnEqualLegLength_ = x.UnEqualLegLength_;
      }

      return *this;
    }

    WeldFilletOneSideType::
    ~WeldFilletOneSideType ()
    {
    }

    // WeldFilletBothSidesType
    //

    WeldFilletBothSidesType::
    WeldFilletBothSidesType ()
    : ::xml_schema::type (),
      ArrowSide_ (this),
      OtherSide_ (this),
      Staggered_ (this)
    {
    }

    WeldFilletBothSidesType::
    WeldFilletBothSidesType (const WeldFilletBothSidesType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ArrowSide_ (x.ArrowSide_, f, this),
      OtherSide_ (x.OtherSide_, f, this),
      Staggered_ (x.Staggered_, f, this)
    {
    }

    WeldFilletBothSidesType::
    WeldFilletBothSidesType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ArrowSide_ (this),
      OtherSide_ (this),
      Staggered_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldFilletBothSidesType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ArrowSide
        //
        if (n.name () == L"ArrowSide" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ArrowSide_type > r (
            ArrowSide_traits::create (i, f, this));

          if (!this->ArrowSide_)
          {
            this->ArrowSide_.set (::std::move (r));
            continue;
          }
        }

        // OtherSide
        //
        if (n.name () == L"OtherSide" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OtherSide_type > r (
            OtherSide_traits::create (i, f, this));

          if (!this->OtherSide_)
          {
            this->OtherSide_.set (::std::move (r));
            continue;
          }
        }

        // Staggered
        //
        if (n.name () == L"Staggered" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->Staggered_)
          {
            this->Staggered_.set (Staggered_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    WeldFilletBothSidesType* WeldFilletBothSidesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletBothSidesType (*this, f, c);
    }

    WeldFilletBothSidesType& WeldFilletBothSidesType::
    operator= (const WeldFilletBothSidesType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->ArrowSide_ = x.ArrowSide_;
        this->OtherSide_ = x.OtherSide_;
        this->Staggered_ = x.Staggered_;
      }

      return *this;
    }

    WeldFilletBothSidesType::
    ~WeldFilletBothSidesType ()
    {
    }

    // WeldCompoundCharacteristicNominalType
    //

    WeldCompoundCharacteristicNominalType::
    WeldCompoundCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      WeldCharacteristicNominalIds_ (this)
    {
    }

    WeldCompoundCharacteristicNominalType::
    WeldCompoundCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                           const WeldCharacteristicNominalIds_type& WeldCharacteristicNominalIds)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      WeldCharacteristicNominalIds_ (WeldCharacteristicNominalIds, this)
    {
    }

    WeldCompoundCharacteristicNominalType::
    WeldCompoundCharacteristicNominalType (const id_type& id,
                                           ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                           ::std::unique_ptr< WeldCharacteristicNominalIds_type > WeldCharacteristicNominalIds)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      WeldCharacteristicNominalIds_ (std::move (WeldCharacteristicNominalIds), this)
    {
    }

    WeldCompoundCharacteristicNominalType::
    WeldCompoundCharacteristicNominalType (const WeldCompoundCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      WeldCharacteristicNominalIds_ (x.WeldCharacteristicNominalIds_, f, this)
    {
    }

    WeldCompoundCharacteristicNominalType::
    WeldCompoundCharacteristicNominalType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      WeldCharacteristicNominalIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldCompoundCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WeldCharacteristicNominalIds
        //
        if (n.name () == L"WeldCharacteristicNominalIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WeldCharacteristicNominalIds_type > r (
            WeldCharacteristicNominalIds_traits::create (i, f, this));

          if (!WeldCharacteristicNominalIds_.present ())
          {
            this->WeldCharacteristicNominalIds_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WeldCharacteristicNominalIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WeldCharacteristicNominalIds",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldCompoundCharacteristicNominalType* WeldCompoundCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldCompoundCharacteristicNominalType (*this, f, c);
    }

    WeldCompoundCharacteristicNominalType& WeldCompoundCharacteristicNominalType::
    operator= (const WeldCompoundCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->WeldCharacteristicNominalIds_ = x.WeldCharacteristicNominalIds_;
      }

      return *this;
    }

    WeldCompoundCharacteristicNominalType::
    ~WeldCompoundCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldCompoundCharacteristicNominalType >
    _xsd_WeldCompoundCharacteristicNominalType_type_factory_init (
      L"WeldCompoundCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFilletCharacteristicNominalType
    //

    WeldFilletCharacteristicNominalType::
    WeldFilletCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      LocationSignificance_ (this),
      BothSides_ (this),
      OneSide_ (this)
    {
    }

    WeldFilletCharacteristicNominalType::
    WeldFilletCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                         const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      LocationSignificance_ (LocationSignificance, this),
      BothSides_ (this),
      OneSide_ (this)
    {
    }

    WeldFilletCharacteristicNominalType::
    WeldFilletCharacteristicNominalType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                         const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      LocationSignificance_ (LocationSignificance, this),
      BothSides_ (this),
      OneSide_ (this)
    {
    }

    WeldFilletCharacteristicNominalType::
    WeldFilletCharacteristicNominalType (const WeldFilletCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      BothSides_ (x.BothSides_, f, this),
      OneSide_ (x.OneSide_, f, this)
    {
    }

    WeldFilletCharacteristicNominalType::
    WeldFilletCharacteristicNominalType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      BothSides_ (this),
      OneSide_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldFilletCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // BothSides
        //
        if (n.name () == L"BothSides" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< BothSides_type > r (
            BothSides_traits::create (i, f, this));

          if (!this->BothSides_)
          {
            this->BothSides_.set (::std::move (r));
            continue;
          }
        }

        // OneSide
        //
        if (n.name () == L"OneSide" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< OneSide_type > r (
            OneSide_traits::create (i, f, this));

          if (!this->OneSide_)
          {
            this->OneSide_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldFilletCharacteristicNominalType* WeldFilletCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletCharacteristicNominalType (*this, f, c);
    }

    WeldFilletCharacteristicNominalType& WeldFilletCharacteristicNominalType::
    operator= (const WeldFilletCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->BothSides_ = x.BothSides_;
        this->OneSide_ = x.OneSide_;
      }

      return *this;
    }

    WeldFilletCharacteristicNominalType::
    ~WeldFilletCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFilletCharacteristicNominalType >
    _xsd_WeldFilletCharacteristicNominalType_type_factory_init (
      L"WeldFilletCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldPlugOneSideParametersType
    //

    WeldPlugOneSideParametersType::
    WeldPlugOneSideParametersType ()
    : ::xsd::qif30::WeldOneSideParametersExtendType (),
      Angle_ (this),
      Depth_ (this)
    {
    }

    WeldPlugOneSideParametersType::
    WeldPlugOneSideParametersType (const WeldPlugOneSideParametersType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendType (x, f, c),
      Angle_ (x.Angle_, f, this),
      Depth_ (x.Depth_, f, this)
    {
    }

    WeldPlugOneSideParametersType::
    WeldPlugOneSideParametersType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendType (e, f | ::xml_schema::flags::base, c),
      Angle_ (this),
      Depth_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldPlugOneSideParametersType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldOneSideParametersExtendType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Angle
        //
        if (n.name () == L"Angle" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Angle_type > r (
            Angle_traits::create (i, f, this));

          if (!this->Angle_)
          {
            this->Angle_.set (::std::move (r));
            continue;
          }
        }

        // Depth
        //
        if (n.name () == L"Depth" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Depth_type > r (
            Depth_traits::create (i, f, this));

          if (!this->Depth_)
          {
            this->Depth_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldPlugOneSideParametersType* WeldPlugOneSideParametersType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldPlugOneSideParametersType (*this, f, c);
    }

    WeldPlugOneSideParametersType& WeldPlugOneSideParametersType::
    operator= (const WeldPlugOneSideParametersType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldOneSideParametersExtendType& > (*this) = x;
        this->Angle_ = x.Angle_;
        this->Depth_ = x.Depth_;
      }

      return *this;
    }

    WeldPlugOneSideParametersType::
    ~WeldPlugOneSideParametersType ()
    {
    }

    // WeldPlugCharacteristicNominalType
    //

    WeldPlugCharacteristicNominalType::
    WeldPlugCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldPlugCharacteristicNominalType::
    WeldPlugCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldPlugCharacteristicNominalType::
    WeldPlugCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldPlugCharacteristicNominalType::
    WeldPlugCharacteristicNominalType (const WeldPlugCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldPlugCharacteristicNominalType::
    WeldPlugCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldPlugCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldPlugCharacteristicNominalType* WeldPlugCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldPlugCharacteristicNominalType (*this, f, c);
    }

    WeldPlugCharacteristicNominalType& WeldPlugCharacteristicNominalType::
    operator= (const WeldPlugCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldPlugCharacteristicNominalType::
    ~WeldPlugCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldPlugCharacteristicNominalType >
    _xsd_WeldPlugCharacteristicNominalType_type_factory_init (
      L"WeldPlugCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSlotCharacteristicNominalType
    //

    WeldSlotCharacteristicNominalType::
    WeldSlotCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldSlotCharacteristicNominalType::
    WeldSlotCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSlotCharacteristicNominalType::
    WeldSlotCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSlotCharacteristicNominalType::
    WeldSlotCharacteristicNominalType (const WeldSlotCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldSlotCharacteristicNominalType::
    WeldSlotCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSlotCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldSlotCharacteristicNominalType* WeldSlotCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSlotCharacteristicNominalType (*this, f, c);
    }

    WeldSlotCharacteristicNominalType& WeldSlotCharacteristicNominalType::
    operator= (const WeldSlotCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldSlotCharacteristicNominalType::
    ~WeldSlotCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSlotCharacteristicNominalType >
    _xsd_WeldSlotCharacteristicNominalType_type_factory_init (
      L"WeldSlotCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSpotOneSideParametersType
    //

    WeldSpotOneSideParametersType::
    WeldSpotOneSideParametersType ()
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (),
      Pitch_ (this),
      WeldNumber_ (this)
    {
    }

    WeldSpotOneSideParametersType::
    WeldSpotOneSideParametersType (const WeldSpotOneSideParametersType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (x, f, c),
      Pitch_ (x.Pitch_, f, this),
      WeldNumber_ (x.WeldNumber_, f, this)
    {
    }

    WeldSpotOneSideParametersType::
    WeldSpotOneSideParametersType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif30::WeldOneSideParametersExtendSizeType (e, f | ::xml_schema::flags::base, c),
      Pitch_ (this),
      WeldNumber_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void WeldSpotOneSideParametersType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldOneSideParametersExtendSizeType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Pitch
        //
        if (n.name () == L"Pitch" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< Pitch_type > r (
            Pitch_traits::create (i, f, this));

          if (!this->Pitch_)
          {
            this->Pitch_.set (::std::move (r));
            continue;
          }
        }

        // WeldNumber
        //
        if (n.name () == L"WeldNumber" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WeldNumber_type > r (
            WeldNumber_traits::create (i, f, this));

          if (!this->WeldNumber_)
          {
            this->WeldNumber_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldSpotOneSideParametersType* WeldSpotOneSideParametersType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSpotOneSideParametersType (*this, f, c);
    }

    WeldSpotOneSideParametersType& WeldSpotOneSideParametersType::
    operator= (const WeldSpotOneSideParametersType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (*this) = x;
        this->Pitch_ = x.Pitch_;
        this->WeldNumber_ = x.WeldNumber_;
      }

      return *this;
    }

    WeldSpotOneSideParametersType::
    ~WeldSpotOneSideParametersType ()
    {
    }

    // WeldSpotCharacteristicNominalType
    //

    WeldSpotCharacteristicNominalType::
    WeldSpotCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this),
      Projection_ (this)
    {
    }

    WeldSpotCharacteristicNominalType::
    WeldSpotCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this),
      Projection_ (this)
    {
    }

    WeldSpotCharacteristicNominalType::
    WeldSpotCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this),
      Projection_ (this)
    {
    }

    WeldSpotCharacteristicNominalType::
    WeldSpotCharacteristicNominalType (const WeldSpotCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this),
      Projection_ (x.Projection_, f, this)
    {
    }

    WeldSpotCharacteristicNominalType::
    WeldSpotCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this),
      Projection_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSpotCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        // Projection
        //
        if (n.name () == L"Projection" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          if (!this->Projection_)
          {
            this->Projection_.set (Projection_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldSpotCharacteristicNominalType* WeldSpotCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSpotCharacteristicNominalType (*this, f, c);
    }

    WeldSpotCharacteristicNominalType& WeldSpotCharacteristicNominalType::
    operator= (const WeldSpotCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
        this->Projection_ = x.Projection_;
      }

      return *this;
    }

    WeldSpotCharacteristicNominalType::
    ~WeldSpotCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSpotCharacteristicNominalType >
    _xsd_WeldSpotCharacteristicNominalType_type_factory_init (
      L"WeldSpotCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldStudCharacteristicNominalType
    //

    WeldStudCharacteristicNominalType::
    WeldStudCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      ArrowSideParameters_ (this)
    {
    }

    WeldStudCharacteristicNominalType::
    WeldStudCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      ArrowSideParameters_ (this)
    {
    }

    WeldStudCharacteristicNominalType::
    WeldStudCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      ArrowSideParameters_ (this)
    {
    }

    WeldStudCharacteristicNominalType::
    WeldStudCharacteristicNominalType (const WeldStudCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      ArrowSideParameters_ (x.ArrowSideParameters_, f, this)
    {
    }

    WeldStudCharacteristicNominalType::
    WeldStudCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ArrowSideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldStudCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ArrowSideParameters
        //
        if (n.name () == L"ArrowSideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ArrowSideParameters_type > r (
            ArrowSideParameters_traits::create (i, f, this));

          if (!this->ArrowSideParameters_)
          {
            this->ArrowSideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldStudCharacteristicNominalType* WeldStudCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldStudCharacteristicNominalType (*this, f, c);
    }

    WeldStudCharacteristicNominalType& WeldStudCharacteristicNominalType::
    operator= (const WeldStudCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->ArrowSideParameters_ = x.ArrowSideParameters_;
      }

      return *this;
    }

    WeldStudCharacteristicNominalType::
    ~WeldStudCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldStudCharacteristicNominalType >
    _xsd_WeldStudCharacteristicNominalType_type_factory_init (
      L"WeldStudCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSeamCharacteristicNominalType
    //

    WeldSeamCharacteristicNominalType::
    WeldSeamCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldSeamCharacteristicNominalType::
    WeldSeamCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSeamCharacteristicNominalType::
    WeldSeamCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldSeamCharacteristicNominalType::
    WeldSeamCharacteristicNominalType (const WeldSeamCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldSeamCharacteristicNominalType::
    WeldSeamCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSeamCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldSeamCharacteristicNominalType* WeldSeamCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSeamCharacteristicNominalType (*this, f, c);
    }

    WeldSeamCharacteristicNominalType& WeldSeamCharacteristicNominalType::
    operator= (const WeldSeamCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldSeamCharacteristicNominalType::
    ~WeldSeamCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSeamCharacteristicNominalType >
    _xsd_WeldSeamCharacteristicNominalType_type_factory_init (
      L"WeldSeamCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSurfacingCharacteristicNominalType
    //

    WeldSurfacingCharacteristicNominalType::
    WeldSurfacingCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      ArrowSideParameters_ (this)
    {
    }

    WeldSurfacingCharacteristicNominalType::
    WeldSurfacingCharacteristicNominalType (const id_type& id,
                                            const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      ArrowSideParameters_ (this)
    {
    }

    WeldSurfacingCharacteristicNominalType::
    WeldSurfacingCharacteristicNominalType (const id_type& id,
                                            ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      ArrowSideParameters_ (this)
    {
    }

    WeldSurfacingCharacteristicNominalType::
    WeldSurfacingCharacteristicNominalType (const WeldSurfacingCharacteristicNominalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      ArrowSideParameters_ (x.ArrowSideParameters_, f, this)
    {
    }

    WeldSurfacingCharacteristicNominalType::
    WeldSurfacingCharacteristicNominalType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ArrowSideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldSurfacingCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ArrowSideParameters
        //
        if (n.name () == L"ArrowSideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< ArrowSideParameters_type > r (
            ArrowSideParameters_traits::create (i, f, this));

          if (!this->ArrowSideParameters_)
          {
            this->ArrowSideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    WeldSurfacingCharacteristicNominalType* WeldSurfacingCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSurfacingCharacteristicNominalType (*this, f, c);
    }

    WeldSurfacingCharacteristicNominalType& WeldSurfacingCharacteristicNominalType::
    operator= (const WeldSurfacingCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->ArrowSideParameters_ = x.ArrowSideParameters_;
      }

      return *this;
    }

    WeldSurfacingCharacteristicNominalType::
    ~WeldSurfacingCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSurfacingCharacteristicNominalType >
    _xsd_WeldSurfacingCharacteristicNominalType_type_factory_init (
      L"WeldSurfacingCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldEdgeCharacteristicNominalType
    //

    WeldEdgeCharacteristicNominalType::
    WeldEdgeCharacteristicNominalType ()
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
    }

    WeldEdgeCharacteristicNominalType::
    WeldEdgeCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldEdgeCharacteristicNominalType::
    WeldEdgeCharacteristicNominalType (const id_type& id,
                                       ::std::unique_ptr< CharacteristicDefinitionId_type > CharacteristicDefinitionId,
                                       const LocationSignificance_type& LocationSignificance)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (id,
                                                       std::move (CharacteristicDefinitionId)),
      LocationSignificance_ (LocationSignificance, this),
      SideParameters_ (this)
    {
    }

    WeldEdgeCharacteristicNominalType::
    WeldEdgeCharacteristicNominalType (const WeldEdgeCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (x, f, c),
      LocationSignificance_ (x.LocationSignificance_, f, this),
      SideParameters_ (x.SideParameters_, f, this)
    {
    }

    WeldEdgeCharacteristicNominalType::
    WeldEdgeCharacteristicNominalType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      LocationSignificance_ (this),
      SideParameters_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldEdgeCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // LocationSignificance
        //
        if (n.name () == L"LocationSignificance" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< LocationSignificance_type > r (
            LocationSignificance_traits::create (i, f, this));

          if (!LocationSignificance_.present ())
          {
            this->LocationSignificance_.set (::std::move (r));
            continue;
          }
        }

        // SideParameters
        //
        if (n.name () == L"SideParameters" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< SideParameters_type > r (
            SideParameters_traits::create (i, f, this));

          if (!this->SideParameters_)
          {
            this->SideParameters_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!LocationSignificance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"LocationSignificance",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldEdgeCharacteristicNominalType* WeldEdgeCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldEdgeCharacteristicNominalType (*this, f, c);
    }

    WeldEdgeCharacteristicNominalType& WeldEdgeCharacteristicNominalType::
    operator= (const WeldEdgeCharacteristicNominalType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicNominalBaseType& > (*this) = x;
        this->LocationSignificance_ = x.LocationSignificance_;
        this->SideParameters_ = x.SideParameters_;
      }

      return *this;
    }

    WeldEdgeCharacteristicNominalType::
    ~WeldEdgeCharacteristicNominalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldEdgeCharacteristicNominalType >
    _xsd_WeldEdgeCharacteristicNominalType_type_factory_init (
      L"WeldEdgeCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFilletCharacteristicDefinitionType
    //

    WeldFilletCharacteristicDefinitionType::
    WeldFilletCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldFilletCharacteristicDefinitionType::
    WeldFilletCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldFilletCharacteristicDefinitionType::
    WeldFilletCharacteristicDefinitionType (const WeldFilletCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldFilletCharacteristicDefinitionType::
    WeldFilletCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldFilletCharacteristicDefinitionType* WeldFilletCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletCharacteristicDefinitionType (*this, f, c);
    }

    WeldFilletCharacteristicDefinitionType::
    ~WeldFilletCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFilletCharacteristicDefinitionType >
    _xsd_WeldFilletCharacteristicDefinitionType_type_factory_init (
      L"WeldFilletCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldPlugCharacteristicDefinitionType
    //

    WeldPlugCharacteristicDefinitionType::
    WeldPlugCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldPlugCharacteristicDefinitionType::
    WeldPlugCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldPlugCharacteristicDefinitionType::
    WeldPlugCharacteristicDefinitionType (const WeldPlugCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldPlugCharacteristicDefinitionType::
    WeldPlugCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldPlugCharacteristicDefinitionType* WeldPlugCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldPlugCharacteristicDefinitionType (*this, f, c);
    }

    WeldPlugCharacteristicDefinitionType::
    ~WeldPlugCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldPlugCharacteristicDefinitionType >
    _xsd_WeldPlugCharacteristicDefinitionType_type_factory_init (
      L"WeldPlugCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSlotCharacteristicDefinitionType
    //

    WeldSlotCharacteristicDefinitionType::
    WeldSlotCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldSlotCharacteristicDefinitionType::
    WeldSlotCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldSlotCharacteristicDefinitionType::
    WeldSlotCharacteristicDefinitionType (const WeldSlotCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldSlotCharacteristicDefinitionType::
    WeldSlotCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldSlotCharacteristicDefinitionType* WeldSlotCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSlotCharacteristicDefinitionType (*this, f, c);
    }

    WeldSlotCharacteristicDefinitionType::
    ~WeldSlotCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSlotCharacteristicDefinitionType >
    _xsd_WeldSlotCharacteristicDefinitionType_type_factory_init (
      L"WeldSlotCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSpotCharacteristicDefinitionType
    //

    WeldSpotCharacteristicDefinitionType::
    WeldSpotCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldSpotCharacteristicDefinitionType::
    WeldSpotCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldSpotCharacteristicDefinitionType::
    WeldSpotCharacteristicDefinitionType (const WeldSpotCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldSpotCharacteristicDefinitionType::
    WeldSpotCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldSpotCharacteristicDefinitionType* WeldSpotCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSpotCharacteristicDefinitionType (*this, f, c);
    }

    WeldSpotCharacteristicDefinitionType::
    ~WeldSpotCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSpotCharacteristicDefinitionType >
    _xsd_WeldSpotCharacteristicDefinitionType_type_factory_init (
      L"WeldSpotCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldStudCharacteristicDefinitionType
    //

    WeldStudCharacteristicDefinitionType::
    WeldStudCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldStudCharacteristicDefinitionType::
    WeldStudCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldStudCharacteristicDefinitionType::
    WeldStudCharacteristicDefinitionType (const WeldStudCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldStudCharacteristicDefinitionType::
    WeldStudCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldStudCharacteristicDefinitionType* WeldStudCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldStudCharacteristicDefinitionType (*this, f, c);
    }

    WeldStudCharacteristicDefinitionType::
    ~WeldStudCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldStudCharacteristicDefinitionType >
    _xsd_WeldStudCharacteristicDefinitionType_type_factory_init (
      L"WeldStudCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSeamCharacteristicDefinitionType
    //

    WeldSeamCharacteristicDefinitionType::
    WeldSeamCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldSeamCharacteristicDefinitionType::
    WeldSeamCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldSeamCharacteristicDefinitionType::
    WeldSeamCharacteristicDefinitionType (const WeldSeamCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldSeamCharacteristicDefinitionType::
    WeldSeamCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldSeamCharacteristicDefinitionType* WeldSeamCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSeamCharacteristicDefinitionType (*this, f, c);
    }

    WeldSeamCharacteristicDefinitionType::
    ~WeldSeamCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSeamCharacteristicDefinitionType >
    _xsd_WeldSeamCharacteristicDefinitionType_type_factory_init (
      L"WeldSeamCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSurfacingCharacteristicDefinitionType
    //

    WeldSurfacingCharacteristicDefinitionType::
    WeldSurfacingCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldSurfacingCharacteristicDefinitionType::
    WeldSurfacingCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldSurfacingCharacteristicDefinitionType::
    WeldSurfacingCharacteristicDefinitionType (const WeldSurfacingCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldSurfacingCharacteristicDefinitionType::
    WeldSurfacingCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldSurfacingCharacteristicDefinitionType* WeldSurfacingCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSurfacingCharacteristicDefinitionType (*this, f, c);
    }

    WeldSurfacingCharacteristicDefinitionType::
    ~WeldSurfacingCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSurfacingCharacteristicDefinitionType >
    _xsd_WeldSurfacingCharacteristicDefinitionType_type_factory_init (
      L"WeldSurfacingCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldEdgeCharacteristicDefinitionType
    //

    WeldEdgeCharacteristicDefinitionType::
    WeldEdgeCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldEdgeCharacteristicDefinitionType::
    WeldEdgeCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldEdgeCharacteristicDefinitionType::
    WeldEdgeCharacteristicDefinitionType (const WeldEdgeCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldEdgeCharacteristicDefinitionType::
    WeldEdgeCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldEdgeCharacteristicDefinitionType* WeldEdgeCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldEdgeCharacteristicDefinitionType (*this, f, c);
    }

    WeldEdgeCharacteristicDefinitionType::
    ~WeldEdgeCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldEdgeCharacteristicDefinitionType >
    _xsd_WeldEdgeCharacteristicDefinitionType_type_factory_init (
      L"WeldEdgeCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSquareCharacteristicDefinitionType
    //

    WeldSquareCharacteristicDefinitionType::
    WeldSquareCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldSquareCharacteristicDefinitionType::
    WeldSquareCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldSquareCharacteristicDefinitionType::
    WeldSquareCharacteristicDefinitionType (const WeldSquareCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldSquareCharacteristicDefinitionType::
    WeldSquareCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldSquareCharacteristicDefinitionType* WeldSquareCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSquareCharacteristicDefinitionType (*this, f, c);
    }

    WeldSquareCharacteristicDefinitionType::
    ~WeldSquareCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSquareCharacteristicDefinitionType >
    _xsd_WeldSquareCharacteristicDefinitionType_type_factory_init (
      L"WeldSquareCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldBevelCharacteristicDefinitionType
    //

    WeldBevelCharacteristicDefinitionType::
    WeldBevelCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldBevelCharacteristicDefinitionType::
    WeldBevelCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldBevelCharacteristicDefinitionType::
    WeldBevelCharacteristicDefinitionType (const WeldBevelCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldBevelCharacteristicDefinitionType::
    WeldBevelCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldBevelCharacteristicDefinitionType* WeldBevelCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldBevelCharacteristicDefinitionType (*this, f, c);
    }

    WeldBevelCharacteristicDefinitionType::
    ~WeldBevelCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldBevelCharacteristicDefinitionType >
    _xsd_WeldBevelCharacteristicDefinitionType_type_factory_init (
      L"WeldBevelCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldVCharacteristicDefinitionType
    //

    WeldVCharacteristicDefinitionType::
    WeldVCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldVCharacteristicDefinitionType::
    WeldVCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldVCharacteristicDefinitionType::
    WeldVCharacteristicDefinitionType (const WeldVCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldVCharacteristicDefinitionType::
    WeldVCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldVCharacteristicDefinitionType* WeldVCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldVCharacteristicDefinitionType (*this, f, c);
    }

    WeldVCharacteristicDefinitionType::
    ~WeldVCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldVCharacteristicDefinitionType >
    _xsd_WeldVCharacteristicDefinitionType_type_factory_init (
      L"WeldVCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldUCharacteristicDefinitionType
    //

    WeldUCharacteristicDefinitionType::
    WeldUCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldUCharacteristicDefinitionType::
    WeldUCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldUCharacteristicDefinitionType::
    WeldUCharacteristicDefinitionType (const WeldUCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldUCharacteristicDefinitionType::
    WeldUCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldUCharacteristicDefinitionType* WeldUCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldUCharacteristicDefinitionType (*this, f, c);
    }

    WeldUCharacteristicDefinitionType::
    ~WeldUCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldUCharacteristicDefinitionType >
    _xsd_WeldUCharacteristicDefinitionType_type_factory_init (
      L"WeldUCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldJCharacteristicDefinitionType
    //

    WeldJCharacteristicDefinitionType::
    WeldJCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldJCharacteristicDefinitionType::
    WeldJCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldJCharacteristicDefinitionType::
    WeldJCharacteristicDefinitionType (const WeldJCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldJCharacteristicDefinitionType::
    WeldJCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldJCharacteristicDefinitionType* WeldJCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldJCharacteristicDefinitionType (*this, f, c);
    }

    WeldJCharacteristicDefinitionType::
    ~WeldJCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldJCharacteristicDefinitionType >
    _xsd_WeldJCharacteristicDefinitionType_type_factory_init (
      L"WeldJCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareVCharacteristicDefinitionType
    //

    WeldFlareVCharacteristicDefinitionType::
    WeldFlareVCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldFlareVCharacteristicDefinitionType::
    WeldFlareVCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldFlareVCharacteristicDefinitionType::
    WeldFlareVCharacteristicDefinitionType (const WeldFlareVCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldFlareVCharacteristicDefinitionType::
    WeldFlareVCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldFlareVCharacteristicDefinitionType* WeldFlareVCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareVCharacteristicDefinitionType (*this, f, c);
    }

    WeldFlareVCharacteristicDefinitionType::
    ~WeldFlareVCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareVCharacteristicDefinitionType >
    _xsd_WeldFlareVCharacteristicDefinitionType_type_factory_init (
      L"WeldFlareVCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareBevelCharacteristicDefinitionType
    //

    WeldFlareBevelCharacteristicDefinitionType::
    WeldFlareBevelCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldFlareBevelCharacteristicDefinitionType::
    WeldFlareBevelCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldFlareBevelCharacteristicDefinitionType::
    WeldFlareBevelCharacteristicDefinitionType (const WeldFlareBevelCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldFlareBevelCharacteristicDefinitionType::
    WeldFlareBevelCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldFlareBevelCharacteristicDefinitionType* WeldFlareBevelCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareBevelCharacteristicDefinitionType (*this, f, c);
    }

    WeldFlareBevelCharacteristicDefinitionType::
    ~WeldFlareBevelCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareBevelCharacteristicDefinitionType >
    _xsd_WeldFlareBevelCharacteristicDefinitionType_type_factory_init (
      L"WeldFlareBevelCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldScarfCharacteristicDefinitionType
    //

    WeldScarfCharacteristicDefinitionType::
    WeldScarfCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType ()
    {
    }

    WeldScarfCharacteristicDefinitionType::
    WeldScarfCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id)
    {
    }

    WeldScarfCharacteristicDefinitionType::
    WeldScarfCharacteristicDefinitionType (const WeldScarfCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WeldScarfCharacteristicDefinitionType::
    WeldScarfCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WeldScarfCharacteristicDefinitionType* WeldScarfCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldScarfCharacteristicDefinitionType (*this, f, c);
    }

    WeldScarfCharacteristicDefinitionType::
    ~WeldScarfCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldScarfCharacteristicDefinitionType >
    _xsd_WeldScarfCharacteristicDefinitionType_type_factory_init (
      L"WeldScarfCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldCompoundCharacteristicDefinitionType
    //

    WeldCompoundCharacteristicDefinitionType::
    WeldCompoundCharacteristicDefinitionType ()
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (),
      WeldCharacteristicDefinitionIds_ (this)
    {
    }

    WeldCompoundCharacteristicDefinitionType::
    WeldCompoundCharacteristicDefinitionType (const id_type& id,
                                              const WeldCharacteristicDefinitionIds_type& WeldCharacteristicDefinitionIds)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id),
      WeldCharacteristicDefinitionIds_ (WeldCharacteristicDefinitionIds, this)
    {
    }

    WeldCompoundCharacteristicDefinitionType::
    WeldCompoundCharacteristicDefinitionType (const id_type& id,
                                              ::std::unique_ptr< WeldCharacteristicDefinitionIds_type > WeldCharacteristicDefinitionIds)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (id),
      WeldCharacteristicDefinitionIds_ (std::move (WeldCharacteristicDefinitionIds), this)
    {
    }

    WeldCompoundCharacteristicDefinitionType::
    WeldCompoundCharacteristicDefinitionType (const WeldCompoundCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (x, f, c),
      WeldCharacteristicDefinitionIds_ (x.WeldCharacteristicDefinitionIds_, f, this)
    {
    }

    WeldCompoundCharacteristicDefinitionType::
    WeldCompoundCharacteristicDefinitionType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WeldCharacteristicDefinitionIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldCompoundCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WeldCharacteristicDefinitionIds
        //
        if (n.name () == L"WeldCharacteristicDefinitionIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WeldCharacteristicDefinitionIds_type > r (
            WeldCharacteristicDefinitionIds_traits::create (i, f, this));

          if (!WeldCharacteristicDefinitionIds_.present ())
          {
            this->WeldCharacteristicDefinitionIds_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WeldCharacteristicDefinitionIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WeldCharacteristicDefinitionIds",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldCompoundCharacteristicDefinitionType* WeldCompoundCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldCompoundCharacteristicDefinitionType (*this, f, c);
    }

    WeldCompoundCharacteristicDefinitionType& WeldCompoundCharacteristicDefinitionType::
    operator= (const WeldCompoundCharacteristicDefinitionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (*this) = x;
        this->WeldCharacteristicDefinitionIds_ = x.WeldCharacteristicDefinitionIds_;
      }

      return *this;
    }

    WeldCompoundCharacteristicDefinitionType::
    ~WeldCompoundCharacteristicDefinitionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldCompoundCharacteristicDefinitionType >
    _xsd_WeldCompoundCharacteristicDefinitionType_type_factory_init (
      L"WeldCompoundCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFilletCharacteristicItemType
    //

    WeldFilletCharacteristicItemType::
    WeldFilletCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldFilletCharacteristicItemType::
    WeldFilletCharacteristicItemType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldFilletCharacteristicItemType::
    WeldFilletCharacteristicItemType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldFilletCharacteristicItemType::
    WeldFilletCharacteristicItemType (const WeldFilletCharacteristicItemType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldFilletCharacteristicItemType::
    WeldFilletCharacteristicItemType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldFilletCharacteristicItemType* WeldFilletCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFilletCharacteristicItemType (*this, f, c);
    }

    WeldFilletCharacteristicItemType::
    ~WeldFilletCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFilletCharacteristicItemType >
    _xsd_WeldFilletCharacteristicItemType_type_factory_init (
      L"WeldFilletCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldPlugCharacteristicItemType
    //

    WeldPlugCharacteristicItemType::
    WeldPlugCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldPlugCharacteristicItemType::
    WeldPlugCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldPlugCharacteristicItemType::
    WeldPlugCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldPlugCharacteristicItemType::
    WeldPlugCharacteristicItemType (const WeldPlugCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldPlugCharacteristicItemType::
    WeldPlugCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldPlugCharacteristicItemType* WeldPlugCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldPlugCharacteristicItemType (*this, f, c);
    }

    WeldPlugCharacteristicItemType::
    ~WeldPlugCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldPlugCharacteristicItemType >
    _xsd_WeldPlugCharacteristicItemType_type_factory_init (
      L"WeldPlugCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSlotCharacteristicItemType
    //

    WeldSlotCharacteristicItemType::
    WeldSlotCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldSlotCharacteristicItemType::
    WeldSlotCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldSlotCharacteristicItemType::
    WeldSlotCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldSlotCharacteristicItemType::
    WeldSlotCharacteristicItemType (const WeldSlotCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldSlotCharacteristicItemType::
    WeldSlotCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldSlotCharacteristicItemType* WeldSlotCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSlotCharacteristicItemType (*this, f, c);
    }

    WeldSlotCharacteristicItemType::
    ~WeldSlotCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSlotCharacteristicItemType >
    _xsd_WeldSlotCharacteristicItemType_type_factory_init (
      L"WeldSlotCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSpotCharacteristicItemType
    //

    WeldSpotCharacteristicItemType::
    WeldSpotCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldSpotCharacteristicItemType::
    WeldSpotCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldSpotCharacteristicItemType::
    WeldSpotCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldSpotCharacteristicItemType::
    WeldSpotCharacteristicItemType (const WeldSpotCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldSpotCharacteristicItemType::
    WeldSpotCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldSpotCharacteristicItemType* WeldSpotCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSpotCharacteristicItemType (*this, f, c);
    }

    WeldSpotCharacteristicItemType::
    ~WeldSpotCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSpotCharacteristicItemType >
    _xsd_WeldSpotCharacteristicItemType_type_factory_init (
      L"WeldSpotCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldStudCharacteristicItemType
    //

    WeldStudCharacteristicItemType::
    WeldStudCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldStudCharacteristicItemType::
    WeldStudCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldStudCharacteristicItemType::
    WeldStudCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldStudCharacteristicItemType::
    WeldStudCharacteristicItemType (const WeldStudCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldStudCharacteristicItemType::
    WeldStudCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldStudCharacteristicItemType* WeldStudCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldStudCharacteristicItemType (*this, f, c);
    }

    WeldStudCharacteristicItemType::
    ~WeldStudCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldStudCharacteristicItemType >
    _xsd_WeldStudCharacteristicItemType_type_factory_init (
      L"WeldStudCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSeamCharacteristicItemType
    //

    WeldSeamCharacteristicItemType::
    WeldSeamCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldSeamCharacteristicItemType::
    WeldSeamCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldSeamCharacteristicItemType::
    WeldSeamCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldSeamCharacteristicItemType::
    WeldSeamCharacteristicItemType (const WeldSeamCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldSeamCharacteristicItemType::
    WeldSeamCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldSeamCharacteristicItemType* WeldSeamCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSeamCharacteristicItemType (*this, f, c);
    }

    WeldSeamCharacteristicItemType::
    ~WeldSeamCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSeamCharacteristicItemType >
    _xsd_WeldSeamCharacteristicItemType_type_factory_init (
      L"WeldSeamCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSurfacingCharacteristicItemType
    //

    WeldSurfacingCharacteristicItemType::
    WeldSurfacingCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldSurfacingCharacteristicItemType::
    WeldSurfacingCharacteristicItemType (const id_type& id,
                                         const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldSurfacingCharacteristicItemType::
    WeldSurfacingCharacteristicItemType (const id_type& id,
                                         ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldSurfacingCharacteristicItemType::
    WeldSurfacingCharacteristicItemType (const WeldSurfacingCharacteristicItemType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldSurfacingCharacteristicItemType::
    WeldSurfacingCharacteristicItemType (const xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldSurfacingCharacteristicItemType* WeldSurfacingCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSurfacingCharacteristicItemType (*this, f, c);
    }

    WeldSurfacingCharacteristicItemType::
    ~WeldSurfacingCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSurfacingCharacteristicItemType >
    _xsd_WeldSurfacingCharacteristicItemType_type_factory_init (
      L"WeldSurfacingCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldEdgeCharacteristicItemType
    //

    WeldEdgeCharacteristicItemType::
    WeldEdgeCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldEdgeCharacteristicItemType::
    WeldEdgeCharacteristicItemType (const id_type& id,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldEdgeCharacteristicItemType::
    WeldEdgeCharacteristicItemType (const id_type& id,
                                    ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldEdgeCharacteristicItemType::
    WeldEdgeCharacteristicItemType (const WeldEdgeCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldEdgeCharacteristicItemType::
    WeldEdgeCharacteristicItemType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldEdgeCharacteristicItemType* WeldEdgeCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldEdgeCharacteristicItemType (*this, f, c);
    }

    WeldEdgeCharacteristicItemType::
    ~WeldEdgeCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldEdgeCharacteristicItemType >
    _xsd_WeldEdgeCharacteristicItemType_type_factory_init (
      L"WeldEdgeCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldSquareCharacteristicItemType
    //

    WeldSquareCharacteristicItemType::
    WeldSquareCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldSquareCharacteristicItemType::
    WeldSquareCharacteristicItemType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldSquareCharacteristicItemType::
    WeldSquareCharacteristicItemType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldSquareCharacteristicItemType::
    WeldSquareCharacteristicItemType (const WeldSquareCharacteristicItemType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldSquareCharacteristicItemType::
    WeldSquareCharacteristicItemType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldSquareCharacteristicItemType* WeldSquareCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldSquareCharacteristicItemType (*this, f, c);
    }

    WeldSquareCharacteristicItemType::
    ~WeldSquareCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldSquareCharacteristicItemType >
    _xsd_WeldSquareCharacteristicItemType_type_factory_init (
      L"WeldSquareCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldBevelCharacteristicItemType
    //

    WeldBevelCharacteristicItemType::
    WeldBevelCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldBevelCharacteristicItemType::
    WeldBevelCharacteristicItemType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldBevelCharacteristicItemType::
    WeldBevelCharacteristicItemType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldBevelCharacteristicItemType::
    WeldBevelCharacteristicItemType (const WeldBevelCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldBevelCharacteristicItemType::
    WeldBevelCharacteristicItemType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldBevelCharacteristicItemType* WeldBevelCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldBevelCharacteristicItemType (*this, f, c);
    }

    WeldBevelCharacteristicItemType::
    ~WeldBevelCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldBevelCharacteristicItemType >
    _xsd_WeldBevelCharacteristicItemType_type_factory_init (
      L"WeldBevelCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldVCharacteristicItemType
    //

    WeldVCharacteristicItemType::
    WeldVCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldVCharacteristicItemType::
    WeldVCharacteristicItemType (const id_type& id,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldVCharacteristicItemType::
    WeldVCharacteristicItemType (const id_type& id,
                                 ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldVCharacteristicItemType::
    WeldVCharacteristicItemType (const WeldVCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldVCharacteristicItemType::
    WeldVCharacteristicItemType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldVCharacteristicItemType* WeldVCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldVCharacteristicItemType (*this, f, c);
    }

    WeldVCharacteristicItemType::
    ~WeldVCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldVCharacteristicItemType >
    _xsd_WeldVCharacteristicItemType_type_factory_init (
      L"WeldVCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldUCharacteristicItemType
    //

    WeldUCharacteristicItemType::
    WeldUCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldUCharacteristicItemType::
    WeldUCharacteristicItemType (const id_type& id,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldUCharacteristicItemType::
    WeldUCharacteristicItemType (const id_type& id,
                                 ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldUCharacteristicItemType::
    WeldUCharacteristicItemType (const WeldUCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldUCharacteristicItemType::
    WeldUCharacteristicItemType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldUCharacteristicItemType* WeldUCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldUCharacteristicItemType (*this, f, c);
    }

    WeldUCharacteristicItemType::
    ~WeldUCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldUCharacteristicItemType >
    _xsd_WeldUCharacteristicItemType_type_factory_init (
      L"WeldUCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldJCharacteristicItemType
    //

    WeldJCharacteristicItemType::
    WeldJCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldJCharacteristicItemType::
    WeldJCharacteristicItemType (const id_type& id,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldJCharacteristicItemType::
    WeldJCharacteristicItemType (const id_type& id,
                                 ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldJCharacteristicItemType::
    WeldJCharacteristicItemType (const WeldJCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldJCharacteristicItemType::
    WeldJCharacteristicItemType (const xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldJCharacteristicItemType* WeldJCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldJCharacteristicItemType (*this, f, c);
    }

    WeldJCharacteristicItemType::
    ~WeldJCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldJCharacteristicItemType >
    _xsd_WeldJCharacteristicItemType_type_factory_init (
      L"WeldJCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareVCharacteristicItemType
    //

    WeldFlareVCharacteristicItemType::
    WeldFlareVCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldFlareVCharacteristicItemType::
    WeldFlareVCharacteristicItemType (const id_type& id,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldFlareVCharacteristicItemType::
    WeldFlareVCharacteristicItemType (const id_type& id,
                                      ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldFlareVCharacteristicItemType::
    WeldFlareVCharacteristicItemType (const WeldFlareVCharacteristicItemType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldFlareVCharacteristicItemType::
    WeldFlareVCharacteristicItemType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldFlareVCharacteristicItemType* WeldFlareVCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareVCharacteristicItemType (*this, f, c);
    }

    WeldFlareVCharacteristicItemType::
    ~WeldFlareVCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareVCharacteristicItemType >
    _xsd_WeldFlareVCharacteristicItemType_type_factory_init (
      L"WeldFlareVCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldFlareBevelCharacteristicItemType
    //

    WeldFlareBevelCharacteristicItemType::
    WeldFlareBevelCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldFlareBevelCharacteristicItemType::
    WeldFlareBevelCharacteristicItemType (const id_type& id,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldFlareBevelCharacteristicItemType::
    WeldFlareBevelCharacteristicItemType (const id_type& id,
                                          ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldFlareBevelCharacteristicItemType::
    WeldFlareBevelCharacteristicItemType (const WeldFlareBevelCharacteristicItemType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldFlareBevelCharacteristicItemType::
    WeldFlareBevelCharacteristicItemType (const xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldFlareBevelCharacteristicItemType* WeldFlareBevelCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldFlareBevelCharacteristicItemType (*this, f, c);
    }

    WeldFlareBevelCharacteristicItemType::
    ~WeldFlareBevelCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldFlareBevelCharacteristicItemType >
    _xsd_WeldFlareBevelCharacteristicItemType_type_factory_init (
      L"WeldFlareBevelCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldScarfCharacteristicItemType
    //

    WeldScarfCharacteristicItemType::
    WeldScarfCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType ()
    {
    }

    WeldScarfCharacteristicItemType::
    WeldScarfCharacteristicItemType (const id_type& id,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId)
    {
    }

    WeldScarfCharacteristicItemType::
    WeldScarfCharacteristicItemType (const id_type& id,
                                     ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId))
    {
    }

    WeldScarfCharacteristicItemType::
    WeldScarfCharacteristicItemType (const WeldScarfCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c)
    {
    }

    WeldScarfCharacteristicItemType::
    WeldScarfCharacteristicItemType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f, c)
    {
    }

    WeldScarfCharacteristicItemType* WeldScarfCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldScarfCharacteristicItemType (*this, f, c);
    }

    WeldScarfCharacteristicItemType::
    ~WeldScarfCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldScarfCharacteristicItemType >
    _xsd_WeldScarfCharacteristicItemType_type_factory_init (
      L"WeldScarfCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    // WeldCompoundCharacteristicItemType
    //

    WeldCompoundCharacteristicItemType::
    WeldCompoundCharacteristicItemType ()
    : ::xsd::qif30::WeldCharacteristicItemBaseType (),
      WeldCharacteristicItemIds_ (this)
    {
    }

    WeldCompoundCharacteristicItemType::
    WeldCompoundCharacteristicItemType (const id_type& id,
                                        const CharacteristicNominalId_type& CharacteristicNominalId,
                                        const WeldCharacteristicItemIds_type& WeldCharacteristicItemIds)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    CharacteristicNominalId),
      WeldCharacteristicItemIds_ (WeldCharacteristicItemIds, this)
    {
    }

    WeldCompoundCharacteristicItemType::
    WeldCompoundCharacteristicItemType (const id_type& id,
                                        ::std::unique_ptr< CharacteristicNominalId_type > CharacteristicNominalId,
                                        ::std::unique_ptr< WeldCharacteristicItemIds_type > WeldCharacteristicItemIds)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (id,
                                                    std::move (CharacteristicNominalId)),
      WeldCharacteristicItemIds_ (std::move (WeldCharacteristicItemIds), this)
    {
    }

    WeldCompoundCharacteristicItemType::
    WeldCompoundCharacteristicItemType (const WeldCompoundCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (x, f, c),
      WeldCharacteristicItemIds_ (x.WeldCharacteristicItemIds_, f, this)
    {
    }

    WeldCompoundCharacteristicItemType::
    WeldCompoundCharacteristicItemType (const xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif30::WeldCharacteristicItemBaseType (e, f | ::xml_schema::flags::base, c),
      WeldCharacteristicItemIds_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void WeldCompoundCharacteristicItemType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif30::WeldCharacteristicItemBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // WeldCharacteristicItemIds
        //
        if (n.name () == L"WeldCharacteristicItemIds" && n.namespace_ () == L"http://qifstandards.org/xsd/qif3")
        {
          ::std::unique_ptr< WeldCharacteristicItemIds_type > r (
            WeldCharacteristicItemIds_traits::create (i, f, this));

          if (!WeldCharacteristicItemIds_.present ())
          {
            this->WeldCharacteristicItemIds_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!WeldCharacteristicItemIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"WeldCharacteristicItemIds",
          L"http://qifstandards.org/xsd/qif3");
      }
    }

    WeldCompoundCharacteristicItemType* WeldCompoundCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WeldCompoundCharacteristicItemType (*this, f, c);
    }

    WeldCompoundCharacteristicItemType& WeldCompoundCharacteristicItemType::
    operator= (const WeldCompoundCharacteristicItemType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif30::WeldCharacteristicItemBaseType& > (*this) = x;
        this->WeldCharacteristicItemIds_ = x.WeldCharacteristicItemIds_;
      }

      return *this;
    }

    WeldCompoundCharacteristicItemType::
    ~WeldCompoundCharacteristicItemType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, WeldCompoundCharacteristicItemType >
    _xsd_WeldCompoundCharacteristicItemType_type_factory_init (
      L"WeldCompoundCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFilletCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFilletCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldPlugCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldPlugCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSlotCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSlotCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSpotCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSpotCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldStudCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldStudCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSeamCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSeamCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSurfacingCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSurfacingCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldEdgeCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldEdgeCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSquareCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSquareCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldBevelCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldBevelCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldVCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldVCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldUCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldUCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldJCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldJCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareVCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareVCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareBevelCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareBevelCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldScarfCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldScarfCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldCompoundCharacteristicDefinition_element_factory_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldCompoundCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFilletCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFilletCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldPlugCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldPlugCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSlotCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSlotCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSpotCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSpotCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldStudCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldStudCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSeamCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSeamCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSurfacingCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSurfacingCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldEdgeCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldEdgeCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSquareCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSquareCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldBevelCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldBevelCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldVCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldVCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldUCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldUCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldJCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldJCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareVCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareVCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareBevelCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareBevelCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldScarfCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldScarfCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldCompoundCharacteristicItem_element_factory_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldCompoundCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFilletCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFilletCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldPlugCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldPlugCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSlotCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSlotCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSpotCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSpotCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldStudCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldStudCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSeamCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSeamCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSurfacingCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSurfacingCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldEdgeCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldEdgeCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSquareCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSquareCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldBevelCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldBevelCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldVCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldVCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldUCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldUCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldJCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldJCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareVCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareVCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareBevelCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareBevelCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldScarfCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldScarfCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldCompoundCharacteristicMeasurement_element_factory_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldCompoundCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFilletCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFilletCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldPlugCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldPlugCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSlotCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSlotCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSpotCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSpotCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldStudCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldStudCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSeamCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSeamCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSurfacingCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSurfacingCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldEdgeCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldEdgeCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldSquareCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldSquareCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldBevelCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldBevelCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldVCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldVCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldUCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldUCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldJCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldJCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareVCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareVCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldFlareBevelCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldFlareBevelCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldScarfCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldScarfCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, wchar_t >
    _xsd_WeldCompoundCharacteristicNominal_element_factory_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::factory_impl< ::xsd::qif30::WeldCompoundCharacteristicNominalType >);
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif30
  {
    void
    operator<< (xercesc::DOMElement& e, const CharacteristicBaseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }

      // Description
      //
      if (i.Description ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Description",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Description ();
      }

      // id
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicBaseType& > (i);

      // Name
      //
      if (i.Name ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Name",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Name ();
      }

      // CharacteristicDesignator
      //
      if (i.CharacteristicDesignator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicDesignator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicDesignator ();
      }

      // FeatureItemIds
      //
      if (i.FeatureItemIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureItemIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureItemIds ();
      }

      // SubstituteFeatureAlgorithm
      //
      if (i.SubstituteFeatureAlgorithm ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SubstituteFeatureAlgorithm",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SubstituteFeatureAlgorithm ();
      }

      // NotableEventIds
      //
      if (i.NotableEventIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotableEventIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotableEventIds ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDeviceIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // CharacteristicNominalId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicNominalId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicNominalId ();
      }

      // LocationOnDrawing
      //
      if (i.LocationOnDrawing ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationOnDrawing",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.LocationOnDrawing ();
      }

      // VirtualMeasurement
      //
      if (i.VirtualMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"VirtualMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.VirtualMeasurement ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CriticalityLevelEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const CriticalityLevelEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CriticalityLevelEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CriticalityAreaEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const CriticalityAreaEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CriticalityAreaEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CriticalityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // LevelEnum
      //
      if (i.LevelEnum ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LevelEnum",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.LevelEnum ();
      }

      // OtherLevel
      //
      if (i.OtherLevel ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherLevel",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherLevel ();
      }

      // AreaEnum
      //
      if (i.AreaEnum ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AreaEnum",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AreaEnum ();
      }

      // OtherArea
      //
      if (i.OtherArea ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherArea",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherArea ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicBalloonLocationEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const CharacteristicBalloonLocationEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CharacteristicBalloonLocationEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicBalloonStyleEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const CharacteristicBalloonStyleEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CharacteristicBalloonStyleEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicBalloonType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // BalloonLocation
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BalloonLocation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.BalloonLocation ();
      }

      // BalloonStyle
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BalloonStyle",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.BalloonStyle ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicDesignatorType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Designator
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Designator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Designator ();
      }

      // UUID
      //
      if (i.UUID ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"UUID",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.UUID ();
      }

      // Criticality
      //
      if (i.Criticality ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Criticality",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Criticality ();
      }

      // Balloon
      //
      if (i.Balloon ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Balloon",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Balloon ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const LocationOnDrawingType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // DrawingId
      //
      if (i.DrawingId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DrawingId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DrawingId ();
      }

      // SheetNumber
      //
      if (i.SheetNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SheetNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SheetNumber ();
      }

      // DrawingZone
      //
      if (i.DrawingZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DrawingZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DrawingZone ();
      }

      // ModelId
      //
      if (i.ModelId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ModelId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ModelId ();
      }

      // View
      //
      if (i.View ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"View",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.View ();
      }

      // ViewId
      //
      if (i.ViewId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ViewId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ViewId ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicBaseType& > (i);

      // Name
      //
      if (i.Name ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Name",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Name ();
      }

      // CharacteristicDesignator
      //
      if (i.CharacteristicDesignator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicDesignator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicDesignator ();
      }

      // FreeState
      //
      if (i.FreeState ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FreeState",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FreeState ();
      }

      // StatisticalCharacteristic
      //
      if (i.StatisticalCharacteristic ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"StatisticalCharacteristic",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.StatisticalCharacteristic ();
      }

      // CommonZone
      //
      if (i.CommonZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CommonZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CommonZone ();
      }

      // CommonTolerance
      //
      if (i.CommonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CommonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CommonTolerance ();
      }

      // MedianFeature
      //
      if (i.MedianFeature ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MedianFeature",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MedianFeature ();
      }

      // EnvelopeRequirement
      //
      if (i.EnvelopeRequirement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"EnvelopeRequirement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.EnvelopeRequirement ();
      }

      // Independency
      //
      if (i.Independency ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Independency",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Independency ();
      }

      // UnitedOrContinuousFeature
      //
      if (i.UnitedOrContinuousFeature ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"UnitedOrContinuousFeature",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.UnitedOrContinuousFeature ();
      }

      // SeparateZone
      //
      if (i.SeparateZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SeparateZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SeparateZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicBaseType& > (i);

      // CharacteristicDefinitionId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicDefinitionId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicDefinitionId ();
      }

      // FeatureNominalIds
      //
      if (i.FeatureNominalIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureNominalIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureNominalIds ();
      }

      // SubstituteFeatureAlgorithm
      //
      if (i.SubstituteFeatureAlgorithm ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SubstituteFeatureAlgorithm",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SubstituteFeatureAlgorithm ();
      }

      // FeatureZoneIds
      //
      if (i.FeatureZoneIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureZoneIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureZoneIds ();
      }

      // EntityInternalIds
      //
      if (i.EntityInternalIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"EntityInternalIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.EntityInternalIds ();
      }

      // EntityExternalIds
      //
      if (i.EntityExternalIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"EntityExternalIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.EntityExternalIds ();
      }

      // Name
      //
      if (i.Name ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Name",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Name ();
      }

      // CharacteristicDesignator
      //
      if (i.CharacteristicDesignator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicDesignator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicDesignator ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicBaseType& > (i);

      // Status
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Status",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Status ();
      }

      // CharacteristicItemId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicItemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicItemId ();
      }

      // TimeStamp
      //
      if (i.TimeStamp ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TimeStamp",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TimeStamp ();
      }

      // FeatureMeasurementIds
      //
      if (i.FeatureMeasurementIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureMeasurementIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureMeasurementIds ();
      }

      // SubstituteFeatureAlgorithm
      //
      if (i.SubstituteFeatureAlgorithm ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SubstituteFeatureAlgorithm",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SubstituteFeatureAlgorithm ();
      }

      // ActualComponentId
      //
      if (i.ActualComponentId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ActualComponentId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ActualComponentId ();
      }

      // MeasurementDeviceIds
      //
      if (i.MeasurementDeviceIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDeviceIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDeviceIds ();
      }

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ManufacturingProcessId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ManufacturingProcessId ();
      }

      // NotedEventIds
      //
      if (i.NotedEventIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotedEventIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotedEventIds ();
      }

      // NonConformanceDesignator
      //
      if (i.NonConformanceDesignator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonConformanceDesignator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonConformanceDesignator ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const AssociatedTolerancedFeatureSpecificationElementEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const AssociatedTolerancedFeatureSpecificationElementEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const AssociatedTolerancedFeatureSpecificationElementEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const ReferenceFeatureAssociationSpecificationElementEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const ReferenceFeatureAssociationSpecificationElementEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ReferenceFeatureAssociationSpecificationElementEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const ReferenceFeatureAssociationSpecificationParameterEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const ReferenceFeatureAssociationSpecificationParameterEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ReferenceFeatureAssociationSpecificationParameterEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const SingleNestingIndexFilterSymbolEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const SingleNestingIndexFilterSymbolEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const SingleNestingIndexFilterSymbolEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const SingleNestingIndexFilterType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Symbol
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Symbol",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Symbol ();
      }

      // NestingIndex
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NestingIndex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.NestingIndex ();
      }

      // SecondDirectionNestingIndex
      //
      if (i.SecondDirectionNestingIndex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondDirectionNestingIndex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondDirectionNestingIndex ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const DualNestingIndexFilterSymbolEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const DualNestingIndexFilterSymbolEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const DualNestingIndexFilterSymbolEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const DualNestingIndexFilterType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Symbol
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Symbol",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Symbol ();
      }

      // FirstNestingIndex
      //
      if (i.FirstNestingIndex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FirstNestingIndex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FirstNestingIndex ();
      }

      // SecondNestingIndex
      //
      if (i.SecondNestingIndex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondNestingIndex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondNestingIndex ();
      }

      // SecondDirectionFirstNestingIndex
      //
      if (i.SecondDirectionFirstNestingIndex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondDirectionFirstNestingIndex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondDirectionFirstNestingIndex ();
      }

      // SecondDirectionSecondNestingIndex
      //
      if (i.SecondDirectionSecondNestingIndex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondDirectionSecondNestingIndex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondDirectionSecondNestingIndex ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const FilterType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SingleNestingIndexFilter
      //
      if (i.SingleNestingIndexFilter ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SingleNestingIndexFilter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SingleNestingIndexFilter ();
      }

      // DualNestingIndexFilter
      //
      if (i.DualNestingIndexFilter ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DualNestingIndexFilter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DualNestingIndexFilter ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ReferenceFeatureAssociationSpecificationElementType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Filter
      //
      if (i.Filter ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Filter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Filter ();
      }

      // Association
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Association",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Association ();
      }

      // Parameter
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Parameter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Parameter ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const GeometricCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // AssociatedTolerancedFeatureSpecificationElement
      //
      if (i.AssociatedTolerancedFeatureSpecificationElement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AssociatedTolerancedFeatureSpecificationElement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AssociatedTolerancedFeatureSpecificationElement ();
      }

      // ReferenceFeatureAssociationSpecificationElement
      //
      if (i.ReferenceFeatureAssociationSpecificationElement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReferenceFeatureAssociationSpecificationElement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReferenceFeatureAssociationSpecificationElement ();
      }

      // DirectionFeature
      //
      if (i.DirectionFeature ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DirectionFeature",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DirectionFeature ();
      }

      // CollectionPlane
      //
      if (i.CollectionPlane ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CollectionPlane",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CollectionPlane ();
      }

      // IntersectionPlane
      //
      if (i.IntersectionPlane ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"IntersectionPlane",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.IntersectionPlane ();
      }

      // OrientationPlane
      //
      if (i.OrientationPlane ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OrientationPlane",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OrientationPlane ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const GeometricCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const GeometricCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const GeometricCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const DimensionalCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // DimensionType
      //
      if (i.DimensionType ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DimensionType",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DimensionType ();
      }

      // DimensionModifiers
      //
      if (i.DimensionModifiers ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DimensionModifiers",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DimensionModifiers ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const DimensionalCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const DimensionalCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const DimensionalCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CoordinateCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CoordinateCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicNominalBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CoordinateCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType& > (i);

      // TypeOfCoordinates
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TypeOfCoordinates",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.TypeOfCoordinates ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CoordinateCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAttributeCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicDefinitionType >
    _xsd_UserDefinedAttributeCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedAttributeCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAttributeCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // PassValues
      //
      if (i.PassValues ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PassValues",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PassValues ();
      }

      // FailValues
      //
      if (i.FailValues ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FailValues",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FailValues ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicNominalType >
    _xsd_UserDefinedAttributeCharacteristicNominalType_type_serializer_init (
      L"UserDefinedAttributeCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAttributeCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicMeasurementType >
    _xsd_UserDefinedAttributeCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedAttributeCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAttributeCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAttributeCharacteristicItemType >
    _xsd_UserDefinedAttributeCharacteristicItemType_type_serializer_init (
      L"UserDefinedAttributeCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const StringValuesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // StringValue
      //
      for (StringValuesType::StringValue_const_iterator
           b (i.StringValue ().begin ()), n (i.StringValue ().end ());
           b != n; ++b)
      {
        const StringValuesType::StringValue_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"StringValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const LinearCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedLinearCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedLinearCharacteristicDefinitionType >
    _xsd_UserDefinedLinearCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedLinearCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LinearCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }

      // TargetDualValue
      //
      if (i.TargetDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetDualValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedLinearCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedLinearCharacteristicNominalType >
    _xsd_UserDefinedLinearCharacteristicNominalType_type_serializer_init (
      L"UserDefinedLinearCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LinearCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedLinearCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedLinearCharacteristicMeasurementType >
    _xsd_UserDefinedLinearCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedLinearCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LinearCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedLinearCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedLinearCharacteristicItemType >
    _xsd_UserDefinedLinearCharacteristicItemType_type_serializer_init (
      L"UserDefinedLinearCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAngularCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAngularCharacteristicDefinitionType >
    _xsd_UserDefinedAngularCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedAngularCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAngularCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAngularCharacteristicNominalType >
    _xsd_UserDefinedAngularCharacteristicNominalType_type_serializer_init (
      L"UserDefinedAngularCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAngularCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAngularCharacteristicMeasurementType >
    _xsd_UserDefinedAngularCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedAngularCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAngularCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAngularCharacteristicItemType >
    _xsd_UserDefinedAngularCharacteristicItemType_type_serializer_init (
      L"UserDefinedAngularCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const TemperatureCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const TemperatureCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const TemperatureCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const TemperatureCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTemperatureCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::TemperatureCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicDefinitionType >
    _xsd_UserDefinedTemperatureCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedTemperatureCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTemperatureCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::TemperatureCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicNominalType >
    _xsd_UserDefinedTemperatureCharacteristicNominalType_type_serializer_init (
      L"UserDefinedTemperatureCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTemperatureCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::TemperatureCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicMeasurementType >
    _xsd_UserDefinedTemperatureCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedTemperatureCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTemperatureCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::TemperatureCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTemperatureCharacteristicItemType >
    _xsd_UserDefinedTemperatureCharacteristicItemType_type_serializer_init (
      L"UserDefinedTemperatureCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AreaCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const AreaCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const AreaCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const AreaCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAreaCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::AreaCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAreaCharacteristicDefinitionType >
    _xsd_UserDefinedAreaCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedAreaCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAreaCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::AreaCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAreaCharacteristicNominalType >
    _xsd_UserDefinedAreaCharacteristicNominalType_type_serializer_init (
      L"UserDefinedAreaCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAreaCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::AreaCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAreaCharacteristicMeasurementType >
    _xsd_UserDefinedAreaCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedAreaCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedAreaCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::AreaCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedAreaCharacteristicItemType >
    _xsd_UserDefinedAreaCharacteristicItemType_type_serializer_init (
      L"UserDefinedAreaCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ForceCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ForceCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ForceCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ForceCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedForceCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::ForceCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedForceCharacteristicDefinitionType >
    _xsd_UserDefinedForceCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedForceCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedForceCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::ForceCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedForceCharacteristicNominalType >
    _xsd_UserDefinedForceCharacteristicNominalType_type_serializer_init (
      L"UserDefinedForceCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedForceCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::ForceCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedForceCharacteristicMeasurementType >
    _xsd_UserDefinedForceCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedForceCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedForceCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::ForceCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedForceCharacteristicItemType >
    _xsd_UserDefinedForceCharacteristicItemType_type_serializer_init (
      L"UserDefinedForceCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const MassCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const MassCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const MassCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const MassCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedMassCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::MassCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedMassCharacteristicDefinitionType >
    _xsd_UserDefinedMassCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedMassCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedMassCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::MassCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedMassCharacteristicNominalType >
    _xsd_UserDefinedMassCharacteristicNominalType_type_serializer_init (
      L"UserDefinedMassCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedMassCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::MassCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedMassCharacteristicMeasurementType >
    _xsd_UserDefinedMassCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedMassCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedMassCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::MassCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedMassCharacteristicItemType >
    _xsd_UserDefinedMassCharacteristicItemType_type_serializer_init (
      L"UserDefinedMassCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PressureCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PressureCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PressureCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PressureCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedPressureCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::PressureCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedPressureCharacteristicDefinitionType >
    _xsd_UserDefinedPressureCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedPressureCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedPressureCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::PressureCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedPressureCharacteristicNominalType >
    _xsd_UserDefinedPressureCharacteristicNominalType_type_serializer_init (
      L"UserDefinedPressureCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedPressureCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::PressureCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedPressureCharacteristicMeasurementType >
    _xsd_UserDefinedPressureCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedPressureCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedPressureCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::PressureCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedPressureCharacteristicItemType >
    _xsd_UserDefinedPressureCharacteristicItemType_type_serializer_init (
      L"UserDefinedPressureCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SpeedCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const SpeedCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const SpeedCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const SpeedCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedSpeedCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::SpeedCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicDefinitionType >
    _xsd_UserDefinedSpeedCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedSpeedCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedSpeedCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::SpeedCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicNominalType >
    _xsd_UserDefinedSpeedCharacteristicNominalType_type_serializer_init (
      L"UserDefinedSpeedCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedSpeedCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::SpeedCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicMeasurementType >
    _xsd_UserDefinedSpeedCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedSpeedCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedSpeedCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::SpeedCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedSpeedCharacteristicItemType >
    _xsd_UserDefinedSpeedCharacteristicItemType_type_serializer_init (
      L"UserDefinedSpeedCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const TimeCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const TimeCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const TimeCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const TimeCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTimeCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::TimeCharacteristicDefinitionBaseType& > (i);

      // WhatToMeasure
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WhatToMeasure",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WhatToMeasure ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTimeCharacteristicDefinitionType >
    _xsd_UserDefinedTimeCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedTimeCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTimeCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::TimeCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTimeCharacteristicNominalType >
    _xsd_UserDefinedTimeCharacteristicNominalType_type_serializer_init (
      L"UserDefinedTimeCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTimeCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::TimeCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTimeCharacteristicMeasurementType >
    _xsd_UserDefinedTimeCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedTimeCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedTimeCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::TimeCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedTimeCharacteristicItemType >
    _xsd_UserDefinedTimeCharacteristicItemType_type_serializer_init (
      L"UserDefinedTimeCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedUnitCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedUnitCharacteristicDefinitionType >
    _xsd_UserDefinedUnitCharacteristicDefinitionType_type_serializer_init (
      L"UserDefinedUnitCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedUnitCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.TargetValue ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }

      // DefinedAsLimit
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DefinedAsLimit",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.DefinedAsLimit ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedUnitCharacteristicNominalType >
    _xsd_UserDefinedUnitCharacteristicNominalType_type_serializer_init (
      L"UserDefinedUnitCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedUnitCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedUnitCharacteristicMeasurementType >
    _xsd_UserDefinedUnitCharacteristicMeasurementType_type_serializer_init (
      L"UserDefinedUnitCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const UserDefinedUnitCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, UserDefinedUnitCharacteristicItemType >
    _xsd_UserDefinedUnitCharacteristicItemType_type_serializer_init (
      L"UserDefinedUnitCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentDefinitionBaseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // DatumReferenceFrameId
      //
      if (i.DatumReferenceFrameId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumReferenceFrameId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumReferenceFrameId ();
      }

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // CharacteristicDesignator
      //
      if (i.CharacteristicDesignator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicDesignator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicDesignator ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentMeasurementBaseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }

      // Status
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Status",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Status ();
      }

      // DRFTransformActualId
      //
      if (i.DRFTransformActualId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DRFTransformActualId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DRFTransformActualId ();
      }

      // ZoneDataSet
      //
      if (i.ZoneDataSet ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneDataSet",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneDataSet ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentPositionDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CompositeSegmentDefinitionBaseType& > (i);

      // MaterialCondition
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaterialCondition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.MaterialCondition ();
      }

      // ZoneShape
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneShape",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ZoneShape ();
      }

      // MaximumToleranceValue
      //
      if (i.MaximumToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaximumToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaximumToleranceValue ();
      }

      // ProjectedToleranceZone
      //
      if (i.ProjectedToleranceZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProjectedToleranceZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProjectedToleranceZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentPositionMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CompositeSegmentMeasurementBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentProfileDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CompositeSegmentDefinitionBaseType& > (i);

      // OuterDisposition
      //
      if (i.OuterDisposition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OuterDisposition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OuterDisposition ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentProfileMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CompositeSegmentMeasurementBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentSymmetryDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CompositeSegmentDefinitionBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentSymmetryMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CompositeSegmentMeasurementBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const OriginReferenceType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // FeatureNominalId
      //
      if (i.FeatureNominalId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureNominalId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureNominalId ();
      }

      // ReferencedComponent
      //
      if (i.ReferencedComponent ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReferencedComponent",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReferencedComponent ();
      }

      // DatumDefinitionId
      //
      if (i.DatumDefinitionId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumDefinitionId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumDefinitionId ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const SurfaceTextureCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // RoughnessAverage
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"RoughnessAverage",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.RoughnessAverage ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceTextureCharacteristicDefinitionType >
    _xsd_SurfaceTextureCharacteristicDefinitionType_type_serializer_init (
      L"SurfaceTextureCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const RoughnessLayEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const RoughnessLayEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const RoughnessLayEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const RoughnessObtentionEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const RoughnessObtentionEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const RoughnessObtentionEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const RoughnessApplicabilityEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const RoughnessApplicabilityEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const RoughnessApplicabilityEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const SurfaceTextureCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // Obtention
      //
      if (i.Obtention ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Obtention",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Obtention ();
      }

      // Applicability
      //
      if (i.Applicability ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Applicability",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Applicability ();
      }

      // MinimumMaterialRemoval
      //
      if (i.MinimumMaterialRemoval ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinimumMaterialRemoval",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinimumMaterialRemoval ();
      }

      // ProductionMethod
      //
      if (i.ProductionMethod ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProductionMethod",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProductionMethod ();
      }

      // Cutoff
      //
      if (i.Cutoff ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Cutoff",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Cutoff ();
      }

      // SecondaryRoughnessParameter
      //
      if (i.SecondaryRoughnessParameter ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondaryRoughnessParameter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondaryRoughnessParameter ();
      }

      // DirectionOfLay
      //
      if (i.DirectionOfLay ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DirectionOfLay",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DirectionOfLay ();
      }

      // OtherSurfaceParameter
      //
      if (i.OtherSurfaceParameter ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherSurfaceParameter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherSurfaceParameter ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceTextureCharacteristicNominalType >
    _xsd_SurfaceTextureCharacteristicNominalType_type_serializer_init (
      L"SurfaceTextureCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceTextureCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // RoughnessAverageValue
      //
      if (i.RoughnessAverageValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"RoughnessAverageValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.RoughnessAverageValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceTextureCharacteristicMeasurementType >
    _xsd_SurfaceTextureCharacteristicMeasurementType_type_serializer_init (
      L"SurfaceTextureCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceTextureCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceTextureCharacteristicItemType >
    _xsd_SurfaceTextureCharacteristicItemType_type_serializer_init (
      L"SurfaceTextureCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const OrientationDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ZoneOrientationVector
      //
      if (i.ZoneOrientationVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneOrientationVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneOrientationVector ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const OrientationPlanarZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ZoneOrientationVector
      //
      if (i.ZoneOrientationVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneOrientationVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneOrientationVector ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const OrientationZoneShapeType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // DiametricalZone
      //
      if (i.DiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DiametricalZone ();
      }

      // PlanarZone
      //
      if (i.PlanarZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PlanarZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PlanarZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const OrientationCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const OrientationCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // DatumReferenceFrameId
      //
      if (i.DatumReferenceFrameId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumReferenceFrameId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumReferenceFrameId ();
      }

      // MaterialCondition
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaterialCondition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.MaterialCondition ();
      }

      // SizeCharacteristicDefinitionId
      //
      if (i.SizeCharacteristicDefinitionId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SizeCharacteristicDefinitionId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SizeCharacteristicDefinitionId ();
      }

      // ZoneShape
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneShape",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ZoneShape ();
      }

      // TangentPlane
      //
      if (i.TangentPlane ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TangentPlane",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TangentPlane ();
      }

      // MaximumToleranceValue
      //
      if (i.MaximumToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaximumToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaximumToleranceValue ();
      }

      // ProjectedToleranceZoneValue
      //
      if (i.ProjectedToleranceZoneValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProjectedToleranceZoneValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProjectedToleranceZoneValue ();
      }

      // EachRadialElement
      //
      if (i.EachRadialElement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"EachRadialElement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.EachRadialElement ();
      }

      // EachElement
      //
      if (i.EachElement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"EachElement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.EachElement ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const OrientationCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicNominalBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const OrientationCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (i);

      // DatumsOk
      //
      if (i.DatumsOk ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumsOk",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumsOk ();
      }

      // Bonus
      //
      if (i.Bonus ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Bonus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Bonus ();
      }

      // ReferenceLength
      //
      if (i.ReferenceLength ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ReferenceLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ReferenceLength ();
      }

      // DRFTransformActualId
      //
      if (i.DRFTransformActualId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DRFTransformActualId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DRFTransformActualId ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const AngularityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularityCharacteristicItemType >
    _xsd_AngularityCharacteristicItemType_type_serializer_init (
      L"AngularityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularityCharacteristicDefinitionType >
    _xsd_AngularityCharacteristicDefinitionType_type_serializer_init (
      L"AngularityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicNominalBaseType& > (i);

      // Angle
      //
      if (i.Angle ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Angle",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Angle ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularityCharacteristicNominalType >
    _xsd_AngularityCharacteristicNominalType_type_serializer_init (
      L"AngularityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularityCharacteristicMeasurementType >
    _xsd_AngularityCharacteristicMeasurementType_type_serializer_init (
      L"AngularityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PerpendicularityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PerpendicularityCharacteristicItemType >
    _xsd_PerpendicularityCharacteristicItemType_type_serializer_init (
      L"PerpendicularityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PerpendicularityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PerpendicularityCharacteristicDefinitionType >
    _xsd_PerpendicularityCharacteristicDefinitionType_type_serializer_init (
      L"PerpendicularityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PerpendicularityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PerpendicularityCharacteristicNominalType >
    _xsd_PerpendicularityCharacteristicNominalType_type_serializer_init (
      L"PerpendicularityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PerpendicularityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PerpendicularityCharacteristicMeasurementType >
    _xsd_PerpendicularityCharacteristicMeasurementType_type_serializer_init (
      L"PerpendicularityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ParallelismCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ParallelismCharacteristicItemType >
    _xsd_ParallelismCharacteristicItemType_type_serializer_init (
      L"ParallelismCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ParallelismCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ParallelismCharacteristicDefinitionType >
    _xsd_ParallelismCharacteristicDefinitionType_type_serializer_init (
      L"ParallelismCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ParallelismCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ParallelismCharacteristicNominalType >
    _xsd_ParallelismCharacteristicNominalType_type_serializer_init (
      L"ParallelismCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ParallelismCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::OrientationCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ParallelismCharacteristicMeasurementType >
    _xsd_ParallelismCharacteristicMeasurementType_type_serializer_init (
      L"ParallelismCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FormCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const FormCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicNominalBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const FormCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const FormCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const StraightnessDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);
    }

    void
    operator<< (xercesc::DOMAttr&, const StraightnessDiametricalZoneType&)
    {
    }

    void
    operator<< (::xml_schema::list_stream&,
                const StraightnessDiametricalZoneType&)
    {
    }

    void
    operator<< (xercesc::DOMElement& e, const StraightnessNonDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ZoneOrientationVector
      //
      if (i.ZoneOrientationVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneOrientationVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneOrientationVector ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const StraightnessZoneShapeType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // DiametricalZone
      //
      if (i.DiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DiametricalZone ();
      }

      // NonDiametricalZone
      //
      if (i.NonDiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonDiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonDiametricalZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const StraightnessCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StraightnessCharacteristicItemType >
    _xsd_StraightnessCharacteristicItemType_type_serializer_init (
      L"StraightnessCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const StraightnessCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      if (i.ToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // ToleranceZonePerUnitLength
      //
      if (i.ToleranceZonePerUnitLength ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitLength ();
      }

      // MaterialCondition
      //
      if (i.MaterialCondition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaterialCondition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaterialCondition ();
      }

      // SizeCharacteristicDefinitionId
      //
      if (i.SizeCharacteristicDefinitionId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SizeCharacteristicDefinitionId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SizeCharacteristicDefinitionId ();
      }

      // ZoneShape
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneShape",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ZoneShape ();
      }

      // MaximumToleranceValue
      //
      if (i.MaximumToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaximumToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaximumToleranceValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StraightnessCharacteristicDefinitionType >
    _xsd_StraightnessCharacteristicDefinitionType_type_serializer_init (
      L"StraightnessCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const StraightnessCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);

      // DirectionCurveId
      //
      if (i.DirectionCurveId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DirectionCurveId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DirectionCurveId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StraightnessCharacteristicNominalType >
    _xsd_StraightnessCharacteristicNominalType_type_serializer_init (
      L"StraightnessCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const StraightnessCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);

      // Bonus
      //
      if (i.Bonus ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Bonus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Bonus ();
      }

      // MaxStraightness
      //
      if (i.MaxStraightness ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxStraightness",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxStraightness ();
      }

      // ZoneOrientation
      //
      if (i.ZoneOrientation ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneOrientation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneOrientation ();
      }

      // ZoneLine
      //
      if (i.ZoneLine ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneLine",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneLine ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StraightnessCharacteristicMeasurementType >
    _xsd_StraightnessCharacteristicMeasurementType_type_serializer_init (
      L"StraightnessCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatnessCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatnessCharacteristicItemType >
    _xsd_FlatnessCharacteristicItemType_type_serializer_init (
      L"FlatnessCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatnessCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      if (i.ToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // ToleranceZonePerUnitArea
      //
      if (i.ToleranceZonePerUnitArea ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitArea",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitArea ();
      }

      // MaterialCondition
      //
      if (i.MaterialCondition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaterialCondition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaterialCondition ();
      }

      // SizeCharacteristicDefinitionId
      //
      if (i.SizeCharacteristicDefinitionId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SizeCharacteristicDefinitionId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SizeCharacteristicDefinitionId ();
      }

      // MaximumToleranceValue
      //
      if (i.MaximumToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaximumToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaximumToleranceValue ();
      }

      // NotConvex
      //
      if (i.NotConvex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NotConvex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NotConvex ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatnessCharacteristicDefinitionType >
    _xsd_FlatnessCharacteristicDefinitionType_type_serializer_init (
      L"FlatnessCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatnessCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatnessCharacteristicNominalType >
    _xsd_FlatnessCharacteristicNominalType_type_serializer_init (
      L"FlatnessCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatnessCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);

      // Bonus
      //
      if (i.Bonus ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Bonus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Bonus ();
      }

      // MaxFlatness
      //
      if (i.MaxFlatness ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxFlatness",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxFlatness ();
      }

      // ZonePlane
      //
      if (i.ZonePlane ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZonePlane",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZonePlane ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatnessCharacteristicMeasurementType >
    _xsd_FlatnessCharacteristicMeasurementType_type_serializer_init (
      L"FlatnessCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CircularityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularityCharacteristicItemType >
    _xsd_CircularityCharacteristicItemType_type_serializer_init (
      L"CircularityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CircularityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      if (i.ToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // ToleranceZonePerUnitAngle
      //
      if (i.ToleranceZonePerUnitAngle ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitAngle",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitAngle ();
      }

      // ToleranceZonePerUnitArcLength
      //
      if (i.ToleranceZonePerUnitArcLength ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitArcLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitArcLength ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularityCharacteristicDefinitionType >
    _xsd_CircularityCharacteristicDefinitionType_type_serializer_init (
      L"CircularityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CircularityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);

      // ProfileCurveId
      //
      if (i.ProfileCurveId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProfileCurveId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProfileCurveId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularityCharacteristicNominalType >
    _xsd_CircularityCharacteristicNominalType_type_serializer_init (
      L"CircularityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CircularityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);

      // MaxCircularity
      //
      if (i.MaxCircularity ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxCircularity",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxCircularity ();
      }

      // ZoneRadii
      //
      if (i.ZoneRadii ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneRadii",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneRadii ();
      }

      // ZonePlane
      //
      if (i.ZonePlane ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZonePlane",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZonePlane ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularityCharacteristicMeasurementType >
    _xsd_CircularityCharacteristicMeasurementType_type_serializer_init (
      L"CircularityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicityCharacteristicItemType >
    _xsd_ConicityCharacteristicItemType_type_serializer_init (
      L"ConicityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicityCharacteristicDefinitionType >
    _xsd_ConicityCharacteristicDefinitionType_type_serializer_init (
      L"ConicityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicityCharacteristicNominalType >
    _xsd_ConicityCharacteristicNominalType_type_serializer_init (
      L"ConicityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicityCharacteristicMeasurementType >
    _xsd_ConicityCharacteristicMeasurementType_type_serializer_init (
      L"ConicityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CylindricityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CylindricityCharacteristicItemType >
    _xsd_CylindricityCharacteristicItemType_type_serializer_init (
      L"CylindricityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CylindricityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      if (i.ToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // ToleranceZonePerUnitAngle
      //
      if (i.ToleranceZonePerUnitAngle ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitAngle",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitAngle ();
      }

      // ToleranceZonePerUnitArcLength
      //
      if (i.ToleranceZonePerUnitArcLength ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitArcLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitArcLength ();
      }

      // ToleranceZonePerUnitPolarArea
      //
      if (i.ToleranceZonePerUnitPolarArea ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitPolarArea",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitPolarArea ();
      }

      // ToleranceZonePerUnitArea
      //
      if (i.ToleranceZonePerUnitArea ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitArea",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitArea ();
      }

      // ToleranceZonePerUnitLength
      //
      if (i.ToleranceZonePerUnitLength ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceZonePerUnitLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceZonePerUnitLength ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CylindricityCharacteristicDefinitionType >
    _xsd_CylindricityCharacteristicDefinitionType_type_serializer_init (
      L"CylindricityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CylindricityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CylindricityCharacteristicNominalType >
    _xsd_CylindricityCharacteristicNominalType_type_serializer_init (
      L"CylindricityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CylindricityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);

      // MaxCylindricity
      //
      if (i.MaxCylindricity ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxCylindricity",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxCylindricity ();
      }

      // ZoneRadii
      //
      if (i.ZoneRadii ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneRadii",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneRadii ();
      }

      // ZoneAxis
      //
      if (i.ZoneAxis ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneAxis",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneAxis ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CylindricityCharacteristicMeasurementType >
    _xsd_CylindricityCharacteristicMeasurementType_type_serializer_init (
      L"CylindricityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const EllipticityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EllipticityCharacteristicItemType >
    _xsd_EllipticityCharacteristicItemType_type_serializer_init (
      L"EllipticityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const EllipticityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EllipticityCharacteristicDefinitionType >
    _xsd_EllipticityCharacteristicDefinitionType_type_serializer_init (
      L"EllipticityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const EllipticityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EllipticityCharacteristicNominalType >
    _xsd_EllipticityCharacteristicNominalType_type_serializer_init (
      L"EllipticityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const EllipticityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EllipticityCharacteristicMeasurementType >
    _xsd_EllipticityCharacteristicMeasurementType_type_serializer_init (
      L"EllipticityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericityCharacteristicItemType >
    _xsd_SphericityCharacteristicItemType_type_serializer_init (
      L"SphericityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericityCharacteristicDefinitionType >
    _xsd_SphericityCharacteristicDefinitionType_type_serializer_init (
      L"SphericityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericityCharacteristicNominalType >
    _xsd_SphericityCharacteristicNominalType_type_serializer_init (
      L"SphericityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);

      // ZoneRadii
      //
      if (i.ZoneRadii ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneRadii",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneRadii ();
      }

      // ZonePoint
      //
      if (i.ZonePoint ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZonePoint",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZonePoint ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericityCharacteristicMeasurementType >
    _xsd_SphericityCharacteristicMeasurementType_type_serializer_init (
      L"SphericityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ToroidicityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ToroidicityCharacteristicItemType >
    _xsd_ToroidicityCharacteristicItemType_type_serializer_init (
      L"ToroidicityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ToroidicityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ToroidicityCharacteristicDefinitionType >
    _xsd_ToroidicityCharacteristicDefinitionType_type_serializer_init (
      L"ToroidicityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ToroidicityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ToroidicityCharacteristicNominalType >
    _xsd_ToroidicityCharacteristicNominalType_type_serializer_init (
      L"ToroidicityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ToroidicityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ToroidicityCharacteristicMeasurementType >
    _xsd_ToroidicityCharacteristicMeasurementType_type_serializer_init (
      L"ToroidicityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const OtherFormCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, OtherFormCharacteristicItemType >
    _xsd_OtherFormCharacteristicItemType_type_serializer_init (
      L"OtherFormCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const OtherFormCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, OtherFormCharacteristicDefinitionType >
    _xsd_OtherFormCharacteristicDefinitionType_type_serializer_init (
      L"OtherFormCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const OtherFormCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, OtherFormCharacteristicNominalType >
    _xsd_OtherFormCharacteristicNominalType_type_serializer_init (
      L"OtherFormCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const OtherFormCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::FormCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, OtherFormCharacteristicMeasurementType >
    _xsd_OtherFormCharacteristicMeasurementType_type_serializer_init (
      L"OtherFormCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LocationCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const LocationCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // DatumReferenceFrameId
      //
      if (i.DatumReferenceFrameId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumReferenceFrameId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumReferenceFrameId ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const LocationCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicNominalBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const LocationCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (i);

      // ZoneDataSet
      //
      if (i.ZoneDataSet ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneDataSet",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneDataSet ();
      }

      // DatumsOk
      //
      if (i.DatumsOk ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumsOk",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumsOk ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PositionCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PositionCharacteristicItemType >
    _xsd_PositionCharacteristicItemType_type_serializer_init (
      L"PositionCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PositionSphericalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Dimensionality
      //
      if (i.Dimensionality ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Dimensionality",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Dimensionality ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PositionDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Dimensionality
      //
      if (i.Dimensionality ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Dimensionality",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Dimensionality ();
      }

      // ZoneOrientationVector
      //
      if (i.ZoneOrientationVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneOrientationVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneOrientationVector ();
      }

      // ElongatedZone
      //
      if (i.ElongatedZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ElongatedZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ElongatedZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PositionNonDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Dimensionality
      //
      if (i.Dimensionality ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Dimensionality",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Dimensionality ();
      }

      // ZoneOrientationVector
      //
      if (i.ZoneOrientationVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneOrientationVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneOrientationVector ();
      }

      // BoundaryZone
      //
      if (i.BoundaryZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BoundaryZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.BoundaryZone ();
      }

      // ZoneOrientationEnum
      //
      if (i.ZoneOrientationEnum ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneOrientationEnum",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneOrientationEnum ();
      }

      // CoordinateSystemId
      //
      if (i.CoordinateSystemId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemId ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PositionZoneShapeType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SphericalZone
      //
      if (i.SphericalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SphericalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SphericalZone ();
      }

      // DiametricalZone
      //
      if (i.DiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DiametricalZone ();
      }

      // NonDiametricalZone
      //
      if (i.NonDiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonDiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonDiametricalZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PositionCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (i);

      // MaterialCondition
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaterialCondition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.MaterialCondition ();
      }

      // SizeCharacteristicDefinitionId
      //
      if (i.SizeCharacteristicDefinitionId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SizeCharacteristicDefinitionId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SizeCharacteristicDefinitionId ();
      }

      // ZoneShape
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneShape",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ZoneShape ();
      }

      // MaximumToleranceValue
      //
      if (i.MaximumToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaximumToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaximumToleranceValue ();
      }

      // ProjectedToleranceZoneValue
      //
      if (i.ProjectedToleranceZoneValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProjectedToleranceZoneValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProjectedToleranceZoneValue ();
      }

      // SecondCompositeSegmentPositionDefinition
      //
      if (i.SecondCompositeSegmentPositionDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondCompositeSegmentPositionDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondCompositeSegmentPositionDefinition ();
      }

      // ThirdCompositeSegmentPositionDefinition
      //
      if (i.ThirdCompositeSegmentPositionDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThirdCompositeSegmentPositionDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThirdCompositeSegmentPositionDefinition ();
      }

      // FourthCompositeSegmentPositionDefinition
      //
      if (i.FourthCompositeSegmentPositionDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FourthCompositeSegmentPositionDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FourthCompositeSegmentPositionDefinition ();
      }

      // ToPointToleranceValue
      //
      if (i.ToPointToleranceValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToPointToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToPointToleranceValue ();
      }

      // OrientationOnly
      //
      if (i.OrientationOnly ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OrientationOnly",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OrientationOnly ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PositionCharacteristicDefinitionType >
    _xsd_PositionCharacteristicDefinitionType_type_serializer_init (
      L"PositionCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PositionCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicNominalBaseType& > (i);

      // CoordinateMethod
      //
      if (i.CoordinateMethod ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateMethod",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateMethod ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PositionCharacteristicNominalType >
    _xsd_PositionCharacteristicNominalType_type_serializer_init (
      L"PositionCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PositionCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicMeasurementBaseType& > (i);

      // Bonus
      //
      if (i.Bonus ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Bonus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Bonus ();
      }

      // DRFTransformActualId
      //
      if (i.DRFTransformActualId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DRFTransformActualId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DRFTransformActualId ();
      }

      // SecondCompositeSegmentPositionMeasurement
      //
      if (i.SecondCompositeSegmentPositionMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondCompositeSegmentPositionMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondCompositeSegmentPositionMeasurement ();
      }

      // ThirdCompositeSegmentPositionMeasurement
      //
      if (i.ThirdCompositeSegmentPositionMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThirdCompositeSegmentPositionMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThirdCompositeSegmentPositionMeasurement ();
      }

      // FourthCompositeSegmentPositionMeasurement
      //
      if (i.FourthCompositeSegmentPositionMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FourthCompositeSegmentPositionMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FourthCompositeSegmentPositionMeasurement ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PositionCharacteristicMeasurementType >
    _xsd_PositionCharacteristicMeasurementType_type_serializer_init (
      L"PositionCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleCharacteristicItemType >
    _xsd_AngleCharacteristicItemType_type_serializer_init (
      L"AngleCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleCharacteristicDefinitionType >
    _xsd_AngleCharacteristicDefinitionType_type_serializer_init (
      L"AngleCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleCharacteristicNominalType >
    _xsd_AngleCharacteristicNominalType_type_serializer_init (
      L"AngleCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleCharacteristicMeasurementType >
    _xsd_AngleCharacteristicMeasurementType_type_serializer_init (
      L"AngleCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleFromCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleFromCharacteristicItemType >
    _xsd_AngleFromCharacteristicItemType_type_serializer_init (
      L"AngleFromCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleFromCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleFromCharacteristicDefinitionType >
    _xsd_AngleFromCharacteristicDefinitionType_type_serializer_init (
      L"AngleFromCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleFromCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicNominalBaseType& > (i);

      // OriginReference
      //
      if (i.OriginReference ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OriginReference",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OriginReference ();
      }

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }

      // AnalysisMode
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisMode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.AnalysisMode ();
      }

      // CoordinateSystemId
      //
      if (i.CoordinateSystemId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemId ();
      }

      // MeasurementDirective
      //
      if (i.MeasurementDirective ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDirective",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDirective ();
      }

      // Vertex
      //
      if (i.Vertex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Vertex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Vertex ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleFromCharacteristicNominalType >
    _xsd_AngleFromCharacteristicNominalType_type_serializer_init (
      L"AngleFromCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleFromCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicMeasurementBaseType& > (i);

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }

      // Vertex
      //
      if (i.Vertex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Vertex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Vertex ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleFromCharacteristicMeasurementType >
    _xsd_AngleFromCharacteristicMeasurementType_type_serializer_init (
      L"AngleFromCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleBetweenCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleBetweenCharacteristicItemType >
    _xsd_AngleBetweenCharacteristicItemType_type_serializer_init (
      L"AngleBetweenCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleBetweenCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleBetweenCharacteristicDefinitionType >
    _xsd_AngleBetweenCharacteristicDefinitionType_type_serializer_init (
      L"AngleBetweenCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleBetweenCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicNominalBaseType& > (i);

      // FeatureNominalPairs
      //
      if (i.FeatureNominalPairs ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureNominalPairs",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureNominalPairs ();
      }

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }

      // AnalysisMode
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisMode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.AnalysisMode ();
      }

      // CoordinateSystemId
      //
      if (i.CoordinateSystemId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemId ();
      }

      // MeasurementDirective
      //
      if (i.MeasurementDirective ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDirective",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDirective ();
      }

      // Vertex
      //
      if (i.Vertex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Vertex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Vertex ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleBetweenCharacteristicNominalType >
    _xsd_AngleBetweenCharacteristicNominalType_type_serializer_init (
      L"AngleBetweenCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngleBetweenCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::AngularCharacteristicMeasurementBaseType& > (i);

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }

      // Vertex
      //
      if (i.Vertex ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Vertex",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Vertex ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngleBetweenCharacteristicMeasurementType >
    _xsd_AngleBetweenCharacteristicMeasurementType_type_serializer_init (
      L"AngleBetweenCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LinearCoordinateCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LinearCoordinateCharacteristicItemType >
    _xsd_LinearCoordinateCharacteristicItemType_type_serializer_init (
      L"LinearCoordinateCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LinearCoordinateCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LinearCoordinateCharacteristicDefinitionType >
    _xsd_LinearCoordinateCharacteristicDefinitionType_type_serializer_init (
      L"LinearCoordinateCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LinearCoordinateCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }

      // Direction
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Direction",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Direction ();
      }

      // CoordinateSystemId
      //
      if (i.CoordinateSystemId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LinearCoordinateCharacteristicNominalType >
    _xsd_LinearCoordinateCharacteristicNominalType_type_serializer_init (
      L"LinearCoordinateCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LinearCoordinateCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LinearCoordinateCharacteristicMeasurementType >
    _xsd_LinearCoordinateCharacteristicMeasurementType_type_serializer_init (
      L"LinearCoordinateCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCoordinateCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularCoordinateCharacteristicItemType >
    _xsd_AngularCoordinateCharacteristicItemType_type_serializer_init (
      L"AngularCoordinateCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCoordinateCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularCoordinateCharacteristicDefinitionType >
    _xsd_AngularCoordinateCharacteristicDefinitionType_type_serializer_init (
      L"AngularCoordinateCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCoordinateCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }

      // Direction
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Direction",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Direction ();
      }

      // CoordinateSystemId
      //
      if (i.CoordinateSystemId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularCoordinateCharacteristicNominalType >
    _xsd_AngularCoordinateCharacteristicNominalType_type_serializer_init (
      L"AngularCoordinateCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const AngularCoordinateCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CoordinateCharacteristicMeasurementBaseType& > (i);

      // Value
      //
      if (i.Value ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Value",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Value ();
      }

      // MaxValue
      //
      if (i.MaxValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MaxValue ();
      }

      // MinValue
      //
      if (i.MinValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MinValue ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AngularCoordinateCharacteristicMeasurementType >
    _xsd_AngularCoordinateCharacteristicMeasurementType_type_serializer_init (
      L"AngularCoordinateCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CurveLengthCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CurveLengthCharacteristicItemType >
    _xsd_CurveLengthCharacteristicItemType_type_serializer_init (
      L"CurveLengthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CurveLengthCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CurveLengthCharacteristicDefinitionType >
    _xsd_CurveLengthCharacteristicDefinitionType_type_serializer_init (
      L"CurveLengthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CurveLengthCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CurveLengthCharacteristicNominalType >
    _xsd_CurveLengthCharacteristicNominalType_type_serializer_init (
      L"CurveLengthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CurveLengthCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CurveLengthCharacteristicMeasurementType >
    _xsd_CurveLengthCharacteristicMeasurementType_type_serializer_init (
      L"CurveLengthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DiameterCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DiameterCharacteristicItemType >
    _xsd_DiameterCharacteristicItemType_type_serializer_init (
      L"DiameterCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DiameterCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::DimensionalCharacteristicDefinitionBaseType& > (i);

      // Tolerance
      //
      if (i.Tolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Tolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Tolerance ();
      }

      // LimitsAndFitsSpecification
      //
      if (i.LimitsAndFitsSpecification ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LimitsAndFitsSpecification",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.LimitsAndFitsSpecification ();
      }

      // NonTolerance
      //
      if (i.NonTolerance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonTolerance ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DiameterCharacteristicDefinitionType >
    _xsd_DiameterCharacteristicDefinitionType_type_serializer_init (
      L"DiameterCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DiameterCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DiameterCharacteristicNominalType >
    _xsd_DiameterCharacteristicNominalType_type_serializer_init (
      L"DiameterCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DiameterCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DiameterCharacteristicMeasurementType >
    _xsd_DiameterCharacteristicMeasurementType_type_serializer_init (
      L"DiameterCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalDiameterCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalDiameterCharacteristicItemType >
    _xsd_SphericalDiameterCharacteristicItemType_type_serializer_init (
      L"SphericalDiameterCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalDiameterCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalDiameterCharacteristicDefinitionType >
    _xsd_SphericalDiameterCharacteristicDefinitionType_type_serializer_init (
      L"SphericalDiameterCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalDiameterCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalDiameterCharacteristicNominalType >
    _xsd_SphericalDiameterCharacteristicNominalType_type_serializer_init (
      L"SphericalDiameterCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalDiameterCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalDiameterCharacteristicMeasurementType >
    _xsd_SphericalDiameterCharacteristicMeasurementType_type_serializer_init (
      L"SphericalDiameterCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LengthCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LengthCharacteristicItemType >
    _xsd_LengthCharacteristicItemType_type_serializer_init (
      L"LengthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LengthCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LengthCharacteristicDefinitionType >
    _xsd_LengthCharacteristicDefinitionType_type_serializer_init (
      L"LengthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LengthCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LengthCharacteristicNominalType >
    _xsd_LengthCharacteristicNominalType_type_serializer_init (
      L"LengthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LengthCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LengthCharacteristicMeasurementType >
    _xsd_LengthCharacteristicMeasurementType_type_serializer_init (
      L"LengthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WidthCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WidthCharacteristicItemType >
    _xsd_WidthCharacteristicItemType_type_serializer_init (
      L"WidthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WidthCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WidthCharacteristicDefinitionType >
    _xsd_WidthCharacteristicDefinitionType_type_serializer_init (
      L"WidthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WidthCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WidthCharacteristicNominalType >
    _xsd_WidthCharacteristicNominalType_type_serializer_init (
      L"WidthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WidthCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WidthCharacteristicMeasurementType >
    _xsd_WidthCharacteristicMeasurementType_type_serializer_init (
      L"WidthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const HeightCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HeightCharacteristicItemType >
    _xsd_HeightCharacteristicItemType_type_serializer_init (
      L"HeightCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const HeightCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HeightCharacteristicDefinitionType >
    _xsd_HeightCharacteristicDefinitionType_type_serializer_init (
      L"HeightCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const HeightCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HeightCharacteristicNominalType >
    _xsd_HeightCharacteristicNominalType_type_serializer_init (
      L"HeightCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const HeightCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HeightCharacteristicMeasurementType >
    _xsd_HeightCharacteristicMeasurementType_type_serializer_init (
      L"HeightCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DepthCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DepthCharacteristicItemType >
    _xsd_DepthCharacteristicItemType_type_serializer_init (
      L"DepthCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DepthCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DepthCharacteristicDefinitionType >
    _xsd_DepthCharacteristicDefinitionType_type_serializer_init (
      L"DepthCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DepthCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DepthCharacteristicNominalType >
    _xsd_DepthCharacteristicNominalType_type_serializer_init (
      L"DepthCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DepthCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DepthCharacteristicMeasurementType >
    _xsd_DepthCharacteristicMeasurementType_type_serializer_init (
      L"DepthCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ThicknessCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThicknessCharacteristicItemType >
    _xsd_ThicknessCharacteristicItemType_type_serializer_init (
      L"ThicknessCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ThicknessCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThicknessCharacteristicDefinitionType >
    _xsd_ThicknessCharacteristicDefinitionType_type_serializer_init (
      L"ThicknessCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ThicknessCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThicknessCharacteristicNominalType >
    _xsd_ThicknessCharacteristicNominalType_type_serializer_init (
      L"ThicknessCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ThicknessCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThicknessCharacteristicMeasurementType >
    _xsd_ThicknessCharacteristicMeasurementType_type_serializer_init (
      L"ThicknessCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SquareCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SquareCharacteristicItemType >
    _xsd_SquareCharacteristicItemType_type_serializer_init (
      L"SquareCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SquareCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SquareCharacteristicDefinitionType >
    _xsd_SquareCharacteristicDefinitionType_type_serializer_init (
      L"SquareCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SquareCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SquareCharacteristicNominalType >
    _xsd_SquareCharacteristicNominalType_type_serializer_init (
      L"SquareCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SquareCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SquareCharacteristicMeasurementType >
    _xsd_SquareCharacteristicMeasurementType_type_serializer_init (
      L"SquareCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceFromCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceFromCharacteristicItemType >
    _xsd_DistanceFromCharacteristicItemType_type_serializer_init (
      L"DistanceFromCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceFromCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceFromCharacteristicDefinitionType >
    _xsd_DistanceFromCharacteristicDefinitionType_type_serializer_init (
      L"DistanceFromCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceFromCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);

      // OriginReference
      //
      if (i.OriginReference ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OriginReference",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OriginReference ();
      }

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }

      // AnalysisMode
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisMode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.AnalysisMode ();
      }

      // MeasurementDirective
      //
      if (i.MeasurementDirective ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDirective",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDirective ();
      }

      // CoordinateSystemId
      //
      if (i.CoordinateSystemId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceFromCharacteristicNominalType >
    _xsd_DistanceFromCharacteristicNominalType_type_serializer_init (
      L"DistanceFromCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceFromCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceFromCharacteristicMeasurementType >
    _xsd_DistanceFromCharacteristicMeasurementType_type_serializer_init (
      L"DistanceFromCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceBetweenCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceBetweenCharacteristicItemType >
    _xsd_DistanceBetweenCharacteristicItemType_type_serializer_init (
      L"DistanceBetweenCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceBetweenCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceBetweenCharacteristicDefinitionType >
    _xsd_DistanceBetweenCharacteristicDefinitionType_type_serializer_init (
      L"DistanceBetweenCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceBetweenCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);

      // FeatureNominalPairs
      //
      if (i.FeatureNominalPairs ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureNominalPairs",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureNominalPairs ();
      }

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }

      // AnalysisMode
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisMode",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.AnalysisMode ();
      }

      // MeasurementDirective
      //
      if (i.MeasurementDirective ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurementDirective",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.MeasurementDirective ();
      }

      // CoordinateSystemId
      //
      if (i.CoordinateSystemId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CoordinateSystemId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CoordinateSystemId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceBetweenCharacteristicNominalType >
    _xsd_DistanceBetweenCharacteristicNominalType_type_serializer_init (
      L"DistanceBetweenCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const DistanceBetweenCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);

      // AnalysisVector
      //
      if (i.AnalysisVector ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AnalysisVector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AnalysisVector ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DistanceBetweenCharacteristicMeasurementType >
    _xsd_DistanceBetweenCharacteristicMeasurementType_type_serializer_init (
      L"DistanceBetweenCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const RadiusCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RadiusCharacteristicItemType >
    _xsd_RadiusCharacteristicItemType_type_serializer_init (
      L"RadiusCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const RadiusCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);

      // ControlledRadius
      //
      if (i.ControlledRadius ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ControlledRadius",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ControlledRadius ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RadiusCharacteristicDefinitionType >
    _xsd_RadiusCharacteristicDefinitionType_type_serializer_init (
      L"RadiusCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const RadiusCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RadiusCharacteristicNominalType >
    _xsd_RadiusCharacteristicNominalType_type_serializer_init (
      L"RadiusCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const RadiusCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RadiusCharacteristicMeasurementType >
    _xsd_RadiusCharacteristicMeasurementType_type_serializer_init (
      L"RadiusCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalRadiusCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalRadiusCharacteristicItemType >
    _xsd_SphericalRadiusCharacteristicItemType_type_serializer_init (
      L"SphericalRadiusCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalRadiusCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalRadiusCharacteristicDefinitionType >
    _xsd_SphericalRadiusCharacteristicDefinitionType_type_serializer_init (
      L"SphericalRadiusCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalRadiusCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalRadiusCharacteristicNominalType >
    _xsd_SphericalRadiusCharacteristicNominalType_type_serializer_init (
      L"SphericalRadiusCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SphericalRadiusCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SphericalRadiusCharacteristicMeasurementType >
    _xsd_SphericalRadiusCharacteristicMeasurementType_type_serializer_init (
      L"SphericalRadiusCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ChordCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ChordCharacteristicItemType >
    _xsd_ChordCharacteristicItemType_type_serializer_init (
      L"ChordCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ChordCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ChordCharacteristicDefinitionType >
    _xsd_ChordCharacteristicDefinitionType_type_serializer_init (
      L"ChordCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ChordCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ChordCharacteristicNominalType >
    _xsd_ChordCharacteristicNominalType_type_serializer_init (
      L"ChordCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ChordCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ChordCharacteristicMeasurementType >
    _xsd_ChordCharacteristicMeasurementType_type_serializer_init (
      L"ChordCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicalTaperCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicalTaperCharacteristicItemType >
    _xsd_ConicalTaperCharacteristicItemType_type_serializer_init (
      L"ConicalTaperCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicalTaperCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicalTaperCharacteristicDefinitionType >
    _xsd_ConicalTaperCharacteristicDefinitionType_type_serializer_init (
      L"ConicalTaperCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicalTaperCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);

      // Distance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Distance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Distance ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicalTaperCharacteristicNominalType >
    _xsd_ConicalTaperCharacteristicNominalType_type_serializer_init (
      L"ConicalTaperCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConicalTaperCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);

      // Distance
      //
      if (i.Distance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Distance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Distance ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConicalTaperCharacteristicMeasurementType >
    _xsd_ConicalTaperCharacteristicMeasurementType_type_serializer_init (
      L"ConicalTaperCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatTaperCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatTaperCharacteristicItemType >
    _xsd_FlatTaperCharacteristicItemType_type_serializer_init (
      L"FlatTaperCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatTaperCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatTaperCharacteristicDefinitionType >
    _xsd_FlatTaperCharacteristicDefinitionType_type_serializer_init (
      L"FlatTaperCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatTaperCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicNominalBaseType& > (i);

      // Distance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Distance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Distance ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatTaperCharacteristicNominalType >
    _xsd_FlatTaperCharacteristicNominalType_type_serializer_init (
      L"FlatTaperCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const FlatTaperCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LinearCharacteristicMeasurementBaseType& > (i);

      // Distance
      //
      if (i.Distance ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Distance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Distance ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, FlatTaperCharacteristicMeasurementType >
    _xsd_FlatTaperCharacteristicMeasurementType_type_serializer_init (
      L"FlatTaperCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const RunoutCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const RunoutCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // DatumReferenceFrameId
      //
      if (i.DatumReferenceFrameId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumReferenceFrameId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumReferenceFrameId ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const RunoutCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicNominalBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const RunoutCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (i);

      // DatumsOk
      //
      if (i.DatumsOk ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumsOk",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumsOk ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CircularRunoutCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularRunoutCharacteristicItemType >
    _xsd_CircularRunoutCharacteristicItemType_type_serializer_init (
      L"CircularRunoutCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CircularRunoutCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularRunoutCharacteristicDefinitionType >
    _xsd_CircularRunoutCharacteristicDefinitionType_type_serializer_init (
      L"CircularRunoutCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CircularRunoutCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicNominalBaseType& > (i);

      // ZoneDirection
      //
      if (i.ZoneDirection ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneDirection",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ZoneDirection ();
      }

      // ProfileCurveId
      //
      if (i.ProfileCurveId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProfileCurveId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProfileCurveId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularRunoutCharacteristicNominalType >
    _xsd_CircularRunoutCharacteristicNominalType_type_serializer_init (
      L"CircularRunoutCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CircularRunoutCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CircularRunoutCharacteristicMeasurementType >
    _xsd_CircularRunoutCharacteristicMeasurementType_type_serializer_init (
      L"CircularRunoutCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const TotalRunoutCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TotalRunoutCharacteristicItemType >
    _xsd_TotalRunoutCharacteristicItemType_type_serializer_init (
      L"TotalRunoutCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const TotalRunoutCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TotalRunoutCharacteristicDefinitionType >
    _xsd_TotalRunoutCharacteristicDefinitionType_type_serializer_init (
      L"TotalRunoutCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const TotalRunoutCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TotalRunoutCharacteristicNominalType >
    _xsd_TotalRunoutCharacteristicNominalType_type_serializer_init (
      L"TotalRunoutCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const TotalRunoutCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::RunoutCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TotalRunoutCharacteristicMeasurementType >
    _xsd_TotalRunoutCharacteristicMeasurementType_type_serializer_init (
      L"TotalRunoutCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CoaxialityDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);
    }

    void
    operator<< (xercesc::DOMAttr&, const CoaxialityDiametricalZoneType&)
    {
    }

    void
    operator<< (::xml_schema::list_stream&,
                const CoaxialityDiametricalZoneType&)
    {
    }

    void
    operator<< (xercesc::DOMElement& e, const CoaxialityNonDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);
    }

    void
    operator<< (xercesc::DOMAttr&, const CoaxialityNonDiametricalZoneType&)
    {
    }

    void
    operator<< (::xml_schema::list_stream&,
                const CoaxialityNonDiametricalZoneType&)
    {
    }

    void
    operator<< (xercesc::DOMElement& e, const CoaxialityZoneShapeType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // DiametricalZone
      //
      if (i.DiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DiametricalZone ();
      }

      // NonDiametricalZone
      //
      if (i.NonDiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonDiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonDiametricalZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CoaxialityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CoaxialityCharacteristicItemType >
    _xsd_CoaxialityCharacteristicItemType_type_serializer_init (
      L"CoaxialityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CoaxialityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (i);

      // ZoneShape
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneShape",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ZoneShape ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CoaxialityCharacteristicDefinitionType >
    _xsd_CoaxialityCharacteristicDefinitionType_type_serializer_init (
      L"CoaxialityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CoaxialityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CoaxialityCharacteristicNominalType >
    _xsd_CoaxialityCharacteristicNominalType_type_serializer_init (
      L"CoaxialityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CoaxialityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CoaxialityCharacteristicMeasurementType >
    _xsd_CoaxialityCharacteristicMeasurementType_type_serializer_init (
      L"CoaxialityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConcentricitySphericalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);
    }

    void
    operator<< (xercesc::DOMAttr&, const ConcentricitySphericalZoneType&)
    {
    }

    void
    operator<< (::xml_schema::list_stream&,
                const ConcentricitySphericalZoneType&)
    {
    }

    void
    operator<< (xercesc::DOMElement& e, const ConcentricityDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);
    }

    void
    operator<< (xercesc::DOMAttr&, const ConcentricityDiametricalZoneType&)
    {
    }

    void
    operator<< (::xml_schema::list_stream&,
                const ConcentricityDiametricalZoneType&)
    {
    }

    void
    operator<< (xercesc::DOMElement& e, const ConcentricityNonDiametricalZoneType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);
    }

    void
    operator<< (xercesc::DOMAttr&, const ConcentricityNonDiametricalZoneType&)
    {
    }

    void
    operator<< (::xml_schema::list_stream&,
                const ConcentricityNonDiametricalZoneType&)
    {
    }

    void
    operator<< (xercesc::DOMElement& e, const ConcentricityZoneShapeType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SphericalZone
      //
      if (i.SphericalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SphericalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SphericalZone ();
      }

      // DiametricalZone
      //
      if (i.DiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DiametricalZone ();
      }

      // NonDiametricalZone
      //
      if (i.NonDiametricalZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonDiametricalZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonDiametricalZone ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ConcentricityCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConcentricityCharacteristicItemType >
    _xsd_ConcentricityCharacteristicItemType_type_serializer_init (
      L"ConcentricityCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConcentricityCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (i);

      // ZoneShape
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ZoneShape",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ZoneShape ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConcentricityCharacteristicDefinitionType >
    _xsd_ConcentricityCharacteristicDefinitionType_type_serializer_init (
      L"ConcentricityCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConcentricityCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConcentricityCharacteristicNominalType >
    _xsd_ConcentricityCharacteristicNominalType_type_serializer_init (
      L"ConcentricityCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ConcentricityCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConcentricityCharacteristicMeasurementType >
    _xsd_ConcentricityCharacteristicMeasurementType_type_serializer_init (
      L"ConcentricityCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SymmetryCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SymmetryCharacteristicItemType >
    _xsd_SymmetryCharacteristicItemType_type_serializer_init (
      L"SymmetryCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SymmetryCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicDefinitionBaseType& > (i);

      // SecondCompositeSegmentSymmetryDefinition
      //
      if (i.SecondCompositeSegmentSymmetryDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondCompositeSegmentSymmetryDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondCompositeSegmentSymmetryDefinition ();
      }

      // ThirdCompositeSegmentSymmetryDefinition
      //
      if (i.ThirdCompositeSegmentSymmetryDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThirdCompositeSegmentSymmetryDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThirdCompositeSegmentSymmetryDefinition ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SymmetryCharacteristicDefinitionType >
    _xsd_SymmetryCharacteristicDefinitionType_type_serializer_init (
      L"SymmetryCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SymmetryCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SymmetryCharacteristicNominalType >
    _xsd_SymmetryCharacteristicNominalType_type_serializer_init (
      L"SymmetryCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SymmetryCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::LocationCharacteristicMeasurementBaseType& > (i);

      // SecondCompositeSegmentSymmetryMeasurement
      //
      if (i.SecondCompositeSegmentSymmetryMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondCompositeSegmentSymmetryMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondCompositeSegmentSymmetryMeasurement ();
      }

      // ThirdCompositeSegmentSymmetryMeasurement
      //
      if (i.ThirdCompositeSegmentSymmetryMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThirdCompositeSegmentSymmetryMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThirdCompositeSegmentSymmetryMeasurement ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SymmetryCharacteristicMeasurementType >
    _xsd_SymmetryCharacteristicMeasurementType_type_serializer_init (
      L"SymmetryCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ProfileCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const ProfileCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicDefinitionBaseType& > (i);

      // ToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToleranceValue ();
      }

      // ToleranceDualValue
      //
      if (i.ToleranceDualValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToleranceDualValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToleranceDualValue ();
      }

      // OuterDisposition
      //
      if (i.OuterDisposition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OuterDisposition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OuterDisposition ();
      }

      // UnequallyDisposedZone
      //
      if (i.UnequallyDisposedZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"UnequallyDisposedZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.UnequallyDisposedZone ();
      }

      // OffsetZone
      //
      if (i.OffsetZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OffsetZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OffsetZone ();
      }

      // VariableAngle
      //
      if (i.VariableAngle ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"VariableAngle",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.VariableAngle ();
      }

      // SecondCompositeSegmentProfileDefinition
      //
      if (i.SecondCompositeSegmentProfileDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondCompositeSegmentProfileDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondCompositeSegmentProfileDefinition ();
      }

      // ThirdCompositeSegmentProfileDefinition
      //
      if (i.ThirdCompositeSegmentProfileDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThirdCompositeSegmentProfileDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThirdCompositeSegmentProfileDefinition ();
      }

      // FourthCompositeSegmentProfileDefinition
      //
      if (i.FourthCompositeSegmentProfileDefinition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FourthCompositeSegmentProfileDefinition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FourthCompositeSegmentProfileDefinition ();
      }

      // DatumReferenceFrameId
      //
      if (i.DatumReferenceFrameId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumReferenceFrameId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumReferenceFrameId ();
      }

      // OrientationOnly
      //
      if (i.OrientationOnly ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OrientationOnly",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OrientationOnly ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProfileCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicNominalBaseType& > (i);

      // TargetValue
      //
      if (i.TargetValue ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TargetValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TargetValue ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ProfileCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::GeometricCharacteristicMeasurementBaseType& > (i);

      // WorstPositiveDeviation
      //
      if (i.WorstPositiveDeviation ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WorstPositiveDeviation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.WorstPositiveDeviation ();
      }

      // WorstNegativeDeviation
      //
      if (i.WorstNegativeDeviation ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WorstNegativeDeviation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.WorstNegativeDeviation ();
      }

      // PointDeviations
      //
      if (i.PointDeviations ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PointDeviations",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PointDeviations ();
      }

      // DatumsOk
      //
      if (i.DatumsOk ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DatumsOk",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DatumsOk ();
      }

      // DRFTransformActualId
      //
      if (i.DRFTransformActualId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DRFTransformActualId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DRFTransformActualId ();
      }

      // SecondCompositeSegmentProfileMeasurement
      //
      if (i.SecondCompositeSegmentProfileMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondCompositeSegmentProfileMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SecondCompositeSegmentProfileMeasurement ();
      }

      // ThirdCompositeSegmentProfileMeasurement
      //
      if (i.ThirdCompositeSegmentProfileMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThirdCompositeSegmentProfileMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ThirdCompositeSegmentProfileMeasurement ();
      }

      // FourthCompositeSegmentProfileMeasurement
      //
      if (i.FourthCompositeSegmentProfileMeasurement ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FourthCompositeSegmentProfileMeasurement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FourthCompositeSegmentProfileMeasurement ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const LineProfileCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LineProfileCharacteristicItemType >
    _xsd_LineProfileCharacteristicItemType_type_serializer_init (
      L"LineProfileCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LineProfileCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicDefinitionBaseType& > (i);

      // Extent
      //
      if (i.Extent ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Extent",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Extent ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LineProfileCharacteristicDefinitionType >
    _xsd_LineProfileCharacteristicDefinitionType_type_serializer_init (
      L"LineProfileCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LineProfileCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicNominalBaseType& > (i);

      // Vector
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Vector",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Vector ();
      }

      // ProfileCurveId
      //
      if (i.ProfileCurveId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ProfileCurveId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ProfileCurveId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LineProfileCharacteristicNominalType >
    _xsd_LineProfileCharacteristicNominalType_type_serializer_init (
      L"LineProfileCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const LineProfileCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LineProfileCharacteristicMeasurementType >
    _xsd_LineProfileCharacteristicMeasurementType_type_serializer_init (
      L"LineProfileCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PointProfileCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PointProfileCharacteristicItemType >
    _xsd_PointProfileCharacteristicItemType_type_serializer_init (
      L"PointProfileCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PointProfileCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PointProfileCharacteristicDefinitionType >
    _xsd_PointProfileCharacteristicDefinitionType_type_serializer_init (
      L"PointProfileCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PointProfileCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PointProfileCharacteristicNominalType >
    _xsd_PointProfileCharacteristicNominalType_type_serializer_init (
      L"PointProfileCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const PointProfileCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PointProfileCharacteristicMeasurementType >
    _xsd_PointProfileCharacteristicMeasurementType_type_serializer_init (
      L"PointProfileCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileCharacteristicItemType >
    _xsd_SurfaceProfileCharacteristicItemType_type_serializer_init (
      L"SurfaceProfileCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicDefinitionBaseType& > (i);

      // Extent
      //
      if (i.Extent ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Extent",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Extent ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileCharacteristicDefinitionType >
    _xsd_SurfaceProfileCharacteristicDefinitionType_type_serializer_init (
      L"SurfaceProfileCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileCharacteristicNominalType >
    _xsd_SurfaceProfileCharacteristicNominalType_type_serializer_init (
      L"SurfaceProfileCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileCharacteristicMeasurementType >
    _xsd_SurfaceProfileCharacteristicMeasurementType_type_serializer_init (
      L"SurfaceProfileCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileNonUniformCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicItemType >
    _xsd_SurfaceProfileNonUniformCharacteristicItemType_type_serializer_init (
      L"SurfaceProfileNonUniformCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileNonUniformCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicDefinitionBaseType& > (i);

      // ToPointToleranceValue
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToPointToleranceValue",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ToPointToleranceValue ();
      }

      // ToPointOuterDisposition
      //
      if (i.ToPointOuterDisposition ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToPointOuterDisposition",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToPointOuterDisposition ();
      }

      // ToPointUnequallyDisposedZone
      //
      if (i.ToPointUnequallyDisposedZone ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ToPointUnequallyDisposedZone",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ToPointUnequallyDisposedZone ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicDefinitionType >
    _xsd_SurfaceProfileNonUniformCharacteristicDefinitionType_type_serializer_init (
      L"SurfaceProfileNonUniformCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileNonUniformCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicNominalType >
    _xsd_SurfaceProfileNonUniformCharacteristicNominalType_type_serializer_init (
      L"SurfaceProfileNonUniformCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SurfaceProfileNonUniformCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::ProfileCharacteristicMeasurementBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SurfaceProfileNonUniformCharacteristicMeasurementType >
    _xsd_SurfaceProfileNonUniformCharacteristicMeasurementType_type_serializer_init (
      L"SurfaceProfileNonUniformCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const MeasuredZoneRadiiType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // MinRadius
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MinRadius",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.MinRadius ();
      }

      // MaxRadius
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MaxRadius",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.MaxRadius ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicGroupType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicItemIds
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicItemIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicItemIds ();
      }

      // Description
      //
      if (i.Description ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Description",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Description ();
      }

      // Name
      //
      if (i.Name ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Name",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Name ();
      }

      // TransformId
      //
      if (i.TransformId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TransformId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.TransformId ();
      }

      // Units
      //
      if (i.Units ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Units",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Units ();
      }

      // Scale
      //
      if (i.Scale ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Scale",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Scale ();
      }

      // Attributes
      //
      if (i.Attributes ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Attributes",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Attributes ();
      }

      // id
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CharacteristicGroupType >
    _xsd_CharacteristicGroupType_type_serializer_init (
      L"CharacteristicGroupType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CharacteristicManufacturingProcessGroupType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicGroupType& > (i);

      // ManufacturingProcessId
      //
      if (i.ManufacturingProcessId ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ManufacturingProcessId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ManufacturingProcessId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CharacteristicManufacturingProcessGroupType >
    _xsd_CharacteristicManufacturingProcessGroupType_type_serializer_init (
      L"CharacteristicManufacturingProcessGroupType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const SimultaneousRequirementEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const SimultaneousRequirementEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const SimultaneousRequirementEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CompositeSegmentLowerLevelEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const CompositeSegmentLowerLevelEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CompositeSegmentLowerLevelEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const SimultaneousRequirementGroupType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicNominalIds
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicNominalIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicNominalIds ();
      }

      // Requirement
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Requirement",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Requirement ();
      }

      // CompositeLevel
      //
      if (i.CompositeLevel ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CompositeLevel",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CompositeLevel ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const SimultaneousRequirementGroupsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SimultaneousRequirementGroup
      //
      for (SimultaneousRequirementGroupsType::SimultaneousRequirementGroup_const_iterator
           b (i.SimultaneousRequirementGroup ().begin ()), n (i.SimultaneousRequirementGroup ().end ());
           b != n; ++b)
      {
        const SimultaneousRequirementGroupsType::SimultaneousRequirementGroup_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SimultaneousRequirementGroup",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicStatusEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const CharacteristicStatusEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CharacteristicStatusEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicStatusType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicStatusEnum
      //
      if (i.CharacteristicStatusEnum ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicStatusEnum",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicStatusEnum ();
      }

      // OtherCharacteristicStatus
      //
      if (i.OtherCharacteristicStatus ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherCharacteristicStatus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherCharacteristicStatus ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicGroupStatusType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Status
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Status",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Status ();
      }

      // GroupId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"GroupId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.GroupId ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PointDeviationType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // MeasurePointId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"MeasurePointId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.MeasurePointId ();
      }

      // Deviation
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Deviation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Deviation ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PointDeviationsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // PointDeviation
      //
      for (PointDeviationsType::PointDeviation_const_iterator
           b (i.PointDeviation ().begin ()), n (i.PointDeviation ().end ());
           b != n; ++b)
      {
        const PointDeviationsType::PointDeviation_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PointDeviation",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ExtentEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const ExtentEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ExtentEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const ExtentType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ExtentEnum
      //
      if (i.ExtentEnum ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ExtentEnum",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ExtentEnum ();
      }

      // OtherExtent
      //
      if (i.OtherExtent ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherExtent",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherExtent ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const PositionCoordinateMethodEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const PositionCoordinateMethodEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const PositionCoordinateMethodEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const PositionCoordinateMethodType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Method
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Method",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Method ();
      }

      // FeatureZoneIds
      //
      if (i.FeatureZoneIds ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FeatureZoneIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FeatureZoneIds ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ThreadCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThreadCharacteristicItemType >
    _xsd_ThreadCharacteristicItemType_type_serializer_init (
      L"ThreadCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ThreadCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);

      // ThreadSpecificationId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ThreadSpecificationId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ThreadSpecificationId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThreadCharacteristicDefinitionType >
    _xsd_ThreadCharacteristicDefinitionType_type_serializer_init (
      L"ThreadCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ThreadCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThreadCharacteristicNominalType >
    _xsd_ThreadCharacteristicNominalType_type_serializer_init (
      L"ThreadCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const ThreadCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);

      // PitchDiameter
      //
      if (i.PitchDiameter ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"PitchDiameter",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.PitchDiameter ();
      }

      // FunctionalSize
      //
      if (i.FunctionalSize ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FunctionalSize",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FunctionalSize ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ThreadCharacteristicMeasurementType >
    _xsd_ThreadCharacteristicMeasurementType_type_serializer_init (
      L"ThreadCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const CharacteristicAspectsListsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // FormalStandardId
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FormalStandardId",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.FormalStandardId ();
      }

      // CharacteristicDefinitions
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicDefinitions",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicDefinitions ();
      }

      // DefaultCharacteristicDefinitions
      //
      if (i.DefaultCharacteristicDefinitions ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DefaultCharacteristicDefinitions",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DefaultCharacteristicDefinitions ();
      }

      // DefaultToleranceDefinitions
      //
      if (i.DefaultToleranceDefinitions ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"DefaultToleranceDefinitions",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.DefaultToleranceDefinitions ();
      }

      // CharacteristicNominals
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicNominals",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicNominals ();
      }

      // CharacteristicItems
      //
      if (i.CharacteristicItems ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicItems",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicItems ();
      }

      // CharacteristicGroups
      //
      if (i.CharacteristicGroups ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicGroups",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicGroups ();
      }

      // SimultaneousRequirementGroups
      //
      if (i.SimultaneousRequirementGroups ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SimultaneousRequirementGroups",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SimultaneousRequirementGroups ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const MeasuredCharacteristicsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicMeasurements
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicMeasurements",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.CharacteristicMeasurements ();
      }

      // CharacteristicGroupStatuses
      //
      if (i.CharacteristicGroupStatuses ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicGroupStatuses",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.CharacteristicGroupStatuses ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicItemsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicItem
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (CharacteristicItemsType::CharacteristicItem_const_iterator
             b (i.CharacteristicItem ().begin ()), n (i.CharacteristicItem ().end ());
             b != n; ++b)
        {
          const CharacteristicItemsType::CharacteristicItem_type& x (*b);

          if (typeid (CharacteristicItemsType::CharacteristicItem_type) == typeid (x))
          {
            xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"CharacteristicItem",
                L"http://qifstandards.org/xsd/qif3",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"CharacteristicItem",
              L"http://qifstandards.org/xsd/qif3",
              true, true, e, x);
        }
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CharacteristicManufacturingProcessGroupType >
    _xsd_CharacteristicManufacturingProcessGroup_element_serializer_init (
      L"CharacteristicGroup",
      L"http://qifstandards.org/xsd/qif3",
      L"CharacteristicManufacturingProcessGroup",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CharacteristicManufacturingProcessGroupType >);


    void
    operator<< (xercesc::DOMElement& e, const CharacteristicGroupsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicGroup
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (CharacteristicGroupsType::CharacteristicGroup_const_iterator
             b (i.CharacteristicGroup ().begin ()), n (i.CharacteristicGroup ().end ());
             b != n; ++b)
        {
          const CharacteristicGroupsType::CharacteristicGroup_type& x (*b);

          if (typeid (CharacteristicGroupsType::CharacteristicGroup_type) == typeid (x))
          {
            xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"CharacteristicGroup",
                L"http://qifstandards.org/xsd/qif3",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"CharacteristicGroup",
              L"http://qifstandards.org/xsd/qif3",
              true, true, e, x);
        }
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicGroupStatusesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicGroupStatus
      //
      for (CharacteristicGroupStatusesType::CharacteristicGroupStatus_const_iterator
           b (i.CharacteristicGroupStatus ().begin ()), n (i.CharacteristicGroupStatus ().end ());
           b != n; ++b)
      {
        const CharacteristicGroupStatusesType::CharacteristicGroupStatus_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"CharacteristicGroupStatus",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicDefinitionsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicDefinition
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (CharacteristicDefinitionsType::CharacteristicDefinition_const_iterator
             b (i.CharacteristicDefinition ().begin ()), n (i.CharacteristicDefinition ().end ());
             b != n; ++b)
        {
          const CharacteristicDefinitionsType::CharacteristicDefinition_type& x (*b);

          if (typeid (CharacteristicDefinitionsType::CharacteristicDefinition_type) == typeid (x))
          {
            xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"CharacteristicDefinition",
                L"http://qifstandards.org/xsd/qif3",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"CharacteristicDefinition",
              L"http://qifstandards.org/xsd/qif3",
              true, true, e, x);
        }
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ToleranceDefinitionsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // LinearTolerance
      //
      for (ToleranceDefinitionsType::LinearTolerance_const_iterator
           b (i.LinearTolerance ().begin ()), n (i.LinearTolerance ().end ());
           b != n; ++b)
      {
        const ToleranceDefinitionsType::LinearTolerance_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LinearTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // AngularTolerance
      //
      for (ToleranceDefinitionsType::AngularTolerance_const_iterator
           b (i.AngularTolerance ().begin ()), n (i.AngularTolerance ().end ());
           b != n; ++b)
      {
        const ToleranceDefinitionsType::AngularTolerance_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AngularTolerance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicNominalsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicNominal
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (CharacteristicNominalsType::CharacteristicNominal_const_iterator
             b (i.CharacteristicNominal ().begin ()), n (i.CharacteristicNominal ().end ());
             b != n; ++b)
        {
          const CharacteristicNominalsType::CharacteristicNominal_type& x (*b);

          if (typeid (CharacteristicNominalsType::CharacteristicNominal_type) == typeid (x))
          {
            xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"CharacteristicNominal",
                L"http://qifstandards.org/xsd/qif3",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"CharacteristicNominal",
              L"http://qifstandards.org/xsd/qif3",
              true, true, e, x);
        }
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const CharacteristicMeasurementsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CharacteristicMeasurement
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (CharacteristicMeasurementsType::CharacteristicMeasurement_const_iterator
             b (i.CharacteristicMeasurement ().begin ()), n (i.CharacteristicMeasurement ().end ());
             b != n; ++b)
        {
          const CharacteristicMeasurementsType::CharacteristicMeasurement_type& x (*b);

          if (typeid (CharacteristicMeasurementsType::CharacteristicMeasurement_type) == typeid (x))
          {
            xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"CharacteristicMeasurement",
                L"http://qifstandards.org/xsd/qif3",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"CharacteristicMeasurement",
              L"http://qifstandards.org/xsd/qif3",
              true, true, e, x);
        }
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleBetweenCharacteristicDefinitionType >
    _xsd_AngleBetweenCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleBetweenCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleCharacteristicDefinitionType >
    _xsd_AngleCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularCoordinateCharacteristicDefinitionType >
    _xsd_AngularCoordinateCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularCoordinateCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleFromCharacteristicDefinitionType >
    _xsd_AngleFromCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleFromCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularityCharacteristicDefinitionType >
    _xsd_AngularityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ChordCharacteristicDefinitionType >
    _xsd_ChordCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ChordCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularityCharacteristicDefinitionType >
    _xsd_CircularityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularRunoutCharacteristicDefinitionType >
    _xsd_CircularRunoutCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularRunoutCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CoaxialityCharacteristicDefinitionType >
    _xsd_CoaxialityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CoaxialityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConcentricityCharacteristicDefinitionType >
    _xsd_ConcentricityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConcentricityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicalTaperCharacteristicDefinitionType >
    _xsd_ConicalTaperCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicalTaperCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicityCharacteristicDefinitionType >
    _xsd_ConicityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CurveLengthCharacteristicDefinitionType >
    _xsd_CurveLengthCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CurveLengthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CylindricityCharacteristicDefinitionType >
    _xsd_CylindricityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CylindricityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DepthCharacteristicDefinitionType >
    _xsd_DepthCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DepthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DiameterCharacteristicDefinitionType >
    _xsd_DiameterCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DiameterCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceBetweenCharacteristicDefinitionType >
    _xsd_DistanceBetweenCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceBetweenCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceFromCharacteristicDefinitionType >
    _xsd_DistanceFromCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceFromCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::EllipticityCharacteristicDefinitionType >
    _xsd_EllipticityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::EllipticityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatTaperCharacteristicDefinitionType >
    _xsd_FlatTaperCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatTaperCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatnessCharacteristicDefinitionType >
    _xsd_FlatnessCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatnessCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::HeightCharacteristicDefinitionType >
    _xsd_HeightCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::HeightCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LengthCharacteristicDefinitionType >
    _xsd_LengthCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LengthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LinearCoordinateCharacteristicDefinitionType >
    _xsd_LinearCoordinateCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LinearCoordinateCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LineProfileCharacteristicDefinitionType >
    _xsd_LineProfileCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LineProfileCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::OtherFormCharacteristicDefinitionType >
    _xsd_OtherFormCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::OtherFormCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ParallelismCharacteristicDefinitionType >
    _xsd_ParallelismCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ParallelismCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PerpendicularityCharacteristicDefinitionType >
    _xsd_PerpendicularityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PerpendicularityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PointProfileCharacteristicDefinitionType >
    _xsd_PointProfileCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PointProfileCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PositionCharacteristicDefinitionType >
    _xsd_PositionCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PositionCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::RadiusCharacteristicDefinitionType >
    _xsd_RadiusCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::RadiusCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalDiameterCharacteristicDefinitionType >
    _xsd_SphericalDiameterCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalDiameterCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalRadiusCharacteristicDefinitionType >
    _xsd_SphericalRadiusCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalRadiusCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericityCharacteristicDefinitionType >
    _xsd_SphericityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SquareCharacteristicDefinitionType >
    _xsd_SquareCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SquareCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::StraightnessCharacteristicDefinitionType >
    _xsd_StraightnessCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::StraightnessCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileCharacteristicDefinitionType >
    _xsd_SurfaceProfileCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileNonUniformCharacteristicDefinitionType >
    _xsd_SurfaceProfileNonUniformCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceTextureCharacteristicDefinitionType >
    _xsd_SurfaceTextureCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceTextureCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SymmetryCharacteristicDefinitionType >
    _xsd_SymmetryCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SymmetryCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThicknessCharacteristicDefinitionType >
    _xsd_ThicknessCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThicknessCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThreadCharacteristicDefinitionType >
    _xsd_ThreadCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThreadCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ToroidicityCharacteristicDefinitionType >
    _xsd_ToroidicityCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ToroidicityCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::TotalRunoutCharacteristicDefinitionType >
    _xsd_TotalRunoutCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::TotalRunoutCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAttributeCharacteristicDefinitionType >
    _xsd_UserDefinedAttributeCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedLinearCharacteristicDefinitionType >
    _xsd_UserDefinedLinearCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedLinearCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAngularCharacteristicDefinitionType >
    _xsd_UserDefinedAngularCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAngularCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTemperatureCharacteristicDefinitionType >
    _xsd_UserDefinedTemperatureCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAreaCharacteristicDefinitionType >
    _xsd_UserDefinedAreaCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAreaCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedForceCharacteristicDefinitionType >
    _xsd_UserDefinedForceCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedForceCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedMassCharacteristicDefinitionType >
    _xsd_UserDefinedMassCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedMassCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedPressureCharacteristicDefinitionType >
    _xsd_UserDefinedPressureCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedPressureCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedSpeedCharacteristicDefinitionType >
    _xsd_UserDefinedSpeedCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTimeCharacteristicDefinitionType >
    _xsd_UserDefinedTimeCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTimeCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedUnitCharacteristicDefinitionType >
    _xsd_UserDefinedUnitCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedUnitCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WidthCharacteristicDefinitionType >
    _xsd_WidthCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WidthCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleBetweenCharacteristicNominalType >
    _xsd_AngleBetweenCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleBetweenCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleCharacteristicNominalType >
    _xsd_AngleCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularCoordinateCharacteristicNominalType >
    _xsd_AngularCoordinateCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularCoordinateCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleFromCharacteristicNominalType >
    _xsd_AngleFromCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleFromCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularityCharacteristicNominalType >
    _xsd_AngularityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ChordCharacteristicNominalType >
    _xsd_ChordCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ChordCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularityCharacteristicNominalType >
    _xsd_CircularityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularRunoutCharacteristicNominalType >
    _xsd_CircularRunoutCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularRunoutCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CoaxialityCharacteristicNominalType >
    _xsd_CoaxialityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CoaxialityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConcentricityCharacteristicNominalType >
    _xsd_ConcentricityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConcentricityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicalTaperCharacteristicNominalType >
    _xsd_ConicalTaperCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicalTaperCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicityCharacteristicNominalType >
    _xsd_ConicityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CurveLengthCharacteristicNominalType >
    _xsd_CurveLengthCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CurveLengthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CylindricityCharacteristicNominalType >
    _xsd_CylindricityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CylindricityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DepthCharacteristicNominalType >
    _xsd_DepthCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DepthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DiameterCharacteristicNominalType >
    _xsd_DiameterCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DiameterCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceBetweenCharacteristicNominalType >
    _xsd_DistanceBetweenCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceBetweenCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceFromCharacteristicNominalType >
    _xsd_DistanceFromCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceFromCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::EllipticityCharacteristicNominalType >
    _xsd_EllipticityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::EllipticityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatTaperCharacteristicNominalType >
    _xsd_FlatTaperCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatTaperCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatnessCharacteristicNominalType >
    _xsd_FlatnessCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatnessCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::HeightCharacteristicNominalType >
    _xsd_HeightCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::HeightCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LengthCharacteristicNominalType >
    _xsd_LengthCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LengthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LinearCoordinateCharacteristicNominalType >
    _xsd_LinearCoordinateCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LinearCoordinateCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LineProfileCharacteristicNominalType >
    _xsd_LineProfileCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LineProfileCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::OtherFormCharacteristicNominalType >
    _xsd_OtherFormCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::OtherFormCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ParallelismCharacteristicNominalType >
    _xsd_ParallelismCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ParallelismCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PerpendicularityCharacteristicNominalType >
    _xsd_PerpendicularityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PerpendicularityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PointProfileCharacteristicNominalType >
    _xsd_PointProfileCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PointProfileCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PositionCharacteristicNominalType >
    _xsd_PositionCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PositionCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::RadiusCharacteristicNominalType >
    _xsd_RadiusCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::RadiusCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalDiameterCharacteristicNominalType >
    _xsd_SphericalDiameterCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalDiameterCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalRadiusCharacteristicNominalType >
    _xsd_SphericalRadiusCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalRadiusCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericityCharacteristicNominalType >
    _xsd_SphericityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SquareCharacteristicNominalType >
    _xsd_SquareCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SquareCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::StraightnessCharacteristicNominalType >
    _xsd_StraightnessCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::StraightnessCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileCharacteristicNominalType >
    _xsd_SurfaceProfileCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileNonUniformCharacteristicNominalType >
    _xsd_SurfaceProfileNonUniformCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceTextureCharacteristicNominalType >
    _xsd_SurfaceTextureCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceTextureCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SymmetryCharacteristicNominalType >
    _xsd_SymmetryCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SymmetryCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThicknessCharacteristicNominalType >
    _xsd_ThicknessCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThicknessCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThreadCharacteristicNominalType >
    _xsd_ThreadCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThreadCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ToroidicityCharacteristicNominalType >
    _xsd_ToroidicityCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ToroidicityCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::TotalRunoutCharacteristicNominalType >
    _xsd_TotalRunoutCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::TotalRunoutCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAttributeCharacteristicNominalType >
    _xsd_UserDefinedAttributeCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedLinearCharacteristicNominalType >
    _xsd_UserDefinedLinearCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedLinearCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAngularCharacteristicNominalType >
    _xsd_UserDefinedAngularCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAngularCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTemperatureCharacteristicNominalType >
    _xsd_UserDefinedTemperatureCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAreaCharacteristicNominalType >
    _xsd_UserDefinedAreaCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAreaCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedForceCharacteristicNominalType >
    _xsd_UserDefinedForceCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedForceCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedMassCharacteristicNominalType >
    _xsd_UserDefinedMassCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedMassCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedPressureCharacteristicNominalType >
    _xsd_UserDefinedPressureCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedPressureCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedSpeedCharacteristicNominalType >
    _xsd_UserDefinedSpeedCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTimeCharacteristicNominalType >
    _xsd_UserDefinedTimeCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTimeCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedUnitCharacteristicNominalType >
    _xsd_UserDefinedUnitCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedUnitCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WidthCharacteristicNominalType >
    _xsd_WidthCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WidthCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleBetweenCharacteristicMeasurementType >
    _xsd_AngleBetweenCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleBetweenCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleCharacteristicMeasurementType >
    _xsd_AngleCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularCoordinateCharacteristicMeasurementType >
    _xsd_AngularCoordinateCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularCoordinateCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleFromCharacteristicMeasurementType >
    _xsd_AngleFromCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleFromCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularityCharacteristicMeasurementType >
    _xsd_AngularityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ChordCharacteristicMeasurementType >
    _xsd_ChordCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ChordCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularityCharacteristicMeasurementType >
    _xsd_CircularityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularRunoutCharacteristicMeasurementType >
    _xsd_CircularRunoutCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularRunoutCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CoaxialityCharacteristicMeasurementType >
    _xsd_CoaxialityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CoaxialityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConcentricityCharacteristicMeasurementType >
    _xsd_ConcentricityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConcentricityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicalTaperCharacteristicMeasurementType >
    _xsd_ConicalTaperCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicalTaperCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicityCharacteristicMeasurementType >
    _xsd_ConicityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CurveLengthCharacteristicMeasurementType >
    _xsd_CurveLengthCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CurveLengthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CylindricityCharacteristicMeasurementType >
    _xsd_CylindricityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CylindricityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DepthCharacteristicMeasurementType >
    _xsd_DepthCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DepthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DiameterCharacteristicMeasurementType >
    _xsd_DiameterCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DiameterCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceBetweenCharacteristicMeasurementType >
    _xsd_DistanceBetweenCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceBetweenCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceFromCharacteristicMeasurementType >
    _xsd_DistanceFromCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceFromCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::EllipticityCharacteristicMeasurementType >
    _xsd_EllipticityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::EllipticityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatTaperCharacteristicMeasurementType >
    _xsd_FlatTaperCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatTaperCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatnessCharacteristicMeasurementType >
    _xsd_FlatnessCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatnessCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::HeightCharacteristicMeasurementType >
    _xsd_HeightCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::HeightCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LengthCharacteristicMeasurementType >
    _xsd_LengthCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LengthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LinearCoordinateCharacteristicMeasurementType >
    _xsd_LinearCoordinateCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LinearCoordinateCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LineProfileCharacteristicMeasurementType >
    _xsd_LineProfileCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LineProfileCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::OtherFormCharacteristicMeasurementType >
    _xsd_OtherFormCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::OtherFormCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ParallelismCharacteristicMeasurementType >
    _xsd_ParallelismCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ParallelismCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PerpendicularityCharacteristicMeasurementType >
    _xsd_PerpendicularityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PerpendicularityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PointProfileCharacteristicMeasurementType >
    _xsd_PointProfileCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PointProfileCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PositionCharacteristicMeasurementType >
    _xsd_PositionCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PositionCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::RadiusCharacteristicMeasurementType >
    _xsd_RadiusCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::RadiusCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalDiameterCharacteristicMeasurementType >
    _xsd_SphericalDiameterCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalDiameterCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalRadiusCharacteristicMeasurementType >
    _xsd_SphericalRadiusCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalRadiusCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericityCharacteristicMeasurementType >
    _xsd_SphericityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SquareCharacteristicMeasurementType >
    _xsd_SquareCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SquareCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::StraightnessCharacteristicMeasurementType >
    _xsd_StraightnessCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::StraightnessCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileCharacteristicMeasurementType >
    _xsd_SurfaceProfileCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileNonUniformCharacteristicMeasurementType >
    _xsd_SurfaceProfileNonUniformCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceTextureCharacteristicMeasurementType >
    _xsd_SurfaceTextureCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceTextureCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SymmetryCharacteristicMeasurementType >
    _xsd_SymmetryCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SymmetryCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThicknessCharacteristicMeasurementType >
    _xsd_ThicknessCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThicknessCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThreadCharacteristicMeasurementType >
    _xsd_ThreadCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThreadCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ToroidicityCharacteristicMeasurementType >
    _xsd_ToroidicityCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ToroidicityCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::TotalRunoutCharacteristicMeasurementType >
    _xsd_TotalRunoutCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::TotalRunoutCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAttributeCharacteristicMeasurementType >
    _xsd_UserDefinedAttributeCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedLinearCharacteristicMeasurementType >
    _xsd_UserDefinedLinearCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedLinearCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAngularCharacteristicMeasurementType >
    _xsd_UserDefinedAngularCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAngularCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTemperatureCharacteristicMeasurementType >
    _xsd_UserDefinedTemperatureCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAreaCharacteristicMeasurementType >
    _xsd_UserDefinedAreaCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAreaCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedForceCharacteristicMeasurementType >
    _xsd_UserDefinedForceCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedForceCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedMassCharacteristicMeasurementType >
    _xsd_UserDefinedMassCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedMassCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedPressureCharacteristicMeasurementType >
    _xsd_UserDefinedPressureCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedPressureCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedSpeedCharacteristicMeasurementType >
    _xsd_UserDefinedSpeedCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTimeCharacteristicMeasurementType >
    _xsd_UserDefinedTimeCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTimeCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedUnitCharacteristicMeasurementType >
    _xsd_UserDefinedUnitCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedUnitCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WidthCharacteristicMeasurementType >
    _xsd_WidthCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WidthCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleBetweenCharacteristicItemType >
    _xsd_AngleBetweenCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleBetweenCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleBetweenCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleCharacteristicItemType >
    _xsd_AngleCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularCoordinateCharacteristicItemType >
    _xsd_AngularCoordinateCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularCoordinateCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularCoordinateCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngleFromCharacteristicItemType >
    _xsd_AngleFromCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngleFromCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngleFromCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::AngularityCharacteristicItemType >
    _xsd_AngularityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"AngularityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::AngularityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ChordCharacteristicItemType >
    _xsd_ChordCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ChordCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ChordCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularityCharacteristicItemType >
    _xsd_CircularityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CircularRunoutCharacteristicItemType >
    _xsd_CircularRunoutCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CircularRunoutCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CircularRunoutCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CoaxialityCharacteristicItemType >
    _xsd_CoaxialityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CoaxialityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CoaxialityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConcentricityCharacteristicItemType >
    _xsd_ConcentricityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ConcentricityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConcentricityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicalTaperCharacteristicItemType >
    _xsd_ConicalTaperCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicalTaperCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicalTaperCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ConicityCharacteristicItemType >
    _xsd_ConicityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ConicityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ConicityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CurveLengthCharacteristicItemType >
    _xsd_CurveLengthCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CurveLengthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CurveLengthCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::CylindricityCharacteristicItemType >
    _xsd_CylindricityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"CylindricityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::CylindricityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DepthCharacteristicItemType >
    _xsd_DepthCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DepthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DepthCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DiameterCharacteristicItemType >
    _xsd_DiameterCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DiameterCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DiameterCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceBetweenCharacteristicItemType >
    _xsd_DistanceBetweenCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceBetweenCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceBetweenCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::DistanceFromCharacteristicItemType >
    _xsd_DistanceFromCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"DistanceFromCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::DistanceFromCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::EllipticityCharacteristicItemType >
    _xsd_EllipticityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"EllipticityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::EllipticityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatTaperCharacteristicItemType >
    _xsd_FlatTaperCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatTaperCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatTaperCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::FlatnessCharacteristicItemType >
    _xsd_FlatnessCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"FlatnessCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::FlatnessCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::HeightCharacteristicItemType >
    _xsd_HeightCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"HeightCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::HeightCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LengthCharacteristicItemType >
    _xsd_LengthCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"LengthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LengthCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LinearCoordinateCharacteristicItemType >
    _xsd_LinearCoordinateCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"LinearCoordinateCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LinearCoordinateCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::LineProfileCharacteristicItemType >
    _xsd_LineProfileCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"LineProfileCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::LineProfileCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::OtherFormCharacteristicItemType >
    _xsd_OtherFormCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"OtherFormCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::OtherFormCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ParallelismCharacteristicItemType >
    _xsd_ParallelismCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ParallelismCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ParallelismCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PerpendicularityCharacteristicItemType >
    _xsd_PerpendicularityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"PerpendicularityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PerpendicularityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PointProfileCharacteristicItemType >
    _xsd_PointProfileCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"PointProfileCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PointProfileCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::PositionCharacteristicItemType >
    _xsd_PositionCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"PositionCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::PositionCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::RadiusCharacteristicItemType >
    _xsd_RadiusCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"RadiusCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::RadiusCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalDiameterCharacteristicItemType >
    _xsd_SphericalDiameterCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalDiameterCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalDiameterCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericalRadiusCharacteristicItemType >
    _xsd_SphericalRadiusCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericalRadiusCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericalRadiusCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SphericityCharacteristicItemType >
    _xsd_SphericityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SphericityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SphericityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SquareCharacteristicItemType >
    _xsd_SquareCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SquareCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SquareCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::StraightnessCharacteristicItemType >
    _xsd_StraightnessCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"StraightnessCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::StraightnessCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileCharacteristicItemType >
    _xsd_SurfaceProfileCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceProfileNonUniformCharacteristicItemType >
    _xsd_SurfaceProfileNonUniformCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceProfileNonUniformCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceProfileNonUniformCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SurfaceTextureCharacteristicItemType >
    _xsd_SurfaceTextureCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SurfaceTextureCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SurfaceTextureCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::SymmetryCharacteristicItemType >
    _xsd_SymmetryCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"SymmetryCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::SymmetryCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThicknessCharacteristicItemType >
    _xsd_ThicknessCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ThicknessCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThicknessCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ThreadCharacteristicItemType >
    _xsd_ThreadCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ThreadCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ThreadCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::ToroidicityCharacteristicItemType >
    _xsd_ToroidicityCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"ToroidicityCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::ToroidicityCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::TotalRunoutCharacteristicItemType >
    _xsd_TotalRunoutCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"TotalRunoutCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::TotalRunoutCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAttributeCharacteristicItemType >
    _xsd_UserDefinedAttributeCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAttributeCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAttributeCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedLinearCharacteristicItemType >
    _xsd_UserDefinedLinearCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedLinearCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedLinearCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAngularCharacteristicItemType >
    _xsd_UserDefinedAngularCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAngularCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAngularCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTemperatureCharacteristicItemType >
    _xsd_UserDefinedTemperatureCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTemperatureCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTemperatureCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedAreaCharacteristicItemType >
    _xsd_UserDefinedAreaCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedAreaCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedAreaCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedForceCharacteristicItemType >
    _xsd_UserDefinedForceCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedForceCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedForceCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedMassCharacteristicItemType >
    _xsd_UserDefinedMassCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedMassCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedMassCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedPressureCharacteristicItemType >
    _xsd_UserDefinedPressureCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedPressureCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedPressureCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedSpeedCharacteristicItemType >
    _xsd_UserDefinedSpeedCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedSpeedCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedSpeedCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedTimeCharacteristicItemType >
    _xsd_UserDefinedTimeCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedTimeCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedTimeCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::UserDefinedUnitCharacteristicItemType >
    _xsd_UserDefinedUnitCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"UserDefinedUnitCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::UserDefinedUnitCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WidthCharacteristicItemType >
    _xsd_WidthCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WidthCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WidthCharacteristicItemType >);


    void
    operator<< (xercesc::DOMElement& e, const WeldContourSymbolEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const WeldContourSymbolEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const WeldContourSymbolEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldFinishingDesignatorEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const WeldFinishingDesignatorEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const WeldFinishingDesignatorEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const LocationSignificanceOneSidesEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const LocationSignificanceOneSidesEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const LocationSignificanceOneSidesEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const LocationSignificanceSpotSeamEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const LocationSignificanceSpotSeamEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const LocationSignificanceSpotSeamEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const LocationSignificanceAllEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const LocationSignificanceAllEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const LocationSignificanceAllEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const NonDestructiveTestingEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const NonDestructiveTestingEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const NonDestructiveTestingEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldingProcessEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const WeldingProcessEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const WeldingProcessEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldingProcessSuffixEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const WeldingProcessSuffixEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const WeldingProcessSuffixEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldingProcessType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Process
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Process",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.Process ();
      }

      // Suffix
      //
      if (i.Suffix ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Suffix",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Suffix ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const ArrayNonDestructiveTestingType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // TypeOfTest
      //
      for (ArrayNonDestructiveTestingType::TypeOfTest_const_iterator
           b (i.TypeOfTest ().begin ()), n (i.TypeOfTest ().end ());
           b != n; ++b)
      {
        const ArrayNonDestructiveTestingType::TypeOfTest_type& x (*b);

        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"TypeOfTest",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << x;
      }

      // n
      //
      {
        xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"n",
            e));

        a << i.n ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldCharacteristicNominalBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicNominalBaseType& > (i);

      // AllAround
      //
      if (i.AllAround ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"AllAround",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.AllAround ();
      }

      // Field
      //
      if (i.Field ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Field",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Field ();
      }

      // Specification
      //
      if (i.Specification ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Specification",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Specification ();
      }

      // WeldingProcess
      //
      if (i.WeldingProcess ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldingProcess",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.WeldingProcess ();
      }

      // NonDestructiveTesting
      //
      if (i.NonDestructiveTesting ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"NonDestructiveTesting",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.NonDestructiveTesting ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldCharacteristicDefinitionBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicDefinitionBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldCharacteristicMeasurementBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicMeasurementBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldFilletCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // BothSides
      //
      if (i.BothSides ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BothSides",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.BothSides ();
      }

      // OneSide
      //
      if (i.OneSide ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OneSide",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OneSide ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFilletCharacteristicMeasurementType >
    _xsd_WeldFilletCharacteristicMeasurementType_type_serializer_init (
      L"WeldFilletCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldPlugCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldPlugCharacteristicMeasurementType >
    _xsd_WeldPlugCharacteristicMeasurementType_type_serializer_init (
      L"WeldPlugCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSlotCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSlotCharacteristicMeasurementType >
    _xsd_WeldSlotCharacteristicMeasurementType_type_serializer_init (
      L"WeldSlotCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSpotCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }

      // Projection
      //
      if (i.Projection ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Projection",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Projection ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSpotCharacteristicMeasurementType >
    _xsd_WeldSpotCharacteristicMeasurementType_type_serializer_init (
      L"WeldSpotCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldStudCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // ArrowSideParameters
      //
      if (i.ArrowSideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ArrowSideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ArrowSideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldStudCharacteristicMeasurementType >
    _xsd_WeldStudCharacteristicMeasurementType_type_serializer_init (
      L"WeldStudCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSeamCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSeamCharacteristicMeasurementType >
    _xsd_WeldSeamCharacteristicMeasurementType_type_serializer_init (
      L"WeldSeamCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSurfacingCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // ArrowSideParameters
      //
      if (i.ArrowSideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ArrowSideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ArrowSideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSurfacingCharacteristicMeasurementType >
    _xsd_WeldSurfacingCharacteristicMeasurementType_type_serializer_init (
      L"WeldSurfacingCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldEdgeCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldEdgeCharacteristicMeasurementType >
    _xsd_WeldEdgeCharacteristicMeasurementType_type_serializer_init (
      L"WeldEdgeCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldGrooveCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // OneSide
      //
      if (i.OneSide ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OneSide",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OneSide ();
      }

      // BothSides
      //
      if (i.BothSides ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BothSides",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.BothSides ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldGrooveCharacteristicMeasurementType >
    _xsd_WeldGrooveCharacteristicMeasurementType_type_serializer_init (
      L"WeldGrooveCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSquareCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSquareCharacteristicMeasurementType >
    _xsd_WeldSquareCharacteristicMeasurementType_type_serializer_init (
      L"WeldSquareCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldBevelCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldBevelCharacteristicMeasurementType >
    _xsd_WeldBevelCharacteristicMeasurementType_type_serializer_init (
      L"WeldBevelCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldVCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldVCharacteristicMeasurementType >
    _xsd_WeldVCharacteristicMeasurementType_type_serializer_init (
      L"WeldVCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldUCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldUCharacteristicMeasurementType >
    _xsd_WeldUCharacteristicMeasurementType_type_serializer_init (
      L"WeldUCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldJCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldJCharacteristicMeasurementType >
    _xsd_WeldJCharacteristicMeasurementType_type_serializer_init (
      L"WeldJCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareVCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareVCharacteristicMeasurementType >
    _xsd_WeldFlareVCharacteristicMeasurementType_type_serializer_init (
      L"WeldFlareVCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareBevelCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareBevelCharacteristicMeasurementType >
    _xsd_WeldFlareBevelCharacteristicMeasurementType_type_serializer_init (
      L"WeldFlareBevelCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldScarfCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicMeasurementType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldScarfCharacteristicMeasurementType >
    _xsd_WeldScarfCharacteristicMeasurementType_type_serializer_init (
      L"WeldScarfCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldCompoundCharacteristicMeasurementType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicMeasurementBaseType& > (i);

      // WeldCharacteristicMeasurementIds
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldCharacteristicMeasurementIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WeldCharacteristicMeasurementIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldCompoundCharacteristicMeasurementType >
    _xsd_WeldCompoundCharacteristicMeasurementType_type_serializer_init (
      L"WeldCompoundCharacteristicMeasurementType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldCharacteristicItemBaseType& i)
    {
      e << static_cast< const ::xsd::qif30::CharacteristicItemBaseType& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldGrooveCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // OneSide
      //
      if (i.OneSide ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OneSide",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OneSide ();
      }

      // BothSides
      //
      if (i.BothSides ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BothSides",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.BothSides ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldGrooveCharacteristicNominalType >
    _xsd_WeldGrooveCharacteristicNominalType_type_serializer_init (
      L"WeldGrooveCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFinishingType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ContourSymbol
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ContourSymbol",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.ContourSymbol ();
      }

      // FinishingDesignator
      //
      if (i.FinishingDesignator ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FinishingDesignator",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.FinishingDesignator ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldOneSideParametersBaseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Finishing
      //
      if (i.Finishing ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Finishing",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Finishing ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldOneSideParametersExtendSizeType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldOneSideParametersBaseType& > (i);

      // Size
      //
      if (i.Size ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Size",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Size ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldOneSideParametersExtendType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (i);

      // Length
      //
      if (i.Length ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Length",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Length ();
      }

      // Pitch
      //
      if (i.Pitch ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Pitch",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Pitch ();
      }

      // WeldNumber
      //
      if (i.WeldNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.WeldNumber ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldGrooveOneSideParametersType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (i);

      // Groove
      //
      if (i.Groove ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Groove",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Groove ();
      }

      // Angle
      //
      if (i.Angle ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Angle",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Angle ();
      }

      // RootOpening
      //
      if (i.RootOpening ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"RootOpening",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.RootOpening ();
      }

      // Length
      //
      if (i.Length ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Length",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Length ();
      }

      // Pitch
      //
      if (i.Pitch ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Pitch",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Pitch ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldSupplementarySymbolEnumType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMAttr& a, const WeldSupplementarySymbolEnumType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const WeldSupplementarySymbolEnumType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldGrooveOneSideType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }

      // SupplementarySymbol
      //
      if (i.SupplementarySymbol ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SupplementarySymbol",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SupplementarySymbol ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldGrooveBothSidesBaseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ArrowSideParameters
      //
      if (i.ArrowSideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ArrowSideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ArrowSideParameters ();
      }

      // OtherSideParameters
      //
      if (i.OtherSideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherSideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherSideParameters ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldGrooveBothSidesExtendedType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveBothSidesBaseType& > (i);

      // Spacer
      //
      if (i.Spacer ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Spacer",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Spacer ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldSquareCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSquareCharacteristicNominalType >
    _xsd_WeldSquareCharacteristicNominalType_type_serializer_init (
      L"WeldSquareCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldBevelCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldBevelCharacteristicNominalType >
    _xsd_WeldBevelCharacteristicNominalType_type_serializer_init (
      L"WeldBevelCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldVCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldVCharacteristicNominalType >
    _xsd_WeldVCharacteristicNominalType_type_serializer_init (
      L"WeldVCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldUCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldUCharacteristicNominalType >
    _xsd_WeldUCharacteristicNominalType_type_serializer_init (
      L"WeldUCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldJCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldJCharacteristicNominalType >
    _xsd_WeldJCharacteristicNominalType_type_serializer_init (
      L"WeldJCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareVCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareVCharacteristicNominalType >
    _xsd_WeldFlareVCharacteristicNominalType_type_serializer_init (
      L"WeldFlareVCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareBevelCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareBevelCharacteristicNominalType >
    _xsd_WeldFlareBevelCharacteristicNominalType_type_serializer_init (
      L"WeldFlareBevelCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldScarfCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldGrooveCharacteristicNominalType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldScarfCharacteristicNominalType >
    _xsd_WeldScarfCharacteristicNominalType_type_serializer_init (
      L"WeldScarfCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFilletOneSideInBothSidesType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (i);

      // LengthOfEachWeld
      //
      if (i.LengthOfEachWeld ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LengthOfEachWeld",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.LengthOfEachWeld ();
      }

      // Pitch
      //
      if (i.Pitch ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Pitch",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Pitch ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldFilletUnequalLegLengthType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // FirstLegLength
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"FirstLegLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.FirstLegLength ();
      }

      // SecondLegLength
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SecondLegLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.SecondLegLength ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldFilletEqualLegLengthType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Size
      //
      if (i.Size ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Size",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Size ();
      }

      // LengthOfEachWeld
      //
      if (i.LengthOfEachWeld ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LengthOfEachWeld",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.LengthOfEachWeld ();
      }

      // Pitch
      //
      if (i.Pitch ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Pitch",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Pitch ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldFilletOneSideType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldOneSideParametersBaseType& > (i);

      // EqualLegLength
      //
      if (i.EqualLegLength ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"EqualLegLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.EqualLegLength ();
      }

      // UnEqualLegLength
      //
      if (i.UnEqualLegLength ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"UnEqualLegLength",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.UnEqualLegLength ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldFilletBothSidesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // ArrowSide
      //
      if (i.ArrowSide ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ArrowSide",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ArrowSide ();
      }

      // OtherSide
      //
      if (i.OtherSide ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OtherSide",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OtherSide ();
      }

      // Staggered
      //
      if (i.Staggered ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Staggered",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Staggered ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldCompoundCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // WeldCharacteristicNominalIds
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldCharacteristicNominalIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WeldCharacteristicNominalIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldCompoundCharacteristicNominalType >
    _xsd_WeldCompoundCharacteristicNominalType_type_serializer_init (
      L"WeldCompoundCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFilletCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // BothSides
      //
      if (i.BothSides ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"BothSides",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.BothSides ();
      }

      // OneSide
      //
      if (i.OneSide ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"OneSide",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.OneSide ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFilletCharacteristicNominalType >
    _xsd_WeldFilletCharacteristicNominalType_type_serializer_init (
      L"WeldFilletCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldPlugOneSideParametersType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldOneSideParametersExtendType& > (i);

      // Angle
      //
      if (i.Angle ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Angle",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Angle ();
      }

      // Depth
      //
      if (i.Depth ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Depth",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Depth ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldPlugCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldPlugCharacteristicNominalType >
    _xsd_WeldPlugCharacteristicNominalType_type_serializer_init (
      L"WeldPlugCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSlotCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSlotCharacteristicNominalType >
    _xsd_WeldSlotCharacteristicNominalType_type_serializer_init (
      L"WeldSlotCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSpotOneSideParametersType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldOneSideParametersExtendSizeType& > (i);

      // Pitch
      //
      if (i.Pitch ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Pitch",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Pitch ();
      }

      // WeldNumber
      //
      if (i.WeldNumber ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldNumber",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.WeldNumber ();
      }
    }

    void
    operator<< (xercesc::DOMElement& e, const WeldSpotCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }

      // Projection
      //
      if (i.Projection ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Projection",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.Projection ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSpotCharacteristicNominalType >
    _xsd_WeldSpotCharacteristicNominalType_type_serializer_init (
      L"WeldSpotCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldStudCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // ArrowSideParameters
      //
      if (i.ArrowSideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ArrowSideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ArrowSideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldStudCharacteristicNominalType >
    _xsd_WeldStudCharacteristicNominalType_type_serializer_init (
      L"WeldStudCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSeamCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSeamCharacteristicNominalType >
    _xsd_WeldSeamCharacteristicNominalType_type_serializer_init (
      L"WeldSeamCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSurfacingCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // ArrowSideParameters
      //
      if (i.ArrowSideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"ArrowSideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.ArrowSideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSurfacingCharacteristicNominalType >
    _xsd_WeldSurfacingCharacteristicNominalType_type_serializer_init (
      L"WeldSurfacingCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldEdgeCharacteristicNominalType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicNominalBaseType& > (i);

      // LocationSignificance
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"LocationSignificance",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.LocationSignificance ();
      }

      // SideParameters
      //
      if (i.SideParameters ())
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"SideParameters",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << *i.SideParameters ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldEdgeCharacteristicNominalType >
    _xsd_WeldEdgeCharacteristicNominalType_type_serializer_init (
      L"WeldEdgeCharacteristicNominalType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFilletCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFilletCharacteristicDefinitionType >
    _xsd_WeldFilletCharacteristicDefinitionType_type_serializer_init (
      L"WeldFilletCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldPlugCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldPlugCharacteristicDefinitionType >
    _xsd_WeldPlugCharacteristicDefinitionType_type_serializer_init (
      L"WeldPlugCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSlotCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSlotCharacteristicDefinitionType >
    _xsd_WeldSlotCharacteristicDefinitionType_type_serializer_init (
      L"WeldSlotCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSpotCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSpotCharacteristicDefinitionType >
    _xsd_WeldSpotCharacteristicDefinitionType_type_serializer_init (
      L"WeldSpotCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldStudCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldStudCharacteristicDefinitionType >
    _xsd_WeldStudCharacteristicDefinitionType_type_serializer_init (
      L"WeldStudCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSeamCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSeamCharacteristicDefinitionType >
    _xsd_WeldSeamCharacteristicDefinitionType_type_serializer_init (
      L"WeldSeamCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSurfacingCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSurfacingCharacteristicDefinitionType >
    _xsd_WeldSurfacingCharacteristicDefinitionType_type_serializer_init (
      L"WeldSurfacingCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldEdgeCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldEdgeCharacteristicDefinitionType >
    _xsd_WeldEdgeCharacteristicDefinitionType_type_serializer_init (
      L"WeldEdgeCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSquareCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSquareCharacteristicDefinitionType >
    _xsd_WeldSquareCharacteristicDefinitionType_type_serializer_init (
      L"WeldSquareCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldBevelCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldBevelCharacteristicDefinitionType >
    _xsd_WeldBevelCharacteristicDefinitionType_type_serializer_init (
      L"WeldBevelCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldVCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldVCharacteristicDefinitionType >
    _xsd_WeldVCharacteristicDefinitionType_type_serializer_init (
      L"WeldVCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldUCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldUCharacteristicDefinitionType >
    _xsd_WeldUCharacteristicDefinitionType_type_serializer_init (
      L"WeldUCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldJCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldJCharacteristicDefinitionType >
    _xsd_WeldJCharacteristicDefinitionType_type_serializer_init (
      L"WeldJCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareVCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareVCharacteristicDefinitionType >
    _xsd_WeldFlareVCharacteristicDefinitionType_type_serializer_init (
      L"WeldFlareVCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareBevelCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareBevelCharacteristicDefinitionType >
    _xsd_WeldFlareBevelCharacteristicDefinitionType_type_serializer_init (
      L"WeldFlareBevelCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldScarfCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldScarfCharacteristicDefinitionType >
    _xsd_WeldScarfCharacteristicDefinitionType_type_serializer_init (
      L"WeldScarfCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldCompoundCharacteristicDefinitionType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicDefinitionBaseType& > (i);

      // WeldCharacteristicDefinitionIds
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldCharacteristicDefinitionIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WeldCharacteristicDefinitionIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldCompoundCharacteristicDefinitionType >
    _xsd_WeldCompoundCharacteristicDefinitionType_type_serializer_init (
      L"WeldCompoundCharacteristicDefinitionType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFilletCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFilletCharacteristicItemType >
    _xsd_WeldFilletCharacteristicItemType_type_serializer_init (
      L"WeldFilletCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldPlugCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldPlugCharacteristicItemType >
    _xsd_WeldPlugCharacteristicItemType_type_serializer_init (
      L"WeldPlugCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSlotCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSlotCharacteristicItemType >
    _xsd_WeldSlotCharacteristicItemType_type_serializer_init (
      L"WeldSlotCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSpotCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSpotCharacteristicItemType >
    _xsd_WeldSpotCharacteristicItemType_type_serializer_init (
      L"WeldSpotCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldStudCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldStudCharacteristicItemType >
    _xsd_WeldStudCharacteristicItemType_type_serializer_init (
      L"WeldStudCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSeamCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSeamCharacteristicItemType >
    _xsd_WeldSeamCharacteristicItemType_type_serializer_init (
      L"WeldSeamCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSurfacingCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSurfacingCharacteristicItemType >
    _xsd_WeldSurfacingCharacteristicItemType_type_serializer_init (
      L"WeldSurfacingCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldEdgeCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldEdgeCharacteristicItemType >
    _xsd_WeldEdgeCharacteristicItemType_type_serializer_init (
      L"WeldEdgeCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldSquareCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldSquareCharacteristicItemType >
    _xsd_WeldSquareCharacteristicItemType_type_serializer_init (
      L"WeldSquareCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldBevelCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldBevelCharacteristicItemType >
    _xsd_WeldBevelCharacteristicItemType_type_serializer_init (
      L"WeldBevelCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldVCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldVCharacteristicItemType >
    _xsd_WeldVCharacteristicItemType_type_serializer_init (
      L"WeldVCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldUCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldUCharacteristicItemType >
    _xsd_WeldUCharacteristicItemType_type_serializer_init (
      L"WeldUCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldJCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldJCharacteristicItemType >
    _xsd_WeldJCharacteristicItemType_type_serializer_init (
      L"WeldJCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareVCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareVCharacteristicItemType >
    _xsd_WeldFlareVCharacteristicItemType_type_serializer_init (
      L"WeldFlareVCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldFlareBevelCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldFlareBevelCharacteristicItemType >
    _xsd_WeldFlareBevelCharacteristicItemType_type_serializer_init (
      L"WeldFlareBevelCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldScarfCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldScarfCharacteristicItemType >
    _xsd_WeldScarfCharacteristicItemType_type_serializer_init (
      L"WeldScarfCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    void
    operator<< (xercesc::DOMElement& e, const WeldCompoundCharacteristicItemType& i)
    {
      e << static_cast< const ::xsd::qif30::WeldCharacteristicItemBaseType& > (i);

      // WeldCharacteristicItemIds
      //
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"WeldCharacteristicItemIds",
            L"http://qifstandards.org/xsd/qif3",
            e));

        s << i.WeldCharacteristicItemIds ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, WeldCompoundCharacteristicItemType >
    _xsd_WeldCompoundCharacteristicItemType_type_serializer_init (
      L"WeldCompoundCharacteristicItemType",
      L"http://qifstandards.org/xsd/qif3");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFilletCharacteristicDefinitionType >
    _xsd_WeldFilletCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFilletCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldPlugCharacteristicDefinitionType >
    _xsd_WeldPlugCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldPlugCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSlotCharacteristicDefinitionType >
    _xsd_WeldSlotCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSlotCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSpotCharacteristicDefinitionType >
    _xsd_WeldSpotCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSpotCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldStudCharacteristicDefinitionType >
    _xsd_WeldStudCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldStudCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSeamCharacteristicDefinitionType >
    _xsd_WeldSeamCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSeamCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSurfacingCharacteristicDefinitionType >
    _xsd_WeldSurfacingCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSurfacingCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldEdgeCharacteristicDefinitionType >
    _xsd_WeldEdgeCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldEdgeCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSquareCharacteristicDefinitionType >
    _xsd_WeldSquareCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSquareCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldBevelCharacteristicDefinitionType >
    _xsd_WeldBevelCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldBevelCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldVCharacteristicDefinitionType >
    _xsd_WeldVCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldVCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldUCharacteristicDefinitionType >
    _xsd_WeldUCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldUCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldJCharacteristicDefinitionType >
    _xsd_WeldJCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldJCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareVCharacteristicDefinitionType >
    _xsd_WeldFlareVCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareVCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareBevelCharacteristicDefinitionType >
    _xsd_WeldFlareBevelCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareBevelCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldScarfCharacteristicDefinitionType >
    _xsd_WeldScarfCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldScarfCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldCompoundCharacteristicDefinitionType >
    _xsd_WeldCompoundCharacteristicDefinition_element_serializer_init (
      L"CharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicDefinition",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldCompoundCharacteristicDefinitionType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFilletCharacteristicItemType >
    _xsd_WeldFilletCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFilletCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldPlugCharacteristicItemType >
    _xsd_WeldPlugCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldPlugCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSlotCharacteristicItemType >
    _xsd_WeldSlotCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSlotCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSpotCharacteristicItemType >
    _xsd_WeldSpotCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSpotCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldStudCharacteristicItemType >
    _xsd_WeldStudCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldStudCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSeamCharacteristicItemType >
    _xsd_WeldSeamCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSeamCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSurfacingCharacteristicItemType >
    _xsd_WeldSurfacingCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSurfacingCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldEdgeCharacteristicItemType >
    _xsd_WeldEdgeCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldEdgeCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSquareCharacteristicItemType >
    _xsd_WeldSquareCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSquareCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldBevelCharacteristicItemType >
    _xsd_WeldBevelCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldBevelCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldVCharacteristicItemType >
    _xsd_WeldVCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldVCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldUCharacteristicItemType >
    _xsd_WeldUCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldUCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldJCharacteristicItemType >
    _xsd_WeldJCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldJCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareVCharacteristicItemType >
    _xsd_WeldFlareVCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareVCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareBevelCharacteristicItemType >
    _xsd_WeldFlareBevelCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareBevelCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldScarfCharacteristicItemType >
    _xsd_WeldScarfCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldScarfCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldCompoundCharacteristicItemType >
    _xsd_WeldCompoundCharacteristicItem_element_serializer_init (
      L"CharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicItem",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldCompoundCharacteristicItemType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFilletCharacteristicMeasurementType >
    _xsd_WeldFilletCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFilletCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldPlugCharacteristicMeasurementType >
    _xsd_WeldPlugCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldPlugCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSlotCharacteristicMeasurementType >
    _xsd_WeldSlotCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSlotCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSpotCharacteristicMeasurementType >
    _xsd_WeldSpotCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSpotCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldStudCharacteristicMeasurementType >
    _xsd_WeldStudCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldStudCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSeamCharacteristicMeasurementType >
    _xsd_WeldSeamCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSeamCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSurfacingCharacteristicMeasurementType >
    _xsd_WeldSurfacingCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSurfacingCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldEdgeCharacteristicMeasurementType >
    _xsd_WeldEdgeCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldEdgeCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSquareCharacteristicMeasurementType >
    _xsd_WeldSquareCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSquareCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldBevelCharacteristicMeasurementType >
    _xsd_WeldBevelCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldBevelCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldVCharacteristicMeasurementType >
    _xsd_WeldVCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldVCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldUCharacteristicMeasurementType >
    _xsd_WeldUCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldUCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldJCharacteristicMeasurementType >
    _xsd_WeldJCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldJCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareVCharacteristicMeasurementType >
    _xsd_WeldFlareVCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareVCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareBevelCharacteristicMeasurementType >
    _xsd_WeldFlareBevelCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareBevelCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldScarfCharacteristicMeasurementType >
    _xsd_WeldScarfCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldScarfCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldCompoundCharacteristicMeasurementType >
    _xsd_WeldCompoundCharacteristicMeasurement_element_serializer_init (
      L"CharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicMeasurement",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldCompoundCharacteristicMeasurementType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFilletCharacteristicNominalType >
    _xsd_WeldFilletCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFilletCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFilletCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldPlugCharacteristicNominalType >
    _xsd_WeldPlugCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldPlugCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldPlugCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSlotCharacteristicNominalType >
    _xsd_WeldSlotCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSlotCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSlotCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSpotCharacteristicNominalType >
    _xsd_WeldSpotCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSpotCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSpotCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldStudCharacteristicNominalType >
    _xsd_WeldStudCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldStudCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldStudCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSeamCharacteristicNominalType >
    _xsd_WeldSeamCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSeamCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSeamCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSurfacingCharacteristicNominalType >
    _xsd_WeldSurfacingCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSurfacingCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSurfacingCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldEdgeCharacteristicNominalType >
    _xsd_WeldEdgeCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldEdgeCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldEdgeCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldSquareCharacteristicNominalType >
    _xsd_WeldSquareCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldSquareCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldSquareCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldBevelCharacteristicNominalType >
    _xsd_WeldBevelCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldBevelCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldBevelCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldVCharacteristicNominalType >
    _xsd_WeldVCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldVCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldVCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldUCharacteristicNominalType >
    _xsd_WeldUCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldUCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldUCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldJCharacteristicNominalType >
    _xsd_WeldJCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldJCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldJCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareVCharacteristicNominalType >
    _xsd_WeldFlareVCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareVCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareVCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldFlareBevelCharacteristicNominalType >
    _xsd_WeldFlareBevelCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldFlareBevelCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldFlareBevelCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldScarfCharacteristicNominalType >
    _xsd_WeldScarfCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldScarfCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldScarfCharacteristicNominalType >);


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, wchar_t, ::xsd::qif30::WeldCompoundCharacteristicNominalType >
    _xsd_WeldCompoundCharacteristicNominal_element_serializer_init (
      L"CharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      L"WeldCompoundCharacteristicNominal",
      L"http://qifstandards.org/xsd/qif3",
      &::xsd::cxx::tree::serializer_impl< ::xsd::qif30::WeldCompoundCharacteristicNominalType >);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

