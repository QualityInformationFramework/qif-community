// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CXX___QIFLIBRARY_PRIMITIVES_PD_HXX
#define CXX___QIFLIBRARY_PRIMITIVES_PD_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "..\\export.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< wchar_t, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< wchar_t > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< wchar_t > not_derived;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif30
  {
    class ColorType;
    class QuaternionType;
    class NodeBaseType;
    class NodeWithIdBaseType;
    class TransparencyType;
    class DrawableBaseType;
    class AuthorType;
    class ApplicationType;
    class EdgeOrientedType;
    class LineStyleEnumType;
    class LineStyleType;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../QIFLibrary/Primitives.hxx"

namespace xsd
{
  namespace qif30
  {
    class QIF30_SYMBOL_DECL ColorType: public ::xsd::qif30::ListIntType
    {
      public:
      // Constructors.
      //
      ColorType ();

      ColorType (const ::xsd::qif30::ListIntType&);

      ColorType (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      ColorType (const xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      ColorType (const ::std::wstring& s,
                 const xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      ColorType (const ColorType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual ColorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      ColorType&
      operator= (const ColorType&) = default;
#endif

      virtual 
      ~ColorType ();
    };

    class QIF30_SYMBOL_DECL QuaternionType: public ::xml_schema::type
    {
      public:
      // Value
      //
      typedef ::xsd::qif30::D4Type Value_type;
      typedef ::xsd::cxx::tree::traits< Value_type, wchar_t > Value_traits;

      const Value_type&
      Value () const;

      Value_type&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (::std::unique_ptr< Value_type > p);

      // Constructors.
      //
      QuaternionType ();

      QuaternionType (const Value_type&);

      QuaternionType (const xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      QuaternionType (const QuaternionType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual QuaternionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      QuaternionType&
      operator= (const QuaternionType& x);

      virtual 
      ~QuaternionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Value_type > Value_;
    };

    class QIF30_SYMBOL_DECL NodeBaseType: public ::xml_schema::type
    {
      public:
      // label
      //
      typedef ::xml_schema::string label_type;
      typedef ::xsd::cxx::tree::optional< label_type > label_optional;
      typedef ::xsd::cxx::tree::traits< label_type, wchar_t > label_traits;

      const label_optional&
      label () const;

      label_optional&
      label ();

      void
      label (const label_type& x);

      void
      label (const label_optional& x);

      void
      label (::std::unique_ptr< label_type > p);

      // Constructors.
      //
      NodeBaseType ();

      NodeBaseType (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      NodeBaseType (const NodeBaseType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual NodeBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      NodeBaseType&
      operator= (const NodeBaseType& x);

      virtual 
      ~NodeBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      label_optional label_;
    };

    class QIF30_SYMBOL_DECL NodeWithIdBaseType: public ::xsd::qif30::NodeBaseType
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // id
      //
      typedef ::xsd::qif30::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, wchar_t > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::unique_ptr< id_type > p);

      // Constructors.
      //
      NodeWithIdBaseType ();

      NodeWithIdBaseType (const id_type&);

      NodeWithIdBaseType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      NodeWithIdBaseType (const NodeWithIdBaseType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual NodeWithIdBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      NodeWithIdBaseType&
      operator= (const NodeWithIdBaseType& x);

      virtual 
      ~NodeWithIdBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class QIF30_SYMBOL_DECL TransparencyType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
    {
      public:
      // Constructors.
      //
      TransparencyType ();

      TransparencyType (const ::xml_schema::double_&);

      TransparencyType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      TransparencyType (const xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      TransparencyType (const ::std::wstring& s,
                        const xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      TransparencyType (const TransparencyType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual TransparencyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

#ifdef XSD_CXX11
      TransparencyType&
      operator= (const TransparencyType&) = default;
#endif

      virtual 
      ~TransparencyType ();
    };

    class QIF30_SYMBOL_DECL DrawableBaseType: public ::xsd::qif30::NodeWithIdBaseType
    {
      public:
      // color
      //
      typedef ::xsd::qif30::ColorType color_type;
      typedef ::xsd::cxx::tree::optional< color_type > color_optional;
      typedef ::xsd::cxx::tree::traits< color_type, wchar_t > color_traits;

      const color_optional&
      color () const;

      color_optional&
      color ();

      void
      color (const color_type& x);

      void
      color (const color_optional& x);

      void
      color (::std::unique_ptr< color_type > p);

      // transparency
      //
      typedef ::xsd::qif30::TransparencyType transparency_type;
      typedef ::xsd::cxx::tree::traits< transparency_type, wchar_t > transparency_traits;

      const transparency_type&
      transparency () const;

      transparency_type&
      transparency ();

      void
      transparency (const transparency_type& x);

      void
      transparency (::std::unique_ptr< transparency_type > p);

      static transparency_type
      transparency_default_value ();

      // hidden
      //
      typedef ::xml_schema::boolean hidden_type;
      typedef ::xsd::cxx::tree::traits< hidden_type, wchar_t > hidden_traits;

      const hidden_type&
      hidden () const;

      hidden_type&
      hidden ();

      void
      hidden (const hidden_type& x);

      static hidden_type
      hidden_default_value ();

      // size
      //
      typedef ::xsd::qif30::DoublePositiveType size_type;
      typedef ::xsd::cxx::tree::optional< size_type > size_optional;
      typedef ::xsd::cxx::tree::traits< size_type, wchar_t > size_traits;

      const size_optional&
      size () const;

      size_optional&
      size ();

      void
      size (const size_type& x);

      void
      size (const size_optional& x);

      void
      size (::std::unique_ptr< size_type > p);

      // Constructors.
      //
      DrawableBaseType ();

      DrawableBaseType (const id_type&);

      DrawableBaseType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      DrawableBaseType (const DrawableBaseType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual DrawableBaseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const = 0;

      DrawableBaseType&
      operator= (const DrawableBaseType& x);

      virtual 
      ~DrawableBaseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      color_optional color_;
      ::xsd::cxx::tree::one< transparency_type > transparency_;
      ::xsd::cxx::tree::one< hidden_type > hidden_;
      size_optional size_;
    };

    class QIF30_SYMBOL_DECL AuthorType: public ::xml_schema::type
    {
      public:
      // Name
      //
      typedef ::xml_schema::string Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::unique_ptr< Name_type > p);

      // Organization
      //
      typedef ::xml_schema::string Organization_type;
      typedef ::xsd::cxx::tree::optional< Organization_type > Organization_optional;
      typedef ::xsd::cxx::tree::traits< Organization_type, wchar_t > Organization_traits;

      const Organization_optional&
      Organization () const;

      Organization_optional&
      Organization ();

      void
      Organization (const Organization_type& x);

      void
      Organization (const Organization_optional& x);

      void
      Organization (::std::unique_ptr< Organization_type > p);

      // Constructors.
      //
      AuthorType ();

      AuthorType (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      AuthorType (const AuthorType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual AuthorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AuthorType&
      operator= (const AuthorType& x);

      virtual 
      ~AuthorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Name_optional Name_;
      Organization_optional Organization_;
    };

    class QIF30_SYMBOL_DECL ApplicationType: public ::xml_schema::type
    {
      public:
      // Name
      //
      typedef ::xml_schema::string Name_type;
      typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

      const Name_type&
      Name () const;

      Name_type&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (::std::unique_ptr< Name_type > p);

      // Organization
      //
      typedef ::xml_schema::string Organization_type;
      typedef ::xsd::cxx::tree::optional< Organization_type > Organization_optional;
      typedef ::xsd::cxx::tree::traits< Organization_type, wchar_t > Organization_traits;

      const Organization_optional&
      Organization () const;

      Organization_optional&
      Organization ();

      void
      Organization (const Organization_type& x);

      void
      Organization (const Organization_optional& x);

      void
      Organization (::std::unique_ptr< Organization_type > p);

      // AddonName
      //
      typedef ::xml_schema::string AddonName_type;
      typedef ::xsd::cxx::tree::optional< AddonName_type > AddonName_optional;
      typedef ::xsd::cxx::tree::traits< AddonName_type, wchar_t > AddonName_traits;

      const AddonName_optional&
      AddonName () const;

      AddonName_optional&
      AddonName ();

      void
      AddonName (const AddonName_type& x);

      void
      AddonName (const AddonName_optional& x);

      void
      AddonName (::std::unique_ptr< AddonName_type > p);

      // AddonOrganization
      //
      typedef ::xml_schema::string AddonOrganization_type;
      typedef ::xsd::cxx::tree::optional< AddonOrganization_type > AddonOrganization_optional;
      typedef ::xsd::cxx::tree::traits< AddonOrganization_type, wchar_t > AddonOrganization_traits;

      const AddonOrganization_optional&
      AddonOrganization () const;

      AddonOrganization_optional&
      AddonOrganization ();

      void
      AddonOrganization (const AddonOrganization_type& x);

      void
      AddonOrganization (const AddonOrganization_optional& x);

      void
      AddonOrganization (::std::unique_ptr< AddonOrganization_type > p);

      // Constructors.
      //
      ApplicationType ();

      ApplicationType (const Name_type&);

      ApplicationType (const xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ApplicationType (const ApplicationType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual ApplicationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ApplicationType&
      operator= (const ApplicationType& x);

      virtual 
      ~ApplicationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Name_type > Name_;
      Organization_optional Organization_;
      AddonName_optional AddonName_;
      AddonOrganization_optional AddonOrganization_;
    };

    class QIF30_SYMBOL_DECL EdgeOrientedType: public ::xsd::qif30::ElementReferenceType
    {
      public:
      // turned
      //
      typedef ::xml_schema::boolean turned_type;
      typedef ::xsd::cxx::tree::traits< turned_type, wchar_t > turned_traits;

      const turned_type&
      turned () const;

      turned_type&
      turned ();

      void
      turned (const turned_type& x);

      static turned_type
      turned_default_value ();

      // Constructors.
      //
      EdgeOrientedType ();

      EdgeOrientedType (const Id_type&);

      EdgeOrientedType (::std::unique_ptr< Id_type >);

      EdgeOrientedType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      EdgeOrientedType (const EdgeOrientedType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual EdgeOrientedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EdgeOrientedType&
      operator= (const EdgeOrientedType& x);

      virtual 
      ~EdgeOrientedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< turned_type > turned_;
    };

    class QIF30_SYMBOL_DECL LineStyleEnumType: public ::xml_schema::string
    {
      public:
      enum value
      {
        SOLID,
        DOT,
        DASH,
        DASH_DOT,
        DASH_DOT_DOT,
        DASH_DOT_DOT_DOT,
        DASH_DASH_DOT,
        DASH_DASH_DOT_DOT,
        DASH_DASH_DOT_DOT_DOT,
        SHORT_DASH,
        LONG_DASH,
        MEDIUM_LONG_DASH,
        MEDIUM_DASH_SHORT_DASH_SHORT_DASH,
        LONG_DASH_SHORT_DASH,
        LONG_DASH_SHORT_DASH_SHORT_DASH,
        LONG_DASH_DOT_DOT,
        LONG_DASH_DOT,
        MEDIUM_DASH_DOT_SHORT_DASH_DOT,
        SPARSE_DOT,
        CENTERLINE,
        PHANTOM
      };

      LineStyleEnumType ();

      LineStyleEnumType (value v);

      LineStyleEnumType (const wchar_t* v);

      LineStyleEnumType (const ::std::wstring& v);

      LineStyleEnumType (const ::xml_schema::string& v);

      LineStyleEnumType (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      LineStyleEnumType (const xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      LineStyleEnumType (const ::std::wstring& s,
                         const xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      LineStyleEnumType (const LineStyleEnumType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
      LineStyleEnumType&
      operator= (const LineStyleEnumType&) = default;
#endif

      virtual LineStyleEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineStyleEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_LineStyleEnumType_convert ();
      }

      protected:
      value
      _xsd_LineStyleEnumType_convert () const;

      public:
      static const wchar_t* const _xsd_LineStyleEnumType_literals_[21];
      static const value _xsd_LineStyleEnumType_indexes_[21];
    };

    class QIF30_SYMBOL_DECL LineStyleType: public ::xsd::qif30::LineStyleEnumType
    {
      public:
      // thickness
      //
      typedef ::xml_schema::positive_integer thickness_type;
      typedef ::xsd::cxx::tree::traits< thickness_type, wchar_t > thickness_traits;

      const thickness_type&
      thickness () const;

      thickness_type&
      thickness ();

      void
      thickness (const thickness_type& x);

      static thickness_type
      thickness_default_value ();

      // Constructors.
      //
      LineStyleType ();

      LineStyleType (::xsd::qif30::LineStyleEnumType::value);

      LineStyleType (const wchar_t*);

      LineStyleType (const ::std::wstring&);

      LineStyleType (const ::xsd::qif30::LineStyleEnumType&);

      LineStyleType (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      LineStyleType (const LineStyleType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual LineStyleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      LineStyleType&
      operator= (const LineStyleType& x);

      virtual 
      ~LineStyleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< thickness_type > thickness_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif30
  {
    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ColorType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const ColorType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const ColorType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const QuaternionType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const NodeBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const NodeWithIdBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const TransparencyType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const TransparencyType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const TransparencyType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const DrawableBaseType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const AuthorType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ApplicationType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const EdgeOrientedType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const LineStyleEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const LineStyleEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const LineStyleEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const LineStyleType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___QIFLIBRARY_PRIMITIVES_PD_HXX
