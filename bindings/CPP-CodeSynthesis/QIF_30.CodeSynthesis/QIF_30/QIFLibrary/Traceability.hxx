// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CXX___QIFLIBRARY_TRACEABILITY_HXX
#define CXX___QIFLIBRARY_TRACEABILITY_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "..\\export.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< wchar_t, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< wchar_t > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< wchar_t > not_derived;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xsd
{
  namespace qif30
  {
    class InspectionProgramType;
    class InspectionSoftwareItemsType;
    class EnvironmentType;
    class EnvironmentsType;
    class InspectionTraceabilityType;
    class PreInspectionTraceabilityType;
    class ProductTraceabilityType;
    class ActualProductTraceabilityType;
    class ProcessParameterType;
    class ProcessParametersType;
    class ManufacturingProcessTraceabilityType;
    class ManufacturingProcessTraceabilitiesType;
    class ErrorsType;
    class PartialInspectionType;
    class TimeDescriptionEnumType;
    class TimeDescriptionType;
    class InspectionModeEnumType;
    class InspectionScopeEnumType;
    class ValidationCountsType;
    class ProductDataQualityAreaEnumType;
    class ProductDataQualityAreaType;
    class ProductDataQualityCheckType;
    class CheckStatusEnumType;
    class ProductDataQualityChecksType;
    class ProductDataQualityType;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../QIFLibrary/IntermediatesPMI.hxx"

namespace xsd
{
  namespace qif30
  {
    class QIF30_SYMBOL_DECL InspectionProgramType: public ::xml_schema::type
    {
      public:
      // File
      //
      typedef ::xsd::qif30::FileType File_type;
      typedef ::xsd::cxx::tree::traits< File_type, wchar_t > File_traits;

      const File_type&
      File () const;

      File_type&
      File ();

      void
      File (const File_type& x);

      void
      File (::std::unique_ptr< File_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, wchar_t > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::unique_ptr< Description_type > p);

      // FormalStandardId
      //
      typedef ::xsd::qif30::QIFReferenceType FormalStandardId_type;
      typedef ::xsd::cxx::tree::traits< FormalStandardId_type, wchar_t > FormalStandardId_traits;

      const FormalStandardId_type&
      FormalStandardId () const;

      FormalStandardId_type&
      FormalStandardId ();

      void
      FormalStandardId (const FormalStandardId_type& x);

      void
      FormalStandardId (::std::unique_ptr< FormalStandardId_type > p);

      // Author
      //
      typedef ::xsd::qif30::EmployeeType Author_type;
      typedef ::xsd::cxx::tree::traits< Author_type, wchar_t > Author_traits;

      const Author_type&
      Author () const;

      Author_type&
      Author ();

      void
      Author (const Author_type& x);

      void
      Author (::std::unique_ptr< Author_type > p);

      // Constructors.
      //
      InspectionProgramType ();

      InspectionProgramType (const File_type&,
                             const FormalStandardId_type&,
                             const Author_type&);

      InspectionProgramType (::std::unique_ptr< File_type >,
                             ::std::unique_ptr< FormalStandardId_type >,
                             ::std::unique_ptr< Author_type >);

      InspectionProgramType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      InspectionProgramType (const InspectionProgramType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual InspectionProgramType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionProgramType&
      operator= (const InspectionProgramType& x);

      virtual 
      ~InspectionProgramType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< File_type > File_;
      Description_optional Description_;
      ::xsd::cxx::tree::one< FormalStandardId_type > FormalStandardId_;
      ::xsd::cxx::tree::one< Author_type > Author_;
    };

    class QIF30_SYMBOL_DECL InspectionSoftwareItemsType: public ::xml_schema::type
    {
      public:
      // InspectionProgramGenerationSoftware
      //
      typedef ::xsd::qif30::ArrayReferenceType InspectionProgramGenerationSoftware_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgramGenerationSoftware_type > InspectionProgramGenerationSoftware_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgramGenerationSoftware_type, wchar_t > InspectionProgramGenerationSoftware_traits;

      const InspectionProgramGenerationSoftware_optional&
      InspectionProgramGenerationSoftware () const;

      InspectionProgramGenerationSoftware_optional&
      InspectionProgramGenerationSoftware ();

      void
      InspectionProgramGenerationSoftware (const InspectionProgramGenerationSoftware_type& x);

      void
      InspectionProgramGenerationSoftware (const InspectionProgramGenerationSoftware_optional& x);

      void
      InspectionProgramGenerationSoftware (::std::unique_ptr< InspectionProgramGenerationSoftware_type > p);

      // InspectionProgramExecutionSoftware
      //
      typedef ::xsd::qif30::ArrayReferenceType InspectionProgramExecutionSoftware_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgramExecutionSoftware_type > InspectionProgramExecutionSoftware_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgramExecutionSoftware_type, wchar_t > InspectionProgramExecutionSoftware_traits;

      const InspectionProgramExecutionSoftware_optional&
      InspectionProgramExecutionSoftware () const;

      InspectionProgramExecutionSoftware_optional&
      InspectionProgramExecutionSoftware ();

      void
      InspectionProgramExecutionSoftware (const InspectionProgramExecutionSoftware_type& x);

      void
      InspectionProgramExecutionSoftware (const InspectionProgramExecutionSoftware_optional& x);

      void
      InspectionProgramExecutionSoftware (::std::unique_ptr< InspectionProgramExecutionSoftware_type > p);

      // AnalysisSoftware
      //
      typedef ::xsd::qif30::ArrayReferenceType AnalysisSoftware_type;
      typedef ::xsd::cxx::tree::optional< AnalysisSoftware_type > AnalysisSoftware_optional;
      typedef ::xsd::cxx::tree::traits< AnalysisSoftware_type, wchar_t > AnalysisSoftware_traits;

      const AnalysisSoftware_optional&
      AnalysisSoftware () const;

      AnalysisSoftware_optional&
      AnalysisSoftware ();

      void
      AnalysisSoftware (const AnalysisSoftware_type& x);

      void
      AnalysisSoftware (const AnalysisSoftware_optional& x);

      void
      AnalysisSoftware (::std::unique_ptr< AnalysisSoftware_type > p);

      // CADSoftware
      //
      typedef ::xsd::qif30::ArrayReferenceType CADSoftware_type;
      typedef ::xsd::cxx::tree::optional< CADSoftware_type > CADSoftware_optional;
      typedef ::xsd::cxx::tree::traits< CADSoftware_type, wchar_t > CADSoftware_traits;

      const CADSoftware_optional&
      CADSoftware () const;

      CADSoftware_optional&
      CADSoftware ();

      void
      CADSoftware (const CADSoftware_type& x);

      void
      CADSoftware (const CADSoftware_optional& x);

      void
      CADSoftware (::std::unique_ptr< CADSoftware_type > p);

      // DMESoftware
      //
      typedef ::xsd::qif30::ArrayReferenceType DMESoftware_type;
      typedef ::xsd::cxx::tree::optional< DMESoftware_type > DMESoftware_optional;
      typedef ::xsd::cxx::tree::traits< DMESoftware_type, wchar_t > DMESoftware_traits;

      const DMESoftware_optional&
      DMESoftware () const;

      DMESoftware_optional&
      DMESoftware ();

      void
      DMESoftware (const DMESoftware_type& x);

      void
      DMESoftware (const DMESoftware_optional& x);

      void
      DMESoftware (::std::unique_ptr< DMESoftware_type > p);

      // Constructors.
      //
      InspectionSoftwareItemsType ();

      InspectionSoftwareItemsType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      InspectionSoftwareItemsType (const InspectionSoftwareItemsType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual InspectionSoftwareItemsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionSoftwareItemsType&
      operator= (const InspectionSoftwareItemsType& x);

      virtual 
      ~InspectionSoftwareItemsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      InspectionProgramGenerationSoftware_optional InspectionProgramGenerationSoftware_;
      InspectionProgramExecutionSoftware_optional InspectionProgramExecutionSoftware_;
      AnalysisSoftware_optional AnalysisSoftware_;
      CADSoftware_optional CADSoftware_;
      DMESoftware_optional DMESoftware_;
    };

    class QIF30_SYMBOL_DECL EnvironmentType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // ObjectTemperature
      //
      typedef ::xsd::qif30::MeasuredTemperatureValueType ObjectTemperature_type;
      typedef ::xsd::cxx::tree::optional< ObjectTemperature_type > ObjectTemperature_optional;
      typedef ::xsd::cxx::tree::traits< ObjectTemperature_type, wchar_t > ObjectTemperature_traits;

      const ObjectTemperature_optional&
      ObjectTemperature () const;

      ObjectTemperature_optional&
      ObjectTemperature ();

      void
      ObjectTemperature (const ObjectTemperature_type& x);

      void
      ObjectTemperature (const ObjectTemperature_optional& x);

      void
      ObjectTemperature (::std::unique_ptr< ObjectTemperature_type > p);

      // AmbientTemperature
      //
      typedef ::xsd::qif30::MeasuredTemperatureValueType AmbientTemperature_type;
      typedef ::xsd::cxx::tree::optional< AmbientTemperature_type > AmbientTemperature_optional;
      typedef ::xsd::cxx::tree::traits< AmbientTemperature_type, wchar_t > AmbientTemperature_traits;

      const AmbientTemperature_optional&
      AmbientTemperature () const;

      AmbientTemperature_optional&
      AmbientTemperature ();

      void
      AmbientTemperature (const AmbientTemperature_type& x);

      void
      AmbientTemperature (const AmbientTemperature_optional& x);

      void
      AmbientTemperature (::std::unique_ptr< AmbientTemperature_type > p);

      // RelativeHumidity
      //
      typedef ::xsd::qif30::MeasuredDecimalType RelativeHumidity_type;
      typedef ::xsd::cxx::tree::optional< RelativeHumidity_type > RelativeHumidity_optional;
      typedef ::xsd::cxx::tree::traits< RelativeHumidity_type, wchar_t > RelativeHumidity_traits;

      const RelativeHumidity_optional&
      RelativeHumidity () const;

      RelativeHumidity_optional&
      RelativeHumidity ();

      void
      RelativeHumidity (const RelativeHumidity_type& x);

      void
      RelativeHumidity (const RelativeHumidity_optional& x);

      void
      RelativeHumidity (::std::unique_ptr< RelativeHumidity_type > p);

      // DateAndTime
      //
      typedef ::xml_schema::date_time DateAndTime_type;
      typedef ::xsd::cxx::tree::traits< DateAndTime_type, wchar_t > DateAndTime_traits;

      const DateAndTime_type&
      DateAndTime () const;

      DateAndTime_type&
      DateAndTime ();

      void
      DateAndTime (const DateAndTime_type& x);

      void
      DateAndTime (::std::unique_ptr< DateAndTime_type > p);

      // TimeDescription
      //
      typedef ::xsd::qif30::TimeDescriptionType TimeDescription_type;
      typedef ::xsd::cxx::tree::optional< TimeDescription_type > TimeDescription_optional;
      typedef ::xsd::cxx::tree::traits< TimeDescription_type, wchar_t > TimeDescription_traits;

      const TimeDescription_optional&
      TimeDescription () const;

      TimeDescription_optional&
      TimeDescription ();

      void
      TimeDescription (const TimeDescription_type& x);

      void
      TimeDescription (const TimeDescription_optional& x);

      void
      TimeDescription (::std::unique_ptr< TimeDescription_type > p);

      // Constructors.
      //
      EnvironmentType ();

      EnvironmentType (const DateAndTime_type&);

      EnvironmentType (const xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      EnvironmentType (const EnvironmentType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual EnvironmentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EnvironmentType&
      operator= (const EnvironmentType& x);

      virtual 
      ~EnvironmentType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      ObjectTemperature_optional ObjectTemperature_;
      AmbientTemperature_optional AmbientTemperature_;
      RelativeHumidity_optional RelativeHumidity_;
      ::xsd::cxx::tree::one< DateAndTime_type > DateAndTime_;
      TimeDescription_optional TimeDescription_;
    };

    class QIF30_SYMBOL_DECL EnvironmentsType: public ::xml_schema::type
    {
      public:
      // Environment
      //
      typedef ::xsd::qif30::EnvironmentType Environment_type;
      typedef ::xsd::cxx::tree::sequence< Environment_type > Environment_sequence;
      typedef xsd::cxx::tree::sequence< Environment_type >::iterator Environment_iterator;
      typedef xsd::cxx::tree::sequence< Environment_type >::const_iterator Environment_const_iterator;
      typedef ::xsd::cxx::tree::traits< Environment_type, wchar_t > Environment_traits;

      const Environment_sequence&
      Environment () const;

      Environment_sequence&
      Environment ();

      void
      Environment (const Environment_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      EnvironmentsType ();

      EnvironmentsType (const n_type&);

      EnvironmentsType (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      EnvironmentsType (const EnvironmentsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual EnvironmentsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EnvironmentsType&
      operator= (const EnvironmentsType& x);

      virtual 
      ~EnvironmentsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Environment_sequence Environment_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL InspectionTraceabilityType: public ::xml_schema::type
    {
      public:
      // InspectingOrganization
      //
      typedef ::xsd::qif30::OrganizationType InspectingOrganization_type;
      typedef ::xsd::cxx::tree::optional< InspectingOrganization_type > InspectingOrganization_optional;
      typedef ::xsd::cxx::tree::traits< InspectingOrganization_type, wchar_t > InspectingOrganization_traits;

      const InspectingOrganization_optional&
      InspectingOrganization () const;

      InspectingOrganization_optional&
      InspectingOrganization ();

      void
      InspectingOrganization (const InspectingOrganization_type& x);

      void
      InspectingOrganization (const InspectingOrganization_optional& x);

      void
      InspectingOrganization (::std::unique_ptr< InspectingOrganization_type > p);

      // CustomerOrganization
      //
      typedef ::xsd::qif30::CustomerOrganizationType CustomerOrganization_type;
      typedef ::xsd::cxx::tree::optional< CustomerOrganization_type > CustomerOrganization_optional;
      typedef ::xsd::cxx::tree::traits< CustomerOrganization_type, wchar_t > CustomerOrganization_traits;

      const CustomerOrganization_optional&
      CustomerOrganization () const;

      CustomerOrganization_optional&
      CustomerOrganization ();

      void
      CustomerOrganization (const CustomerOrganization_type& x);

      void
      CustomerOrganization (const CustomerOrganization_optional& x);

      void
      CustomerOrganization (::std::unique_ptr< CustomerOrganization_type > p);

      // SupplierCode
      //
      typedef ::xml_schema::string SupplierCode_type;
      typedef ::xsd::cxx::tree::optional< SupplierCode_type > SupplierCode_optional;
      typedef ::xsd::cxx::tree::traits< SupplierCode_type, wchar_t > SupplierCode_traits;

      const SupplierCode_optional&
      SupplierCode () const;

      SupplierCode_optional&
      SupplierCode ();

      void
      SupplierCode (const SupplierCode_type& x);

      void
      SupplierCode (const SupplierCode_optional& x);

      void
      SupplierCode (::std::unique_ptr< SupplierCode_type > p);

      // PurchaseOrderNumber
      //
      typedef ::xml_schema::string PurchaseOrderNumber_type;
      typedef ::xsd::cxx::tree::optional< PurchaseOrderNumber_type > PurchaseOrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< PurchaseOrderNumber_type, wchar_t > PurchaseOrderNumber_traits;

      const PurchaseOrderNumber_optional&
      PurchaseOrderNumber () const;

      PurchaseOrderNumber_optional&
      PurchaseOrderNumber ();

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_type& x);

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_optional& x);

      void
      PurchaseOrderNumber (::std::unique_ptr< PurchaseOrderNumber_type > p);

      // OrderNumber
      //
      typedef ::xml_schema::string OrderNumber_type;
      typedef ::xsd::cxx::tree::optional< OrderNumber_type > OrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< OrderNumber_type, wchar_t > OrderNumber_traits;

      const OrderNumber_optional&
      OrderNumber () const;

      OrderNumber_optional&
      OrderNumber ();

      void
      OrderNumber (const OrderNumber_type& x);

      void
      OrderNumber (const OrderNumber_optional& x);

      void
      OrderNumber (::std::unique_ptr< OrderNumber_type > p);

      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, wchar_t > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::unique_ptr< ReportNumber_type > p);

      // InspectionScope
      //
      typedef ::xsd::qif30::InspectionScopeEnumType InspectionScope_type;
      typedef ::xsd::cxx::tree::optional< InspectionScope_type > InspectionScope_optional;
      typedef ::xsd::cxx::tree::traits< InspectionScope_type, wchar_t > InspectionScope_traits;

      const InspectionScope_optional&
      InspectionScope () const;

      InspectionScope_optional&
      InspectionScope ();

      void
      InspectionScope (const InspectionScope_type& x);

      void
      InspectionScope (const InspectionScope_optional& x);

      void
      InspectionScope (::std::unique_ptr< InspectionScope_type > p);

      // InspectionMode
      //
      typedef ::xsd::qif30::InspectionModeEnumType InspectionMode_type;
      typedef ::xsd::cxx::tree::optional< InspectionMode_type > InspectionMode_optional;
      typedef ::xsd::cxx::tree::traits< InspectionMode_type, wchar_t > InspectionMode_traits;

      const InspectionMode_optional&
      InspectionMode () const;

      InspectionMode_optional&
      InspectionMode ();

      void
      InspectionMode (const InspectionMode_type& x);

      void
      InspectionMode (const InspectionMode_optional& x);

      void
      InspectionMode (::std::unique_ptr< InspectionMode_type > p);

      // PartialInspection
      //
      typedef ::xsd::qif30::PartialInspectionType PartialInspection_type;
      typedef ::xsd::cxx::tree::optional< PartialInspection_type > PartialInspection_optional;
      typedef ::xsd::cxx::tree::traits< PartialInspection_type, wchar_t > PartialInspection_traits;

      const PartialInspection_optional&
      PartialInspection () const;

      PartialInspection_optional&
      PartialInspection ();

      void
      PartialInspection (const PartialInspection_type& x);

      void
      PartialInspection (const PartialInspection_optional& x);

      void
      PartialInspection (::std::unique_ptr< PartialInspection_type > p);

      // NotableEvents
      //
      typedef ::xsd::qif30::NotableEventsType NotableEvents_type;
      typedef ::xsd::cxx::tree::optional< NotableEvents_type > NotableEvents_optional;
      typedef ::xsd::cxx::tree::traits< NotableEvents_type, wchar_t > NotableEvents_traits;

      const NotableEvents_optional&
      NotableEvents () const;

      NotableEvents_optional&
      NotableEvents ();

      void
      NotableEvents (const NotableEvents_type& x);

      void
      NotableEvents (const NotableEvents_optional& x);

      void
      NotableEvents (::std::unique_ptr< NotableEvents_type > p);

      // NotedEvents
      //
      typedef ::xsd::qif30::NotedEventsType NotedEvents_type;
      typedef ::xsd::cxx::tree::optional< NotedEvents_type > NotedEvents_optional;
      typedef ::xsd::cxx::tree::traits< NotedEvents_type, wchar_t > NotedEvents_traits;

      const NotedEvents_optional&
      NotedEvents () const;

      NotedEvents_optional&
      NotedEvents ();

      void
      NotedEvents (const NotedEvents_type& x);

      void
      NotedEvents (const NotedEvents_optional& x);

      void
      NotedEvents (::std::unique_ptr< NotedEvents_type > p);

      // InspectionStart
      //
      typedef ::xml_schema::date_time InspectionStart_type;
      typedef ::xsd::cxx::tree::optional< InspectionStart_type > InspectionStart_optional;
      typedef ::xsd::cxx::tree::traits< InspectionStart_type, wchar_t > InspectionStart_traits;

      const InspectionStart_optional&
      InspectionStart () const;

      InspectionStart_optional&
      InspectionStart ();

      void
      InspectionStart (const InspectionStart_type& x);

      void
      InspectionStart (const InspectionStart_optional& x);

      void
      InspectionStart (::std::unique_ptr< InspectionStart_type > p);

      // InspectionEnd
      //
      typedef ::xml_schema::date_time InspectionEnd_type;
      typedef ::xsd::cxx::tree::optional< InspectionEnd_type > InspectionEnd_optional;
      typedef ::xsd::cxx::tree::traits< InspectionEnd_type, wchar_t > InspectionEnd_traits;

      const InspectionEnd_optional&
      InspectionEnd () const;

      InspectionEnd_optional&
      InspectionEnd ();

      void
      InspectionEnd (const InspectionEnd_type& x);

      void
      InspectionEnd (const InspectionEnd_optional& x);

      void
      InspectionEnd (::std::unique_ptr< InspectionEnd_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif30::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, wchar_t > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif30::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, wchar_t > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::unique_ptr< InspectionProgram_type > p);

      // InspectionOperator
      //
      typedef ::xsd::qif30::EmployeeType InspectionOperator_type;
      typedef ::xsd::cxx::tree::optional< InspectionOperator_type > InspectionOperator_optional;
      typedef ::xsd::cxx::tree::traits< InspectionOperator_type, wchar_t > InspectionOperator_traits;

      const InspectionOperator_optional&
      InspectionOperator () const;

      InspectionOperator_optional&
      InspectionOperator ();

      void
      InspectionOperator (const InspectionOperator_type& x);

      void
      InspectionOperator (const InspectionOperator_optional& x);

      void
      InspectionOperator (::std::unique_ptr< InspectionOperator_type > p);

      // ReportPreparer
      //
      typedef ::xsd::qif30::EmployeeType ReportPreparer_type;
      typedef ::xsd::cxx::tree::optional< ReportPreparer_type > ReportPreparer_optional;
      typedef ::xsd::cxx::tree::traits< ReportPreparer_type, wchar_t > ReportPreparer_traits;

      const ReportPreparer_optional&
      ReportPreparer () const;

      ReportPreparer_optional&
      ReportPreparer ();

      void
      ReportPreparer (const ReportPreparer_type& x);

      void
      ReportPreparer (const ReportPreparer_optional& x);

      void
      ReportPreparer (::std::unique_ptr< ReportPreparer_type > p);

      // ReportPreparationDate
      //
      typedef ::xml_schema::date_time ReportPreparationDate_type;
      typedef ::xsd::cxx::tree::optional< ReportPreparationDate_type > ReportPreparationDate_optional;
      typedef ::xsd::cxx::tree::traits< ReportPreparationDate_type, wchar_t > ReportPreparationDate_traits;

      const ReportPreparationDate_optional&
      ReportPreparationDate () const;

      ReportPreparationDate_optional&
      ReportPreparationDate ();

      void
      ReportPreparationDate (const ReportPreparationDate_type& x);

      void
      ReportPreparationDate (const ReportPreparationDate_optional& x);

      void
      ReportPreparationDate (::std::unique_ptr< ReportPreparationDate_type > p);

      // ReportType
      //
      typedef ::xml_schema::token ReportType_type;
      typedef ::xsd::cxx::tree::optional< ReportType_type > ReportType_optional;
      typedef ::xsd::cxx::tree::traits< ReportType_type, wchar_t > ReportType_traits;

      const ReportType_optional&
      ReportType () const;

      ReportType_optional&
      ReportType ();

      void
      ReportType (const ReportType_type& x);

      void
      ReportType (const ReportType_optional& x);

      void
      ReportType (::std::unique_ptr< ReportType_type > p);

      // SecurityClassification
      //
      typedef ::xsd::qif30::SecurityClassificationType SecurityClassification_type;
      typedef ::xsd::cxx::tree::optional< SecurityClassification_type > SecurityClassification_optional;
      typedef ::xsd::cxx::tree::traits< SecurityClassification_type, wchar_t > SecurityClassification_traits;

      const SecurityClassification_optional&
      SecurityClassification () const;

      SecurityClassification_optional&
      SecurityClassification ();

      void
      SecurityClassification (const SecurityClassification_type& x);

      void
      SecurityClassification (const SecurityClassification_optional& x);

      void
      SecurityClassification (::std::unique_ptr< SecurityClassification_type > p);

      // PlantLocation
      //
      typedef ::xsd::qif30::LocationType PlantLocation_type;
      typedef ::xsd::cxx::tree::optional< PlantLocation_type > PlantLocation_optional;
      typedef ::xsd::cxx::tree::traits< PlantLocation_type, wchar_t > PlantLocation_traits;

      const PlantLocation_optional&
      PlantLocation () const;

      PlantLocation_optional&
      PlantLocation ();

      void
      PlantLocation (const PlantLocation_type& x);

      void
      PlantLocation (const PlantLocation_optional& x);

      void
      PlantLocation (::std::unique_ptr< PlantLocation_type > p);

      // ReferencedQIFPlanInstance
      //
      typedef ::xsd::qif30::QPIdFullReferenceType ReferencedQIFPlanInstance_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlanInstance_type > ReferencedQIFPlanInstance_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlanInstance_type, wchar_t > ReferencedQIFPlanInstance_traits;

      const ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance () const;

      ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance ();

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x);

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x);

      void
      ReferencedQIFPlanInstance (::std::unique_ptr< ReferencedQIFPlanInstance_type > p);

      // ReferencedQIFPlan
      //
      typedef ::xml_schema::nmtoken ReferencedQIFPlan_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlan_type > ReferencedQIFPlan_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlan_type, wchar_t > ReferencedQIFPlan_traits;

      const ReferencedQIFPlan_optional&
      ReferencedQIFPlan () const;

      ReferencedQIFPlan_optional&
      ReferencedQIFPlan ();

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_type& x);

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_optional& x);

      void
      ReferencedQIFPlan (::std::unique_ptr< ReferencedQIFPlan_type > p);

      static const ReferencedQIFPlan_type&
      ReferencedQIFPlan_default_value ();

      // Errors
      //
      typedef ::xsd::qif30::ErrorsType Errors_type;
      typedef ::xsd::cxx::tree::optional< Errors_type > Errors_optional;
      typedef ::xsd::cxx::tree::traits< Errors_type, wchar_t > Errors_traits;

      const Errors_optional&
      Errors () const;

      Errors_optional&
      Errors ();

      void
      Errors (const Errors_type& x);

      void
      Errors (const Errors_optional& x);

      void
      Errors (::std::unique_ptr< Errors_type > p);

      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // Constructors.
      //
      InspectionTraceabilityType ();

      InspectionTraceabilityType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      InspectionTraceabilityType (const InspectionTraceabilityType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual InspectionTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionTraceabilityType&
      operator= (const InspectionTraceabilityType& x);

      virtual 
      ~InspectionTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      InspectingOrganization_optional InspectingOrganization_;
      CustomerOrganization_optional CustomerOrganization_;
      SupplierCode_optional SupplierCode_;
      PurchaseOrderNumber_optional PurchaseOrderNumber_;
      OrderNumber_optional OrderNumber_;
      ReportNumber_optional ReportNumber_;
      InspectionScope_optional InspectionScope_;
      InspectionMode_optional InspectionMode_;
      PartialInspection_optional PartialInspection_;
      NotableEvents_optional NotableEvents_;
      NotedEvents_optional NotedEvents_;
      InspectionStart_optional InspectionStart_;
      InspectionEnd_optional InspectionEnd_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      InspectionOperator_optional InspectionOperator_;
      ReportPreparer_optional ReportPreparer_;
      ReportPreparationDate_optional ReportPreparationDate_;
      ReportType_optional ReportType_;
      SecurityClassification_optional SecurityClassification_;
      PlantLocation_optional PlantLocation_;
      ReferencedQIFPlanInstance_optional ReferencedQIFPlanInstance_;
      ReferencedQIFPlan_optional ReferencedQIFPlan_;
      static const ReferencedQIFPlan_type ReferencedQIFPlan_default_value_;
      Errors_optional Errors_;
      Attributes_optional Attributes_;
    };

    class QIF30_SYMBOL_DECL PreInspectionTraceabilityType: public ::xml_schema::type
    {
      public:
      // InspectingOrganization
      //
      typedef ::xsd::qif30::OrganizationType InspectingOrganization_type;
      typedef ::xsd::cxx::tree::optional< InspectingOrganization_type > InspectingOrganization_optional;
      typedef ::xsd::cxx::tree::traits< InspectingOrganization_type, wchar_t > InspectingOrganization_traits;

      const InspectingOrganization_optional&
      InspectingOrganization () const;

      InspectingOrganization_optional&
      InspectingOrganization ();

      void
      InspectingOrganization (const InspectingOrganization_type& x);

      void
      InspectingOrganization (const InspectingOrganization_optional& x);

      void
      InspectingOrganization (::std::unique_ptr< InspectingOrganization_type > p);

      // CustomerOrganization
      //
      typedef ::xsd::qif30::CustomerOrganizationType CustomerOrganization_type;
      typedef ::xsd::cxx::tree::optional< CustomerOrganization_type > CustomerOrganization_optional;
      typedef ::xsd::cxx::tree::traits< CustomerOrganization_type, wchar_t > CustomerOrganization_traits;

      const CustomerOrganization_optional&
      CustomerOrganization () const;

      CustomerOrganization_optional&
      CustomerOrganization ();

      void
      CustomerOrganization (const CustomerOrganization_type& x);

      void
      CustomerOrganization (const CustomerOrganization_optional& x);

      void
      CustomerOrganization (::std::unique_ptr< CustomerOrganization_type > p);

      // SupplierCode
      //
      typedef ::xml_schema::string SupplierCode_type;
      typedef ::xsd::cxx::tree::optional< SupplierCode_type > SupplierCode_optional;
      typedef ::xsd::cxx::tree::traits< SupplierCode_type, wchar_t > SupplierCode_traits;

      const SupplierCode_optional&
      SupplierCode () const;

      SupplierCode_optional&
      SupplierCode ();

      void
      SupplierCode (const SupplierCode_type& x);

      void
      SupplierCode (const SupplierCode_optional& x);

      void
      SupplierCode (::std::unique_ptr< SupplierCode_type > p);

      // PurchaseOrderNumber
      //
      typedef ::xml_schema::string PurchaseOrderNumber_type;
      typedef ::xsd::cxx::tree::optional< PurchaseOrderNumber_type > PurchaseOrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< PurchaseOrderNumber_type, wchar_t > PurchaseOrderNumber_traits;

      const PurchaseOrderNumber_optional&
      PurchaseOrderNumber () const;

      PurchaseOrderNumber_optional&
      PurchaseOrderNumber ();

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_type& x);

      void
      PurchaseOrderNumber (const PurchaseOrderNumber_optional& x);

      void
      PurchaseOrderNumber (::std::unique_ptr< PurchaseOrderNumber_type > p);

      // OrderNumber
      //
      typedef ::xml_schema::string OrderNumber_type;
      typedef ::xsd::cxx::tree::optional< OrderNumber_type > OrderNumber_optional;
      typedef ::xsd::cxx::tree::traits< OrderNumber_type, wchar_t > OrderNumber_traits;

      const OrderNumber_optional&
      OrderNumber () const;

      OrderNumber_optional&
      OrderNumber ();

      void
      OrderNumber (const OrderNumber_type& x);

      void
      OrderNumber (const OrderNumber_optional& x);

      void
      OrderNumber (::std::unique_ptr< OrderNumber_type > p);

      // AsmPathIds
      //
      typedef ::xsd::qif30::ArrayReferenceType AsmPathIds_type;
      typedef ::xsd::cxx::tree::optional< AsmPathIds_type > AsmPathIds_optional;
      typedef ::xsd::cxx::tree::traits< AsmPathIds_type, wchar_t > AsmPathIds_traits;

      const AsmPathIds_optional&
      AsmPathIds () const;

      AsmPathIds_optional&
      AsmPathIds ();

      void
      AsmPathIds (const AsmPathIds_type& x);

      void
      AsmPathIds (const AsmPathIds_optional& x);

      void
      AsmPathIds (::std::unique_ptr< AsmPathIds_type > p);

      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, wchar_t > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::unique_ptr< ReportNumber_type > p);

      // InspectionScope
      //
      typedef ::xsd::qif30::InspectionScopeEnumType InspectionScope_type;
      typedef ::xsd::cxx::tree::optional< InspectionScope_type > InspectionScope_optional;
      typedef ::xsd::cxx::tree::traits< InspectionScope_type, wchar_t > InspectionScope_traits;

      const InspectionScope_optional&
      InspectionScope () const;

      InspectionScope_optional&
      InspectionScope ();

      void
      InspectionScope (const InspectionScope_type& x);

      void
      InspectionScope (const InspectionScope_optional& x);

      void
      InspectionScope (::std::unique_ptr< InspectionScope_type > p);

      // InspectionMode
      //
      typedef ::xsd::qif30::InspectionModeEnumType InspectionMode_type;
      typedef ::xsd::cxx::tree::optional< InspectionMode_type > InspectionMode_optional;
      typedef ::xsd::cxx::tree::traits< InspectionMode_type, wchar_t > InspectionMode_traits;

      const InspectionMode_optional&
      InspectionMode () const;

      InspectionMode_optional&
      InspectionMode ();

      void
      InspectionMode (const InspectionMode_type& x);

      void
      InspectionMode (const InspectionMode_optional& x);

      void
      InspectionMode (::std::unique_ptr< InspectionMode_type > p);

      // PartialInspection
      //
      typedef ::xsd::qif30::PartialInspectionType PartialInspection_type;
      typedef ::xsd::cxx::tree::optional< PartialInspection_type > PartialInspection_optional;
      typedef ::xsd::cxx::tree::traits< PartialInspection_type, wchar_t > PartialInspection_traits;

      const PartialInspection_optional&
      PartialInspection () const;

      PartialInspection_optional&
      PartialInspection ();

      void
      PartialInspection (const PartialInspection_type& x);

      void
      PartialInspection (const PartialInspection_optional& x);

      void
      PartialInspection (::std::unique_ptr< PartialInspection_type > p);

      // NotableEvents
      //
      typedef ::xsd::qif30::NotableEventsType NotableEvents_type;
      typedef ::xsd::cxx::tree::optional< NotableEvents_type > NotableEvents_optional;
      typedef ::xsd::cxx::tree::traits< NotableEvents_type, wchar_t > NotableEvents_traits;

      const NotableEvents_optional&
      NotableEvents () const;

      NotableEvents_optional&
      NotableEvents ();

      void
      NotableEvents (const NotableEvents_type& x);

      void
      NotableEvents (const NotableEvents_optional& x);

      void
      NotableEvents (::std::unique_ptr< NotableEvents_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif30::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, wchar_t > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif30::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, wchar_t > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::unique_ptr< InspectionProgram_type > p);

      // SecurityClassification
      //
      typedef ::xsd::qif30::SecurityClassificationType SecurityClassification_type;
      typedef ::xsd::cxx::tree::optional< SecurityClassification_type > SecurityClassification_optional;
      typedef ::xsd::cxx::tree::traits< SecurityClassification_type, wchar_t > SecurityClassification_traits;

      const SecurityClassification_optional&
      SecurityClassification () const;

      SecurityClassification_optional&
      SecurityClassification ();

      void
      SecurityClassification (const SecurityClassification_type& x);

      void
      SecurityClassification (const SecurityClassification_optional& x);

      void
      SecurityClassification (::std::unique_ptr< SecurityClassification_type > p);

      // PlantLocation
      //
      typedef ::xsd::qif30::LocationType PlantLocation_type;
      typedef ::xsd::cxx::tree::optional< PlantLocation_type > PlantLocation_optional;
      typedef ::xsd::cxx::tree::traits< PlantLocation_type, wchar_t > PlantLocation_traits;

      const PlantLocation_optional&
      PlantLocation () const;

      PlantLocation_optional&
      PlantLocation ();

      void
      PlantLocation (const PlantLocation_type& x);

      void
      PlantLocation (const PlantLocation_optional& x);

      void
      PlantLocation (::std::unique_ptr< PlantLocation_type > p);

      // ReferencedQIFPlanInstance
      //
      typedef ::xsd::qif30::QPIdFullReferenceType ReferencedQIFPlanInstance_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlanInstance_type > ReferencedQIFPlanInstance_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlanInstance_type, wchar_t > ReferencedQIFPlanInstance_traits;

      const ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance () const;

      ReferencedQIFPlanInstance_optional&
      ReferencedQIFPlanInstance ();

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_type& x);

      void
      ReferencedQIFPlanInstance (const ReferencedQIFPlanInstance_optional& x);

      void
      ReferencedQIFPlanInstance (::std::unique_ptr< ReferencedQIFPlanInstance_type > p);

      // ReferencedQIFPlan
      //
      typedef ::xml_schema::nmtoken ReferencedQIFPlan_type;
      typedef ::xsd::cxx::tree::optional< ReferencedQIFPlan_type > ReferencedQIFPlan_optional;
      typedef ::xsd::cxx::tree::traits< ReferencedQIFPlan_type, wchar_t > ReferencedQIFPlan_traits;

      const ReferencedQIFPlan_optional&
      ReferencedQIFPlan () const;

      ReferencedQIFPlan_optional&
      ReferencedQIFPlan ();

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_type& x);

      void
      ReferencedQIFPlan (const ReferencedQIFPlan_optional& x);

      void
      ReferencedQIFPlan (::std::unique_ptr< ReferencedQIFPlan_type > p);

      static const ReferencedQIFPlan_type&
      ReferencedQIFPlan_default_value ();

      // FormalStandardId
      //
      typedef ::xsd::qif30::QIFReferenceType FormalStandardId_type;
      typedef ::xsd::cxx::tree::traits< FormalStandardId_type, wchar_t > FormalStandardId_traits;

      const FormalStandardId_type&
      FormalStandardId () const;

      FormalStandardId_type&
      FormalStandardId ();

      void
      FormalStandardId (const FormalStandardId_type& x);

      void
      FormalStandardId (::std::unique_ptr< FormalStandardId_type > p);

      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // Constructors.
      //
      PreInspectionTraceabilityType ();

      PreInspectionTraceabilityType (const FormalStandardId_type&);

      PreInspectionTraceabilityType (::std::unique_ptr< FormalStandardId_type >);

      PreInspectionTraceabilityType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      PreInspectionTraceabilityType (const PreInspectionTraceabilityType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual PreInspectionTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PreInspectionTraceabilityType&
      operator= (const PreInspectionTraceabilityType& x);

      virtual 
      ~PreInspectionTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      InspectingOrganization_optional InspectingOrganization_;
      CustomerOrganization_optional CustomerOrganization_;
      SupplierCode_optional SupplierCode_;
      PurchaseOrderNumber_optional PurchaseOrderNumber_;
      OrderNumber_optional OrderNumber_;
      AsmPathIds_optional AsmPathIds_;
      ReportNumber_optional ReportNumber_;
      InspectionScope_optional InspectionScope_;
      InspectionMode_optional InspectionMode_;
      PartialInspection_optional PartialInspection_;
      NotableEvents_optional NotableEvents_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      SecurityClassification_optional SecurityClassification_;
      PlantLocation_optional PlantLocation_;
      ReferencedQIFPlanInstance_optional ReferencedQIFPlanInstance_;
      ReferencedQIFPlan_optional ReferencedQIFPlan_;
      static const ReferencedQIFPlan_type ReferencedQIFPlan_default_value_;
      ::xsd::cxx::tree::one< FormalStandardId_type > FormalStandardId_;
      Attributes_optional Attributes_;
    };

    class QIF30_SYMBOL_DECL ProductTraceabilityType: public ::xml_schema::type
    {
      public:
      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, wchar_t > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::unique_ptr< ReportNumber_type > p);

      // ManufacturingProcessId
      //
      typedef ::xsd::qif30::QIFReferenceType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, wchar_t > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::unique_ptr< ManufacturingProcessId_type > p);

      // FixtureId
      //
      typedef ::xsd::qif30::QIFReferenceType FixtureId_type;
      typedef ::xsd::cxx::tree::optional< FixtureId_type > FixtureId_optional;
      typedef ::xsd::cxx::tree::traits< FixtureId_type, wchar_t > FixtureId_traits;

      const FixtureId_optional&
      FixtureId () const;

      FixtureId_optional&
      FixtureId ();

      void
      FixtureId (const FixtureId_type& x);

      void
      FixtureId (const FixtureId_optional& x);

      void
      FixtureId (::std::unique_ptr< FixtureId_type > p);

      // NotableEventIds
      //
      typedef ::xsd::qif30::ArrayReferenceType NotableEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotableEventIds_type > NotableEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotableEventIds_type, wchar_t > NotableEventIds_traits;

      const NotableEventIds_optional&
      NotableEventIds () const;

      NotableEventIds_optional&
      NotableEventIds ();

      void
      NotableEventIds (const NotableEventIds_type& x);

      void
      NotableEventIds (const NotableEventIds_optional& x);

      void
      NotableEventIds (::std::unique_ptr< NotableEventIds_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif30::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, wchar_t > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif30::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, wchar_t > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::unique_ptr< InspectionProgram_type > p);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif30::ArrayReferenceType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, wchar_t > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::unique_ptr< MeasurementDeviceIds_type > p);

      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // Constructors.
      //
      ProductTraceabilityType ();

      ProductTraceabilityType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ProductTraceabilityType (const ProductTraceabilityType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ProductTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductTraceabilityType&
      operator= (const ProductTraceabilityType& x);

      virtual 
      ~ProductTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ReportNumber_optional ReportNumber_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      FixtureId_optional FixtureId_;
      NotableEventIds_optional NotableEventIds_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      Attributes_optional Attributes_;
    };

    class QIF30_SYMBOL_DECL ActualProductTraceabilityType: public ::xml_schema::type
    {
      public:
      // SampleNumber
      //
      typedef ::xml_schema::string SampleNumber_type;
      typedef ::xsd::cxx::tree::optional< SampleNumber_type > SampleNumber_optional;
      typedef ::xsd::cxx::tree::traits< SampleNumber_type, wchar_t > SampleNumber_traits;

      const SampleNumber_optional&
      SampleNumber () const;

      SampleNumber_optional&
      SampleNumber ();

      void
      SampleNumber (const SampleNumber_type& x);

      void
      SampleNumber (const SampleNumber_optional& x);

      void
      SampleNumber (::std::unique_ptr< SampleNumber_type > p);

      // LotNumber
      //
      typedef ::xml_schema::string LotNumber_type;
      typedef ::xsd::cxx::tree::optional< LotNumber_type > LotNumber_optional;
      typedef ::xsd::cxx::tree::traits< LotNumber_type, wchar_t > LotNumber_traits;

      const LotNumber_optional&
      LotNumber () const;

      LotNumber_optional&
      LotNumber ();

      void
      LotNumber (const LotNumber_type& x);

      void
      LotNumber (const LotNumber_optional& x);

      void
      LotNumber (::std::unique_ptr< LotNumber_type > p);

      // ReportNumber
      //
      typedef ::xml_schema::string ReportNumber_type;
      typedef ::xsd::cxx::tree::optional< ReportNumber_type > ReportNumber_optional;
      typedef ::xsd::cxx::tree::traits< ReportNumber_type, wchar_t > ReportNumber_traits;

      const ReportNumber_optional&
      ReportNumber () const;

      ReportNumber_optional&
      ReportNumber ();

      void
      ReportNumber (const ReportNumber_type& x);

      void
      ReportNumber (const ReportNumber_optional& x);

      void
      ReportNumber (::std::unique_ptr< ReportNumber_type > p);

      // ManufacturingProcessId
      //
      typedef ::xsd::qif30::QIFReferenceType ManufacturingProcessId_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessId_type > ManufacturingProcessId_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessId_type, wchar_t > ManufacturingProcessId_traits;

      const ManufacturingProcessId_optional&
      ManufacturingProcessId () const;

      ManufacturingProcessId_optional&
      ManufacturingProcessId ();

      void
      ManufacturingProcessId (const ManufacturingProcessId_type& x);

      void
      ManufacturingProcessId (const ManufacturingProcessId_optional& x);

      void
      ManufacturingProcessId (::std::unique_ptr< ManufacturingProcessId_type > p);

      // FixtureId
      //
      typedef ::xsd::qif30::QIFReferenceType FixtureId_type;
      typedef ::xsd::cxx::tree::optional< FixtureId_type > FixtureId_optional;
      typedef ::xsd::cxx::tree::traits< FixtureId_type, wchar_t > FixtureId_traits;

      const FixtureId_optional&
      FixtureId () const;

      FixtureId_optional&
      FixtureId ();

      void
      FixtureId (const FixtureId_type& x);

      void
      FixtureId (const FixtureId_optional& x);

      void
      FixtureId (::std::unique_ptr< FixtureId_type > p);

      // NotableEventIds
      //
      typedef ::xsd::qif30::ArrayReferenceType NotableEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotableEventIds_type > NotableEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotableEventIds_type, wchar_t > NotableEventIds_traits;

      const NotableEventIds_optional&
      NotableEventIds () const;

      NotableEventIds_optional&
      NotableEventIds ();

      void
      NotableEventIds (const NotableEventIds_type& x);

      void
      NotableEventIds (const NotableEventIds_optional& x);

      void
      NotableEventIds (::std::unique_ptr< NotableEventIds_type > p);

      // NotedEventIds
      //
      typedef ::xsd::qif30::ArrayReferenceType NotedEventIds_type;
      typedef ::xsd::cxx::tree::optional< NotedEventIds_type > NotedEventIds_optional;
      typedef ::xsd::cxx::tree::traits< NotedEventIds_type, wchar_t > NotedEventIds_traits;

      const NotedEventIds_optional&
      NotedEventIds () const;

      NotedEventIds_optional&
      NotedEventIds ();

      void
      NotedEventIds (const NotedEventIds_type& x);

      void
      NotedEventIds (const NotedEventIds_optional& x);

      void
      NotedEventIds (::std::unique_ptr< NotedEventIds_type > p);

      // InspectionStart
      //
      typedef ::xml_schema::date_time InspectionStart_type;
      typedef ::xsd::cxx::tree::optional< InspectionStart_type > InspectionStart_optional;
      typedef ::xsd::cxx::tree::traits< InspectionStart_type, wchar_t > InspectionStart_traits;

      const InspectionStart_optional&
      InspectionStart () const;

      InspectionStart_optional&
      InspectionStart ();

      void
      InspectionStart (const InspectionStart_type& x);

      void
      InspectionStart (const InspectionStart_optional& x);

      void
      InspectionStart (::std::unique_ptr< InspectionStart_type > p);

      // InspectionEnd
      //
      typedef ::xml_schema::date_time InspectionEnd_type;
      typedef ::xsd::cxx::tree::optional< InspectionEnd_type > InspectionEnd_optional;
      typedef ::xsd::cxx::tree::traits< InspectionEnd_type, wchar_t > InspectionEnd_traits;

      const InspectionEnd_optional&
      InspectionEnd () const;

      InspectionEnd_optional&
      InspectionEnd ();

      void
      InspectionEnd (const InspectionEnd_type& x);

      void
      InspectionEnd (const InspectionEnd_optional& x);

      void
      InspectionEnd (::std::unique_ptr< InspectionEnd_type > p);

      // InspectionSoftwareItems
      //
      typedef ::xsd::qif30::InspectionSoftwareItemsType InspectionSoftwareItems_type;
      typedef ::xsd::cxx::tree::optional< InspectionSoftwareItems_type > InspectionSoftwareItems_optional;
      typedef ::xsd::cxx::tree::traits< InspectionSoftwareItems_type, wchar_t > InspectionSoftwareItems_traits;

      const InspectionSoftwareItems_optional&
      InspectionSoftwareItems () const;

      InspectionSoftwareItems_optional&
      InspectionSoftwareItems ();

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_type& x);

      void
      InspectionSoftwareItems (const InspectionSoftwareItems_optional& x);

      void
      InspectionSoftwareItems (::std::unique_ptr< InspectionSoftwareItems_type > p);

      // InspectionProgram
      //
      typedef ::xsd::qif30::InspectionProgramType InspectionProgram_type;
      typedef ::xsd::cxx::tree::optional< InspectionProgram_type > InspectionProgram_optional;
      typedef ::xsd::cxx::tree::traits< InspectionProgram_type, wchar_t > InspectionProgram_traits;

      const InspectionProgram_optional&
      InspectionProgram () const;

      InspectionProgram_optional&
      InspectionProgram ();

      void
      InspectionProgram (const InspectionProgram_type& x);

      void
      InspectionProgram (const InspectionProgram_optional& x);

      void
      InspectionProgram (::std::unique_ptr< InspectionProgram_type > p);

      // InspectionOperator
      //
      typedef ::xsd::qif30::EmployeeType InspectionOperator_type;
      typedef ::xsd::cxx::tree::optional< InspectionOperator_type > InspectionOperator_optional;
      typedef ::xsd::cxx::tree::traits< InspectionOperator_type, wchar_t > InspectionOperator_traits;

      const InspectionOperator_optional&
      InspectionOperator () const;

      InspectionOperator_optional&
      InspectionOperator ();

      void
      InspectionOperator (const InspectionOperator_type& x);

      void
      InspectionOperator (const InspectionOperator_optional& x);

      void
      InspectionOperator (::std::unique_ptr< InspectionOperator_type > p);

      // MeasurementDeviceIds
      //
      typedef ::xsd::qif30::ArrayReferenceType MeasurementDeviceIds_type;
      typedef ::xsd::cxx::tree::optional< MeasurementDeviceIds_type > MeasurementDeviceIds_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementDeviceIds_type, wchar_t > MeasurementDeviceIds_traits;

      const MeasurementDeviceIds_optional&
      MeasurementDeviceIds () const;

      MeasurementDeviceIds_optional&
      MeasurementDeviceIds ();

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_type& x);

      void
      MeasurementDeviceIds (const MeasurementDeviceIds_optional& x);

      void
      MeasurementDeviceIds (::std::unique_ptr< MeasurementDeviceIds_type > p);

      // ProductEnvironments
      //
      typedef ::xsd::qif30::EnvironmentsType ProductEnvironments_type;
      typedef ::xsd::cxx::tree::optional< ProductEnvironments_type > ProductEnvironments_optional;
      typedef ::xsd::cxx::tree::traits< ProductEnvironments_type, wchar_t > ProductEnvironments_traits;

      const ProductEnvironments_optional&
      ProductEnvironments () const;

      ProductEnvironments_optional&
      ProductEnvironments ();

      void
      ProductEnvironments (const ProductEnvironments_type& x);

      void
      ProductEnvironments (const ProductEnvironments_optional& x);

      void
      ProductEnvironments (::std::unique_ptr< ProductEnvironments_type > p);

      // Errors
      //
      typedef ::xsd::qif30::ErrorsType Errors_type;
      typedef ::xsd::cxx::tree::optional< Errors_type > Errors_optional;
      typedef ::xsd::cxx::tree::traits< Errors_type, wchar_t > Errors_traits;

      const Errors_optional&
      Errors () const;

      Errors_optional&
      Errors ();

      void
      Errors (const Errors_type& x);

      void
      Errors (const Errors_optional& x);

      void
      Errors (::std::unique_ptr< Errors_type > p);

      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // Constructors.
      //
      ActualProductTraceabilityType ();

      ActualProductTraceabilityType (const xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      ActualProductTraceabilityType (const ActualProductTraceabilityType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual ActualProductTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ActualProductTraceabilityType&
      operator= (const ActualProductTraceabilityType& x);

      virtual 
      ~ActualProductTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      SampleNumber_optional SampleNumber_;
      LotNumber_optional LotNumber_;
      ReportNumber_optional ReportNumber_;
      ManufacturingProcessId_optional ManufacturingProcessId_;
      FixtureId_optional FixtureId_;
      NotableEventIds_optional NotableEventIds_;
      NotedEventIds_optional NotedEventIds_;
      InspectionStart_optional InspectionStart_;
      InspectionEnd_optional InspectionEnd_;
      InspectionSoftwareItems_optional InspectionSoftwareItems_;
      InspectionProgram_optional InspectionProgram_;
      InspectionOperator_optional InspectionOperator_;
      MeasurementDeviceIds_optional MeasurementDeviceIds_;
      ProductEnvironments_optional ProductEnvironments_;
      Errors_optional Errors_;
      Attributes_optional Attributes_;
    };

    class QIF30_SYMBOL_DECL ProcessParameterType: public ::xml_schema::type
    {
      public:
      // ParameterType
      //
      typedef ::xml_schema::string ParameterType_type;
      typedef ::xsd::cxx::tree::traits< ParameterType_type, wchar_t > ParameterType_traits;

      const ParameterType_type&
      ParameterType () const;

      ParameterType_type&
      ParameterType ();

      void
      ParameterType (const ParameterType_type& x);

      void
      ParameterType (::std::unique_ptr< ParameterType_type > p);

      // ParameterValue
      //
      typedef ::xml_schema::string ParameterValue_type;
      typedef ::xsd::cxx::tree::traits< ParameterValue_type, wchar_t > ParameterValue_traits;

      const ParameterValue_type&
      ParameterValue () const;

      ParameterValue_type&
      ParameterValue ();

      void
      ParameterValue (const ParameterValue_type& x);

      void
      ParameterValue (::std::unique_ptr< ParameterValue_type > p);

      // Constructors.
      //
      ProcessParameterType ();

      ProcessParameterType (const ParameterType_type&,
                            const ParameterValue_type&);

      ProcessParameterType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ProcessParameterType (const ProcessParameterType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ProcessParameterType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProcessParameterType&
      operator= (const ProcessParameterType& x);

      virtual 
      ~ProcessParameterType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ParameterType_type > ParameterType_;
      ::xsd::cxx::tree::one< ParameterValue_type > ParameterValue_;
    };

    class QIF30_SYMBOL_DECL ProcessParametersType: public ::xml_schema::type
    {
      public:
      // Parameter
      //
      typedef ::xsd::qif30::ProcessParameterType Parameter_type;
      typedef ::xsd::cxx::tree::sequence< Parameter_type > Parameter_sequence;
      typedef xsd::cxx::tree::sequence< Parameter_type >::iterator Parameter_iterator;
      typedef xsd::cxx::tree::sequence< Parameter_type >::const_iterator Parameter_const_iterator;
      typedef ::xsd::cxx::tree::traits< Parameter_type, wchar_t > Parameter_traits;

      const Parameter_sequence&
      Parameter () const;

      Parameter_sequence&
      Parameter ();

      void
      Parameter (const Parameter_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      ProcessParametersType ();

      ProcessParametersType (const n_type&);

      ProcessParametersType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      ProcessParametersType (const ProcessParametersType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual ProcessParametersType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProcessParametersType&
      operator= (const ProcessParametersType& x);

      virtual 
      ~ProcessParametersType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Parameter_sequence Parameter_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL ManufacturingProcessTraceabilityType: public ::xml_schema::type
    {
      public:
      // Attributes
      //
      typedef ::xsd::qif30::AttributesType Attributes_type;
      typedef ::xsd::cxx::tree::optional< Attributes_type > Attributes_optional;
      typedef ::xsd::cxx::tree::traits< Attributes_type, wchar_t > Attributes_traits;

      const Attributes_optional&
      Attributes () const;

      Attributes_optional&
      Attributes ();

      void
      Attributes (const Attributes_type& x);

      void
      Attributes (const Attributes_optional& x);

      void
      Attributes (::std::unique_ptr< Attributes_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, wchar_t > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::unique_ptr< Description_type > p);

      // Job
      //
      typedef ::xml_schema::string Job_type;
      typedef ::xsd::cxx::tree::optional< Job_type > Job_optional;
      typedef ::xsd::cxx::tree::traits< Job_type, wchar_t > Job_traits;

      const Job_optional&
      Job () const;

      Job_optional&
      Job ();

      void
      Job (const Job_type& x);

      void
      Job (const Job_optional& x);

      void
      Job (::std::unique_ptr< Job_type > p);

      // Revision
      //
      typedef ::xml_schema::string Revision_type;
      typedef ::xsd::cxx::tree::optional< Revision_type > Revision_optional;
      typedef ::xsd::cxx::tree::traits< Revision_type, wchar_t > Revision_traits;

      const Revision_optional&
      Revision () const;

      Revision_optional&
      Revision ();

      void
      Revision (const Revision_type& x);

      void
      Revision (const Revision_optional& x);

      void
      Revision (::std::unique_ptr< Revision_type > p);

      // PreviousOperationId
      //
      typedef ::xsd::qif30::QIFReferenceType PreviousOperationId_type;
      typedef ::xsd::cxx::tree::optional< PreviousOperationId_type > PreviousOperationId_optional;
      typedef ::xsd::cxx::tree::traits< PreviousOperationId_type, wchar_t > PreviousOperationId_traits;

      const PreviousOperationId_optional&
      PreviousOperationId () const;

      PreviousOperationId_optional&
      PreviousOperationId ();

      void
      PreviousOperationId (const PreviousOperationId_type& x);

      void
      PreviousOperationId (const PreviousOperationId_optional& x);

      void
      PreviousOperationId (::std::unique_ptr< PreviousOperationId_type > p);

      // Path
      //
      typedef ::xml_schema::string Path_type;
      typedef ::xsd::cxx::tree::optional< Path_type > Path_optional;
      typedef ::xsd::cxx::tree::traits< Path_type, wchar_t > Path_traits;

      const Path_optional&
      Path () const;

      Path_optional&
      Path ();

      void
      Path (const Path_type& x);

      void
      Path (const Path_optional& x);

      void
      Path (::std::unique_ptr< Path_type > p);

      // MachineManufacturerName
      //
      typedef ::xml_schema::string MachineManufacturerName_type;
      typedef ::xsd::cxx::tree::optional< MachineManufacturerName_type > MachineManufacturerName_optional;
      typedef ::xsd::cxx::tree::traits< MachineManufacturerName_type, wchar_t > MachineManufacturerName_traits;

      const MachineManufacturerName_optional&
      MachineManufacturerName () const;

      MachineManufacturerName_optional&
      MachineManufacturerName ();

      void
      MachineManufacturerName (const MachineManufacturerName_type& x);

      void
      MachineManufacturerName (const MachineManufacturerName_optional& x);

      void
      MachineManufacturerName (::std::unique_ptr< MachineManufacturerName_type > p);

      // MachineIdentifier
      //
      typedef ::xml_schema::string MachineIdentifier_type;
      typedef ::xsd::cxx::tree::optional< MachineIdentifier_type > MachineIdentifier_optional;
      typedef ::xsd::cxx::tree::traits< MachineIdentifier_type, wchar_t > MachineIdentifier_traits;

      const MachineIdentifier_optional&
      MachineIdentifier () const;

      MachineIdentifier_optional&
      MachineIdentifier ();

      void
      MachineIdentifier (const MachineIdentifier_type& x);

      void
      MachineIdentifier (const MachineIdentifier_optional& x);

      void
      MachineIdentifier (::std::unique_ptr< MachineIdentifier_type > p);

      // OperatorIdentifier
      //
      typedef ::xml_schema::string OperatorIdentifier_type;
      typedef ::xsd::cxx::tree::optional< OperatorIdentifier_type > OperatorIdentifier_optional;
      typedef ::xsd::cxx::tree::traits< OperatorIdentifier_type, wchar_t > OperatorIdentifier_traits;

      const OperatorIdentifier_optional&
      OperatorIdentifier () const;

      OperatorIdentifier_optional&
      OperatorIdentifier ();

      void
      OperatorIdentifier (const OperatorIdentifier_type& x);

      void
      OperatorIdentifier (const OperatorIdentifier_optional& x);

      void
      OperatorIdentifier (::std::unique_ptr< OperatorIdentifier_type > p);

      // Shift
      //
      typedef ::xml_schema::string Shift_type;
      typedef ::xsd::cxx::tree::optional< Shift_type > Shift_optional;
      typedef ::xsd::cxx::tree::traits< Shift_type, wchar_t > Shift_traits;

      const Shift_optional&
      Shift () const;

      Shift_optional&
      Shift ();

      void
      Shift (const Shift_type& x);

      void
      Shift (const Shift_optional& x);

      void
      Shift (::std::unique_ptr< Shift_type > p);

      // Department
      //
      typedef ::xml_schema::string Department_type;
      typedef ::xsd::cxx::tree::optional< Department_type > Department_optional;
      typedef ::xsd::cxx::tree::traits< Department_type, wchar_t > Department_traits;

      const Department_optional&
      Department () const;

      Department_optional&
      Department ();

      void
      Department (const Department_type& x);

      void
      Department (const Department_optional& x);

      void
      Department (::std::unique_ptr< Department_type > p);

      // ResponsibilityIdentifier
      //
      typedef ::xml_schema::string ResponsibilityIdentifier_type;
      typedef ::xsd::cxx::tree::optional< ResponsibilityIdentifier_type > ResponsibilityIdentifier_optional;
      typedef ::xsd::cxx::tree::traits< ResponsibilityIdentifier_type, wchar_t > ResponsibilityIdentifier_traits;

      const ResponsibilityIdentifier_optional&
      ResponsibilityIdentifier () const;

      ResponsibilityIdentifier_optional&
      ResponsibilityIdentifier ();

      void
      ResponsibilityIdentifier (const ResponsibilityIdentifier_type& x);

      void
      ResponsibilityIdentifier (const ResponsibilityIdentifier_optional& x);

      void
      ResponsibilityIdentifier (::std::unique_ptr< ResponsibilityIdentifier_type > p);

      // PlantSector
      //
      typedef ::xml_schema::string PlantSector_type;
      typedef ::xsd::cxx::tree::optional< PlantSector_type > PlantSector_optional;
      typedef ::xsd::cxx::tree::traits< PlantSector_type, wchar_t > PlantSector_traits;

      const PlantSector_optional&
      PlantSector () const;

      PlantSector_optional&
      PlantSector ();

      void
      PlantSector (const PlantSector_type& x);

      void
      PlantSector (const PlantSector_optional& x);

      void
      PlantSector (::std::unique_ptr< PlantSector_type > p);

      // ProcessParameters
      //
      typedef ::xsd::qif30::ProcessParametersType ProcessParameters_type;
      typedef ::xsd::cxx::tree::optional< ProcessParameters_type > ProcessParameters_optional;
      typedef ::xsd::cxx::tree::traits< ProcessParameters_type, wchar_t > ProcessParameters_traits;

      const ProcessParameters_optional&
      ProcessParameters () const;

      ProcessParameters_optional&
      ProcessParameters ();

      void
      ProcessParameters (const ProcessParameters_type& x);

      void
      ProcessParameters (const ProcessParameters_optional& x);

      void
      ProcessParameters (::std::unique_ptr< ProcessParameters_type > p);

      // AssociatedTraceabilityId
      //
      typedef ::xsd::qif30::QIFReferenceType AssociatedTraceabilityId_type;
      typedef ::xsd::cxx::tree::optional< AssociatedTraceabilityId_type > AssociatedTraceabilityId_optional;
      typedef ::xsd::cxx::tree::traits< AssociatedTraceabilityId_type, wchar_t > AssociatedTraceabilityId_traits;

      const AssociatedTraceabilityId_optional&
      AssociatedTraceabilityId () const;

      AssociatedTraceabilityId_optional&
      AssociatedTraceabilityId ();

      void
      AssociatedTraceabilityId (const AssociatedTraceabilityId_type& x);

      void
      AssociatedTraceabilityId (const AssociatedTraceabilityId_optional& x);

      void
      AssociatedTraceabilityId (::std::unique_ptr< AssociatedTraceabilityId_type > p);

      // id
      //
      typedef ::xsd::qif30::QIFIdType id_type;
      typedef ::xsd::cxx::tree::traits< id_type, wchar_t > id_traits;

      const id_type&
      id () const;

      id_type&
      id ();

      void
      id (const id_type& x);

      void
      id (::std::unique_ptr< id_type > p);

      // Constructors.
      //
      ManufacturingProcessTraceabilityType ();

      ManufacturingProcessTraceabilityType (const id_type&);

      ManufacturingProcessTraceabilityType (const xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      ManufacturingProcessTraceabilityType (const ManufacturingProcessTraceabilityType& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

      virtual ManufacturingProcessTraceabilityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ManufacturingProcessTraceabilityType&
      operator= (const ManufacturingProcessTraceabilityType& x);

      virtual 
      ~ManufacturingProcessTraceabilityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attributes_optional Attributes_;
      Description_optional Description_;
      Job_optional Job_;
      Revision_optional Revision_;
      PreviousOperationId_optional PreviousOperationId_;
      Path_optional Path_;
      MachineManufacturerName_optional MachineManufacturerName_;
      MachineIdentifier_optional MachineIdentifier_;
      OperatorIdentifier_optional OperatorIdentifier_;
      Shift_optional Shift_;
      Department_optional Department_;
      ResponsibilityIdentifier_optional ResponsibilityIdentifier_;
      PlantSector_optional PlantSector_;
      ProcessParameters_optional ProcessParameters_;
      AssociatedTraceabilityId_optional AssociatedTraceabilityId_;
      ::xsd::cxx::tree::one< id_type > id_;
    };

    class QIF30_SYMBOL_DECL ManufacturingProcessTraceabilitiesType: public ::xml_schema::type
    {
      public:
      // ManufacturingProcessTraceability
      //
      typedef ::xsd::qif30::ManufacturingProcessTraceabilityType ManufacturingProcessTraceability_type;
      typedef ::xsd::cxx::tree::sequence< ManufacturingProcessTraceability_type > ManufacturingProcessTraceability_sequence;
      typedef xsd::cxx::tree::sequence< ManufacturingProcessTraceability_type >::iterator ManufacturingProcessTraceability_iterator;
      typedef xsd::cxx::tree::sequence< ManufacturingProcessTraceability_type >::const_iterator ManufacturingProcessTraceability_const_iterator;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessTraceability_type, wchar_t > ManufacturingProcessTraceability_traits;

      const ManufacturingProcessTraceability_sequence&
      ManufacturingProcessTraceability () const;

      ManufacturingProcessTraceability_sequence&
      ManufacturingProcessTraceability ();

      void
      ManufacturingProcessTraceability (const ManufacturingProcessTraceability_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      ManufacturingProcessTraceabilitiesType ();

      ManufacturingProcessTraceabilitiesType (const n_type&);

      ManufacturingProcessTraceabilitiesType (const xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      ManufacturingProcessTraceabilitiesType (const ManufacturingProcessTraceabilitiesType& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

      virtual ManufacturingProcessTraceabilitiesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ManufacturingProcessTraceabilitiesType&
      operator= (const ManufacturingProcessTraceabilitiesType& x);

      virtual 
      ~ManufacturingProcessTraceabilitiesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ManufacturingProcessTraceability_sequence ManufacturingProcessTraceability_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL ErrorsType: public ::xml_schema::type
    {
      public:
      // Error
      //
      typedef ::xml_schema::string Error_type;
      typedef ::xsd::cxx::tree::sequence< Error_type > Error_sequence;
      typedef xsd::cxx::tree::sequence< Error_type >::iterator Error_iterator;
      typedef xsd::cxx::tree::sequence< Error_type >::const_iterator Error_const_iterator;
      typedef ::xsd::cxx::tree::traits< Error_type, wchar_t > Error_traits;

      const Error_sequence&
      Error () const;

      Error_sequence&
      Error ();

      void
      Error (const Error_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      ErrorsType ();

      ErrorsType (const n_type&);

      ErrorsType (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      ErrorsType (const ErrorsType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual ErrorsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ErrorsType&
      operator= (const ErrorsType& x);

      virtual 
      ~ErrorsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Error_sequence Error_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL PartialInspectionType: public ::xml_schema::type
    {
      public:
      // BaselineProductNumber
      //
      typedef ::xml_schema::string BaselineProductNumber_type;
      typedef ::xsd::cxx::tree::traits< BaselineProductNumber_type, wchar_t > BaselineProductNumber_traits;

      const BaselineProductNumber_type&
      BaselineProductNumber () const;

      BaselineProductNumber_type&
      BaselineProductNumber ();

      void
      BaselineProductNumber (const BaselineProductNumber_type& x);

      void
      BaselineProductNumber (::std::unique_ptr< BaselineProductNumber_type > p);

      // BaselineProductVersion
      //
      typedef ::xml_schema::string BaselineProductVersion_type;
      typedef ::xsd::cxx::tree::optional< BaselineProductVersion_type > BaselineProductVersion_optional;
      typedef ::xsd::cxx::tree::traits< BaselineProductVersion_type, wchar_t > BaselineProductVersion_traits;

      const BaselineProductVersion_optional&
      BaselineProductVersion () const;

      BaselineProductVersion_optional&
      BaselineProductVersion ();

      void
      BaselineProductVersion (const BaselineProductVersion_type& x);

      void
      BaselineProductVersion (const BaselineProductVersion_optional& x);

      void
      BaselineProductVersion (::std::unique_ptr< BaselineProductVersion_type > p);

      // ReasonForPartialInspection
      //
      typedef ::xml_schema::string ReasonForPartialInspection_type;
      typedef ::xsd::cxx::tree::traits< ReasonForPartialInspection_type, wchar_t > ReasonForPartialInspection_traits;

      const ReasonForPartialInspection_type&
      ReasonForPartialInspection () const;

      ReasonForPartialInspection_type&
      ReasonForPartialInspection ();

      void
      ReasonForPartialInspection (const ReasonForPartialInspection_type& x);

      void
      ReasonForPartialInspection (::std::unique_ptr< ReasonForPartialInspection_type > p);

      // Constructors.
      //
      PartialInspectionType ();

      PartialInspectionType (const BaselineProductNumber_type&,
                             const ReasonForPartialInspection_type&);

      PartialInspectionType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      PartialInspectionType (const PartialInspectionType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual PartialInspectionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      PartialInspectionType&
      operator= (const PartialInspectionType& x);

      virtual 
      ~PartialInspectionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< BaselineProductNumber_type > BaselineProductNumber_;
      BaselineProductVersion_optional BaselineProductVersion_;
      ::xsd::cxx::tree::one< ReasonForPartialInspection_type > ReasonForPartialInspection_;
    };

    class QIF30_SYMBOL_DECL TimeDescriptionEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        INSPECTION_START,
        INSPECTION_END,
        INTERMEDIATE
      };

      TimeDescriptionEnumType ();

      TimeDescriptionEnumType (value v);

      TimeDescriptionEnumType (const wchar_t* v);

      TimeDescriptionEnumType (const ::std::wstring& v);

      TimeDescriptionEnumType (const ::xml_schema::nmtoken& v);

      TimeDescriptionEnumType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TimeDescriptionEnumType (const xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TimeDescriptionEnumType (const ::std::wstring& s,
                               const xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      TimeDescriptionEnumType (const TimeDescriptionEnumType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
      TimeDescriptionEnumType&
      operator= (const TimeDescriptionEnumType&) = default;
#endif

      virtual TimeDescriptionEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TimeDescriptionEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_TimeDescriptionEnumType_convert ();
      }

      protected:
      value
      _xsd_TimeDescriptionEnumType_convert () const;

      public:
      static const wchar_t* const _xsd_TimeDescriptionEnumType_literals_[3];
      static const value _xsd_TimeDescriptionEnumType_indexes_[3];
    };

    class QIF30_SYMBOL_DECL TimeDescriptionType: public ::xml_schema::type
    {
      public:
      // TimeDescriptionEnum
      //
      typedef ::xsd::qif30::TimeDescriptionEnumType TimeDescriptionEnum_type;
      typedef ::xsd::cxx::tree::optional< TimeDescriptionEnum_type > TimeDescriptionEnum_optional;
      typedef ::xsd::cxx::tree::traits< TimeDescriptionEnum_type, wchar_t > TimeDescriptionEnum_traits;

      const TimeDescriptionEnum_optional&
      TimeDescriptionEnum () const;

      TimeDescriptionEnum_optional&
      TimeDescriptionEnum ();

      void
      TimeDescriptionEnum (const TimeDescriptionEnum_type& x);

      void
      TimeDescriptionEnum (const TimeDescriptionEnum_optional& x);

      void
      TimeDescriptionEnum (::std::unique_ptr< TimeDescriptionEnum_type > p);

      // OtherTimeDescription
      //
      typedef ::xml_schema::string OtherTimeDescription_type;
      typedef ::xsd::cxx::tree::optional< OtherTimeDescription_type > OtherTimeDescription_optional;
      typedef ::xsd::cxx::tree::traits< OtherTimeDescription_type, wchar_t > OtherTimeDescription_traits;

      const OtherTimeDescription_optional&
      OtherTimeDescription () const;

      OtherTimeDescription_optional&
      OtherTimeDescription ();

      void
      OtherTimeDescription (const OtherTimeDescription_type& x);

      void
      OtherTimeDescription (const OtherTimeDescription_optional& x);

      void
      OtherTimeDescription (::std::unique_ptr< OtherTimeDescription_type > p);

      // Constructors.
      //
      TimeDescriptionType ();

      TimeDescriptionType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      TimeDescriptionType (const TimeDescriptionType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual TimeDescriptionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      TimeDescriptionType&
      operator= (const TimeDescriptionType& x);

      virtual 
      ~TimeDescriptionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      TimeDescriptionEnum_optional TimeDescriptionEnum_;
      OtherTimeDescription_optional OtherTimeDescription_;
    };

    class QIF30_SYMBOL_DECL InspectionModeEnumType: public ::xml_schema::string
    {
      public:
      enum value
      {
        FAI_Full,
        FAI_Partial,
        cxx_100Percent,
        APQP,
        KPC,
        PPAP
      };

      InspectionModeEnumType ();

      InspectionModeEnumType (value v);

      InspectionModeEnumType (const wchar_t* v);

      InspectionModeEnumType (const ::std::wstring& v);

      InspectionModeEnumType (const ::xml_schema::string& v);

      InspectionModeEnumType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      InspectionModeEnumType (const xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      InspectionModeEnumType (const ::std::wstring& s,
                              const xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      InspectionModeEnumType (const InspectionModeEnumType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
      InspectionModeEnumType&
      operator= (const InspectionModeEnumType&) = default;
#endif

      virtual InspectionModeEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionModeEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_InspectionModeEnumType_convert ();
      }

      protected:
      value
      _xsd_InspectionModeEnumType_convert () const;

      public:
      static const wchar_t* const _xsd_InspectionModeEnumType_literals_[6];
      static const value _xsd_InspectionModeEnumType_indexes_[6];
    };

    class QIF30_SYMBOL_DECL InspectionScopeEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        DETAIL,
        ASSEMBLY
      };

      InspectionScopeEnumType ();

      InspectionScopeEnumType (value v);

      InspectionScopeEnumType (const wchar_t* v);

      InspectionScopeEnumType (const ::std::wstring& v);

      InspectionScopeEnumType (const ::xml_schema::nmtoken& v);

      InspectionScopeEnumType (const xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      InspectionScopeEnumType (const xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      InspectionScopeEnumType (const ::std::wstring& s,
                               const xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      InspectionScopeEnumType (const InspectionScopeEnumType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
      InspectionScopeEnumType&
      operator= (const InspectionScopeEnumType&) = default;
#endif

      virtual InspectionScopeEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      InspectionScopeEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_InspectionScopeEnumType_convert ();
      }

      protected:
      value
      _xsd_InspectionScopeEnumType_convert () const;

      public:
      static const wchar_t* const _xsd_InspectionScopeEnumType_literals_[2];
      static const value _xsd_InspectionScopeEnumType_indexes_[2];
    };

    class QIF30_SYMBOL_DECL ValidationCountsType: public ::xml_schema::type
    {
      public:
      // ExternalQIFReferencesCount
      //
      typedef ::xml_schema::unsigned_int ExternalQIFReferencesCount_type;
      typedef ::xsd::cxx::tree::optional< ExternalQIFReferencesCount_type > ExternalQIFReferencesCount_optional;
      typedef ::xsd::cxx::tree::traits< ExternalQIFReferencesCount_type, wchar_t > ExternalQIFReferencesCount_traits;

      const ExternalQIFReferencesCount_optional&
      ExternalQIFReferencesCount () const;

      ExternalQIFReferencesCount_optional&
      ExternalQIFReferencesCount ();

      void
      ExternalQIFReferencesCount (const ExternalQIFReferencesCount_type& x);

      void
      ExternalQIFReferencesCount (const ExternalQIFReferencesCount_optional& x);

      // DatumDefinitionsCount
      //
      typedef ::xml_schema::unsigned_int DatumDefinitionsCount_type;
      typedef ::xsd::cxx::tree::optional< DatumDefinitionsCount_type > DatumDefinitionsCount_optional;
      typedef ::xsd::cxx::tree::traits< DatumDefinitionsCount_type, wchar_t > DatumDefinitionsCount_traits;

      const DatumDefinitionsCount_optional&
      DatumDefinitionsCount () const;

      DatumDefinitionsCount_optional&
      DatumDefinitionsCount ();

      void
      DatumDefinitionsCount (const DatumDefinitionsCount_type& x);

      void
      DatumDefinitionsCount (const DatumDefinitionsCount_optional& x);

      // DatumTargetDefinitionsCount
      //
      typedef ::xml_schema::unsigned_int DatumTargetDefinitionsCount_type;
      typedef ::xsd::cxx::tree::optional< DatumTargetDefinitionsCount_type > DatumTargetDefinitionsCount_optional;
      typedef ::xsd::cxx::tree::traits< DatumTargetDefinitionsCount_type, wchar_t > DatumTargetDefinitionsCount_traits;

      const DatumTargetDefinitionsCount_optional&
      DatumTargetDefinitionsCount () const;

      DatumTargetDefinitionsCount_optional&
      DatumTargetDefinitionsCount ();

      void
      DatumTargetDefinitionsCount (const DatumTargetDefinitionsCount_type& x);

      void
      DatumTargetDefinitionsCount (const DatumTargetDefinitionsCount_optional& x);

      // TransformsCount
      //
      typedef ::xml_schema::unsigned_int TransformsCount_type;
      typedef ::xsd::cxx::tree::optional< TransformsCount_type > TransformsCount_optional;
      typedef ::xsd::cxx::tree::traits< TransformsCount_type, wchar_t > TransformsCount_traits;

      const TransformsCount_optional&
      TransformsCount () const;

      TransformsCount_optional&
      TransformsCount ();

      void
      TransformsCount (const TransformsCount_type& x);

      void
      TransformsCount (const TransformsCount_optional& x);

      // CoordinateSystemsCount
      //
      typedef ::xml_schema::unsigned_int CoordinateSystemsCount_type;
      typedef ::xsd::cxx::tree::optional< CoordinateSystemsCount_type > CoordinateSystemsCount_optional;
      typedef ::xsd::cxx::tree::traits< CoordinateSystemsCount_type, wchar_t > CoordinateSystemsCount_traits;

      const CoordinateSystemsCount_optional&
      CoordinateSystemsCount () const;

      CoordinateSystemsCount_optional&
      CoordinateSystemsCount ();

      void
      CoordinateSystemsCount (const CoordinateSystemsCount_type& x);

      void
      CoordinateSystemsCount (const CoordinateSystemsCount_optional& x);

      // DatumReferenceFramesCount
      //
      typedef ::xml_schema::unsigned_int DatumReferenceFramesCount_type;
      typedef ::xsd::cxx::tree::optional< DatumReferenceFramesCount_type > DatumReferenceFramesCount_optional;
      typedef ::xsd::cxx::tree::traits< DatumReferenceFramesCount_type, wchar_t > DatumReferenceFramesCount_traits;

      const DatumReferenceFramesCount_optional&
      DatumReferenceFramesCount () const;

      DatumReferenceFramesCount_optional&
      DatumReferenceFramesCount ();

      void
      DatumReferenceFramesCount (const DatumReferenceFramesCount_type& x);

      void
      DatumReferenceFramesCount (const DatumReferenceFramesCount_optional& x);

      // MeasurementResourcesCount
      //
      typedef ::xml_schema::unsigned_int MeasurementResourcesCount_type;
      typedef ::xsd::cxx::tree::optional< MeasurementResourcesCount_type > MeasurementResourcesCount_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementResourcesCount_type, wchar_t > MeasurementResourcesCount_traits;

      const MeasurementResourcesCount_optional&
      MeasurementResourcesCount () const;

      MeasurementResourcesCount_optional&
      MeasurementResourcesCount ();

      void
      MeasurementResourcesCount (const MeasurementResourcesCount_type& x);

      void
      MeasurementResourcesCount (const MeasurementResourcesCount_optional& x);

      // ThreadSpecificationsCount
      //
      typedef ::xml_schema::unsigned_int ThreadSpecificationsCount_type;
      typedef ::xsd::cxx::tree::optional< ThreadSpecificationsCount_type > ThreadSpecificationsCount_optional;
      typedef ::xsd::cxx::tree::traits< ThreadSpecificationsCount_type, wchar_t > ThreadSpecificationsCount_traits;

      const ThreadSpecificationsCount_optional&
      ThreadSpecificationsCount () const;

      ThreadSpecificationsCount_optional&
      ThreadSpecificationsCount ();

      void
      ThreadSpecificationsCount (const ThreadSpecificationsCount_type& x);

      void
      ThreadSpecificationsCount (const ThreadSpecificationsCount_optional& x);

      // ProductGeometrySetCount
      //
      typedef ::xml_schema::unsigned_int ProductGeometrySetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductGeometrySetCount_type > ProductGeometrySetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductGeometrySetCount_type, wchar_t > ProductGeometrySetCount_traits;

      const ProductGeometrySetCount_optional&
      ProductGeometrySetCount () const;

      ProductGeometrySetCount_optional&
      ProductGeometrySetCount ();

      void
      ProductGeometrySetCount (const ProductGeometrySetCount_type& x);

      void
      ProductGeometrySetCount (const ProductGeometrySetCount_optional& x);

      // ProductTopologySetCount
      //
      typedef ::xml_schema::unsigned_int ProductTopologySetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductTopologySetCount_type > ProductTopologySetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductTopologySetCount_type, wchar_t > ProductTopologySetCount_traits;

      const ProductTopologySetCount_optional&
      ProductTopologySetCount () const;

      ProductTopologySetCount_optional&
      ProductTopologySetCount ();

      void
      ProductTopologySetCount (const ProductTopologySetCount_type& x);

      void
      ProductTopologySetCount (const ProductTopologySetCount_optional& x);

      // ProductNoteSetCount
      //
      typedef ::xml_schema::unsigned_int ProductNoteSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductNoteSetCount_type > ProductNoteSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductNoteSetCount_type, wchar_t > ProductNoteSetCount_traits;

      const ProductNoteSetCount_optional&
      ProductNoteSetCount () const;

      ProductNoteSetCount_optional&
      ProductNoteSetCount ();

      void
      ProductNoteSetCount (const ProductNoteSetCount_type& x);

      void
      ProductNoteSetCount (const ProductNoteSetCount_optional& x);

      // ProductNoteFlagSetCount
      //
      typedef ::xml_schema::unsigned_int ProductNoteFlagSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductNoteFlagSetCount_type > ProductNoteFlagSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductNoteFlagSetCount_type, wchar_t > ProductNoteFlagSetCount_traits;

      const ProductNoteFlagSetCount_optional&
      ProductNoteFlagSetCount () const;

      ProductNoteFlagSetCount_optional&
      ProductNoteFlagSetCount ();

      void
      ProductNoteFlagSetCount (const ProductNoteFlagSetCount_type& x);

      void
      ProductNoteFlagSetCount (const ProductNoteFlagSetCount_optional& x);

      // ProductPartNoteSetCount
      //
      typedef ::xml_schema::unsigned_int ProductPartNoteSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductPartNoteSetCount_type > ProductPartNoteSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductPartNoteSetCount_type, wchar_t > ProductPartNoteSetCount_traits;

      const ProductPartNoteSetCount_optional&
      ProductPartNoteSetCount () const;

      ProductPartNoteSetCount_optional&
      ProductPartNoteSetCount ();

      void
      ProductPartNoteSetCount (const ProductPartNoteSetCount_type& x);

      void
      ProductPartNoteSetCount (const ProductPartNoteSetCount_optional& x);

      // ProductViewSetCount
      //
      typedef ::xml_schema::unsigned_int ProductViewSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductViewSetCount_type > ProductViewSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductViewSetCount_type, wchar_t > ProductViewSetCount_traits;

      const ProductViewSetCount_optional&
      ProductViewSetCount () const;

      ProductViewSetCount_optional&
      ProductViewSetCount ();

      void
      ProductViewSetCount (const ProductViewSetCount_type& x);

      void
      ProductViewSetCount (const ProductViewSetCount_optional& x);

      // ProductLayerSetCount
      //
      typedef ::xml_schema::unsigned_int ProductLayerSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductLayerSetCount_type > ProductLayerSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductLayerSetCount_type, wchar_t > ProductLayerSetCount_traits;

      const ProductLayerSetCount_optional&
      ProductLayerSetCount () const;

      ProductLayerSetCount_optional&
      ProductLayerSetCount ();

      void
      ProductLayerSetCount (const ProductLayerSetCount_type& x);

      void
      ProductLayerSetCount (const ProductLayerSetCount_optional& x);

      // ProductCoordinateSystemSetCount
      //
      typedef ::xml_schema::unsigned_int ProductCoordinateSystemSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductCoordinateSystemSetCount_type > ProductCoordinateSystemSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductCoordinateSystemSetCount_type, wchar_t > ProductCoordinateSystemSetCount_traits;

      const ProductCoordinateSystemSetCount_optional&
      ProductCoordinateSystemSetCount () const;

      ProductCoordinateSystemSetCount_optional&
      ProductCoordinateSystemSetCount ();

      void
      ProductCoordinateSystemSetCount (const ProductCoordinateSystemSetCount_type& x);

      void
      ProductCoordinateSystemSetCount (const ProductCoordinateSystemSetCount_optional& x);

      // ProductVisualizationSetCount
      //
      typedef ::xml_schema::unsigned_int ProductVisualizationSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductVisualizationSetCount_type > ProductVisualizationSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductVisualizationSetCount_type, wchar_t > ProductVisualizationSetCount_traits;

      const ProductVisualizationSetCount_optional&
      ProductVisualizationSetCount () const;

      ProductVisualizationSetCount_optional&
      ProductVisualizationSetCount ();

      void
      ProductVisualizationSetCount (const ProductVisualizationSetCount_type& x);

      void
      ProductVisualizationSetCount (const ProductVisualizationSetCount_optional& x);

      // ProductAuxiliarySetCount
      //
      typedef ::xml_schema::unsigned_int ProductAuxiliarySetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductAuxiliarySetCount_type > ProductAuxiliarySetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductAuxiliarySetCount_type, wchar_t > ProductAuxiliarySetCount_traits;

      const ProductAuxiliarySetCount_optional&
      ProductAuxiliarySetCount () const;

      ProductAuxiliarySetCount_optional&
      ProductAuxiliarySetCount ();

      void
      ProductAuxiliarySetCount (const ProductAuxiliarySetCount_type& x);

      void
      ProductAuxiliarySetCount (const ProductAuxiliarySetCount_optional& x);

      // ProductPartSetCount
      //
      typedef ::xml_schema::unsigned_int ProductPartSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductPartSetCount_type > ProductPartSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductPartSetCount_type, wchar_t > ProductPartSetCount_traits;

      const ProductPartSetCount_optional&
      ProductPartSetCount () const;

      ProductPartSetCount_optional&
      ProductPartSetCount ();

      void
      ProductPartSetCount (const ProductPartSetCount_type& x);

      void
      ProductPartSetCount (const ProductPartSetCount_optional& x);

      // ProductAssemblySetCount
      //
      typedef ::xml_schema::unsigned_int ProductAssemblySetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductAssemblySetCount_type > ProductAssemblySetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductAssemblySetCount_type, wchar_t > ProductAssemblySetCount_traits;

      const ProductAssemblySetCount_optional&
      ProductAssemblySetCount () const;

      ProductAssemblySetCount_optional&
      ProductAssemblySetCount ();

      void
      ProductAssemblySetCount (const ProductAssemblySetCount_type& x);

      void
      ProductAssemblySetCount (const ProductAssemblySetCount_optional& x);

      // ProductComponentSetCount
      //
      typedef ::xml_schema::unsigned_int ProductComponentSetCount_type;
      typedef ::xsd::cxx::tree::optional< ProductComponentSetCount_type > ProductComponentSetCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductComponentSetCount_type, wchar_t > ProductComponentSetCount_traits;

      const ProductComponentSetCount_optional&
      ProductComponentSetCount () const;

      ProductComponentSetCount_optional&
      ProductComponentSetCount ();

      void
      ProductComponentSetCount (const ProductComponentSetCount_type& x);

      void
      ProductComponentSetCount (const ProductComponentSetCount_optional& x);

      // ProductAsmPathsCount
      //
      typedef ::xml_schema::unsigned_int ProductAsmPathsCount_type;
      typedef ::xsd::cxx::tree::optional< ProductAsmPathsCount_type > ProductAsmPathsCount_optional;
      typedef ::xsd::cxx::tree::traits< ProductAsmPathsCount_type, wchar_t > ProductAsmPathsCount_traits;

      const ProductAsmPathsCount_optional&
      ProductAsmPathsCount () const;

      ProductAsmPathsCount_optional&
      ProductAsmPathsCount ();

      void
      ProductAsmPathsCount (const ProductAsmPathsCount_type& x);

      void
      ProductAsmPathsCount (const ProductAsmPathsCount_optional& x);

      // FeatureDefinitionsCount
      //
      typedef ::xml_schema::unsigned_int FeatureDefinitionsCount_type;
      typedef ::xsd::cxx::tree::optional< FeatureDefinitionsCount_type > FeatureDefinitionsCount_optional;
      typedef ::xsd::cxx::tree::traits< FeatureDefinitionsCount_type, wchar_t > FeatureDefinitionsCount_traits;

      const FeatureDefinitionsCount_optional&
      FeatureDefinitionsCount () const;

      FeatureDefinitionsCount_optional&
      FeatureDefinitionsCount ();

      void
      FeatureDefinitionsCount (const FeatureDefinitionsCount_type& x);

      void
      FeatureDefinitionsCount (const FeatureDefinitionsCount_optional& x);

      // FeatureNominalsCount
      //
      typedef ::xml_schema::unsigned_int FeatureNominalsCount_type;
      typedef ::xsd::cxx::tree::optional< FeatureNominalsCount_type > FeatureNominalsCount_optional;
      typedef ::xsd::cxx::tree::traits< FeatureNominalsCount_type, wchar_t > FeatureNominalsCount_traits;

      const FeatureNominalsCount_optional&
      FeatureNominalsCount () const;

      FeatureNominalsCount_optional&
      FeatureNominalsCount ();

      void
      FeatureNominalsCount (const FeatureNominalsCount_type& x);

      void
      FeatureNominalsCount (const FeatureNominalsCount_optional& x);

      // FeatureItemsCount
      //
      typedef ::xml_schema::unsigned_int FeatureItemsCount_type;
      typedef ::xsd::cxx::tree::optional< FeatureItemsCount_type > FeatureItemsCount_optional;
      typedef ::xsd::cxx::tree::traits< FeatureItemsCount_type, wchar_t > FeatureItemsCount_traits;

      const FeatureItemsCount_optional&
      FeatureItemsCount () const;

      FeatureItemsCount_optional&
      FeatureItemsCount ();

      void
      FeatureItemsCount (const FeatureItemsCount_type& x);

      void
      FeatureItemsCount (const FeatureItemsCount_optional& x);

      // CharacteristicDefinitionsCount
      //
      typedef ::xml_schema::unsigned_int CharacteristicDefinitionsCount_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicDefinitionsCount_type > CharacteristicDefinitionsCount_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicDefinitionsCount_type, wchar_t > CharacteristicDefinitionsCount_traits;

      const CharacteristicDefinitionsCount_optional&
      CharacteristicDefinitionsCount () const;

      CharacteristicDefinitionsCount_optional&
      CharacteristicDefinitionsCount ();

      void
      CharacteristicDefinitionsCount (const CharacteristicDefinitionsCount_type& x);

      void
      CharacteristicDefinitionsCount (const CharacteristicDefinitionsCount_optional& x);

      // DefaultCharacteristicDefinitionsCount
      //
      typedef ::xml_schema::unsigned_int DefaultCharacteristicDefinitionsCount_type;
      typedef ::xsd::cxx::tree::optional< DefaultCharacteristicDefinitionsCount_type > DefaultCharacteristicDefinitionsCount_optional;
      typedef ::xsd::cxx::tree::traits< DefaultCharacteristicDefinitionsCount_type, wchar_t > DefaultCharacteristicDefinitionsCount_traits;

      const DefaultCharacteristicDefinitionsCount_optional&
      DefaultCharacteristicDefinitionsCount () const;

      DefaultCharacteristicDefinitionsCount_optional&
      DefaultCharacteristicDefinitionsCount ();

      void
      DefaultCharacteristicDefinitionsCount (const DefaultCharacteristicDefinitionsCount_type& x);

      void
      DefaultCharacteristicDefinitionsCount (const DefaultCharacteristicDefinitionsCount_optional& x);

      // DefaultToleranceDefinitionsCount
      //
      typedef ::xml_schema::unsigned_int DefaultToleranceDefinitionsCount_type;
      typedef ::xsd::cxx::tree::optional< DefaultToleranceDefinitionsCount_type > DefaultToleranceDefinitionsCount_optional;
      typedef ::xsd::cxx::tree::traits< DefaultToleranceDefinitionsCount_type, wchar_t > DefaultToleranceDefinitionsCount_traits;

      const DefaultToleranceDefinitionsCount_optional&
      DefaultToleranceDefinitionsCount () const;

      DefaultToleranceDefinitionsCount_optional&
      DefaultToleranceDefinitionsCount ();

      void
      DefaultToleranceDefinitionsCount (const DefaultToleranceDefinitionsCount_type& x);

      void
      DefaultToleranceDefinitionsCount (const DefaultToleranceDefinitionsCount_optional& x);

      // CharacteristicNominalsCount
      //
      typedef ::xml_schema::unsigned_int CharacteristicNominalsCount_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicNominalsCount_type > CharacteristicNominalsCount_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicNominalsCount_type, wchar_t > CharacteristicNominalsCount_traits;

      const CharacteristicNominalsCount_optional&
      CharacteristicNominalsCount () const;

      CharacteristicNominalsCount_optional&
      CharacteristicNominalsCount ();

      void
      CharacteristicNominalsCount (const CharacteristicNominalsCount_type& x);

      void
      CharacteristicNominalsCount (const CharacteristicNominalsCount_optional& x);

      // CharacteristicItemsCount
      //
      typedef ::xml_schema::unsigned_int CharacteristicItemsCount_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicItemsCount_type > CharacteristicItemsCount_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicItemsCount_type, wchar_t > CharacteristicItemsCount_traits;

      const CharacteristicItemsCount_optional&
      CharacteristicItemsCount () const;

      CharacteristicItemsCount_optional&
      CharacteristicItemsCount ();

      void
      CharacteristicItemsCount (const CharacteristicItemsCount_type& x);

      void
      CharacteristicItemsCount (const CharacteristicItemsCount_optional& x);

      // CharacteristicGroupsCount
      //
      typedef ::xml_schema::unsigned_int CharacteristicGroupsCount_type;
      typedef ::xsd::cxx::tree::optional< CharacteristicGroupsCount_type > CharacteristicGroupsCount_optional;
      typedef ::xsd::cxx::tree::traits< CharacteristicGroupsCount_type, wchar_t > CharacteristicGroupsCount_traits;

      const CharacteristicGroupsCount_optional&
      CharacteristicGroupsCount () const;

      CharacteristicGroupsCount_optional&
      CharacteristicGroupsCount ();

      void
      CharacteristicGroupsCount (const CharacteristicGroupsCount_type& x);

      void
      CharacteristicGroupsCount (const CharacteristicGroupsCount_optional& x);

      // WeldSymbolSetCount
      //
      typedef ::xml_schema::unsigned_int WeldSymbolSetCount_type;
      typedef ::xsd::cxx::tree::optional< WeldSymbolSetCount_type > WeldSymbolSetCount_optional;
      typedef ::xsd::cxx::tree::traits< WeldSymbolSetCount_type, wchar_t > WeldSymbolSetCount_traits;

      const WeldSymbolSetCount_optional&
      WeldSymbolSetCount () const;

      WeldSymbolSetCount_optional&
      WeldSymbolSetCount ();

      void
      WeldSymbolSetCount (const WeldSymbolSetCount_type& x);

      void
      WeldSymbolSetCount (const WeldSymbolSetCount_optional& x);

      // MeasurementsPlanPresent
      //
      typedef ::xml_schema::boolean MeasurementsPlanPresent_type;
      typedef ::xsd::cxx::tree::optional< MeasurementsPlanPresent_type > MeasurementsPlanPresent_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementsPlanPresent_type, wchar_t > MeasurementsPlanPresent_traits;

      const MeasurementsPlanPresent_optional&
      MeasurementsPlanPresent () const;

      MeasurementsPlanPresent_optional&
      MeasurementsPlanPresent ();

      void
      MeasurementsPlanPresent (const MeasurementsPlanPresent_type& x);

      void
      MeasurementsPlanPresent (const MeasurementsPlanPresent_optional& x);

      // MeasurementsResultsCount
      //
      typedef ::xml_schema::unsigned_int MeasurementsResultsCount_type;
      typedef ::xsd::cxx::tree::optional< MeasurementsResultsCount_type > MeasurementsResultsCount_optional;
      typedef ::xsd::cxx::tree::traits< MeasurementsResultsCount_type, wchar_t > MeasurementsResultsCount_traits;

      const MeasurementsResultsCount_optional&
      MeasurementsResultsCount () const;

      MeasurementsResultsCount_optional&
      MeasurementsResultsCount ();

      void
      MeasurementsResultsCount (const MeasurementsResultsCount_type& x);

      void
      MeasurementsResultsCount (const MeasurementsResultsCount_optional& x);

      // StatisticalStudyPlansCount
      //
      typedef ::xml_schema::unsigned_int StatisticalStudyPlansCount_type;
      typedef ::xsd::cxx::tree::optional< StatisticalStudyPlansCount_type > StatisticalStudyPlansCount_optional;
      typedef ::xsd::cxx::tree::traits< StatisticalStudyPlansCount_type, wchar_t > StatisticalStudyPlansCount_traits;

      const StatisticalStudyPlansCount_optional&
      StatisticalStudyPlansCount () const;

      StatisticalStudyPlansCount_optional&
      StatisticalStudyPlansCount ();

      void
      StatisticalStudyPlansCount (const StatisticalStudyPlansCount_type& x);

      void
      StatisticalStudyPlansCount (const StatisticalStudyPlansCount_optional& x);

      // StatisticalStudiesResultsCount
      //
      typedef ::xml_schema::unsigned_int StatisticalStudiesResultsCount_type;
      typedef ::xsd::cxx::tree::optional< StatisticalStudiesResultsCount_type > StatisticalStudiesResultsCount_optional;
      typedef ::xsd::cxx::tree::traits< StatisticalStudiesResultsCount_type, wchar_t > StatisticalStudiesResultsCount_traits;

      const StatisticalStudiesResultsCount_optional&
      StatisticalStudiesResultsCount () const;

      StatisticalStudiesResultsCount_optional&
      StatisticalStudiesResultsCount ();

      void
      StatisticalStudiesResultsCount (const StatisticalStudiesResultsCount_type& x);

      void
      StatisticalStudiesResultsCount (const StatisticalStudiesResultsCount_optional& x);

      // CorrectiveActionPlansCount
      //
      typedef ::xml_schema::unsigned_int CorrectiveActionPlansCount_type;
      typedef ::xsd::cxx::tree::optional< CorrectiveActionPlansCount_type > CorrectiveActionPlansCount_optional;
      typedef ::xsd::cxx::tree::traits< CorrectiveActionPlansCount_type, wchar_t > CorrectiveActionPlansCount_traits;

      const CorrectiveActionPlansCount_optional&
      CorrectiveActionPlansCount () const;

      CorrectiveActionPlansCount_optional&
      CorrectiveActionPlansCount ();

      void
      CorrectiveActionPlansCount (const CorrectiveActionPlansCount_type& x);

      void
      CorrectiveActionPlansCount (const CorrectiveActionPlansCount_optional& x);

      // ManufacturingProcessTraceabilitiesCount
      //
      typedef ::xml_schema::unsigned_int ManufacturingProcessTraceabilitiesCount_type;
      typedef ::xsd::cxx::tree::optional< ManufacturingProcessTraceabilitiesCount_type > ManufacturingProcessTraceabilitiesCount_optional;
      typedef ::xsd::cxx::tree::traits< ManufacturingProcessTraceabilitiesCount_type, wchar_t > ManufacturingProcessTraceabilitiesCount_traits;

      const ManufacturingProcessTraceabilitiesCount_optional&
      ManufacturingProcessTraceabilitiesCount () const;

      ManufacturingProcessTraceabilitiesCount_optional&
      ManufacturingProcessTraceabilitiesCount ();

      void
      ManufacturingProcessTraceabilitiesCount (const ManufacturingProcessTraceabilitiesCount_type& x);

      void
      ManufacturingProcessTraceabilitiesCount (const ManufacturingProcessTraceabilitiesCount_optional& x);

      // FeatureRulesCount
      //
      typedef ::xml_schema::unsigned_int FeatureRulesCount_type;
      typedef ::xsd::cxx::tree::optional< FeatureRulesCount_type > FeatureRulesCount_optional;
      typedef ::xsd::cxx::tree::traits< FeatureRulesCount_type, wchar_t > FeatureRulesCount_traits;

      const FeatureRulesCount_optional&
      FeatureRulesCount () const;

      FeatureRulesCount_optional&
      FeatureRulesCount ();

      void
      FeatureRulesCount (const FeatureRulesCount_type& x);

      void
      FeatureRulesCount (const FeatureRulesCount_optional& x);

      // DMESelectionRulesCount
      //
      typedef ::xml_schema::unsigned_int DMESelectionRulesCount_type;
      typedef ::xsd::cxx::tree::optional< DMESelectionRulesCount_type > DMESelectionRulesCount_optional;
      typedef ::xsd::cxx::tree::traits< DMESelectionRulesCount_type, wchar_t > DMESelectionRulesCount_traits;

      const DMESelectionRulesCount_optional&
      DMESelectionRulesCount () const;

      DMESelectionRulesCount_optional&
      DMESelectionRulesCount ();

      void
      DMESelectionRulesCount (const DMESelectionRulesCount_type& x);

      void
      DMESelectionRulesCount (const DMESelectionRulesCount_optional& x);

      // SignaturePresent
      //
      typedef ::xml_schema::boolean SignaturePresent_type;
      typedef ::xsd::cxx::tree::optional< SignaturePresent_type > SignaturePresent_optional;
      typedef ::xsd::cxx::tree::traits< SignaturePresent_type, wchar_t > SignaturePresent_traits;

      const SignaturePresent_optional&
      SignaturePresent () const;

      SignaturePresent_optional&
      SignaturePresent ();

      void
      SignaturePresent (const SignaturePresent_type& x);

      void
      SignaturePresent (const SignaturePresent_optional& x);

      // Constructors.
      //
      ValidationCountsType ();

      ValidationCountsType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ValidationCountsType (const ValidationCountsType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ValidationCountsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ValidationCountsType&
      operator= (const ValidationCountsType& x);

      virtual 
      ~ValidationCountsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ExternalQIFReferencesCount_optional ExternalQIFReferencesCount_;
      DatumDefinitionsCount_optional DatumDefinitionsCount_;
      DatumTargetDefinitionsCount_optional DatumTargetDefinitionsCount_;
      TransformsCount_optional TransformsCount_;
      CoordinateSystemsCount_optional CoordinateSystemsCount_;
      DatumReferenceFramesCount_optional DatumReferenceFramesCount_;
      MeasurementResourcesCount_optional MeasurementResourcesCount_;
      ThreadSpecificationsCount_optional ThreadSpecificationsCount_;
      ProductGeometrySetCount_optional ProductGeometrySetCount_;
      ProductTopologySetCount_optional ProductTopologySetCount_;
      ProductNoteSetCount_optional ProductNoteSetCount_;
      ProductNoteFlagSetCount_optional ProductNoteFlagSetCount_;
      ProductPartNoteSetCount_optional ProductPartNoteSetCount_;
      ProductViewSetCount_optional ProductViewSetCount_;
      ProductLayerSetCount_optional ProductLayerSetCount_;
      ProductCoordinateSystemSetCount_optional ProductCoordinateSystemSetCount_;
      ProductVisualizationSetCount_optional ProductVisualizationSetCount_;
      ProductAuxiliarySetCount_optional ProductAuxiliarySetCount_;
      ProductPartSetCount_optional ProductPartSetCount_;
      ProductAssemblySetCount_optional ProductAssemblySetCount_;
      ProductComponentSetCount_optional ProductComponentSetCount_;
      ProductAsmPathsCount_optional ProductAsmPathsCount_;
      FeatureDefinitionsCount_optional FeatureDefinitionsCount_;
      FeatureNominalsCount_optional FeatureNominalsCount_;
      FeatureItemsCount_optional FeatureItemsCount_;
      CharacteristicDefinitionsCount_optional CharacteristicDefinitionsCount_;
      DefaultCharacteristicDefinitionsCount_optional DefaultCharacteristicDefinitionsCount_;
      DefaultToleranceDefinitionsCount_optional DefaultToleranceDefinitionsCount_;
      CharacteristicNominalsCount_optional CharacteristicNominalsCount_;
      CharacteristicItemsCount_optional CharacteristicItemsCount_;
      CharacteristicGroupsCount_optional CharacteristicGroupsCount_;
      WeldSymbolSetCount_optional WeldSymbolSetCount_;
      MeasurementsPlanPresent_optional MeasurementsPlanPresent_;
      MeasurementsResultsCount_optional MeasurementsResultsCount_;
      StatisticalStudyPlansCount_optional StatisticalStudyPlansCount_;
      StatisticalStudiesResultsCount_optional StatisticalStudiesResultsCount_;
      CorrectiveActionPlansCount_optional CorrectiveActionPlansCount_;
      ManufacturingProcessTraceabilitiesCount_optional ManufacturingProcessTraceabilitiesCount_;
      FeatureRulesCount_optional FeatureRulesCount_;
      DMESelectionRulesCount_optional DMESelectionRulesCount_;
      SignaturePresent_optional SignaturePresent_;
    };

    class QIF30_SYMBOL_DECL ProductDataQualityAreaEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        OVERALL,
        PRODUCT_GEOMETRIC_DATA,
        PRODUCT_MANUFACTURING_INFORMATION,
        BUSINESS_PRACTICE,
        DESIGN_PRACTICE,
        DERIVATIVE_COMPARE,
        UNDEFINED
      };

      ProductDataQualityAreaEnumType ();

      ProductDataQualityAreaEnumType (value v);

      ProductDataQualityAreaEnumType (const wchar_t* v);

      ProductDataQualityAreaEnumType (const ::std::wstring& v);

      ProductDataQualityAreaEnumType (const ::xml_schema::nmtoken& v);

      ProductDataQualityAreaEnumType (const xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ProductDataQualityAreaEnumType (const xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ProductDataQualityAreaEnumType (const ::std::wstring& s,
                                      const xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      ProductDataQualityAreaEnumType (const ProductDataQualityAreaEnumType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
      ProductDataQualityAreaEnumType&
      operator= (const ProductDataQualityAreaEnumType&) = default;
#endif

      virtual ProductDataQualityAreaEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductDataQualityAreaEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ProductDataQualityAreaEnumType_convert ();
      }

      protected:
      value
      _xsd_ProductDataQualityAreaEnumType_convert () const;

      public:
      static const wchar_t* const _xsd_ProductDataQualityAreaEnumType_literals_[7];
      static const value _xsd_ProductDataQualityAreaEnumType_indexes_[7];
    };

    class QIF30_SYMBOL_DECL ProductDataQualityAreaType: public ::xml_schema::type
    {
      public:
      // AreaEnum
      //
      typedef ::xsd::qif30::ProductDataQualityAreaEnumType AreaEnum_type;
      typedef ::xsd::cxx::tree::optional< AreaEnum_type > AreaEnum_optional;
      typedef ::xsd::cxx::tree::traits< AreaEnum_type, wchar_t > AreaEnum_traits;

      const AreaEnum_optional&
      AreaEnum () const;

      AreaEnum_optional&
      AreaEnum ();

      void
      AreaEnum (const AreaEnum_type& x);

      void
      AreaEnum (const AreaEnum_optional& x);

      void
      AreaEnum (::std::unique_ptr< AreaEnum_type > p);

      // OtherArea
      //
      typedef ::xml_schema::string OtherArea_type;
      typedef ::xsd::cxx::tree::optional< OtherArea_type > OtherArea_optional;
      typedef ::xsd::cxx::tree::traits< OtherArea_type, wchar_t > OtherArea_traits;

      const OtherArea_optional&
      OtherArea () const;

      OtherArea_optional&
      OtherArea ();

      void
      OtherArea (const OtherArea_type& x);

      void
      OtherArea (const OtherArea_optional& x);

      void
      OtherArea (::std::unique_ptr< OtherArea_type > p);

      // Constructors.
      //
      ProductDataQualityAreaType ();

      ProductDataQualityAreaType (const xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ProductDataQualityAreaType (const ProductDataQualityAreaType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ProductDataQualityAreaType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductDataQualityAreaType&
      operator= (const ProductDataQualityAreaType& x);

      virtual 
      ~ProductDataQualityAreaType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AreaEnum_optional AreaEnum_;
      OtherArea_optional OtherArea_;
    };

    class QIF30_SYMBOL_DECL ProductDataQualityCheckType: public ::xml_schema::type
    {
      public:
      // Type
      //
      typedef ::xsd::qif30::ProductDataQualityAreaType Type_type;
      typedef ::xsd::cxx::tree::traits< Type_type, wchar_t > Type_traits;

      const Type_type&
      Type () const;

      Type_type&
      Type ();

      void
      Type (const Type_type& x);

      void
      Type (::std::unique_ptr< Type_type > p);

      // Description
      //
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::traits< Description_type, wchar_t > Description_traits;

      const Description_type&
      Description () const;

      Description_type&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (::std::unique_ptr< Description_type > p);

      // Requirements
      //
      typedef ::xml_schema::string Requirements_type;
      typedef ::xsd::cxx::tree::traits< Requirements_type, wchar_t > Requirements_traits;

      const Requirements_type&
      Requirements () const;

      Requirements_type&
      Requirements ();

      void
      Requirements (const Requirements_type& x);

      void
      Requirements (::std::unique_ptr< Requirements_type > p);

      // SourceOfRequiredness
      //
      typedef ::xml_schema::string SourceOfRequiredness_type;
      typedef ::xsd::cxx::tree::optional< SourceOfRequiredness_type > SourceOfRequiredness_optional;
      typedef ::xsd::cxx::tree::traits< SourceOfRequiredness_type, wchar_t > SourceOfRequiredness_traits;

      const SourceOfRequiredness_optional&
      SourceOfRequiredness () const;

      SourceOfRequiredness_optional&
      SourceOfRequiredness ();

      void
      SourceOfRequiredness (const SourceOfRequiredness_type& x);

      void
      SourceOfRequiredness (const SourceOfRequiredness_optional& x);

      void
      SourceOfRequiredness (::std::unique_ptr< SourceOfRequiredness_type > p);

      // ApplicationTool
      //
      typedef ::xsd::qif30::SoftwareType ApplicationTool_type;
      typedef ::xsd::cxx::tree::optional< ApplicationTool_type > ApplicationTool_optional;
      typedef ::xsd::cxx::tree::traits< ApplicationTool_type, wchar_t > ApplicationTool_traits;

      const ApplicationTool_optional&
      ApplicationTool () const;

      ApplicationTool_optional&
      ApplicationTool ();

      void
      ApplicationTool (const ApplicationTool_type& x);

      void
      ApplicationTool (const ApplicationTool_optional& x);

      void
      ApplicationTool (::std::unique_ptr< ApplicationTool_type > p);

      // XsltFile
      //
      typedef ::xml_schema::uri XsltFile_type;
      typedef ::xsd::cxx::tree::optional< XsltFile_type > XsltFile_optional;
      typedef ::xsd::cxx::tree::traits< XsltFile_type, wchar_t > XsltFile_traits;

      const XsltFile_optional&
      XsltFile () const;

      XsltFile_optional&
      XsltFile ();

      void
      XsltFile (const XsltFile_type& x);

      void
      XsltFile (const XsltFile_optional& x);

      void
      XsltFile (::std::unique_ptr< XsltFile_type > p);

      // ResultStatement
      //
      typedef ::xml_schema::string ResultStatement_type;
      typedef ::xsd::cxx::tree::traits< ResultStatement_type, wchar_t > ResultStatement_traits;

      const ResultStatement_type&
      ResultStatement () const;

      ResultStatement_type&
      ResultStatement ();

      void
      ResultStatement (const ResultStatement_type& x);

      void
      ResultStatement (::std::unique_ptr< ResultStatement_type > p);

      // ResultStatus
      //
      typedef ::xsd::qif30::CheckStatusEnumType ResultStatus_type;
      typedef ::xsd::cxx::tree::traits< ResultStatus_type, wchar_t > ResultStatus_traits;

      const ResultStatus_type&
      ResultStatus () const;

      ResultStatus_type&
      ResultStatus ();

      void
      ResultStatus (const ResultStatus_type& x);

      void
      ResultStatus (::std::unique_ptr< ResultStatus_type > p);

      // Constructors.
      //
      ProductDataQualityCheckType ();

      ProductDataQualityCheckType (const Type_type&,
                                   const Description_type&,
                                   const Requirements_type&,
                                   const ResultStatement_type&,
                                   const ResultStatus_type&);

      ProductDataQualityCheckType (::std::unique_ptr< Type_type >,
                                   const Description_type&,
                                   const Requirements_type&,
                                   const ResultStatement_type&,
                                   const ResultStatus_type&);

      ProductDataQualityCheckType (const xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ProductDataQualityCheckType (const ProductDataQualityCheckType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ProductDataQualityCheckType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductDataQualityCheckType&
      operator= (const ProductDataQualityCheckType& x);

      virtual 
      ~ProductDataQualityCheckType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Type_type > Type_;
      ::xsd::cxx::tree::one< Description_type > Description_;
      ::xsd::cxx::tree::one< Requirements_type > Requirements_;
      SourceOfRequiredness_optional SourceOfRequiredness_;
      ApplicationTool_optional ApplicationTool_;
      XsltFile_optional XsltFile_;
      ::xsd::cxx::tree::one< ResultStatement_type > ResultStatement_;
      ::xsd::cxx::tree::one< ResultStatus_type > ResultStatus_;
    };

    class QIF30_SYMBOL_DECL CheckStatusEnumType: public ::xml_schema::nmtoken
    {
      public:
      enum value
      {
        PASS,
        FAIL,
        PENDING
      };

      CheckStatusEnumType ();

      CheckStatusEnumType (value v);

      CheckStatusEnumType (const wchar_t* v);

      CheckStatusEnumType (const ::std::wstring& v);

      CheckStatusEnumType (const ::xml_schema::nmtoken& v);

      CheckStatusEnumType (const xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CheckStatusEnumType (const xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CheckStatusEnumType (const ::std::wstring& s,
                           const xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CheckStatusEnumType (const CheckStatusEnumType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

#ifdef XSD_CXX11
      CheckStatusEnumType&
      operator= (const CheckStatusEnumType&) = default;
#endif

      virtual CheckStatusEnumType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      CheckStatusEnumType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_CheckStatusEnumType_convert ();
      }

      protected:
      value
      _xsd_CheckStatusEnumType_convert () const;

      public:
      static const wchar_t* const _xsd_CheckStatusEnumType_literals_[3];
      static const value _xsd_CheckStatusEnumType_indexes_[3];
    };

    class QIF30_SYMBOL_DECL ProductDataQualityChecksType: public ::xml_schema::type
    {
      public:
      // ProductDataQualityCheck
      //
      typedef ::xsd::qif30::ProductDataQualityCheckType ProductDataQualityCheck_type;
      typedef ::xsd::cxx::tree::sequence< ProductDataQualityCheck_type > ProductDataQualityCheck_sequence;
      typedef xsd::cxx::tree::sequence< ProductDataQualityCheck_type >::iterator ProductDataQualityCheck_iterator;
      typedef xsd::cxx::tree::sequence< ProductDataQualityCheck_type >::const_iterator ProductDataQualityCheck_const_iterator;
      typedef ::xsd::cxx::tree::traits< ProductDataQualityCheck_type, wchar_t > ProductDataQualityCheck_traits;

      const ProductDataQualityCheck_sequence&
      ProductDataQualityCheck () const;

      ProductDataQualityCheck_sequence&
      ProductDataQualityCheck ();

      void
      ProductDataQualityCheck (const ProductDataQualityCheck_sequence& s);

      // n
      //
      typedef ::xsd::qif30::NaturalType n_type;
      typedef ::xsd::cxx::tree::traits< n_type, wchar_t > n_traits;

      const n_type&
      n () const;

      n_type&
      n ();

      void
      n (const n_type& x);

      void
      n (::std::unique_ptr< n_type > p);

      // Constructors.
      //
      ProductDataQualityChecksType ();

      ProductDataQualityChecksType (const n_type&);

      ProductDataQualityChecksType (const xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      ProductDataQualityChecksType (const ProductDataQualityChecksType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual ProductDataQualityChecksType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductDataQualityChecksType&
      operator= (const ProductDataQualityChecksType& x);

      virtual 
      ~ProductDataQualityChecksType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ProductDataQualityCheck_sequence ProductDataQualityCheck_;
      ::xsd::cxx::tree::one< n_type > n_;
    };

    class QIF30_SYMBOL_DECL ProductDataQualityType: public ::xml_schema::type
    {
      public:
      // ChecksPerformed
      //
      typedef ::xml_schema::boolean ChecksPerformed_type;
      typedef ::xsd::cxx::tree::traits< ChecksPerformed_type, wchar_t > ChecksPerformed_traits;

      const ChecksPerformed_type&
      ChecksPerformed () const;

      ChecksPerformed_type&
      ChecksPerformed ();

      void
      ChecksPerformed (const ChecksPerformed_type& x);

      // ChecksApproved
      //
      typedef ::xml_schema::boolean ChecksApproved_type;
      typedef ::xsd::cxx::tree::traits< ChecksApproved_type, wchar_t > ChecksApproved_traits;

      const ChecksApproved_type&
      ChecksApproved () const;

      ChecksApproved_type&
      ChecksApproved ();

      void
      ChecksApproved (const ChecksApproved_type& x);

      // Declaration
      //
      typedef ::xml_schema::string Declaration_type;
      typedef ::xsd::cxx::tree::traits< Declaration_type, wchar_t > Declaration_traits;

      const Declaration_type&
      Declaration () const;

      Declaration_type&
      Declaration ();

      void
      Declaration (const Declaration_type& x);

      void
      Declaration (::std::unique_ptr< Declaration_type > p);

      // ProductDataQualityChecks
      //
      typedef ::xsd::qif30::ProductDataQualityChecksType ProductDataQualityChecks_type;
      typedef ::xsd::cxx::tree::optional< ProductDataQualityChecks_type > ProductDataQualityChecks_optional;
      typedef ::xsd::cxx::tree::traits< ProductDataQualityChecks_type, wchar_t > ProductDataQualityChecks_traits;

      const ProductDataQualityChecks_optional&
      ProductDataQualityChecks () const;

      ProductDataQualityChecks_optional&
      ProductDataQualityChecks ();

      void
      ProductDataQualityChecks (const ProductDataQualityChecks_type& x);

      void
      ProductDataQualityChecks (const ProductDataQualityChecks_optional& x);

      void
      ProductDataQualityChecks (::std::unique_ptr< ProductDataQualityChecks_type > p);

      // Constructors.
      //
      ProductDataQualityType ();

      ProductDataQualityType (const ChecksPerformed_type&,
                              const ChecksApproved_type&,
                              const Declaration_type&);

      ProductDataQualityType (const xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      ProductDataQualityType (const ProductDataQualityType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual ProductDataQualityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ProductDataQualityType&
      operator= (const ProductDataQualityType& x);

      virtual 
      ~ProductDataQualityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ChecksPerformed_type > ChecksPerformed_;
      ::xsd::cxx::tree::one< ChecksApproved_type > ChecksApproved_;
      ::xsd::cxx::tree::one< Declaration_type > Declaration_;
      ProductDataQualityChecks_optional ProductDataQualityChecks_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xsd
{
  namespace qif30
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xsd
{
  namespace qif30
  {
    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const InspectionProgramType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const InspectionSoftwareItemsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const EnvironmentType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const EnvironmentsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const InspectionTraceabilityType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const PreInspectionTraceabilityType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProductTraceabilityType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ActualProductTraceabilityType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProcessParameterType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProcessParametersType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ManufacturingProcessTraceabilityType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ManufacturingProcessTraceabilitiesType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ErrorsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const PartialInspectionType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const TimeDescriptionEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const TimeDescriptionEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const TimeDescriptionEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const TimeDescriptionType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const InspectionModeEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const InspectionModeEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const InspectionModeEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const InspectionScopeEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const InspectionScopeEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const InspectionScopeEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ValidationCountsType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProductDataQualityAreaEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const ProductDataQualityAreaEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const ProductDataQualityAreaEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProductDataQualityAreaType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProductDataQualityCheckType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const CheckStatusEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMAttr&, const CheckStatusEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (::xml_schema::list_stream&,
                const CheckStatusEnumType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProductDataQualityChecksType&);

    QIF30_SYMBOL_DECL
    void
    operator<< (xercesc::DOMElement&, const ProductDataQualityType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___QIFLIBRARY_TRACEABILITY_HXX
